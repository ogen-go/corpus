{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stratisproject/Documentation"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "source/Developer Resources/API Reference/openapi.yaml",
			"byteSize": 114693,
			"content": "openapi: 3.0.0\ninfo:\n  version: '1'\n  title: Stratis Node API\n  description: Access to the Stratis Node's core features.\npaths:\n  /api/AddressBook/address:\n    post:\n      tags:\n        - AddressBook\n      summary: Adds an entry to the address book.\n      operationId: AddAddress\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/AddressBookEntryRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddressBookEntryRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/AddressBookEntryRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/AddressBookEntryRequest'\n        required: true\n      responses:\n        '200':\n          description: The address book entry was added\n        '400':\n          description: Invalid address book entry request or unexpected exception occurred\n        '409':\n          description: Address book entry already exists\n        '500':\n          description: The request is null\n    delete:\n      tags:\n        - AddressBook\n      summary: Removes an entry from the address book.\n      operationId: RemoveAddress\n      parameters:\n        - name: label\n          in: query\n          description: The label of the entry to remove.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The address book entry was removed\n        '400':\n          description: Unexpected exception occurred\n        '404':\n          description: Address book entry not found\n        '500':\n          description: The label is null or empty\n  /api/AddressBook:\n    get:\n      tags:\n        - AddressBook\n      summary: Gets the address book entries with the option to implement pagination\n      description: \u003e-\n        For example, specifying a value of 40 for skip and a value of 20 for\n        take gets entries 21 to 40. If neither skip or take arguments are\n        provided, then the entire address book is retrieved. An address book can\n        be accessed from a wallet, but it is a standalone feature, which is not\n        attached to any wallet.\n      operationId: GetAddressBook\n      parameters:\n        - name: skip\n          in: query\n          description: \u003e-\n            A value representing how many entries to skip before retrieving the\n            first entry.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: take\n          in: query\n          description: A value representing how many entries to retrieve.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Returns the address book\n        '400':\n          description: Unexpected exception occurred\n        '404':\n          description: Address book was not found\n  /api/BlockStore/addressindexertip:\n    get:\n      tags:\n        - BlockStore\n      summary: \u003e-\n        Retrieves the\n        Stratis.Bitcoin.Features.BlockStore.Controllers.BlockStoreController.addressIndexer's\n        tip.\n      operationId: GetAddressIndexerTip\n      responses:\n        '200':\n          description: Returns the address indexer tip\n        '400':\n          description: Unexpected exception occurred\n  /api/BlockStore/block:\n    get:\n      tags:\n        - BlockStore\n      summary: Retrieves the block which matches the supplied block hash.\n      operationId: GetBlock\n      parameters:\n        - name: Hash\n          in: query\n          description: The hash of the required block.\n          required: true\n          schema:\n            type: string\n        - name: ShowTransactionDetails\n          in: query\n          description: \u003e-\n            A flag that indicates whether to return each block transaction\n            complete with details or simply return transaction hashes (TX IDs).\n          required: false\n          schema:\n            type: boolean\n        - name: OutputJson\n          in: query\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns data about the block or block not found message\n        '400':\n          description: 'Block hash invalid, or an unexpected exception occurred'\n  /api/BlockStore/GetBlockCount:\n    get:\n      tags:\n        - BlockStore\n      summary: Gets the current consensus tip height.\n      description: This is an API implementation of an RPC call.\n      operationId: GetBlockCount\n      responses:\n        '200':\n          description: Returns the block count\n        '400':\n          description: Unexpected exception occurred\n  /api/BlockStore/getaddressesbalances:\n    get:\n      tags:\n        - BlockStore\n      summary: \u003e-\n        Provides balance of the given addresses confirmed with at least\n        minConfirmations confirmations.\n      operationId: GetAddressesBalances\n      parameters:\n        - name: addresses\n          in: query\n          description: A comma delimited set of addresses that will be queried.\n          required: false\n          schema:\n            type: string\n        - name: minConfirmations\n          in: query\n          description: \u003e-\n            Only blocks below consensus tip less this parameter will be\n            considered.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Returns balances for the requested addresses\n        '400':\n          description: Unexpected exception occurred\n  /api/BlockStore/getverboseaddressesbalances:\n    get:\n      tags:\n        - BlockStore\n      summary: Provides verbose balance data of the given addresses.\n      operationId: GetVerboseAddressesBalancesData\n      parameters:\n        - name: addresses\n          in: query\n          description: A comma delimited set of addresses that will be queried.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns balances for the requested addresses\n        '400':\n          description: Unexpected exception occurred\n  /api/ConnectionManager/addnode:\n    get:\n      tags:\n        - ConnectionManager\n      summary: Sends a command to the connection manager.\n      description: This is an API implementation of an RPC call.\n      operationId: AddNodeAPI\n      parameters:\n        - name: endpoint\n          in: query\n          description: \u003e-\n            The endpoint in string format. Specify an IP address. The default\n            port for the network will be added automatically.\n          required: false\n          schema:\n            type: string\n        - name: command\n          in: query\n          description: 'The command to run. {add, remove, onetry}'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The node was added\n        '400':\n          description: An exception occurred\n  /api/ConnectionManager/getpeerinfo:\n    get:\n      tags:\n        - ConnectionManager\n      summary: Gets information about this node.\n      description: This is an API implementation of an RPC call.\n      operationId: GetPeerInfoAPI\n      responses:\n        '200':\n          description: Returns peer information list\n        '400':\n          description: Unexpected exception occurred\n  /api/Consensus/deploymentflags:\n    get:\n      tags:\n        - Consensus\n      summary: Get the threshold states of softforks currently being deployed.\n      description: 'Allowable states are: Defined, Started, LockedIn, Failed, Active.'\n      operationId: DeploymentFlags\n      responses:\n        '200':\n          description: Returns the list of deployment flags\n        '400':\n          description: Unexpected exception occurred\n  /api/Consensus/getbestblockhash:\n    get:\n      tags:\n        - Consensus\n      summary: Gets the hash of the block at the consensus tip.\n      description: This is an API implementation of an RPC call.\n      operationId: GetBestBlockHashAPI\n      responses:\n        '200':\n          description: Returns the block hash\n        '400':\n          description: Unexpected exception occurred\n  /api/Consensus/getblockhash:\n    get:\n      tags:\n        - Consensus\n      summary: Gets the hash of the block at a given height.\n      description: This is an API implementation of an RPC call.\n      operationId: GetBlockHashAPI\n      parameters:\n        - name: height\n          in: query\n          description: The height of the block to get the hash for.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Returns the block hash\n        '400':\n          description: Unexpected exception occurred\n  /api/Dashboard/Stats:\n    get:\n      tags:\n        - Dashboard\n      summary: Gets a web page containing the last log output for this node.\n      operationId: Stats\n      responses:\n        '200':\n          description: Returns webpage result\n  /api/Dashboard/AsyncLoopsStats:\n    get:\n      tags:\n        - Dashboard\n      summary: Returns a web page with Async Loops statistics\n      operationId: AsyncLoopsStats\n      responses:\n        '200':\n          description: Returns webpage result\n  /api/DefaultVoting/fedmembers:\n    get:\n      tags:\n        - DefaultVoting\n      summary: Retrieves a list of active federation members.\n      operationId: GetFederationMembers\n      responses:\n        '200':\n          description: Returns the active members\n        '400':\n          description: Unexpected exception occurred\n  /api/DefaultVoting/pendingpolls:\n    get:\n      tags:\n        - DefaultVoting\n      summary: Retrieves a list of active polls.\n      operationId: GetPendingPolls\n      responses:\n        '200':\n          description: Returns the active polls\n        '400':\n          description: Unexpected exception occurred\n  /api/DefaultVoting/finishedpolls:\n    get:\n      tags:\n        - DefaultVoting\n      summary: Retrieves a list of finished polls.\n      operationId: GetFinishedPolls\n      responses:\n        '200':\n          description: Returns the finished polls\n        '400':\n          description: Unexpected exception occurred\n  /api/DefaultVoting/whitelistedhashes:\n    get:\n      tags:\n        - DefaultVoting\n      summary: Retrieves a list of whitelisted hashes.\n      operationId: GetWhitelistedHashes\n      responses:\n        '200':\n          description: Returns the hashes\n        '400':\n          description: Unexpected exception occurred\n  /api/DefaultVoting/schedulevote-whitelisthash:\n    post:\n      tags:\n        - DefaultVoting\n      summary: Votes to add a hash to the whitelist.\n      operationId: VoteWhitelistHash\n      requestBody:\n        $ref: '#/components/requestBodies/HashModel'\n      responses:\n        '200':\n          description: Voted to add hash to whitelist\n        '400':\n          description: \u003e-\n            Invalid request, node is not a federation member, or an unexpected\n            exception occurred\n        '500':\n          description: The request is null\n  /api/DefaultVoting/schedulevote-removehash:\n    post:\n      tags:\n        - DefaultVoting\n      summary: Votes to remove a hash from the whitelist.\n      operationId: VoteRemoveHash\n      requestBody:\n        $ref: '#/components/requestBodies/HashModel'\n      responses:\n        '200':\n          description: Voted to remove hash from whitelist\n        '400':\n          description: \u003e-\n            Invalid request, node is not a federation member, or an unexpected\n            exception occurred\n        '500':\n          description: The request is null\n  /api/DefaultVoting/scheduledvotes:\n    get:\n      tags:\n        - DefaultVoting\n      summary: Retrieves the scheduled voting data.\n      operationId: GetScheduledVotes\n      responses:\n        '200':\n          description: Returns the voting data\n        '400':\n          description: Unexpected exception occurred\n  /api/Diagnostic/GetConnectedPeersInfo:\n    get:\n      tags:\n        - Diagnostic\n      summary: Returns the connected peers with some information\n      operationId: GetConnectedPeersInfo\n      responses:\n        '200':\n          description: Returns connected peers information\n        '400':\n          description: Unexpected exception occurred\n  /api/Diagnostic/GetStatus:\n    get:\n      tags:\n        - Diagnostic\n      summary: Gets the Diagnostic Feature status.\n      operationId: GetStatus\n      responses:\n        '200':\n          description: Returns the status\n        '400':\n          description: Unexpected exception occurred\n  /api/Diagnostic/GetPeerStatistics:\n    get:\n      tags:\n        - Diagnostic\n      summary: Returns the connected peers with some statistical information.\n      operationId: GetPeerStatistics\n      parameters:\n        - name: connectedOnly\n          in: query\n          description: 'if set to {true} returns statistics related to connected peers only.'\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns connected peers statistics\n          content:\n            text/plain:\n              schema:\n                uniqueItems: false\n                type: array\n                items:\n                  $ref: '#/components/schemas/PeerStatisticsModel'\n            application/json:\n              schema:\n                uniqueItems: false\n                type: array\n                items:\n                  $ref: '#/components/schemas/PeerStatisticsModel'\n            text/json:\n              schema:\n                uniqueItems: false\n                type: array\n                items:\n                  $ref: '#/components/schemas/PeerStatisticsModel'\n        '400':\n          description: Unexpected exception occurred\n  /api/Diagnostic/StartCollectingPeerStatistics:\n    get:\n      tags:\n        - Diagnostic\n      summary: Starts collecting peers statistics.\n      operationId: StartCollectingPeerStatistics\n      responses:\n        '200':\n          description: Peer statistics collection started\n        '400':\n          description: Unexpected exception occurred\n  /api/Diagnostic/StopCollectingPeerStatistics:\n    get:\n      tags:\n        - Diagnostic\n      summary: Stops collecting peers statistics.\n      description: \u003e-\n        Stopping a running peer statistic collecotr doesn't clear obtained\n        results.\n      operationId: StopCollectingPeerStatistics\n      responses:\n        '200':\n          description: Peer statistics collection stopped\n        '400':\n          description: Unexpected exception occurred\n  /api/FederationVoting/schedulevote-addfedmember:\n    post:\n      tags:\n        - FederationVoting\n      summary: Votes to add a federation member.\n      operationId: VoteAddFedMember\n      requestBody:\n        $ref: '#/components/requestBodies/HexPubKeyModel'\n      responses:\n        '200':\n          description: Voted to add member\n        '400':\n          description: \u003e-\n            Invalid request, node is not a federation member, or an unexpected\n            exception occurred\n        '500':\n          description: The request is null\n  /api/FederationVoting/schedulevote-kickfedmember:\n    post:\n      tags:\n        - FederationVoting\n      summary: Votes to kick a federation member.\n      operationId: VoteKickFedMember\n      requestBody:\n        $ref: '#/components/requestBodies/HexPubKeyModel'\n      responses:\n        '200':\n          description: Voted to kick member\n        '400':\n          description: \u003e-\n            Invalid request, node is not a federation member, or an unexpected\n            exception occurred\n        '500':\n          description: The request is null\n  /api/Mempool/getrawmempool:\n    get:\n      tags:\n        - Mempool\n      summary: Gets a hash of each transaction in the memory pool.\n      description: \u003e-\n        A list of the TX IDs for all the transactions in the mempool are\n        retrieved.\n      operationId: GetRawMempoolAsync\n      responses:\n        '200':\n          description: Returns memory pool transactions\n        '400':\n          description: Unexpected exception occurred\n  /api/Network/disconnect:\n    post:\n      tags:\n        - Network\n      summary: Disconnects a connected peer.\n      operationId: DisconnectPeer\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/DisconnectPeerViewModel'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DisconnectPeerViewModel'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/DisconnectPeerViewModel'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/DisconnectPeerViewModel'\n        description: The model that represents the peer to disconnect.\n      responses:\n        '200':\n          description: Peer disconnected\n        '400':\n          description: Unexpected exception occurred\n  /api/Network/setban:\n    post:\n      tags:\n        - Network\n      summary: Adds or remove a peer from the node's banned peers list.\n      operationId: SetBan\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/SetBanPeerViewModel'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetBanPeerViewModel'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/SetBanPeerViewModel'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/SetBanPeerViewModel'\n        description: \u003e-\n          The model that represents the peer to add or remove from the banned\n          list.\n      responses:\n        '200':\n          description: Ban status updated\n        '400':\n          description: An exception occurred\n  /api/Network/getbans:\n    get:\n      tags:\n        - Network\n      summary: Retrieves a list of all banned peers.\n      operationId: GetBans\n      responses:\n        '200':\n          description: Returns banned peers\n        '400':\n          description: Unexpected exception occurred\n  /api/Network/clearbanned:\n    post:\n      tags:\n        - Network\n      summary: Clears the node of all banned peers.\n      description: \u003e-\n        See\n        \"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\"\n      operationId: ClearBannedPeers\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: boolean\n          application/json:\n            schema:\n              type: boolean\n          text/json:\n            schema:\n              type: boolean\n          application/*+json:\n            schema:\n              type: boolean\n        description: \u003e-\n          This body parameter is here to prevent a CORS call from triggering\n          method execution.\n      responses:\n        '200':\n          description: Bans cleared\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/status:\n    get:\n      tags:\n        - Node\n      summary: Gets general information about this node.\n      description: \u003e-\n        Including the version, protocol version, network name, coin ticker, and\n        consensus height.\n      operationId: Status\n      responses:\n        '200':\n          description: Returns node information\n  /api/Node/getblockheader:\n    get:\n      tags:\n        - Node\n      summary: Gets the block header of a block identified by a block hash.\n      description: Binary serialization is not supported with this method.\n      operationId: GetBlockHeader\n      parameters:\n        - name: hash\n          in: query\n          description: The hash of the block to retrieve.\n          required: false\n          schema:\n            type: string\n        - name: isJsonFormat\n          in: query\n          description: \u003e-\n            A flag that specifies whether to return the block header in the JSON\n            format. Defaults to true. A value of false is currently not\n            supported.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: Returns block header\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/getrawtransaction:\n    get:\n      tags:\n        - Node\n      summary: Gets a raw transaction that is present on this full node.\n      description: \"This method first searches the transaction pool and then tries the block store.\\r\\n\\nRequires **txindex=1**, otherwise only transactions that spend or create UTXOs for a stored wallet can be returned.\"\n      operationId: GetRawTransactionAsync\n      parameters:\n        - name: trxid\n          in: query\n          description: The transaction ID (a hash of the trancaction).\n          required: false\n          schema:\n            type: string\n        - name: verbose\n          in: query\n          description: \u003e-\n            A flag that specifies whether to return verbose information about\n            the transaction.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Returns the transaction\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/decoderawtransaction:\n    post:\n      tags:\n        - Node\n      summary: Gets a JSON representation for a given transaction in hex format.\n      operationId: DecodeRawTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/DecodeRawTransactionModel'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DecodeRawTransactionModel'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/DecodeRawTransactionModel'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/DecodeRawTransactionModel'\n        description: \u003e-\n          A class containing the necessary parameters for a block search\n          request.\n      responses:\n        '200':\n          description: Returns the transaction\n        '400':\n          description: Invalid request or unexpected exception occurred\n  /api/Node/validateaddress:\n    get:\n      tags:\n        - Node\n      summary: Validates a bech32 or base58 bitcoin address.\n      operationId: ValidateAddress\n      parameters:\n        - name: address\n          in: query\n          description: A Bitcoin address to validate in a string format.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns validation result\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/gettxout:\n    get:\n      tags:\n        - Node\n      summary: Gets the unspent outputs of a specific vout in a transaction.\n      description: An API implementation of RPC call.\n      operationId: GetTxOutAsync\n      parameters:\n        - name: trxid\n          in: query\n          description: The transaction ID as a hash string.\n          required: false\n          schema:\n            type: string\n        - name: vout\n          in: query\n          description: The vout to get the unspent outputs for.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - name: includeMemPool\n          in: query\n          description: \u003e-\n            A flag that specifies whether to include transactions in the\n            mempool.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: Returns transaction output\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/shutdown:\n    post:\n      tags:\n        - Node\n      summary: Triggers a shutdown of this node.\n      description: \u003e-\n        See\n        https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n      operationId: Shutdown\n      requestBody:\n        $ref: '#/components/requestBodies/ShutdownCorsprotection'\n      responses:\n        '200':\n          description: Node was shutdown\n  /api/Node/stop:\n    post:\n      tags:\n        - Node\n      summary: Triggers a shutdown of this node.\n      operationId: stop\n      requestBody:\n        $ref: '#/components/requestBodies/ShutdownCorsprotection'\n      responses:\n        '200':\n          description: Node was shutdown\n  /api/Node/loglevels:\n    put:\n      tags:\n        - Node\n      summary: Changes the log levels for the specified loggers.\n      operationId: UpdateLogLevel\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/LogRulesRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LogRulesRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/LogRulesRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/LogRulesRequest'\n        description: The request containing the loggers to modify.\n      responses:\n        '200':\n          description: Log level updated\n        '400':\n          description: Request is invalid or an unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Node/logrules:\n    get:\n      tags:\n        - Node\n      summary: Get the enabled log rules.\n      operationId: GetLogRules\n      responses:\n        '200':\n          description: Returns log rules\n        '400':\n          description: Unexpected exception occurred\n  /api/Node/asyncloops:\n    get:\n      tags:\n        - Node\n      summary: \u003e-\n        Get the currently running async loops/delegates/tasks for diagnostic\n        purposes.\n      operationId: GetAsyncLoops\n      responses:\n        '200':\n          description: Returns running tasks\n        '400':\n          description: Unexpected exception occurred\n  /api/RPC/callbyname:\n    post:\n      tags:\n        - RPC\n      summary: Makes a Remote Procedural Call method by name.\n      operationId: CallByName\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              type: object\n          application/json:\n            schema:\n              type: object\n          text/json:\n            schema:\n              type: object\n          application/*+json:\n            schema:\n              type: object\n        description: A JObject containing the name of the method to process.\n      responses:\n        '200':\n          description: Returns method response\n        '400':\n          description: An exception occurred\n        '405':\n          description: RPC is disabled\n        '500':\n          description: Body is null\n  /api/RPC/listmethods:\n    get:\n      tags:\n        - RPC\n      summary: Lists the available Remote Procedural Call methods on this node.\n      operationId: ListMethods\n      responses:\n        '200':\n          description: Returns available methods\n        '400':\n          description: Unexpected exception occurred\n        '405':\n          description: RPC is disabled\n  /api/SmartContracts/code:\n    get:\n      tags:\n        - SmartContracts\n      summary: Gets the bytecode for a smart contract as a hexadecimal string.\n      description: \u003e-\n        The bytecode is decompiled to C# source, which is returned as well. Be\n        aware, it is the bytecode which is being executed, so this is the source\n        of truth.\n      operationId: GetCode\n      parameters:\n        - name: address\n          in: query\n          description: \u003e-\n            The address of the smart contract to retrieve as bytecode and C#\n            source.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns code response (may be unsuccessful)\n  /api/SmartContracts/balance:\n    get:\n      tags:\n        - SmartContracts\n      summary: Gets the balance of a smart contract.\n      description: This method only works for smart contract addresses.\n      operationId: GetBalance\n      parameters:\n        - name: address\n          in: query\n          description: The address of the smart contract to retrieve the balance for.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns balance\n  /api/SmartContracts/storage:\n    get:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Gets a single piece of smart contract data, which was stored as a\n        key–value pair using the SmartContract.PersistentState property.\n      description: \"The method performs a lookup in the smart contract state database for the supplied smart contract address and key. The value associated with the given key, deserialized for the specified data type, is returned. \\r\\n\\nIf the key does not exist or deserialization fails, the method  returns the default value for the specified type.\"\n      operationId: GetStorage\n      parameters:\n        - name: ContractAddress\n          in: query\n          description: The address of the smart contract.\n          required: true\n          schema:\n            type: string\n        - name: StorageKey\n          in: query\n          description: The key for the piece of stored data to retrieve.\n          required: true\n          schema:\n            type: string\n        - name: DataType\n          in: query\n          description: The stored data type.\n          required: true\n          schema:\n            type: string\n            enum:\n              - Bool\n              - Byte\n              - Char\n              - String\n              - UInt\n              - Int\n              - ULong\n              - Long\n              - Address\n              - ByteArray\n      responses:\n        '200':\n          description: Returns data response (may be unsuccessful)\n        '400':\n          description: Invalid request\n  /api/SmartContracts/receipt:\n    get:\n      tags:\n        - SmartContracts\n      summary: Gets a smart contract transaction receipt.\n      description: \u003e-\n        Receipts contain information about how a smart contract transaction was\n        executed. This includes the value returned from a smart contract call\n        and how much gas was used.\n      operationId: GetReceipt\n      parameters:\n        - name: txHash\n          in: query\n          description: A hash of the smart contract transaction (the transaction ID).\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns transaction receipt\n        '400':\n          description: Transaction not found\n  /api/SmartContracts/receipt-search:\n    get:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Searches a Smart Contract's receipts for those which match a specific\n        event.\n      description: \"The SmartContract.Log() function is capable of storing C# structs, and structs are used to store information about different events occurring on the smart contract.\\r\\n\\nFor example, a \\\"TransferLog\\\" struct  could contain \\\"From\\\" and \\\"To\\\" fields and be used to log when a smart contract makes a transfer of funds from one wallet to another. The log entries are held inside the smart contract, indexed using the name of the struct, and are linked to individual transaction receipts.\\r\\n\\nTherefore, it is possible to return a smart contract's transaction receipts which match a specific event (as defined by the struct name).\"\n      operationId: ReceiptSearch\n      parameters:\n        - name: contractAddress\n          in: query\n          description: The address of the smart contract to retrieve the receipts for.\n          required: false\n          schema:\n            type: string\n        - name: eventName\n          in: query\n          description: The name of the event struct to retrieve matching receipts for.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns requested receipts\n        '500':\n          description: Contract does not exist\n  /api/SmartContracts/build-create:\n    post:\n      tags:\n        - SmartContracts\n      summary: Builds a transaction to create a smart contract.\n      description: \"Although the transaction is created, the smart contract is not deployed on the network, and no gas or fees are consumed. Instead the created transaction is returned as a hexadecimal string within a JSON object.\\r\\n\\nTransactions built using this method can be deployed using /api/SmartContractWallet/send-transaction. However, unless there is a need to closely examine the transaction before deploying it, you should use api/SmartContracts/build-and-send-create.\"\n      operationId: BuildCreateSmartContractTransaction\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCreateContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns create contract response\n        '400':\n          description: Invalid request or failed to build transaction\n  /api/SmartContracts/build-call:\n    post:\n      tags:\n        - SmartContracts\n      summary: Builds a transaction to call a smart contract method.\n      description: \"Although the transaction is created, the call is not made, and no gas or fees are consumed. Instead the created transaction is returned as a JSON object.\\r\\n\\nTransactions built using this method can be deployed using /api/SmartContractWallet/send-transaction. However, unless there is a need to closely examine the transaction before deploying it, you should use api/SmartContracts/build-and-send-call.\"\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCallContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns call contract response\n        '400':\n          description: Invalid request or failed to build transaction\n  /api/SmartContracts/build-transaction:\n    post:\n      tags:\n        - SmartContracts\n      summary: Builds a transaction to transfer funds on a smart contract network.\n      operationId: BuildTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/BuildContractTransactionRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildContractTransactionRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/BuildContractTransactionRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/BuildContractTransactionRequest'\n        description: \u003e-\n          An object containing the necessary parameters to build the\n          transaction.\n      responses:\n        '200':\n          description: Returns transaction response\n        '400':\n          description: Invalid request or unexpected exception occurred\n  /api/SmartContracts/estimate-fee:\n    post:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Gets a fee estimate for a specific smart contract account-based transfer\n        transaction.\n      description: \u003e-\n        This differs from fee estimation on standard networks due to the way\n        inputs must be selected for account-based transfers.\n      operationId: EstimateFee\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/ScTxFeeEstimateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScTxFeeEstimateRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/ScTxFeeEstimateRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/ScTxFeeEstimateRequest'\n        description: \u003e-\n          An object containing the parameters used to build the the fee\n          estimation transaction.\n      responses:\n        '200':\n          description: Returns estimated fee\n        '400':\n          description: Invalid request or unexpected exception occurred\n  /api/SmartContracts/build-and-send-create:\n    post:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Builds a transaction to create a smart contract and then broadcasts the\n        transaction to the network.\n      description: \u003e-\n        If the deployment is successful, methods on the smart contract can be\n        subsequently called.\n      operationId: BuildAndSendCreateSmartContractTransactionAsync\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCreateContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns create transaction response\n        '400':\n          description: \u003e-\n            Invalid request, failed to build transaction, or cannot broadcast\n            transaction\n        '403':\n          description: No connected peers\n  /api/SmartContracts/build-and-send-call:\n    post:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Builds a transaction to call a smart contract method and then broadcasts\n        the transaction to the network.\n      description: \u003e-\n        If the call is successful, any changes to the smart contract balance or\n        persistent data are propagated across the network.\n      operationId: BuildAndSendCallSmartContractTransactionAsync\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCallContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns call transaction response\n        '400':\n          description: Invalid request or cannot broadcast transaction\n        '403':\n          description: No connected peers\n  /api/SmartContracts/local-call:\n    post:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Makes a local call to a method on a smart contract that has been\n        successfully deployed.\n      description: \"A transaction is not created as the call is never propagated across the network. All persistent data held by the smart contract is copied before the call is made.\\r\\n\\nOnly this copy is altered by the call and the actual data is unaffected. Even if an amount of funds are specified to send with the call, no funds are in fact sent.\\r\\n\\nThe purpose of this function is to query and test methods.\"\n      operationId: LocalCallSmartContractTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/LocalCallContractRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LocalCallContractRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/LocalCallContractRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/LocalCallContractRequest'\n        description: \u003e-\n          An object containing the necessary parameters to build the\n          transaction.\n      responses:\n        '200':\n          description: Returns call response\n        '400':\n          description: Invalid request\n        '500':\n          description: Unable to deserialize method parameters\n  /api/SmartContracts/address-balances:\n    get:\n      tags:\n        - SmartContracts\n      summary: \u003e-\n        Gets all addresses owned by a wallet which have a balance associated\n        with them.\n      description: \"This method effectively returns the balance of all the UTXOs associated with a wallet.\\r\\n\\nIn a case where multiple UTXOs are associated with one address, the amounts are tallied to give a total for that address.\"\n      operationId: GetAddressesWithBalances\n      parameters:\n        - name: walletName\n          in: query\n          description: The name of the wallet to retrieve the addresses from.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns address balances\n  /api/SmartContractWallet/account-addresses:\n    get:\n      tags:\n        - SmartContractWallet\n      summary: Gets a smart contract account address.\n      description: \"This is a single address to use for all smart contract interactions.\\r\\n\\nSmart contracts send funds to and store data at this address. For example, an ERC-20 token would store tokens allocated to a user at this address, although the actual data could, in fact, be anything. The address stores a history of smart contract create/call transactions.\\r\\n\\nIt also holds a UTXO list/balance based on UTXOs sent to it from smart contracts or user wallets. Once a smart contract has written data to this address, you need to use the address to provide gas and fees for smart contract calls involving that stored data (for that smart contract deployment).\\r\\n\\nIn the case of specific ERC-20 tokens allocated to you, using this address would be a requirement if you were to, for example, send some of the tokens to an exchange. It is therefore recommended that in order to keep an intact history and avoid complications, you use the single smart contract address provided by this function for all interactions with smart contracts.\\r\\n\\nIn addition, a smart contract address can be used to identify a contract deployer. Some methods, such as a withdrawal method on an escrow smart contract, should only be executed by the deployer, and in this case, it is the smart contract account address that identifies the deployer.\\r\\n\\nNote that this account differs from \\\"account 0\\\", which is the \\\"default\\r holder of multiple addresses\\\". Other address holding accounts can be created, but they should not be confused with the smart contract account, which is represented by a single address.\"\n      operationId: GetAccountAddresses\n      parameters:\n        - name: walletName\n          in: query\n          description: \u003e-\n            The name of the wallet to retrieve a smart contract account address\n            for.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns account addresses\n        '400':\n          description: Wallet name not provided or unexpected exception occurred\n  /api/SmartContractWallet/address-balance:\n    get:\n      tags:\n        - SmartContractWallet\n      summary: \u003e-\n        Gets the balance at a specific wallet address in STRAX (or the\n        respective token/coin).\n      description: \"This method gets the UTXOs at the address that the wallet can spend.\\r\\n\\nThe function can be used to query the balance at a smart contract account address\\r\\nsupplied by /api/SmartContractWallet/account-addresses.\"\n      operationId: GetAddressBalance\n      parameters:\n        - name: address\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns address balance\n  /api/SmartContractWallet/history:\n    get:\n      tags:\n        - SmartContractWallet\n      summary: Gets the history of a specific wallet address.\n      description: \"This includes the smart contract create and call transactions.\\r\\n\\nThis method can be used to query the balance at a smart contract account address supplied by /api/SmartContractWallet/account-addresses.\\r\\n\\nIt is advisable to use /api/SmartContractWallet/account-addresses to generate an address for all smart contract interactions. If this has been done, and that address is supplied to this method, a list of all smart contract interactions for a wallet will be returned.\"\n      operationId: GetHistory\n      parameters:\n        - name: WalletName\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: Address\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: Skip\n          in: query\n          description: \u003e-\n            An optional value allowing (with Take) pagination of the wallet's\n            history. If given, the member specifies the numbers of records in\n            the wallet's history to skip before beginning record retrieval;\n            otherwise the wallet history records are retrieved starting from 0.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: Take\n          in: query\n          description: \u003e-\n            An optional value allowing (with Skip) pagination of the wallet's\n            history. If given, the member specifies the number of records in the\n            wallet's history to retrieve in this call; otherwise all wallet\n            history records are retrieved.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Returns transaction history\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/SmartContractWallet/create:\n    post:\n      tags:\n        - SmartContractWallet\n      summary: \u003e-\n        Builds a transaction to create a smart contract and then broadcasts the\n        transaction to the network.\n      description: \u003e-\n        If the deployment is successful, methods on the smart contract can be\n        subsequently called.\n      operationId: Create\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCreateContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns build transaction response\n        '400':\n          description: \u003e-\n            Invalid request, failed to build transaction, or could not broadcast\n            transaction\n  /api/SmartContractWallet/call:\n    post:\n      tags:\n        - SmartContractWallet\n      summary: \u003e-\n        Builds a transaction to call a smart contract method and then broadcasts\n        the transaction to the network.\n      description: \u003e-\n        If the call is successful, any changes to the smart contract balance or\n        persistent data are propagated across the network.\n      operationId: Call\n      requestBody:\n        $ref: '#/components/requestBodies/BuildCallContractTransactionRequest'\n      responses:\n        '200':\n          description: Returns build transaction response\n        '400':\n          description: \u003e-\n            Invalid request, failed to build transaction, or could not broadcast\n            transaction\n  /api/SmartContractWallet/send-transaction:\n    post:\n      tags:\n        - SmartContractWallet\n      summary: \u003e-\n        Broadcasts a transaction, which either creates a smart contract or calls\n        a method on a smart contract.\n      description: \u003e-\n        If the contract deployment or method call are successful gas and fees\n        are consumed.\n      operationId: SendTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n        description: An object containing the necessary parameters to send the transaction.\n      responses:\n        '200':\n          description: Returns the broadcast transaction\n        '400':\n          description: \u003e-\n            Invalid request, failed to broadcast transaction or unexpected\n            exception occurred\n        '500':\n          description: 'Request is null, or no peers are connected'\n  /api/Wallet/mnemonic:\n    get:\n      tags:\n        - Wallet\n      summary: Generates a mnemonic to use for an HD wallet.\n      operationId: GenerateMnemonic\n      parameters:\n        - name: language\n          in: query\n          description: \u003e-\n            The language for the words in the mnemonic. The options are:\n            English, French, Spanish, Japanese, ChineseSimplified and\n            ChineseTraditional.\n          required: false\n          schema:\n            type: string\n            default: English\n        - name: wordCount\n          in: query\n          description: \u003e-\n            The number of words in the mnemonic. The options are: 12,15,18,21 or\n            24.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 12\n      responses:\n        '200':\n          description: Returns mnemonic\n        '400':\n          description: Unexpected exception occurred\n  /api/Wallet/create:\n    post:\n      tags:\n        - Wallet\n      summary: Creates a new wallet on this node.\n      operationId: CreateWallet\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/WalletCreationRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WalletCreationRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/WalletCreationRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/WalletCreationRequest'\n        description: An object containing the necessary parameters to create a wallet.\n      responses:\n        '200':\n          description: Returns mnemonic\n        '400':\n          description: Invalid request or problem creating wallet\n        '409':\n          description: Wallet already exists\n        '500':\n          description: Request is null\n  /api/Wallet/signmessage:\n    post:\n      tags:\n        - Wallet\n      summary: Signs a message and returns the signature.\n      operationId: SignMessage\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/SignMessageRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SignMessageRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/SignMessageRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/SignMessageRequest'\n        description: The object containing the parameters used to sign a message.\n      responses:\n        '200':\n          description: Returns signature\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/verifymessage:\n    post:\n      tags:\n        - Wallet\n      summary: Verifies the signature of a message.\n      operationId: VerifyMessage\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/VerifyRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/VerifyRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/VerifyRequest'\n        description: The object containing the parameters verify a signature.\n      responses:\n        '200':\n          description: Returns verification result\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/load:\n    post:\n      tags:\n        - Wallet\n      summary: Loads a previously created wallet.\n      operationId: Load\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/WalletLoadRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WalletLoadRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/WalletLoadRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/WalletLoadRequest'\n        description: \u003e-\n          An object containing the necessary parameters to load an existing\n          wallet\n      responses:\n        '200':\n          description: Wallet loaded\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '403':\n          description: Incorrect password\n        '404':\n          description: Wallet not found\n        '500':\n          description: Request is null\n  /api/Wallet/recover:\n    post:\n      tags:\n        - Wallet\n      summary: Recovers an existing wallet.\n      operationId: Recover\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/WalletRecoveryRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WalletRecoveryRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/WalletRecoveryRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/WalletRecoveryRequest'\n        description: An object containing the parameters used to recover a wallet.\n      responses:\n        '200':\n          description: Wallet recovered\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '404':\n          description: Wallet not found\n        '409':\n          description: Wallet already exists\n        '500':\n          description: Request is null\n  /api/Wallet/recover-via-extpubkey:\n    post:\n      tags:\n        - Wallet\n      summary: Recovers a wallet using its extended public key.\n      description: \u003e-\n        Note that the recovered wallet will not have a private key and is only\n        suitable for returning the wallet history using further API calls.\n      operationId: RecoverViaExtPubKey\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/WalletExtPubRecoveryRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WalletExtPubRecoveryRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/WalletExtPubRecoveryRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/WalletExtPubRecoveryRequest'\n        description: \u003e-\n          An object containing the parameters used to recover a wallet using its\n          extended public key.\n      responses:\n        '200':\n          description: Wallet recovered\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '404':\n          description: Wallet not found\n        '409':\n          description: Wallet already exists\n        '500':\n          description: Request is null\n  /api/Wallet/general-info:\n    get:\n      tags:\n        - Wallet\n      summary: Gets some general information about a wallet.\n      description: ' This includes the network the wallet is for, the creation date and time for the wallet, the height of the blocks the wallet currently holds, and the number of connected nodes.'\n      operationId: GetGeneralInfo\n      parameters:\n        - name: Name\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns wallet information\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/history:\n    get:\n      tags:\n        - Wallet\n      summary: Gets the history of a wallet.\n      description: \u003e-\n        This includes the transactions held by the entire wallet or a single\n        account if one is specified.\n      operationId: GetWalletHistory\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet to recover the history for.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: \u003e-\n            Optional. The name of the account to recover the history for. If no\n            account name is specified, the entire history of the wallet is\n            recovered.\n          required: false\n          schema:\n            type: string\n        - name: Address\n          in: query\n          description: \u003e-\n            Optional. If set, will filter the transaction history for all\n            transactions made to or from the given address.\n          required: false\n          schema:\n            type: string\n        - name: Skip\n          in: query\n          description: \u003e-\n            An optional value allowing (with Take) pagination of the wallet's\n            history. If given, the member specifies the numbers of records in\n            the  wallet's history to skip before beginning record retrieval;\n            otherwise the wallet history records are retrieved starting from 0.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: Take\n          in: query\n          description: \u003e-\n            An optional value allowing (with Skip) pagination of the wallet's\n            history. If given, the member specifies the number of records in the\n            wallet's history to retrieve in this call; otherwise all wallet\n            history records are retrieved.\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: SearchQuery\n          in: query\n          description: \"An optional string that can be used to match different data in the transaction records.\\r\\n\\nIt is possible to match on the following:\\r\\n\\nThe transaction ID, the address at which funds where received and the address to which funds where sent.\"\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns wallet history\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/balance:\n    get:\n      tags:\n        - Wallet\n      summary: Gets the balance of a wallet.\"\n      description: Both the confirmed and unconfirmed balance are returned.\n      operationId: GetWalletBalance\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet to retrieve the balance for.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: \u003e-\n            The name of the account to retrieve the balance for. If no account\n            name is supplied, then the balance for the entire wallet (all\n            accounts) is retrieved.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns wallet balances\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/received-by-address:\n    get:\n      tags:\n        - Wallet\n      summary: Gets the balance at a specific wallet address.\n      description: \u003e-\n        Both the confirmed and unconfirmed balance are returned. This method\n        gets the UTXOs at the address which the wallet can spend.\n      operationId: GetReceivedByAddress\n      parameters:\n        - name: Address\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns wallet address balances\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/maxbalance:\n    get:\n      tags:\n        - Wallet\n      summary: \u003e-\n        Gets the maximum spendable balance for an account along with the fee\n        required to spend it.\n      operationId: GetMaximumSpendableBalance\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet to retrieve the maximum spendable amount for.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: \u003e-\n            The name of the account to retrieve the maximum spendable amount\n            for.\n          required: false\n          schema:\n            type: string\n        - name: FeeType\n          in: query\n          description: \"The type of fee to use when working out the fee required to spend the amount.\\r\\nSpecify \\\"low\\\", \\\"medium\\\", or \\\"high\\\".\"\n          required: true\n          schema:\n            type: string\n        - name: AllowUnconfirmed\n          in: query\n          description: \u003e-\n            A flag that specifies whether to include the unconfirmed amounts\n            held at account addresses as spendable.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns spendable balance\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/spendable-transactions:\n    get:\n      tags:\n        - Wallet\n      summary: \u003e-\n        Gets the spendable transactions for an account with the option to\n        specify how many confirmations a transaction needs to be included.\n      operationId: GetSpendableTransactions\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet to retrieve the spendable transactions for.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: MinConfirmations\n          in: query\n          description: \"The minimum number of confirmations a transaction needs to have to be included.\\r\\n\\nTo include unconfirmed transactions, set this value to 0.\"\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Returns spendable transactions\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/estimate-txfee:\n    post:\n      tags:\n        - Wallet\n      summary: Gets a fee estimate for a specific transaction.\n      description: \u003e-\n        Fee can be estimated by creating a\n        Stratis.Bitcoin.Features.Wallet.TransactionBuildContext with no \n        password and then building the transaction and retrieving the fee from\n        the context.\n      operationId: GetTransactionFeeEstimate\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/TxFeeEstimateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TxFeeEstimateRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/TxFeeEstimateRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/TxFeeEstimateRequest'\n        description: \u003e-\n          An object containing the parameters used to estimate the fee for a\n          specific transaction.\n      responses:\n        '200':\n          description: Returns fee estimate\n        '400':\n          description: Invalid request or unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/build-transaction:\n    post:\n      tags:\n        - Wallet\n      summary: \u003e-\n        Builds a transaction and returns the hex to use when executing the\n        transaction.\n      operationId: BuildWalletTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/BuildTransactionRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildTransactionRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/BuildTransactionRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/BuildTransactionRequest'\n        description: An object containing the parameters used to build a transaction.\n      responses:\n        '200':\n          description: Returns transaction information\n        '400':\n          description: \u003e-\n            Invalid request, account not found, change address not found, or\n            unexpected exception occurred\n        '500':\n          description: Request is null\n  /api/Wallet/send-transaction:\n    post:\n      tags:\n        - Wallet\n      summary: Sends a transaction that has already been built.\n      description: Use the /api/Wallet/build-transaction call to create transactions.\n      operationId: SendWalletTransaction\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/SendTransactionRequest'\n        description: \u003e-\n          An object containing the necessary parameters used to a send\n          transaction request.\n      responses:\n        '200':\n          description: Returns transaction details\n        '400':\n          description: \u003e-\n            Invalid request, cannot broadcast transaction, or unexpected\n            exception occurred\n        '403':\n          description: No connected peers\n        '500':\n          description: Request is null\n  /api/Wallet/files:\n    get:\n      tags:\n        - Wallet\n      summary: Lists all the files found in the default wallet folder.\n      operationId: ListWalletsFiles\n      responses:\n        '200':\n          description: Returns wallet files\n        '400':\n          description: Unexpected exception occurred\n  /api/Wallet/account:\n    post:\n      tags:\n        - Wallet\n      summary: Creates a new account for a wallet.\n      description: \"Accounts are given the name \\\"account i\\\", where i is an incremental index which starts at 0.\\r\\n\\nAccording to BIP44. an account at index i can only be created when the account at index (i - 1) contains at least one transaction. For example, if three accounts named \\\"account 0\\\", \\\"account 1\\\" and \\\"account 2\\\" already exist and contain at least one transaction, then the function will create \\\"account 3\\\".\\r\\n\\nHowever, if \\\"account 2\\\", for example, instead contains no transactions, then this API call returns \\\"account 2\\\".\\r\\n\\nAccounts are created deterministically, which means that on any device, the accounts and addresses for a given seed (or mnemonic) are always the same.\"\n      operationId: CreateNewAccount\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/GetUnusedAccountModel'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetUnusedAccountModel'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/GetUnusedAccountModel'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/GetUnusedAccountModel'\n        description: \u003e-\n          An object containing the necessary parameters to create a new account\n          in a wallet.\n      responses:\n        '200':\n          description: Returns account name\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '403':\n          description: Wallet is watch-only\n        '500':\n          description: Request is null\n  /api/Wallet/accounts:\n    get:\n      tags:\n        - Wallet\n      summary: Gets a list of accounts for the specified wallet.\n      operationId: ListAccounts\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet for which to list the accounts.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns account names\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/unusedaddress:\n    get:\n      tags:\n        - Wallet\n      summary: Gets an unused address (in the Base58 format) for a wallet account.\n      description: \u003e-\n        This address will not have been assigned to any known UTXO (neither to\n        pay funds into the wallet or to pay change back to the wallet).\n      operationId: GetUnusedAddress\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet from which to get the address.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: The name of the account for which to get the address.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns address\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/unusedaddresses:\n    get:\n      tags:\n        - Wallet\n      summary: \u003e-\n        Gets a specified number of unused addresses (in the Base58 format) for a\n        wallet account.\n      description: \u003e-\n        These addresses will not have been assigned to any known UTXO (neither\n        to pay funds into the wallet or to pay change back to the wallet).\n      operationId: GetUnusedAddresses\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet from which to get the addresses.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: The name of the account for which to get the addresses.\n          required: false\n          schema:\n            type: string\n        - name: Count\n          in: query\n          description: The number of addresses to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns address list\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null or cannot be parsed\n  /api/Wallet/addresses:\n    get:\n      tags:\n        - Wallet\n      summary: Gets all addresses for a wallet account.\n      operationId: GetAllAddresses\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet from which to get the addresses.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          description: The name of the account for which to get the addresses.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns address information list\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/remove-transactions:\n    delete:\n      tags:\n        - Wallet\n      summary: Removes transactions from the wallet.\n      description: \"You may want to remove transactions from a wallet if some unconfirmed transactions disappear from the blockchain or the transaction fields within the wallet are updated and a refresh is required to populate the new fields.\\r\\n\\nIn one situation, you might notice several unconfirmed transaction in the wallet, which you now know were never confirmed. You can use this API to correct this by specifying a date and time before the first unconfirmed transaction thereby removing all transactions after this point.\\r\\n\\nYou can also request a resync as part of the call, which calculates the block height for the earliest removal. The wallet sync manager then proceeds to resync from there reinstating the confirmed transactions in the wallet.\\r\\n\\nYou can also cherry pick transactions to remove by specifying their transaction ID.\"\n      operationId: RemoveTransactions\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet to remove the transactions from.\n          required: true\n          schema:\n            type: string\n        - name: ids\n          in: query\n          description: The IDs of the transactions to remove.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n            uniqueItems: false\n        - name: fromDate\n          in: query\n          description: A date and time after which all transactions should be removed.\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: all\n          in: query\n          description: \u003e-\n            A flag that specifies whether to delete all transactions from a\n            wallet.\n          required: false\n          schema:\n            type: boolean\n        - name: ReSync\n          in: query\n          description: \u003e-\n            A flag that specifies whether to resync the wallet after removing\n            the transactions.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns transaction list\n        '400':\n          description: 'Invalid request, or an exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/extpubkey:\n    get:\n      tags:\n        - Wallet\n      summary: Gets the extended public key of a specified wallet account.\n      operationId: GetExtPubKey\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet from which to get the extended public key.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns extended public key\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/sync:\n    post:\n      tags:\n        - Wallet\n      summary: Requests the node resyncs from a block specified by its block hash.\n      description: \u003e-\n        Internally, the specified block is taken as the new wallet tip and all\n        blocks after it are resynced.\n      operationId: Sync\n      requestBody:\n        $ref: '#/components/requestBodies/HashModel'\n      responses:\n        '200':\n          description: Resync requested\n        '400':\n          description: 'Invalid request, or block not found'\n  /api/Wallet/sync-from-date:\n    post:\n      tags:\n        - Wallet\n      summary: Request the node resyncs starting from a given date and time.\n      description: \u003e-\n        Internally, the first block created on or after the supplied date and\n        time is taken as the new wallet tip and all blocks after it are\n        resynced.\n      operationId: SyncFromDate\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/WalletSyncFromDateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WalletSyncFromDateRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/WalletSyncFromDateRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/WalletSyncFromDateRequest'\n        description: An object containing the necessary parameters to request a resync.\n      responses:\n        '200':\n          description: Resync requested\n        '400':\n          description: Invalid request\n  /api/Wallet/wallet-stats:\n    get:\n      tags:\n        - Wallet\n      summary: Retrieves information about the wallet\n      operationId: WalletStats\n      parameters:\n        - name: WalletName\n          in: query\n          description: The name of the wallet for which to get the stats.\n          required: true\n          schema:\n            type: string\n        - name: AccountName\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: MinConfirmations\n          in: query\n          description: \"The minimum number of confirmations a transaction needs to have to be included.\\r\\n\\nTo include unconfirmed transactions, set this value to 0.\"\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: Verbose\n          in: query\n          description: Should the request return a more detailed output\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns wallet stats\n        '400':\n          description: 'Invalid request, or unexpected exception occurred'\n        '500':\n          description: Request is null\n  /api/Wallet/splitcoins:\n    post:\n      tags:\n        - Wallet\n      summary: Creates requested amount of UTXOs each of equal value.\n      operationId: SplitCoins\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/SplitCoinsRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SplitCoinsRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/SplitCoinsRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/SplitCoinsRequest'\n      responses:\n        '200':\n          description: Returns transaction details\n        '400':\n          description: \u003e-\n            Invalid request, cannot broadcast transaction, or unexpected\n            exception occurred\n        '403':\n          description: No connected peers\n        '500':\n          description: Request is null\n  /api/Wallet/distribute-utxos:\n    post:\n      tags:\n        - Wallet\n      summary: Splits and distributes UTXOs across wallet addresses\n      operationId: DistributeUtxos\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/DistributeUtxosRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DistributeUtxosRequest'\n          text/json:\n            schema:\n              $ref: '#/components/schemas/DistributeUtxosRequest'\n          application/*+json:\n            schema:\n              $ref: '#/components/schemas/DistributeUtxosRequest'\n      responses:\n        '200':\n          description: Returns distribution details\n        '400':\n          description: \u003e-\n            Invalid request, requested transactions exceeds number of UTXOs,\n            cannot broadcast transaction, or unexpected exception occurred\n        '500':\n          description: Request is null\ncomponents:\n  requestBodies:\n    BuildCreateContractTransactionRequest:\n      content:\n        application/json-patch+json:\n          schema:\n            $ref: '#/components/schemas/BuildCreateContractTransactionRequest'\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BuildCreateContractTransactionRequest'\n        text/json:\n          schema:\n            $ref: '#/components/schemas/BuildCreateContractTransactionRequest'\n        application/*+json:\n          schema:\n            $ref: '#/components/schemas/BuildCreateContractTransactionRequest'\n      description: An object containing the necessary parameters to build the transaction.\n    ShutdownCorsprotection:\n      content:\n        application/json-patch+json:\n          schema:\n            type: boolean\n        application/json:\n          schema:\n            type: boolean\n        text/json:\n          schema:\n            type: boolean\n        application/*+json:\n          schema:\n            type: boolean\n      description: \u003e-\n        This body parameter is here to prevent a Cross Origin Resource Sharing\n        (CORS) call from triggering method execution. CORS relaxes security and\n        you can read more about this here.\n    HashModel:\n      content:\n        application/json-patch+json:\n          schema:\n            $ref: '#/components/schemas/HashModel'\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HashModel'\n        text/json:\n          schema:\n            $ref: '#/components/schemas/HashModel'\n        application/*+json:\n          schema:\n            $ref: '#/components/schemas/HashModel'\n    HexPubKeyModel:\n      content:\n        application/json-patch+json:\n          schema:\n            $ref: '#/components/schemas/HexPubKeyModel'\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HexPubKeyModel'\n        text/json:\n          schema:\n            $ref: '#/components/schemas/HexPubKeyModel'\n        application/*+json:\n          schema:\n            $ref: '#/components/schemas/HexPubKeyModel'\n      description: Request containing member public key\n    BuildCallContractTransactionRequest:\n      content:\n        application/json-patch+json:\n          schema:\n            $ref: '#/components/schemas/BuildCallContractTransactionRequest'\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BuildCallContractTransactionRequest'\n        text/json:\n          schema:\n            $ref: '#/components/schemas/BuildCallContractTransactionRequest'\n        application/*+json:\n          schema:\n            $ref: '#/components/schemas/BuildCallContractTransactionRequest'\n      description: An object containing the necessary parameters to build the transaction.\n  schemas:\n    AddressBookEntryRequest:\n      description: \u003e-\n        A class containing the necessary parameters to perform an add address\n        book entry request.\n      required:\n        - label\n        - address\n      type: object\n      properties:\n        label:\n          description: A label to attach to the address book entry.\n          maxLength: 200\n          type: string\n        address:\n          description: The address to enter in the address book.\n          type: string\n    HashModel:\n      description: \u003e-\n        A class containing the necessary parameters for a wallet\n        resynchronization request which takes the hash of the block to resync\n        after.\n      required:\n        - hash\n      type: object\n      properties:\n        hash:\n          description: The hash of the block to resync after.\n          type: string\n    PeerStatisticsModel:\n      type: object\n      properties:\n        peerEndPoint:\n          type: string\n        connected:\n          type: boolean\n        inbound:\n          type: boolean\n        bytesSent:\n          format: int64\n          type: integer\n        bytesReceived:\n          format: int64\n          type: integer\n        receivedMessages:\n          format: int32\n          type: integer\n        sentMessages:\n          format: int32\n          type: integer\n        latestEvents:\n          uniqueItems: false\n          type: array\n          items:\n            type: string\n    HexPubKeyModel:\n      required:\n        - pubKeyHex\n      type: object\n      properties:\n        pubKeyHex:\n          type: string\n    DisconnectPeerViewModel:\n      description: Represents the model that will disconnect a connected peer.\n      type: object\n      properties:\n        peerAddress:\n          description: The IP address and port of the connected peer to disconnect.\n          type: string\n    SetBanPeerViewModel:\n      description: Represents the model that will ban and disconnect a connected peer.\n      type: object\n      properties:\n        banCommand:\n          description: \"Whether to add or remove the node from the banned list.\\r\\n\\nOptions are \\\"Add\\\" or \\\"Remove\\\".\"\n          type: string\n        banDurationSeconds:\n          format: int32\n          description: The duration in seconds the peer will be banned.\n          type: integer\n        peerAddress:\n          description: \"The IP address of the connected peer to ban.\\r\\n\\nThe port should not be specified in this instance.\"\n          type: string\n    DecodeRawTransactionModel:\n      description: A class containing the necessary parameters for a block search request.\n      type: object\n      properties:\n        rawHex:\n          description: The transaction to be decoded in hex format.\n          type: string\n    LogRulesRequest:\n      type: object\n      properties:\n        logRules:\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/LogRuleRequest'\n    LogRuleRequest:\n      required:\n        - ruleName\n        - logLevel\n      type: object\n      properties:\n        ruleName:\n          description: The name of the rule.\n          type: string\n        logLevel:\n          description: The log level.\n          type: string\n    BuildCreateContractTransactionRequest:\n      description: \u003e-\n        A class containing the necessary parameters to perform a smart contract\n        creation request.\n      required:\n        - walletName\n        - amount\n        - password\n        - contractCode\n        - sender\n      type: object\n      properties:\n        walletName:\n          description: \u003e-\n            The name of the wallet containing funds to use to cover transaction\n            fees, gas, and any funds specified in the Amount field.\n          type: string\n        accountName:\n          description: \u003e-\n            The name of the wallet account containing funds to use to cover\n            transaction fees, gas, and any funds specified in the Amount field.\n            Defaults to \"account 0\".\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        amount:\n          description: \u003e-\n            The amount of STRAX (or the sidechain coin) to send to the smart\n            contract address on creation.\n          type: string\n        feeAmount:\n          description: \u003e-\n            The fees in STRAX (or the sidechain coin) to cover the smart\n            contract creation transaction.\n          type: string\n        password:\n          description: The password for the wallet.\n          type: string\n        contractCode:\n          description: The smart contract bytecode.\n          type: string\n        gasPrice:\n          format: int64\n          description: \u003e-\n            The gas price to charge when the smart contract constructor is run\n            by the miner mining the creation transaction.\n          maximum: 10000\n          minimum: 100\n          type: integer\n        gasLimit:\n          format: int64\n          description: \"The maximum amount of gas that can be spent executing this transaction.\\r\\n\\nThis limit cannot be exceeded when the method is run by the miner mining the creation transaction. If the gas spent exceeds this value, execution of the smart contract stops.\"\n          maximum: 100000\n          minimum: 12000\n          type: integer\n        sender:\n          description: \"A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the Amount field.\\r\\n\\nSome methods, such as a withdrawal method on an escrow smart contract, should only be executed by the deployer. In this case, it is this address that identifies the deployer.\\r\\n\\nIt is recommended that you use /api/SmartContractWallet/account-addresses to retrieve an address to use for smart contracts. This enables you to obtain a smart contract transaction history.\\r\\n\\nHowever, any sender address containing the required funds will work.\"\n          type: string\n        parameters:\n          description: \"An array of encoded strings containing the parameters (and their type) to pass to the smart contract constructor when it is called.\\r\\n\\nMore information on the format of a parameter string is available here.\"\n          uniqueItems: false\n          type: array\n          items:\n            type: string\n    OutpointRequest:\n      required:\n        - transactionId\n        - index\n      type: object\n      properties:\n        transactionId:\n          description: The transaction ID.\n          type: string\n        index:\n          format: int32\n          description: The index of the output in the transaction.\n          type: integer\n    BuildCallContractTransactionRequest:\n      description: \u003e-\n        A class containing the necessary parameters to perform a smart contract\n        method call request.\n      required:\n        - walletName\n        - contractAddress\n        - methodName\n        - amount\n        - password\n        - sender\n      type: object\n      properties:\n        walletName:\n          description: \u003e-\n            The name of the wallet containing funds to use to cover transaction\n            fees, gas, and any funds specified in the Amount field.\n          type: string\n        accountName:\n          description: \"The name of the wallet account containing funds to use to cover transaction fees, gas, and any funds specified in the Amount field.\\r\\n\\nDefaults to \\\"account 0\\\".\"\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        contractAddress:\n          description: The address of the smart contract containing the method.\n          type: string\n        methodName:\n          description: The name of the method to call.\n          type: string\n        amount:\n          description: \u003e-\n            The amount of STRAX (or sidechain coin) to send to the smart\n            contract address.\n          type: string\n        feeAmount:\n          description: \u003e-\n            The fees in STRAX (or sidechain coin) to cover the method call\n            transaction.\n          type: string\n        password:\n          description: The password for the wallet.\n          type: string\n        gasPrice:\n          format: int64\n          description: \u003e-\n            The gas price to charge when the method is run by the miner mining\n            the call transaction.\n          maximum: 10000\n          minimum: 100\n          type: integer\n        gasLimit:\n          format: int64\n          description: \"The maximum amount of gas that can be spent executing this transaction.\\r\\n\\nThis limit cannot be exceeded when the method is run by the miner mining the call transaction. If the gas  spent exceeds this value, execution of the smart contract stops.\"\n          maximum: 100000\n          minimum: 10000\n          type: integer\n        sender:\n          description: \"A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the Amount field.\\r\\n\\nSome methods, such as a withdrawal method on an escrow smart contract, should only be executed by the deployer. In this case, it is this address that identifies the deployer.\\r\\n\\nIt is recommended that you use /api/SmartContractWallet/account-addresses to retrieve an address to use for smart contracts. This enables you to obtain a smart contract transaction history.\\r\\n\\nHowever, any sender address containing the required funds will work.\"\n          type: string\n        parameters:\n          description: \"An array of encoded strings containing the parameters (and their type) to pass to the smart contract method when it is called.\\r\\n\\nMore information on the format of a parameter string is available here.\"\n          uniqueItems: false\n          type: array\n          items:\n            type: string\n    BuildContractTransactionRequest:\n      required:\n        - sender\n        - password\n        - walletName\n        - recipients\n      type: object\n      properties:\n        sender:\n          type: string\n        feeAmount:\n          description: The fee for the transaction in STRAX (or a sidechain coin).\n          type: string\n        password:\n          description: \u003e-\n            The password for the wallet containing the funds for the\n            transaction.\n          type: string\n        walletName:\n          description: \u003e-\n            The name of the wallet containing the UTXOs to use in the\n            transaction.\n          type: string\n        accountName:\n          description: \u003e-\n            The name of the account containing the UTXOs to use in the\n            transaction.\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        recipients:\n          description: \"A list of transaction recipients. For each recipient, specify the Pubkey script and the amount the recipient will receive in STRAX (or a sidechain coin).\\r\\n\\nIf the transaction was realized, both the values would be used to create the UTXOs for the transaction recipients.\"\n          minLength: 1\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/RecipientModel'\n        opReturnData:\n          description: \u003e-\n            A string containing any OP_RETURN output data to store as part of\n            the transaction.\n          type: string\n        opReturnAmount:\n          description: \u003e-\n            The funds in STRAX (or a sidechain coin) to include with the\n            OP_RETURN output. Currently, specifying some funds helps OP_RETURN\n            outputs be relayed around the network.\n          type: string\n        feeType:\n          description: \u003e-\n            The type of fee to use when working out the fee for the transaction.\n            Specify \"low\", \"medium\", or \"high\".\n          type: string\n        allowUnconfirmed:\n          description: \"A flag that specifies whether to include the unconfirmed amounts as inputs to the transaction.\\r\\n\\nIf this flag is not set, at least one confirmation is required for each input.\"\n          type: boolean\n        shuffleOutputs:\n          description: \"A flag that specifies whether to shuffle the transaction outputs for increased privacy.\\r\\n\\nRandomizing the the order in which the outputs appear when the transaction is being built stops it being trivial to determine whether a transaction output is payment or change. This helps defeat unsophisticated chain analysis algorithms.\\r\\n\\nDefaults to true.\"\n          type: boolean\n        changeAddress:\n          description: \u003e-\n            The address to which the change from the transaction should be\n            returned. If this is not set, the default behaviour from the\n            Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler will be\n            used to determine the change address.\n          type: string\n    RecipientModel:\n      required:\n        - destinationAddress\n        - amount\n      type: object\n      properties:\n        destinationAddress:\n          description: The destination address.\n          type: string\n        amount:\n          description: The amount that will be sent.\n          type: string\n    ScTxFeeEstimateRequest:\n      required:\n        - sender\n        - walletName\n        - recipients\n      type: object\n      properties:\n        sender:\n          type: string\n        walletName:\n          description: \u003e-\n            The name of the wallet containing the UTXOs to use in the\n            transaction.\n          type: string\n        accountName:\n          description: \u003e-\n            The name of the account containing the UTXOs to use in the\n            transaction.\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        recipients:\n          description: \"A list of transaction recipients. For each recipient, specify the Pubkey script and the amount the recipient will receive in STRAX (or a sidechain coin).\\r\\n\\nIf the transaction was realized, both the values would be used to create the UTXOs for the transaction recipients.\"\n          minLength: 1\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/RecipientModel'\n        opReturnData:\n          description: \u003e-\n            A string containing any OP_RETURN output data to store as part of\n            the transaction.\n          type: string\n        opReturnAmount:\n          description: \"The funds in STRAX (or a sidechain coin) to include with the OP_RETURN output.\\r\\n\\nCurrently, specifying some funds helps OP_RETURN outputs be relayed around the network.\"\n          type: string\n        feeType:\n          description: \u003e-\n            The type of fee to use when working out the fee for the transaction.\n            Specify \"low\", \"medium\", or \"high\".\n          type: string\n        allowUnconfirmed:\n          description: \"A flag that specifies whether to include the unconfirmed amounts as inputs to the transaction.\\r\\n\\nIf this flag is not set, at least one confirmation is required for each input.\"\n          type: boolean\n        shuffleOutputs:\n          description: \"A flag that specifies whether to shuffle the transaction outputs for increased privacy.\\r\\n\\nRandomizing the the order in which the outputs appear when the transaction is being built stops it being trivial to determine whether a transaction output is payment or change. This helps defeat unsophisticated chain analysis algorithms.\\r\\n\\nDefaults to true.\"\n          type: boolean\n        changeAddress:\n          description: \u003e-\n            The address to which the change from the transaction should be\n            returned. If this is not set, the default behaviour from the\n            Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler will be\n            used to determine the change address.\n          type: string\n    LocalCallContractRequest:\n      description: \u003e-\n        A class containing the necessary parameters to perform a local smart\n        contract method call request.\n      required:\n        - contractAddress\n        - methodName\n      type: object\n      properties:\n        contractAddress:\n          description: The address of the smart contract containing the method.\n          type: string\n        methodName:\n          description: The name of the method to call.\n          type: string\n        amount:\n          description: \"The amount of STRAX (or sidechain coin) to send to the smart contract address.\\r\\n\\nNo funds are actually sent, but the Amount field allows certain scenarios, where the funds sent dictates the result, to be checked.\"\n          type: string\n        gasPrice:\n          format: int64\n          description: \u003e-\n            The gas price to use. This is used to calculate the expected\n            expenditure if the method is run by a miner mining a call\n            transaction rather than locally.\n          maximum: 10000\n          minimum: 1\n          type: integer\n        gasLimit:\n          format: int64\n          description: \"The maximum amount of gas that can be spent executing this transaction.\\r\\n\\nAlthough the gas expenditure is theoretical rather than actual, this limit cannot be exceeded even when the method is run locally.\"\n          maximum: 100000\n          minimum: 10000\n          type: integer\n        sender:\n          description: \"A wallet address containing the funds to cover transaction fees, gas, and any funds specified in the Amount field.\\r\\n\\nNote that because the method call is local no funds are spent. However, the concept of the sender address is still valid and may need to be checked.\\r\\n\\nFor example, some methods, such as a withdrawal method on an escrow smart contract, should only be executed by the deployer, and in this case, it is the Sender address that identifies the deployer.\"\n          type: string\n        parameters:\n          description: \"An array of encoded strings containing the parameters (and their type) to pass to the smart contract  method when it is called.\\r\\n\\nMore information on the format of a parameter string is available here.\"\n          uniqueItems: false\n          type: array\n          items:\n            type: string\n    SendTransactionRequest:\n      description: \u003e-\n        A class containing the necessary parameters for a send transaction\n        request.\n      required:\n        - hex\n      type: object\n      properties:\n        hex:\n          description: A string containing the transaction in hexadecimal format.\n          type: string\n    WalletCreationRequest:\n      description: A class containing the necessary parameters for a create wallet request.\n      required:\n        - password\n        - passphrase\n        - name\n      type: object\n      properties:\n        mnemonic:\n          description: The mnemonic used to create the HD wallet.\n          type: string\n        password:\n          description: A password used to encrypt the wallet for secure storage.\n          type: string\n        passphrase:\n          description: \"An optional additional seed, which is joined together with the Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest.Mnemonic  when the wallet is created.\\r\\n\\nAlthough you will be prompted to enter a passphrase, an empty string is still valid.\"\n          type: string\n        name:\n          description: The name of the wallet.\n          type: string\n    SignMessageRequest:\n      description: Object to sign a message.\n      required:\n        - walletName\n        - password\n        - externalAddress\n        - message\n      type: object\n      properties:\n        walletName:\n          type: string\n        password:\n          type: string\n        externalAddress:\n          type: string\n        message:\n          type: string\n    VerifyRequest:\n      description: Object to verify a signed message.\n      required:\n        - signature\n        - externalAddress\n        - message\n      type: object\n      properties:\n        signature:\n          type: string\n        externalAddress:\n          type: string\n        message:\n          type: string\n    WalletLoadRequest:\n      description: A class containing the necessary parameters for a load wallet request.\n      required:\n        - password\n        - name\n      type: object\n      properties:\n        password:\n          description: The password that was used to create the wallet.\n          type: string\n        name:\n          description: The name of the wallet.\n          type: string\n    WalletRecoveryRequest:\n      description: \u003e-\n        A class containing the necessary parameters for a wallet recovery\n        request.\n      required:\n        - mnemonic\n        - password\n        - passphrase\n        - name\n      type: object\n      properties:\n        mnemonic:\n          description: The mnemonic that was used to create the wallet.\n          type: string\n        password:\n          description: The password that was used to create the wallet.\n          type: string\n        passphrase:\n          description: The passphrase that was used to create the wallet.\n          type: string\n        name:\n          description: The name of the wallet.\n          type: string\n        creationDate:\n          format: date-time\n          type: string\n    WalletExtPubRecoveryRequest:\n      description: \"A class containing the necessary parameters for a wallet recovery request using its extended public key.\\r\\n\\nNote that the recovered wallet will not have a private key and is only suitable for returning the wallet history using further API calls. As such, only the extended public key is used in the recovery process.\"\n      required:\n        - extPubKey\n        - accountIndex\n        - name\n      type: object\n      properties:\n        extPubKey:\n          description: The extended public key used by the wallet.\n          type: string\n        accountIndex:\n          format: int32\n          description: \u003e-\n            The index of the account to generate for the wallet. For example,\n            specifying a value of 0 generates \"account0\".\n          type: integer\n        name:\n          description: The name to give the recovered wallet.\n          type: string\n        creationDate:\n          format: date-time\n          description: The creation date and time to give the recovered wallet.\n          type: string\n    TxFeeEstimateRequest:\n      description: \u003e-\n        A class containing the necessary parameters for a transaction fee\n        estimate request.\n      required:\n        - walletName\n        - recipients\n      type: object\n      properties:\n        walletName:\n          description: \u003e-\n            The name of the wallet containing the UTXOs to use in the\n            transaction.\n          type: string\n        accountName:\n          description: \u003e-\n            The name of the account containing the UTXOs to use in the\n            transaction.\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        recipients:\n          description: \"A list of transaction recipients.\\r\\n\\nFor each recipient, specify the Pubkey script and the amount the recipient will receive in STRAX (or a sidechain coin).\\r\\n\\nIf the transaction was realized, both the values would be used to create the UTXOs for the transaction recipients.\"\n          minLength: 1\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/RecipientModel'\n        opReturnData:\n          description: \u003e-\n            A string containing any OP_RETURN output data to store as part of\n            the transaction.\n          type: string\n        opReturnAmount:\n          description: \u003e-\n            The funds in STRAX (or a sidechain coin) to include with the\n            OP_RETURN output. Currently, specifying some funds helps OP_RETURN\n            outputs be relayed around the network.\n          type: string\n        feeType:\n          description: \u003e-\n            The type of fee to use when working out the fee for the transaction.\n            Specify \"low\", \"medium\", or \"high\".\n          type: string\n        allowUnconfirmed:\n          description: \"A flag that specifies whether to include the unconfirmed amounts as inputs to the transaction.\\r\\n\\nIf this flag is not set, at least one confirmation is required for each input.\"\n          type: boolean\n        shuffleOutputs:\n          description: \"A flag that specifies whether to shuffle the transaction outputs for increased privacy.\\r\\n\\nRandomizing the the order in which the outputs appear when the transaction is being built stops it being trivial to determine whether a transaction output is payment or change. This helps defeat unsophisticated chain analysis algorithms.\\r\\n\\nDefaults to true.\"\n          type: boolean\n        changeAddress:\n          description: \u003e-\n            The address to which the change from the transaction should be\n            returned. If this is not set, the default behaviour from the\n            Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler will be\n            used to determine the change address.\n          type: string\n    BuildTransactionRequest:\n      description: \u003e-\n        A class containing the necessary parameters for a build transaction\n        request.\n      required:\n        - password\n        - walletName\n        - recipients\n      type: object\n      properties:\n        feeAmount:\n          description: The fee for the transaction in STRAX (or a sidechain coin).\n          type: string\n        password:\n          description: \u003e-\n            The password for the wallet containing the funds for the\n            transaction.\n          type: string\n        walletName:\n          description: \u003e-\n            The name of the wallet containing the UTXOs to use in the\n            transaction.\n          type: string\n        accountName:\n          description: \u003e-\n            The name of the account containing the UTXOs to use in the\n            transaction.\n          type: string\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        recipients:\n          description: \"A list of transaction recipients. For each recipient, specify the Pubkey script and the amount the recipient will receive in STRAX (or a sidechain coin).\\r\\n\\nIf the transaction was realized, both the values would be used to create the UTXOs for the transaction recipients.\"\n          minLength: 1\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/RecipientModel'\n        opReturnData:\n          description: \u003e-\n            A string containing any OP_RETURN output data to store as part of\n            the transaction.\n          type: string\n        opReturnAmount:\n          description: \"The funds in STRAX (or a sidechain coin) to include with the OP_RETURN output.\\r\\n\\nCurrently, specifying some funds helps OP_RETURN outputs be relayed around the network.\"\n          type: string\n        feeType:\n          description: \u003e-\n            The type of fee to use when working out the fee for the transaction.\n            Specify \"low\", \"medium\", or \"high\".\n          type: string\n        allowUnconfirmed:\n          description: \"A flag that specifies whether to include the unconfirmed amounts as inputs to the transaction.\\r\\n\\nIf this flag is not set, at least one confirmation is required for each input.\"\n          type: boolean\n        shuffleOutputs:\n          description: \"A flag that specifies whether to shuffle the transaction outputs for increased privacy.\\r\\n\\nRandomizing the the order in which the outputs appear when the transaction is being built stops it being trivial to determine whether a transaction output is payment or change. This helps defeat unsophisticated chain analysis algorithms.\\r\\n\\nDefaults to true.\"\n          type: boolean\n        changeAddress:\n          description: \u003e-\n            The address to which the change from the transaction should be\n            returned. If this is not set, the default behaviour from the\n            Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler will be\n            used to determine the change address.\n          type: string\n    GetUnusedAccountModel:\n      description: A class containing the necessary parameters for a new account request.\n      required:\n        - walletName\n        - password\n      type: object\n      properties:\n        walletName:\n          description: The name of the wallet in which to create the account.\n          type: string\n        password:\n          description: The password for the wallet.\n          type: string\n    WalletSyncFromDateRequest:\n      description: \u003e-\n        A class containing the necessary parameters for a wallet\n        resynchronization request.\n      type: object\n      properties:\n        date:\n          format: date-time\n          description: The date and time from which to resync the wallet.\n          type: string\n    SplitCoinsRequest:\n      required:\n        - walletName\n        - walletPassword\n        - totalAmountToSplit\n        - utxosCount\n      type: object\n      properties:\n        walletName:\n          type: string\n        accountName:\n          type: string\n        walletPassword:\n          type: string\n        totalAmountToSplit:\n          description: The amount that will be sent.\n          type: string\n        utxosCount:\n          format: int32\n          type: integer\n    DistributeUtxosRequest:\n      required:\n        - walletName\n        - walletPassword\n        - utxosCount\n        - utxoPerTransaction\n        - dryRun\n      type: object\n      properties:\n        walletName:\n          type: string\n        accountName:\n          type: string\n        walletPassword:\n          type: string\n        useUniqueAddressPerUtxo:\n          default: false\n          type: boolean\n        reuseAddresses:\n          default: true\n          type: boolean\n        useChangeAddresses:\n          default: false\n          type: boolean\n        utxosCount:\n          format: int32\n          type: integer\n        utxoPerTransaction:\n          format: int32\n          type: integer\n        timestampDifferenceBetweenTransactions:\n          format: int32\n          default: 0\n          type: integer\n        minConfirmations:\n          format: int32\n          description: \"The minimum number of confirmations a transaction needs to have to be included.\\r\\nTo include unconfirmed transactions, set this value to 0.\"\n          default: 1\n          type: integer\n        outpoints:\n          description: A list of outpoints to use as inputs for the transaction.\n          uniqueItems: false\n          type: array\n          items:\n            $ref: '#/components/schemas/OutpointRequest'\n        dryRun:\n          type: boolean\nservers:\n  - url: 'http://localhost:37223/Swagger'\n    variables: {}\n    description: CirrusMain",
			"canonicalURL": "/github.com/stratisproject/Documentation@351031e5e23b5ce0114a541bd9a9ff4e237db553/-/blob/source/Developer%20Resources/API%20Reference/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stratisproject/Documentation/blob/351031e5e23b5ce0114a541bd9a9ff4e237db553/source/Developer Resources/API Reference/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}