{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apple/swift-docc-symbolkit"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 21842,
			"content": "# This source file is part of the Swift.org open source project\n#\n# Copyright (c) 2021 Apple Inc. and the Swift project authors\n# Licensed under Apache License v2.0 with Runtime Library Exception\n#\n# See https://swift.org/LICENSE.txt for license information\n# See https://swift.org/CONTRIBUTORS.txt for Swift project authors\n\nopenapi: \"3.0.0\"\ninfo:\n  title: SymbolGraph\n  description: A format for describing symbols and their documentation.\n  version: \"0.3.0\"\npaths: {}\ncomponents:\n  schemas:\n    SymbolGraph:\n      title: SymbolGraph\n      description: |\n        A symbol graph is a set of *nodes* that represent the symbols in a module and\n        a set of directed *edges* that represent the relationships between symbols.\n      type: object\n      required:\n        - metadata\n        - module\n        - symbols\n        - relationships \n      properties:\n        metadata:\n          description: Metadata about the symbol graph.\n          $ref: \"#/components/schemas/Metadata\"\n        module:\n          description: The module that this symbol graph represents.\n          $ref: \"#/components/schemas/Module\"\n        symbols:\n          description: \u003e\n            The symbols in a module: the nodes in a graph, mapped by precise identifier.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Symbol\"\n        relationships:\n          description: \u003e\n            The relationships between symbols: the edges in a graph.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Relationship\"\n    Metadata:\n      title: Metadata\n      description: Metadata for the Symbol Graph data itself.\n      type: object \n      required:\n        - formatVersion\n        - generator\n      properties:\n        formatVersion:\n          description: The data format version.\n          $ref: \"#/components/schemas/SemanticVersion\"\n        generator:\n          description: |\n            A string describing the tool or system that generated the data for this symbol graph.\n\n            This should include a name and version if possible to track down potential\n            serialization bugs.\n          type: string\n    Module:\n      title: Module\n      description: The module or framework that a symbol graph describes.\n      type: object\n      required:\n        - name\n        - platform\n      properties:\n        name:\n          description: The name of the module.\n          type: string\n        platform:\n          description: The intended platform for deploying the module.\n          $ref: \"#/components/schemas/Platform\"\n        version:\n          description: The module's version number if known or applicable.\n          $ref: \"#/components/schemas/SemanticVersion\"\n    SemanticVersion:\n      title: SemanticVersion\n      description: A [semantic version](https://semver.org).\n      type: object\n      required:\n        - major\n        - minor\n        - patch\n      properties:\n        major:\n          description: Major version when you make incompatible API changes.\n          type: number\n          format: int64\n        minor:\n          description: Minor version when you add functionality in a backwards compatible manner.\n          type: number\n          format: int64\n        patch:\n          description: Patch version when you make backwards compatible bug fixes.\n          type: number\n          format: int64\n        prerelease:\n          description: \u003e\n            A pre-release version indicates that the version is unstable and\n            might not satisfy the intended compatibility requirements as denoted\n            by its associated normal version.\n            Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.\n          type: string\n        buildMetadata:\n          description: Information about the specific build of the module.\n          type: string\n    Platform:\n      title: Platform\n      description: Describes the intended platform for deploying this module.\n      type: object\n      properties:\n        architecture:\n          description: |\n            The name of the architecture that this module targets, such as `x86_64` or `arm64`.\n            If the module doesn't have a specific architecture, this may be undefined.\n          type: string\n          nullable: true\n        vendor:\n          description: |\n            The platform vendor from which this module came, such as `apple` or `linux`.\n            If there is no specific platform vendor, this may be undefined.\n          type: string\n          nullable: true\n        operatingSystem:\n          $ref: \"#/components/schemas/OperatingSystem\"\n          nullable: true\n    OperatingSystem:\n      title: OperatingSystem\n      description:  |\n        The operating system intended as the run environment\n        If no operating system is required, this may be undefined.\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          description: The name of the operating system.\n          type: string\n        minimumVersion:\n          description: The minimum version of the operating system needed to deploy this module, if applicable.\n          $ref: \"#/components/schemas/SemanticVersion\"\n          nullable: true\n    Relationship:\n      title: Relationship\n      description: A relationship between two symbols; a directed edge in a graph.\n      type: object\n      required:\n        - source\n        - target\n        - kind\n      properties:\n        source:\n          description: The *precise identifier* of a symbol that is the *source* of this graph edge.\n          type: string\n        target:\n          description: The *precise identifier* of a symbol that is the *target* of this graph edge.\n          type: string\n        kind:\n          title: Kind\n          description: The kind of relationship denoted by a keyword string.\n          type: string\n          enum:\n            - memberOf\n            - conformsTo\n            - inheritsFrom\n            - defaultImplementationOf\n            - overrides\n            - requirementOf\n            - optionalRequirementOf\n        targetFallback:\n          type: string\n          nullable: true\n    Symbol:\n      title: Symbol\n      description: |\n        A symbol from a module.\n\n        A symbol corresponds to some named declaration in a module.\n\n        A symbol should never contain another symbol as a field or part of a field.\n        If a symbol is related to another symbol, it should be formalized\n        as a relationship in an edge in the graph.\n      type: object\n      required:\n        - identifier\n        - kind\n        - names\n        - accessLevel\n      properties:\n        identifier:\n          title: Identifier\n          description: A unique identifier for a symbol.\n          type: object\n          required:\n            - precise\n            - interfaceLanguage\n          properties:\n            precise:\n              description: |\n                A string that uniquely identifies a symbol within a module in the event of ambiguities. A precise identifier need not be human readable.\n                For example, languages that use [name mangling](https://en.wikipedia.org/wiki/Name_mangling) should use this field for a mangled name.\n              type: string\n            interfaceLanguage:\n              description: A string identifying the language or system for which this symbol provides an interface.\n              type: string\n        pathComponents:\n          description: |\n            A list of components that uniquely identifies a symbol when there are no ambiguities using only URL-compatible characters.\n            \n            Do not include the module name here.\n\n            For example, in a Swift module `MyModule`, there might exist a function `bar` in `struct Foo`.\n            The `simpleComponents` for `bar` would be `[\"Foo\", \"bar\"]`, corresponding to `Foo.bar`.\n\n            \u003e Note: When writing relative links, an author may choose to remove leading components, so disambiguating path components should only be appended to the end, not prepended to the beginning.\n          type: array\n          items:\n            type: string\n        kind:\n          title: Kind\n          description: A description of a symbol's kind, such as a structure in C, or a protocol in Swift.  \n          type: object\n          required:\n          - identifier\n          - displayName\n          properties:\n            identifier:\n              description: A unique identifier for the kind of symbol, namespaced by language.\n              type: string\n            displayName:\n              description: The display name of the kind of symbol which may be used in titles, subheadings, or eyebrows. For example, a Swift `struct` would use `Structure` here.\n              type: string\n        type:\n          description: A *precise identifier* for the static type of a symbol if known.\n          type: string\n          nullable: true\n        names:\n          title: Names\n          description: Ways of spelling the name of a symbol in various contexts.\n          type: object\n          required:\n            - title\n          properties:\n            title:\n              description: The name of a symbol when shown as a page title or first-level heading.\n              type: string\n            navigator:\n              description: The name of a symbol when displaying in navigators, where there may be limited horizontal space.\n              type: array\n              nullable: true\n              items:\n                $ref: \"#/components/schemas/DeclarationFragment\"\n            subHeading:\n              description: The name of a symbol when shown as a subheading, such as a page index or list.\n              type: array\n              nullable: true\n              items:\n                $ref: \"#/components/schemas/DeclarationFragment\"\n            prose:\n              description: The name of a symbol when shown inline with other prose.\n              type: string\n              nullable: true\n        docComment:\n          $ref: \"#/components/schemas/LineList\"\n          nullable: true\n        accessLevel:\n          description: The idiomatic name or keyword for a symbol's access level.\n          type: string\n          default: public\n        availability:\n          description: Descriptions of this symbol's *availability* across various *domains*.\n          type: array\n          nullable: true\n          items:\n            $ref: \"#/components/schemas/AvailabilityItem\"\n        swiftExtension:\n          description: If the symbol comes from Swift, a description of the extension context in which it was defined.\n          $ref: \"#/components/schemas/SwiftExtension\"\n          nullable: true\n        swiftGenerics:\n          description: If the symbol comes from Swift, a description of the generic parameters and generic constraints if there are any.\n          $ref: \"#/components/schemas/SwiftGenerics\"\n          nullable: true\n        location:\n          title: Location\n          description: A symbol's location in source code if available.\n          type: object\n          nullable: true\n          properties:\n            uri:\n              description: A URI describing a resource or file where the symbol was defined.\n              type: string\n              nullable: true\n            position:\n              description: A position in the resource or file where the symbol was defined if available.\n              $ref: \"#/components/schemas/SourcePosition\"\n              nullable: true\n        isReadOnly:\n          description: Whether an instance of the symbol is \"read-only\".\n          type: boolean \n        parameters:\n          description: If the symbol is a kind of function, the parameters it takes.\n          $ref: \"#/components/schemas/FunctionSignature\"\n          nullable: true\n        declarationFragments:\n          description: If the symbol is a kind of function, a rendering of the return values.\n          type: array\n          items:\n            $ref: \"#/components/schemas/DeclarationFragment\"\n    DeclarationFragment:\n      title: DeclarationFragment\n      description: |\n        A tagged range of source text illustrating the important parts of a symbol's declaration.\n\n        \u003e Note: This is not necessarily a lexical token. A sequence of fragments should be able to be joined\n        end-to-end to form tagged spans of text that can highlight the syntax of a symbol's declaration.\n\n        \u003e Note: When the kind of fragment is `typeIdentifier`, an optional *precise identifier* may be included to allow for linking to a type symbol.\n      type: object\n      required:\n        - kind\n        - spelling\n      properties:\n        kind:\n          title: Kind\n          description: The kind of declaration fragment.\n          type: string\n          enum:\n            - keyword\n            - attribute\n            - number\n            - string\n            - identifier\n            - typeIdentifier\n            - genericParameter\n            - text\n        spelling:\n          type: string\n        preciseIdentifier:\n          type: string\n          nullable: true\n    LineList:\n      title: LineList\n      description: |\n        A logical grouping of text ranges in a document making up a block of textual content.\n\n        A line list shouldn't contain any documentation comment markers or newlines.\n\n        For example, for the following C++\\-style documentation comment:\n\n        ```c++\n        /// First line\n        /// Second line\n        void foo() {}\n        ```\n\n        The line list would be represented by the following LineList:\n\n        ```json\n        {\n          \"lines\": [\n            {\n              \"text\": \"First line\",\n              \"range\": {\n                \"start\": {\n                  \"line\": 0,\n                  \"character\": 4\n                },\n                \"end\": {\n                  \"line\": 0,\n                  \"character\": 14\n                }\n              }\n            },\n            {\n              \"text\": \"Second line\",\n              \"range\": {\n                \"start\": {\n                  \"line\": 1,\n                  \"character\": 4\n                },\n                \"end\": {\n                  \"line\": 1,\n                  \"character\": 15\n                }\n              }\n            }\n          ]\n        }\n        ```\n\n        The same breakdown should occur for block-style documentation comments, as in:\n\n        ```c++\n        /**\n        * First line\n        * Second line\n        */\n        void foo() {}\n        ```\n\n        or:\n\n        ```c++\n        /**\n        First line\n        Second line\n        */\n        void foo() {}\n        ```\n\n        It is the responsibility of the tool generating the symbol graph to measure and trim indentation appropriately to project a logical block of text. In all of the above cases, logically, the text is:\n\n        ```\n        First line\n        Second line\n        ```\n\n        That is the text content that would be parsed as markup.\n\n        Line lists were chosen as the representation of documentation markup because each language may have different syntactic forms for documentation comments. This form works for both sequences of single-line comments or multi-line comment blocks.\n      type: object\n      required:\n        - lines\n      properties:\n        lines:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Line\"\n    Line:\n      title: Line\n      description: A selection of a line from a source file.\n      type: object\n      required:\n        - text\n      properties:\n        text:\n          description: The text of the selection.\n          type: string\n        range:\n          $ref: \"#/components/schemas/SourceRange\"\n          nullable: true\n    SourceRange:\n      title: SourceRange\n      description: The location of the range in a source file or resource if applicable.\n      type: object\n      required:\n        - start\n        - end\n      properties:\n        start:\n          $ref: \"#/components/schemas/SourcePosition\"\n        end:\n          $ref: \"#/components/schemas/SourcePosition\"\n    SourcePosition:\n      title: SourcePosition\n      description: A cursor location in a source file or resource.\n      type: object\n      required:\n        - line\n        - character\n      properties:\n        line:\n          description: The line number in the source file or resource.\n          type: number\n          minimum: 0\n          format: int64\n        character:\n          description: The byte offset into the line.\n          type: number\n          minimum: 0\n          format: int64\n    AvailabilityItem:\n      title: AvailabilityItem\n      description: |\n        Availability of a symbol in a particular domain.\n      type: object\n      properties:\n        domain:\n          description: |\n            A versioned context where a symbol resides.\n\n            For example, a domain can be an operating system, programming language,\n            or perhaps a web platform.\n\n            A single framework, library, or module could theoretically be\n            an `AvailabilityDomain`, as it is a containing context and almost always\n            has a version.\n            However, availability is usually tied to some larger platform like an SDK for\n            an operating system like *iOS*.\n\n            There may be exceptions when there isn't a reasonable larger context.\n            For example, a web framework's larger context is simply *the Web*.\n            Therefore, a web framework could be its own domain so that deprecations and\n            API changes can be tracked across versions of that framework.\n          type: string\n          nullable: true\n        introducedVersion:\n          description: The version of a domain where the symbol was introduced.\n          $ref: \"#/components/schemas/SemanticVersion\"\n          nullable: true\n        deprecatedVersion:\n          description: The version of a domain where the symbol was deprecated.\n          $ref: \"#/components/schemas/SemanticVersion\"\n          nullable: true\n        obsoletedVersion:\n          description: The version of a domain where the symbol was obsoleted.\n          $ref: \"#/components/schemas/SemanticVersion\"\n          nullable: true\n        message:\n          description: A basic description explaining why this availability is specified if applicable.\n          type: string\n          nullable: true\n        renamed:\n          description: An idiomatic spelling of what this symbol was renamed to, if applicable.\n          type: string\n          nullable: true\n        isUnconditionallyDeprecated:\n          type: boolean\n          default: false\n        isUnconditionallyUnavailable:\n          type: boolean\n          default: false\n        willEventuallyBeDeprecated:\n          type: boolean\n          default: false\n    FunctionSignature:\n      title: FunctionSignature\n      type: object\n      required:\n        - parameters\n        - returns\n      properties:\n        parameters:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FunctionParameter\"\n        returns:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DeclarationFragment\"\n    FunctionParameter:\n      title: FunctionParameter\n      type: object\n      required:\n        - declaration\n      properties:\n        name:\n          type: string\n          nullable: true\n        declaration:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DeclarationFragment\"\n        children:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FunctionParameter\"\n    SwiftExtension:\n      title: SwiftExtension\n      type: object\n      required:\n        - extendedModule\n      properties:\n        extendedModule:\n          description: The name of the module whose type was extended.\n          type: string\n        constraints:\n          description: An array of generic constraints on the extension, if any.\n          nullable: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/SwiftGenericConstraint\"\n    SwiftGenerics:\n      title: SwiftGenerics\n      type: object\n      properties:\n        parameters:\n          description: The generic parameters of a symbol, if any.\n          nullable: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/SwiftGenericParameter\"\n        constraints:\n          description: The constraints on a symbol's available generic parameters, if any.\n          nullable: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/SwiftGenericConstraint\"\n    SwiftGenericParameter:\n      title: SwiftGenericParameter\n      description: A generic parameter of a Swift declaration.\n      required:\n        - name\n        - index\n        - depth\n      properties:\n        name:\n          description: The name of the generic parameter.\n          type: string\n        index:\n          description: The index of the generic parameter at its depth.\n          type: number\n          format: int64\n        depth:\n          description: The depth of the generic parameter; parameters declared at deeper scopes have increased depth.\n          type: number\n          format: int64\n    SwiftGenericConstraint:\n      title: SwiftGenericConstraint\n      description: A constraint between two types.\n      required:\n        - kind\n        - lhs\n        - rhs\n      properties:\n        kind:\n          title: Kind\n          description: A kind of generic constraint.\n          type: string\n          enum:\n            - conformance\n            - superclass\n            - sameType\n        lhs:\n          description: The spelling of the left-hand side of the constraint.\n          type: string\n        rhs:\n          description: The spelling of the right-hand side of the constraint.\n          type: string\n",
			"canonicalURL": "/github.com/apple/swift-docc-symbolkit@669b21872fab75a68b60bc8482c24260c4296bf7/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/apple/swift-docc-symbolkit/blob/669b21872fab75a68b60bc8482c24260c4296bf7/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}