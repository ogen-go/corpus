{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/istio/api"
		},
		"file": {
			"name": "sidecar.gen.json",
			"size": 0,
			"path": "networking/v1beta1/sidecar.gen.json",
			"byteSize": 14680,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Configuration affecting network reachability of a sidecar.\",\n    \"version\": \"v1beta1\"\n  },\n  \"components\": {\n    \"schemas\": {\n      \"istio.networking.v1beta1.CaptureMode\": {\n        \"description\": \"`CaptureMode` describes how traffic to a listener is expected to be captured. Applicable only when the listener is bound to an IP.\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"DEFAULT\",\n          \"IPTABLES\",\n          \"NONE\"\n        ]\n      },\n      \"istio.networking.v1beta1.Destination\": {\n        \"description\": \"Destination indicates the network addressable service to which the request/connection will be sent after processing a routing rule. The destination.host should unambiguously refer to a service in the service registry. Istio's service registry is composed of all the services found in the platform's service registry (e.g., Kubernetes services, Consul services), as well as services declared through the [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry) resource.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"host\": {\n            \"description\": \"The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic forwarded to destinations that are not found in either of the two, will be dropped.\",\n            \"type\": \"string\"\n          },\n          \"subset\": {\n            \"description\": \"The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule.\",\n            \"type\": \"string\"\n          },\n          \"port\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.PortSelector\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.IstioEgressListener\": {\n        \"description\": \"`IstioEgressListener` specifies the properties of an outbound traffic listener on the sidecar proxy attached to a workload instance.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"port\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.Port\"\n          },\n          \"bind\": {\n            \"description\": \"The IP or the Unix domain socket to which the listener should be bound to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). If omitted, Istio will automatically configure the defaults based on imported services, the workload instances to which this configuration is applied to and the captureMode. If captureMode is `NONE`, bind will default to 127.0.0.1.\",\n            \"type\": \"string\"\n          },\n          \"captureMode\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.CaptureMode\"\n          },\n          \"hosts\": {\n            \"description\": \"One or more service hosts exposed by the listener in `namespace/dnsName` format. Services in the specified namespace matching `dnsName` will be exposed. The corresponding service can be a service in the service registry (e.g., a Kubernetes or cloud foundry service) or a service specified using a `ServiceEntry` or `VirtualService` configuration. Any associated `DestinationRule` in the same namespace will also be used.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"istio.networking.v1beta1.IstioIngressListener\": {\n        \"description\": \"`IstioIngressListener` specifies the properties of an inbound traffic listener on the sidecar proxy attached to a workload instance.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"port\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.Port\"\n          },\n          \"bind\": {\n            \"description\": \"The IP to which the listener should be bound. Must be in the format `x.x.x.x`. Unix domain socket addresses are not allowed in the bind field for ingress listeners. If omitted, Istio will automatically configure the defaults based on imported services and the workload instances to which this configuration is applied to.\",\n            \"type\": \"string\"\n          },\n          \"captureMode\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.CaptureMode\"\n          },\n          \"defaultEndpoint\": {\n            \"description\": \"The IP endpoint or Unix domain socket to which traffic should be forwarded to. This configuration can be used to redirect traffic arriving at the bind `IP:Port` on the sidecar to a `localhost:port` or Unix domain socket where the application workload instance is listening for connections. Arbitrary IPs are not supported. Format should be one of `127.0.0.1:PORT`, `0.0.0.0:PORT` (which will forward to the instance IP), or `unix:///path/to/socket`\",\n            \"type\": \"string\"\n          },\n          \"tls\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.ServerTLSSettings\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.OutboundTrafficPolicy\": {\n        \"description\": \"`OutboundTrafficPolicy` sets the default behavior of the sidecar for handling outbound traffic from the application. If your application uses one or more external services that are not known apriori, setting the policy to `ALLOW_ANY` will cause the sidecars to route any unknown traffic originating from the application to its requested destination. Users are strongly encouraged to use `ServiceEntry` configurations to explicitly declare any external dependencies, instead of using `ALLOW_ANY`, so that traffic to these services can be monitored.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"mode\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.OutboundTrafficPolicy.Mode\"\n          },\n          \"egressProxy\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.Destination\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.OutboundTrafficPolicy.Mode\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"REGISTRY_ONLY\",\n          \"ALLOW_ANY\"\n        ]\n      },\n      \"istio.networking.v1beta1.Port\": {\n        \"description\": \"Port describes the properties of a specific port of a service.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"number\": {\n            \"description\": \"A valid non-negative integer port number.\",\n            \"type\": \"integer\"\n          },\n          \"protocol\": {\n            \"description\": \"The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Label assigned to the port.\",\n            \"type\": \"string\"\n          },\n          \"targetPort\": {\n            \"description\": \"The port number on the endpoint where the traffic will be received. Applicable only when used with ServiceEntries.\",\n            \"type\": \"integer\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.PortSelector\": {\n        \"description\": \"PortSelector specifies the number of a port to be used for matching or selection for final routing.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"number\": {\n            \"description\": \"Valid port number\",\n            \"type\": \"integer\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.ServerTLSSettings\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"httpsRedirect\": {\n            \"description\": \"If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.\",\n            \"type\": \"boolean\"\n          },\n          \"mode\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.ServerTLSSettings.TLSmode\"\n          },\n          \"serverCertificate\": {\n            \"description\": \"REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file holding the server-side TLS certificate to use.\",\n            \"type\": \"string\"\n          },\n          \"privateKey\": {\n            \"description\": \"REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file holding the server's private key.\",\n            \"type\": \"string\"\n          },\n          \"caCertificates\": {\n            \"description\": \"REQUIRED if mode is `MUTUAL`. The path to a file containing certificate authority certificates to use in verifying a presented client side certificate.\",\n            \"type\": \"string\"\n          },\n          \"credentialName\": {\n            \"description\": \"For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates. Applicable only on Kubernetes. The secret (of type `generic`) should contain the following keys and values: `key: \\u003cprivateKey\\u003e` and `cert: \\u003cserverCert\\u003e`. For mutual TLS, `cacert: \\u003cCACertificate\\u003e` can be provided in the same secret or a separate secret named `\\u003csecret\\u003e-cacert`. Secret of type tls for server certificates along with ca.crt key for CA certificates is also supported. Only one of server certificates and CA certificate or credentialName can be specified.\",\n            \"type\": \"string\"\n          },\n          \"subjectAltNames\": {\n            \"description\": \"A list of alternate names to verify the subject identity in the certificate presented by the client.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"verifyCertificateSpki\": {\n            \"description\": \"An optional list of base64-encoded SHA-256 hashes of the SKPIs of authorized client certificates. Note: When both verify_certificate_hash and verify_certificate_spki are specified, a hash matching either value will result in the certificate being accepted.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"verifyCertificateHash\": {\n            \"description\": \"An optional list of hex-encoded SHA-256 hashes of the authorized client certificates. Both simple and colon separated formats are acceptable. Note: When both verify_certificate_hash and verify_certificate_spki are specified, a hash matching either value will result in the certificate being accepted.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"minProtocolVersion\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.ServerTLSSettings.TLSProtocol\"\n          },\n          \"maxProtocolVersion\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.ServerTLSSettings.TLSProtocol\"\n          },\n          \"cipherSuites\": {\n            \"description\": \"Optional: If specified, only support the specified cipher list. Otherwise default to the default cipher list supported by Envoy.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"istio.networking.v1beta1.ServerTLSSettings.TLSProtocol\": {\n        \"description\": \"TLS protocol versions.\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"TLS_AUTO\",\n          \"TLSV1_0\",\n          \"TLSV1_1\",\n          \"TLSV1_2\",\n          \"TLSV1_3\"\n        ]\n      },\n      \"istio.networking.v1beta1.ServerTLSSettings.TLSmode\": {\n        \"description\": \"TLS modes enforced by the proxy\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"PASSTHROUGH\",\n          \"SIMPLE\",\n          \"MUTUAL\",\n          \"AUTO_PASSTHROUGH\",\n          \"ISTIO_MUTUAL\"\n        ]\n      },\n      \"istio.networking.v1beta1.Sidecar\": {\n        \"description\": \"`Sidecar` describes the configuration of the sidecar proxy that mediates inbound and outbound communication of the workload instance to which it is attached.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"workloadSelector\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.WorkloadSelector\"\n          },\n          \"ingress\": {\n            \"description\": \"Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance. If omitted, Istio will automatically configure the sidecar based on the information about the workload obtained from the orchestration platform (e.g., exposed ports, services, etc.). If specified, inbound ports are configured if and only if the workload instance is associated with a service.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/istio.networking.v1beta1.IstioIngressListener\"\n            }\n          },\n          \"egress\": {\n            \"description\": \"Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh. If not specified, inherits the system detected defaults from the namespace-wide or the global default Sidecar.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/istio.networking.v1beta1.IstioEgressListener\"\n            }\n          },\n          \"outboundTrafficPolicy\": {\n            \"$ref\": \"#/components/schemas/istio.networking.v1beta1.OutboundTrafficPolicy\"\n          }\n        }\n      },\n      \"istio.networking.v1beta1.WorkloadSelector\": {\n        \"description\": \"`WorkloadSelector` specifies the criteria used to determine if the `Gateway`, `Sidecar`, `EnvoyFilter`, `ServiceEntry`, or `DestinationRule` configuration can be applied to a proxy. The matching criteria includes the metadata associated with a proxy, workload instance info such as labels attached to the pod/VM, or any other info that the proxy provides to Istio during the initial handshake. If multiple conditions are specified, all conditions need to match in order for the workload instance to be selected. Currently, only label based selection mechanism is supported.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"labels\": {\n            \"description\": \"One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied. The scope of label search is restricted to the configuration namespace in which the the resource is present.\",\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
			"canonicalURL": "/github.com/istio/api@080342889567f6e972e8bfcfbf3fbf4be20a1471/-/blob/networking/v1beta1/sidecar.gen.json",
			"externalURLs": [
				{
					"url": "https://github.com/istio/api/blob/080342889567f6e972e8bfcfbf3fbf4be20a1471/networking/v1beta1/sidecar.gen.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}