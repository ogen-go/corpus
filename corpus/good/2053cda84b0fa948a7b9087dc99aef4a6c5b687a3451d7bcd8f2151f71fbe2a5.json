{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "metadata.yaml",
			"size": 0,
			"path": "Specification/Components/Schemas/metadata.yaml",
			"byteSize": 6021,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths: {}\ncomponents:\n  schemas:\n    metadata:\n      allOf:\n      - $ref: '#/components/schemas/metadataBase'\n      - type: object\n        properties:\n          pagination:\n            $ref: '#/components/schemas/indexPagination'\n    metadataBase:\n      type: object\n      properties:\n        datafiles:\n          description: |-\n            The datafiles contains a list of file URLs and metadata. \n            These files contain additional information related to the returned object and can be retrieved by a subsequent call. \n            This could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. \n          items:\n            $ref: '#/components/schemas/dataFile'\n          type: array\n        status:\n          description: |-\n            The status field contains a list of informational status messages from the server. \n            If no status is reported, an empty list should be returned. See Error Reporting for more information.\n          items:\n            $ref: '#/components/schemas/status'\n          type: array\n    metadataTokenPagination:\n      allOf:\n      - $ref: '#/components/schemas/metadataBase'\n      - type: object\n        properties:\n          pagination:\n            $ref: '#/components/schemas/tokenPagination'\n    basePagination:\n      type: object\n      required:\n      - pageSize\n      properties:\n        pageSize:\n          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.   \n          type: integer\n          default: 1000\n          example: 1000\n        totalCount:\n          description: The total number of elements that are available on the server and match the requested query parameters. \n          type: integer\n          example: 10\n        totalPages:\n          description: |-\n            The total number of pages of elements available on the server. This should be calculated with the following formula. \n            \n            totalPages = CEILING( totalCount / requested_page_size)\n          type: integer\n          example: 1\n    indexPagination:\n      allOf:\n      - $ref: '#/components/schemas/basePagination'\n      - type: object\n        description: |-\n          The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n          \n          Pages are zero indexed, so the first page will be page 0 (zero).\n        required:\n        - currentPage\n        properties:\n          currentPage:\n            description: The index number for the returned page of data. This should always match the requested page number or the default page (0). \n            type: integer\n            default: 0\n            example: 0\n    tokenPagination:\n      allOf:\n      - $ref: '#/components/schemas/basePagination'\n      - type: object\n        description: |-\n          The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n          \n          Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  \n        required:\n        - nextPageToken\n        properties:\n          nextPageToken:\n            description: The string token used to query the next page of data.\n            type: string\n            example: cb668f63\n          currentPageToken:\n            description: The string token used to query the current page of data.\n            type: string\n            example: 48bc6ac1\n          prevPageToken:\n            description: The string token used to query the previous page of data.\n            type: string\n            example: 9659857e\n    dataFile:\n      type: object\n      description: A dataFile contains a URL and the relevant file metadata to represent a file\n      required:\n      - fileURL\n      properties:\n        fileURL:\n          description: The absolute URL where the file is located\n          type: string\n          format: uri\n          example: https://wiki.brapi.org/examples/datafile.xlsx\n        fileName:\n          description: The name of the file\n          type: string\n          example: datafile.xlsx\n        fileSize:\n          description: The size of the file in bytes\n          type: integer\n          example: 4398\n        fileDescription:\n          description: A human readable description of the file contents\n          type: string\n          example: This is an Excel data file\n        fileType:\n          description: The type or format of the file. Preferably MIME Type.\n          type: string\n          example:  application/vnd.ms-excel\n        fileMD5Hash:\n          description: The MD5 Hash of the file contents to be used as a check sum\n          type: string\n          example: c2365e900c81a89cf74d83dab60df146\n    status:\n      description: An array of status messages to convey technical logging information from the server to the client. \n      required:\n      - message\n      - messageType\n      type: object\n      properties:\n        message:\n          description: A short message concerning the status of this request/response\n          type: string\n          example: Request accepted, response successful\n        messageType:\n          description: The logging level for the attached message\n          enum:\n          - DEBUG\n          - ERROR\n          - WARNING\n          - INFO\n          type: string\n          example: INFO\n\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@5252d84f331840650fffbca6cb8cece10a65cea6/-/blob/Specification/Components/Schemas/metadata.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/5252d84f331840650fffbca6cb8cece10a65cea6/Specification/Components/Schemas/metadata.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}