{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/renbou/dontstress"
		},
		"file": {
			"name": "lambda-api.yaml",
			"size": 0,
			"path": "lambda-api.yaml",
			"byteSize": 11172,
			"content": "openapi: 3.1.0\ninfo:\n  title: lambda-api\n  version: \"0.1\"\n  description: Lambda-based API for manipulating labs/tasks and running tests\n  license:\n    name: Apache 2.0\n    identifier: Apache-2.0\nservers:\n  - url: \"http://localhost:3000\"\npaths:\n  /labs:\n    get:\n      summary: Get Labs\n      tags:\n        - Public\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: Unique id of a lab\n                    data:\n                      $ref: \"#/components/schemas/Lab\"\n                  required:\n                    - id\n                    - data\n      operationId: get-labs\n      description: Get list of created labs' descriptions\n      parameters: []\n    parameters: []\n    post:\n      summary: Create Lab\n      operationId: create-lab\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n                description: ID of created lab\n                readOnly: true\n        \"400\":\n          $ref: \"#/components/responses/Bad-Request-Data\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized-Admin-Request\"\n      description: Create new lab by description\n      tags:\n        - Admin\n      parameters:\n        - $ref: \"#/components/parameters/Admin-Auth\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Lab\"\n        description: New lab description\n  \"/lab/{labid}\":\n    parameters:\n      - $ref: \"#/components/parameters/Lab-Id\"\n    delete:\n      summary: Delete lab\n      operationId: delete-lab\n      responses:\n        \"200\":\n          description: OK\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized-Admin-Request\"\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      description: Delete lab with given id\n      parameters:\n        - $ref: \"#/components/parameters/Admin-Auth\"\n      tags:\n        - Admin\n  \"/lab/{labid}/tasks\":\n    parameters:\n      - $ref: \"#/components/parameters/Lab-Id\"\n    get:\n      summary: Get lab tasks\n      tags:\n        - Public\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: Unique id of task\n                    data:\n                      $ref: \"#/components/schemas/Task\"\n                  required:\n                    - id\n                    - data\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      operationId: get-lab-tasks\n      description: Get tasks' descriptions for lab\n    post:\n      summary: Create lab task\n      operationId: create-lab-task\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n                description: ID of created task\n                readOnly: true\n        \"400\":\n          $ref: \"#/components/responses/Bad-Request-Data\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized-Admin-Request\"\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      description: Create a new task for the specified lab using the new task's description\n      parameters:\n        - $ref: \"#/components/parameters/Admin-Auth\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Task\"\n        description: New task description\n      tags:\n        - Admin\n  \"/lab/{labid}/task/{taskid}\":\n    parameters:\n      - $ref: \"#/components/parameters/Lab-Id\"\n      - $ref: \"#/components/parameters/Task-Id\"\n    post:\n      summary: Add task data\n      operationId: add-task-data\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          $ref: \"#/components/responses/Bad-Request-Data\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized-Admin-Request\"\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      parameters:\n        - $ref: \"#/components/parameters/Admin-Auth\"\n      description: \"Links additional information to task. Currently only files (generator, validator)\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                type:\n                  type: string\n                  description: Type of file linked (generator/validator)\n                  enum:\n                    - generator\n                    - validator\n                file:\n                  $ref: \"#/components/schemas/CodeFile\"\n              required:\n                - type\n            examples: {}\n        description: Linked file data\n      tags:\n        - Admin\n    delete:\n      summary: Delete task\n      operationId: delete-task\n      responses:\n        \"200\":\n          description: OK\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized-Admin-Request\"\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      description: Deletes task inside lab with given ids\n      parameters:\n        - $ref: \"#/components/parameters/Admin-Auth\"\n      tags:\n        - Admin\n  \"/lab/{labid}/task/{taskid}/test\":\n    parameters:\n      - schema:\n          type: string\n        name: labid\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: taskid\n        in: path\n        required: true\n    post:\n      summary: Run task test\n      operationId: run-task-test\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                description: \"ID of the test run, which can be used to query the results of the run\"\n        \"400\":\n          $ref: \"#/components/responses/Bad-Request-Data\"\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      description: Runs task tests with passed solution\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CodeFile\"\n      tags:\n        - Public\n    get:\n      summary: Poll task test result\n      operationId: poll-task-test\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    description: Current status of test run\n                    enum:\n                      - QUEUE\n                      - RUNNING\n                      - DONE\n                  tests:\n                    type: array\n                    description: Results of each test\n                    items:\n                      $ref: \"#/components/schemas/TestResult\"\n                required:\n                  - status\n                  - tests\n        \"404\":\n          $ref: \"#/components/responses/Resource-Not-Found\"\n      description: Poll test run results\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: id\n          required: true\n          description: \"ID of the test run, as given by POST\"\n      tags:\n        - Public\ncomponents:\n  schemas:\n    Lab:\n      title: Lab\n      type: object\n      examples:\n        - name: Sem 3 Lab 1. DFS + MST\n      description: General information about a lab\n      properties:\n        name:\n          type: string\n          description: Name of the lab like on Codeforces/PCMS\n      required:\n        - name\n    Error:\n      title: Error\n      type: object\n      properties:\n        message:\n          type: string\n      required:\n        - message\n      examples:\n        - message: Unauthorized request\n      description: Error type which is returned on a failed request\n    Task:\n      title: Task\n      type: object\n      description: Information about a single task of a lab\n      examples:\n        - name: C. Vertice-Biconnected Components\n      properties:\n        name:\n          type: string\n          description: Name of task in this lab\n      required:\n        - name\n    CodeFile:\n      title: CodeFile\n      type: object\n      properties:\n        lang:\n          type: string\n          description: Language of the data\n        data:\n          type: string\n          description: Actual data of the file\n      required:\n        - lang\n        - data\n      description: One file of code written in some language\n      examples:\n        - lang: G++\n          data: \"int main(){ return 0; }\"\n    TestResult:\n      title: TestResult\n      type: object\n      description: Results of a single test\n      properties:\n        result:\n          type: string\n          description: PASS/FAIL etc\n          enum:\n            - PASS\n            - FAIL\n            - ML\n            - RE\n            - CE\n        message:\n          type: string\n          description: Description of result if result isn't OK/FAIl\n        data:\n          type: object\n          properties:\n            test:\n              type: string\n              description: \"Test data, any format as given by task description\"\n            expected:\n              type: string\n              description: Answer given by the validator\n            got:\n              type: string\n              description: Your answer\n      required:\n        - result\n  securitySchemes: {}\n  parameters:\n    Admin-Auth:\n      name: Authorization\n      in: header\n      schema:\n        type: string\n      required: true\n      description: Basic Base64 encoded admin token\n    Lab-Id:\n      name: labid\n      in: path\n      required: true\n      schema:\n        type: string\n        example: aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n      description: Unique ID of the lab as returned by GET /labs\n    Task-Id:\n      name: taskid\n      in: path\n      required: true\n      schema:\n        type: string\n        example: \"1\"\n      description: \"Unique task id as returned by GET /lab/{labid}/tasks\"\n  responses:\n    Unauthorized-Admin-Request:\n      description: Unauthorized resource manipulation\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Resource-Not-Found:\n      description: Resource queried by id wasn't found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Bad-Request-Data:\n      description: \"Invalid data sent in the request (unsupported, required fields missing etc)\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n  requestBodies: {}\ntags:\n  - name: Admin\n  - name: Public\n",
			"canonicalURL": "/github.com/renbou/dontstress@6f8f08e178028ee371f0e0acbf0680649f0eb136/-/blob/lambda-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/renbou/dontstress/blob/6f8f08e178028ee371f0e0acbf0680649f0eb136/lambda-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}