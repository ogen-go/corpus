{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Laboratoria/bootcamp"
		},
		"file": {
			"name": "burger-queen-api.yml",
			"size": 0,
			"path": "projects/04-burger-queen-api/burger-queen-api.yml",
			"byteSize": 32268,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    Documentación \n    [Burger Queen API](https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api)\n  version: 2.0.0\n  title: Burger Queen API\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/ssinuco/BurgerQueenAPI/2.0.0\n  - url: 'http://127.0.0.1:8080'\ntags:\n  - name: \"auth\"\n    description: \"Operaciones de autenticación\"\n  - name: \"orders\"\n    description: \"Operaciones sobre ordenes\"\n  - name: \"products\"\n    description: \"Operaciones sobre productos\"\n  - name: \"users\"\n    description: \"Operaciones sobre usuarias\"\npaths:\n  /login:\n    post:\n      tags:\n      - \"auth\"\n      summary: \"Crea token de autenticación\"\n      operationId: \"getToken\"\n      requestBody:\n        description: \"Información de autenticación\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: \"object\"\n              properties:\n                email:\n                  type: \"string\"\n                  description: \"Correo\"\n                password:\n                  type: \"string\"\n                  description: \"Contraseña\"\n              example:\n                email: \"anita.borg@systers.xyz\"\n                password: \"g6WQSrsv7rC7et5B\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  accessToken:\n                    type: \"string\"\n                    description: \"Token a usar para los requests sucesivos\"\n                example:\n                  accessToken: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n        \"400\":\n          description: \"si no se proveen `email` o `password` o ninguno de los dos\"    \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si las credenciales no coinciden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n  /orders:\n    get:\n      tags:\n      - \"orders\"\n      summary: \"Lista ordenes\"\n      operationId: \"getOrders\"\n      security:\n        - bearerAuth: []      \n      parameters:\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/limitParam\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Orders\"\n              examples:\n                AllOrders:\n                  $ref: \"#/components/examples/AllOrders\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'        \n    post:\n      tags:\n      - \"orders\"\n      summary: \"Crea una orden\"\n      operationId: \"createOrder\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: \"Objeto con información de la nueva orden\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n            examples:\n              NewOrder:\n                $ref: \"#/components/examples/NewOrder\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n              examples:\n                Order3:\n                  $ref: \"#/components/examples/Order3\"\n        \"400\":\n          description: \"no se indica `userId` o se intenta crear una orden sin productos\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orders/{orderId}:\n    get:\n      tags:\n      - \"orders\"\n      summary: \"Obtiene los datos de una orden especifica\"\n      operationId: \"getOrderById\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: \"path\"\n          name: \"orderId\"\n          description: \"id de la orden a consultar\"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n              examples:\n                Order1:\n                  $ref: \"#/components/examples/Order1\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si la orden solicitada no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    patch:\n      tags:\n      - \"orders\"\n      summary: \"Modifica una orden\"\n      operationId: \"updateOrder\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: \"path\"\n          name: \"orderId\"\n          description: \"id de la orden\"\n          required: true\n          schema:\n            type: \"string\"\n      requestBody:          \n        description: \"Objeto con nueva información para la orden\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Status\"\n            examples:\n                Status1:\n                  $ref: \"#/components/examples/Status1\"      \n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n              examples:\n                Order3:\n                  $ref: \"#/components/examples/Order2\"\n        \"400\":\n          description: \"si no se indican ninguna propiedad a modificar o la propiedad `status` no es valida\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si la order con `orderId` indicado no existe\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    delete:\n      tags:\n      - \"orders\"\n      summary: \"Elimina una orden\"\n      operationId: \"deleteOrder\"\n      security:\n        - bearerAuth: []\n      parameters:\n      - in: \"path\"\n        name: \"orderId\"\n        description: \"id de la orden\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n              examples:\n                Order1:\n                  $ref: \"#/components/examples/Order1\"\n                \n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si la orden con `orderId` indicado no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n  /products:\n    get:\n      tags:\n      - \"products\"\n      summary: \"Lista productos\"\n      operationId: \"getProducts\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/limitParam\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Products\"\n              examples:\n                Products:\n                  $ref: \"#/components/examples/AllProducts\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    post:\n      tags:\n      - \"products\"\n      summary: \"Crea un producto\"\n      operationId: \"createProduct\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: \"Objeto con información del nuevo producto\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewProduct\"\n            examples:\n              NewProduct:\n                $ref: \"#/components/examples/NewProduct\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n              examples:\n                Water:\n                  $ref: \"#/components/examples/Water\"\n        \"400\":\n          description: \"si no se indican `name` o `price`\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'            \n        \"403\":\n          description: \"si el token de autenticación no es de una usuaria administrador\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /products/{productId}:\n    get:\n      tags:\n      - \"products\"\n      summary: \"Obtiene los datos de un producto especifico \"\n      operationId: \"getProductById\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: \"path\"\n          name: \"productId\"\n          description: \"id del producto\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n              examples:\n                Sandwich:\n                  $ref: \"#/components/examples/Sandwich\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si el producto solicitado no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    patch:\n      tags:\n      - \"products\"\n      summary: \"Modifica un producto\"\n      operationId: \"updateProduct\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: \"path\"\n          name: \"productId\"\n          description: \"id del producto\"\n          required: true\n          schema:\n            type: \"string\"\n      requestBody:\n        description: \"Objeto con nueva información para el producto\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Product\"\n            examples:\n              NewProduct:\n                $ref: \"#/components/examples/NewProduct\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n              examples:\n                Water:\n                  $ref: \"#/components/examples/Water\"\n        \"400\":\n          description: \"si no se indican ninguna propiedad a modificar\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"si el token de autenticación no es de una usuaria administradora\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"si el producto con `productId` indicado no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n      - \"products\"\n      summary: \"Elimina un producto\"\n      operationId: \"deleteProduct\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: \"path\"\n          name: \"productId\"\n          description: \"id del producto\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n              examples:\n                Water:\n                  $ref: \"#/components/examples/Water\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"si el token de autenticación no es de una usuaria administradora\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"si el producto con `productId` indicado no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n  /users:\n    get:\n      tags:\n      - \"users\"\n      summary: \"Lista usuarias\"\n      operationId: \"getUser\"\n      security:\n        - bearerAuth: []\n      parameters:\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/limitParam\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n              examples:\n                AllUsers:\n                  $ref: \"#/components/examples/AllUsers\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"si el token de autenticación no es de una usuaria administrador\"  \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'    \n    post:\n      tags:\n      - \"users\"\n      summary: \"Crea una usuaria\"\n      operationId: \"createUser\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: \"Objeto con información de la nueva usuaria\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n            examples:\n              NewUser:\n                $ref: \"#/components/examples/NewUser\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                NewUser:\n                  $ref: \"#/components/examples/Grace\"\n        \"400\":\n          description: \"si no se proveen `email` o `password` o ninguno de los dos\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"si ya existe usuaria con ese `email`\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n  /users/{uid}:\n    get:\n      tags:\n      - \"users\"\n      summary: \"Obtiene información de una usuaria\"\n      operationId: \"getUserById\"\n      security:\n        - bearerAuth: []\n      parameters:\n      - in: \"path\"\n        name: \"uid\"\n        description: \"id o email de la usuaria a consultar\"\n        required: true\n        schema:\n          type: \"string\"\n        example: \"anita.borg@systers.xyz\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                Anita:\n                  $ref: \"#/components/examples/Anita\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"si el token de autenticación no es de una usuario administradora o no es de la misma usuaria que corresponde al parametro uid\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si la usuaria solicitada no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    patch:\n      tags:\n      - \"users\"\n      summary: \"Modifica una usuaria\"\n      operationId: \"updateUser\"\n      security:\n        - bearerAuth: []\n      parameters:\n      - in: \"path\"\n        name: \"uid\"\n        description: \"id o email de la usuaria a modificar\"\n        required: true\n        schema:\n          type: \"string\"\n      requestBody:\n        description: \"Objeto con nueva información para la usuaria\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n            examples:\n              NewUser:\n                $ref: \"#/components/examples/NewUser\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                Grace:\n                  $ref: \"#/components/examples/Grace\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"403\":\n          description: \"Caso 1: si el token de autenticación no es de una usuario administradora o no es de la misma usuaria que corresponde al parametro uid. Caso 2: una usuaria no admin intenta de modificar sus `roles`\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'        \n        \"404\":\n          description: \"si la usuaria solicitada no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n    delete:\n      tags:\n      - \"users\"\n      summary: \"Elimina una usuaria \"\n      operationId: \"deleteUser\"\n      security:\n        - bearerAuth: []\n      parameters:\n      - in: \"path\"\n        name: \"uid\"\n        description: \"id o email de la usuaria a eliminar\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"operación exitosa\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                NewUser:\n                  $ref: \"#/components/examples/Anita\"\n        \"401\":\n          description: \"si no hay cabecera de autenticación\"\n        \"403\":\n          description: \"si el token de autenticación no es de una usuario administradora o no es de la misma usuaria que corresponde al parametro uid\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \n        \"404\":\n          description: \"si la usuaria solicitada no existe\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'          \ncomponents:\n  schemas:\n    Users:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/User\"\n    User:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          description: \"Id\"\n        email:\n          type: \"string\"\n          description: \"Correo electrónico\"\n        password:\n          type: \"string\"\n          description: \"Contraseña\"\n        roles:\n          type: object\n          description: \"Rol administrador asignado\"\n          properties:\n            admin:\n              type: boolean\n              description: \"True si la usuario es administradora\"\n    Orders:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/Order\"\n    Order:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          description: \"Id\"\n        userId:\n          type: \"string\"\n          description: \"Id usuaria que creó la orden\"\n        client:\n          type: \"string\"\n          description: \"Clienta para quien se creó la orden\"\n        products:\n          description: \"Productos de la orden\"\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/ProductOrder\"\n        status:\n          type: \"string\"\n          description: \"Estado de la orden\"\n          enum: \n            - \"pending\"\n            - \"canceled\"\n            - \"delivering\"\n            - \"delivered\"\n        dateEntry:\n          type: \"string\"\n          format: \"date\"\n          description: \"Fecha de creación\"\n        dateProcessed:\n          type: \"string\"\n          format: \"date\"\n          description: \"Fecha de cambio de `status` a `delivered`\"\n    Status:\n      type: object\n      properties:\n        status:\n          type: \"string\"\n          description: \"Estado de la orden\"\n          enum: \n            - \"pending\"\n            - \"canceled\"\n            - \"delivering\"\n            - \"delivered\"\n    ProductOrder:\n      type: \"object\"\n      properties:\n        qty:\n          description: \"Cantidad\"\n          type: \"integer\"\n          format: \"int64\"\n        product:\n          $ref: \"#/components/schemas/Product\"\n    Products:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/Product\"\n    NewProduct:\n      type: \"object\"\n      properties:\n        name:\n          description: \"Nombre\"\n          type: \"string\"\n        price:\n          description: \"Precio\"\n          type: \"string\"\n        image:\n          description: \"URL a la imagen\"\n          type: \"string\"\n        type:\n          description: \"Tipo/Categoría\"\n          type: \"string\"\n    Product:\n      type: \"object\"\n      properties:\n        id:\n          description: \"Id\"\n          type: \"string\"\n        name:\n          description: \"Nombre\"\n          type: \"string\"\n        price:\n          description: \"Precio\"\n          type: \"string\"\n        image:\n          description: \"URL a la imagen\"\n          type: \"string\"\n        type:\n          description: \"Tipo/Categoría\"\n          type: \"string\"\n        dataEntry:\n          description: \"Fecha de creación\"\n          format: \"date\"\n          type: \"string\"\n    Error:\n      type: \"object\"\n      properties:\n        error:\n          description: \"Mensaje de error\"\n          type: \"string\"\n  examples:\n    AllProducts:\n      value:\n        - id: 1214\n          name: \"Sandwich de jam\\u00f3n y queso\"\n          price: 1000\n          image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n          type: \"Desayuno\"\n          dateEntry: \"2022-03-05 15:14:10\"      \n        - id: 7450\n          name: \"Caf\\u00e9 americano\"\n          price: 500\n          image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n          type: \"Desayuno\"\n          dateEntry: \"2022-03-05 15:14:10\"          \n    NewProduct:\n      value:\n        name: \"Agua 500ml\"\n        price: 500\n        image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg\"        \n        type: \"Almuerzo\"\n    Sandwich:\n      value:\n        id: 1214\n        name: \"Sandwich de jam\\u00f3n y queso\"\n        price: 1000\n        image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n        type: \"Desayuno\"\n        dateEntry: \"2022-03-05 15:14:10\"      \n    Coffe:\n      value:\n        id: 7450\n        name: \"Caf\\u00e9 americano\"\n        price: 500\n        image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n        type: \"Desayuno\"\n        dateEntry: \"2022-03-05 15:14:10\"\n    Water:\n      value:\n        id: 8452\n        name: \"Agua 500ml\"\n        price: 500\n        image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg\"        \n        type: \"Almuerzo\"\n        dateEntry: \"2022-03-05 15:14:10\"    \n    AllOrders:\n      value:\n        - id: 2324\n          userId: 15254\n          client: \"Jude Milhon\"\n          products:\n            - qty: 1\n              product:\n                id: 1214\n                name: \"Sandwich de jam\\u00f3n y queso\"\n                price: 1000\n                image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n                type: \"Desayuno\"\n                dateEntry: \"2022-03-05 15:14:10\"      \n            - qty: 1\n              product:\n                id: 7450\n                name: \"Caf\\u00e9 americano\"\n                price: 500\n                image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n                type: \"Desayuno\"\n                dateEntry: \"2022-03-05 15:14:10\"            \n          status: \"pending\"\n          dataEntry: \"2022-03-05 15:00\"\n        - id: 8746\n          userId: 15254\n          client: \"Katie Bouman\"\n          products:\n            - qty: 2\n              product:\n                id: 7450\n                name: \"Caf\\u00e9 americano\"\n                price: 500\n                image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n                type: \"Desayuno\"\n                dateEntry: \"2022-03-05 15:14:10\"\n            - qty: 1\n              product:\n                id: 8452\n                name: \"Agua 500ml\"\n                price: 500\n                image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg\"        \n                type: \"Almuerzo\"\n                dateEntry: \"2022-03-05 15:14:10\"              \n          status: \"delivered\"\n          dataEntry: \"2022-03-05 15:00\"\n          dateProcessed: \"2022-03-05 16:00\"\n    NewOrder:\n      value:\n        userId: 15254\n        client: \"Carol Shaw\"\n        products:\n          - qty: 5\n            product:\n              id: 1214\n              name: \"Sandwich de jam\\u00f3n y queso\"\n              price: 1000\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n              type: \"Desayuno\"\n              dateEntry: \"2022-03-05 15:14:10\"\n    Order1:\n      value:\n        id: 2324\n        userId: 15254\n        client: \"Jude Milhon\"\n        products:\n          - qty: 1\n            product:\n              id: 1214\n              name: \"Sandwich de jam\\u00f3n y queso\"\n              price: 1000\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n              type: \"Desayuno\"\n              dateEntry: \"2022-03-05 15:14:10\"      \n          - qty: 1\n            product:\n              id: 7450\n              name: \"Caf\\u00e9 americano\"\n              price: 500\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n              type: \"Desayuno\"\n              dateEntry: \"2022-03-05 15:14:10\"            \n        status: \"pending\"\n        dataEntry: \"2022-03-05 15:00\"\n    Order2:\n      value:\n        id: 8746\n        userId: 15254\n        client: \"Katie Bouman\"\n        products:\n          - qty: 2\n            product:\n              id: 7450\n              name: \"Caf\\u00e9 americano\"\n              price: 500\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/coffe.jpg\"\n              type: \"Desayuno\"\n              dateEntry: \"2022-03-05 15:14:10\"\n          - qty: 1\n            product:\n              id: 8452\n              name: \"Agua 500ml\"\n              price: 500\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/water.jpg\"        \n              type: \"Almuerzo\"\n              dateEntry: \"2022-03-05 15:14:10\"              \n        status: \"delivered\"\n        dataEntry: \"2022-03-05 15:00\"\n        dateProcessed: \"2022-03-05 16:00\"\n    Order3:\n      value:\n        id: 9541\n        userId: 15254\n        client: \"Carol Shaw\"\n        products:\n          - qty: 5\n            product:\n              id: 1214\n              name: \"Sandwich de jam\\u00f3n y queso\"\n              price: 1000\n              image: \"https://github.com/Laboratoria/bootcamp/tree/main/projects/04-burger-queen-api/resources/images/sandwich.jpg\"\n              type: \"Desayuno\"\n              dateEntry: \"2022-03-05 15:14:10\"                  \n        status: \"pending\"\n        dataEntry: \"2022-03-05 15:00\"\n    Status1:\n      value:\n        status: \"delivered\"\n    AllUsers:\n      value:\n        - id: 15254\n          email: \"anita.borg@systers.xyz\"\n          roles:\n            admin: true\n        - id: 15254\n          email: \"grace.hopper@systers.xyz\"\n          roles:\n            admin: true\n    NewUser:\n      value:\n        email: \"grace.hopper@systers.xyz\"\n        password: \"9XXLqVhq3vw9yjNt\"\n        roles:\n          admin: true\n    Anita:\n      value:\n        id: 15254\n        email: \"anita.borg@systers.xyz\"\n        roles:\n          admin: true\n    Grace:\n      value:\n        id: 15254\n        email: \"grace.hopper@systers.xyz\"\n        roles:\n          admin: true\n  parameters:\n    pageParam:\n      in: \"query\"\n      name: \"_page\"\n      description: \"Página del listado a consultar\"\n      required: false\n      schema:\n        type: \"integer\"\n        default: 1\n    limitParam:\n      in: \"query\"\n      name: \"_limit\"\n      description: \"Cantitad de elementos por página\"\n      required: false\n      schema:\n        type: \"integer\"\n        default: 10\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      ",
			"canonicalURL": "/github.com/Laboratoria/bootcamp@d4c208de8776a6b89df05c9884372668e8d4c932/-/blob/projects/04-burger-queen-api/burger-queen-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Laboratoria/bootcamp/blob/d4c208de8776a6b89df05c9884372668e8d4c932/projects/04-burger-queen-api/burger-queen-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}