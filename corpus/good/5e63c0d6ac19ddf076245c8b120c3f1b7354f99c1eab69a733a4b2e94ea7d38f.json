{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/symantotextanalytics/openapi.yml",
			"byteSize": 13866,
			"content": "openapi: 3.0.3\ninfo:\n  title: Psycholinguistic Text Analytics\n  description: \u003e-\n    This is a generated connector from [Symanto Psycholinguistic Text Analytics version 1.5.0](https://api.symanto.net/docs) OpenAPI Specification.\n\n    Symanto psycholinguistic text analytics API provides capability to access operations related to the deepest understanding of people through psychology \u0026\n    AI\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create an [Symanto account](https://www.symanto.com/) and obtain OAuth tokens following [this guide](https://symanto-research.github.io/symanto-docs/#authentication)\n  x-ballerina-display:\n    label: Symanto Text Analytics\n    iconPath: \"icon.png\"\n  termsOfService: https://developers.symanto.net/terms-of-service\n  contact:\n    name: Symanto Support\n    url: https://developers.symanto.net\n    email: support@symanto.net\n  version: '1.0'\nservers:\n  - url: https://api.symanto.net\nsecurity:\n  - apiKeyHeader: []\npaths:\n  /communication:\n    post:\n      tags:\n        - Text Analysis\n      summary: Communication \u0026 Tonality\n      description: \u003e-\n        Identify the purpose and writing style of a written text.\n\n        Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`,\n        `ru`, `tr`, `zh`]\n\n\n        Returned labels:\n\n        * action-seeking\n\n        * fact-oriented\n\n        * information-seeking\n\n        * self-revealing\n      operationId: getCommunicationStyle\n      parameters:\n        - name: all\n          description: Returns all predictions, not only the most probable one\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionResults'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\n  /emotion:\n    post:\n      tags:\n        - Text Analysis\n      summary: Emotion Analysis\n      description: |-\n        Detect the emotions of the text.\n\n        Supported Langauges: [`en`, `de`, `es`]\n\n        Returned labels:\n        * anger\n        * joy\n        * love\n        * sadness\n        * surprise\n        * uncategorized\n      operationId: getEmotion\n      parameters:\n        - name: all\n          description: Returns all predictions, not only the most probable one\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionResults'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\n  /ekman-emotion:\n    post:\n      tags:\n        - Text Analysis\n      summary: Emotion Analysis\n      description: |-\n        Detect the emotions of the text based on Ekman.\n\n        Supported Langauges: [`en`, `de`, `es`]\n\n        Returned labels:\n        * anger\n        * disgust\n        * fear\n        * joy\n        * sadness\n        * surprise\n        * no-emotion\n      operationId: getEkmanEmotion\n      parameters:\n        - name: all\n          description: Returns all predictions, not only the most probable one\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionResults'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\n  /personality:\n    post:\n      tags:\n        - Text Analysis\n      summary: Personality Traits\n      description: \u003e-\n        Predict the personality trait of author of any written text.\n\n\n        Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`,\n        `ru`, `tr`, `zh`]\n\n\n        Returned labels:\n\n\n        * emotional\n\n        * rational\n      operationId: getPersonality\n      parameters:\n        - name: all\n          description: Returns all predictions, not only the most probable one\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionResults'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\n  /sentiment:\n    post:\n      tags:\n        - Text Analysis\n      summary: Sentiment Analysis\n      description: |-\n        Evaluate the overall tonality of the text.\n\n        Supported Languages: [`en`, `de`, `es`]\n\n        Returned labels:\n        * positive\n        * negative\n      operationId: getSentiment\n      parameters:\n        - name: all\n          description: Returns all predictions, not only the most probable one\n          in: query\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionResults'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\n  /topic-sentiment:\n    post:\n      tags:\n        - Text Analysis\n      summary: Extracts topics and sentiments and relates them.\n      operationId: getTopicSentiment\n      parameters:\n        - name: domain\n          in: query\n          description: Provide analysis domain for better extraction (optional)\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - Ecom\n              - Employee\n              - Hotel\n              - Restaurant\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicSentimentResponse'\n  /language-detection:\n    post:\n      tags:\n        - Text Analysis\n      summary: Language Detection\n      description: \u003e-\n        Identifies what language a text is written in. Only languages that our\n        API supports can be analyzed.\n\n        Returned labels:\n\n        * language_code of the detected language\n      operationId: getLanguageDetection\n      requestBody:\n        description: Request Details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LanguageDetectionRequest'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LanguageDetectionResponse'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationErrors'\ncomponents:\n  schemas:\n    PostRequest:\n      title: Posts\n      maxItems: 32\n      minItems: 1\n      type: array\n      items:\n        $ref: '#/components/schemas/Post'\n    LanguageDetection:\n      required:\n        - text\n      type: object\n      properties:\n        id:\n          type: string\n          description: id of the text.\n        text:\n          type: string\n          description: the text itself.\n    Post:\n      title: Post\n      required:\n        - language\n        - text\n      type: object\n      properties:\n        id:\n          type: string\n          description: id of the post.\n          example: '1'\n        text:\n          type: string\n          description: the text to be analysed.\n          example: I love the service\n        language:\n          type: string\n          description: language_code of the text.\n          example: en\n    LanguagePredicted:\n      title: LanguagePredicted\n      required:\n        - detected_language\n      type: object\n      properties:\n        id:\n          type: string\n          description: id of the post.\n        detected_language:\n          type: string\n          description: the detected language_code corresponding to the input text.\n    PostPredicted:\n      title: PostPredicted\n      required:\n        - predictions\n      type: object\n      properties:\n        id:\n          type: string\n          description: id of the post.\n        predictions:\n          type: array\n          description: the list of predictions.\n          items:\n            $ref: '#/components/schemas/Prediction'\n    Prediction:\n      title: Prediction\n      required:\n        - prediction\n        - probability\n      type: object\n      properties:\n        prediction:\n          title: Prediction\n          type: string\n          description: the predicted label.\n        probability:\n          title: Probability\n          type: number\n          description: the probability of the predicted label.\n    PredictionResults:\n      title: Prediction Results\n      type: array\n      items:\n        $ref: '#/components/schemas/PostPredicted'\n    LanguageDetectionRequest:\n      maxItems: 64\n      minItems: 1\n      type: array\n      items:\n        $ref: '#/components/schemas/LanguageDetection'\n    LanguageDetectionResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/LanguagePredicted'\n    TopicSentimentOutput:\n      type: object\n      properties:\n        id:\n          type: string\n        text:\n          type: string\n        language:\n          type: string\n        topicSentiments:\n          type: array\n          items:\n            $ref: '#/components/schemas/TopicSentiment'\n        sentiments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Sentiment'\n        topics:\n          type: array\n          items:\n            $ref: '#/components/schemas/Topic'\n    TopicSentiment:\n      type: object\n      properties:\n        topic:\n          $ref: '#/components/schemas/Topic'\n        sentiment:\n          $ref: '#/components/schemas/Sentiment'\n        sentence:\n          type: string\n    Sentiment:\n      type: object\n      properties:\n        start:\n          type: integer\n          format: int32\n        end:\n          type: integer\n          format: int32\n        text:\n          type: string\n        positive:\n          type: boolean\n        scale:\n          type: number\n          format: double\n        category:\n          type: string\n        parentCategory:\n          type: string\n        negationTerm:\n          type: string\n    Topic:\n      type: object\n      properties:\n        start:\n          type: integer\n          format: int32\n        end:\n          type: integer\n          format: int32\n        topic:\n          type: string\n        text:\n          type: string\n        category:\n          type: string\n        polarity:\n          type: number\n          format: double\n    TopicSentimentResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/TopicSentimentOutput'\n    ValidationErrors:\n      title: ValidationErrors\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    ValidationError:\n      title: ValidationError\n      required:\n        - loc\n        - msg\n        - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n  securitySchemes:\n    apiKeyHeader:\n      type: apiKey\n      name: x-api-key\n      in: header\n      description: Represents API Key `x-api-key`\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/symantotextanalytics/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/symantotextanalytics/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}