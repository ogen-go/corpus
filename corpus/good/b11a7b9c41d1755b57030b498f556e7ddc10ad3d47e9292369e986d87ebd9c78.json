{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/coronanet/go-coronanet"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "spec/api.yaml",
			"byteSize": 17623,
			"content": "# go-coronanet - Coronavirus social distancing network\n# Copyright (c) 2020 Péter Szilágyi. All rights reserved.\n\nopenapi: 3.0.1\n\ninfo:\n  title: Corona Network\n  description: |\n    Restful API for the Corona Network decentralized social network.\n\n    *The Corona Network API is not a globally accessible service, rather a server running locally on your device. The base URL is not a publicly routed domain, but rather a local one existing only on your device (and even on your device only within a process running [go-coronanet](https://github.com/coronanet/go-coronanet)).*\n  version: 0.0.5\n\nexternalDocs:\n  description: Corona Network on GitHub\n  url: https://github.com/coronanet\n\nservers:\n  - url: https://corona-network/\n\ntags:\n  - name: Gateway\n    description: Manage the Corona Network P2P gateway\n  - name: Profile\n    description: Manage the local Corona Network profile\n  - name: Contacts\n    description: Manage the contact list in the Corona Network\n  - name: Events\n    description: Manage hosted and joined events in the Corona Network\n  - name: CDN\n    description: Immutable objects infinitely cacheable\n\npaths:\n  /gateway:\n    get:\n      summary: Retrieves the current status of the Corona Network gateway\n      tags:\n        - Gateway\n      responses:\n        200:\n          description: Current status of the gateway\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  enabled:\n                    type: boolean\n                    description: Flag whether the gateway is actively attempting to maintain connectivity to the Corona Network. A `true` value does not mean that currently there is a live connection, only that the system will eventually establish one.\n                  connected:\n                    type: boolean\n                    description: Flag whether the gateway has an active connection to the Corona Network.\n                  bandwidth:\n                    type: object\n                    description: Network bandwidth used by the node.\n                    properties:\n                      ingress:\n                        type: number\n                        description: Number of bytes downloaded since the gateway was enabled.\n                      egress:\n                        type: number\n                        description: Number of bytes uploaded since the gateway was enabled.\n    put:\n      summary: Requests the gateway to connect to the Corona Network\n      tags:\n        - Gateway\n      responses:\n        200:\n          description: Network connection will be established async and actively maintained\n    delete:\n      summary: Requests the gateway to disconnect from the Corona Network\n      tags:\n        - Gateway\n      responses:\n        200:\n          description: Network connection torn down\n\n  /profile:\n    post:\n      summary: Create a new local user\n      tags:\n        - Profile\n      responses:\n        409:\n          description: Local user already exists\n        200:\n          description: Successfuly created new user\n    get:\n      summary: Retrieves the local user's profile\n      tags:\n        - Profile\n      responses:\n        404:\n          description: Local user doesn't exist\n        200:\n          $ref: '#/components/responses/Profile'\n    put:\n      summary: Updates the local user's profile\n      tags:\n        - Profile\n      requestBody:\n        description: New profile of the current user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Profile'\n      responses:\n        400:\n          description: Provided profile is invalid\n        403:\n          description: Local user doesn't exist\n        200:\n          description: User profile updated\n    delete:\n      summary: Deletes the local user (nukes all data)\n      tags:\n        - Profile\n      responses:\n        200:\n          description: Successfully deleted user\n\n  /profile/avatar:\n    get:\n      summary: Retrieves the local user's profile picture\n      tags:\n        - Profile\n      responses:\n        403:\n          description: Local user doesn't exist\n        404:\n          description: Local user doesn't have a profile picture\n        302:\n          $ref: '#/components/responses/Avatar'\n    put:\n      summary: Updates the local user's profile picture\n      tags:\n        - Profile\n      requestBody:\n        $ref: '#/components/requestBodies/Avatar'\n      responses:\n        403:\n          description: Local user doesn't exist\n        200:\n          description: User profile picture updated\n    delete:\n      summary: Deletes the local user's profile picture\n      tags:\n        - Profile\n      responses:\n        403:\n          description: Local user doesn't exist\n        200:\n          description: Successfully deleted the local user's profile picture\n\n  /pairing:\n    post:\n      summary: Creates a pairing session for contact establishment\n      tags:\n        - Contacts\n      responses:\n        403:\n          description: Cannot pair while offline or without profile\n        409:\n          description: Pairing session already in progress\n        200:\n          description: Successfully created pairing session\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Temporary pairing secret\n    get:\n      summary: Waits for a pairing session to complete\n      tags:\n        - Contacts\n      responses:\n        403:\n          description: No pairing session in progress\n        409:\n          description: Remote contact already paired\n        200:\n          description: Successfully established session\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Contact ID of the paired user\n    put:\n      summary: Joins a pairing session for contact establishment\n      tags:\n        - Contacts\n      requestBody:\n        description: Optional description in *Markdown*\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              description: Temporary pairing secret\n      responses:\n        400:\n          description: Provided pairing secret is invalid\n        403:\n          description: Cannot pair while offline or without profile\n        409:\n          description: Remote contact already paired\n        200:\n          description: Successfully established session\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Contact ID of the paired user\n\n  /contacts:\n    get:\n      summary: Lists all contacts of the local user\n      tags:\n        - Contacts\n      responses:\n        403:\n          description: Local user doesn't exist\n        200:\n          description: Returns a list of contact IDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /contacts/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of contact\n        schema:\n          type: string\n    delete:\n      summary: Removes an existing contact\n      tags:\n        - Contacts\n      responses:\n        403:\n          description: Remote contact doesn't exist\n        200:\n          description: Successfully deleted user\n\n  /contacts/{id}/profile:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of contact\n        schema:\n          type: string\n    get:\n      summary: Retrieves a remote contact's profile\n      tags:\n        - Contacts\n      responses:\n        404:\n          description: Remote contact doesn't exist\n        200:\n          $ref: '#/components/responses/Profile'\n    put:\n      summary: Overrides the remote contact's profile\n      tags:\n        - Contacts\n      requestBody:\n        description: New profile of the current user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Profile'\n      responses:\n        400:\n          description: Provided profile is invalid\n        403:\n          description: Remote contact doesn't exist\n        200:\n          description: Contact profile updated\n\n  /contacts/{id}/profile/avatar:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of contact\n        schema:\n          type: string\n    get:\n      summary: Retrieves a remote contact's profile picture\n      tags:\n        - Contacts\n      responses:\n        403:\n          description: Remote contact doesn't exist\n        404:\n          description: Remote contact doesn't have a profile picture\n        302:\n          $ref: '#/components/responses/Avatar'\n\n  /events/hosted:\n    get:\n      summary: Lists all the hosted events\n      tags:\n        - Events\n      responses:\n        200:\n          description: Returns a list of event IDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      summary: Hosts a new event\n      tags:\n        - Events\n      requestBody:\n        description: Permanent details of the event\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: Permanent name of the event\n      responses:\n        403:\n          description: Local user doesn't exist\n        200:\n          description: Successfully created event\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Permenent event ID\n\n  /events/hosted/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of the event\n        schema:\n          type: string\n    get:\n      summary: Retrieves a hosted event's statistics\n      tags:\n        - Events\n      responses:\n        404:\n          description: Hosted event doesn't exist\n        200:\n          $ref: '#/components/responses/Event'\n    delete:\n      summary: Terminates the event, will be cleaned up automatically\n      tags:\n        - Events\n      responses:\n        403:\n          description: Hosted event already terminated\n        404:\n          description: Hosted event doesn't exist\n        200:\n          description: Successfully terminated event\n\n  /events/hosted/{id}/banner:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of the event\n        schema:\n          type: string\n    get:\n      summary: Retrieves a hosted event's banner picture\n      tags:\n        - Events\n      responses:\n        403:\n          description: Hosted event doesn't exist\n        404:\n          description: Hosted event doesn't have a banner picture\n        302:\n          $ref: '#/components/responses/Banner'\n    put:\n      summary: Updates the hosted event's banner picture\n      tags:\n        - Events\n      requestBody:\n        $ref: '#/components/requestBodies/Avatar'\n      responses:\n        403:\n          description: Hosted event doesn't exist\n        409:\n          description: Hosted event already terminated\n        200:\n          description: Event banner picture updated\n    delete:\n      summary: Deletes the hosted event's banner picture\n      tags:\n        - Events\n      responses:\n        403:\n          description: Hosted event doesn't exist\n        200:\n          description: Successfully deleted the hosted event's banner picture\n\n  /events/hosted/{id}/checkin:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of the event\n        schema:\n          type: string\n    post:\n      summary: Creates or retrieves the current checkin session\n      tags:\n        - Events\n      responses:\n        403:\n          description: Cannot checkin while offline or event doesn't exist\n        200:\n          description: Successfully created checkin session\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Event discovery and checkin credentials\n    get:\n      summary: Waits for the current checkin session to complete\n      tags:\n        - Events\n      responses:\n        403:\n          description: No checkin session in progress\n        200:\n          description: Successfully checked in participant\n          content: {}\n\n  /events/joined:\n    get:\n      summary: Lists all the joined events\n      tags:\n        - Events\n      responses:\n        200:\n          description: Returns a list of event IDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      summary: Checks into an existing event\n      tags:\n        - Events\n      requestBody:\n        description: Event discovery and checkin credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              description: Credentials in internal format\n      responses:\n        400:\n          description: Provided event credentials are invalid\n        403:\n          description: Cannot checkin while offline or without profile\n        409:\n          description: Remote event already joined\n        200:\n          description: Successfully checked in to event\n          content: {}\n\n\n  /events/joined/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of the event\n        schema:\n          type: string\n    get:\n      summary: Retrieves a joined event's statistics\n      tags:\n        - Events\n      responses:\n        404:\n          description: Joined event doesn't exist\n        200:\n          $ref: '#/components/responses/Event'\n\n  /events/joined/{id}/banner:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Globally unique identifier of the event\n        schema:\n          type: string\n    get:\n      summary: Retrieves a joined event's banner picture\n      tags:\n        - Events\n      responses:\n        403:\n          description: Joined event doesn't exist\n        404:\n          description: Joined event doesn't have a banner picture\n        302:\n          $ref: '#/components/responses/Banner'\n\n  /cdn/images/{sha3}:\n    get:\n      summary: Retrieves an immutable image\n      tags:\n        - CDN\n      parameters:\n        - name: sha3\n          in: path\n          required: true\n          description: SHA3 hash of the image (64 hex digit)\n          schema:\n            type: string\n      responses:\n        400:\n          description: Image hash invalid\n        404:\n          description: Image unknown or unavailable\n        200:\n          description: Image content\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n\ncomponents:\n  schemas:\n    Profile:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Full name of the user\n    Event:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the event\n        start:\n          type: string\n          description: Start time of the event\n        end:\n          type: string\n          description: Conclusion time of the event\n        attendees:\n          type: integer\n          description: Number of participants in the event\n        negatives:\n          type: integer\n          description: Participants who reported negative test results\n        suspected:\n          type: integer\n          description: Participants who might have been infected\n        positives:\n          type: integer\n          description: Participants who reported positive infection\n        updated:\n          type: string\n          description: Time when the event was last modified\n        synced:\n          type: string\n          description: Time when the event was last synced (but not modified)\n\n  requestBodies:\n    Avatar:\n      description: New profile picture for the user\n      required: true\n      content:\n        image/jpeg:\n          schema:\n            type: string\n            format: binary\n    Banner:\n      description: New banner picture for the event\n      required: true\n      content:\n        image/jpeg:\n          schema:\n            type: string\n            format: binary\n\n  responses:\n    Profile:\n      description: Returns requested profile infos\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Profile'\n    Avatar:\n      description: Redirect to immutable image\n      content:\n        image/jpeg:\n          schema:\n            type: string\n            format: binary\n    Event:\n      description: Returns requested event statistics\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Event'\n    Banner:\n      description: Redirect to immutable image\n      content:\n        image/jpeg:\n          schema:\n            type: string\n            format: binary\n",
			"canonicalURL": "/github.com/coronanet/go-coronanet@28e405c430a7c0f1ffafc1880f744d8aa7fa0d09/-/blob/spec/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/coronanet/go-coronanet/blob/28e405c430a7c0f1ffafc1880f744d8aa7fa0d09/spec/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}