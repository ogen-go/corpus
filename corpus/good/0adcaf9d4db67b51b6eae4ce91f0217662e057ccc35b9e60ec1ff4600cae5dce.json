{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eBay/NautilusTelemetry"
		},
		"file": {
			"name": "trace_service.yaml",
			"size": 0,
			"path": "Sources/NautilusTelemetry/Exporters/OTLP-JSON/Trace/trace_service.yaml",
			"byteSize": 19503,
			"content": "openapi: 3.0.1\ninfo:\n  title: opentelemetry/proto/collector/trace/v1/trace_service.proto\n  version: version not set\nservers:\n- url: /\npaths:\n  /v1/trace:\n    post:\n      tags:\n      - TraceService\n      summary: |-\n        For performance reasons, it is recommended to keep this RPC\n        alive for the entire life of the application.\n      operationId: TraceService_Export\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/v1ExportTraceServiceRequest'\n        required: true\n      responses:\n        '200':\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1ExportTraceServiceResponse'\n        '429':\n          description: Too Many Requests\n        default:\n          description: An unexpected error response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/runtimeError'\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    SpanEvent:\n      type: object\n      properties:\n        time_unix_nano:\n          type: string\n          description: time_unix_nano is the time the event occurred.\n          format: uint64\n        name:\n          type: string\n          description: |-\n            name of the event.\n            This field is semantically required to be set to non-empty string.\n        attributes:\n          type: array\n          description: attributes is a collection of attribute key/value pairs on\n            the event.\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          description: |-\n            dropped_attributes_count is the number of dropped attributes. If the value is 0,\n            then no attributes were dropped.\n          format: int64\n      description: |-\n        Event is a time-stamped annotation of the span, consisting of user-supplied\n        text description and key-value pairs.\n    SpanLink:\n      type: object\n      properties:\n        trace_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            A unique identifier of a trace that this linked span is part of. The ID is a\n            16-byte array.\n          format: byte\n        span_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: A unique identifier for the linked span. The ID is an 8-byte\n            array.\n          format: byte\n        trace_state:\n          type: string\n          description: The trace_state associated with the link.\n        attributes:\n          type: array\n          description: attributes is a collection of attribute key/value pairs on\n            the link.\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          description: |-\n            dropped_attributes_count is the number of dropped attributes. If the value is 0,\n            then no attributes were dropped.\n          format: int64\n      description: |-\n        A pointer from the current span to another span in the same trace or in a\n        different trace. For example, this can be used in batching operations,\n        where a single batch handler processes multiple requests from different\n        traces or when the handler receives a request from a different project.\n    SpanSpanKind:\n      type: string\n      description: |-\n        SpanKind is the type of span. Can be used to specify additional relationships between spans\n        in addition to a parent/child relationship.\n\n         - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default.\n        Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.\n         - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,\n        as opposed to an operation happening at the boundaries. Default value.\n         - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other\n        remote network request.\n         - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.\n         - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.\n        Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n        between producer and consumer spans. A PRODUCER span ends when the message was accepted\n        by the broker while the logical processing of the message might span a much longer time.\n         - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.\n        Like the PRODUCER kind, there is often no direct critical path latency relationship\n        between producer and consumer spans.\n      default: SPAN_KIND_UNSPECIFIED\n      enum:\n      - SPAN_KIND_UNSPECIFIED\n      - SPAN_KIND_INTERNAL\n      - SPAN_KIND_SERVER\n      - SPAN_KIND_CLIENT\n      - SPAN_KIND_PRODUCER\n      - SPAN_KIND_CONSUMER\n    StatusDeprecatedStatusCode:\n      type: string\n      default: DEPRECATED_STATUS_CODE_OK\n      enum:\n      - DEPRECATED_STATUS_CODE_OK\n      - DEPRECATED_STATUS_CODE_CANCELLED\n      - DEPRECATED_STATUS_CODE_UNKNOWN_ERROR\n      - DEPRECATED_STATUS_CODE_INVALID_ARGUMENT\n      - DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED\n      - DEPRECATED_STATUS_CODE_NOT_FOUND\n      - DEPRECATED_STATUS_CODE_ALREADY_EXISTS\n      - DEPRECATED_STATUS_CODE_PERMISSION_DENIED\n      - DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED\n      - DEPRECATED_STATUS_CODE_FAILED_PRECONDITION\n      - DEPRECATED_STATUS_CODE_ABORTED\n      - DEPRECATED_STATUS_CODE_OUT_OF_RANGE\n      - DEPRECATED_STATUS_CODE_UNIMPLEMENTED\n      - DEPRECATED_STATUS_CODE_INTERNAL_ERROR\n      - DEPRECATED_STATUS_CODE_UNAVAILABLE\n      - DEPRECATED_STATUS_CODE_DATA_LOSS\n      - DEPRECATED_STATUS_CODE_UNAUTHENTICATED\n    StatusStatusCode:\n      title: |-\n        For the semantics of status codes see\n        https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status\n      type: string\n      description: |-\n        - STATUS_CODE_UNSET: The default status.\n         - STATUS_CODE_OK: The Span has been validated by an Application developers or Operator to have\n        completed successfully.\n         - STATUS_CODE_ERROR: The Span contains an error.\n      default: STATUS_CODE_UNSET\n      enum:\n      - STATUS_CODE_UNSET\n      - STATUS_CODE_OK\n      - STATUS_CODE_ERROR\n    protobufAny:\n      type: object\n      properties:\n        type_url:\n          type: string\n        value:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          format: byte\n    runtimeError:\n      type: object\n      properties:\n        error:\n          type: string\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/protobufAny'\n    v1AnyValue:\n      type: object\n      properties:\n        string_value:\n          type: string\n        bool_value:\n          type: boolean\n        int_value:\n          type: string\n          format: int64\n        double_value:\n          type: number\n          format: double\n        array_value:\n          $ref: '#/components/schemas/v1ArrayValue'\n        kvlist_value:\n          $ref: '#/components/schemas/v1KeyValueList'\n        bytes_value:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          format: byte\n      description: |-\n        AnyValue is used to represent any type of attribute value. AnyValue may contain a\n        primitive value such as a string or integer or it may contain an arbitrary nested\n        object containing arrays, key-value lists and primitives.\n    v1ArrayValue:\n      type: object\n      properties:\n        values:\n          type: array\n          description: Array of values. The array may be empty (contain 0 elements).\n          items:\n            $ref: '#/components/schemas/v1AnyValue'\n      description: |-\n        ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\n        since oneof in AnyValue does not allow repeated fields.\n    v1ExportTraceServiceRequest:\n      type: object\n      properties:\n        resource_spans:\n          type: array\n          description: |-\n            An array of ResourceSpans.\n            For data coming from a single resource this array will typically contain one\n            element. Intermediary nodes (such as OpenTelemetry Collector) that receive\n            data from multiple origins typically batch the data before forwarding further and\n            in that case this array will contain multiple elements.\n          items:\n            $ref: '#/components/schemas/v1ResourceSpans'\n    v1ExportTraceServiceResponse:\n      type: object\n    v1InstrumentationLibrary:\n      type: object\n      properties:\n        name:\n          type: string\n          description: An empty instrumentation library name means the name is unknown.\n        version:\n          type: string\n      description: |-\n        InstrumentationLibrary is a message representing the instrumentation library information\n        such as the fully qualified name and version.\n    v1InstrumentationLibrarySpans:\n      type: object\n      properties:\n        instrumentation_library:\n          $ref: '#/components/schemas/v1InstrumentationLibrary'\n        spans:\n          type: array\n          description: A list of Spans that originate from an instrumentation library.\n          items:\n            $ref: '#/components/schemas/v1Span'\n        schema_url:\n          type: string\n          description: This schema_url applies to all spans and span events in the\n            \"spans\" field.\n      description: A collection of Spans produced by an InstrumentationLibrary.\n    v1KeyValue:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          $ref: '#/components/schemas/v1AnyValue'\n      description: |-\n        KeyValue is a key-value pair that is used to store Span attributes, Link\n        attributes, etc.\n    v1KeyValueList:\n      type: object\n      properties:\n        values:\n          type: array\n          description: |-\n            A collection of key/value pairs of key-value pairs. The list may be empty (may\n            contain 0 elements).\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n      description: |-\n        KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\n        since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\n        a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\n        avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\n        are semantically equivalent.\n    v1Resource:\n      type: object\n      properties:\n        attributes:\n          type: array\n          description: Set of labels that describe the resource.\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          description: |-\n            dropped_attributes_count is the number of dropped attributes. If the value is 0, then\n            no attributes were dropped.\n          format: int64\n      description: Resource information.\n    v1ResourceSpans:\n      type: object\n      properties:\n        resource:\n          $ref: '#/components/schemas/v1Resource'\n        instrumentation_library_spans:\n          type: array\n          description: A list of InstrumentationLibrarySpans that originate from a\n            resource.\n          items:\n            $ref: '#/components/schemas/v1InstrumentationLibrarySpans'\n        schema_url:\n          type: string\n          description: |-\n            This schema_url applies to the data in the \"resource\" field. It does not apply\n            to the data in the \"instrumentation_library_spans\" field which have their own\n            schema_url field.\n      description: A collection of InstrumentationLibrarySpans from a Resource.\n    v1Span:\n      type: object\n      properties:\n        trace_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            A unique identifier for a trace. All spans from the same trace share\n            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\n            is considered invalid.\n\n            This field is semantically required. Receiver should generate new\n            random trace_id if empty or invalid trace_id was received.\n\n            This field is required.\n          format: byte\n        span_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            A unique identifier for a span within a trace, assigned when the span\n            is created. The ID is an 8-byte array. An ID with all zeroes is considered\n            invalid.\n\n            This field is semantically required. Receiver should generate new\n            random span_id if empty or invalid span_id was received.\n\n            This field is required.\n          format: byte\n        trace_state:\n          type: string\n          description: |-\n            trace_state conveys information about request position in multiple distributed tracing graphs.\n            It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\n            See also https://github.com/w3c/distributed-tracing for more details about this field.\n        parent_span_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            The `span_id` of this span's parent span. If this is a root span, then this\n            field must be empty. The ID is an 8-byte array.\n          format: byte\n        name:\n          type: string\n          description: |-\n            A description of the span's operation.\n\n            For example, the name can be a qualified method name or a file name\n            and a line number where the operation is called. A best practice is to use\n            the same display name at the same call point in an application.\n            This makes it easier to correlate spans in different traces.\n\n            This field is semantically required to be set to non-empty string.\n            When null or empty string received - receiver may use string \"name\"\n            as a replacement. There might be smarted algorithms implemented by\n            receiver to fix the empty span name.\n\n            This field is required.\n        kind:\n          $ref: '#/components/schemas/SpanSpanKind'\n        start_time_unix_nano:\n          type: string\n          description: |-\n            start_time_unix_nano is the start time of the span. On the client side, this is the time\n            kept by the local machine where the span execution starts. On the server side, this\n            is the time when the server's application handler starts running.\n            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\n            This field is semantically required and it is expected that end_time \u003e= start_time.\n          format: uint64\n        end_time_unix_nano:\n          type: string\n          description: |-\n            end_time_unix_nano is the end time of the span. On the client side, this is the time\n            kept by the local machine where the span execution ends. On the server side, this\n            is the time when the server application handler stops running.\n            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\n            This field is semantically required and it is expected that end_time \u003e= start_time.\n          format: uint64\n        attributes:\n          title: |-\n            attributes is a collection of key/value pairs. Note, global attributes\n            like server name can be set using the resource API. Examples of attributes:\n          type: array\n          description: |-\n            \"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n                \"/http/server_latency\": 300\n                \"abc.com/myattribute\": true\n                \"abc.com/score\": 10.239\n\n            The OpenTelemetry API specification further restricts the allowed value types:\n            https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          description: |-\n            dropped_attributes_count is the number of attributes that were discarded. Attributes\n            can be discarded because their keys are too long or because there are too many\n            attributes. If this value is 0, then no attributes were dropped.\n          format: int64\n        events:\n          type: array\n          description: events is a collection of Event items.\n          items:\n            $ref: '#/components/schemas/SpanEvent'\n        dropped_events_count:\n          type: integer\n          description: |-\n            dropped_events_count is the number of dropped events. If the value is 0, then no\n            events were dropped.\n          format: int64\n        links:\n          type: array\n          description: |-\n            links is a collection of Links, which are references from this span to a span\n            in the same or different trace.\n          items:\n            $ref: '#/components/schemas/SpanLink'\n        dropped_links_count:\n          type: integer\n          description: |-\n            dropped_links_count is the number of dropped links after the maximum size was\n            enforced. If this value is 0, then no links were dropped.\n          format: int64\n        status:\n          $ref: '#/components/schemas/v1Status'\n      description: |-\n        Span represents a single operation within a trace. Spans can be\n        nested to form a trace tree. Spans may also be linked to other spans\n        from the same or different trace and form graphs. Often, a trace\n        contains a root span that describes the end-to-end latency, and one\n        or more subspans for its sub-operations. A trace can also contain\n        multiple root spans, or none at all. Spans do not need to be\n        contiguous - there may be gaps or overlaps between spans in a trace.\n\n        The next available field id is 17.\n    v1Status:\n      type: object\n      properties:\n        deprecated_code:\n          $ref: '#/components/schemas/StatusDeprecatedStatusCode'\n        message:\n          type: string\n          description: A developer-facing human readable error message.\n        code:\n          $ref: '#/components/schemas/StatusStatusCode'\n      description: |-\n        The Status type defines a logical error model that is suitable for different\n        programming environments, including REST APIs and RPC APIs.\n",
			"canonicalURL": "/github.com/eBay/NautilusTelemetry@57ba0a217286b32de6758b44c5603afd31240116/-/blob/Sources/NautilusTelemetry/Exporters/OTLP-JSON/Trace/trace_service.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eBay/NautilusTelemetry/blob/57ba0a217286b32de6758b44c5603afd31240116/Sources/NautilusTelemetry/Exporters/OTLP-JSON/Trace/trace_service.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}