{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mu-box/core"
		},
		"file": {
			"name": "core-api.yaml",
			"size": 0,
			"path": "docs/core-api.yaml",
			"byteSize": 62793,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - url: https://virtserver.swaggerhub.com/danhunsaker/Microbox/1.0.0\n    description: SwaggerHub API Auto Mocking\n  - url: https://api.microbox.cloud/v1\n    description: The production version of Microbox.\n  - url: https://api.xn-box-wyc.cloud/v1\n    description: The staging version of Microbox.\n  - url: https://api.nanobox.io/v1\n    description: The production version of Nanobox.\ninfo:\n  version: \"1.0.0\"\n  title: Microbox Core API\n  description: The full API spec for Microbox Core, and other Nanobox-v1-compatible dashboard and coordination servers.\n  contact:\n    name: Dan Hunsaker\n    email: danhunsaker@gmail.com\n  license:\n    url: https://choosealicense.com/licenses/mit/\n    name: MIT License\npaths:\n  /:\n    get:\n      operationId: getVersion\n      summary: Returns the current API name and version.\n      description: The Nanobox API no longer exposes this endpoint, but Microbox will for purposes of detecting the difference in future releases when that starts to matter.\n      security: []\n      responses:\n        '200':\n          description: A JSON object with the name and version of the API.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    description: the name of the API provider\n                    type: string\n                    example: Microbox API\n                  version:\n                    description: the API version\n                    type: string\n                    example: 1.0.0\n        '404':\n          description: Returned by Nanobox.\n  /user_auth_token:\n    get:\n      operationId: getToken\n      summary: Look up the auth token of the user\n      security: []\n      parameters:\n        - name: slug\n          in: query\n          required: true\n          description: email address of the user\n          schema:\n            type: string\n            example: johndoe@example.com\n        - name: password\n          in: query\n          required: true\n          description: password of the user\n          schema:\n            type: string\n            example: P@ssw0rd\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authentication_token:\n                    description: the user's authentication token, for accessing this API\n                    type: string\n                    example: MDAwMDAwMDAwMDAwMDA\n                  id:\n                    $ref: '#/components/schemas/Uuid'\n      tags:\n        - user\n  /users/{slug}/auth_token:\n    get:\n      operationId: getTokenFromUsername\n      summary: Look up the auth token of the user\n      security: []\n      deprecated: true\n      description: Duplicate of `GET /user_auth_token`, with the `slug` in the path; abandoned with a switch from usernames to emails for login credentials\n      parameters:\n        - name: slug\n          in: path\n          required: true\n          description: username of the user\n          schema:\n            type: string\n            example: johndoe\n        - name: password\n          in: query\n          required: true\n          description: password of the user\n          schema:\n            type: string\n            example: P@ssw0rd\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authentication_token:\n                    description: the user's authentication token, for accessing this API\n                    type: string\n                    example: MDAwMDAwMDAwMDAwMDA\n                  id:\n                    $ref: '#/components/schemas/Uuid'\n      tags:\n        - user\n  /users/{anything}:\n    get:\n      operationId: getUser\n      summary: Get the current user\n      parameters:\n        - name: anything\n          in: path\n          required: true\n          description: ignored; use \"me\"\n          schema:\n            type: string\n            enum: [me]\n      responses:\n        '200':\n          description: User object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      tags:\n        - user\n  /adapters/{token}:\n    post:\n      operationId: registerHostingProvider\n      summary: Register a hosting provider adapter\n      parameters:\n        - name: token\n          in: path\n          required: true\n          description: the adapter registration token generated by the dashboard for this adapter\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                endpoint:\n                  description: the base URL to use for requests to the adapter\n                  type: string\n                  example: https://great-adapter.io/\n      responses:\n        '202':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  unlink_code:\n                    description: a code used to confirm a request to unregister this adapter is legitimate\n                    type: string\n          links:\n            unregister:\n              operationId: unregisterHostingProvider\n              parameters:\n                token: $request.path.token\n                unlink_code: $response.body#/unlink_code\n      callbacks:\n        Meta:\n          '{$request.body#/endpoint}/meta':\n            get:\n              summary: meta\n              tags: [meta]\n              description: The `/meta` route is used to provide Microbox with various pieces of metadata that will be used for displaying information in the dashboard and for requesting authentication information from the users.\n              security: []\n              responses:\n                200:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: object\n                        required:\n                          - id\n                          - name\n                          - server_nick_name\n                          - default_region\n                          - default_size\n                          - can_reboot\n                          - can_rename\n                          - internal_iface\n                          - external_iface\n                          - ssh_user\n                          - ssh_auth_method\n                          - ssh_key_method\n                          - bootstrap_script\n                          - credential_fields\n                        properties:\n                          id:\n                            type: string\n                            description: some unique identifier\n                          name:\n                            type: string\n                            description: display name used in the dashboard\n                          server_nick_name:\n                            type: string\n                            description: what this provider calls their servers\n                          default_region:\n                            type: string\n                            description: the default region to launch servers when not specified\n                          default_size:\n                            type: string\n                            description: default server size to use when creating an app\n                          default_plan:\n                            type: string\n                            description: the id of the default plan in which the default size is ordered\n                          can_reboot:\n                            type: boolean\n                            description: boolean to determine if we can reboot the server through the api\n                          can_rename:\n                            type: boolean\n                            description: boolean to determine if we can rename the server through the api\n                          internal_iface:\n                            type: string\n                            description: Internal interface. e.g. eth1\n                          external_iface:\n                            type: string\n                            description: External interface. e.g. eth0\n                          ssh_user:\n                            type: string\n                            description: The ssh user Microbox can use for ssh access to bootstrap the server. e.g. root\n                          ssh_auth_method:\n                            enum:\n                            - key\n                            - password\n                            type: string\n                            description: will either be 'key' or 'password'. When set to 'key', Microbox will behave in accordance with the \u003ccode\u003essh_key_method\u003c/code\u003e value. When set to 'password', Microbox will use the install server key endpoint to install the SSH key manually via the adapter instead of passing it in the create server step.\n                          ssh_key_method:\n                            enum:\n                            - reference\n                            - object\n                            type: string\n                            description: will either be 'reference' or 'object'. When set to 'reference', Microbox will first create the SSH key in the user's provider account, then pass a reference to it when servers are created. When set to 'object', Microbox will pass the actual public SSH key that should be installed on the server.\n                          bootstrap_script:\n                            type: string\n                            description: The script that should be used to bootstrap the server. e.g. https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh\n                          credential_fields:\n                            type: array\n                            items:\n                              required:\n                              - key\n                              - label\n                              type: object\n                              properties:\n                                key:\n                                  type: string\n                                  description: suffix for Auth- headers used to identify each auth field\n                                label:\n                                  type: string\n                                  description: text to display to the user for each auth field\n                            description: array of hashes that includes field keys and labels necessary to authenticate with the provider\n                          instructions:\n                            type: string\n                            description: string that contains instructions for how to setup authentication with the provider\n                      example:\n                        id: do\n                        name: Digital Ocean\n                        server_nick_name: Droplet\n                        default_region: sfo1\n                        default_size: 512mb\n                        default_plan: standard\n                        can_reboot: true\n                        can_rename: true\n                        internal_iface: eth1\n                        external_iface: eth0\n                        ssh_user: root\n                        ssh_auth_method: key\n                        ssh_key_method: reference\n                        bootstrap_script: https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh\n                        credential_fields:\n                          - key: access-token\n                            label: Access Token\n                        instructions: \u003ca href='//cloud.digitalocean.com/settings/api/tokens' target='_blank'\u003eCreate a Personal Access Token\u003c/a\u003e in your Digital Ocean Account that has read/write access, then add the token here or view the \u003ca href='//www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token' target='_blank'\u003efull guide\u003c/a\u003e\n          '{$request.body#/endpoint}/catalog':\n            get:\n              summary: catalog\n              tags: [meta]\n              description: The `/catalog` route is used to provide Microbox with a catalog of server sizes and options, within the available geographic regions.\n              security: []\n              responses:\n                200:\n                  description: The response data should be a list (array) of regions. Each region should contain a list of plans. It is not necessary to have multiple regions, however the structure will be the same regardless. Additionally, your integration may only have one classification of server types, or you may have high-cpu, high-ram, or high-IO options. A plan is a grouping of server sizes within a classification.\n                  content:\n                    application/json:\n                      schema:\n                        type: array\n                        items:\n                          required:\n                          - id\n                          - name\n                          - plans\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                              description: unique region identifier to be used when ordering a server\n                            name:\n                              type: string\n                              description: the visual identifier for the customer\n                            plans:\n                              type: array\n                              items:\n                                required:\n                                - id\n                                - name\n                                - specs\n                                type: object\n                                properties:\n                                  id:\n                                    type: string\n                                    description: unique plan identifier\n                                  name:\n                                    type: string\n                                    description: 'the classification of the server options within this plan. The name should indicate to the user what kinds of workloads these server options are ideal for. For instance: \"Standard\" or \"High CPU\"'\n                                  specs:\n                                    type: array\n                                    items:\n                                      required:\n                                      - id\n                                      - ram\n                                      - cpu\n                                      - disk\n                                      - transfer\n                                      - dollars_per_hr\n                                      - dollars_per_mo\n                                      type: object\n                                      properties:\n                                        id:\n                                          type: string\n                                          description: a unique identifier that will be used when ordering a server\n                                        ram:\n                                          type: integer\n                                          description: a visual indication to the user informing the amount of RAM is provided\n                                          format: int32\n                                        cpu:\n                                          type: integer\n                                          description: a visual indication to the user informing the amount of CPUs or CPU cores\n                                          format: int32\n                                        disk:\n                                          type: integer\n                                          description: a visual indication to the user informing the amount or size of disk\n                                          format: int32\n                                        transfer:\n                                          type: integer\n                                          description: a visual indication to the user informing the amount of data transfer allowed per month for this server\n                                          format: int32\n                                        dollars_per_hr:\n                                          type: number\n                                          description: a visual indication to the user informing the cost of running this server per hour\n                                        dollars_per_mo:\n                                          type: number\n                                          description: a visual indication to the user informing the cost of running this server per month\n                                    description: the list of server options within this plan. Each spec should have the following fields\n                              description: A grouping of server sizes within a classification. Each plan consists of the following\n                        description: The response data should be a list (array) of regions. Each region should contain a list of plans. It is not necessary to have multiple regions, however the structure will be the same regardless. Additionally, your integration may only have one classification of server types, or you may have high-cpu, high-ram, or high-IO options. A plan is a grouping of server sizes within a classification.\n                      example:\n                      - id: sfo1\n                        name: San Francisco 1\n                        plans:\n                        - id: standard\n                          name: Standard Configuration\n                          specs:\n                          - id: 512mb\n                            ram: 512\n                            cpu: 1\n                            disk: 20\n                            transfer: 1\n                            dollars_per_hr: 0.0074400000000000004\n                            dollars_per_mo: 5\n                          - id: 1gb\n                            ram: 1024\n                            cpu: 1\n                            disk: 30\n                            transfer: 2\n                            dollars_per_hr: 0.014880000000000001\n                            dollars_per_mo: 10\n          '{$request.body#/endpoint}/verify':\n            post:\n              summary: verify\n              tags: [meta]\n              description: The `/verify` route is used to verify a user's account credentials. The `credential_fields` specified in the metadata will be provided in the dashboard and required to be filled before the user can use this provider. After the credentials are provided, Microbox will call this route with the credentials as headers to verify that the account credentials provided by the user are valid.\n              security:\n                - CallbackToken: []\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n        SshKey:\n          '{$request.body#/endpoint}/keys':\n            post:\n              summary: create-ssh-key\n              tags: [keys]\n              description: \u003e\n                \"\u003cp\u003eThe `/keys` route is used to authorize Microbox with the user's account that will be ordering servers. After ordering a server, Microbox needs to SSH into the server to provision it. Microbox will pre-generate an SSH key for the user's account and the authorization route allows Microbox to register this key with the user's account on this provider so that Microbox can access the server after it is ordered.\u003c/p\u003e\n                \u003cp\u003eNOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.\u003c/p\u003e\"\n              security:\n                - CallbackToken: []\n              requestBody:\n                description: Key ID and contents to save\n                content:\n                  application/json:\n                    schema:\n                      required:\n                      - id\n                      - key\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: the user-friendly name of the key\n                        key:\n                          type: string\n                          description: The public key to register with the user's account. It is assumed that this public key will be installed on every server launched by this integration.\n                required: true\n              responses:\n                201:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - id\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                            description: fingerprint or key identifier to use when ordering servers\n                      example:\n                        id: provider-key-ID\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n          '{$request.body#/endpoint}/keys/{id}':\n            get:\n              summary: query-ssh-key\n              tags: [keys]\n              description: '\u003cp\u003eThe `GET /keys/{id}` route is used by Microbox to query the existence of previously created key.\u003c/p\u003e \u003cp\u003eNOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.\u003c/p\u003e'\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the key id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              responses:\n                201:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - id\n                        - name\n                        - public_key\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                            description: fingerprint or key identifier to use when ordering servers\n                          name:\n                            type: string\n                            description: the user-friendly name of the key\n                          public_key:\n                            type: string\n                            description: contents of public key\n                      example:\n                        id: provider-key-ID\n                        name: Microbox-provider-account-ID\n                        public_key: CONTENTS OF PUBLIC KEY\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n            delete:\n              summary: delete-ssh-key\n              tags: [keys]\n              description: '\u003cp\u003eThe `DELETE /keys/{id}` route is used to cancel a key that was previously created via Microbox.\u003c/p\u003e \u003cp\u003eNOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.\u003c/p\u003e'\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the key id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n          '{$request.body#/endpoint}/servers/{id}/keys':\n            patch:\n              summary: install-ssh-key\n              tags: [keys]\n              description: \"\u003cp\u003eThe `/servers/{id}/keys` route is used to authorize Microbox with a server that was previously ordered via Microbox. Microbox will pre-generate an SSH key for the user's account, and this route allows Microbox to register that key with the server so that Microbox can access it after it is ordered.\u003c/p\u003e \u003cp\u003eNOTE: This route is *only* required if your provider uses passwords for SSH instead of SSH keys.\u003c/p\u003e\"\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the server id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              requestBody:\n                description: Key ID and contents to save\n                content:\n                  application/json:\n                    schema:\n                      required:\n                      - id\n                      - key\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: the user-friendly name of the key\n                        key:\n                          type: string\n                          description: The public key to register on the server.\n                required: true\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n        Server:\n          '{$request.body#/endpoint}/servers':\n            post:\n              summary: order-server\n              tags: [servers]\n              description: The `/servers` route is how Microbox submits a request to order a new server. This route SHOULD NOT hold open the request until the server is ready. The request should return immediately once the order has been submitted with an identifier that Microbox can use to followup on the order status.\n              security:\n                - CallbackToken: []\n              requestBody:\n                description: Server creation data\n                content:\n                  application/json:\n                    schema:\n                      required:\n                      - name\n                      - region\n                      - size\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: Microbox-generated name used to identify the machine visually as ordered by Microbox\n                        region:\n                          type: string\n                          description: the region wherein to launch the server, which will match the region `id` from the catalog\n                        size:\n                          type: string\n                          description: the size of server to provision, which will match an `id` provided in the aforementioned catalog\n                        ssh_key:\n                          type: string\n                          description: id of the SSH key created during the `/keys` request\n                required: true\n              responses:\n                201:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - id\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                            description: unique id of the server\n                        example:\n                          id: provider-server-ID\n                      example:\n                        id: provider-server-ID\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n          '{$request.body#/endpoint}/servers/{id}':\n            get:\n              summary: query-server\n              tags: [servers]\n              description: The `GET /servers/{id}` route is used by Microbox to query state about a previously ordered server. This state is used to inform Microbox when the server is ready to be provisioned and also how to connect to the server.\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the server id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              responses:\n                201:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - id\n                        - status\n                        - name\n                        - external_ip\n                        - internal_ip\n                        type: object\n                        properties:\n                          id:\n                            type: string\n                            description: the server id\n                          status:\n                            type: string\n                            description: the status or availability of the server. (active indicates server is ready)\n                          name:\n                            type: string\n                            description: name of the server\n                          external_ip:\n                            type: string\n                            description: external or public IP of the server\n                          internal_ip:\n                            type: string\n                            description: internal or private IP of the server\n                      example:\n                        id: provider-server-ID\n                        status: active\n                        name: microbox.cloud-cool-app-do.1.1\n                        external_ip: 192.0.2.15\n                        internal_ip: 192.168.0.15\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n            delete:\n              summary: cancel-server\n              tags: [servers]\n              description: The `DELETE /servers/{id}` route is used to cancel a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely canceled. It should return immediately once the order to cancel has been submitted.\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the server id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n          '{$request.body#/endpoint}/servers/{id}/reboot':\n            patch:\n              summary: reboot-server\n              tags: [servers]\n              description: The `/servers/{id}/reboot` route is used to reboot a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely rebooted. It should return immediately once the order to reboot has been submitted\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the server id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n          '{$request.body#/endpoint}/servers/{id}/rename':\n            patch:\n              summary: rename-server\n              tags: [servers]\n              description: The `/servers/{id}/rename` route is used to rename a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely renamed. It should return immediately once the order to rename has been submitted.\n              security:\n                - CallbackToken: []\n              parameters:\n              - name: id\n                in: path\n                description: the server id\n                required: true\n                style: simple\n                explode: false\n                schema:\n                  type: string\n              requestBody:\n                description: New server name\n                content:\n                  application/json:\n                    schema:\n                      required:\n                      - name\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: the new name of the server\n                required: true\n              responses:\n                200:\n                  description: successful operation\n                default:\n                  description: Error\n                  content:\n                    application/json:\n                      schema:\n                        required:\n                        - errors\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: string\n                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'\n    delete:\n      operationId: unregisterHostingProvider\n      summary: Unregister a hosting provider adapter\n      parameters:\n        - name: token\n          in: path\n          required: true\n          description: the adapter registration token used to register this adapter\n          schema:\n            type: string\n        - name: unlink_code\n          in: query\n          required: true\n          description: the unlink_code returned when this adapter was registered\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n  /events:\n    post:\n      operationId: createEvent\n      summary: Create an event\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                event:\n                  description: the details to create the event with\n                  type: object\n                  properties:\n                    eventable_id:\n                      description: the app name\n                      type: string\n                      example: example-app\n                    message:\n                      description: the message\n                      type: string\n                      example: example\n                    action:\n                      description: the action\n                      type: string\n                      example: example\n                    meta:\n                      description: any additional data\n                      type: object\n                      example: {}\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                description: the details of the created event\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n                  eventable:\n                    $ref: '#/components/schemas/App'\n                  message:\n                    description: the message\n                    type: string\n                    example: example\n                  action:\n                    description: the action\n                    type: string\n                    example: example\n                  meta:\n                    description: any meta data passed in\n                    type: object\n                    example: {}\n        '422':\n          description: unprocessable_entity\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: There was an error!\n      tags:\n        - event\n  /apps:\n    get:\n      operationId: listApps\n      summary: List all accessible apps.\n      tags:\n        - app\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/App'\n  /apps/{app}:\n    get:\n      operationId: getApp\n      summary: Get information about a specific app.\n      tags:\n        - app\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/App'\n  /apps/{app}/internal_monitor:\n    get:\n      operationId: monitorApp\n      summary: app data for external monitoring service\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    $ref: '#/components/schemas/Uuid'\n                  name:\n                    type: string\n                    example: my-cool-app\n                  state:\n                    type: string\n                    example: active\n                  dashboard_url:\n                    type: string\n                    example: 'http://dashboard.nanobox.io/apps/f76a11e5-ab8c-4f3f-8602-4b267353c17d'\n                  platform:\n                    type: object\n                    properties:\n                      id:\n                        $ref: '#/components/schemas/Uuid'\n                      region:\n                        type: string\n                        example: sfo2\n                      vip:\n                        type: string\n                        example: 1.2.3.4\n                      state:\n                        type: string\n                        example: active\n                      hosts:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            id:\n                              $ref: '#/components/schemas/Uuid'\n                            state:\n                              type: string\n                              example: active\n                            status:\n                              type: string\n                              example: online\n                            name:\n                              type: string\n                              example: do.1.1\n                            external_ip:\n                              type: string\n                              example: 1.2.3.4\n                            internal_ip:\n                              type: string\n                              example: 5.6.7.8\n                            vip:\n                              type: string\n                              example: 192.168.0.3\n                            token:\n                              type: string\n                              example: o4HWwj9mfONL86teG1PdZMJDT3FKqcnCp7vlbIr52EsBaUuRxh\n                            server_name:\n                              type: string\n                              example: nanobox-do.1.1\n                            size_id:\n                              type: string\n                              example: 512mb\n                      services:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            id:\n                              $ref: '#/components/schemas/Uuid'\n                            uid:\n                              type: string\n                              example: monitor1\n                            name:\n                              type: string\n                              example: monitor\n                            token:\n                              type: string\n                              example: o4HWwj9mfONL86teG1PdZMJDT3FKqcnCp7vlbIr52EsBaUuRxh\n                            url:\n                              type: string\n                              example: 1.2.3.4\n                            port:\n                              type: string\n                              example: 1234\n                            ip:\n                              type: string\n                              example: 1.2.3.4\n                      sequences_errored:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            id:\n                              $ref: '#/components/schemas/Uuid'\n                            state:\n                              type: string\n                              example: processing\n                            status:\n                              type: string\n                              example: errored\n                            handle:\n                              type: string\n                              example: app.activate\n                            title:\n                              type: string\n                              example: App Activate\n                            current_task:\n                              type: string\n                              example: activate_platform\n                            locked:\n                              type: boolean\n                              example: false\n  /apps/{app}/components:\n    get:\n      operationId: listComponents\n      summary: List components in a given app.\n      tags:\n        - component\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Component'\n  /apps/{app}/components/{component}:\n    get:\n      operationId: getComponent\n      tags:\n        - component\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: component\n          in: path\n          required: true\n          description: the component's UUID\n          schema:\n            $ref: '#/components/schemas/Uuid'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Component'\n      summary: Get information about a specific component in a given app.\n  /apps/{app}/deploys:\n    get:\n      operationId: listDeploys\n      tags:\n        - deploy\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Deploy'\n      summary: List deploys in a given app.\n    post:\n      operationId: createDeploy\n      tags:\n        - deploy\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                boxfile_content:\n                  type: string\n                  example: \"--- \\ndata.db: \\n  image: nanobox/postgres:9.6 \\nrun.config: \\n  engine: static\"\n                build_id:\n                  type: string\n                  example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD\n                commit_message:\n                  type: string\n                  example: \"\"\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deploy'\n      summary: Create a new deploy.\n  /apps/{app}/deploys/{deploy}:\n    get:\n      operationId: getDeploy\n      tags:\n        - deploy\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: deploy\n          in: path\n          required: true\n          description: the deploy's UUID\n          schema:\n            $ref: '#/components/schemas/Uuid'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deploy'\n      summary: Get information about a specific deploy in a given app.\n  /apps/{app}/evars:\n    get:\n      operationId: listEvars\n      tags:\n        - evar\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Evar'\n      summary: List environment variables in a given app.\n    post:\n      operationId: createEvar\n      tags:\n        - evar\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: EXAMPLE_EVAR\n                value:\n                  type: string\n                  example: example value\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Evar'\n      summary: Add or set an environment variable.\n  /apps/{app}/evars/{evar}:\n    get:\n      operationId: getEvar\n      tags:\n        - evar\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: evar\n          in: path\n          required: true\n          description: the evar's UUID\n          schema:\n            $ref: '#/components/schemas/Uuid'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Evar'\n      summary: Get information about a specific environment variable in a given app.\n    delete:\n      operationId: deleteEvar\n      tags:\n        - evar\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: evar\n          in: path\n          required: true\n          description: the evar's UUID\n          schema:\n            $ref: '#/components/schemas/Uuid'\n      responses:\n        '200':\n          description: success\n      summary: Delete an environment variable.\n  /apps/{app}/services:\n    get:\n      operationId: listServices\n      tags:\n        - service\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n      summary: List services in a given app.\n  /apps/{app}/services/{service}:\n    get:\n      operationId: getService\n      tags:\n        - service\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: service\n          in: path\n          required: true\n          description: the service's UUID or slug\n          schema:\n            type: string\n            example: 00000000-0000-0000-0000-000000000000\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n      summary: Get information about a specific service in a given app.\n  /apps/{app}/services/{service}/components:\n    get:\n      operationId: listServiceComponents\n      tags:\n        - component\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: service\n          in: path\n          required: true\n          description: the service's UUID or slug\n          schema:\n            type: string\n            example: 00000000-0000-0000-0000-000000000000\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Component'\n      summary: List components in a given service of a given app.\n  /apps/{app}/services/{service}/components/{component}:\n    get:\n      operationId: getServiceComponent\n      tags:\n        - component\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: service\n          in: path\n          required: true\n          description: the service's UUID or slug\n          schema:\n            type: string\n            example: 00000000-0000-0000-0000-000000000000\n        - name: component\n          in: path\n          required: true\n          description: the component's UUID\n          schema:\n            $ref: '#/components/schemas/Uuid'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Component'\n      summary: Get information about a specific component in a given service of a given app.\n  /apps/{app}/tunnels/{id}:\n    get:\n      operationId: openTunnel\n      tags:\n        - remote\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: id\n          in: path\n          required: true\n          description: the name of the server or component to tunnel into\n          schema:\n            type: string\n            example: \"data.db\"\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    example: MDAwMDAwMD\n                  url:\n                    type: string\n                    example: \"0.0.0.0:8570\"\n                  protocol:\n                    type: string\n                    example: docker\n                  port:\n                    type: integer\n                    example: 5432\n      summary: Create a tunnel, and get the connection parameters.\n  /apps/{app}/consoles/{id}:\n    get:\n      operationId: openConsole\n      tags:\n        - remote\n      parameters:\n        - $ref: '#/components/parameters/app'\n        - $ref: '#/components/parameters/team'\n        - name: id\n          in: path\n          required: true\n          description: the name of the server or component to console into\n          schema:\n            type: string\n            example: \"do.1\"\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    example: MDAwMDAwMD\n                  url:\n                    type: string\n                    example: \"0.0.0.0:1289\"\n                  protocol:\n                    type: string\n                    example: ssh\n      summary: Create a console session, and get the connection parameters.\ncomponents:\n  securitySchemes:\n    AuthToken:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\n  parameters:\n    app:\n      name: app\n      in: path\n      required: true\n      description: the application's UUID or name\n      schema:\n        type: string\n        example: 00000000-0000-0000-0000-000000000000\n    team:\n      name: ci\n      in: query\n      required: false\n      description: the application's team name, if `{app}` is a name\n      schema:\n        type: string\n  schemas:\n    App:\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        name:\n          type: string\n          example: example-app\n        timezone:\n          type: string\n          example: UTC\n        state:\n          type: string\n          example: active\n        auto_reconfigure:\n          type: boolean\n          example: false\n    Component:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        name:\n          type: string\n          example: data.db\n        uid:\n          type: string\n          example: data.db\n        deploy_strategy:\n          type: string\n          example: inline\n        repair_strategy:\n          type: string\n          example: inline\n        behaviors:\n          type: array\n          items:\n            type: string\n          example: [migratable, backupable]\n        port:\n          type: integer\n          example: 5432\n        state:\n          type: string\n          example: active\n        pulse:\n          type: string\n          example: online\n        category:\n          type: string\n          example: data\n        network:\n          type: string\n          example: virt\n        generation_counter:\n          type: integer\n          example: 2\n        horizontal:\n          type: boolean\n          example: false\n        redundant:\n          type: boolean\n          example: false\n    Deploy:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        commit_message:\n          type: string\n          example: \"\"\n        boxfile_content:\n          type: string\n          example: \"--- \\ndata.db: \\n  image: nanobox/postgres:9.6 \\nrun.config: \\n  engine: static\"\n        build_id:\n          type: string\n          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD\n        author_id:\n          $ref: '#/components/schemas/Uuid'\n        app_id:\n          $ref: '#/components/schemas/Uuid'\n    Evar:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        title:\n          type: string\n          example: EXAMPLE_EVAR\n        value:\n          type: string\n          example: example value\n        internal:\n          type: boolean\n          example: false\n        component_id:\n          type: string\n          example: null\n    Service:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        uid:\n          type: string\n          example: logger1\n        name:\n          type: string\n          example: logger\n        slug:\n          type: string\n          example: logger\n        url:\n          type: string\n          example: 0.0.0.0\n        token:\n          type: string\n          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD\n        mode:\n          type: string\n          example: simple\n        ip:\n          type: string\n          example: 0.0.0.0\n    User:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Uuid'\n        username:\n          type: string\n          example: johndoe\n        email:\n          type: string\n          example: johndoe@example.com\n        authentication_token:\n          type: string\n          example: MDAwMDAwMDAwMDAwMDA\n        unconfirmed_email:\n          type: string\n          example: null\n    Uuid:\n      type: string\n      format: uuid\n      example: 00000000-0000-0000-0000-000000000000\nsecurity:\n  - AuthToken: []\ntags:\n  - name: app\n    description: Endpoints that interact directly with the application.\n  - name: component\n    description: Endpoints that interact with application components.\n  - name: deploy\n    description: Endpoints for deploying code.\n  - name: evar\n    description: Endpoints for managing environment variables.\n  - name: event\n    description: Endpoints for interacting with events.\n  - name: remote\n    description: Endpoints for accessing servers and components.\n  - name: service\n    description: Endpoints for interacting with individual services within components.\n  - name: user\n    description: Endpoints that interact with user data.\n",
			"canonicalURL": "/github.com/mu-box/core@a66c79bb43fe850bcd6c1ede58051555e1736204/-/blob/docs/core-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mu-box/core/blob/a66c79bb43fe850bcd6c1ede58051555e1736204/docs/core-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}