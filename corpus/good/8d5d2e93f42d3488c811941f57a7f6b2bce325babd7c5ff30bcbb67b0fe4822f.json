{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "spinitron.com-1.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/spinitron.com-1.0.0-swagger.yaml",
			"byteSize": 22041,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: Spinitron\n  description: Maximum limit is 200. Default limit is 20.\n  title: Spinitron v2\n  version: 1.0.0\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://twitter.com/Spinitron/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/spinitron/v2api/master/spinitron.yaml\n      version: \"2.0\"\n  x-providerName: spinitron.com\ntags:\n  - name: Persona\n  - name: Show\n  - name: Playlist\n  - name: Spin\npaths:\n  /personas:\n    get:\n      parameters:\n        - description: Filter by Persona name\n          in: query\n          name: name\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The personas\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Persona\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Persona\"\n                        type: array\n                    type: object\n      security:\n        - Bearer: []\n      summary: Get Personas\n      tags:\n        - Persona\n  \"/personas/{id}\":\n    get:\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The Persona\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Persona\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Persona\"\n        \"404\":\n          description: Persona not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Get Persona by id\n      tags:\n        - Persona\n  /playlists:\n    get:\n      description: \u003e\n        Get Playlists optionally filtered by a datetime range.\n\n        Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).\n\n\n        Ordered chronologically from newest to oldest.\n      parameters:\n        - description: \u003e\n            The datetime starting from items must be returned. Maximum 1 hour in\n            future.\n          in: query\n          name: start\n          schema:\n            type: string\n            format: date-time\n        - description: |\n            The ending datetime. Maximum 1 hour in future.\n          in: query\n          name: end\n          schema:\n            type: string\n            format: date-time\n        - description: Filter by show\n          in: query\n          name: show_id\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The playlists\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Playlist\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Playlist\"\n                        type: array\n                    type: object\n      security:\n        - Bearer: []\n      summary: Returns playlists optionally filtered by {start} and/or {end} datetimes\n      tags:\n        - Playlist\n  \"/playlists/{id}\":\n    get:\n      description: \u003e\n        The response object represents the playlist specified by {id}.\n\n\n        Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future).\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The playlist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Playlist\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Playlist\"\n        \"404\":\n          description: Playlist not found or is in the future\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Get a Playlist by id\n      tags:\n        - Playlist\n  /shows:\n    get:\n      description: \u003e\n        **Terminology**: Spinitron defines a *show* as a radio program. A show\n        can have one or more *schedules*,\n\n        each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences.\n\n        Thus scheduled shows have occurences that, for example, may be displayed in a calendar.\n\n\n        In the response, `items` is an array of objects representing occurences of scheduled shows.\n\n\n        You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end}\n\n        parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is\n\n        included in the reponse.\n\n\n        `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before\n\n        {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end}\n\n        is included.\n\n\n        If the request omits the {start} parameter, the server sets its value to the current time so that the filter\n\n        range's start is always defined. If the request specifies {end} then the requested range is *bounded*,\n\n        otherwise it is *unbounded*.\n\n\n        For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only\n\n        difference between objects in `items` representing a given show will be the `start` field value.\n\n\n        For an unbounded request, `items` includes *only one* occurence per show, specifically, the\n\n        next occurrence after {start} of all shows occuring after {start}.\n\n\n        Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda\n\n        of shows expanded into occurrences by thir shedules and repetitions.\n\n\n        Objects in `items` are ordered first by `datetime` and then by `id`.\n      parameters:\n        - description: \u003e\n            The datetime starting from items must be returned. Maximum 1 hour in\n            past.\n          in: query\n          name: start\n          schema:\n            type: string\n            format: date-time\n        - description: |\n            The ending datetime. Maximum 1 hour in past.\n          in: query\n          name: end\n          schema:\n            type: string\n            format: date-time\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The shows\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Show\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Show\"\n                        type: array\n                    type: object\n        \"422\":\n          description: \u003e\n            Invalid datetimes in filter: either too old or {end} is less than\n            {start}.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Returns scheduled shows optionally filtered by {start} and/or {end}\n        datetimes\n      tags:\n        - Show\n  \"/shows/{id}\":\n    get:\n      description: \u003e\n        The response object represents the next occurence of the show specified\n        by {id}.\n\n\n        Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The Show\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Show\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Show\"\n        \"404\":\n          description: Show not found or too old\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Get a Show by id\n      tags:\n        - Show\n  /spins:\n    get:\n      description: \u003e\n        Get Spins optionally filtered by a datetime range. Only past Spins will\n        be returned.\n      parameters:\n        - description: |\n            The datetime starting from items must be returned.\n          in: query\n          name: start\n          schema:\n            type: string\n            format: date-time\n        - description: |\n            The ending datetime.\n          in: query\n          name: end\n          schema:\n            type: string\n            format: date-time\n        - description: Filter by playlist\n          in: query\n          name: playlist_id\n          schema:\n            type: integer\n        - description: Filter by show\n          in: query\n          name: show_id\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The spins\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Spin\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Spin\"\n                        type: array\n                    type: object\n      security:\n        - Bearer: []\n      summary: Returns spins optionally filtered by {start} and/or {end} datetimes\n      tags:\n        - Spin\n    post:\n      description: An endpoint for automation systems to log spins into the spin table.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                live:\n                  description: \u003e\n                    Only when automation params are configured with the \"Pass\n                    through\" mode.\n\n                    Enables \"live assist\" mode. Default mode is \"full automation\".\n                  type: boolean\n                start:\n                  type: string\n                  format: date-time\n                duration:\n                  type: integer\n                artist:\n                  type: string\n                release:\n                  type: string\n                label:\n                  type: string\n                genre:\n                  type: string\n                song:\n                  type: string\n                composer:\n                  type: string\n                isrc:\n                  type: string\n              required:\n                - artist\n                - song\n      responses:\n        \"201\":\n          description: The new created Spin.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n        \"422\":\n          description: Validation failed.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ValidationError\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ValidationError\"\n                type: array\n        default:\n          description: Failed to create the object for unknown reason.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Log a Spin\n      tags:\n        - Spin\n  \"/spins/{id}\":\n    get:\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          description: The spin\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n        \"404\":\n          description: Spin not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - Bearer: []\n      summary: Get a Spin by id\n      tags:\n        - Spin\nservers:\n  - url: https://spinitron.com/v2/api\n  - url: http://spinitron.com/v2/api\ncomponents:\n  parameters:\n    expand:\n      description: Allows to select extra fields\n      in: query\n      name: expand\n      schema:\n        type: array\n        items:\n          type: string\n    fields:\n      description: Allows to select only needed fields\n      in: query\n      name: fields\n      schema:\n        type: array\n        items:\n          type: string\n    limit:\n      description: Amount of items to return\n      in: query\n      name: count\n      schema:\n        type: integer\n        minimum: 1\n        default: 20\n    page:\n      description: Offset, used together with count\n      in: query\n      name: page\n      schema:\n        type: integer\n        minimum: 1\n  securitySchemes:\n    Bearer:\n      in: header\n      name: Authorization\n      type: apiKey\n  schemas:\n    BaseIndexResponse:\n      properties:\n        _links:\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        _meta:\n          $ref: \"#/components/schemas/Pagination\"\n      type: object\n    Error:\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n        type:\n          type: string\n      type: object\n    Link:\n      properties:\n        href:\n          type: string\n      type: object\n    Pagination:\n      properties:\n        currentPage:\n          type: integer\n        pageCount:\n          type: integer\n        perPage:\n          type: integer\n        totalCount:\n          type: integer\n      type: object\n    Persona:\n      properties:\n        _links:\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n            shows:\n              items:\n                $ref: \"#/components/schemas/Link\"\n              type: array\n          type: object\n        bio:\n          type: string\n        email:\n          type: string\n        id:\n          type: integer\n        image:\n          type: string\n        name:\n          type: string\n        since:\n          description: Year\n          format: integer\n          type: string\n        website:\n          type: string\n      type: object\n    Playlist:\n      properties:\n        _links:\n          properties:\n            persona:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n            show:\n              $ref: \"#/components/schemas/Link\"\n            spins:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        automation:\n          type: boolean\n        category:\n          type: string\n        description:\n          type: string\n        duration:\n          description: Duration in seconds\n          type: integer\n        end:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        episode_description:\n          type: string\n        episode_name:\n          type: string\n        hide_dj:\n          type: boolean\n        id:\n          type: integer\n        image:\n          type: string\n        persona_id:\n          type: integer\n        show_id:\n          type: integer\n        since:\n          format: date\n          type: string\n        start:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        timezone:\n          example: America/Chicago\n          type: string\n        title:\n          type: string\n        url:\n          type: string\n      type: object\n    Show:\n      properties:\n        _links:\n          properties:\n            personas:\n              items:\n                $ref: \"#/components/schemas/Link\"\n              type: array\n            playlists:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        category:\n          type: string\n        description:\n          type: string\n        duration:\n          description: Duration in seconds\n          type: integer\n        end:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        hide_dj:\n          type: boolean\n        id:\n          type: integer\n        image:\n          type: string\n        one_off:\n          type: boolean\n        since:\n          description: Year\n          format: integer\n          type: string\n        start:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        timezone:\n          example: America/Chicago\n          type: string\n        title:\n          type: string\n        url:\n          type: string\n      type: object\n    Spin:\n      properties:\n        _links:\n          properties:\n            playlist:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        artist:\n          type: string\n        composer:\n          type: string\n        duration:\n          description: Duration in seconds\n          type: integer\n        end:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        genre:\n          type: string\n        id:\n          type: integer\n        isrc:\n          type: string\n        label:\n          type: string\n        note:\n          type: string\n        playlist_id:\n          type: integer\n        release:\n          type: string\n        song:\n          type: string\n        start:\n          description: UTC datetime, ISO-8601.\n          format: date-time\n          type: string\n        timezone:\n          example: America/Chicago\n          type: string\n      type: object\n    ValidationError:\n      properties:\n        field:\n          type: string\n        message:\n          type: string\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/spinitron.com-1.0.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/spinitron.com-1.0.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}