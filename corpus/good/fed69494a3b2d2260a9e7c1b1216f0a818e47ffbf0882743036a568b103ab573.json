{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ubccr/grendel"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "client/api/openapi.yaml",
			"byteSize": 14865,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    email: aebruno2@buffalo.edu\n  description: Bare Metal Provisioning system for HPC Linux clusters. Find out more\n    about Grendel at [https://github.com/ubccr/grendel](https://github.com/ubccr/grendel)\n  license:\n    name: GPLv3\n    url: https://www.gnu.org/licenses/gpl-3.0.en.html\n  title: Grendel API\n  version: 1.0.0\nexternalDocs:\n  description: https://grendel.readthedocs.io/en/latest/\n  url: https://grendel.readthedocs.io/en/latest/\nservers:\n- url: http://localhost/v1\ntags:\n- description: Host API Service\n  externalDocs:\n    description: Operations for grendel hosts\n    url: https://grendel.readthedocs.io/en/latest/\n  name: host\n- description: Boot Image API Service\n  externalDocs:\n    description: Operations for grendel boot images\n    url: https://grendel.readthedocs.io/en/latest/\n  name: image\npaths:\n  /host/list:\n    get:\n      description: Returns all host stored in Grendel\n      operationId: hostList\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Host'\n                type: array\n          description: successful operation\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: List all hosts\n      tags:\n      - host\n  /host/find/{nodeSet}:\n    delete:\n      description: Delete hosts in the given nodeset\n      operationId: hostDelete\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to delete hosts from database\n      summary: Delete hosts by name or nodeset\n      tags:\n      - host\n    get:\n      description: Returns a list of hosts in the given nodeset\n      operationId: hostFind\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Host'\n                type: array\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: Find hosts by name or nodeset\n      tags:\n      - host\n  /host/tags/{tags}:\n    get:\n      description: Returns a list of hosts with the given tags\n      operationId: hostTags\n      parameters:\n      - description: 'comman separated list of tags. Example: ib,noib,k16'\n        explode: false\n        in: path\n        name: tags\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Host'\n                type: array\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid tags supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts by tag from database\n      summary: Find hosts by tags\n      tags:\n      - host\n  /host/provision/{nodeSet}:\n    put:\n      description: Sets hosts to provision in the given nodeset\n      operationId: hostProvision\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: Set hosts to provision by name or nodeset\n      tags:\n      - host\n  /host/unprovision/{nodeSet}:\n    put:\n      description: Sets hosts to unprovision in the given nodeset\n      operationId: hostUnprovision\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: Set hosts to unprovision by name or nodeset\n      tags:\n      - host\n  /host/tag/{nodeSet}:\n    put:\n      description: Tag hosts in the given nodeset\n      operationId: hostTag\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: 'list of tags. Example: ib,noib,k16'\n        explode: true\n        in: query\n        name: tags\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: Tag hosts by name or nodeset\n      tags:\n      - host\n  /host/untag/{nodeSet}:\n    put:\n      description: Untag hosts the given nodeset\n      operationId: hostUntag\n      parameters:\n      - description: 'nodeset syntax. Example: cpn-d13-[01-100]'\n        explode: false\n        in: path\n        name: nodeSet\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: 'list of tags. Example: ib,noib,k16'\n        explode: true\n        in: query\n        name: tags\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid nodeset supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch hosts from database\n      summary: Untag hosts name or nodeset\n      tags:\n      - host\n  /host:\n    post:\n      operationId: storeHosts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/Host'\n              type: array\n        description: Add/Update one or more hosts to Grendel\n        required: true\n      responses:\n        \"201\":\n          content: {}\n          description: successfully stored hosts\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid host input supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to store hosts in database\n      summary: Add or update hosts in Grendel\n      tags:\n      - host\n      x-codegen-request-body-name: body\n  /bootimage/list:\n    get:\n      description: Returns all images stored in Grendel\n      operationId: imageList\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BootImage'\n                type: array\n          description: successful operation\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch images from database\n      summary: List all images\n      tags:\n      - image\n  /bootimage/find/{name}:\n    delete:\n      description: Delete boot images with the given name\n      operationId: imageDelete\n      parameters:\n      - description: Name of boot image to delete\n        explode: false\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content: {}\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid name supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to delete boot images from database\n      summary: Delete boot images by name\n      tags:\n      - image\n    get:\n      description: Returns image with the given name\n      operationId: imageFind\n      parameters:\n      - description: Name of image\n        explode: false\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BootImage'\n                type: array\n          description: successful operation\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid name supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to fetch image from database\n      summary: Find image by name\n      tags:\n      - image\n  /bootimage:\n    post:\n      operationId: storeImages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/BootImage'\n              type: array\n        description: Add/Update one or more images to Grendel\n        required: true\n      responses:\n        \"201\":\n          content: {}\n          description: successfully stored images\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid boot image input supplied\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Failed to store images in database\n      summary: Add or update images in Grendel\n      tags:\n      - image\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    Host:\n      example:\n        interfaces:\n        - fqdn: fqdn\n          ip: ip\n          name: name\n          bmc: true\n          mac: mac\n        - fqdn: fqdn\n          ip: ip\n          name: name\n          bmc: true\n          mac: mac\n        provision: true\n        name: name\n        id: id\n        boot_image: boot_image\n        firmware: firmware\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        provision:\n          type: boolean\n        firmware:\n          type: string\n        boot_image:\n          type: string\n        interfaces:\n          items:\n            $ref: '#/components/schemas/NetInterface'\n          type: array\n      required:\n      - name\n      type: object\n    NetInterface:\n      example:\n        fqdn: fqdn\n        ip: ip\n        name: name\n        bmc: true\n        mac: mac\n      properties:\n        mac:\n          type: string\n        name:\n          type: string\n        ip:\n          type: string\n        fqdn:\n          type: string\n        bmc:\n          type: boolean\n      type: object\n    BootImage:\n      example:\n        cmdline: cmdline\n        kernel: kernel\n        name: name\n        verify: true\n        id: id\n        liveimg: liveimg\n        initrd:\n        - initrd\n        - initrd\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        kernel:\n          type: string\n        initrd:\n          items:\n            type: string\n          type: array\n        liveimg:\n          type: string\n        cmdline:\n          type: string\n        verify:\n          type: boolean\n      required:\n      - name\n      type: object\n    ErrorResponse:\n      properties:\n        message:\n          type: string\n      type: object\n  securitySchemes:\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n",
			"canonicalURL": "/github.com/ubccr/grendel@19873451b1bf95a9dc7141bb42128ebe94ccd46e/-/blob/client/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ubccr/grendel/blob/19873451b1bf95a9dc7141bb42128ebe94ccd46e/client/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}