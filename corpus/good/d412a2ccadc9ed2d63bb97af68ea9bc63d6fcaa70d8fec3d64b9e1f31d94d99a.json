{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/abunuwas/microservice-apis"
		},
		"file": {
			"name": "oas.yaml",
			"size": 0,
			"path": "ch12/orders/oas.yaml",
			"byteSize": 7223,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: Orders API\n  description: API that allows you to manage orders for CoffeeMesh\n  version: 1.0.0\n\nservers:\n  - url: https://coffeemesh.com\n    description: main production server\n  - url: https://coffeemesh-staging.com\n    description: staging server for testing purposes only\n\npaths:\n  /orders:\n    get:\n      parameters:\n      - name: cancelled\n        in: query\n        required: false\n        schema:\n          type: boolean\n      - name: limit\n        in: query\n        required: false\n        schema:\n          type: integer\n      operationId: getOrders\n      summary: Returns a list of orders\n      description: \u003e\n        A list of orders made by the customer\n        sorted by date. Allows to filter orders\n        by range of dates.\n      responses:\n        '200':\n          description: A JSON array of orders\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  orders:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/GetOrderSchema'\n\n    post:\n      operationId: createOrder\n      summary: Creates an order\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateOrderSchema'\n      responses:\n        '201':\n          description: A JSON representation of the created order\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrderSchema'\n          links:\n            GetOrder:\n              operationId: getOrder\n              parameters:\n                order_id: '$response.body#/id'\n              description: \u003e\n                The `id` value returned in the response can be used as\n                the `order_id` parameter in `GET /orders/{order_id}\n            UpdateOrder:\n              operationId: updateOrder\n              parameters:\n                order_id: '$response.body#/id'\n              description: \u003e\n                The `id` value returned in the response can be used as\n                the `order_id` parameter in `PUT /orders/{order_id}\n            DeleteOrder:\n              operationId: deleteOrder\n              parameters:\n                order_id: '$response.body#/id'\n              description: \u003e\n                The `id` value returned in the response can be used as\n                the `order_id` parameter in `DELETE /orders/{order_id}\n            CancelOrder:\n              operationId: cancelOrder\n              parameters:\n                order_id: '$response.body#/id'\n              description: \u003e\n                The `id` value returned in the response can be used as\n                the `order_id` parameter in `DELETE /orders/{order_id}/cancel\n            PayOrder:\n              operationId: payOrder\n              parameters:\n                order_id: '$response.body#/id'\n              description: \u003e\n                The `id` value returned in the response can be used as\n                the `order_id` parameter in `DELETE /orders/{order_id}/pay\n\n  /orders/{order_id}:\n    parameters:\n      - in: path\n        name: order_id\n        required: true\n        schema:\n          type: string\n        example: d222e7a3-6afb-463a-9709-38eb70cc670d\n    get:\n      operationId: getOrder\n      summary: Returns the details of a specific order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrderSchema'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    put:\n      operationId: updateOrder\n      summary: Replaces an existing order\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateOrderSchema'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrderSchema'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    delete:\n      operationId: deleteOrder\n      summary: Deletes an existing order\n      responses:\n        '204':\n          description: The resource was deleted successfully\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n  /orders/{order_id}/pay:\n    parameters:\n      - in: path\n        name: order_id\n        required: true\n        schema:\n          type: string\n        example: d222e7a3-6afb-463a-9709-38eb70cc670d\n    post:\n      operationId: payOrder\n      summary: Processes payment for an order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrderSchema'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n\n  /orders/{order_id}/cancel:\n    parameters:\n      - in: path\n        name: order_id\n        required: true\n        schema:\n          type: string\n        example: d222e7a3-6afb-463a-9709-38eb70cc670d\n    post:\n      operationId: cancelOrder\n      summary: Cancels an order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOrderSchema'\n\ncomponents:\n  responses:\n    NotFound:\n      description: The specified resource was not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    basicAuth:\n      type: http\n      scheme: basic\n\n  schemas:\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n      required:\n        - error\n      additionalProperties: false\n\n    OrderItemSchema:\n      type: object\n      additionalProperties: false\n      required:\n        - product\n        - size\n      properties:\n        product:\n          type: string\n        size:\n          type: string\n          enum:\n            - small\n            - medium\n            - big\n        quantity:\n          type: integer\n          format: int64\n          default: 1\n          minimum: 1\n\n    CreateOrderSchema:\n      type: object\n      additionalProperties: false\n      required:\n        - order\n      properties:\n        order:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/OrderItemSchema'\n\n    GetOrderSchema:\n      type: object\n      additionalProperties: false\n      allOf:\n        - $ref: '#/components/schemas/CreateOrderSchema'\n      required:\n        - id\n        - created\n        - status\n        - order\n      properties:\n        id:\n          type: string\n          format: uuid\n        created:\n          type: string\n          format: date-time\n        status:\n          type: string\n          enum:\n            - created\n            - paid\n            - progress\n            - cancelled\n            - dispatched\n            - delivered\n",
			"canonicalURL": "/github.com/abunuwas/microservice-apis@5ad4e831a646cc47470c2cc2fd01fcc67c010779/-/blob/ch12/orders/oas.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/abunuwas/microservice-apis/blob/5ad4e831a646cc47470c2cc2fd01fcc67c010779/ch12/orders/oas.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}