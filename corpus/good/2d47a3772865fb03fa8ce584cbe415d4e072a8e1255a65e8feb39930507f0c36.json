{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gotenberg/gotenberg"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 26373,
			"content": "openapi: 3.0.3\ninfo:\n  title: Gotenberg\n  version: 7.x\n  license:\n    name: MIT\n    url: 'https://github.com/gotenberg/gotenberg/blob/main/LICENSE'\n  contact:\n    url: 'https://github.com/gotenberg/gotenberg'\n  description: \u003e-\n    A Docker-powered stateless API for PDF files.\nexternalDocs:\n  url: https://gotenberg.dev\nservers:\n  - url: 'http://localhost:3000'\n    description: Local server with the default Docker image and port\ntags:\n  - name: chromium\n    description: Operations of the Chromium module\n    externalDocs:\n      url: https://gotenberg.dev/docs/modules/chromium\n  - name: libreoffice\n    description: Operations of the Libreoffice module\n    externalDocs:\n      url: https://gotenberg.dev/docs/modules/libreoffice\n  - name: pdfengines\n    description: Operations of the PDF Engines module\n    externalDocs:\n      url: https://gotenberg.dev/docs/modules/pdf-engines\npaths:\n  /forms/chromium/convert/url:\n    post:\n      tags:\n        - chromium\n      summary: Convert the contents of a given URL to PDF\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/chromium\n      description: \u003e-\n        Send a URL in your API request via the `url` form field\n        Send a remote URL in your API request via the `remoteURL` parameter, and\n        get the resulting PDF file. The API will fetch the given URL and render\n        the page to PDF using the underlying headless Chrome instance.\n        You can optionally include `header.html` and `footer.html` files as part of the request as well.\n        See externalDocs for more details.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        required: true\n        description: \u003e-\n          The request must be  `multipart/form-data` that includes a `url` form field.\n          The API uses a headless Chrome instance to do the conversion, therefore print\n          parameter such as margins and paper size are also accepted as optional parameters.\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/URLConvertRequestBody'\n            examples: { }\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: Bad Request\n\n  /forms/chromium/convert/html:\n    post:\n      tags:\n        - chromium\n      summary: Convert a given HTML file to PDF\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/chromium\n      description: \u003e-\n        Send an HTML file called `index.html` as a multipart form request, and\n        get the resulting PDF file. You can optionally include `header.html` and\n        `footer.html` files as part of the request as well.\n        See externalDocs for more details.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/HTMLConvertRequestBody'\n        description: \u003e-\n          The request body must have an `index.html` file in the `files` array,\n          as well as all the referred resources on the same level as the\n          `index.html` file. The request can also include `header.html` and\n          `footer.html`, given the limitations in the API description above.\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: Bad Request\n\n  /forms/chromium/convert/markdown:\n    post:\n      tags:\n        - chromium\n      summary: Convert a Markdown file to PDF\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/chromium\n      description: \u003e-\n        Accepts an HTML file called `index.html` plus markdown files as a multipart\n        form request and embeds the markdown files into the HTML file using the Golang template\n        function `toHTML`.\n        The API will convert the markdown to HTML and embed it into your `index.html` file,\n        then render the resulting page. You can include your own styling and more in your HTML file.\n        Refer to the HTML conversion page for all the options you can use when converting\n        Markdown documents as well. You can optionally include `header.html` and\n        `footer.html` files as part of the request as well.\n        See externalDocs for more details.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/MarkdownConvertRequestBody'\n        description: \u003e-\n          The request body must have an `index.html` file in the `files` array,\n          as well as all the referred markdown resources on the same level as\n          the `index.html` file.\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: Bad Request\n\n  /forms/libreoffice/convert:\n    post:\n      tags:\n        - libreoffice\n      summary: Convert an Office document to PDF\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/libreoffice\n      description: \u003e-\n        This route accepts multipart/form-data requests and files with the following extensions:\n\n        .bib  .doc  .xml  .docx  .fodt  .html  .ltx  .txt  .odt  .ott  .pdb  .pdf  .psw  .rtf\n        .sdw  .stw  .sxw  .uot  .vor  .wps  .epub  .png  .bmp  .emf  .eps  .fodg  .gif  .jpg\n        .met  .odd  .otg  .pbm  .pct  .pgm  .ppm  .ras  .std  .svg  .svm  .swf  .sxd  .sxw\n        .tiff  .xhtml  .xpm  .fodp  .potm  .pot  .pptx  .pps  .ppt  .pwp  .sda  .sdd  .sti\n        .sxi  .uop  .wmf  .csv  .dbf  .dif  .fods  .ods  .ots  .pxl  .sdc  .slk  .stc  .sxc\n        .uos  .xls  .xlt  .xlsx  .tif  .jpeg  .odp\n\n        By default, if you send more than one file to convert, the route returns a ZIP archive of the\n        resulting PDF files. However, you may prefer to merge all the PDF files into an individual PDF file.\n\n        \u003e **Attention:** The files will be merged alphabetically for the\n        resulting PDF.\n\n        You may also specify the page ranges to convert from the incoming Office\n        documents. The expected format is the same as the one from the print\n        options of LibreOffice, e.g. `1-1` or `1-4`.\n\n        \u003e **Attention:** if more than one document, the page ranges will be\n        applied for each document.\n\n        See externalDocs for more details.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/OfficeConvertRequestBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: Bad Request, e.g. Both 'pdfFormat' and 'nativePdfA1aFormat' form values are provided\n\n  /forms/pdfengines/merge:\n    post:\n      tags:\n        - pdfengines\n      summary: Merge multiple PDFs into a single PDF\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/pdf-engines\n      description: \u003e-\n        You can send multiple PDF files to this endpoint, the API will merge\n        them into a single PDF and return the resulting PDF file.\n\n        \u003e **Attention:** The PDF files will be merged alphabetically.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                pdfFormat:\n                  type: string\n                  description: The PDF format of the resulting PDF\n                  example: PDF/A-1a\n              required:\n                - files\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: Bad Request\n\n  /forms/pdfengines/convert:\n    post:\n      tags:\n        - pdfengines\n      summary: Convert PDFs into the given formats\n      externalDocs:\n        url: https://gotenberg.dev/docs/modules/pdf-engines\n      description: \u003e-\n        This route accepts PDF files and a form field pdfFormat for converting them into the specified format.\n      parameters:\n        - in: header\n          name: Gotenberg-Output-Filename\n          description: \u003e-\n            By default, the API generates a UUID filename.\n            However, you may also specify the filename per request,\n            thanks to the Gotenberg-Output-Filename header.\n            Caution! The API adds the file extension automatically; you don't have to set it.\n          schema:\n            type: string\n          required: false\n        - in: header\n          name: Gotenberg-Trace\n          description: \u003e-\n            The trace, or request ID, identifies a request in the logs.\n\n            By default, the API generates a UUID trace for each request.\n            However, you may also specify the trace per request, thanks to the Gotenberg-Trace header.\n          schema:\n            type: string\n          required: false\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                pdfFormat:\n                  type: string\n                  description: The PDF format of the resulting PDF\n                  example: PDF/A-1a\n              required:\n                - files\n                - pdfFormat\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessfulPDF'\n        '400':\n          description: \u003e-\n            Bad Request, e.g. Invalid form data: no form file found for extensions: [.pdf]; form value 'pdfFormat' is required\n\ncomponents:\n  schemas:\n    HTMLConvertRequestBody:\n      title: HTML Conversion Request Body\n      type: object\n      properties:\n        files:\n          type: array\n          description: \u003e-\n            List of HTML files to be converted to PDF. An `index.html` file is\n            required, and any other resources that are referenced through the\n            HTML file must be included as well. All the referenced files must be\n            on the same level as the `index.html` file.\n          items:\n            type: string\n            format: binary\n        marginTop:\n          type: number\n          example: 0\n          default: 1\n          description: Top margin for the page in inches.\n        marginBottom:\n          type: number\n          example: 0\n          default: 1\n          description: Bottom margin for the page in inches.\n        marginLeft:\n          type: number\n          example: 0\n          default: 1\n          description: Left margin for the page in inches.\n        marginRight:\n          type: number\n          example: 0\n          default: 1\n          description: Right margin for the page in inches.\n        paperWidth:\n          type: number\n          example: 8.27\n          description: \u003e-\n            Paper width to be used while rendering the PDF. The default page\n            size is A4.\n        paperHeight:\n          type: number\n          example: 11.69\n          description: \u003e-\n            Paper height to be used while rendering the PDF. The default page\n            size is A4.\n        preferCssPageSize:\n          type: boolean\n          description: \u003e-\n            Define whether to prefer page size as defined by CSS (default false)\n          default: false\n        printBackground:\n          type: boolean\n          description: \u003e-\n            Print the background graphics (default false)\n          default: false\n        landscape:\n          type: boolean\n          example: true\n          default: false\n          description: \u003e-\n            The default orientation for rendering the page is \"portrait\" mode.\n            By sending \"landscape\" parameter, you can ask the output to be\n            landscape.\n        scale:\n          type: number\n          minimum: 0.1\n          maximum: 2.0\n          example: 1.5\n          description: \u003e-\n            The scale of the page rendering\n          default: 1.0\n        waitDelay:\n          type: string\n          example: 5s\n          description: \u003e-\n            When the page relies on JavaScript for rendering, and you don't have access to the page's code,\n            you may want to wait a certain amount of time to make sure Chromium has fully rendered the page\n            you're trying to generate.\n        waitWindowStatus:\n          type: string\n          example: done\n          description: \u003e-\n            If you have access to the page's code, you may set the window status and tell Gotenberg to wait for a specific value.\n            For instance\n               await promises()\n               window.status = 'ready'\n            Prefer this option over waitDelay.\n        extraHttpHeaders:\n          type: string\n          description: HTTP headers to send by Chromium while loading the HTML document (JSON format)\n        nativePageRanges:\n          type: string\n          example: 1-4\n          description: \u003e-\n            The page ranges to be converted to PDF for the incoming Office\n            documents.\n        pdfFormat:\n          type: string\n          description: \u003e-\n            The PDF format of the resulting PDF.\n            Caution! You cannot use both nativePdfA1aFormat and pdfFormat form fields.\n          example: PDF/A-1a\n      required:\n        - files\n    MarkdownConvertRequestBody:\n      title: Markdown Conversion Request Body\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n            format: binary\n        marginTop:\n          type: number\n          example: 0\n          default: 1\n          description: Top margin for the page in inches.\n        marginBottom:\n          type: number\n          example: 0\n          default: 1\n          description: Bottom margin for the page in inches.\n        marginLeft:\n          type: number\n          example: 0\n          default: 1\n          description: Left margin for the page in inches.\n        marginRight:\n          type: number\n          example: 0\n          default: 1\n          description: Right margin for the page in inches.\n        paperWidth:\n          type: number\n          example: 8.27\n          description: \u003e-\n            Paper width to be used while rendering the PDF. The default page\n            size is A4.\n        paperHeight:\n          type: number\n          example: 11.69\n          description: \u003e-\n            Paper height to be used while rendering the PDF. The default page\n            size is A4.\n        preferCssPageSize:\n          type: boolean\n          description: \u003e-\n            Define whether to prefer page size as defined by CSS (default false)\n          default: false\n        printBackground:\n          type: boolean\n          description: \u003e-\n            Print the background graphics (default false)\n          default: false\n        landscape:\n          type: boolean\n          example: true\n          default: false\n          description: \u003e-\n            The default orientation for rendering the page is \"portrait\" mode.\n            By sending \"landscape\" parameter, you can ask the output to be\n            landscape.\n        scale:\n          type: number\n          minimum: 0.1\n          maximum: 2.0\n          example: 1.5\n          description: \u003e-\n            The scale of the page rendering\n          default: 1.0\n        waitDelay:\n          type: string\n          example: 5s\n          description: \u003e-\n            When the page relies on JavaScript for rendering, and you don't have access to the page's code,\n            you may want to wait a certain amount of time to make sure Chromium has fully rendered the page\n            you're trying to generate.\n        waitWindowStatus:\n          type: string\n          example: done\n          description: \u003e-\n            If you have access to the page's code, you may set the window status and tell Gotenberg to wait for a specific value.\n            For instance\n               await promises()\n               window.status = 'ready'\n            Prefer this option over waitDelay.\n        extraHttpHeaders:\n          type: string\n          description: HTTP headers to send by Chromium while loading the HTML document (JSON format)\n        nativePageRanges:\n          type: string\n          example: 1-4\n          description: \u003e-\n            The page ranges to be converted to PDF for the incoming Office\n            documents.\n        pdfFormat:\n          type: string\n          description: \u003e-\n            The PDF format of the resulting PDF.\n            Caution! You cannot use both nativePdfA1aFormat and pdfFormat form fields.\n          example: PDF/A-1a\n      required:\n        - files\n    URLConvertRequestBody:\n      title: URL Conversion Request Body\n      type: object\n      properties:\n        url:\n          type: string\n          example: 'https://google.com'\n        files:\n          description: Optional files named header.html and footer.html\n          type: array\n          items:\n            type: string\n            format: binary\n        marginTop:\n          type: number\n          example: 0\n          default: 1\n          description: Top margin for the page in inches.\n        marginBottom:\n          type: number\n          example: 0\n          default: 1\n          description: Bottom margin for the page in inches.\n        marginLeft:\n          type: number\n          example: 0\n          default: 1\n          description: Left margin for the page in inches.\n        marginRight:\n          type: number\n          example: 0\n          default: 1\n          description: Right margin for the page in inches.\n        paperWidth:\n          type: number\n          example: 8.27\n          description: \u003e-\n            Paper width to be used while rendering the PDF. The default page\n            size is A4.\n        paperHeight:\n          type: number\n          example: 11.69\n          description: \u003e-\n            Paper height to be used while rendering the PDF. The default page\n            size is A4.\n        preferCssPageSize:\n          type: boolean\n          description: \u003e-\n            Define whether to prefer page size as defined by CSS (default false)\n          default: false\n        printBackground:\n          type: boolean\n          description: \u003e-\n            Print the background graphics (default false)\n          default: false\n        landscape:\n          type: boolean\n          example: true\n          default: false\n          description: \u003e-\n            The default orientation for rendering the page is \"portrait\" mode.\n            By sending \"landscape\" parameter, you can ask the output to be\n            landscape.\n        scale:\n          type: number\n          minimum: 0.1\n          maximum: 2.0\n          example: 1.5\n          description: \u003e-\n            The scale of the page rendering\n          default: 1.0\n        waitDelay:\n          type: string\n          example: 5s\n          description: \u003e-\n            When the page relies on JavaScript for rendering, and you don't have access to the page's code,\n            you may want to wait a certain amount of time to make sure Chromium has fully rendered the page\n            you're trying to generate.\n        waitWindowStatus:\n          type: string\n          example: done\n          description: \u003e-\n            If you have access to the page's code, you may set the window status and tell Gotenberg to wait for a specific value.\n            For instance\n               await promises()\n               window.status = 'ready'\n            Prefer this option over waitDelay.\n        extraHttpHeaders:\n          type: string\n          description: HTTP headers to send by Chromium while loading the HTML document (JSON format)\n        nativePageRanges:\n          type: string\n          example: 1-4\n          description: \u003e-\n            The page ranges to be converted to PDF for the incoming Office\n            documents.\n        pdfFormat:\n          type: string\n          description: \u003e-\n            The PDF format of the resulting PDF.\n            Caution! You cannot use both nativePdfA1aFormat and pdfFormat form fields.\n          example: PDF/A-1a\n      required:\n        - url\n    OfficeConvertRequestBody:\n      title: Office Conversion Request Body\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n            format: binary\n        nativePageRanges:\n          type: string\n          example: 1-4\n          description: \u003e-\n            The page ranges to be converted to PDF for the incoming Office\n            documents. **If there are multiple files sent to the API, this page\n            range will apply to all of the documents**. Empty means all pages.\n        nativePdfA1aFormat:\n          type: boolean\n          description: \u003e-\n            Use unoconv to convert the resulting PDF to the 'PDF/A-1a' format.\n            Caution! You cannot use both nativePdfA1aFormat and pdfFormat form fields.\n        pdfFormat:\n          type: string\n          description: \u003e-\n            The PDF format of the resulting PDF.\n            Caution! You cannot use both nativePdfA1aFormat and pdfFormat form fields.\n          example: PDF/A-1a\n        landscape:\n          type: boolean\n          example: true\n          default: false\n          description: \u003e-\n            The default orientation for rendering the page is \"portrait\" mode.\n            By sending \"landscape\" parameter, you can ask the output to be\n            landscape.\n        merge:\n          type: boolean\n          description: \u003e-\n            Merge all PDF files into an individual PDF file.\n      required:\n        - files\n    MergeFilesRequestBody:\n      title: Merge Files Request Body\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n            format: binary\n      required:\n        - files\n  securitySchemes: { }\n  responses:\n    SuccessfulPDF:\n      description: Resulting PDF file from the conversion.\n      content:\n        application/pdf:\n          schema:\n            type: string\n            format: binary",
			"canonicalURL": "/github.com/gotenberg/gotenberg@08408ae00558f2233644c40e992374cdb3e005b0/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gotenberg/gotenberg/blob/08408ae00558f2233644c40e992374cdb3e005b0/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}