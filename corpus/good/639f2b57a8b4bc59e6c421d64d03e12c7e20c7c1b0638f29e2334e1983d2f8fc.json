{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MonadicSystems/okapi"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 23684,
			"content": "openapi: 3.0.1\ninfo:\n  title: Conduit API\n  description: Conduit API\n  contact:\n    name: RealWorld\n    url: https://realworld.io\n  license:\n    name: MIT License\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\nservers:\n  - url: /api\npaths:\n  /users/login:\n    post:\n      tags:\n        - User and Authentication\n      summary: Existing user login\n      description: Login for existing user\n      operationId: Login\n      requestBody:\n        description: Credentials to use\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginUserRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      x-codegen-request-body-name: body\n  /users:\n    post:\n      tags:\n        - User and Authentication\n      summary: Register a new user\n      description: Register a new user\n      operationId: CreateUser\n      requestBody:\n        description: Details of the new user to register\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUserRequest'\n        required: true\n      responses:\n        201:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      x-codegen-request-body-name: body\n  /user:\n    get:\n      tags:\n        - User and Authentication\n      summary: Get current user\n      description: Gets the currently logged-in user\n      operationId: GetCurrentUser\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n    put:\n      tags:\n        - User and Authentication\n      summary: Update current user\n      description: Updated user information for current user\n      operationId: UpdateCurrentUser\n      requestBody:\n        description: User details to update. At least **one** field is required.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n      x-codegen-request-body-name: body\n  /profiles/{username}:\n    get:\n      tags:\n        - Profile\n      summary: Get a profile\n      description: Get a profile of a user of the system. Auth is optional\n      operationId: GetProfileByUsername\n      parameters:\n        - name: username\n          in: path\n          description: Username of the profile to get\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n  /profiles/{username}/follow:\n    post:\n      tags:\n        - Profile\n      summary: Follow a user\n      description: Follow a user by username\n      operationId: FollowUserByUsername\n      parameters:\n        - name: username\n          in: path\n          description: Username of the profile you want to follow\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n    delete:\n      tags:\n        - Profile\n      summary: Unfollow a user\n      description: Unfollow a user by username\n      operationId: UnfollowUserByUsername\n      parameters:\n        - name: username\n          in: path\n          description: Username of the profile you want to unfollow\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n  /articles/feed:\n    get:\n      tags:\n        - Articles\n      summary: Get recent articles from users you follow\n      description: Get most recent articles from users you follow. Use query parameters\n        to limit. Auth is required\n      operationId: GetArticlesFeed\n      parameters:\n        - name: limit\n          in: query\n          description: Limit number of articles returned (default is 20)\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: Offset/skip number of articles (default is 0)\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultipleArticlesResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n  /articles:\n    get:\n      tags:\n        - Articles\n      summary: Get recent articles globally\n      description: Get most recent articles globally. Use query parameters to filter\n        results. Auth is optional\n      operationId: GetArticles\n      parameters:\n        - name: tag\n          in: query\n          description: Filter by tag\n          schema:\n            type: string\n        - name: author\n          in: query\n          description: Filter by author (username)\n          schema:\n            type: string\n        - name: favorited\n          in: query\n          description: Filter by favorites of a user (username)\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Limit number of articles returned (default is 20)\n          schema:\n            type: integer\n            default: 20\n        - name: offset\n          in: query\n          description: Offset/skip number of articles (default is 0)\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultipleArticlesResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n    post:\n      tags:\n        - Articles\n      summary: Create an article\n      description: Create an article. Auth is required\n      operationId: CreateArticle\n      requestBody:\n        description: Article to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewArticleRequest'\n        required: true\n      responses:\n        201:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleArticleResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n      x-codegen-request-body-name: article\n  /articles/{slug}:\n    get:\n      tags:\n        - Articles\n      summary: Get an article\n      description: Get an article. Auth not required\n      operationId: GetArticle\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article to get\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleArticleResponse'\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n    put:\n      tags:\n        - Articles\n      summary: Update an article\n      description: Update an article. Auth is required\n      operationId: UpdateArticle\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article to update\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Article to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateArticleRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleArticleResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n      x-codegen-request-body-name: article\n    delete:\n      tags:\n        - Articles\n      summary: Delete an article\n      description: Delete an article. Auth is required\n      operationId: DeleteArticle\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n  /articles/{slug}/comments:\n    get:\n      tags:\n        - Comments\n      summary: Get comments for an article\n      description: Get the comments for an article. Auth is optional\n      operationId: GetArticleComments\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article that you want to get comments for\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultipleCommentsResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n    post:\n      tags:\n        - Comments\n      summary: Create a comment for an article\n      description: Create a comment for an article. Auth is required\n      operationId: CreateArticleComment\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article that you want to create a comment for\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Comment you want to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewCommentRequest'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleCommentResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n      x-codegen-request-body-name: comment\n  /articles/{slug}/comments/{id}:\n    delete:\n      tags:\n        - Comments\n      summary: Delete a comment for an article\n      description: Delete a comment for an article. Auth is required\n      operationId: DeleteArticleComment\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article that you want to delete a comment for\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: ID of the comment you want to delete\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n  /articles/{slug}/favorite:\n    post:\n      tags:\n        - Favorites\n      summary: Favorite an article\n      description: Favorite an article. Auth is required\n      operationId: CreateArticleFavorite\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article that you want to favorite\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleArticleResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n    delete:\n      tags:\n        - Favorites\n      summary: Unfavorite an article\n      description: Unfavorite an article. Auth is required\n      operationId: DeleteArticleFavorite\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of the article that you want to unfavorite\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SingleArticleResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\n      security:\n        - Token: []\n  /tags:\n    get:\n      summary: Get tags\n      description: Get tags. Auth not required\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagsResponse'\n        422:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GenericErrorModel'\ncomponents:\n  schemas:\n    LoginUser:\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n          format: password\n    LoginUserRequest:\n      required:\n        - user\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/LoginUser'\n    NewUser:\n      required:\n        - email\n        - password\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n          format: password\n    NewUserRequest:\n      required:\n        - user\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/NewUser'\n    User:\n      required:\n        - bio\n        - email\n        - image\n        - token\n        - username\n      type: object\n      properties:\n        email:\n          type: string\n        token:\n          type: string\n        username:\n          type: string\n        bio:\n          type: string\n        image:\n          type: string\n    UserResponse:\n      required:\n        - user\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n    UpdateUser:\n      type: object\n      properties:\n        email:\n          type: string\n        token:\n          type: string\n        username:\n          type: string\n        bio:\n          type: string\n        image:\n          type: string\n    UpdateUserRequest:\n      required:\n        - user\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/UpdateUser'\n    ProfileResponse:\n      required:\n        - profile\n      type: object\n      properties:\n        profile:\n          $ref: '#/components/schemas/Profile'\n    Profile:\n      required:\n        - bio\n        - following\n        - image\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n        bio:\n          type: string\n        image:\n          type: string\n        following:\n          type: boolean\n    Article:\n      required:\n        - author\n        - body\n        - createdAt\n        - description\n        - favorited\n        - favoritesCount\n        - slug\n        - tagList\n        - title\n        - updatedAt\n      type: object\n      properties:\n        slug:\n          type: string\n        title:\n          type: string\n        description:\n          type: string\n        body:\n          type: string\n        tagList:\n          type: array\n          items:\n            type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        favorited:\n          type: boolean\n        favoritesCount:\n          type: integer\n        author:\n          $ref: '#/components/schemas/Profile'\n    SingleArticleResponse:\n      required:\n        - article\n      type: object\n      properties:\n        article:\n          $ref: '#/components/schemas/Article'\n    MultipleArticlesResponse:\n      required:\n        - articles\n        - articlesCount\n      type: object\n      properties:\n        articles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Article'\n        articlesCount:\n          type: integer\n    NewArticle:\n      required:\n        - body\n        - description\n        - title\n      type: object\n      properties:\n        title:\n          type: string\n        description:\n          type: string\n        body:\n          type: string\n        tagList:\n          type: array\n          items:\n            type: string\n    NewArticleRequest:\n      required:\n        - article\n      type: object\n      properties:\n        article:\n          $ref: '#/components/schemas/NewArticle'\n    UpdateArticle:\n      type: object\n      properties:\n        title:\n          type: string\n        description:\n          type: string\n        body:\n          type: string\n    UpdateArticleRequest:\n      required:\n        - article\n      type: object\n      properties:\n        article:\n          $ref: '#/components/schemas/UpdateArticle'\n    Comment:\n      required:\n        - author\n        - body\n        - createdAt\n        - id\n        - updatedAt\n      type: object\n      properties:\n        id:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        body:\n          type: string\n        author:\n          $ref: '#/components/schemas/Profile'\n    SingleCommentResponse:\n      required:\n        - comment\n      type: object\n      properties:\n        comment:\n          $ref: '#/components/schemas/Comment'\n    MultipleCommentsResponse:\n      required:\n        - comments\n      type: object\n      properties:\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n    NewComment:\n      required:\n        - body\n      type: object\n      properties:\n        body:\n          type: string\n    NewCommentRequest:\n      required:\n        - comment\n      type: object\n      properties:\n        comment:\n          $ref: '#/components/schemas/NewComment'\n    TagsResponse:\n      required:\n        - tags\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            type: string\n    GenericErrorModel:\n      required:\n        - errors\n      type: object\n      properties:\n        errors:\n          required:\n            - body\n          type: object\n          properties:\n            body:\n              type: array\n              items:\n                type: string\n  securitySchemes:\n    Token:\n      type: apiKey\n      description: \"For accessing the protected API resources, you must have received\\\n        \\ a a valid JWT token after registering or logging in. This JWT token must\\\n        \\ then be used for all protected resources by passing it in via the 'Authorization'\\\n        \\ header.\\n\\nA JWT token is generated by the API by either registering via\\\n        \\ /users or logging in via /users/login.\\n\\nThe following format must be in\\\n        \\ the 'Authorization' header :\\n\\n    Token xxxxxx.yyyyyyy.zzzzzz\\n    \\n\"\n      name: Authorization\n      in: header\n",
			"canonicalURL": "/github.com/MonadicSystems/okapi@9c8e112574a5fcc12bc68c43c4bba06af38354ec/-/blob/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/MonadicSystems/okapi/blob/9c8e112574a5fcc12bc68c43c4bba06af38354ec/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}