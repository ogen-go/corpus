{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/acoustid/acoustid-index"
		},
		"file": {
			"name": "index.yaml",
			"size": 0,
			"path": "api/index.yaml",
			"byteSize": 8627,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: 'AcoustID Index'\nservers:\n  - url: 'localhost:6081'\n\npaths:\n\n  /{index}:\n    get:\n      summary: Get index details\n      operationId: getIndex\n      tags:\n        - index\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n      responses:\n        '200':\n          description: Index details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Index'\n        '404':\n          description: Index does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Create index\n      operationId: createIndex\n      tags:\n        - index\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n      responses:\n        '200':\n          description: Successfully created the index\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Index'\n    delete:\n      summary: Delete index\n      operationId: deleteIndex\n      tags:\n        - index\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n      responses:\n        '200':\n          description: Successfully deleted the index\n\n  /{index}/_doc/{id}:\n    get:\n      summary: Get document details\n      operationId: getDocument\n      tags:\n        - document\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n        - $ref: '#/components/parameters/documentId'\n      responses:\n        '200':\n          description: Document details\n    put:\n      summary: Insert or update document\n      operationId: insertOrUpdateDocument\n      tags:\n        - document\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n        - $ref: '#/components/parameters/documentId'\n      responses:\n        '200':\n          description: Successfully inserted or updated the document\n    delete:\n      summary: Delete document\n      operationId: deleteDocument\n      tags:\n        - document\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n        - $ref: '#/components/parameters/documentId'\n      responses:\n        '200':\n          description: Successfully deleted the document\n      \n  /{index}/_bulk:\n    post:\n      summary: Perform multiple operations on the index\n      operationId: bulkUpdate\n      tags:\n        - document\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BulkUpdate'\n      responses:\n        '200':\n          description: Successfully applied all the operations\n\n  /{index}/_flush:\n    post:\n      summary: Flush all index data to persistent storage\n      description: |\n        Flushing the index is an operation which ensures any data currently only\n        stored in the operation log (oplog) is also permanently stored in the\n        main index structure on disk. This avoids having to load operations from\n        the oplog when the server is restarted. Flushing happens automatically,\n        but there might be situations when you want to trigger it manually.\n      operationId: flush\n      tags:\n        - index\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n      responses:\n        '200':\n          description: Successfully flushed index data to persistent storage\n\n  /{index}/_search:\n    get:\n      summary: Search in the index\n      operationId: search\n      tags:\n        - search\n      parameters:\n        - $ref: '#/components/parameters/indexName'\n        - name: query\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            $ref: '#/components/schemas/DocumentTerms'\n            \n      responses:\n        '200':\n          description: Successfully applied all the operations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResults'\n\n  /_health/alive:\n    get:\n      summary: Is the server running?\n      description: Check if the server is running, to be used in Kubernetes `livenessProbe`.\n      operationId: livenessCheck\n      tags:\n        - healthcheck\n      responses:\n        '200':\n          description: Success\n\n  /_health/ready:\n    get:\n      summary: Is the server ready to serve requests?\n      description: Check if the server is ready to serve requests, to be used in Kubernetes `readinessProbe`.\n      operationId: readinessCheck\n      tags:\n        - healthcheck\n      responses:\n        '200':\n          description: Success\n\n  /_metrics:\n    get:\n      summary: Prometheus metrics\n      description: Exports internal metrics in Prometheus format.\n      tags:\n        - prometheus\n      responses:\n        '200':\n          description: Success\n\ncomponents:\n\n  parameters:\n\n    indexName:\n      name: index\n      in: path\n      description: Index name\n      required: true\n      schema:\n        type: string\n        example: main\n\n    documentId:\n      name: id\n      in: path\n      description: Document ID\n      required: true\n      schema:\n        type: number\n        format: uint32\n        example: 12345\n\n  schemas:\n\n    Index:\n      type: object\n      required:\n        - name\n        - revision\n      properties:\n        name:\n          type: string\n          description: Index name\n          example: main\n        revision:\n          type: integer\n          format: int64\n          description: Revision of the index\n          example: 1\n\n    SearchResult:\n      type: object\n      required:\n        - id\n        - score\n      properties:\n        id:\n          type: number\n          format: uint32\n          description: Document ID\n          example: 12345\n        score:\n          type: number\n          format: uint32\n          description: How well does the document match the query\n          example: 3\n\n    SearchResults:\n      type: object\n      required:\n        - results\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchResult'\n\n    DocumentTerms:\n      type: array\n      items:\n        type: number\n        format: uint32\n      example: [198178303,198047167,164426175,164426173]\n\n    InsertOrUpdateDocument:\n      type: object\n      required:\n        - id\n        - terms\n      properties:\n        id:\n          type: number\n          format: uint32\n          description: Document ID\n          example: 12345\n        terms:\n          $ref: '#/components/schemas/DocumentTerms'\n\n    DeleteDocument:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: number\n          format: uint32\n          description: Document ID\n          example: 12345\n\n    SetAttribute:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          description: Attribute name\n          example: foo\n        value:\n          type: string\n          description: Attribute value\n          example: bar\n\n    BulkUpdate:\n      type: array\n      items:\n        oneOf:\n          - type: object\n            required:\n              - upsert\n            properties:\n              upsert:\n                $ref: '#/components/schemas/InsertOrUpdateDocument'\n          - type: object\n            required:\n              - delete\n            properties:\n              delete:\n                $ref: '#/components/schemas/DeleteDocument'\n          - type: object\n            required:\n              - set\n            properties:\n              set:\n                $ref: '#/components/schemas/SetAttribute'\n\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        status:\n          type: integer\n          format: int32\n          example: 404\n        error:\n          type: object\n          required:\n            - type\n            - description\n          properties:\n            type:\n              type: string\n              example: not_found\n            description:\n              type: string\n              example: index does not exist\n\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n\nsecurity:\n  - BasicAuth: []\n\ntags:\n  - name: index\n    description: Index management API\n  - name: document\n    description: Document management API\n  - name: search\n    description: Search API\n  - name: healthcheck\n    description: Healthchecks\n  - name: prometheus\n    description: Prometheus exporter",
			"canonicalURL": "/github.com/acoustid/acoustid-index@caadd90a9dd76823b8fd85e055b691a6a045115e/-/blob/api/index.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/acoustid/acoustid-index/blob/caadd90a9dd76823b8fd85e055b691a6a045115e/api/index.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}