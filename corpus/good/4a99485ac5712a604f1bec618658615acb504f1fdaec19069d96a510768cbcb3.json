{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DrFriendless/ExtendedStatsServerless"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 28866,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/DrFriendless/ExtendedStatsServerless/1.0.0\n\ninfo:\n  description: |\n    This is the API for Extended Stats Serverless.\n    In this document the term user can refer to a user of Extended Stats or a user of boardgamegeek.com.\n    The term geek refers exclusively to a user of boardgamegeek.com who is in the list of BGG users for Extended Stats.\n    A user of Extended Stats is a person who has created an account on drfriendless.com, and may or may not be a user\n    of boardgamegeek.com.\n\n    Notes on v1.0.0: in writing this specification, quite a few things have confused me and there are things I would\n    like to change. I will be making breaking changes to the API until version 2.0.0, at which point I will adopt semver.\n    Luckily at this point there are not many users other than me who will be inconvenienced.\n  version: \"1.0.1\"\n  title: Extended Stats API\n  contact:\n    email: friendless.farrell@gmail.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n\ntags:\n  - name: admins\n    description: Secured Admin-only calls\n  - name: developers\n    description: Operations available to regular developers\n  - name: apikey\n    description: You need an API key to invoke this API\n  - name: nokey\n    description: You do not need an API key to invoke this API\n  - name: authenticated\n    description: You must send authentication as a logged-in user.\n  - name: dontuse\n    description: Don't use this API. It's either incomplete or is going to change or be deleted.\n\npaths:\n  /authenticate:\n    get:\n      tags:\n        - developers nokey authenticated\n      summary: retrieves login data for a user\n      operationId: authenticate\n      description: |\n        Send authentication information retrieved from auth0 to receive personal user data.\n        If the authentication information does not correspond to an existing user, a new user will be created.\n      responses:\n        '200':\n          description: user data returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserData'\n  /faqcount:\n    post:\n      tags:\n        - apikey admin\n      summary: increment FAQ counts and retrieve\n      operationId: incFAQCount\n      description: |\n        The FAQ component on the front page is meant to be a bit of a joke in that I keep stats of how many times\n        each question is accessed, because this is a stats site. This API call optionally increments some counts\n        and returns the current values.\n      requestBody:\n        description: the number of views of each FAQ question to record - first value is question 1 etc.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n      responses:\n        '200':\n          description: counts incremented\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FAQCount'\n  /findgeeks:\n    get:\n      tags:\n        - developer nokey\n      summary: find geeks matching a prefix\n      operationId: findgeeks\n      description: |\n        Used for autocompleting geek names. Given what the user has typed in, return some BGG user names which might be what they want.\n      responses:\n        '200':\n          description: geeks returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  - blueatheart\n                  - bluebehir\n                  - BlueDane\n                  - bluefroggirl\n                  - BlueSwan\n  /news:\n    get:\n      tags:\n        - developers apikey\n      summary: get the latest news\n      operationId: getNews\n      description: |\n        The news is set of dated messages from DrFriendless about progress on the site. It is used to alert people to new features and to show\n        them that things actually are happening.\n      responses:\n        '200':\n          description: news items returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NewsItem'\n  /personal:\n    get:\n      tags:\n        - developers nokey authenticated\n      summary: retrieves all of the data stored for a user\n      operationId: personal\n      description: |\n        This call is designed not so much for the operation of the site, but more to give the user access to data stored\n        about them for purposes of GDPR and other sorts of disclosure.\n      responses:\n        '200':\n          description: personal data returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonalData'\n  /plays:\n    post:\n      tags:\n        - developer apikey\n      summary: get plays data\n      operationId: plays\n      description: |\n        Given a query object, retrieve plays data for some geeks.\n      requestBody:\n        description: a structured query describing the data being asked for\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PlaysQuery'\n      responses:\n        '200':\n          description: plays data returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultiGeekPlays'\n  /query:\n    post:\n      tags:\n        - developer apikey\n      summary: get selected game data\n      operationId: query\n      description: Given a selector and other query data, return a list of matching games.\n      requestBody:\n        description: a structured query describing the data being asked for\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GeekGameQuery'\n      responses:\n        '200':\n          description: game data returned, according to the schema requested\n          content:\n            application/json:\n              schema:\n               oneOf:\n                  - $ref: '#/components/schemas/Collection'\n                  - $ref: '#/components/schemas/CollectionWithPlays'\n                  - $ref: '#/components/schemas/CollectionWithMonthlyPlays'\n  /rankings:\n    get:\n      tags:\n        - developer apikey\n      summary: get ranked games data\n      operationId: getRankingsGET\n      description: |\n        This API powers the rankings table.\n      responses:\n        '200':\n          description: ranked games returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RankingTableRow'\n    post:\n      tags:\n        - developer apikey dontuse\n      summary: get ranked games data\n      operationId: getRankingsPOST\n      description: |\n        Return ranked games data. This API is not yet in use. It is reserved for when I need a query object to specify\n        which games are to be returned and how they are to be ranked.\n      responses:\n        '200':\n          description: ranked games returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RankingTableRow'\n  /summary:\n    get:\n      tags:\n        - developer apikey\n      summary: get summary data for a geek\n      operationId: getGeekSummary\n      parameters:\n        - in: query\n          name: geek\n          schema:\n            type: string\n          required: true\n          description: the geek to retrieve data for\n          example: Friendless\n      responses:\n        '200':\n          description: geek summary data returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeekSummary'\n  /systemStats:\n    get:\n      tags:\n        - admin apikey\n      summary: get system stats\n      operationId: adminGatherSystemStats\n      description: |\n        Return stats about the performance of the system.\n        This is currently not restricted to admins, but will possibly become so in the future.\n        In any case it's boring stuff.\n      responses:\n        '200':\n          description: stats returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemStats'\n  /update:\n    post:\n      tags:\n        - developers nokey authenticated\n      summary: update user data\n      operationId: update\n      description: Save user config after it has been modified by the user.\n      requestBody:\n          description: the new user config\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserConfig'\n      responses:\n        '200':\n          description: user data saved\n  /users:\n    get:\n      tags:\n        - developers apikey\n      summary: get list of all users\n      operationId: getUserList\n      description: Get the list of BGG user names for all users in Extended Stats. This is not much use.\n      responses:\n        '200':\n          description: user names returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              example: '[\"Friendless\", \"melissa\", \"karlsen\"]'\n  /wartable:\n    get:\n      tags:\n        - developers apikey\n      summary: get data for the war table\n      operationId: getWarTable\n      description: Get the list of war table rows for all geeks.\n      responses:\n        '200':\n          description: war table data returned\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WarTableRow'\n              example:\n                geek: 1\n                geekName: 'Friendless'\n                totalPlays: 10234\n                distinctGames: 1312\n                top50: 40\n                sdj: 23\n                owned: 298\n                want: 4\n                wish: 7\n                trade: 26\n                prevOwned: 732\n                friendless: 1\n                cfm: 3.78\n                utilisation: 0.63\n                tens: 18\n                zeros: 42\n                ext100: 56\n                hindex: 17\n                preordered: 0\n\ncomponents: \n  schemas: \n    BuddySet:\n      type: object\n      required:\n        - name\n        - buddies\n      properties:\n        name:\n          type: string\n          example: 'gaming group'\n          description: the name of the buddy set as specified by the user\n        buddies:\n          type: array\n          description: BGG user names of the users in the set\n          items:\n            type: string\n          example:\n            - 'Friendless'\n            - 'jmdsplotter'\n            - 'tallboy'\n    Collection:\n      type: object\n      required:\n        - collection\n        - games\n      properties:\n        collection:\n          type: array\n          items:\n            $ref: '#/components/schemas/GeekGame'\n        games:\n          type: array\n          items:\n            $ref: '#/components/schemas/GameData'\n        metadata:\n          $ref: '#/components/schemas/SelectorMetadataSet'\n        extra:\n          type: array\n          items:\n            type: integer\n    CollectionWithPlays:\n      type: object\n      required:\n        - collection\n        - games\n        - plays\n        - lastYearPlays\n      properties:\n        collection:\n          type: array\n          items:\n            $ref: '#/components/schemas/GeekGame'\n        games:\n          type: array\n          items:\n            $ref: '#/components/schemas/GameData'\n        metadata:\n          $ref: '#/components/schemas/SelectorMetadataSet'\n        extra:\n          type: array\n          items:\n            type: integer\n        plays:\n          type: array\n          items:\n            $ref: '#/components/schemas/GamePlays'\n        lastYearPlays:\n          type: array\n          items:\n            $ref: '#/components/schemas/GamePlays'\n    CollectionWithMonthlyPlays:\n      type: object\n      required:\n        - collection\n        - games\n      properties:\n        collection:\n          type: array\n          items:\n            $ref: '#/components/schemas/GeekGame'\n        games:\n          type: array\n          items:\n            $ref: '#/components/schemas/GameData'\n        metadata:\n          $ref: '#/components/schemas/SelectorMetadataSet'\n        extra:\n          type: array\n          items:\n            type: integer\n        plays:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonthlyPlays'\n        counts:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonthlyPlayCount'\n    Decoded:\n      type: object\n      required:\n        - nickname\n        - sub\n      properties:\n        nickname:\n          type: string\n          example: friendless\n          description: the user's login name from auth0\n        sub:\n          type: string\n          example: 'ABC123'\n          description: the user's unique identity from auth0\n    FAQCount:\n      type: object\n      description: The number of views of this question in the previous corresponding time periods.\n      required:\n        - day\n        - week\n        - month\n        - year\n        - ever\n      properties:\n        day:\n          type: integer\n        week:\n          type: integer\n        month:\n          type: integer\n        year:\n          type: integer\n        ever:\n          type: integer\n      example:\n        day: 1\n        week: 2\n        month: 3\n        year: 4\n        ever: 5\n    GameData:\n      type: object\n      required:\n        - bggid\n        - name\n        - bggRating\n        - bggRanking\n        - yearPublished\n        - minPlayers\n        - maxPlayers\n        - playTime\n        - subdomain\n        - weight\n        - isExpansion\n      properties:\n        bggid:\n          type: integer\n        name:\n          type: string\n        bggRating:\n          type: number\n        bggRanking:\n          type: integer\n        yearPublished:\n          type: integer\n        minPlayers:\n          type: integer\n        maxPlayers:\n          type: integer\n        playTime:\n          type: integer\n        subdomain:\n          type: string\n        weight:\n          type: number\n        isExpansion:\n          type: boolean\n    GamePlays:\n      type: object\n      required:\n        - game\n        - plays\n        - expansion\n        - distinctYears\n        - distinctMonths\n      properties:\n        game:\n          type: integer\n        plays:\n          type: integer\n        expansion:\n          type: boolean\n        firstPlay:\n          type: integer\n          description: date of first play of this game\n          example: 20130902\n        lastPlay:\n          type: integer\n          description: date of last play of this game\n          example: 20180112\n        distinctYears:\n          type: integer\n        distinctMonths:\n          type: integer\n    GeekGame:\n      type: object\n      description: relationship between a geek and a game\n      required:\n        - bggid\n        - rating\n        - owned\n        - wantToBuy\n        - wantToPlay\n        - preordered\n        - prevOwned\n      properties:\n        bggid:\n          type: integer\n          description: BGG ID for the game\n        rating:\n          type: number\n          description: the geek's rating for the game\n        owned:\n          type: boolean\n        wantToBuy:\n          type: boolean\n        wantToPlay:\n          type: boolean\n        preordered:\n          type: boolean\n        prevOwned:\n          type: boolean\n    GeekGameQuery:\n      type: object\n      required:\n        - geek\n        - query\n        - format\n        - vars\n      properties:\n        geek:\n          type: string\n          description: the primary geek for this collection, known as \"ME\"\n        geeks:\n          type: array\n          description: other geeks involved in this query\n          items:\n            type: string\n        query:\n          type: string\n          description: the selector for this query\n        extra:\n          type: string\n        format:\n          type: string\n          enum: [Collection, CollectionWithPlays, CollectionWithMonthlyPlays]\n          description: The JavaScript interface for the data to be returned. Use this to specify what data you want.\n        vars:\n          type: object\n          description: other parameters to the selector (not yet used)\n          properties:\n            THEM:\n              type: string\n            YEAR:\n              type: integer\n            RATING:\n              type: integer\n            MONTH:\n              type: integer\n    GeekSummary:\n      type: object\n      required:\n        - rated\n        - average\n        - monthsPlayed\n      properties:\n        warData:\n          $ref: '#/components/schemas/WarTableRow'\n        rated:\n          type: integer\n        average:\n          type: number\n        monthsPlayed:\n          type: integer\n        error:\n          type: string\n        geekId:\n          type: integer\n    MonthlyPlayCount:\n      type: object\n      required:\n        - year\n        - month\n        - count\n      properties:\n        year:\n          type: integer\n          description: the year of the month that the data is for\n        month:\n          type: integer\n          description: the month that the data is for\n        count:\n          type: integer\n          description: the number of dates in that month for which plays were recorded\n    MonthlyPlays:\n      type: object\n      required:\n        - year\n        - month\n        - game\n        - expansion\n        - quantity\n      properties:\n        year:\n          type: integer\n          description: the year of the month that the data is for\n        month:\n          type: integer\n          description: the month that the data is for\n        game:\n          type: integer\n          description: the BGG ID for the game\n        expansion:\n          type: boolean\n        quantity:\n          type: integer\n          description: how many times the game was played\n    MultiGeekPlays:\n      type: object\n      required:\n        - geeks\n        - plays\n      properties:\n        geeks:\n          description: the geeks who were asked for and actually found\n          type: array\n          items:\n            type: string\n        plays:\n          description: Keys are geek names.\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/PlaysWithDate'\n        collection:\n          description: relevant geekgames\n          type: array\n          items:\n            $ref: '#/components/schemas/GeekGame'\n        games:\n          description: data for games in this result\n          type: array\n          items:\n            $ref: '#/components/schemas/GameData'\n        metadata:\n          $ref: '#/components/schemas/SelectorMetadataSet'\n        extra:\n          type: array\n          items:\n            type: integer\n    NewsItem:\n      type: object\n      required:\n        - id\n        - date\n        - html\n      properties:\n        id:\n          type: integer\n          description: primary key for the news item in the database\n        date:\n          type: string\n          description: the date the news item was added\n        html:\n          type: string\n          description: HTML content of the news item\n      example:\n        id: 8\n        date: '14 April 2019'\n        html: 'Defined the Swagger specification version 1.0.0!'\n    PersonalData:\n      type: object\n      properties:\n        userData:\n          $ref: '#/components/schemas/UserData'\n        allData:\n          type: object\n          description: a lump of JSON data with no specified schema - it is not intended that this data be used\n          example:\n            name: 'Friendless'\n        error:\n          type: string\n          description: description of what went wrong if the personal data could not be retrieved\n    Plays:\n      type: object\n      required:\n        - game\n        - quantity\n      properties:\n        geek:\n          type: string\n          description: included only if there is ambiguity\n        game:\n          type: integer\n          description: BGG ID of the game that was played\n        expansions:\n          type: array\n          items:\n            type: integer\n          description: BGG IDs of any expansions that were used. May be omitted if empty.\n        quantity:\n          type: integer\n          description: the number of plays\n      example:\n        geek: Friendless\n        quantity: 1\n        game: 42\n    PlaysQuery:\n      type: object\n      required:\n        - geek\n      properties:\n        geek:\n          description: The sole geek data is being requested for. This may be removed in favour of using geeks.\n          type: string\n        geeks:\n          description: The geeks that data is being requested for.\n          type: array\n          items:\n            type: string\n        year:\n          description: If present, restrict to plays from this year.\n          type: integer\n        month:\n          description: If present, restrict to plays from this month.\n          type: integer\n        date:\n          description: If present, restrict to plays from this date.\n          type: integer\n        filter:\n          description: As yet unused. Will apply further conditions on the search.\n          type: string\n    PlaysWithDate:\n      type: object\n      required:\n        - game\n        - quantity\n        - year\n        - month\n        - date\n      properties:\n        geek:\n          description: The geek who played the play. Will be populated if required to disambiguate.\n          type: string\n        game:\n          description: BGG ID of the base game that was played.\n          type: integer\n        expansions:\n          description: BGG IDs of expansions that were used.\n          type: array\n          items:\n            type: integer\n        quantity:\n          description: How many times the game was played.\n          type: integer\n        year:\n          description: The year in which the play took place.\n          type: integer\n        month:\n          description: The month in which the play took place.\n          type: integer\n        date:\n          description: The date on which the play took place.\n          type: integer\n    RankingTableRow:\n      type: object\n      required:\n        - game\n        - game_name\n        - total_ratings\n        - num_ratings\n        - bgg_ranking\n        - bgg_rating\n        - normalised_ranking\n        - total_plays\n        - ranking\n      properties:\n        game:\n          description: the game's BGG number\n          type: integer\n        game_name:\n          description: the game's name\n          type: string\n        total_ratings:\n          description: the total of ratings for this game in Extended Stats - this is the score used for the ranking value\n          type: integer\n        num_ratings:\n          description: the number of geeks rating this game in Extended Stats\n          type: integer\n        bgg_ranking:\n          description: a recent ranking of the game on BGG\n          type: integer\n        bgg_rating:\n          type: number\n        normalised_ranking:\n          description: the game's ranking by the Extended Stats normalised method\n          type: integer\n        total_plays:\n          type: integer\n        ranking:\n          description: the game's ranking by the Extended Stats method\n          type: integer\n    SelectorMetadata:\n      type: object\n      description: Metadata related to a game based on the selector that was used to select it.\n      required:\n        - game\n      properties:\n        game:\n          type: integer\n        colour:\n          description: A colour that was assigned to this game by the selector.\n          type: string\n        owner:\n          description: The owner of this game which caused it to be selected.\n          type: string\n        player:\n          description: The player of this game which caused it to be selected.\n          type: string\n        rater:\n          description: The rater of this game which caused it to be selected.\n          type: string\n    SelectorMetadataSet:\n      type: object\n      description: Keys are BGG game IDs, values are SelectorMetadata.\n    SystemStats:\n      type: object\n      required:\n        - userRows\n        - gameRows\n        - geekGamesRows\n        - expansionRows\n        - mechanics\n        - categories\n        - gameMechanics\n        - gameCategories\n        - notGames\n        - fileRows\n        - ggForZero\n        - distinctGGOwners\n        - playsRows\n        - normalisedPlaysRows\n      properties:\n        userRows:\n          type: integer\n        gameRows:\n          type: integer\n        geekGamesRows:\n          type: integer\n        expansionRows:\n          type: integer\n        mechanics:\n          type: integer\n        categories:\n          type: integer\n        gameMechanics:\n          type: integer\n        gameCategories:\n          type: integer\n        notGames:\n          type: integer\n        fileRows:\n          type: array\n          items:\n            $ref: '#/components/schemas/TypeCount'\n        ggForZero:\n          type: integer\n        distinctGGOwners:\n          type: integer\n        playsRows:\n          type: integer\n        normalisedPlaysRows:\n          type: integer\n    TypeCount:\n      type: object\n      required:\n        - type\n        - existing\n        - waiting\n        - unprocessed\n      properties:\n        type:\n          type: string\n        existing:\n          type: integer\n        waiting:\n          type: integer\n        unprocessed:\n          type: integer\n    UserConfig:\n      type: object\n      required:\n        - usernames\n        - buddies\n      properties:\n        usernames:\n          type: array\n          description: the user's favourite user names on BGG\n          items:\n            type: string\n          example:\n            - Friendless\n            - Scrabblette\n            - harley22\n        buddies:\n          type: array\n          description: the user's defined buddy groups\n          items:\n            $ref: '#/components/schemas/BuddySet'\n          example:\n            - name: 'Critical Mass'\n              buddies:\n                - 'Critical Mass'\n                - 'cyberkev63'\n                - 'OzVortex'\n                - 'Ozgamer'\n            - name: 'IWG'\n              buddies:\n                - 'trif'\n                - 'ferrao'\n                - 'Simonocles'\n                - 'ozjesting'\n    UserData:\n      type: object\n      properties:\n        first:\n          type: boolean\n          example: false\n        config:\n          $ref: '#/components/schemas/UserConfig'\n        jwt:\n          $ref: '#/components/schemas/Decoded'\n    WarTableRow:\n      type: object\n      description: |\n        A row of the war table in the database. This table is populated to support the war table in the UI, and some of\n        these values are not otherwise available.\n      required:\n        - geek\n        - geekName\n        - totalPlays\n        - distinctGames\n        - top50\n        - sdj\n        - owned\n        - want\n        - wish\n        - trade\n        - prevOwned\n        - friendless\n        - cfm\n        - utilisation\n        - tens\n        - zeros\n        - ext100\n        - hindex\n        - preordered\n      properties:\n        geek:\n          type: integer\n          description: primary key for the geek in Extended Stats\n        geekName:\n          type: string\n          description: BGG user name for this geek.\n        totalPlays:\n          type: integer\n        distinctGames:\n          type: integer\n        top50:\n          type: integer\n        sdj:\n          type: integer\n        owned:\n          type: integer\n        want:\n          type: integer\n        wish:\n          type: integer\n        trade:\n          type: integer\n        prevOwned:\n          type: integer\n        friendless:\n          type: integer\n        cfm:\n          type: number\n        utilisation:\n          type: number\n        tens:\n          type: integer\n        zeros:\n          type: integer\n        ext100:\n          type: integer\n        hindex:\n          type: integer\n        preordered:\n          type: integer\n",
			"canonicalURL": "/github.com/DrFriendless/ExtendedStatsServerless@319032e206acbb841b189334d675da8146afeeda/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/DrFriendless/ExtendedStatsServerless/blob/319032e206acbb841b189334d675da8146afeeda/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}