{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Reckue/post-service"
		},
		"file": {
			"name": "post.yml",
			"size": 0,
			"path": "src/main/resources/openapi/post.yml",
			"byteSize": 33256,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.2\n  title: Post Service\n  description: Service for posting articles about different programming languages.\n  contact:\n    name: Daria Smirnova\n    email: smirnova@reckue.com\n    url: https://github.com/daria80\nservers:\n  - url: https://reckue.com/api/v1\n\n# Paths\npaths:\n  # Paths :: Post\n  /posts:\n    get:\n      summary: List all posts.\n      operationId: getPosts\n      tags:\n        - Posts\n      parameters:\n        - name: limit\n          in: query\n          description: Limit of posts on page. By default, 10.\n          required: false\n          example: 10\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Offset posts on page. By default, 0.\n          required: false\n          example: 0\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Sorting posts by parameter. By default, sorts by id.\n          required: false\n          example: id\n          schema:\n            type: string\n        - name: desc\n          in: query\n          description: Flag to sorting posts by descending. By default, false.\n          required: false\n          example: false\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: '#/components/responses/PostListResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      summary: Create a new post.\n      operationId: createPost\n      tags:\n        - Posts\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Body of post request to create a new post.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n            example:\n              title: My first post\n              status: DRAFT\n              userId: 5f66514e27efbb73c2996c17\n              nodes:\n                - id: 3579626af2a44ee983a299fc65f7238f\n                  type: TEXT\n                  content:\n                    value: Hello World!\n              tags:\n                - name: Beginner\n      responses:\n        201:\n          $ref: '#/components/responses/PostResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /posts/{id}:\n    put:\n      summary: Update the post by id.\n      operationId: updatePost\n      tags:\n        - Posts\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Post id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      requestBody:\n        description: Body of post request to update the post by id.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostRequest'\n            example:\n              title: My first post\n              status: DRAFT\n              userId: 5f66514e27efbb73c2996c17\n              nodes:\n                - id: 3579626af2a44ee983a299fc65f7238f\n                  type: TEXT\n                  content:\n                    value: Hello, World!\n              tags:\n                - name: Beginner\n      responses:\n        201:\n          $ref: '#/components/responses/PostResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      summary: Get the post by id.\n      operationId: getPostById\n      tags:\n        - Posts\n      parameters:\n        - name: id\n          in: path\n          description: Post id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/PostResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      summary: Delete the post by id.\n      operationId: deletePostById\n      tags:\n        - Posts\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Post id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          description: 200 OK\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  # Paths :: Nodes\n  /nodes:\n    get:\n      summary: List of all nodes.\n      operationId: getNodes\n      tags:\n        - Nodes\n      parameters:\n        - name: limit\n          in: query\n          description: Limit of nodes on page. By default, 10.\n          required: false\n          example: 10\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Offset nodes on page. By default, 0.\n          required: false\n          example: 0\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Sorting nodes by parameter. By default, sorts by id.\n          required: false\n          example: id\n          schema:\n            type: string\n        - name: desc\n          in: query\n          description: Flag to sorting nodes by descending. By default, false.\n          required: false\n          example: false\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: '#/components/responses/NodesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      summary: Create a new node.\n      operationId: createNode\n      tags:\n        - Nodes\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Body of post request to create a new node.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeRequest'\n      responses:\n        201:\n          $ref: '#/components/responses/NodeResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      summary: Update the node by id.\n      operationId: updateNode\n      tags:\n        - Nodes\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Body of post request to update the node by id.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/NodeResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /nodes/{id}:\n    get:\n      summary: Get the node by id.\n      operationId: getNodeById\n      tags:\n        - Nodes\n      parameters:\n        - name: id\n          in: path\n          description: Node id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/NodeResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      summary: Delete the node by id.\n      operationId: deleteNodeById\n      tags:\n        - Nodes\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Node id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          description: 200 OK\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/PostNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  # Paths :: Tags\n  /tags:\n    get:\n      summary: List all tags.\n      operationId: getAllTags\n      tags:\n        - Tags\n      parameters:\n        - name: limit\n          in: query\n          description: Limit of tags on page. By default, 10.\n          required: false\n          example: 10\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Offset tags on page. By default, 0.\n          required: false\n          example: 0\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Sorting tags by parameter. By default, sorts by id.\n          required: false\n          example: id\n          schema:\n            type: string\n        - name: desc\n          in: query\n          description: Flag to sorting tags by descending. By default, false.\n          required: false\n          example: false\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: '#/components/responses/TagListResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/TagNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      summary: Create a new tag.\n      operationId: createTag\n      tags:\n        - Tags\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Body of tag request to create a new tag.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagRequest'\n            example:\n              name: My tag\n      responses:\n        201:\n          $ref: '#/components/responses/TagResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/TagNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      summary: Update the tag by id.\n      operationId: updateTag\n      tags:\n        - Tags\n      security:\n        - bearerAuth: [ ]\n      requestBody:\n        description: Body of tag request to update the tag by id.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagRequest'\n            example:\n              name: My tag\n      responses:\n        201:\n          $ref: '#/components/responses/TagResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/TagNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /tags/{id}:\n    get:\n      summary: Get the tag by id.\n      operationId: getTagById\n      tags:\n        - Tags\n      parameters:\n        - name: id\n          in: path\n          description: Tag id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/TagResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/TagNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      summary: Delete the tag by id.\n      operationId: deleteTagById\n      tags:\n        - Tags\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Tag id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          description: 200 OK\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/TagNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  # Paths :: Comments\n  /comments:\n    get:\n      summary: List all comments.\n      operationId: getAllComments\n      tags:\n        - Comments\n      parameters:\n        - name: limit\n          in: query\n          description: Limit of comments on page. By default, 10.\n          required: false\n          example: 10\n          schema:\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Offset comments on page. By default, 0.\n          required: false\n          example: 0\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Sorting comments by parameter. By default, sorts by id.\n          required: false\n          example: id\n          schema:\n            type: string\n        - name: desc\n          in: query\n          description: Flag to sorting comments by descending. By default, false.\n          required: false\n          example: false\n          schema:\n            type: boolean\n      responses:\n        200:\n          $ref: '#/components/responses/CommentListResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/CommentNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      summary: Create a new comment.\n      operationId: createComment\n      tags:\n        - Comments\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Body of comment request to create a new comment.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentRequest'\n      responses:\n        201:\n          $ref: '#/components/responses/CommentResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/CommentNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /comments/{id}:\n    put:\n      summary: Update the comment by id.\n      operationId: updateComment\n      tags:\n        - Comments\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Comment id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      requestBody:\n        description: Body of comment request to update the comment by id.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentRequest'\n      responses:\n        200:\n          $ref: '#/components/responses/CommentResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/CommentNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      summary: Get the comment by id.\n      operationId: getCommentById\n      tags:\n        - Comments\n      parameters:\n        - name: id\n          in: path\n          description: Comment id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/CommentResponse'\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/CommentNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      summary: Delete the comment by id.\n      operationId: deleteCommentById\n      tags:\n        - Comments\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Comment id.\n          required: true\n          example: 5f66a68227efbb73c2996c1a\n          schema:\n            type: string\n      responses:\n        200:\n          description: 200 OK\n        400:\n          $ref: '#/components/responses/BadRequestError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          $ref: '#/components/responses/CommentNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n# Components\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  requestBodies:\n    PostRequest:\n      description: Post request.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/PostRequest'\n    NodeRequest:\n      description: Node request.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/NodeRequest'\n    NodeEntry:\n      description: Node entry.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/NodeEntry'\n\n  # Components -\u003e Responses\n  responses:\n    InternalServerError:\n      description: Internal Server Error.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/InternalServerError'\n    BadRequestError:\n      description: Bad Request.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/BadRequestError'\n    UnauthorizedError:\n      description: Unauthorized.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/UnauthorizedError'\n    PostNotFoundError:\n      description: Not Found.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/PostNotFoundError'\n    PostResponse:\n      description: List of posts.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/PostResponse'\n    PostListResponse:\n      description: List of posts.\n      content:\n        'application/json':\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/PostResponse'\n    NodeResponse:\n      description: Node response.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/NodeResponse'\n    NodesResponse:\n      description: List of nodes.\n      content:\n        'application/json':\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/NodeResponse'\n    TagResponse:\n      description: Tag response.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/TagResponse'\n    TagListResponse:\n      description: List of tags.\n      content:\n        'application/json':\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/TagResponse'\n    TagNotFoundError:\n      description: Tag not found error.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/TagNotFoundError'\n    CommentResponse:\n      description: Comment response.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/CommentResponse'\n    CommentListResponse:\n      description: List of comments.\n      content:\n        'application/json':\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/CommentResponse'\n    CommentNotFoundError:\n      description: Comment not found error.\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/CommentNotFoundError'\n\n  # Components -\u003e Schemas\n  schemas:\n    # Schemas :: Errors\n    InternalServerError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Internal Server Error\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1000\n        message:\n          type: string\n          description: A message of error response.\n          example: Internal Server Error\n    BadRequestError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Bad Request\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1001\n        message:\n          type: string\n          description: A message of error response.\n          example: The message cannot be read.\n    UnauthorizedError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Unauthorized\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1006\n        message:\n          type: string\n          description: A message of error response.\n          example: Unauthorized.\n    PostNotFoundError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Post Not Found Error\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1002\n        message:\n          type: string\n          description: A message of error response.\n          example: The post by id '5f3193eee810fe1a026e7f84' is not found.\n    TagNotFoundError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Tag Not Found Error\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1003 # FIXME: Please, fix it.\n        message:\n          type: string\n          description: A message of error response.\n          example: The tag by id '5f3193eee810fe1a026e7f84' is not found.\n    CommentNotFoundError:\n      type: object\n      properties:\n        title:\n          type: string\n          description: A title of error response.\n          example: Comment Not Found Error\n        code:\n          type: string\n          description: A code of error response.\n          example: RP-1003 # FIXME: Please, fix it.\n        message:\n          type: string\n          description: A message of error response.\n          example: The Comment by id '5f3193eee810fe1a026e7f84' is not found.\n\n    # Schemas :: Requests\n    PostRequest:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Post id.\n          example: 5f66a68227efbb73c2996c1a\n        title:\n          type: string\n          description: Post title.\n          example: My first post\n        status:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/PostStatusType'\n          description: Current post status.\n          example: DRAFT\n        userId:\n          type: string\n          description: User id of the post.\n          example: 5f66514e27efbb73c2996c17\n        nodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeRequest'\n          description: Node list of the post.\n        tags:\n          type: array\n          items:\n            type: string\n          description: Tag list of the post.\n\n    TagRequest:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Tag id.\n          example: 5f66a68227efbb73c2996c1a\n        name:\n          type: string\n          description: Tag name.\n          example: My first tag\n\n    CommentRequest:\n      type: object\n      properties:\n        userId:\n          type: string\n          description: User id.\n          example: 5f66a68227efbb73c2996c1a\n        postId:\n          type: string\n          description: Post id.\n          example: 5f66a68227efbb73c2996c1a\n        commentId:\n          type: string\n          description: Comment id.\n          example: 5f66a68227efbb73c2996c1a\n        nodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeRequest'\n          description: Node list of the comment.\n\n    NodeEntry:\n      type: object\n      description: Node parent request.\n      discriminator:\n        propertyName: type\n        mapping:\n          TEXT: '#/components/schemas/TextNode'\n          IMAGE: '#/components/schemas/ImageNode'\n          VIDEO: '#/components/schemas/VideoNode'\n          AUDIO: '#/components/schemas/AudioNode'\n          POLL: '#/components/schemas/PollNode'\n          LIST: '#/components/schemas/ListNode'\n          CODE: '#/components/schemas/CodeNode'\n\n    NodeRequest:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Node id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        type:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/NodeType'\n          description: Parent type.\n          example: TEXT\n        content:\n          $ref: '#/components/schemas/NodeEntry'\n        userId:\n          type: string\n          description: User id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        status:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/StatusType'\n          description: Current node status.\n          example: ACTIVE\n\n    # Schemas :: Responses\n    PostResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Post id.\n          example: 5f66a68227efbb73c2996c1a\n        title:\n          type: string\n          description: Post title.\n          example: My first post\n        status:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/PostStatusType'\n          description: Current post status.\n          example: DRAFT\n        userId:\n          type: string\n          description: User id of the post.\n          example: 5f66514e27efbb73c2996c17\n        nodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeResponse'\n          description: Node list of the post.\n        tags:\n          type: array\n          items:\n            type: string\n          description: Tag list of the post.\n        createdDate:\n          type: integer\n          format: int64\n          description: Created date of the post.\n          example: 1600541486196\n        modificationDate:\n          type: integer\n          format: int64\n          description: Modification date of the post.\n          example: 1600541486196\n\n    NodeResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Node id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        status:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/StatusType'\n          description: Current node status.\n          example: ACTIVE\n        type:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/NodeType'\n          description: Type of node.\n          example: TEXT\n        content:\n          $ref: '#/components/schemas/NodeEntry'\n        userId:\n          type: string\n          description: User id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        createdDate:\n          type: integer\n          format: int64\n          description: Created date of the post.\n          example: 1600541486196\n        modificationDate:\n          type: integer\n          format: int64\n          description: Modification date of the post.\n          example: 1600541486196\n\n    TextNode:\n      type: object\n      properties:\n        content:\n          type: string\n          description: Text node content.\n          example: My text node\n    ImageNode:\n      type: object\n      properties:\n        imageUrl:\n          type: string\n          description: Image node url.\n          example: http://reckue.com/files/3579626af2a44ee983a299fc65f7238f.png\n    VideoNode:\n      type: object\n      properties:\n        imageUrl:\n          type: string\n          description: Video node url.\n          example: http://reckue.com/files/3579626af2a44ee983a299fc65f7238f.mp4\n    AudioNode:\n      type: object\n      properties:\n        imageUrl:\n          type: string\n          description: Audio node url.\n          example: http://reckue.com/files/3579626af2a44ee983a299fc65f7238f.mp3\n    PollNode:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Poll node title.\n          example: My first poll\n        items:\n          type: array\n          items:\n            type: string\n          description: Poll node items.\n          example: [Aswer 1, Answer 2, Answer 3]\n    ListNode:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n          description: List of items.\n          example: [Item 1, Item 2, Item 3]\n    CodeNode:\n      type: object\n      properties:\n        langType:\n          type: string\n          allOf:\n            - $ref: '#/components/schemas/LanguageType'\n          description: Code node language type.\n          example: JAVA\n        content:\n          type: string\n          description: Code node content.\n          example: 'class Main {\\npublic static void main(String[] args) {\\nSystem.out.println(\"example\");}\\n}\\n'\n\n    CommentResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Comment id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        userId:\n          type: string\n          description: User id.\n          example: 5f66a68227efbb73c2996c1a\n        postId:\n          type: string\n          description: Post id.\n          example: 5f66a68227efbb73c2996c1a\n        commentId:\n          type: string\n          description: Comment id.\n          example: 5f66a68227efbb73c2996c1a\n        nodes:\n          type: array\n          items:\n            $ref: '#/components/schemas/NodeResponse'\n          description: Node list of the comment.\n\n    TagResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Tag id.\n          example: 3579626af2a44ee983a299fc65f7238f\n        name:\n          type: string\n          description: Tag name.\n          example: java\n\n    # Schemas :: Enums\n    StatusType:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n        - BANNED\n        - MODERATED\n    PostStatusType:\n      type: string\n      enum:\n        - DRAFT\n        - PUBLISHED\n        - PENDING\n        - MODERATED\n        - DELETED\n        - BANNED\n    NodeType:\n      type: string\n      enum:\n        - TEXT\n        - IMAGE\n        - VIDEO\n        - CODE\n        - LIST\n        - AUDIO\n        - POLL\n    LanguageType:\n      type: string\n      enum:\n        - NONE\n        - JAVA\n        - PYTHON\n        - JAVASCRIPT\n        - C\n        - KOTLIN\n        - BASH\n        - BAT\n",
			"canonicalURL": "/github.com/Reckue/post-service@974202525fb467f049add5ecd736940edc62f44f/-/blob/src/main/resources/openapi/post.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Reckue/post-service/blob/974202525fb467f049add5ecd736940edc62f44f/src/main/resources/openapi/post.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}