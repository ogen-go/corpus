{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/splunk/splunk-cloud-sdk-python"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "splunk_sdk/identity/v3alpha1/openapi.yaml",
			"byteSize": 84577,
			"content": "components:\n  parameters:\n    acceptTos:\n      description: 1 or 0 for accepting terms of service\n      in: query\n      name: accept_tos\n      required: false\n      schema:\n        type: string\n    app:\n      description: The app name.\n      in: path\n      name: app\n      required: true\n      schema:\n        maxLength: 36\n        minLength: 4\n        type: string\n    appClientId:\n      description: ID of the app client to authorize\n      in: path\n      name: app_client_id\n      required: true\n      schema:\n        type: string\n    appId:\n      description: The Okta app Id.\n      in: path\n      name: app_id\n      required: true\n      schema:\n        type: string\n    clientId:\n      description: ID of the client to authorize\n      in: query\n      name: client_id\n      required: false\n      schema:\n        type: string\n    codeChallenge:\n      description: PKCE code challenge\n      in: query\n      name: code_challenge\n      required: false\n      schema:\n        type: string\n    codeChallengeMethod:\n      description: PKCE code challenge method\n      in: query\n      name: code_challenge_method\n      required: false\n      schema:\n        type: string\n    createdBy:\n      description: The principal name.\n      in: query\n      name: created_by\n      required: false\n      schema:\n        type: string\n    domain:\n      description: The domain name identifier.\n      in: path\n      name: domain\n      required: true\n      schema:\n        type: string\n    email:\n      description: User email address for the authorization request\n      in: query\n      name: email\n      required: false\n      schema:\n        maxLength: 320\n        pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\n        type: string\n    encodeState:\n      description: 1, true or 0, false for encoding state\n      in: query\n      name: encode_state\n      required: false\n      schema:\n        maxLength: 5\n        type: string\n    group:\n      description: The group name.\n      in: path\n      name: group\n      required: true\n      schema:\n        type: string\n      x-case-insensitive: true\n    idp:\n      description: The Identity Provider name.\n      in: path\n      name: idp\n      required: true\n      schema:\n        type: string\n    include:\n      description: Include additional information to return when validating tenant\n        membership. Valid parameters [tenant, principal]\n      in: query\n      name: include\n      required: false\n      schema:\n        items:\n          enum:\n          - tenant\n          - principal\n          type: string\n        maxItems: 2\n        minItems: 0\n        type: array\n        uniqueItems: true\n    inviteId:\n      description: The invite ID.\n      in: query\n      name: inviteID\n      required: false\n      schema:\n        type: string\n    keyId:\n      description: Identifier of a public key.\n      in: path\n      name: keyId\n      required: true\n      schema:\n        type: string\n    member:\n      description: The member name.\n      in: path\n      name: member\n      required: true\n      schema:\n        minLength: 2\n        type: string\n      x-case-insensitive: true\n    memberKind:\n      description: 'Kind of member, one of: [user, service_account, service]'\n      in: query\n      name: kind\n      required: false\n      schema:\n        enum:\n        - user\n        - service_account\n        - service\n        type: string\n    nonce:\n      description: Nonce to prevent replay attacks\n      in: query\n      name: nonce\n      required: false\n      schema:\n        type: string\n    orderBy:\n      description: The sorting order for returning list.\n      in: query\n      name: orderby\n      required: false\n      schema:\n        type: string\n    pageSize:\n      description: The maximize return items count of a list.\n      in: query\n      name: page_size\n      required: false\n      schema:\n        format: int32\n        maximum: 1000\n        minimum: 1\n        type: integer\n    pageToken:\n      description: The cursor to then next page.\n      in: query\n      name: page_token\n      required: false\n      schema:\n        type: string\n    permission:\n      description: The permission string.\n      in: path\n      name: permission\n      required: true\n      schema:\n        type: string\n      x-case-insensitive: true\n    principal:\n      description: The principal name.\n      in: path\n      name: principal\n      required: true\n      schema:\n        minLength: 2\n        type: string\n      x-case-insensitive: true\n    redirectUri:\n      description: URI for the callback\n      in: query\n      name: redirect_uri\n      required: false\n      schema:\n        type: string\n    responseMode:\n      description: Type of response, one of query, fragment, json\n      in: query\n      name: response_mode\n      required: false\n      schema:\n        type: string\n    responseType:\n      description: Type of authorization flow\n      in: query\n      name: response_type\n      required: false\n      schema:\n        type: string\n    role:\n      description: The role name.\n      in: path\n      name: role\n      required: true\n      schema:\n        minLength: 4\n        type: string\n      x-case-insensitive: true\n    samlClient:\n      description: The saml client name.\n      in: path\n      name: samlClient\n      required: true\n      schema:\n        maxLength: 32\n        minLength: 4\n        type: string\n    samlStateId:\n      description: The saml specific state identifier carried through authentication\n        flow\n      in: query\n      name: samlStateId\n      required: false\n      schema:\n        maxLength: 128\n        type: string\n    scope:\n      description: Scope of the authorization request\n      in: query\n      name: scope\n      required: false\n      schema:\n        type: string\n    sessionToken:\n      description: Obtained from authentication\n      in: query\n      name: session_token\n      required: false\n      schema:\n        type: string\n    state:\n      description: State between request and callback\n      in: query\n      name: state\n      required: false\n      schema:\n        type: string\n    tenant:\n      description: The tenant name.\n      in: path\n      name: tenant\n      required: true\n      schema:\n        maxLength: 36\n        minLength: 2\n        type: string\n    tenantName:\n      description: The tenant name.\n      in: path\n      name: tenantName\n      required: true\n      schema:\n        maxLength: 36\n        minLength: 2\n        type: string\n    tenantQuery:\n      description: Tenant for the authorization request\n      in: query\n      name: tenant\n      required: false\n      schema:\n        maxLength: 36\n        minLength: 2\n        type: string\n    userCode:\n      description: userCode\n      in: path\n      name: userCode\n      required: true\n      schema:\n        type: string\n    version:\n      description: The service API version.\n      in: path\n      name: version\n      required: true\n      schema:\n        enum:\n        - v2beta1\n        - v3alpha1\n        - v3\n        type: string\n    version2:\n      description: Service API v2beta1.\n      in: path\n      name: version2\n      required: true\n      schema:\n        enum:\n        - v2beta1\n        type: string\n  schemas:\n    AddGroupMemberAsAnAdminBody:\n      properties:\n        group:\n          type: string\n        member:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n      required:\n      - group\n      - member\n      type: object\n    AddGroupMemberBody:\n      properties:\n        name:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n      required:\n      - name\n      type: object\n    AddGroupRoleBody:\n      properties:\n        name:\n          minLength: 4\n          type: string\n          x-case-insensitive: true\n      required:\n      - name\n      type: object\n    AddInvisibleMemberBody:\n      properties:\n        expires_in:\n          description: The expiration time of the member in seconds.\n          format: int32\n          type: integer\n        name:\n          description: The name of the member to be added.\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n        reason:\n          description: The reason you are adding this member.\n          type: string\n      required:\n      - name\n      - reason\n      type: object\n    AddMemberBody:\n      properties:\n        name:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n      required:\n      - name\n      type: object\n    AddRolePermissionBody:\n      properties:\n        permission:\n          $ref: '#/components/schemas/PermissionString'\n      required:\n      - permission\n      type: object\n    App:\n      description: Represents an app registration\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        name:\n          type: string\n        principal:\n          nullable: true\n          type: string\n        redirectUris:\n          items:\n            type: string\n          nullable: true\n          type: array\n        tenant:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    AppList:\n      description: A list of app.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/App'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    Authn:\n      properties:\n        description:\n          description: Authentication description\n          type: string\n        requestId:\n          description: Request ID\n          maxLength: 36\n          type: string\n        sessionToken:\n          description: Session token\n          type: string\n        status:\n          description: Authentication status\n          type: string\n      type: object\n    AuthnCredentialsBody:\n      properties:\n        csrfToken:\n          description: CSRF token\n          type: string\n        password:\n          description: Password\n          type: string\n        username:\n          description: Username\n          type: string\n      required:\n      - username\n      - password\n      - csrfToken\n      type: object\n    ChangeSubscriptionBody:\n      properties:\n        appPermissions:\n          items:\n            minLength: 4\n            type: string\n            x-case-insensitive: true\n          type: array\n        userPermissions:\n          items:\n            minLength: 4\n            type: string\n            x-case-insensitive: true\n          type: array\n      required:\n      - appPermissions\n      - userPermissions\n      type: object\n    CreateAppBody:\n      properties:\n        name:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z][_.a-z0-9]*$\n          type: string\n        principal:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n        redirectUris:\n          items:\n            maxLength: 256\n            minLength: 8\n            type: string\n          maxItems: 100\n          type: array\n      required:\n      - name\n      - principal\n      type: object\n    CreateDomainBody:\n      properties:\n        id:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n        name:\n          maxLength: 253\n          pattern: ^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$\n          type: string\n      required:\n      - id\n      - name\n      type: object\n    CreateGroupBody:\n      properties:\n        name:\n          maxLength: 128\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n      required:\n      - name\n      type: object\n    CreateIdpBody:\n      properties:\n        description:\n          maxLength: 1024\n          type: string\n        federation_id:\n          maxLength: 256\n          type: string\n        name:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n        title:\n          maxLength: 256\n          type: string\n      required:\n      - name\n      - title\n      - federation_id\n      type: object\n    CreateIdpMappingBody:\n      properties:\n        idp:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n      required:\n      - idp\n      type: object\n    CreatePrincipalBody:\n      description: Payload when creating a principal\n      properties:\n        key:\n          $ref: '#/components/schemas/ECJwk'\n        kind:\n          $ref: '#/components/schemas/PrincipalKind'\n        name:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n      required:\n      - kind\n      type: object\n    CreateRoleBody:\n      properties:\n        name:\n          maxLength: 128\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n      required:\n      - name\n      type: object\n    CreateSamlClientBody:\n      properties:\n        allowedReplyUris:\n          items:\n            maxLength: 256\n            minLength: 8\n            type: string\n          maxItems: 512\n          type: array\n        description:\n          maxLength: 256\n          minLength: 2\n          type: string\n        displayName:\n          maxLength: 32\n          minLength: 4\n          type: string\n        logo:\n          maxLength: 256\n          minLength: 8\n          type: string\n        name:\n          maxLength: 32\n          minLength: 2\n          type: string\n        signOnUri:\n          maxLength: 256\n          minLength: 8\n          type: string\n      required:\n      - name\n      type: object\n    CreateSubscriptionBody:\n      properties:\n        app:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z][_.a-z0-9]*$\n          type: string\n        appPermissions:\n          items:\n            minLength: 4\n            type: string\n            x-case-insensitive: true\n          type: array\n        userPermissions:\n          items:\n            minLength: 4\n            type: string\n            x-case-insensitive: true\n          type: array\n      required:\n      - app\n      - appPermissions\n      - userPermissions\n      type: object\n    CreateTenantBody:\n      properties:\n        createdBy:\n          type: string\n        ecMetadata:\n          $ref: '#/components/schemas/EcMetadata'\n        name:\n          $ref: '#/components/schemas/TenantName'\n      required:\n      - name\n      type: object\n    CsrfToken:\n      properties:\n        csrf:\n          description: CSRF token\n          type: string\n        requestId:\n          description: Request ID\n          maxLength: 36\n          type: string\n      type: object\n    DecryptTokenBody:\n      properties:\n        token:\n          type: string\n      required:\n      - token\n      type: object\n    DecryptedToken:\n      description: A decrypted token\n      properties:\n        token:\n          type: string\n      required:\n      - token\n      type: object\n    DeviceAuthInfo:\n      properties:\n        device_code:\n          type: string\n        expires_in:\n          type: integer\n        interval:\n          type: integer\n        user_code:\n          type: string\n        verification_uri:\n          type: string\n      required:\n      - device_code\n      - user_code\n      - verification_uri\n      - expires_in\n      - interval\n      type: object\n    Domain:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n      type: object\n    DomainIdp:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        domain:\n          type: string\n        idp:\n          type: string\n      type: object\n    ECJwk:\n      properties:\n        alg:\n          enum:\n          - ES256\n          - ES384\n          - ES512\n          maxLength: 64\n          type: string\n        crv:\n          maxLength: 64\n          type: string\n        kid:\n          maxLength: 64\n          minLength: 3\n          pattern: ^[_\\-a-zA-Z0-9]*$\n          type: string\n        kty:\n          enum:\n          - EC\n          maxLength: 64\n          type: string\n        x:\n          maxLength: 4096\n          type: string\n        \"y\":\n          maxLength: 4096\n          type: string\n      type: object\n    ECJwks:\n      properties:\n        keys:\n          items:\n            $ref: '#/components/schemas/ECJwk'\n          maxItems: 10\n          type: array\n      type: object\n    EcMetadata:\n      properties:\n        stacks:\n          items:\n            $ref: '#/components/schemas/EcMetadataStack'\n          type: array\n      type: object\n    EcMetadataStack:\n      properties:\n        name:\n          type: string\n      type: object\n    Group:\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        memberCount:\n          nullable: true\n          type: integer\n        name:\n          type: string\n        roleCount:\n          nullable: true\n          type: integer\n        tenant:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    GroupList:\n      description: A list of group.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Group'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    GroupMember:\n      description: Represents a member that belongs to a group\n      properties:\n        addedAt:\n          format: date-time\n          type: string\n        addedBy:\n          type: string\n        group:\n          type: string\n        principal:\n          type: string\n        tenant:\n          type: string\n      required:\n      - tenant\n      - group\n      - principal\n      - addedAt\n      - addedBy\n      type: object\n    GroupMemberList:\n      description: A list of members belonging to a particular group.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/GroupMember'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    GroupRole:\n      description: Represents a role that is assigned to a group\n      properties:\n        addedAt:\n          format: date-time\n          type: string\n        addedBy:\n          type: string\n        group:\n          type: string\n        role:\n          type: string\n        tenant:\n          type: string\n      required:\n      - tenant\n      - group\n      - role\n      - addedAt\n      - addedBy\n      type: object\n    GroupRoleList:\n      description: A list of group role.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/GroupRole'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    IdentityProvider:\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        description:\n          nullable: true\n          type: string\n        federation_id:\n          nullable: true\n          type: string\n        name:\n          type: string\n        title:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    IdentityProviderBody:\n      properties:\n        config:\n          properties:\n            certificate:\n              type: string\n            email_attribute:\n              type: string\n            entity_descriptor:\n              maxLength: 1024\n              type: string\n            first_name_attribute:\n              type: string\n            last_name_attribute:\n              type: string\n            method:\n              enum:\n              - post\n              - redirect\n              type: string\n            single_sign_on_service_url:\n              type: string\n          required:\n          - entity_descriptor\n          - single_sign_on_service_url\n          - certificate\n          - method\n          - email_attribute\n          type: object\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        id:\n          type: string\n        kind:\n          enum:\n          - keycloak\n          - saml\n          type: string\n        title:\n          type: string\n      required:\n      - id\n      - title\n      - kind\n      - config\n      type: object\n    IdentityProviderConfigBody:\n      properties:\n        config:\n          properties:\n            certificate:\n              type: string\n            email_attribute:\n              type: string\n            entity_descriptor:\n              maxLength: 1024\n              type: string\n            first_name_attribute:\n              type: string\n            last_name_attribute:\n              type: string\n            method:\n              enum:\n              - post\n              - redirect\n              type: string\n            single_sign_on_service_url:\n              type: string\n          type: object\n        description:\n          maxLength: 1024\n          type: string\n        enabled:\n          type: boolean\n        id:\n          maxLength: 36\n          minLength: 4\n          pattern: ^[_a-z]([.]?[_a-z0-9])*$\n          type: string\n        title:\n          maxLength: 256\n          type: string\n      required:\n      - id\n      - config\n      type: object\n    IdentityProviderList:\n      description: A list of identity provider.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/IdentityProvider'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    IdentityProviders:\n      items:\n        $ref: '#/components/schemas/IdentityProvider'\n      type: array\n    ImmutableApp:\n      properties:\n        appPermissions:\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        principal:\n          type: string\n        systemApp:\n          type: boolean\n        userPermissions:\n          items:\n            type: string\n          type: array\n      type: object\n    ImmutableApps:\n      description: A list of Immutable Application.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ImmutableApp'\n          type: array\n      required:\n      - items\n    Jwk:\n      properties:\n        alg:\n          maxLength: 64\n          type: string\n        e:\n          maxLength: 64\n          type: string\n        kid:\n          maxLength: 1024\n          type: string\n        kty:\n          maxLength: 64\n          type: string\n        \"n\":\n          maxLength: 4096\n          type: string\n        use:\n          maxLength: 64\n          type: string\n      type: object\n    Jwks:\n      properties:\n        keys:\n          items:\n            $ref: '#/components/schemas/Jwk'\n          maxItems: 10\n          type: array\n      type: object\n    Key:\n      properties:\n        clientId:\n          nullable: true\n          type: string\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        expiresAt:\n          format: date-time\n          nullable: true\n          type: string\n        id:\n          nullable: true\n          type: string\n        name:\n          type: string\n        permissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n        rotatedAt:\n          format: date-time\n          nullable: true\n          type: string\n        tenant:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    Member:\n      description: Represents a member that belongs to a tenant.\n      properties:\n        addedAt:\n          description: When the principal was added to the tenant.\n          format: date-time\n          nullable: true\n          type: string\n        addedBy:\n          nullable: true\n          type: string\n        expiresAt:\n          format: date-time\n          nullable: true\n          type: string\n        groupCount:\n          nullable: true\n          type: integer\n        name:\n          type: string\n        profile:\n          $ref: '#/components/schemas/PrincipalProfile'\n        tenant:\n          nullable: true\n          type: string\n        visible:\n          nullable: true\n          type: boolean\n      required:\n      - name\n      type: object\n    MemberList:\n      description: A list of Members belonging to a particular Tenant.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Member'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    OAuth2Client:\n      properties:\n        application_type:\n          type: string\n        client_id:\n          type: string\n        client_id_issued_at:\n          type: integer\n        client_name:\n          type: string\n        client_secret:\n          type: string\n        client_uri:\n          type: string\n        consent_method:\n          type: string\n        grant_types:\n          items:\n            type: string\n          type: array\n        initiate_login_uri:\n          type: string\n        post_logout_redirect_uris:\n          items:\n            type: string\n          type: array\n        redirect_uris:\n          items:\n            type: string\n          type: array\n        response_types:\n          items:\n            type: string\n          type: array\n        token_endpoint_auth_method:\n          type: string\n      type: object\n    OktaApp:\n      description: Represents an Okta App (https://developer.okta.com/docs/reference/api/apps/#application-model)\n      type: object\n    OktaAppList:\n      description: Represents a list of Okta Apps\n      items:\n        $ref: '#/components/schemas/OktaApp'\n      type: array\n    PermissionList:\n      description: A list of permissions.\n      properties:\n        items:\n          items:\n            type: string\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    PermissionSet:\n      properties:\n        kind:\n          $ref: '#/components/schemas/PermissionSetKind'\n        name:\n          type: string\n        permissions:\n          items:\n            type: string\n          type: array\n      required:\n      - kind\n      - name\n      - permissions\n      type: object\n    PermissionSetKind:\n      enum:\n      - principal\n      - api_key\n      - subscription\n      type: string\n    PermissionSetList:\n      items:\n        $ref: '#/components/schemas/PermissionSet'\n      type: array\n    PermissionString:\n      maxLength: 1024\n      minLength: 4\n      type: string\n      x-case-insensitive: true\n    Principal:\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        kind:\n          $ref: '#/components/schemas/PrincipalKind'\n        name:\n          type: string\n        profile:\n          $ref: '#/components/schemas/PrincipalProfile'\n        tenants:\n          items:\n            $ref: '#/components/schemas/TenantName'\n          nullable: true\n          type: array\n        updatedAt:\n          format: date-time\n          nullable: true\n          type: string\n        updatedBy:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    PrincipalKind:\n      enum:\n      - user\n      - service_account\n      - service\n      type: string\n    PrincipalList:\n      description: A list of Principals.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Principal'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    PrincipalProfile:\n      description: Profile information for a principal\n      properties:\n        email:\n          type: string\n        fullName:\n          type: string\n      type: object\n    PrincipalPublicKey:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        key:\n          $ref: '#/components/schemas/ECJwk'\n        status:\n          enum:\n          - active\n          - inactive\n          - deleted\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n        updatedBy:\n          type: string\n      required:\n      - status\n      - key\n      - createdBy\n      - createdAt\n      - updatedBy\n      - updatedAt\n      type: object\n    PrincipalPublicKeyStatusBody:\n      properties:\n        status:\n          enum:\n          - active\n          - inactive\n          type: string\n      required:\n      - status\n      type: object\n    PrincipalPublicKeys:\n      items:\n        $ref: '#/components/schemas/PrincipalPublicKey'\n      type: array\n    PrincipalTos:\n      properties:\n        hasAccepted:\n          type: boolean\n        principal:\n          type: string\n      required:\n      - principal\n      - hasAccepted\n      type: object\n    ResetPasswordBody:\n      properties:\n        name:\n          minLength: 2\n          type: string\n          x-case-insensitive: true\n      required:\n      - name\n    ResolveBody:\n      properties:\n        client_id:\n          maxLength: 36\n          type: string\n        code_challenge:\n          maxLength: 256\n          type: string\n        code_challenge_method:\n          maxLength: 4\n          type: string\n        email:\n          maxLength: 320\n          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\n          type: string\n        encode_state:\n          maxLength: 5\n          type: string\n        invite_id:\n          maxLength: 256\n          type: string\n        nonce:\n          maxLength: 256\n          type: string\n        redirect_uri:\n          maxLength: 2048\n          type: string\n        response_type:\n          maxLength: 128\n          type: string\n        scope:\n          maxLength: 128\n          type: string\n        state:\n          maxLength: 256\n          type: string\n        tenant:\n          $ref: '#/components/schemas/TenantName'\n      required:\n      - email\n      - client_id\n      - response_type\n      - redirect_uri\n      - scope\n      - state\n      type: object\n    ResolvedAuth:\n      properties:\n        description:\n          type: string\n        idp_url:\n          type: string\n        name:\n          type: string\n    ResolvedAuthList:\n      items:\n        $ref: '#/components/schemas/ResolvedAuth'\n      type: array\n    Role:\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        name:\n          type: string\n        permissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n        tenant:\n          nullable: true\n          type: string\n      required:\n      - name\n      type: object\n    RoleList:\n      description: A list of role.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Role'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    RolePermission:\n      properties:\n        addedAt:\n          format: date-time\n          nullable: true\n          type: string\n        addedBy:\n          nullable: true\n          type: string\n        permission:\n          type: string\n        role:\n          nullable: true\n          type: string\n        tenant:\n          nullable: true\n          type: string\n      required:\n      - permission\n      type: object\n    RolePermissionList:\n      description: A list of role permissions.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/RolePermission'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    SamlClient:\n      properties:\n        allowedReplyUris:\n          items:\n            type: string\n          type: array\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        description:\n          type: string\n        displayName:\n          type: string\n        logo:\n          type: string\n        name:\n          type: string\n        signOnUri:\n          type: string\n        tenant:\n          type: string\n        updatedAt:\n          format: date-time\n          nullable: true\n          type: string\n        updatedBy:\n          nullable: true\n          type: string\n      type: object\n    SamlClientsList:\n      description: A list of SAML clients.\n      items:\n        type: string\n      type: array\n    SensitiveTenants:\n      items:\n        type: string\n      type: array\n    ServiceAccount:\n      properties:\n        appName:\n          type: string\n        appTenant:\n          nullable: true\n          type: string\n        labels:\n          nullable: true\n          type: object\n        permissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n        principal:\n          nullable: true\n          type: string\n        principalKind:\n          nullable: true\n          type: string\n        systemPermissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n      required:\n      - appName\n      type: object\n    ServiceAccountList:\n      description: A list of service account.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ServiceAccount'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    ServiceAccountPeer:\n      properties:\n        permissions:\n          items:\n            type: string\n          type: array\n        principal:\n          type: string\n        tenant:\n          type: string\n      type: object\n    ServiceAccountPeers:\n      items:\n        $ref: '#/components/schemas/ServiceAccountPeer'\n      type: array\n    ServiceAccounts:\n      items:\n        $ref: '#/components/schemas/ServiceAccount'\n      type: array\n    Subscription:\n      description: Represents an app subscribed to a tenant\n      properties:\n        app:\n          type: string\n        appPermissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        principal:\n          nullable: true\n          type: string\n        tenant:\n          nullable: true\n          type: string\n        userPermissions:\n          items:\n            type: string\n          type: array\n          x-omitempty: true\n      required:\n      - app\n      type: object\n    SubscriptionList:\n      description: A list of subscription.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Subscription'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    TakedownPrincipal:\n      properties:\n        addedAt:\n          format: date-time\n          nullable: true\n          type: string\n        addedBy:\n          nullable: true\n          type: string\n        name:\n          type: string\n      required:\n      - name\n      type: object\n    TakedownPrincipalBody:\n      properties:\n        reason:\n          maxLength: 280\n          minLength: 4\n          type: string\n      required:\n      - reason\n      type: object\n    TakedownPrincipalList:\n      description: A list of takedown principals.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/TakedownPrincipal'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    Tenant:\n      properties:\n        createdAt:\n          format: date-time\n          nullable: true\n          type: string\n        createdBy:\n          nullable: true\n          type: string\n        ecMetadata:\n          $ref: '#/components/schemas/EcMetadata'\n        name:\n          $ref: '#/components/schemas/TenantName'\n        status:\n          $ref: '#/components/schemas/TenantStatus'\n      required:\n      - name\n      type: object\n    TenantAsAdmin:\n      properties:\n        cells:\n          items:\n            type: string\n          type: array\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        deletedAt:\n          format: date-time\n          type: string\n        deletedBy:\n          type: string\n        name:\n          $ref: '#/components/schemas/TenantName'\n        proxiedBy:\n          type: string\n        status:\n          $ref: '#/components/schemas/TenantStatus'\n      required:\n      - name\n      - status\n      - createdAt\n      - createdBy\n      - proxiedBy\n      - deletedAt\n      - deletedBy\n      type: object\n    TenantIdp:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        idp:\n          type: string\n        tenant:\n          type: string\n      type: object\n    TenantList:\n      description: A list of tenant.\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Tenant'\n          type: array\n        nextLink:\n          type: string\n      required:\n      - items\n      - nextLink\n      type: object\n    TenantName:\n      maxLength: 36\n      minLength: 2\n      pattern: ^[a-z0-9][a-z0-9\\-]*[a-z0-9]$\n      type: string\n    TenantState:\n      enum:\n      - suspend\n      - resume\n      type: string\n    TenantStatus:\n      enum:\n      - provisioning\n      - failed\n      - ready\n      - deleting\n      - deleted\n      - tombstoned\n      - suspended\n      type: string\n    Token:\n      properties:\n        access_token:\n          description: Access token\n          type: string\n        expires_in:\n          description: Expiration time of access_token in seconds\n          type: integer\n        id_token:\n          description: ID Token\n          type: string\n        refresh_token:\n          description: Refresh Token\n          type: string\n        scope:\n          description: Scope that was granted\n          type: string\n        token_type:\n          description: Must be Bearer type\n          type: string\n      type: object\n    UpdateAppBody:\n      properties:\n        redirectUris:\n          items:\n            maxLength: 256\n            minLength: 8\n            type: string\n          maxItems: 100\n          type: array\n      type: object\n    UpdateIdpBody:\n      properties:\n        description:\n          maxLength: 1024\n          type: string\n        federation_id:\n          maxLength: 256\n          type: string\n        title:\n          maxLength: 256\n          type: string\n      required:\n      - title\n      - federation_id\n      type: object\n    UpdatePasswordBody:\n      properties:\n        code:\n          maxLength: 256\n          type: string\n        current_password:\n          maxLength: 256\n          type: string\n        password:\n          maxLength: 256\n          type: string\n      required:\n      - password\n    UpdateRolePermissionsBody:\n      properties:\n        permissions:\n          items:\n            $ref: '#/components/schemas/PermissionString'\n          type: array\n      required:\n      - permissions\n      type: object\n    UpdateSamlClientBody:\n      properties:\n        allowedReplyUris:\n          items:\n            maxLength: 256\n            minLength: 8\n            type: string\n          maxItems: 512\n          type: array\n        description:\n          maxLength: 256\n          minLength: 2\n          type: string\n        displayName:\n          maxLength: 32\n          minLength: 4\n          type: string\n        logo:\n          maxLength: 256\n          minLength: 8\n          type: string\n        signOnUri:\n          maxLength: 256\n          minLength: 8\n          type: string\n      type: object\n    UpdateTenantAsAdminBody:\n      properties:\n        cells:\n          items:\n            maxLength: 50\n            minLength: 1\n            type: string\n          maxItems: 10\n          type: array\n      type: object\n    UpdateTenantBody:\n      properties:\n        ecMetadata:\n          $ref: '#/components/schemas/EcMetadata'\n        isLightweight:\n          default: false\n          type: boolean\n        status:\n          enum:\n          - provisioning\n          - ready\n          - suspending\n          - suspended\n          - resuming\n          - deleting\n          - tombstoned\n          - failed\n          type: string\n      type: object\n    UserCodeValidateInfo:\n      properties:\n        country:\n          type: string\n        device:\n          type: string\n        ip_address:\n          type: string\n        principal:\n          type: string\n        scope:\n          type: string\n        tenant:\n          type: string\n        user_code:\n          type: string\n      required:\n      - device\n      - user_code\n      - scope\n      - tenant\n      - ip_address\n      - country\n      - principal\n    ValidateInfo:\n      properties:\n        clientId:\n          type: string\n        kind:\n          enum:\n          - principal\n          - api_key\n          type: string\n        name:\n          maxLength: 36\n          minLength: 4\n          type: string\n        principal:\n          $ref: '#/components/schemas/Principal'\n        tenant:\n          $ref: '#/components/schemas/Tenant'\n      required:\n      - name\n      - clientId\n      - kind\n      type: object\n  securitySchemes:\n    Bearer:\n      in: header\n      name: Authorization\n      type: apiKey\ninfo:\n  description: With the Identity service in Splunk Cloud Services, you can authenticate\n    and authorize Splunk Cloud Services users.\n  title: Identity\n  version: v3alpha1.5\nopenapi: 3.0.0\npaths:\n  /{tenant}/identity/v3alpha1/clients/saml:\n    get:\n      description: List SAML clients.\n      operationId: listSamlClients\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SamlClientsList'\n          description: The list of SAML clients has been successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n      x-authz-scope: identity.samlclients.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    post:\n      description: Create a SAML client.\n      operationId: createSamlClient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSamlClientBody'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SamlClient'\n          description: The SAML client has been successfully created.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"409\":\n          description: The client already exists.\n      x-authz-scope: identity.samlclients.write\n  /{tenant}/identity/v3alpha1/clients/saml/{samlClient}:\n    delete:\n      description: Deletes the SAML client.\n      operationId: deleteSamlClient\n      responses:\n        \"204\":\n          description: The SAML client has been successfully deleted.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The client not found.\n      x-authz-scope: identity.samlclients.write\n    get:\n      description: Returns the SAML client.\n      operationId: getSamlClient\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SamlClient'\n          description: The SAML client has been successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The client not found.\n      x-authz-scope: identity.samlclients.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/samlClient'\n    put:\n      description: Update the SAML client.\n      operationId: updateSamlClient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateSamlClientBody'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SamlClient'\n          description: The SAML client has been successfully updated.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The client not found.\n      x-authz-scope: identity.samlclients.write\n  /{tenant}/identity/v3alpha1/groups:\n    get:\n      description: List the groups that exist in a given tenant.\n      operationId: listGroups\n      parameters:\n      - description: List only the groups with specified access permission.\n        in: query\n        name: access\n        schema:\n          enum:\n          - write\n          type: string\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n          description: The list of groups was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    post:\n      description: Creates a new group in a given tenant.\n      operationId: createGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateGroupBody'\n        description: The group definition.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: The group was successfully created.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"409\":\n          description: The group already exists.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.groups\n  /{tenant}/identity/v3alpha1/groups/{group}:\n    delete:\n      description: Deletes a group in a given tenant.\n      operationId: deleteGroup\n      responses:\n        \"204\":\n          description: The group was successfully deleted.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.groups\n    get:\n      description: Returns information about a given group within a tenant.\n      operationId: getGroup\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: The group was successfully defined.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/group'\n  /{tenant}/identity/v3alpha1/groups/{group}/members:\n    get:\n      description: Returns a list of the members within a given group.\n      operationId: listGroupMembers\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupMemberList'\n          description: The list of group members was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/group'\n    post:\n      description: Adds a member to a given group.\n      operationId: addGroupMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddGroupMemberBody'\n        description: The member to add to a group.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupMember'\n          description: The member has been successfully added to the group.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"409\":\n          description: The member already exists.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.group-members\n  /{tenant}/identity/v3alpha1/groups/{group}/members/{member}:\n    delete:\n      description: Removes the member from a given group.\n      operationId: removeGroupMember\n      responses:\n        \"204\":\n          description: The member was successfully removed from the group.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.group-members\n    get:\n      description: Returns information about a given member within a given group.\n      operationId: getGroupMember\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupMember'\n          description: The group-to-member relationship details were successfully\n            returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/group'\n    - $ref: '#/components/parameters/member'\n  /{tenant}/identity/v3alpha1/groups/{group}/roles:\n    get:\n      description: Returns a list of the roles that are attached to a group within\n        a given tenant.\n      operationId: listGroupRoles\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRoleList'\n          description: The list of roles was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/group'\n    post:\n      description: Adds a role to a given group.\n      operationId: addGroupRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddGroupRoleBody'\n        description: The role to add to a group.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRole'\n          description: The role has been successfully added to the group.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"409\":\n          description: The role already exists.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.group-roles\n  /{tenant}/identity/v3alpha1/groups/{group}/roles/{role}:\n    delete:\n      description: Removes a role from a given group.\n      operationId: removeGroupRole\n      responses:\n        \"204\":\n          description: The role was successfully removed from the group.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.groups.write\n      x-trigger-name: splunk.identity.group-roles\n    get:\n      description: Returns information about a given role within a given group.\n      operationId: getGroupRole\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRole'\n          description: The group-to-role relationship details were successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.groups.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/group'\n    - $ref: '#/components/parameters/role'\n  /{tenant}/identity/v3alpha1/identityproviders:\n    get:\n      description: Returns the list of Identity Providers for the given tenant.\n      operationId: listIdentityProvider\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/IdentityProviderBody'\n                type: array\n          description: The list of Identity Providers was successfully returned.\n        \"400\":\n          description: Malformed request\n        \"401\":\n          description: Unauthenticated user\n        \"403\":\n          description: Unauthorized operation\n        \"500\":\n          description: Internal server error\n      x-authz-scope: identity.idps.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    post:\n      description: Create an Identity Provider.\n      operationId: createIdentityProvider\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderConfigBody'\n        description: The Identity Provider to create.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderBody'\n          description: The Identity Provider was successfully created.\n        \"400\":\n          description: Malformed request\n        \"401\":\n          description: Unauthenticated user\n        \"403\":\n          description: Unauthorized operation\n        \"409\":\n          description: The Identity Provider already exists\n        \"500\":\n          description: Internal server error\n      x-authz-scope: identity.idps.write\n  /{tenant}/identity/v3alpha1/identityproviders/{idp}:\n    delete:\n      description: Deletes the Identity Provider.\n      operationId: deleteIdentityProvider\n      responses:\n        \"204\":\n          description: The Identity Provider was successfully.\n        \"400\":\n          description: Malformed request\n        \"401\":\n          description: Unauthenticated user\n        \"403\":\n          description: Unauthorized operation\n        \"404\":\n          description: Resource not found\n        \"500\":\n          description: Internal server error\n      x-authz-scope: identity.idps.write\n    get:\n      description: Returns the Identity Provider for the given tenant.\n      operationId: getIdentityProvider\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderBody'\n          description: The Identity Provider was successfully returned.\n        \"400\":\n          description: Malformed request\n        \"401\":\n          description: Unauthenticated user\n        \"403\":\n          description: Unauthorized operation\n        \"404\":\n          description: Resource not found\n        \"500\":\n          description: Internal server error\n      x-authz-scope: identity.idps.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/idp'\n    put:\n      description: Update the configuration for an Identity Provider.\n      operationId: updateIdentityProvider\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderConfigBody'\n        description: The properties to update the Identity Provider with.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderBody'\n          description: The Identity Provider was successfully updated.\n        \"400\":\n          description: Malformed request\n        \"401\":\n          description: Unauthenticated user\n        \"403\":\n          description: Unauthorized operation\n        \"404\":\n          description: Resource not found\n        \"500\":\n          description: Internal server error\n      x-authz-scope: identity.idps.write\n  /{tenant}/identity/v3alpha1/members:\n    get:\n      description: Returns a list of members in a given tenant.\n      operationId: listMembers\n      parameters:\n      - $ref: '#/components/parameters/memberKind'\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MemberList'\n          description: The list of tenant members was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.members.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    post:\n      description: Adds a member to a given tenant.\n      operationId: addMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddMemberBody'\n        description: The member to associate with a tenant.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n          description: The member was successfully added.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.members.write\n      x-trigger-name: splunk.identity.members\n  /{tenant}/identity/v3alpha1/members/{member}:\n    delete:\n      description: Removes a member from a given tenant\n      operationId: removeMember\n      responses:\n        \"204\":\n          description: The member was successfully removed.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.members.write\n      x-trigger-name: splunk.identity.members\n    get:\n      description: Returns a member of a given tenant.\n      operationId: getMember\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n          description: The member was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.members.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/member'\n  /{tenant}/identity/v3alpha1/members/{member}/groups:\n    get:\n      description: Returns a list of groups that a member belongs to within a tenant.\n      operationId: listMemberGroups\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n          description: The list of groups was successfully retrieved.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.members.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/member'\n  /{tenant}/identity/v3alpha1/members/{member}/permissions:\n    get:\n      description: |\n        Returns a set of permissions granted to the member within the tenant.\n      operationId: listMemberPermissions\n      parameters:\n      - description: List only the permissions matching the scope filter.\n        in: query\n        name: scope_filter\n        required: false\n        schema:\n          type: string\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionList'\n          description: The set of permissions was successfully returned.\n          headers:\n            Cache-Control:\n              description: max-age=\u003cseconds\u003e, specifies the time member permission\n                can be cached.\n              schema:\n                type: string\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.members.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/member'\n  /{tenant}/identity/v3alpha1/members/{member}/roles:\n    get:\n      description: |\n        Returns a set of roles that a given member holds within the tenant.\n      operationId: listMemberRoles\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleList'\n          description: The set of roles was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.members.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/member'\n  /{tenant}/identity/v3alpha1/roles:\n    get:\n      description: Returns all roles for a given tenant.\n      operationId: listRoles\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleList'\n          description: The list of roles for the given tenant was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.roles.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    post:\n      description: Creates a new authorization role in a given tenant.\n      operationId: createRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateRoleBody'\n        description: Role definition\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n          description: The authorization role was successfully created.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"409\":\n          description: The role already exists.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.roles.write\n      x-trigger-name: splunk.identity.roles\n  /{tenant}/identity/v3alpha1/roles/{role}:\n    delete:\n      description: Deletes a defined role for a given tenant.\n      operationId: deleteRole\n      responses:\n        \"204\":\n          description: The role was successfully deleted.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"422\":\n          description: Unprocessable entity in request.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.roles.write\n      x-trigger-name: splunk.identity.roles\n    get:\n      description: Returns a role for a given tenant.\n      operationId: getRole\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n          description: The role was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.roles.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/role'\n  /{tenant}/identity/v3alpha1/roles/{role}/groups:\n    get:\n      description: Gets a list of groups for a role in a given tenant.\n      operationId: listRoleGroups\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n          description: The list of groups was successfully returned.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.roles.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/role'\n  /{tenant}/identity/v3alpha1/roles/{role}/permissions:\n    get:\n      description: Gets the permissions for a role in a given tenant.\n      operationId: listRolePermissions\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RolePermissionList'\n          description: The list of permissions was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.roles.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/role'\n    post:\n      description: Adds permissions to a role in a given tenant.\n      operationId: addRolePermission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddRolePermissionBody'\n        description: The permission to add to a role.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RolePermission'\n          description: The permission was successfully added to the role.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"422\":\n          description: The provided fields aren't valid.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.roles.write\n      x-trigger-name: splunk.identity.role-permissions\n  /{tenant}/identity/v3alpha1/roles/{role}/permissions/{permission}:\n    delete:\n      description: Removes a permission from the role.\n      operationId: removeRolePermission\n      responses:\n        \"204\":\n          description: The permission was successfully removed from the role.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"422\":\n          description: Unprocessable entity in request.\n        \"423\":\n          description: The resource is locked.\n      x-authz-scope: identity.roles.write\n      x-trigger-name: splunk.identity.role-permissions\n    get:\n      description: Gets a permission for the specified role.\n      operationId: getRolePermission\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RolePermission'\n          description: The permission was successfully added to the role.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.roles.read\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n    - $ref: '#/components/parameters/role'\n    - $ref: '#/components/parameters/permission'\n  /{tenant}/identity/v3alpha1/validate:\n    get:\n      description: |\n        Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.\n      operationId: validateToken\n      parameters:\n      - $ref: '#/components/parameters/include'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidateInfo'\n          description: The submitted token is valid.\n          headers:\n            Cache-Control:\n              description: Specify how/whether to cache the response, etc.\n              schema:\n                type: string\n            X-Internal-Cache-Control:\n              description: max-age=\u003cseconds\u003e, specifies the time a token can be cached.\n                This is meant for internal services only.\n              schema:\n                type: string\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        \"429\":\n          description: Too many requests were sent.\n    parameters:\n    - $ref: '#/components/parameters/tenant'\n  /system/identity/v3alpha1/principals:\n    get:\n      description: |\n        Returns the list of principals that the Identity service knows about.\n      operationId: listPrincipals\n      parameters:\n      - $ref: '#/components/parameters/pageToken'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/orderBy'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrincipalList'\n          description: The principal list was successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n      x-authz-scope: identity.principals.read\n  /system/identity/v3alpha1/principals/{principal}:\n    get:\n      description: |\n        Returns the details of a principal, including its tenant membership and any relevant profile information.\n      operationId: getPrincipal\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Principal'\n          description: The principal details were successfully returned.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principals.read\n    parameters:\n    - $ref: '#/components/parameters/principal'\n  /system/identity/v3alpha1/principals/{principal}/keys:\n    get:\n      description: Returns principal public keys\n      operationId: getPrincipalPublicKeys\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrincipalPublicKeys'\n          description: Successful operation\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principals.read\n    parameters:\n    - $ref: '#/components/parameters/principal'\n    post:\n      description: Add service principal public key\n      operationId: addPrincipalPublicKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ECJwk'\n        description: Service principal public key\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrincipalPublicKey'\n          description: Public keys have been added\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principalkeys.write\n  /system/identity/v3alpha1/principals/{principal}/keys/{keyId}:\n    delete:\n      description: Deletes principal public key\n      operationId: deletePrincipalPublicKey\n      responses:\n        \"204\":\n          description: Successful operation\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principalkeys.write\n    get:\n      description: Returns principal public key\n      operationId: getPrincipalPublicKey\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrincipalPublicKey'\n          description: Successful operation\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principals.read\n    parameters:\n    - $ref: '#/components/parameters/principal'\n    - $ref: '#/components/parameters/keyId'\n    put:\n      description: Update principal public key\n      operationId: updatePrincipalPublicKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PrincipalPublicKeyStatusBody'\n        description: Status of the public key\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PrincipalPublicKey'\n          description: Successful operation\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principalkeys.write\n  /system/identity/v3alpha1/principals/{principal}/password:\n    parameters:\n    - $ref: '#/components/parameters/principal'\n    patch:\n      description: Update principal password\n      operationId: updatePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatePasswordBody'\n        description: The new password to set for the principal.\n        required: true\n      responses:\n        \"204\":\n          description: The password was successfully updated.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      security: []\n      x-auth-required: false\n  /system/identity/v3alpha1/principals/{principal}/revoke:\n    parameters:\n    - $ref: '#/components/parameters/principal'\n    post:\n      description: |\n        Revoke all existing access tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password\n      operationId: revokePrincipalAuthTokens\n      responses:\n        \"204\":\n          description: All tokens associated with this principal were successfully\n            revoked.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n      x-authz-scope: identity.principals.revoke\n  /system/identity/v3alpha1/reset-password:\n    post:\n      description: Sends an email which allows a principal to reset a forgotten password.\n      operationId: resetPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResetPasswordBody'\n        description: The principal information to recover password.\n        required: true\n      responses:\n        \"202\":\n          description: Request accepted. Email will be sent if principal exists.\n        \"400\":\n          description: The request isn't valid.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n      security: []\n      x-auth-required: false\nsecurity:\n- Bearer: []\nservers:\n- url: /\n\n# Retrieved from scp-openapi commit 820564ba8a17697d087ff171b14cbad60a716ee3 path: identity/v3alpha1/openapi.yaml",
			"canonicalURL": "/github.com/splunk/splunk-cloud-sdk-python@d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/-/blob/splunk_sdk/identity/v3alpha1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/splunk/splunk-cloud-sdk-python/blob/d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/splunk_sdk/identity/v3alpha1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}