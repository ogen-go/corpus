{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCATS-Tangerine/translator-api-registry"
		},
		"file": {
			"name": "openapi_full.yml",
			"size": 0,
			"path": "mygene.info/openapi_full.yml",
			"byteSize": 35992,
			"content": "--- \ncomponents: \n  parameters: \n    callback: \n      description: \"you can pass a \\\"callback\\\" parameter to make a JSONP call.\"\n      in: query\n      name: callback\n      schema: \n        type: string\n    dotfield: \n      description: \"control the format of the returned fields when passed \\\"fields\\\" parameter contains dot notation, e.g. \\\"fields=refseq.rna\\\". If \\\"True\\\" or \\\"1\\\", the returned data object contains a single \\\"refseq.rna\\\" field, otherwise (\\\"False\\\" or \\\"0\\\"), a single \\\"refseq\\\" field with a sub-field of \\\"rna\\\". Default: True.\"\n      in: query\n      name: dotfield\n      schema: \n        type: boolean\n    email: \n      description: \"If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.\"\n      in: query\n      name: email\n      schema: \n        type: string\n    fields: \n      description: \"a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. http://mygene.info/v3/gene/1017). Note that it supports dot notation as well, e.g., you can pass \\\"refseq.rna\\\". If \\\"fields=all\\\", all available fields will be returned. Default: \\\"symbol,name,taxid,entrezgene,ensemblgene\\\".\"\n      in: query\n      name: fields\n      schema: \n        type: string\n    from: \n      description: \"the number of matching gene hits to skip, starting from 0. Combining with \\\"size\\\" parameter, this can be useful for paging. Default: 0.\"\n      in: query\n      name: from\n      schema: \n        type: integer\n    size: \n      description: \"the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.\"\n      in: query\n      name: size\n      schema: \n        type: integer\n    sort: \n      description: \"the comma-separated fields to sort on. Prefix with \\\"-\\\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.\"\n      in: query\n      name: sort\n      schema: \n        type: string\n    species: \n      description: \"can be used to limit the gene hits from given species. You can use \\\"common names\\\" for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. Multiple species can be passed using comma as a separator. Default: human,mouse,rat.\"\n      in: query\n      name: species\n      schema: \n        type: string\n  schemas: \n    Gene: \n      properties: \n        AnimalQTLdb: \n          type: string\n        FLYBASE: \n          type: string\n        HGNC: \n          type: string\n        HPRD: \n          type: string\n        MGI: \n          type: string\n        MIM: \n          type: string\n        RATMAP: \n          type: string\n        RGD: \n          type: string\n        TAIR: \n          type: string\n        Vega: \n          type: string\n        WormBase: \n          type: string\n        Xenbase: \n          type: string\n        ZFIN: \n          type: string\n        _id: \n          type: string\n        accession: \n          type: object\n        aliase: \n          type: string\n        ec: \n          type: string\n        ensembl: \n          type: object\n        entrezgene: \n          format: int64\n          type: integer\n        generif: \n          properties: \n            pubmed: \n              $ref: \"#/components/schemas/int64_or_array\"\n            text: \n              type: string\n          type: object\n        genomic_pos: \n          type: object\n        go: \n          type: object\n        homologene: \n          type: object\n        interpro: \n          type: object\n        locus_tag: \n          type: string\n        map_location: \n          type: string\n        miRBase: \n          type: string\n        name: \n          type: string\n        other_names: \n          $ref: \"#/components/schemas/string_or_array\"\n        pathway: \n          type: object\n        pdb: \n          $ref: \"#/components/schemas/string_or_array\"\n        pfam: \n          type: string\n        pharmgkb: \n          type: string\n        pid: \n          type: string\n        pir: \n          type: string\n        prosite: \n          type: string\n        reagent: \n          type: object\n        refseq: \n          type: object\n        reporter: \n          type: object\n        summary: \n          type: string\n        symbol: \n          type: string\n        taxid: \n          format: int32\n          type: integer\n        type_of_gene: \n          type: string\n        umls: \n          type: object\n        unigene: \n          type: string\n        uniprot: \n          properties: \n            Swiss-Prot: \n              $ref: \"#/components/schemas/string_or_array\"\n            TrEMBL: \n              $ref: \"#/components/schemas/string_or_array\"\n          type: object\n        wikipedia: \n          properties: \n            url_stub: \n              type: string\n          type: object\n      required: \n        - _id\n        - taxid\n      type: object\n    MinimalGene: \n      properties: \n        _id: \n          type: string\n        entrezgene: \n          format: int64\n          type: integer\n        name: \n          type: string\n        symbol: \n          type: string\n        taxid: \n          format: int32\n          type: integer\n      required: \n        - _id\n        - taxid\n      type: object\n    QueryPOSTResult: \n      items: \n        allOf: \n          - \n            $ref: \"#/components/schemas/MinimalGene\"\n          - \n            properties: \n              _score: \n                format: float\n                type: number\n              query: \n                type: string\n            type: object\n      type: array\n    QueryResult: \n      properties: \n        hits: \n          items: \n            $ref: \"#/components/schemas/Gene\"\n          type: array\n        max_score: \n          format: float\n          type: number\n        took: \n          type: integer\n        total: \n          type: integer\n      type: object\n    int64_or_array: \n      type: integer\n    string_or_array: \n      type: string\n  x-bte-kgs-operations: \n  ## notes:\n  ## - not including Gene \u003c-\u003e Transcript \u003c-\u003e Protein or Gene \u003c-\u003e Protein due to conflation, lack of use in Translator right now\n  ## - for ConsensusPathDB, look at \"content information\" tab at http://cpdb.molgen.mpg.de/CPDB to see versions of the pathway databases they used\n  ## - pathway info includes Reactome, KEGG, Wikipathways, Biocarta\n  ##   However, SRI ID resolver only accepts SMPDB, REACT, GO, PANTHER.PATHWAY right now\n  ##   not included: humancyc, mousecyc, netpath, pharmgkb, pid, yeastcyc\n    PathwayHasGene:    ## using Reactome, KEGG, Wikipathways, Biocarta\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: REACT\n            semantic: Pathway\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with pathway.reactome.id field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: has_participant\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: pathway.reactome.id\n            size: 1000  ## note the size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:reactome\"\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"REACT:R-HSA-70895\"  ## Branched-chain amino acid catabolism\n        #     oneOutput: \"NCBIGene:10295\"  ## BCKDK\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: \"KEGG.PATHWAY\"\n            semantic: Pathway\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with pathway.kegg field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: has_participant\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: pathway.kegg.id\n            size: 1000  ## note the size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"KEGG.PATHWAY:hsa00120\"  ## Primary bile acid biosynthesis - Homo sapiens (human)\n        #     oneOutput: \"NCBIGene:8309\"  ## ACOX2\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: WIKIPATHWAYS\n            semantic: Pathway\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with pathway.wikipathways field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: has_participant\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: pathway.wikipathways.id\n            size: 1000  ## note the size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"WIKIPATHWAYS:WP2034\"  ## Leptin signaling pathway\n        #     oneOutput: \"NCBIGene:3953\"  ## LEPR\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: BIOCARTA\n            semantic: Pathway\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with pathway.biocarta field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: has_participant\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: pathway.biocarta.id\n            size: 1000  ## note the size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"BIOCARTA:raspathway\"\n        #     oneOutput: \"NCBIGene:3265\"  ## HRAS\n    involvedInPathway:    ## using Reactome, KEGG, Wikipathways, Biocarta\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: REACT\n            semantic: Pathway\n        parameters: \n        ## not including name since BTE isn't ingesting properly right now\n          fields: \u003e-\n            pathway.reactome.id\n          species: human\n        predicate: participates_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/reactomePathway\"\n        source: \"infores:reactome\"\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:1629\"         ## DBT\n        #     oneOutput: \"REACT:R-HSA-70895\"  ## Branched-chain amino acid catabolism\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: \"KEGG.PATHWAY\"\n            semantic: Pathway\n        parameters: \n        ## not including name since BTE isn't ingesting properly right now\n          fields: \u003e-\n            pathway.kegg.id\n          species: human\n        predicate: participates_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/keggPathway\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:1629\"         ## DBT\n        #     oneOutput: \"KEGG.PATHWAY:hsa00280\"  ## Valine, leucine and isoleucine degradation - Homo sapiens (human)\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: WIKIPATHWAYS\n            semantic: Pathway\n        parameters: \n        ## not including name since BTE isn't ingesting properly right now\n          fields: \u003e-\n            pathway.wikipathways.id\n          species: human\n        predicate: participates_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/wikipathway\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:8309\"         ## ACOX2\n        #     oneOutput: \"WIKIPATHWAYS:WP3942\"  ## PPAR signaling pathway\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: BIOCARTA\n            semantic: Pathway\n        parameters: \n        ## not including name since BTE isn't ingesting properly right now\n          fields: \u003e-\n            pathway.biocarta.id\n          species: human\n        predicate: participates_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/biocarta\"\n        source: \"infores:cpdb\"   ## ConsensusPathDB\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:5608\"         ## MAP2K6\n        #     oneOutput: \"BIOCARTA:p38mapkpathway\"  ## p38 mapk signaling pathway\n    involvedInBP:\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: GO\n            semantic: BiologicalProcess\n        parameters: \n          ## all records with go.BP field also have entrezgene field\n          ## not including: name, category/gocategory (not needed)\n          fields: \u003e-\n            go.BP.id,\n            go.BP.evidence,\n            go.BP.pubmed,\n            go.BP.qualifier\n          species: human\n        predicate: participates_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/biologicalProcess\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:632\"    ## BGLAP\n        #     oneOutput: \"GO:0001501\"   ## skeletal system development\n    BPToGene: \n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: GO\n            semantic: BiologicalProcess\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with go.BP field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: has_participant\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## HAS PREFIX (GO)\n            scopes: go.BP.id\n            size: 1000  ## note size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"GO:0001501\"         ## skeletal system development\n        #     oneOutput: \"NCBIGene:5741\"   ## PTH\n    enablesMF:\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: GO\n            semantic: MolecularActivity\n        parameters: \n          ## not including: name, category/gocategory (not needed)\n          fields: \u003e-\n            go.MF.id,\n            go.MF.evidence,\n            go.MF.pubmed,\n            go.MF.qualifier\n          species: human\n        predicate: enables\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            ## all records with go.MF field also have entrezgene field\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/molecularFunction\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:1629\"   ## DBT\n        #     oneOutput: \"GO:0031405\"   ## lipoic acid binding\n    MFToGene:\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: GO\n            semantic: MolecularActivity\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with go.MF field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: enabled_by\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"   ## HAS PREFIX (GO)\n            scopes: go.MF.id\n            size: 1000  ## note size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"GO:0008147\"   ## structural constituent of bone\n        #     oneOutput: \"NCBIGene:632\"   ## BGLAP\n    involvedInCC: \n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: GO\n            semantic: CellularComponent\n        parameters: \n          ## all records with go.CC field also have entrezgene field\n          ## not including: name, category/gocategory (not needed)\n          fields:  \u003e-\n            go.CC.id,\n            go.CC.evidence,\n            go.CC.pubmed,\n            go.CC.qualifier\n          species: human\n        predicate: located_in\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/cellularComponent\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:5741\"   ## PTH\n        #     oneOutput: \"GO:0005576\"   ## extracellular region\n    CCToGene: \n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: GO\n            semantic: CellularComponent\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with go.CC field also have entrezgene field\n          fields: entrezgene\n          species: human\n        predicate: location_of\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## HAS PREFIX (GO)\n            scopes: go.CC.id\n            size: 1000  ## note size limit\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:ncbi-gene\"   ## which got from GO Annotations...\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"GO:0033268\"         ## node of Ranvier\n        #     oneOutput: \"NCBIGene:6326\"   ## SCN2A\n    geneToDisease:\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        outputs: \n          - \n            id: MONDO\n            semantic: Disease\n        parameters: \n          ## all records with clingen field have entrezgene, mondo fields\n          ## not including: sop, disease_label\n          fields: \u003e-\n            clingen.clinical_validity.mondo,\n            clingen.clinical_validity.classification,\n            clingen.clinical_validity.online_report\n          species: human\n        ## using related_to because....\n        ## - the strength of the assertion being made (is this gene related to disease)\n        ##   is specified by the clingen.clinical_validity.classification field (see response-mapping)\n        ## - reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5473734/\n        ## - possible values: definitive, moderate, limited, disputed, refuted (!!!), no known disease relationship (!!!)\n        ##     can be a list if there were multiple assertions/clinical_validity objects\n        predicate: related_to\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: entrezgene\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/clingen\"\n        source: \"infores:clingen\"\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"NCBIGene:23126\"     ## POGZ\n        #     oneOutput: \"MONDO:0014606\"   ## intellectual disability-microcephaly-strabismus-behavioral abnormalities syndrome\n    diseaseToGene:\n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: MONDO\n            semantic: Disease\n        outputs: \n          - \n            id: NCBIGene\n            semantic: Gene\n        parameters: \n          ## all records with clingen field have entrezgene, mondo fields\n          fields: entrezgene\n          species: human\n        predicate: related_to\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: clingen.clinical_validity.mondo\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/entrezgene\"\n        source: \"infores:clingen\"\n        supportBatch: true\n        # testExamples:\n        #   - qInput: \"MONDO:0014606\"       ## intellectual disability-microcephaly-strabismus-behavioral abnormalities syndrome\n        #     oneOutput: \"NCBIGene:23126\"   ## POGZ\n    ## pantherdb gives orthologs and paralogs, which are both homologs. Hence we use homolog\n    ## currently written: MGI \n    ## Also have Ensembl (for specific non-human species) and UniprotKB (for all orthologs)\n    hasHomolog-MGI: \n      - \n        inputSeparator: \",\"\n        inputs: \n          - \n            id: HGNC\n            semantic: Gene\n        outputs: \n          - \n            id: MGI\n            semantic: Gene\n        parameters: \n          fields: \u003e-\n            pantherdb.ortholog.MGI,\n            pantherdb.ortholog.taxid\n          ## almost all records with pantherdb.ortholog fields also have the entrezgene field\n          ##   \u003e 145,000 records have both fields, vs ~ 3600 records don't have the entrezgene field\n        predicate: homologous_to\n        requestBody: \n          body: \n            q: \"{inputs[0]}\"  ## no prefix\n            scopes: pantherdb.HGNC\n          header: application/x-www-form-urlencoded\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/pantherMGI\"\n        source: \"infores:panther\"\n        # testExamples:\n        #   - qInput: \"HGNC:20589\"       ## KCMF1\n        #     oneOutput: \"MGI:1921537\"   ## Kcmf1\n    hasHomolog-MGI-rev: \n    ## UPDATED TO USE TEMPLATING\n      - \n        supportBatch: true\n        useTemplating: true\n        inputs: \n          - \n            id: MGI\n            semantic: Gene\n        requestBody: \n          body: \n            q: \"{{ queryInputs | rmPrefix | join(',') }}\"  ## no prefix\n            scopes: pantherdb.ortholog.MGI\n          header: application/x-www-form-urlencoded\n        outputs:\n          - \n            id: HGNC\n            semantic: Gene\n        parameters: \n          ## almost all records with pantherdb.ortholog fields also have the entrezgene field\n          ##   \u003e 145,000 records have both fields, vs ~ 3600 records don't have the entrezgene field\n          fields: pantherdb.HGNC\n        predicate: homologous_to\n        response_mapping: \n          $ref: \"#/components/x-bte-response-mapping/pantherHGNC\"\n        source: \"infores:panther\"\n        # testExamples:\n        #   - qInput: \"MGI:1916384\"     ## Fam25c\n        #     oneOutput: \"HGNC:23586\"   ## FAM25C\n  x-bte-response-mapping:\n    entrezgene: \n      NCBIGene: entrezgene   ## no prefix\n    reactomePathway: \n      REACT: pathway.reactome.id   ## no prefix\n      # name: pathway.reactome.name\n    keggPathway: \n      \"KEGG.PATHWAY\": pathway.kegg.id   ## no prefix\n      # name: pathway.kegg.name\n    wikipathway: \n      WIKIPATHWAYS: pathway.wikipathways.id   ## no prefix\n      # name: pathway.wikipathways.name\n    biocarta: \n      BIOCARTA: pathway.biocarta.id   ## no prefix\n      # name: pathway.biocarta.name\n    biologicalProcess: \n      GO: go.BP.id  ## HAS PREFIX (GO)\n      evidence: go.BP.evidence  ## categorical variable?\n      pubmed: go.BP.pubmed\n      relation: go.BP.qualifier  ## seems to be like a relation\n    molecularFunction: \n      GO: go.MF.id  ## HAS PREFIX (GO)\n      evidence: go.MF.evidence  ## categorical variable?\n      pubmed: go.MF.pubmed\n      relation: go.MF.qualifier  ## seems to be like a relation\n    cellularComponent: \n      GO: go.CC.id  ## HAS PREFIX (GO)\n      evidence: go.CC.evidence  ## categorical variable?\n      pubmed: go.CC.pubmed\n      relation: go.CC.qualifier  ## seems to be like a relation\n    clingen: \n      MONDO: clingen.clinical_validity.mondo  ## HAS PREFIX (MONDO)\n      ## possible values for classification: definitive, moderate, limited, disputed, refuted (!!!), no known disease relationship (!!!)\n      clingen_clinical_validity_classification: clingen.clinical_validity.classification  \n      url_refs: clingen.clinical_validity.online_report\n    pantherMGI: \n      MGI: pantherdb.ortholog.MGI  ## no prefix\n      inTaxon: pantherdb.ortholog.taxid\n    pantherHGNC: \n      HGNC: pantherdb.HGNC  ## no prefix\ninfo: \n  contact: \n    email: help@mygene.info\n    name: \"Chunlei Wu\"\n    x-id: \"https://github.com/newgene\"\n    x-role: \"responsible developer\"\n  description: \"Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](http://mygene.info/)\"\n  termsOfService: \"http://mygene.info/terms/\"\n  title: \"MyGene.info API\"\n  version: \"3.0\"\n  x-translator: \n    infores: \"infores:mygene-info\"\n    component: KP\n    team: \n      - \"Service Provider\"\n    biolink-version: \"2.2.8\"\nopenapi: \"3.0.0\"\npaths: \n  /gene: \n    post: \n      parameters: \n        - \n          $ref: \"#/components/parameters/fields\"\n          name: fields\n        - \n          $ref: \"#/components/parameters/species\"\n          name: species\n        - \n          $ref: \"#/components/parameters/dotfield\"\n          name: dotfield\n        - \n          $ref: \"#/components/parameters/email\"\n          name: email\n      requestBody:\n        required: true\n        content: \n          application/x-www-form-urlencoded: \n            schema: \n              properties: \n                ids: \n                  description: \"multiple geneids seperated by comma, e.g., \\\"ids=1017,1018\\\" or \\\"ids=695,ENSG00000123374\\\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.\"\n                  type: string\n              required: \n                - ids\n      responses: \n        \"200\": \n          content: \n            application/json: \n              schema: \n                items: \n                  $ref: \"#/components/schemas/Gene\"\n                type: array\n          description: \"a list of matching gene objects\"\n      summary: \"For a list of gene ids, return the matching gene objects\"\n      tags: \n        - annotation\n  \"/gene/{geneid}\": \n    get: \n      parameters: \n        - \n          description: \"Entrez or Ensembl gene id, e.g., 1017, ENSG00000170248. A retired Entrez Gene id works too if it is replaced by a new one, e.g., 245794\"\n          example: \"1017\"\n          in: path\n          name: geneid\n          required: true\n          schema: \n            type: string\n        - \n          $ref: \"#/components/parameters/fields\"\n          name: fields\n        - \n          $ref: \"#/components/parameters/dotfield\"\n          name: dotfield\n        - \n          $ref: \"#/components/parameters/callback\"\n          name: callback\n        - \n          $ref: \"#/components/parameters/email\"\n          name: email\n      responses: \n        \"200\": \n          content: \n            application/json: \n              schema: \n                $ref: \"#/components/schemas/Gene\"\n          description: \"A matching gene object\"\n      summary: \"Retrieve gene annotation object based on Entrez or Ensembl gene id, support JSONP and CORS as well.\"\n      tags: \n        - annotation\n  /metadata: \n    get: \n      parameters: \n        - \n          $ref: \"#/components/parameters/callback\"\n          name: callback\n      responses: \n        \"200\": \n          description: \"MyGene.info metadata object\"\n      summary: \"Get metadata about the data available from MyGene.info.\"\n  /metadata/fields: \n    get: \n      parameters: \n        - \n          description: \"Pass a search term to filter the available fields, e.g. \\\"search=clinvar\\\".\"\n          in: query\n          name: search\n          schema: \n            type: string\n        - \n          description: \"Pass a prefix string to filter the available fields, e.g. \\\"prefix=refseq\\\".\"\n          in: query\n          name: prefix\n          schema: \n            type: string\n        - \n          $ref: \"#/components/parameters/callback\"\n          name: callback\n      responses: \n        \"200\": \n          description: \"MyGene.info metadata fields object\"\n      summary: \"Get metadata about the data fields available from MyGene.info.\"\n  /query: \n    get: \n      parameters: \n        - \n          description: \"Query string. Examples \\\"CDK2\\\", \\\"NM_052827\\\", \\\"204639_at\\\", \\\"chr1:151,073,054-151,383,976\\\", \\\"hg19.chr1:151073054-151383976\\\". The detailed query syntax can be found from our [docs](http://docs.mygene.info/en/latest/doc/query_service.html).\"\n          example: CDK2\n          in: query\n          name: q\n          required: true\n          schema: \n            type: string\n        - \n          $ref: \"#/components/parameters/fields\"\n          name: fields\n        - \n          $ref: \"#/components/parameters/species\"\n          name: species\n        - \n          $ref: \"#/components/parameters/size\"\n          name: size\n        - \n          $ref: \"#/components/parameters/from\"\n          name: from\n        - \n          $ref: \"#/components/parameters/sort\"\n          name: sort\n        - \n          description: \"a single field or comma-separated fields to return facets, for example, \\\"facets=taxid\\\", \\\"facets=taxid,type_of_gene\\\".\"\n          in: query\n          name: facets\n          schema: \n            type: string\n        - \n          description: \"relevant when faceting on species (i.e., “facets=taxid” are passed). It’s used to pass species filter without changing the scope of faceting, so that the returned facet counts won’t change. Either species name or taxonomy id can be used, just like “species” parameter.\"\n          in: query\n          name: species_facet_filter\n          schema: \n            type: string\n        - \n          description: \"when passed as “True” or “1”, the query returns only the hits with valid Entrez gene ids. Default: False.\"\n          in: query\n          name: entrezonly\n          schema: \n            type: boolean\n        - \n          description: \"when passed as “True” or “1”, the query returns only the hits with valid Ensembl gene ids. Default: False.\"\n          in: query\n          name: ensemblonly\n          schema: \n            type: boolean\n        - \n          $ref: \"#/components/parameters/callback\"\n          name: callback\n        - \n          $ref: \"#/components/parameters/dotfield\"\n          name: dotfield\n        - \n          $ref: \"#/components/parameters/email\"\n          name: email\n      responses: \n        \"200\": \n          content: \n            application/json: \n              schema: \n                $ref: \"#/components/schemas/QueryResult\"\n          description: \"A query response object with \\\"hits\\\" property\"\n      summary: \"Make gene query and return matching gene list. Support JSONP and CORS as well.\"\n      tags: \n        - query\n    post: \n      parameters: \n        - \n          $ref: \"#/components/parameters/fields\"\n          name: fields\n        - \n          $ref: \"#/components/parameters/species\"\n          name: species\n        - \n          $ref: \"#/components/parameters/dotfield\"\n          name: dotfield\n        - \n          $ref: \"#/components/parameters/email\"\n          name: email\n      requestBody:\n        required: true\n        content: \n          application/x-www-form-urlencoded: \n            schema: \n              properties: \n                q: \n                  description: \"multiple query terms seperated by comma (also support \\\"+\\\" or white space), but no wildcard, e.g., \\\"q=1017,1018\\\" or \\\"q=CDK2+BTK\\\"\"\n                  type: string\n                scopes: \n                  description: \"Specify one or more fields (separated by comma) as the search \\\"scopes\\\", e.g., \\\"scopes=entrezgene\\\", \\\"scopes=entrezgene,ensemblgene\\\". The available \\\"fields\\\" can be passed to \\\"scopes\\\" parameter are listed [here](http://mygene.info/doc/query_service.html#available-fields). Default: \\\"scopes=entrezgene,ensemblgene,retired\\\" (either Entrez or Ensembl gene ids).\"\n                  type: string\n              required: \n                - q\n      responses: \n        \"200\": \n          content: \n            application/json: \n              schema: \n                $ref: \"#/components/schemas/QueryPOSTResult\"\n          description: \"Query response objects with \\\"hits\\\" property\"\n      summary: \"Make gene batch query and return matching gene hits\"\n      tags: \n        - query\n      x-bte-kgs-operations: \n        - \n          $ref: \"#/components/x-bte-kgs-operations/PathwayHasGene\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/involvedInPathway\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/involvedInBP\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/BPToGene\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/enablesMF\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/MFToGene\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/involvedInCC\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/CCToGene\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/geneToDisease\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/diseaseToGene\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/hasHomolog-MGI\"\n        - \n          $ref: \"#/components/x-bte-kgs-operations/hasHomolog-MGI-rev\"\nservers: \n  - \n    description: \"Encrypted Production server\"\n    url: \"https://mygene.info/v3\"\n    x-maturity: production\n  - \n    description: \"Production server\"\n    url: \"http://mygene.info/v3\"\n    x-maturity: production\ntags: \n  - \n    name: gene\n  - \n    name: annotation\n  - \n    name: query\n  - \n    name: translator\n  - \n    name: biothings\n",
			"canonicalURL": "/github.com/NCATS-Tangerine/translator-api-registry@5925bba6420fb77fa3e54d9258970431e340e092/-/blob/mygene.info/openapi_full.yml",
			"externalURLs": [
				{
					"url": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/5925bba6420fb77fa3e54d9258970431e340e092/mygene.info/openapi_full.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}