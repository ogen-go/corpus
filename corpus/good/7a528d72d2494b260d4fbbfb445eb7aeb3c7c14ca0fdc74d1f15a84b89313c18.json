{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SpongePowered/Ore"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "ore/conf/swagger.yml",
			"byteSize": 7904,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"Ore API\"\n  description: \u003e-\n\n    This page describes the format for the current Ore REST API, in addition\n    to common questions when using it. Note that anything that starts with `_`\n    should be considered internal, and can change at a moment's notice. Do not\n    use it.\n\n    ## Authentication and authorization\n\n    There are two ways to consume the API. Keyless, and using an API key.\n\n    ### Keyless\n\n    When using keyless authentication you only get access to public\n    information, but don't need to worry about creating and storing an API key.\n\n    ### API Keys\n\n    If you need access to non-public actions, or want to do something\n    programatically, you likely want an API key. These can be created by going\n    to your user page and clicking on the key icon.\n\n    ### Authentication\n\n    Once you know how you want to authenticate you need to create a session.\n    You can do this by `POST`ing to `/authenticate`. If you're using keyless\n    authentication that's it. If you have an API key, you need to specify it\n    in the Authorization header like so `Authorization: OreApi apikey=\"foobar\"`.\n\n    ### Authorization\n\n    Once you do that you should receive an session. This is valid for a\n    pre-defined set of time. When it expires, you need to authenticate again.\n    To use it, set it in the Authorization header like\n    so `Authorization: OreApi session=\"noisses\"`.\n\n    For more info about authentication, see [here](#/Authentification/authenticate).\n\n    ## FAQ\n\n    ### Can I just change v1 to v2 and be done with the transition to the new API?\n\n    No, not at all. The new API is wildly different from the old API. You won't even get out the door.\n\n    ### Why do I need to create a new session when I just want to get some public info?\n\n    We're working on a session-less authentification for public endpoints.\n\n    ### What format does dates have?\n\n    Standard ISO types. Where possible we use the OpenAPI format modifier. You\n    can view it's meanings [here](https://swagger.io/docs/specification/data-models/data-types/#format).\n\n\nservers:\n  - url: /api/v2\n\ncomponents:\n  schemas:\n    DeployVersionInfo:\n      description: \u003e-\n        DeployVersionInfo.\n\n        Information about the version to create. Can be passed either as a\n        file, or a string.\n      properties:\n        create_forum_post:\n          type: boolean\n          description: \u003e-\n            If a post should be made on the forums after this version has\n            been published.\n        description:\n          type: string\n          description: \u003e-\n            The version description to post on both the version,\n            and the forum post.\n        tags:\n          type: object\n          additionalProperties:\n            oneOf:\n              - type: string\n              - type: array\n                items:\n                  type: string\n                minItems: 1\n                uniqueItems: true\n          description: \u003e-\n            Override the default for the tags specified here. If nothing is\n            specified for a tag, Ore will try to infer what it should be\n            instead.\n\n            Most tags only allow one value, but a few allow multiple.\n            In cases where multiple values are specified for a tag that only\n            allows a single, the first one will be used.\n    NamedPermission:\n      type: string\n      enum:\n        - view_public_info\n        - edit_own_user_settings\n        - edit_api_keys\n        - edit_subject_settings\n        - manage_subject_members\n        - is_subject_owner\n        - create_project\n        - edit_page\n        - delete_project\n        - create_version\n        - edit_version\n        - delete_version\n        - edit_tags\n        - create_organization\n        - post_as_organization\n        - mod_notes_and_flags\n        - see_hidden\n        - is_staff\n        - reviewer\n        - view_health\n        - view_ip\n        - view_stats\n        - view_logs\n        - manual_value_changes\n        - hard_delete_project\n        - hard_delete_version\n        - edit_all_user_settings\n    Category:\n      type: string\n      enum:\n        - admin_tools\n        - chat\n        - dev_tools\n        - economy\n        - gameplay\n        - games\n        - protection\n        - role_playing\n        - world_management\n        - misc\n    ProjectSortingStrategy:\n      type: string\n      enum:\n        - stars\n        - downloads\n        - views\n        - newest\n        - updated\n        - only_relevance\n        - recent_downloads\n        - recent_views\n    models.protocols.APIV2.Project:\n      title: Project\n    models.protocols.APIV2.Role:\n      title: Role\n    models.protocols.APIV2.ProjectLicense:\n      title: ProjectLicense\n    controllers.apiv2.ApiV2Controller.CreatedApiKey:\n      title: CreatedApiKey\n    controllers.apiv2.ApiV2Controller.PermissionCheck:\n      title: PermissionCheck\n    models.protocols.APIV2.PromotedVersion:\n      title: PromotedVersion\n    models.protocols.APIV2.CompactProject:\n      title: CompactProject\n    controllers.apiv2.ApiV2Controller.KeyPermissions:\n      title: KeyPermissions\n    models.protocols.APIV2.UserActions:\n      title: UserActions\n    controllers.apiv2.ApiV2Controller.ApiSessionProperties:\n      title: ApiSessionProperties\n      example:\n        expires_in: 600\n    models.protocols.APIV2.User:\n      title: User\n    models.protocols.APIV2.VersionDependency:\n      title: VersionDependency\n    models.protocols.APIV2.ProjectSettings:\n      title: ProjectSettings\n    controllers.apiv2.ApiV2Controller.KeyToCreate:\n      title: KeyToCreate\n    controllers.apiv2.ApiV2Controller.PaginatedProjectResult:\n      title: PaginatedProjectResult\n    models.protocols.APIV2.ProjectStatsDay:\n      title: ProjectStatsDay\n    controllers.apiv2.ApiV2Controller.PaginatedCompactProjectResult:\n      title: PaginatedCompactProjectResult\n    controllers.apiv2.ApiV2Controller.Pagination:\n      title: Pagination\n    models.protocols.APIV2.VersionTag:\n      title: VersionTag\n    controllers.apiv2.ApiV2Controller.PaginatedVersionResult:\n      title: PaginatedVersionResult\n    models.protocols.APIV2.ProjectNamespace:\n      title: ProjectNamespace\n    controllers.apiv2.ApiV2Controller.ReturnedApiSession:\n      title: ReturnedApiSession\n    models.protocols.APIV2.FileInfo:\n      title: FileInfo\n    models.protocols.APIV2.VersionStatsDay:\n      title: VersionStatsDay\n    models.protocols.APIV2.ProjectStatsAll:\n      title: ProjectStatsAll\n    models.protocols.APIV2.Version:\n      title: Version\n    models.protocols.APIV2.VersionTagColor:\n      title: VersionTagColor\n    models.protocols.APIV2.ProjectMember:\n      title: ProjectMember\n    models.protocols.APIV2.PromotedVersionTag:\n      title: PromotedVersionTag\n    models.protocols.APIV2.VersionStatsAll:\n      title: VersionStatsAll\n  securitySchemes:\n    Session:\n      type: http\n      scheme: OreApi\n      description: \u003e-\n        Authentication using an API session. The session is passed as part of the\n        Authorization header in the form `Authorization: OreApi session=\"\u003cmy session here\u003e\"`.\n        You can get a session from the authentication endpoint.\n    Key:\n      type: http\n      scheme: OreApi\n      description: \u003e-\n        Authentication using an API key. This should in most cases not be a\n        request that you execute repeatedly. The key is passed as part of the\n        Authorization header in the form `Authorization: OreApi apikey=\"\u003cmy key here\u003e\"`.\n        You can get an API key either from the web interface, or using the\n        create key endpoint with a more powerful key.\n  responses:\n    UnauthorizedError:\n      description: Api session missing, invalid or expired\n      headers:\n        WWW_Authenticate:\n          schema:\n            type: string\n    ForbiddenError:\n      description: Not enough permissions to use this endpoint\n\nsecurity:\n  - Session: []\n",
			"canonicalURL": "/github.com/SpongePowered/Ore@0773a216fa329dbaf8c29dde99a32d0091025a69/-/blob/ore/conf/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/SpongePowered/Ore/blob/0773a216fa329dbaf8c29dde99a32d0091025a69/ore/conf/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}