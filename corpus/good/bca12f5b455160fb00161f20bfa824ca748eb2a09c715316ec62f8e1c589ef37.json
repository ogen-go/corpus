{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EricWittmann/api-samples"
		},
		"file": {
			"name": "bilgin-api.yaml",
			"size": 0,
			"path": "examples/bilgin-api.yaml",
			"byteSize": 2813,
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: Collab API With Bilgin!!\n  version: 1.0.0\n  description: New API! 2\npaths:\n  /widgets:\n    summary: Path used to manage the list of widgets.\n    description: \"The REST endpoint/path used to list and create zero or more `Widget`\\\n      \\ entities.  This path contains a `GET` and `POST` operation to perform the\\\n      \\ list and create tasks, respectively.\"\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Widget'\n          description: Successful response - returns an array of `Widget` entities.\n      operationId: getWidgets\n      summary: List All Widgets\n      description: Gets a list of all `Widget` entities.\n    post:\n      requestBody:\n        description: A new `Widget` to be created.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Widget'\n        required: true\n      responses:\n        \"201\":\n          description: Successful response.\n      operationId: createWidget\n      summary: Create a Widget\n      description: Creates a new instance of a `Widget`.\n  /widgets/{widgetId}:\n    summary: Path used to manage a single Widget.\n    description: \"The REST endpoint/path used to get, update, and delete single instances\\\n      \\ of an `Widget`.  This path contains `GET`, `PUT`, and `DELETE` operations\\\n      \\ used to perform the get, update, and delete tasks, respectively.\"\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Widget'\n          description: Successful response - returns a single `Widget`.\n      operationId: getWidget\n      summary: Get a Widget\n      description: Gets the details of a single instance of a `Widget`.\n    put:\n      requestBody:\n        description: Updated `Widget` information.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Widget'\n        required: true\n      responses:\n        \"202\":\n          description: Successful response.\n      operationId: updateWidget\n      summary: Update a Widget\n      description: Updates an existing `Widget`.\n    delete:\n      responses:\n        \"204\":\n          description: Successful response.\n      operationId: deleteWidget\n      summary: Delete a Widget\n      description: Deletes an existing `Widget`.\n    parameters:\n    - name: widgetId\n      description: A unique identifier for a `Widget`.\n      schema:\n        type: string\n      in: path\n      required: true\ncomponents:\n  schemas:\n    Widget:\n      description: \"\"\n      type: object\n  responses:\n    NotFoundResponse:\n      description: \"\"\n",
			"canonicalURL": "/github.com/EricWittmann/api-samples@c66cd48d9c43f67d7a4eac07f60ed3ae2b732cac/-/blob/examples/bilgin-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/EricWittmann/api-samples/blob/c66cd48d9c43f67d7a4eac07f60ed3ae2b732cac/examples/bilgin-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}