{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ga4gh/cloud-interop-testing"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "ga4ghtest/openapi/openapi.yaml",
			"byteSize": 9710,
			"content": "openapi: 3.0.1\ninfo:\n  description: |\n    The GA4GH Testbed Orchestrator is a system that brings together plugins that test implementations of services from the GA4GH Cloud (and eventually other) Work Stream. The orchestrator is designed to be a framework for running multiple tests within, and across services. For example, 1) the interoperability and integration tests across Workflow Execution Service (WES), Tool Registry Service (TRS), and Data Repository Service (DRS) APIs and also 2) specific compliance tests for implementations of individual APIs. By building the test infrastructure with a common Testbed Orchestrator, we can evolve how we test in the future while still leveraging a unified framework. This approach will not only make it much easier to aggregate results to a common GA4GH testing dashboard, but it will also reduce redundant code between testing efforts by factoring out orchestration to this effort.\n  title: GA4GH Testbed Orchestrator\n  version: 0.3.0\nservers:\n- url: /ga4gh/testbed/v1\ntags:\n- name: Plugins\n  description: |\n    Test Plugins are the core of the system. They are Python objects that conform to the Test Plugin interface and are used to execute a given test.  They can be extremely simple or quite complex but, ultimately, they provide a very basic interface to the Orchestrator that’s calling them.\n- name: Tests\n  description: |\n    Tests represent instantiations of test plugins submitted to be run by the testbed Orchestrator.\n- name: Apis\n  description: |\n    APIs are based on abstract definitions for GA4GH standards and services. Each API is specified using OpenAPI/Swagger schemas, from which client functionality is provided in the testbed for communicating with servers.\n- name: Servers\n  description: |\n    Servers include registered implementations of GA4GH APIs. These servers are the subjects (or targets) of tests run in the testbed.\npaths:\n  /tests:\n    post:\n      description: |-\n        Create a new plugin run, either right now or with a schedule.\n      operationId: create_test\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceTest'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Success — test created\n      summary: Create a new test\n      tags:\n      - Tests\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: ga4ghtest.controllers.tests_controller\n    get:\n      description: |\n        Get the list of running or scheduled tests.\n      operationId: get_tests\n      parameters:\n      - $ref: '#/components/parameters/sortParam'\n      - $ref: '#/components/parameters/orderParam'\n      - $ref: '#/components/parameters/limitParam'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServiceTest'\n          description: OK\n      summary: Get tests\n      tags:\n      - Tests\n      x-openapi-router-controller: ga4ghtest.controllers.tests_controller\n  /tests/{test_id}:\n    get:\n      description: |\n        Get the status of a given test run.\n      operationId: get_test_by_id\n      parameters:\n      - description: test ID\n        explode: false\n        in: path\n        name: test_id\n        required: true\n        schema:\n          type: string\n        example: user0\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceTest'\n          description: OK\n      summary: Get a test\n      tags:\n      - Tests\n      x-openapi-router-controller: ga4ghtest.controllers.tests_controller\n  /plugins:\n    post:\n      description: |-\n        Add a plugin for testing functionality of an API.\n      operationId: create_plugin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Plugin'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Success — plugin created\n      summary: Create a test plugin\n      tags:\n      - Plugins\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: ga4ghtest.controllers.plugins_controller\n    get:\n      description: |\n        Get the list of available test plugins.\n      operationId: get_plugins\n      parameters:\n      - $ref: '#/components/parameters/sortParam'\n      - $ref: '#/components/parameters/orderParam'\n      - $ref: '#/components/parameters/limitParam'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: OK\n      summary: Get test plugins\n      tags:\n      - Plugins\n      x-openapi-router-controller: ga4ghtest.controllers.plugins_controller\n  /apis:\n    get:\n      description: |\n        Get the list of available APIs.\n      operationId: get_apis\n      parameters:\n      - $ref: '#/components/parameters/sortParam'\n      - $ref: '#/components/parameters/orderParam'\n      - $ref: '#/components/parameters/limitParam'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: OK\n      summary: Get APIs\n      tags:\n      - Apis\n      x-openapi-router-controller: ga4ghtest.controllers.apis_controller\n  /servers:\n    post:\n      description: |-\n        Add an API server to the testbed.\n      operationId: register_server\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Server'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Success — endpoint added\n      summary: Register a server\n      tags:\n      - Servers\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: ga4ghtest.controllers.servers_controller\n    get:\n      description: |\n        Get the list of available servers.\n      operationId: get_servers\n      parameters:\n      - $ref: '#/components/parameters/sortParam'\n      - $ref: '#/components/parameters/orderParam'\n      - $ref: '#/components/parameters/limitParam'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: OK\n      summary: Get target servers\n      tags:\n      - Servers\n      x-openapi-router-controller: ga4ghtest.controllers.servers_controller\ncomponents:\n  parameters:\n    limitParam:\n      description: maximum number of records to return\n      explode: false\n      in: query\n      name: limit\n      required: false\n      schema:\n        default: 3\n        format: int32\n        maximum: 1000\n        minimum: 1\n        type: integer\n      style: form\n    sortParam:\n      description: logic by which to sort matched records\n      explode: false\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        default: created_at\n        enum:\n        - created_at\n        type: string\n      style: form\n    orderParam:\n      description: sort order (ascending or descending)\n      explode: true\n      in: query\n      name: order\n      required: false\n      schema:\n        default: desc\n        enum:\n        - asc\n        - desc\n        type: string\n      style: form\n  schemas:\n    ServerID:\n      type: string\n    Server:\n      title: Server\n      type: object\n      required:\n        - api\n        - host\n        - proto\n      properties:\n        id:\n          $ref: '#/components/schemas/ServerID'\n        api:\n          type: string\n          enum:\n            - WES\n            - TRS\n        name:\n          type: string\n        host:\n          type: string\n        proto:\n          type: string\n        auth:\n          type: string\n    PluginID:\n      type: string\n    Plugin:\n      title: Plugin\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/PluginID'\n        name:\n          type: string\n        version:\n          type: string\n        api:\n          type: string\n          enum:\n            - WES\n            - TRS\n        recipeClass:\n          type: string\n          enum:\n            - requestCheck\n        recipe:\n          type: object\n    RequestRecipe:\n      title: RequestRecipe\n      type: object\n      properties:\n        request:\n          type: string\n        response:\n          type: string\n    ServiceTest:\n      title: Test\n      type: object\n      properties:\n        server_id:\n          $ref: '#/components/schemas/ServerID'\n        plugin_id:\n          $ref: '#/components/schemas/PluginID'\n        server:\n          $ref: '#/components/schemas/Server'\n        plugin:\n          $ref: '#/components/schemas/Plugin'\n      example:\n        server:\n          api: WES\n          host: 0.0.0.0:8082\n          proto: http\n        plugin:\n          name: WES service-info\n          api: WES\n          version: \"0.0.1\"\n          recipeClass: requestCheck\n          recipe:\n            request: service-info\n            response: \"{\\\"supported_filesystem_protocols\\\": [\\\"file\\\", \\\"http\\\", \\\"https\\\"], \\\"supported_wes_versions\\\": [\\\"0.3.0\\\", \\\"1.0.0\\\"], \\\"system_state_counts\\\": {}, \\\"tags\\\": {}, \\\"workflow_engine_versions\\\": {\\\"cwl-runner\\\": \\\"b''\\\"}, \\\"workflow_type_versions\\\": {\\\"CWL\\\": {\\\"workflow_type_version\\\": [\\\"v1.0\\\"]}}}\"\n",
			"canonicalURL": "/github.com/ga4gh/cloud-interop-testing@e2b3422f6867ce632c65e017d7b558f3cce9fcf1/-/blob/ga4ghtest/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ga4gh/cloud-interop-testing/blob/e2b3422f6867ce632c65e017d7b558f3cce9fcf1/ga4ghtest/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}