{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/europace/authorization-api"
		},
		"file": {
			"name": "authorization.yaml",
			"size": 0,
			"path": "authorization.yaml",
			"byteSize": 5757,
			"content": "openapi: 3.0.0\ninfo:\n  title: Europace Authorization API\n  description: The authorization-api can be requested to get an access-token from registered clients with client-credential-flow to use the Europace APIs.\n  version: '1.0'\n  termsOfService: 'https://docs.api.europace.de/nutzungsbedingungen/'\n  contact:\n    name: Europace AG\n    url: 'https://docs.api.europace.de/'\n    email: devsupport@europace2.de\nservers:\n  - url: 'https://api.europace.de/auth'\n    description: production server\npaths:\n  /token:\n    post:\n      summary: login\n      description: Client-id and client-secret must be passed via HTTP Basic Auth.\n      parameters:\n        - schema:\n            type: string\n            default: mytraceid123\n          in: header\n          name: X-TraceId\n          description: your string for debugging\n        - schema:\n            type: string\n            default: application/x-www-form-urlencoded\n          in: header\n          name: Content-Type\n          description: ''\n          required: true\n      security:\n        - basicAuth: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/loginRequest'\n            examples: {}\n        description: ''\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/loginResponse'\n        '400':\n          description: Bad Request. e.g. not existing scopes requested\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                kein grant_type angegeben:\n                  value:\n                    error_description: 'Invalid request: Missing \"grant_type\" parameter'\n                    error: invalid_request\n                Actor nicht gefunden:\n                  value:\n                    error_description: 'Unauthorized client: Actor not found'\n                    error: unauthorized_client\n                falschen Scope angefordert:\n                  value:\n                    error_description: 'Invalid, unknown or malformed scope'\n                    error: invalid_scope\n        '401':\n          description: Unauthorized. Client credentials authorization error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                Autorisierungsfehler:\n                  value:\n                    error_description: 'Client authentication failed: Client id unknown / deactivated or client secret invalid / expired.'\n                    error: invalid_client\n        '429':\n          description: Too Many Requests. Rate limit exceeded.\n        '500':\n          description: Internal Server Error. Ooops.\n        '503':\n          description: Service Unavailable\n      operationId: createToken\n    parameters: []\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    loginResponse:\n      title: loginResponse\n      type: object\n      properties:\n        access_token:\n          type: string\n          description: Access token for use as a bearer token in the Europace APIs.\n        token_type:\n          type: string\n          default: BEARER\n          description: Type of Token (BEARER)\n        expires_in:\n          type: integer\n          description: Validity period in seconds\n        scope:\n          type: string\n          description: Valid scopes of the access token\n      required:\n        - access_token\n        - token_type\n        - expires_in\n        - scope\n      x-examples:\n        Beispiel Response:\n          access_token: I6MTU3...wet46\n          token_type: BEARER\n          expires_in: 3600\n          scope: no-access\n      description: Response of a successful login\n    loginRequest:\n      title: loginRequest\n      type: object\n      description: |-\n        Parameters for the login. In the simplest case grant_type=client_credential is passed. \n\n        When impersonating, subject, actor and impersonate as scope as well as all other required scopes must be specified.\n      x-examples: {}\n      properties:\n        grant_type:\n          type: string\n          default: client_credentials\n          description: Must be `client_credentials` for the client credentials flow.\n        scope:\n          type: string\n          default: no-access impersonieren\n          description: 'space-separated list of scopes. If a subject is specified, impersonate must be included as a scope. Requested scopes are restricted according to the actor''s permissions and the client''s approval by the actor. It is possible to request restricted access by specifying specific scopes. A scope represents an authorization to perform actions on the platform. If no scopes are requested, the scope is derived from the scopes stored during client registration. The currently available scopes are maintained in an overview.'\n        subject:\n          type: string\n          description: Partner id of the partner on whose behalf the client acts. The subject must be subordinate to the actor.\n        actor:\n          type: string\n          description: 'Partner id of the partner on whose behalf the client is acting, there must be a client approval of the actor for the client.'\n      required:\n        - grant_type\n    error:\n      title: error\n      type: object\n      properties:\n        error_description:\n          type: string\n        error:\n          type: string\n      required:\n        - error_description\n        - error\n      description: Content error message in addition to HTTP error code.\n",
			"canonicalURL": "/github.com/europace/authorization-api@134c761f90c837e85c6affb7f35e98936eebdad9/-/blob/authorization.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/europace/authorization-api/blob/134c761f90c837e85c6affb7f35e98936eebdad9/authorization.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}