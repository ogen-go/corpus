{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hoprnet/hoprnet"
		},
		"file": {
			"name": "rest-api-v2-spec.yaml",
			"size": 0,
			"path": "packages/hoprd/rest-api-v2-spec.yaml",
			"byteSize": 6564,
			"content": "# spec: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md\nopenapi: 3.0.3\nservers:\n  - url: /api/v2\ninfo:\n  description: |-\n    This Rest API enables developers to interact with a hoprd node programatically.\n  version: 2.0.0\n  title: HOPRd Rest API v2\n  contact:\n    email: tech@hoprnet.org\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hoprnet/hoprnet/blob/master/LICENSE'\n\n# paths are defined at compile-time by the OpenAPI middleware\npaths: {}\n\nsecurity:\n  - keyScheme: ['write']\n  - passwordScheme: ['write']\n\nexternalDocs:\n  description: Find out more about HOPR and HOPRd.\n  url: 'http://docs.hoprnet.org'\ncomponents:\n  schemas:\n    RequestStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          description: Status declaring success/failure of the request.\n      example:\n        status: success\n    Signature:\n      type: string\n      description: Signature from requested message.\n      example: '0x304402201065a95fd22fc3e48266c3b270ace032489b0177e07d33c59e0d13dccc89108402205f41fb911bcfe485a8e58162ebce90382dc96ccafff378e5c8960e07efcf9e92'\n    MultiAddress:\n      type: string\n      description: 'A multi address is a composable and future-proof network address, usually announced by Public HOPR nodes.'\n      example:\n        - '/ip4/128.0.215.32/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit'\n        - '/p2p/16Uiu2HAmLpqczAGfgmJchVgVk233rmB2T3DSn2gPG6JMa5brEHZ1/p2p-circuit/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit'\n        - '/ip4/127.0.0.1/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit'\n        - '/ip4/192.168.178.56/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit'\n    Currency:\n      type: string\n      enum:\n        - NATIVE\n        - HOPR\n      description: Supported currencies, NATIVE used for the interacting with blockchain or HOPR used to fund channels.\n      example: 'NATIVE'\n    NativeAddress:\n      type: string\n      format: address\n      description: Blockchain-native account address. Can be funded from external wallets (starts with **0x...**). It **can't be used** internally to send / receive messages, open / close payment channels.\n      example: '0xEA9eDAE5CfC794B75C45c8fa89b605508A03742a'\n    HoprAddress:\n      format: peerId\n      type: string\n      description: HOPR account address, also called a PeerId. Used to send / receive messages, open / close payment channels.\n      example: '16Uiu2HAmVfV4GKQhdECMqYmUMGLy84RjTJQxTWDcmUX5847roBar'\n    NativeBalance:\n      type: string\n      example: '1000000000000000000'\n      description: Amount of NATIVE (ETH) balance in the smallest unit. Used only for gas fees on the blockchain the current release is running on. For example, when you will open or close the payment channel, it will use gas fees to execute this action.\n    HoprBalance:\n      type: string\n      example: '10000000000000000000'\n      description: Amount of HOPR tokens in the smallest unit. Used for funding payment channels.\n    Channel:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - incoming\n            - outgoing\n          description: Channel can be either incomming or outgoing. Incomming means that other node can send messages using this node as relay. Outgoing means that this node can use other node to send message as realy.\n          example: incoming\n        channelId:\n          type: string\n          description: Channel ID that can be used in other calls, not to confuse with transaction hash.\n          example: '0x04e50b7ddce9770f58cebe51f33b472c92d1c40384759f5a0b1025220bf15ec5'\n        peerId:\n          $ref: '#/components/schemas/HoprAddress'\n        status:\n          type: string\n          enum:\n            - WaitingForCommitment\n            - Open\n            - PendingToClose\n            - Closed\n          description: 'Status of the channel can be: WaitingForCommitment, Open, PendingToClose, or Closed.'\n          example: Open\n        balance:\n          $ref: '#/components/schemas/HoprBalance'\n    Ticket:\n      type: object\n      properties:\n        counterparty:\n          $ref: '#/components/schemas/HoprAddress'\n        challenge:\n          type: string\n          description: The ticket's challenge which needs to be solved before being able to claim the embedded incentive.\n        epoch:\n          type: string\n          description: Ticket redemption relies on providing the value opening to a series of commitments that have previously been stored on-chain by the ticket recipient.\n        index:\n          type: string\n          description: Each ticket is labeled by an ongoing serial number named ticket index i and its current value is stored in the smart contract.\n        amount:\n          type: string\n          description: The ticket's value in HOPR.\n        winProb:\n          type: string\n          description: The ticket's winning probability normalized with the common base of Ethereum which is 2^256-1.\n        channelEpoch:\n          type: string\n          description: Payment channels might run through multiple open and close sequences, this epoch tracks the sequence.\n        signature:\n          $ref: '#/components/schemas/Signature'\n    Settings:\n      type: object\n      description: 'Various settings that affects how this node is interacting with the network.'\n      properties:\n        includeRecipient:\n          type: 'boolean'\n          description: 'Prepends your address to all messages so that receiver of the message can know that you sent that message.'\n          example: true\n        strategy:\n          type: 'string'\n          enum:\n            - 'passive'\n            - 'promiscuous'\n          example: 'passive'\n          description: 'By default, hoprd runs in **passive** mode, this means that your node will not attempt to open or close any channels automatically. When you set your strategy to **promiscuous** mode, your node will attempt to open channels to a _randomly_ selected group of nodes which you have a healthy connection to. At the same time, your node will also attempt to close channels that are running low on balance or are unhealthy.'\n\n  securitySchemes:\n    keyScheme:\n      type: apiKey\n      name: x-auth-token\n      in: header\n      description: A valid API token which had been configured at node startup.\n    passwordScheme:\n      type: http\n      scheme: basic\n      description: A valid API token is used as the user which had been configured at node startup. No password is required.\n",
			"canonicalURL": "/github.com/hoprnet/hoprnet@8b8c5d67232c0324c33811b07995eabad4a0b337/-/blob/packages/hoprd/rest-api-v2-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hoprnet/hoprnet/blob/8b8c5d67232c0324c33811b07995eabad4a0b337/packages/hoprd/rest-api-v2-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}