{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jkomyno/amplrestapi"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/api/openapi.yml",
			"byteSize": 7453,
			"content": "openapi: 3.0.0\ninfo:\n  # arbitrary string that specifies the version of the API\n  version: 0.1.0\n\n  # API name\n  title: AMPLRESTAPI\n\n  # Extended information about the API\n  description: |\n    AMPLRESTAPI is a custom asynchronous REST API layer written in modern Python to solve optimization problems in AMPL.\n    At the moment, there's a single problem available, the \"Just In Time Computation\" problem (JIT).\n\n  contact:\n    name: Alberto Schiabel\n    email: alberto.schiabel@gmail.com\n\n# API server and base URL\nservers:\n  - url: http://0.0.0.0:9001\n    description: Local AMPL REST server\n\n# tags are used for organizing operations\ntags:\n  - name: PROBLEMS\n    description: |\n      Operations that concern optimization problems\n\n# paths define the API exposed endpoints\npaths:\n  '/problems/jit':\n    post:\n      operationId: solvejitproblem\n      summary: Attempts to solve the JIT problem instance with the provided JSON input.\n      description: |\n        This operation attempts to solve the JIT problem.\n        The input data must be provided in JSON format.\n        The input should be made of the decisional variables, the fixed malus cost\n        and the number of programs to be computed one-at-a-time.\n      tags: [ 'PROBLEMS' ]\n      requestBody:\n        description: Problem decisional variables, fixed malus cost, number of batches\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JITInput'\n      responses:\n        '200':\n          description: OK, return the results and some info about how AMPL and CPLEX solved the problem\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JITOutput'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n\n        '422':\n          $ref: '#/components/responses/UnprocessableEntityError'\n\ncomponents:\n  schemas:\n    # General problem meta\n    ProblemMeta:\n      type: object\n      properties:\n        iterations:\n          type: integer\n          description: number of dual simplex iterations taken by AMPL and CPLEX to compute the solution to the problem\n          example: 5\n        computation_duration:\n          type: number\n          format: float\n          description: amount of seconds needed to compute the solution\n          example: 0.016966819763183594\n      required:\n        - iterations\n        - computation_duration\n\n    # JIT problem input\n\n    JITDuration:\n      type: integer\n      description: Fixed duration in minutes of a program to be computed by the server\n      example: 5\n\n    JITDurationArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/JITDuration'\n      example: [180, 360, 400, 90]\n\n    JITExpectedFinish:\n      type: string\n      format: datetime\n      description: Exact date and time in which the program computation is expected to finish\n      example: '2019-08-22 17:01'\n\n    JITExpectedFinishArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/JITExpectedFinish'\n      example: ['2019-08-22 17:01', '2019-08-22 22:55', '2019-08-23 09:35', '2019-08-23 18:00']\n\n    JITWrongTimeFee:\n      type: integer\n      description: Fixed cost (in dollars) that must be payed for each minute of early or delayed computations\n      example: 750\n\n    JITNumberOfBatches:\n      type: integer\n      description: |\n        Number of programs to be processed by the server.\n        This parameter is used to validate the length of the array of durations and expected finish datetimes.\n      example: 4\n\n    JITInput:\n      type: object\n      description: Input data for the JIT problem\n      properties:\n        duration:\n          $ref: '#/components/schemas/JITDurationArray'\n        expected_finish:\n          $ref: '#/components/schemas/JITExpectedFinishArray'\n        wrong_time_fee:\n          $ref: '#/components/schemas/JITWrongTimeFee'\n        n_batches:\n          $ref: '#/components/schemas/JITNumberOfBatches'\n      required:\n        - duration\n        - expected_finish\n        - wrong_time_fee\n        - n_batches\n\n    # JIT problem output\n\n    JITTotalFee:\n      type: integer\n      description: Amount of dollars to pay due to computations finished either early or too late\n      example: 4500\n\n    JITStartDatetime:\n      type: string\n      format: datetime\n      description: Date and time in which the server actually starts the computation of a program\n      example: '2019-08-22 13:55'\n\n    JITStartDatetimeArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/JITStartDatetime'\n      example: ['2019-08-22 13:55', '2019-08-22 21:55', '2019-08-23 18:55', '2019-08-24 17:30']\n\n    JITDeltaTime:\n      type: integer\n      description: Amount of minutes either late or early for a single program to be computed\n      example: 4\n\n    JITDeltaTimeArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/JITDeltaTime'\n      example: [6, 0, 0, 0]\n\n    JITOutputData:\n      type: object\n      properties:\n        total_fee:\n          $ref: '#/components/schemas/JITTotalFee'\n        start_datetime:\n          $ref: '#/components/schemas/JITStartDatetimeArray'\n        delta_time:\n          $ref: '#/components/schemas/JITDeltaTimeArray'\n      required:\n        - total_fee\n        - start_datetime\n        - delta_time\n\n    JITOutput:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/JITOutputData'\n        meta:\n          $ref: '#/components/schemas/ProblemMeta'\n      required:\n        - data\n        - meta\n\n  responses:\n    # Errors\n\n    BadRequestError:\n      description: Bad Request Error, could not parse the input data of the current request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: 'Error type indication'\n                example: 'Bad request'\n              description:\n                type: string\n                description: 'General description of the class of errors known as \"Bad Request\"'\n                example: 'The server isn''t able to parse the given input'\n              details:\n                type: string\n                description: 'Hint of which problem caused the error'\n                example: 'Expecting '','' delimiter'\n            required:\n            - error\n            - description\n            - details\n\n    UnprocessableEntityError:\n      description: Unprocessable Entity Error, the input data isn't semantically valid.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: 'Error type indication'\n                example: 'Unprocessable entity'\n              description:\n                type: string\n                description: 'General description of the class of errors known as \"Unprocessable Entity\"'\n                example: 'The server understands the structure of the given input, but its semantics is invalid'\n              details:\n                type: string\n                description: 'Hint of which problem caused the error'\n                example: 'The length of the `duration` and `expected_finish` lists must equal the value of `n_batches`'\n            required:\n            - error\n            - description\n            - details\n",
			"canonicalURL": "/github.com/jkomyno/amplrestapi@344a065f33f048c0787324a259164bf1ca33bbb4/-/blob/docs/api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/jkomyno/amplrestapi/blob/344a065f33f048c0787324a259164bf1ca33bbb4/docs/api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}