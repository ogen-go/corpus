{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CartoDB/cartodb"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "doc/developer-center/federated-tables-api/reference/swagger.yaml",
			"byteSize": 27490,
			"content": "openapi: 3.0.0\ninfo:\n  title: Federated Tables API\n  description: \u003e\n    **Warning:** Federated Tables is in **BETA** stage and the API might change or have limited support.\n\n    # Introduction\n\n    A Federated Table is a PostgreSQL Foreign Data Wrapper to a remote server,\n    allowing us to perform live queries to a remote database. Think of it as a\n    virtual table that looks like a regular sync table in CARTO â€” but when used,\n    makes the queries you perform in CARTO travel to the remote database and get\n    executed there.\n\n    Typically, the use cases for Federated Tables include having frequently changing\n    data that you join with other tables in CARTO. Having a large amount of data that\n    is dificult to sync with CARTO but that you only need to query distinct parts of,\n    like in the case of time-series databases. Even when you want to leverage the\n    scalability or low latency of your cloud database from within the CARTO ecosystem.\n\n    The API allows you to register remote databases, then you can browse remote schemas and tables\n    to register those you want to use with CARTO as a regular table.\n\n    # Authorization\n\n    In order to access Federated Tables API you must provide an API key. The CARTO\n    Authorization guide explains how these keys are sent (TLDR: _HTTP basic\n    auth_ or _query string param_ with the API key token). Depending on the\n    permissions granted to the provided API key, the request will be authorized\n    or not.\n\n  version: 0.0.1\n  contact:\n    name: Have you found an error? Github issues\n    url: 'https://github.com/CartoDB/Windshaft-cartodb/issues'\nservers:\n  - url: 'https://{user}.{domain}/api'\n    description: Production server (uses live data)\n    variables:\n      domain:\n        default: carto.com\n        description: 'If on premises, change it to your domain'\n      user:\n        default: username\n        description: Your username\n      api_key:\n        default: wadus\n        description: Your api key token\npaths:\n  '/v4/federated_servers':\n    post:\n      summary: Register a Federated Server\n      description: |\n        The Federated Server handles the information about the remote database,\n        that is its address and authentication values so CARTO can gain access to it.\n      parameters:\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedServerRequest'\n            example:\n              federated_server_name: example_server\n              mode: read-only\n              dbname: geometries\n              host: example.com\n              port: \"5432\"\n              username: read_only_user\n              password: secret\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FederatedServerResponse'\n              example:\n                federated_server_name: example_server\n                mode: read-only\n                dbname: geometries\n                host: example.com\n                port: \"5432\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntity'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \"https://{user}.carto.com/api/v4/federated_servers?api_key={api_key}\" -d ''{\n                \"federated_server_name\": \"example_server\",\n                \"mode\": \"read-only\",\n                \"dbname\": \"geometries\",\n                \"host\": \"example.com\",\n                \"port\": \"5432\",\n                \"username\": \"remote_user\",\n                \"password\": \"remote_password\"\n            }''\n    get:\n      summary: List all existing Federated Servers\n      description: |\n        This endpoint allows you to access the information of all registered servers accesible by the caller.\n      parameters:\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListOfFederatedServerResponse'\n              example:\n                - federated_server_name: example_server\n                  mode: read-only\n                  dbname: geometries\n                  host: example.com\n                  port: \"5432\"\n                - federated_server_name: another_example_server\n                  mode: read-only\n                  dbname: countries\n                  host: example.com\n                  port: \"5432\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \"https://{user}.carto.com/api/v4/federated_servers?api_key={api_key}\"\n  '/v4/federated_servers/{federated_server_name}':\n    get:\n      summary: Get a Federated Server\n      description: |\n        This endpoint returns the configuration of a single server that matches the federated server name.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FederatedServerResponse'\n              example:\n                federated_server_name: example_server\n                mode: read-only\n                dbname: geometries\n                host: example.com\n                port: \"5432\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \"https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}?api_key={api_key}\"\n    put:\n      summary: Update a Federated Server\n      description: |\n        This endpoint allows the modification of an already registered server. If the server didn't already exist it will create it.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedServerRequest'\n            example:\n              mode: read-only\n              dbname: geometries\n              host: example.com\n              port: \"5432\"\n              username: read_only_user\n              password: secret\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FederatedServerResponse'\n              example:\n                federated_server_name: example_server\n                mode: read-only\n                dbname: geometries\n                host: example.com\n                port: \"5432\"\n        '204':\n          description: Updated\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntity'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X PUT -H \"Content-Type: application/json\" \"https://{user}.carto.com/api/v4/federated_servers/example_server?api_key={api_key}\" -d ''{\n                \"mode\": \"read-only\",\n                \"dbname\": \"geometries\",\n                \"host\": \"example.com\",\n                \"port\": \"5432\",\n                \"username\": \"new_user\",\n                \"password\": \"new_password\"\n            }''\n    delete:\n      summary: Unregister a Federated Server\n      description: |\n        This endpoint will remove a registered server and all the registered tables created through it.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '204':\n          description: Unregistered\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  '/v4/federated_servers/{federated_server_name}/remote_schemas':\n    get:\n      summary: List remote schemas\n      description: |\n        Once we have a server registered, we can check what information is available to us\n        (via the provided database's user), so first we'll list the available schemas.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListOfRemoteSchemasResponse'\n              example:\n                federated_server_name: example_server\n                mode: read-only\n                dbname: geometries\n                host: example.com\n                port: \"5432\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \"https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}/remote_schemas?api_key={api_key}\"\n  '/v4/federated_servers/{federated_server_name}/remote_schemas/{remote_schema_name}/remote_tables':\n    post:\n      summary: Register a Federated Table\n      description: |\n        From the list of remote tables of a Federated Server, we can register one of them so it's available in the CARTO platform.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: path\n          name: remote_schema_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote schema\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RemoteTableRequest'\n            example:\n              remote_table_name: world_borders\n              id_column_name: id\n              geom_column_name: the_geom\n              webmercator_column_name: the_geom_webmercator\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RemoteTableResponse'\n              example:\n                registered: true\n                remote_schema_name: borders\n                remote_table_name: world_borders\n                qualified_name: cdb_fs_example_server.world_borders\n                id_column_name: id\n                geom_column_name: the_geom\n                webmercator_column_name: the_geom_webmercator\n                columns:\n                  - Name: id\n                    Type: integer\n                  - Name: the_geom\n                    Type: GEOMETRY,4326\n                  - Name: the_geom_webmercator\n                    Type: GEOMETRY,3857\n                  - Name: name\n                    Type: text\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntity'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \"https://{user}.carto.com/api/v4/federated_servers/example_server/remote_schemas/borders/remote_tables/?api_key={api_key}\" -d ''{\n                \"remote_table_name\": \"world_borders\",\n                \"id_column_name\": \"cartodb_id\",\n                \"geom_column_name\": \"the_geom\",\n                \"webmercator_column_name\": \"the_geom_webmercator\"\n            }''\n    get:\n      summary: List all remote tables whitin a remote schema\n      description: |\n        Once we know which schema we want to check, we can list what are the available tables and\n        their columns so we can register them as a Federated Table.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: path\n          name: remote_schema_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote schema\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListOfRemoteTableResponse'\n              example:\n                - registered: false\n                  remote_schema_name: borders\n                  remote_table_name: world_borders\n                  columns:\n                    - Name: id\n                      Type: integer\n                    - Name: the_geom\n                      Type: GEOMETRY,4326\n                    - Name: the_geom_webmercator\n                      Type: GEOMETRY,3857\n                    - Name: name\n                      Type: text\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \"https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}/remote_schemas/{remote_schema_name}?api_key={api_key}\"\n  '/v4/federated_servers/{federated_server_name}/remote_schemas/{remote_schema_name}/remote_tables/{remote_table_name}':\n    get:\n      summary: List a single remote table\n      description: |\n        If we want to see a single remote table, we can use this endpoint\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: path\n          name: remote_schema_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote schema\n        - in: path\n          name: remote_table_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote table\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RemoteTableResponse'\n              example:\n                registered: true\n                remote_schema_name: borders\n                remote_table_name: world_borders\n                qualified_name: cdb_fs_example_server.world_borders\n                id_column_name: id\n                geom_column_name: the_geom\n                webmercator_column_name: the_geom_webmercator\n                columns:\n                  - Name: id\n                    Type: integer\n                  - Name: the_geom\n                    Type: GEOMETRY,4326\n                  - Name: the_geom_webmercator\n                    Type: GEOMETRY,3857\n                  - Name: name\n                    Type: text\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \"https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}/remote_schemas/{remote_schema_name}/remote_tables/{remote_table_name}?api_key={api_key}\"\n    put:\n      summary: Modify a registered Federated Table\n      description: Allows the modification of an already registered table. If it wasn't already, the table will be registered.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: path\n          name: remote_schema_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote schema\n        - in: path\n          name: remote_table_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote table\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RemoteTableRequest'\n            example:\n              remote_table_name: world_borders\n              local_table_name_override: countries\n              id_column_name: id\n              geom_column_name: the_geom\n              webmercator_column_name: the_geom_webmercator\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RemoteTableResponse'\n              example:\n                registered: true\n                remote_schema_name: borders\n                remote_table_name: world_borders\n                local_table_name_override: countries\n                qualified_name: cdb_fs_example_server.countries\n                id_column_name: id\n                geom_column_name: the_geom\n                webmercator_column_name: the_geom_webmercator\n                columns:\n                  - Name: id\n                    Type: integer\n                  - Name: the_geom\n                    Type: GEOMETRY,4326\n                  - Name: the_geom_webmercator\n                    Type: GEOMETRY,3857\n                  - Name: name\n                    Type: text\n        '204':\n          description: Updated\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntity'\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X PUT -H \"Content-Type: application/json\" \"https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}/remote_schemas/{remote_schema_name}/remote_tables/{remote_table_name}?api_key={api_key}\" -d ''{\n                \"local_table_name_override\": \"countries\"\n                \"id_column_name\": \"cartodb_id\",\n                \"geom_column_name\": \"the_geom\",\n                \"webmercator_column_name\": \"the_geom_webmercator\"\n            }''\n    delete:\n      summary: Unregister a Federated Table\n      description: |\n        This endpoint will remove a registered table.\n      parameters:\n        - in: path\n          name: federated_server_name\n          required: true\n          schema:\n            type: string\n          description: The name of the federated server\n        - in: path\n          name: remote_schema_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote schema\n        - in: path\n          name: remote_table_name\n          required: true\n          schema:\n            type: string\n          description: The name of the remote table\n        - in: query\n          name: api_key\n          required: true\n          schema:\n            type: string\n          description: The authorization key token\n      responses:\n        '204':\n          description: Unregistered\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\ncomponents:\n  schemas:\n    FederatedServerRequest:\n      type: object\n      properties:\n        federated_server_name:\n          type: string\n          title: federated server name\n          description: Alias for the federated server. It must be unique per user/organization and lower-case (required).\n        mode:\n          type: string\n          enum:\n            - read-only\n          title: mode\n          description: only read-only available\n        dbname:\n          type: string\n          title: federated server database name\n          description: database name\n        host:\n          type: string\n          title: Host's URL\n          description: Domain name of the federated server.\n        port:\n          type: string\n          title: port\n          description: available port number\n        username:\n          type: string\n          title: username\n          description: database role with login privileges\n        password:\n          type: string\n          title: password\n          description: the roleâ€™s secret password\n    FederatedServerResponse:\n      type: object\n      properties:\n        federated_server_name:\n          type: string\n          title: federated server name\n          description: Alias for the federated server. It must be unique per user/organization and lower-case (required).\n        mode:\n          type: string\n          enum:\n            - read-only\n          title: mode\n          description: only read-only available\n        dbname:\n          type: string\n          title: federated server database name\n          description: database name\n        host:\n          type: string\n          title: Host's URL\n          description: Domain name of the federated server.\n        port:\n          type: string\n          title: port\n          description: available port number\n    ListOfFederatedServerResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/FederatedServerResponse'\n    RemoteSchemasResponse:\n      type: object\n      properties:\n        remote_schema_name:\n          type: string\n          title: schema name\n          description: Name of the schema of the federated server\n    ListOfRemoteSchemasResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/RemoteSchemasResponse'\n    RemoteTableRequest:\n      type: object\n      properties:\n        remote_table_name:\n          type: string\n          title: remote table name\n          description: Name of the table of the federated server\n        local_table_name_override:\n          type: string\n          title: local table name override\n          description: Defaults to remote_table_name. Useful to avoid name clashing, should be needed\n        id_column_name:\n          type: string\n          title: id column name\n          description: Name of the primary key column\n        geom_column_name:\n          type: string\n          title: geom column name\n          description: Name of the geometry column with SRID 4326 (optional). If not passed, itâ€™ll try to use geom_column_name if available\n        webmercator_column_name:\n          type: string\n          title: webmercator column name\n          description: Name of the geometry column with SRID 3857 (optional). If not passed, itâ€™ll try to use geom_column_name if available\n    RemoteTableResponse:\n      type: object\n      properties:\n        remote_schema_name:\n          type: string\n          title: schema name\n          description: Name of the schema of the federated server\n        remote_table_name:\n          type: string\n          title: remote table name\n          description: Name of the table of the federated server\n        local_table_name_override:\n          type: string\n          title: local table name override\n          description: Defaults to remote_table_name. Useful to avoid name clashing, should be needed\n        qualified_name:\n          type: string\n          title: qualified name\n          description: Full qualified name to be used in maps/queries in CARTO\n        id_column_name:\n          type: string\n          title: id column name\n          description: Name of the primary key column\n        geom_column_name:\n          type: string\n          title: geom column name\n          description: Name of the geometry column with SRID 4326 (optional). If not passed, itâ€™ll try to use geom_column_name if available\n        webmercator_column_name:\n          type: string\n          title: webmercator column name\n          description: Name of the geometry column with SRID 3857 (optional). If not passed, itâ€™ll try to use geom_column_name if available\n        registered:\n          type: boolean\n          title: registered\n          description: Whether the table is ready to be used as a regular table in CARTO\n        columns:\n          type: array\n          items:\n            $ref: '#/components/schemas/ListOfRemoteTableColumn'\n    ListOfRemoteTableResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/RemoteTableResponse'\n    RemoteTableColumn:\n      type: object\n      properties:\n        Name:\n          type: string\n          title: the column name\n          description: the column name\n        Type:\n          type: string\n          title: the column type\n          description: the column type\n    ListOfRemoteTableColumn:\n      type: array\n      items:\n        $ref: '#/components/schemas/RemoteTableColumn'\n\n  responses:\n    NotFound:\n      description: The specified resource was not found\n    Unauthorized:\n      description: Unauthorized. No authentication provided.\n    Forbidden:\n      description: Forbidden. The API key does not authorize this request.\n    UnprocessableEntity:\n      description: Request's parameters error\n",
			"canonicalURL": "/github.com/CartoDB/cartodb@64bc263488a45fc66565aadfcb051af60121f98d/-/blob/doc/developer-center/federated-tables-api/reference/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CartoDB/cartodb/blob/64bc263488a45fc66565aadfcb051af60121f98d/doc/developer-center/federated-tables-api/reference/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}