{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FuzzyMonkeyCo/monkey"
		},
		"file": {
			"name": "jsonplaceholder.typicode.comv1.0.0_openapiv3.0.1_spec.yml",
			"size": 0,
			"path": "pkg/modeler/openapiv3/testdata/jsonplaceholder.typicode.comv1.0.0_openapiv3.0.1_spec.yml",
			"byteSize": 10135,
			"content": "openapi: 3.0.1\ninfo:\n  title: JSON Placeholder\n  description: Fake Online REST API for Testing and Prototyping\n  version: 1.0.0\nservers:\n- url: https://jsonplaceholder.typicode.com/\ntags:\n- name: posts\n- name: comments\n- name: albums\n- name: photos\n- name: users\npaths:\n  /posts:\n    get:\n      tags: [posts]\n      summary: Get all available posts\n      operationId: getPosts\n      parameters:\n      - name: id\n        in: query\n        description: Filter by post ID\n        schema: {$ref: '#/components/schemas/PostId'}\n      - name: userId\n        in: query\n        description: Filter by user ID\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Posts'}\n  /posts/{id}:\n    get:\n      tags: [posts]\n      summary: Get specific post\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the post to retrieve\n        required: true\n        schema: {$ref: '#/components/schemas/PostId'}\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /posts/{id}/comments:\n    get:\n      tags: [posts]\n      summary: Get comments for a specific post\n      parameters:\n      - name: id\n        in: path\n        description: post id\n        required: true\n        schema: {$ref: '#/components/schemas/PostId'}\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Comments'}\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /comments:\n    get:\n      tags: [comments]\n      summary: Get all available comments\n      operationId: getComments\n      parameters:\n      - name: id\n        in: query\n        description: Filter by comment ID\n        schema: {$ref: '#/components/schemas/CommentId'}\n      - name: postId\n        in: query\n        description: Filter by post ID\n        schema: {$ref: '#/components/schemas/PostId'}\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Comments'}\n  /comments/{id}:\n    get:\n      tags: [comments]\n      summary: Get specific comment\n      operationId: getComment\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the comment to retrieve\n        required: true\n        schema: {$ref: '#/components/schemas/CommentId'}\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /albums:\n    get:\n      tags: [albums]\n      summary: Get all available albums\n      operationId: getAlbums\n      parameters:\n      - name: id\n        in: query\n        description: Filter by album ID\n        schema:\n          type: integer\n      - name: userId\n        in: query\n        description: Filter by user ID\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Album'\n  /albums/{id}:\n    get:\n      tags: [albums]\n      summary: Get specific album\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the album to retrieve\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Album'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /albums/{id}/photos:\n    get:\n      tags: [albums]\n      summary: Get photos for a specific album\n      parameters:\n      - name: id\n        in: path\n        description: album id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Photo'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /photos:\n    get:\n      tags: [photos]\n      summary: Get all available photos\n      operationId: getPhotos\n      parameters:\n      - name: id\n        in: query\n        description: Filter by photo ID\n        schema:\n          type: integer\n      - name: albumId\n        in: query\n        description: Filter by album ID\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Photo'\n  /photos/{id}:\n    get:\n      tags: [photos]\n      summary: Get specific photo\n      operationId: getPhoto\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the photo to retrieve\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Photo'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n  /users:\n    get:\n      tags: [users]\n      summary: Get all available users\n      operationId: getUsers\n      parameters:\n      - name: id\n        in: query\n        description: Filter by user ID\n        schema:\n          type: integer\n      - name: email\n        in: query\n        description: Filter by user email address\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /users/{id}:\n    get:\n      tags: [users]\n      summary: Get specific user\n      operationId: getUser\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the user to retrieve\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n\ncomponents:\n  schemas:\n    CommentId:\n      type: integer\n      format: int64\n    Comments:\n      type: array\n      items:\n        $ref: '#/components/schemas/Comment'\n    Comment:\n      type: object\n      properties:\n        id: {$ref: '#/components/schemas/CommentId'}\n        postId:\n          type: integer\n          format: int64\n        name:\n          type: string\n        email:\n          type: string\n          # format: email\n        body:\n          type: string\n\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        username:\n          type: string\n        email:\n          type: string\n          # format: email\n        phone:\n          type: string\n        website:\n          type: string\n        company:\n          type: object\n          properties:\n            bs:\n              type: string\n            catchPhrase:\n              type: string\n            name:\n              type: string\n        address:\n          type: object\n          properties:\n            zipcode:\n              type: string\n            geo:\n              type: object\n              properties:\n                lng:\n                  type: string\n                lat:\n                  type: string\n            suite:\n              type: string\n            city:\n              type: string\n            street:\n              type: string\n\n    PostId:\n      type: integer\n      format: int64\n    Posts:\n      type: array\n      items:\n        $ref: '#/components/schemas/Post'\n    Post:\n      type: object\n      properties:\n        id: {$ref: '#/components/schemas/PostId'}\n        userId:\n          type: integer\n          format: int64\n        title:\n          type: string\n        body:\n          type: string\n\n    Album:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        userId:\n          type: integer\n          format: int64\n        title:\n          type: string\n    Photo:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        albumId:\n          type: integer\n          format: int64\n        title:\n          type: string\n        url:\n          type: string\n          format: uri\n        thumbnailUrl:\n          type: string\n          format: uri\n    NotFoundError:\n      type: object\n",
			"canonicalURL": "/github.com/FuzzyMonkeyCo/monkey@f3a32e430c885bd3132e3bd153f48ac11cef33be/-/blob/pkg/modeler/openapiv3/testdata/jsonplaceholder.typicode.comv1.0.0_openapiv3.0.1_spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/FuzzyMonkeyCo/monkey/blob/f3a32e430c885bd3132e3bd153f48ac11cef33be/pkg/modeler/openapiv3/testdata/jsonplaceholder.typicode.comv1.0.0_openapiv3.0.1_spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}