{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/corrently.io/2.0.0/openapi.yaml",
			"byteSize": 42611,
			"content": "openapi: 3.0.2\nservers:\n  - url: https://api.corrently.io/v2.0\ninfo:\n  contact:\n    email: dev@stromdao.com\n    url: https://stromdao.de/kontakt\n  description: |\n    *Corrently - from italian corrente, which is energy*\n    # Introduction\n    The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management.\n    As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding.\n    [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://corrently.io/terms/\n  title: Corrently.io\n  version: 2.0.0\n  x-apisguru-categories:\n    - open_data\n  x-logo:\n    url: https://corrently.de/assets/img/Corrently_1000x252.png\n  x-origin:\n    - format: openapi\n      url: https://corrently.io/dist.yaml\n      version: \"3.0\"\n  x-providerName: corrently.io\ntags:\n  - description: |\n      Managing accounts and balances for market partners (eq. households, grid operators, traders,..) Stromkonto is based on distributed ledger technology (AKA Blockchain). Instead of using the REST Api to access any energy ledger, you might act as a blockchain node and use the published ABI definitions to get the same results and/or run transactions directly.\n    name: Stromkonto (Ledger)\n  - description: |\n      Green Power Index (GrünstromIndex), an AI based service to forecast energy sources in the grid (regionale Stromherkunft).\n      Further Details and sample implementation is available at [gruenstromindex.de](https://www.gruenstromindex.de/).\n    name: GreenPowerIndex (GrünstromIndex)\n  - description: |\n      Provides latest dispatch information of green energy at a specific location in Germany (Herkunft/GrünstromMix). It allows to do schedule management (Fahrplanmanagement) of green energy generation facilities, demand and resilience management for grid operators. The public version (OpenAPI) is always post fact. If you are interessted in pre fact (forecast) data, you might get in contact with STROMDAO GmbH.\n    name: Dispatch (Green Energy Distribution API)\n  - description: |\n      Allows to virtualy act as an Meter Point Operator by decorating meter readings with GreenPowerIndex (GrünstromIndex) handles. In principal this service decorates meter [OBIS Code](https://de.wikipedia.org/wiki/OBIS-Kennzahlen) 1.8.0 values to 1.8.1 and 1.8.2 according to the local and actual GSI value. A signature gets applied to the reading and all three OBIS values get hashed into the Energychain for consensus (e.q. creating balancing groups). CO2 footprint of a meter gets provided (as of first reading pushed).This works in conjunction with German Smart Meter Gateways (as of March 2020).\n    name: Metering (Decorator)\n  - description: Tariff information for the German market region. Provides base price and energy price information for private households (Standardlastprofil H0, SLP H0 Tarifinformation).\n    name: Tariff (Price API)\n  - description: Access to status information of an existing metering change and allocation process.\n    name: WiM (Wechselprozesse im Messwesen Strom - Status API)\n  - description: Helper services and endpoints for smarthome and home automation systems.\n    name: SmartHome\n  - description: Alternative access to OpenMeter Data.\n    name: OpenMETER\n  - description: Alternative access to EASEE.cloud Data.\n    name: easee\n  - description: Alternative access to Corrently OCPP Data (hosted cloud backend).\n    name: OCPP\n  - description: |\n      Self-Service to create a full receipt (Quittung) for energy delivery in case of submetering. Please refer to [Strom-Quittung](http://strom-quittung.de) for a sample usage.\n    name: Strom-Quittung\n  - description: Technische Sicherheitseinrichtung - use in context of strom-quittungen to get digitaly signed receipts.\n    name: TSE\npaths:\n  /alternative/easee/lastSessions:\n    get:\n      description: |\n        Refer to easee.cloud API for details.\n      operationId: easeeSessions\n      parameters:\n        - description: Username as used on easy.cloud\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Password as used on easy.cloud\n          in: query\n          name: password\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/easee-charger\"\n                type: array\n          description: Success\n      summary: Returns lastSession info for all easee wallboxes (chargers) given user has access to.\n      tags:\n        - easee\n  /alternative/ocpp/lastSessions:\n    get:\n      description: |\n        Returns lastSession info of OCCP Cloud service for clearing in corrently ecosystem. Might be tested via [OCPP cloud simulator](https://ocpp.corrently.cloud).\n        Last session Info of managed EV charging stations connected to the correnty ecosystem.\n      operationId: ocppSessions\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/easee-charger\"\n                type: array\n          description: Success\n      summary: Last Session Info\n      tags:\n        - OCPP\n  /alternative/openmeter/activities:\n    get:\n      description: |\n        Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n      operationId: omActivities\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ommeters\"\n                type: array\n          description: Success\n      summary: Public shared smart meters installed in Germany and available for subservices and exploration.\n      tags:\n        - OpenMETER\n  /alternative/openmeter/meters:\n    get:\n      description: |\n        Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n      operationId: omMeters\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ommeters\"\n                type: array\n          description: Success\n      summary: Public shared smart meters installed in Germany and available for subservices and exploration.\n      tags:\n        - OpenMETER\n  /alternative/openmeter/readings:\n    get:\n      description: |\n        Provides a list of available meterrs in the OpenMETER project ( https://www.openmeter.de/ ) which grants access for analytics as data discovery.\n      operationId: omReadings\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ommeters\"\n                type: array\n          description: Success\n      summary: Public shared smart meters installed in Germany and available for subservices and exploration.\n      tags:\n        - OpenMETER\n  /gsi/bestHour:\n    get:\n      description: |\n        Simple Wrapper around the GreenPowerIndex for easy integration into almost any SmartHome system that allows access to a JSON/REST Service This endpoint is designed to indicate if a device should be turned on or off. (Switch state).\n      operationId: gsiBesthour\n      parameters:\n        - description: Zipcode (Postleitzahl) of a city in Germany.\n          in: query\n          name: zip\n          schema:\n            type: string\n        - description: Any valid Stromkonto account (address).\n          in: query\n          name: key\n          schema:\n            type: string\n        - description: Number of hours to check (default 24 hours from now).\n          in: query\n          name: timeframe\n          schema:\n            type: integer\n        - description: How many hours in row do you need the device turned on?\n          in: query\n          name: hours\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: true if device should be turned on now. false if not.\n                type: boolean\n          description: Success\n      summary: Get best hour (with most regional green energy) in a given timeframe.\n      tags:\n        - GreenPowerIndex (GrünstromIndex)\n        - SmartHome\n  /gsi/dispatch:\n    get:\n      description: |\n        Dispatch of green energy has two aspects to consider:\n          - Availability of gerneration facility (depends on weather and installed capacity)\n          - Demand of energy\n        Using the green power index (GrünstromIndex) we have received a tool to automate distribution of energy in order to prevent redispatch situations. Doing this alows to opimize resource usage (tactical) and leverage data for investment planning (strategic).\n      operationId: gsiDispatch\n      parameters:\n        - description: Zipcode (Postleitzahl) of a city in Germany.\n          in: query\n          name: zip\n          schema:\n            type: string\n        - description: Any valid Stromkonto account (address).\n          in: query\n          name: key\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  avg_distance_km:\n                    description: Averaged geospatial distance in kilometers between energy generation and usage at requested location.\n                    type: number\n                  dispatch_from:\n                    description: List of current sources of green energy (into requested location)\n                    items:\n                      $ref: \"#/components/schemas/DispatchLocation\"\n                    type: array\n                  dispatch_target:\n                    description: List of current targets of green energy (out of requested location)\n                    items:\n                      $ref: \"#/components/schemas/DispatchLocation\"\n                    type: array\n                  postmix:\n                    description: Green Energy Mix after dispatch of given city\n                    type: object\n                  premix:\n                    description: Green Energy Mix prior to dispatch of given city\n                    type: object\n                  timeframe:\n                    description: Evaluated timeframe for this request\n                    properties:\n                      end:\n                        description: Ending time of window evaluated for this request/dispatches.\n                        type: integer\n                      start:\n                        description: Starting time of window evaluated in order to get dispatches\n                        type: integer\n                    type: object\n                type: object\n          description: Success\n      summary: Dispatch (Green Energy Distribution Schedule)\n      tags:\n        - GreenPowerIndex (GrünstromIndex)\n        - Dispatch (Green Energy Distribution API)\n  /gsi/marketdata:\n    get:\n      description: |\n        Compatible to awattar (https://api.awattar.de/v1/marketdata) API interface but data comes from GreenPowerIndex instead of EPEXSpot.\n      operationId: gsiMarketdata\n      parameters:\n        - description: Zipcode (Postleitzahl) of a city in Germany.\n          in: query\n          name: zip\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: Energyprice for the upcomming hours\n                    items:\n                      $ref: \"#/components/schemas/MarketData\"\n                    type: array\n                type: object\n          description: Success\n      summary: Marketdata\n      tags:\n        - GreenPowerIndex (GrünstromIndex)\n  /gsi/prediction:\n    get:\n      description: |\n        Retrieval the GreenPowerIndex (GrünstromIndex) for a given city (by zipcode) in Germany.\n      operationId: gsiPrediction\n      parameters:\n        - description: Zipcode (Postleitzahl) of a city in Germany.\n          in: query\n          name: zip\n          schema:\n            type: string\n        - description: Any valid Stromkonto account (address).\n          in: query\n          name: key\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  forecast:\n                    description: Prediction for the upcomming hours\n                    items:\n                      $ref: \"#/components/schemas/ForecastItem\"\n                    type: array\n                  location:\n                    description: Standarized location info sourced for prediction\n                    properties:\n                      city:\n                        description: Pretty Print city name\n                        type: string\n                      zip:\n                        description: Zipcode (Postleitzahl)\n                        type: string\n                    type: object\n                  matrix:\n                    description: Device switching recommendation.\n                    properties:\n                      h0:\n                        description: Indicates number of hours a device should run\n                        properties:\n                          avg_1:\n                            description: device should run in 1 hour\n                            type: string\n                          avg_2:\n                            description: device should run in 2 hours\n                            type: string\n                          avg_3:\n                            description: device should run in 3 hour\n                            type: string\n                        type: object\n                    type: object\n                type: object\n          description: Success\n      summary: Prediction\n      tags:\n        - GreenPowerIndex (GrünstromIndex)\n  /metering/reading:\n    get:\n      description: |\n        Retrieves a metered reading using account (Stromkonto).\n      operationId: meteringGet\n      parameters:\n        - description: Account/Address (Stromkonto) to retrieve reading for.\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  1.8.0:\n                    description: Reading as provided as input in Wh\n                    type: integer\n                  1.8.1:\n                    description: Green energy calculated using Green Power Index (GrünstromIndex) in Wh\n                    type: integer\n                  1.8.2:\n                    description: Grey energy calculated using Green Power Index (GrünstromIndex) in Wh\n                    type: integer\n                  _processingTime:\n                    description: Time this reading got imported into consensus (e.q. signed timestamp).\n                    type: integer\n                  account:\n                    description: Stromkonto/Metering address allocated (this is not the MELOID!)\n                    type: string\n                  co2_g_oekostrom:\n                    description: CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)\n                    type: integer\n                  co2_g_standard:\n                    description: CO2 Emission of metered energy in a standard mix\n                    type: integer\n                  credits:\n                    description: Update credits this meter has. Gets refilled automtically to prevent too frequent updates\n                  timeStamp:\n                    description: API Consensus time this reading was fully received\n                    type: integer\n                  ttl:\n                    description: Time to Live for this reader. If no update is provided it gets decommissioned.\n                    type: integer\n                type: object\n          description: Success\n      summary: Meter Reading\n      tags:\n        - Metering (Decorator)\n    post:\n      description: |\n        Post meter reading and get it decorated. Best practice is to first create a new Stromkonto with the register method and choose a nice secret to protect updates. Now regularly send updates to get readings (consumption) split into green power (1.8.1) and grey power (1.8.2).\n      operationId: meteringPost\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                1.8.0:\n                  description: Meter Reading (prefered in Wh)\n                  type: integer\n                account:\n                  description: Stromkonto account (address) associated with this metering.\n                  type: string\n                energy:\n                  description: Alias for 1.8.0\n                  type: integer\n                secret:\n                  description: Some private password you might choose on first update. However you need to use the same secret on every further posts.\n                  type: string\n                value:\n                  description: Alias for 1.8.0\n                  type: integer\n                zip:\n                  description: Zipcode (Postleitzahl) of metered location\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  1.8.0:\n                    description: Reading as provided as input in Wh\n                    type: integer\n                  1.8.1:\n                    description: Green energy calculated using Green Power Index (GrünstromIndex) in Wh\n                    type: integer\n                  1.8.2:\n                    description: Grey energy calculated using Green Power Index (GrünstromIndex) in Wh\n                    type: integer\n                  _processingTime:\n                    description: Time this reading got imported into consensus (e.q. signed timestamp).\n                    type: integer\n                  account:\n                    description: Stromkonto/Metering address allocated (this is not the MELOID!)\n                    type: string\n                  co2_g_oekostrom:\n                    description: CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)\n                    type: integer\n                  co2_g_standard:\n                    description: CO2 Emission of metered energy in a standard mix\n                    type: integer\n                  timeStamp:\n                    description: API Consensus time this reading was fully received\n                    type: integer\n                type: object\n          description: Success\n      summary: Meter Reading\n      tags:\n        - Metering (Decorator)\n  /quittung/commit:\n    post:\n      description: |\n        Uses collected fields or provided fields to create a final receipt (Strom-Quittung).\n      operationId: quittungComit\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                account:\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Unique ID of a receipt. It might be used via https://api.corrently.io/v2.0/quittung/pdf?token= to retrieve a PDF version of receipt or via   https://corrently.de/service/quittung.html?token= to get online version.\n                type: string\n          description: Success\n      summary: Finishs a collection of data and finalizes receipt. Use this method after collecting all data via quittung/prepare\n      tags:\n        - Strom-Quittung\n  /quittung/create:\n    post:\n      description: |\n        Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services.\n      operationId: quittungCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Token for this receipt. It might be extended as 'token' parameter to retrieve actual receipt [sample](https://corrently.de/service/quittung.html?token=0x3C4750bf93aa96e55A0d60be334B6b6E14DCe5bc)\n                type: string\n          description: Success\n      summary: Create a receipt for an energy delivery (only valid in Germany).\n      tags:\n        - Strom-Quittung\n  /quittung/prepare:\n    post:\n      description: |\n        During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values.\n      operationId: quittungPrepare\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                account:\n                  type: string\n              type: object\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: All collected values for an account (eq. session).\n                type: string\n          description: Success\n      summary: Allows to collect data with several requests (or a single) for a receipt.\n      tags:\n        - Strom-Quittung\n  /quittung/tse:\n    post:\n      description: |\n        Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.\n      operationId: quittungTSE\n      parameters:\n        - description: Quittung Identifier  (serialnumber generated during receipt generation process)\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    description: JSON object that got signed by TSE.\n                    x-schema:\n                      properties:\n                        algorithmus:\n                          description: Standard used for signing and hashing of input values\n                          example: RSA-SHA512\n                          type: string\n                        clientid:\n                          description: Digital Identity of transaction system.\n                          example: 1D2323CDEF\n                          type: string\n                        end:\n                          description: Finishing timestamp of signature process by TSE service in UTC ISO Format.\n                          example: 2021-07-12T18:43:05.582Z\n                          type: string\n                        serialnumber:\n                          description: Quittung Identifier  (serialnumber generated during receipt generation process)\n                          example: \"0x29fB5aeE3Ca29f239E7f771280cf4e2fD3999DF3\"\n                          type: string\n                        signaturecnt:\n                          description: Sequential number of signed transactions by TSE service.\n                          example: 2\n                          type: integer\n                        start:\n                          description: Starting timestamp of signature process by TSE service in UTC ISO Format.\n                          example: 2021-07-12T18:43:05.582Z\n                          type: string\n                        timeformat:\n                          description: Format of Timestamp to aply to  KassenSichV regulation\n                          example: utcTime\n                          type: string\n                        txcnt:\n                          description: Sequential number of this transaction (requester)\n                          example: 1\n                          type: integer\n                      type: object\n                  publickey:\n                    description: Public Key of TSE\n                    type: string\n                  raw:\n                    description: Datastring of JSON Object as it got used to create signature.\n                    type: string\n                  signature:\n                    description: Resulting signature by signing raw datastring using private key of TSE.\n                    type: string\n                type: object\n          description: Success\n      summary: Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).\n      tags:\n        - Strom-Quittung\n        - TSE\n  /quittung/tsedata:\n    post:\n      description: |\n        Allows to retrieve input string for a signing process.\n      operationId: quittungTSEData\n      parameters:\n        - description: Quittung Identifier  (serialnumber generated during receipt generation process)\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n      summary: Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).\n      tags:\n        - Strom-Quittung\n        - TSE\n  /quittung/tsesignature:\n    post:\n      description: |\n        Allows to retrieve digital signature for a given receipt.\n      operationId: quittungTSEsignature\n      parameters:\n        - description: Quittung Identifier  (serialnumber generated during receipt generation process)\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n      summary: Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).\n      tags:\n        - Strom-Quittung\n        - TSE\n  /quittung/zugferd:\n    get:\n      description: |\n        Allows to retrieve XML of the zugferd invoice.\n      operationId: quittungZugferd\n      parameters:\n        - description: Quittung Identifier  (serialnumber generated during receipt generation process)\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n      summary: Retrieve Zugferd XML for a given receipt (Strom-Quittung).\n      tags:\n        - Strom-Quittung\n        - TSE\n  /stromkonto/balances:\n    get:\n      description: |\n        Stromkonto represents a core component of the Corrently Ecosystem. It is a ledger for green energy related transactions and gets heavily used by the public Web-UI on www.stromkonto.net . Beside of some decoration and reformating operations all data is backed by the [Energychain blockchain](https://github.com/energychain/) to provide consensus of balances and transactions. Use this API Endppoint if you prefere not to work with low level Distributed Ledger Technology (Blockchain).\n      operationId: stromkontoBalances\n      parameters:\n        - description: Ethereum style address referencing a valid account (AKA Stromkonto).\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Balance\"\n                type: array\n          description: Success\n      summary: Balances\n      tags:\n        - Stromkonto (Ledger)\n  /stromkonto/choices:\n    get:\n      description: |\n        Signable choices (contract changes) for customer.\n      operationId: stromkontoChoices\n      parameters:\n        - description: Ethereum style address referencing a valid account alias (never use Stromkonto directly!).\n          in: query\n          name: account\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Balance\"\n                type: array\n          description: Success\n      summary: Selectable Choices for customer\n      tags:\n        - Stromkonto (Ledger)\n  /stromkonto/login:\n    post:\n      description: |\n        Sends a mail to a given email address to login this user. This function makes life a bit easier in order to not having to deal with private key protection on the user side as a shared key is used to sign transactions onbehalf of a particular account.  However viewing consensus information (balances) are public and *might move* from account to account without prior notification. Best practice for third party uses is to always start a session with the login RESP call and only create a user in case the response indicates an `unregistered` status.\n      operationId: stromkontoLogin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    description: Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.\n                    enum:\n                      - registered\n                      - unregistered\n                    type: string\n                type: object\n          description: Success\n      summary: Login (via Mail)\n      tags:\n        - Stromkonto (Ledger)\n  /stromkonto/prepareTransaction:\n    post:\n      description: |\n        Prepares and inques a transaction (transfer) between two accounts (Stromkonten). This might be used to send any balanced entity. Using this endpoint will only prepare the transaction and enques it for signing and countersigning. This is done from within the user UI using validation process. Note: This API method does not validate any transations. In other words authentication, authorization, validation and actual transfer of value is done using a smart contract during processing in the energy blockchain.\n      operationId: prepareTransaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                account:\n                  description: Stromkonto account address of sender\n                  type: string\n                signature:\n                  description: Signature per Stromkonto setting (might be simple email confirmation link)\n                  type: string\n                to:\n                  description: Stromkonto account address of reciever\n                  type: string\n                value:\n                  description: Amount to transfer (in Watthours for electricity, or pcs for trees)\n                  type: integer\n                variation:\n                  enum:\n                    - gsb\n                    - erzeugung\n                    - eigenstrom\n                    - co2\n                    - baeume\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      summary: Prepare Transaction\n      tags:\n        - Stromkonto (Ledger)\n  /stromkonto/register:\n    post:\n      description: |\n        Calling this method with an unregistered (new) email will create a new account (Stromkonto) with all balances having a value of `0` and no transaction history. In addition some basic properties like region and zipcode are set to allow further operation of account.\n      operationId: stromkontoRegister\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                first_name:\n                  type: string\n                last_name:\n                  type: string\n                zipcode:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      summary: Register (new Stromkonto)\n      tags:\n        - Stromkonto (Ledger)\n  /tariff/components:\n    get:\n      description: |\n        Provides insides into the different cost components of energy for a private household.\n        Sample Request: https://api.corrently.io/v2.0/tariff/components?email=demo%40corrently.io\u0026zip=69168\u0026kwha=3300\n      operationId: tariffcomponents\n      parameters:\n        - description: Zipcode (Postzleitzahl) of a city in Germany.\n          in: query\n          name: zipcode\n          schema:\n            type: string\n        - description: Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time\n          in: query\n          name: email\n          schema:\n            type: string\n        - description: Total amount of energy in kilo-watt-hours per year. (sample 2100)\n          in: query\n          name: kwha\n          schema:\n            type: integer\n        - description: If provided all results will be scaled to this timeframe\n          in: query\n          name: milliseconds\n          schema:\n            type: integer\n        - description: If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created.\n          in: query\n          name: wh\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/componentsh0\"\n                type: object\n          description: Success\n      summary: Energy Tariff price components\n      tags:\n        - Tariff (Price API)\n  /tariff/slph0:\n    get:\n      description: |\n        Provides pricing data for private households with standard load profiles (Standardlastprofil H0).\n      operationId: tariffSLPH0\n      parameters:\n        - description: Zipcode (Postzleitzahl) of a city in Germany.\n          in: query\n          name: zipcode\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Tariffh0\"\n                type: array\n          description: Success\n      summary: Energy Tariff information\n      tags:\n        - Tariff (Price API)\n  /wim/status:\n    get:\n      description: |\n        Access to status information of an existing metering change and allocation process.\n      operationId: wimstatus\n      parameters:\n        - description: VID key of the process.\n          in: query\n          name: vid\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  wim_started:\n                    description: Starting time of process\n                    example: 1615914297977\n                    type: integer\n                  wim_status:\n                    description: Latest Status\n                    example: Erfolgreiche Prüfung\n                    type: string\n                type: object\n          description: Success\n      summary: WiM Proess Informtion\n      tags:\n        - WiM (Wechselprozesse im Messwesen Strom - Status API)\ncomponents:\n  schemas:\n    Balance:\n      properties:\n        balance:\n          description: Sum owned - sum due by account\n          example: 20\n          type: integer\n        haben:\n          description: Sum owned by account\n          example: 20\n          type: integer\n        soll:\n          description: Sum due by account\n          example: 20\n          type: integer\n        txs:\n          items:\n            $ref: \"#/components/schemas/Transactions\"\n          type: array\n        variation:\n          description: Type of subbalance (sub account)\n          enum:\n            - gsb\n            - erzeugung\n            - eigenstrom\n            - co2\n            - baeume\n          type: string\n      type: object\n    DispatchLocation:\n      properties:\n        energy:\n          description: Percentage of energy\n          example: 0.2345677\n          type: number\n        location:\n          description: GeoJSON encoded location of target or source of green energy.\n          type: object\n      type: object\n    ForecastItem:\n      properties:\n        co2_g_oekostrom:\n          description: CO2 footprint in Gramm per kwh (only Green Power)\n          example: 23\n          type: integer\n        energyprice:\n          description: Local/regional energyprice modification (cent per kWh or euro per MWh).\n          example: -0.219\n          type: number\n        epochtime:\n          description: Timestamps in Seconds\n          example: 1609293600\n          type: integer\n        gsi:\n          description: Actual GreenPowerIndex for given Timestamp (between 0-100)\n          example: 43\n          type: integer\n        scaled:\n          description: Indicates if scaling is in operation to predict values\n          type: boolean\n        sci:\n          description: Subindex just for Solar Energy\n          example: 43\n          type: integer\n        timeStamp:\n          description: Timestamp in Standard Milliseconds\n          example: 1609293600000\n          type: integer\n      type: object\n    MarketData:\n      properties:\n        end_timestamp:\n          description: Timestamp in Standard Milliseconds\n          example: 1609293600000\n          type: integer\n        marketprice:\n          description: Actual Marketprice for regional green power in EUR per MWh\n          example: 43\n          type: number\n        start_timestamp:\n          description: Timestamp in Standard Milliseconds\n          example: 1609293600000\n          type: integer\n      type: object\n    Tariffh0:\n      properties:\n        ap:\n          description: Energy price in cent per kwh. (Arbeitspreis) including all taxes and fees.\n          example: 22.12\n          type: integer\n        gp:\n          description: Base price in euro per montah (Grundpreis) including all taxes and fees.\n          example: 7.5\n          type: integer\n      type: object\n    Transactions:\n      properties:\n        cashier:\n          description: Pretty print of counter signing party\n          example: Miller\n          type: string\n        timeStamp:\n          description: Cross signed timestamp of transaction\n          example: 1606777200000\n          type: integer\n        txid:\n          description: Unique hash of this transaction as provided by counter signing party\n          example: 722d30b2-b46f-4ed4-a8cd-16d262180d37\n          type: string\n        txtype:\n          description: Type of transaction per cashier implementation and schema\n          example: bank.incGSB\n          type: string\n        value:\n          description: Amount covered by transaction\n          example: 1337\n          type: integer\n      type: object\n    componentsh0:\n      properties:\n        components:\n          description: Sub components of this price\n          items:\n            $ref: \"#/components/schemas/componentsh0\"\n          type: array\n        describtion:\n          description: What is this price component about\n          example: Grundgebühr\n          type: string\n        mutlityplier:\n          description: Frequency/dependency of component\n          example: month\n          type: string\n        per:\n          description: Single unit price multiyplier is based on\n          example: 0.012\n          format: double\n          type: number\n        sum:\n          description: Total sum in Euro for this price component.\n          example: 22.12\n          format: double\n          type: number\n      type: object\n    easee-charger:\n      properties:\n        id:\n          description: Given ID by easee api\n          example: EH780684\n          type: string\n        lastSession:\n          description: lastSession Info as given by easee API\n          type: string\n        name:\n          description: Name set for charger\n          type: string\n      type: object\n    ommeters:\n      properties:\n        currentScalingFactor:\n          description: Factor imposed on metered current by a transducer\n          type: integer\n        loadProfileType:\n          description: Metering load profile type associated with the meter\n          type: string\n        location:\n          description: Basic address information for geo coding\n          type: string\n        manufacturerId:\n          description: DLMS manufacturerId\n          type: string\n        measurementType:\n          description: Physical quantity being measured by the meter\n          type: string\n        meta:\n          description: Statistical metadata for this household\n          type: string\n        meterId:\n          description: identifier to be used in other methods like readings or activities.\n          example: gAAAAABgsYVSfcCjJZV5w2wGBTzOXCihY7dMaDyypwcbJzAELvxeCDaXiy65H2QwtY-7usSOfoqEIomTJjQb1yyIXZfFnTY2pmLgIu_DVw1rjppFte56yWBD5Fgrmbh2KyOkMNUr8zxO\n          type: string\n        scalingFactor:\n          description: Factor imposed on metered current AND voltage by a transducer\n          type: integer\n        type:\n          description: Device type of the meter\n          type: string\n        voltageScalingFactor:\n          description: Factor imposed on metered voltage by a transducer\n          type: integer\n      type: object\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/corrently.io/2.0.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/corrently.io/2.0.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}