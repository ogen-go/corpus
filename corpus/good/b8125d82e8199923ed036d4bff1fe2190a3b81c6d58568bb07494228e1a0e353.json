{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cardbox/backend"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api-internal/openapi.yaml",
			"byteSize": 21191,
			"content": "openapi: 3.0.2\ninfo:\n  title: Cardbox API Internal\n  description: API for the main frontend application.\n  version: 0.1.0\nexternalDocs:\n  description: Source code\n  url: https://github.com/cardbox/backend/tree/master/api-internal\nservers:\n  - url: http://localhost:9110/\n  - url: https://cardbox.local/api/internal\n  - url: https://cardbox.sova.dev/api/internal\n\npaths:\n  /accesso/auth.done:\n    post:\n      summary: Redirect endpoint\n      operationId: authDone\n      tags: [ Auth ]\n      description: |-\n        Redirect endpoint\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                authorizationCode:\n                  type: string\n                  description: Authorization code\n      responses:\n        200:\n          $ref: \"#/components/responses/AuthDoneSuccess\"\n        401:\n          $ref: \"#/components/responses/AuthDoneFailed\"\n        500:\n          description: \"Something went wrong\"\n  /accesso/auth.params:\n    post:\n      summary: Get auth params\n      operationId: authParams\n      tags: [ Auth ]\n      description: |-\n        Get accesso auth url\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: string\n                  description: oauth state\n      responses:\n        200:\n          $ref: \"#/components/responses/AuthUrlSuccess\"\n        500:\n          description: SERVER_ERROR\n\n  /cards.search:\n    post:\n      summary: Search all cards\n      operationId: cardsSearch\n      tags: [ Cards ]\n      description: |-\n        Full text search of cards\n          - `POST /api/internal/cards.search '{\"query\": SEARCH_TERM}'`\n          - By title, content, tags (and maybe by author)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [ query ]\n              properties:\n                query:\n                  type: string\n                  description: Search term\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [cards, users]\n                properties:\n                  cards:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Card'\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        500:\n          description: SERVER_ERROR\n\n  /cards.feed:\n    post:\n      summary: Get recommended cards (for feed page)\n      operationId: cardsFeed\n      tags: [ Cards ]\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [top, latest]\n                properties:\n                  top:\n                      type: object\n                      required: [cards, users]\n                      properties:\n                        cards:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Card'\n                        users:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/User'\n                  latest:\n                      type: object\n                      required: [cards, users]\n                      properties:\n                        cards:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Card'\n                        users:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/User'\n        500:\n          description: SERVER_ERROR\n  /cards.list:\n    post:\n      summary: Get cards list\n      operationId: cardsList\n      tags: [ Cards ]\n      description: |-\n        1. **Personal cards**\n            - `POST /api/v1/card/list`\n        2. **Cards of user**\n            - `POST /api/v1/card/list '{\"authorId\": USER_ID}'`\n\n        - `TODO:` Add pagination later\n\n        - `TODO:` Maybe there is should be OData-like format instead of partial params\n\n        - `TODO:` Add later access control for card by it's visibilty and user permissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                authorId:\n                  type: string\n                  format: uuid\n                  description: Author id\n                favorites:\n                  type: boolean\n                  description: Show favorited cards instead of created\n                  default: false\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [cards, users]\n                properties:\n                  cards:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Card'\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [error, code]\n                properties:\n                  error:\n                    type: boolean\n                  code:\n                    type: string\n                    enum:\n                      - invalid_params\n                      - unauthorized\n        500:\n          description: SERVER_ERROR\n  /cards.get:\n    post:\n      summary: Get card\n      operationId: cardsGet\n      tags: [ Cards ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [cardId]\n              properties:\n                cardId:\n                  type: string\n                  format: uuid\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [card, user]\n                properties:\n                  card:\n                    $ref: '#/components/schemas/Card'\n                  user:\n                    $ref: '#/components/schemas/User'\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [error, code]\n                properties:\n                  error:\n                    type: boolean\n                  code:\n                    type: string\n                    enum:\n                      - card_not_found\n        500:\n          description: SERVER_ERROR\n  /cards.create:\n    post:\n      tags: [ Cards ]\n      summary: Create card\n      operationId: cardsCreate\n      requestBody:\n        description: |-\n          - author = AuthToken\n          - createdAt = DateTime.Now()\n          - updatedAt = DateTime.Now()\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [title, content]\n              properties:\n                title:\n                  type: string\n                content:\n                  type: object\n                  properties: {}\n                tags:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [card]\n                properties:\n                  card:\n                    $ref: '#/components/schemas/Card'\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [error]\n                properties:\n                  error:\n                    type: string\n                    enum:\n                      - empty_title\n                      - invalid_content\n        500:\n          description: SERVER_ERROR\n  /cards.edit:\n    post:\n      tags: [ Cards ]\n      summary: Update card\n      description: |-\n        `IMPORTANT:` There is should be check that user has required permissions for editing card\n          - **For prototype**: that he is card's author\n      operationId: cardsEdit\n      requestBody:\n        description: |-\n          - Not all properties are required (title, content, tags)\n          - author = AuthToken\n          - createdAt = DateTime.Now()\n          - updatedAt = DateTime.Now()\n        content:\n          application/json:\n            schema:\n              required: [cardId]\n              properties:\n                cardId:\n                  type: string\n                  format: uuid\n                title:\n                  type: string\n                content:\n                  type: object\n                tags:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                required: [card]\n                properties:\n                  card:\n                    $ref: '#/components/schemas/Card'\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                required: [error]\n                properties:\n                  error:\n                    type: string\n                    enum:\n                      - card_not_found\n                      - invalid_payload\n                      - no_access\n        500:\n          description: SERVER_ERROR\n  /cards.delete:\n    post:\n      tags: [ Cards ]\n      summary: Delete card\n      operationId: cardsDelete\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required: [cardId]\n              properties:\n                cardId:\n                  type: string\n                  format: uuid\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                required: [cardId]\n                properties:\n                  cardId:\n                    type: string\n                    format: uuid\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                required: [error]\n                properties:\n                  error:\n                    type: string\n                    enum:\n                      - card_not_found\n                      - no_access\n        500:\n          description: SERVER_ERROR\n  /cards.save:\n    post:\n      tags: [ Cards ]\n      summary: Add card to favorites\n      operationId: cardsSave\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required: [cardId]\n              properties:\n                cardId:\n                  type: string\n                  format: uuid\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                required: [card, boxId]\n                properties:\n                  card:\n                    $ref: \"#/components/schemas/Card\"\n                  boxId:\n                    type: string\n                    format: uuid\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                required: [error, code]\n                properties:\n                  error:\n                    type: boolean\n                  code:\n                    type: string\n                    enum:\n                      - already_saved\n                      - card_not_found\n                      - no_access\n        500:\n          description: SERVER_ERROR\n  /cards.unsave:\n    post:\n      tags: [ Cards ]\n      summary: Remove card from favorites\n      operationId: cardsUnsave\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required: [cardId]\n              properties:\n                cardId:\n                  type: string\n                  format: uuid\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                required: [card, boxId]\n                properties:\n                  card:\n                    $ref: \"#/components/schemas/Card\"\n                  boxId:\n                    type: string\n                    format: uuid\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                required: [error, code]\n                properties:\n                  error:\n                    type: boolean\n                  code:\n                    type: string\n                    enum:\n                      - already_unsaved\n                      - card_not_found\n                      - no_access\n        500:\n          description: SERVER_ERROR\n\n  /session.get:\n    post:\n      operationId: sessionGet\n      tags: [ Session ]\n      # TODO: Add rate limit and CSRF protection\n      description: Read session token and show current session.\n        Authenticated checked by session-token cookie\n      responses:\n        200:\n          $ref: \"#/components/responses/SessionGetSuccess\"\n        401:\n          description: User not authorized\n        500:\n          description: Something went wrong\n\n  /session.delete:\n    post:\n      operationId: sessionDelete\n      tags: [ Session ]\n      # TODO: Add rate limit and CSRF protection\n      description: Delete current or all sessions\n      requestBody:\n        $ref: \"#/components/requestBodies/SessionDelete\"\n      responses:\n        200:\n          description: session deleted\n        400:\n          $ref: \"#/components/responses/SessionDeleteFailure\"\n        401:\n          description: User not authorized\n        500:\n          description: Something went wrong\n  \n  /users.search:\n    post:\n      summary: Search all users\n      operationId: usersSearch\n      tags: [ Users ]\n      description: |-\n        Full text search of users\n          - `POST /api/internal/users.search '{\"query\": SEARCH_TERM}'`\n          - By general fields (bio, username, firstName, lastName, work)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [ query ]\n              properties:\n                query:\n                  type: string\n                  description: Search term\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [users]\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        500:\n          description: SERVER_ERROR\n  /users.get:\n    post:\n      summary: Get user by username\n      operationId: usersGet\n      tags: [ Users ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [username]\n              properties:\n                username:\n                  type: string\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [user]\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n        400:\n          description: CLIENT_ERROR\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [error, code]\n                properties:\n                  error:\n                    type: boolean\n                  code:\n                    type: string\n                    enum:\n                      - user_not_found\n        500:\n          description: SERVER_ERROR\n\ncomponents:\n  requestBodies:\n    SessionDelete:\n      required: true\n      description: sd\n      content:\n        application/json:\n          schema:\n            required:\n              - deleteAllSessions\n            properties:\n              deleteAllSessions:\n                type: boolean\n\n  responses:\n    AuthDoneFailed:\n      description: Failed to authorize\n      content:\n        application/json:\n          schema:\n            required: [ error ]\n            properties:\n              error:\n                type: string\n                enum:\n                  - \"accesso_failed\"\n                  - \"try_later\"\n    AuthDoneSuccess:\n      description: \"\"\n      content:\n        application/json:\n          schema:\n            required: [ user ]\n            properties:\n              user:\n                $ref: \"#/components/schemas/SessionUser\"\n    AuthUrlSuccess:\n      description: \"\"\n      content:\n        application/json:\n          schema:\n            required: [ accessoUrl ]\n            properties:\n              accessoUrl:\n                type: string\n                description: Accesso Url\n\n    SessionGetSuccess:\n      description: Session exists\n      content:\n        application/json:\n          schema:\n            required:\n              - user\n            properties:\n              user:\n                $ref: \"#/components/schemas/SessionUser\"\n\n    SessionDeleteFailure:\n      description: failed to delete session\n      content:\n        application/json:\n          schema:\n            required:\n              - error\n            properties:\n              error:\n                type: string\n                enum:\n                  - \"invalid_payload\"\n\n  schemas:\n    SessionUser:\n      type: object\n      required: [ id, firstName, lastName ]\n      properties:\n        avatar:\n          type: string\n          nullable: true\n        id:\n          type: string\n          format: uuid\n        firstName:\n          type: string\n        lastName:\n          type: string\n        username:\n          type: string\n\n    User:\n      type: object\n      required: [id, username, firstName, lastName, socials]\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: ID\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        bio:\n          type: string\n          nullable: true\n        avatar:\n          type: string\n          nullable: true\n          description: |-\n            Later, can implement as `File` entity\n        socials:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserSocial'\n        work:\n          type: string\n          nullable: true\n          description: |-\n            Later, can implement as `Work` entity\n        roles:\n          type: array\n          items:\n            type: string\n          nullable: true\n          deprecated: true\n          description: |-\n            Later, can implement checking user permissions by `Role` entity\n    Card:\n      type: object\n      required: [id, content, title, createdAt, updatedAt, authorId, tags, meta]\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        content:\n          type: array\n          items:\n            type: object\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        authorId:\n          type: string\n          format: uuid\n          description: Author user uuid\n        tags:\n          type: array\n          items:\n            type: string\n          description: |-\n            Later, we can create `Tag` entity \n        summary:\n          type: string\n          nullable: true\n          deprecated: true\n          description: |-\n            Later, we can add this field\n            For custom text-overflow (instead of truncating with emphasizing)\n        meta:\n          type: object\n          required: [isSaved]\n          description: Additional meta-information for utilitary purpose\n          properties:\n            isSaved:\n              type: boolean\n              description: Is card saved for current authorized user\n    UserSocial:\n      type: object\n      required: [id, type, link, username]\n      properties:\n        id:\n          type: string\n          format: uuid\n        type:\n          type: string\n          description: github | devto | twitter | ...\n        link:\n          type: string\n        username:\n          type: string\n          description: Username at social platform (gaearon =\u003e github/gaearon)\n",
			"canonicalURL": "/github.com/cardbox/backend@be6455ff1f24370ac7e957acb4dc9f7819e03d71/-/blob/api-internal/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cardbox/backend/blob/be6455ff1f24370ac7e957acb4dc9f7819e03d71/api-internal/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}