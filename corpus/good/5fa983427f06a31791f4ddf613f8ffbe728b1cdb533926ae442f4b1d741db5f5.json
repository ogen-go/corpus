{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/commercialhaskell/all-cabal-metadata"
		},
		"file": {
			"name": "compaREST.yaml",
			"size": 0,
			"path": "packages/co/compaREST.yaml",
			"byteSize": 12686,
			"content": "homepage: ''\nchangelog-type: markdown\nhash: aa74ccc6ed17dac8d1bc9405b87755319c4f79ab4df9ea93e0797b4f1f66fcfb\ntest-bench-deps:\n  bytestring: '\u003e=0.10.12.0 \u0026\u0026 \u003c0.11'\n  base: '\u003e=4.12.0.0 \u0026\u0026 \u003c4.16'\n  tasty-golden: '\u003e=2.3.5 \u0026\u0026 \u003c2.4'\n  text: '\u003e=1.2.4.1 \u0026\u0026 \u003c1.3'\n  compaREST: -any\n  filepath: '\u003e=1.4.2.1 \u0026\u0026 \u003c1.5'\n  data-default: '\u003e=0.7.1.1 \u0026\u0026 \u003c0.8'\n  pandoc-types: '\u003e=1.22.1 \u0026\u0026 \u003c1.23'\n  lens: '\u003e=4.19.2 \u0026\u0026 \u003c4.20'\n  pandoc: '\u003e=2.14.0.3 \u0026\u0026 \u003c2.15'\n  tasty: '\u003e=1.4.2.1 \u0026\u0026 \u003c1.5'\n  yaml: '\u003e=0.11.8.0 \u0026\u0026 \u003c0.12'\n  directory: '\u003e=1.3.6.0 \u0026\u0026 \u003c1.4'\nmaintainer: compaREST@typeable.io\nsynopsis: Compatibility checker for OpenAPI\nchangelog: |\n  # Changelog\n\n  `compaREST` uses [PVP Versioning][1].\n\n  ## 0.1.0.1\n\n  * Fixed an issue related to empty commit SHAs in GitHub Actions.\n\n  ## 0.1.0.0\n\n  * Initial release.\n\n  [1]: https://pvp.haskell.org\nbasic-deps:\n  envy: '\u003e=2.1.0.0 \u0026\u0026 \u003c2.2'\n  insert-ordered-containers: '\u003e=0.2.5.1 \u0026\u0026 \u003c0.3'\n  generic-data: '\u003e=0.9.2.1 \u0026\u0026 \u003c0.10'\n  free: '\u003e=5.1.7 \u0026\u0026 \u003c5.2'\n  bytestring: '\u003e=0.10.12.0 \u0026\u0026 \u003c0.11'\n  open-union: '\u003e=0.4.0.0 \u0026\u0026 \u003c0.5'\n  base: '\u003e=4.12.0.0 \u0026\u0026 \u003c4.16'\n  comonad: '\u003e=5.0.8 \u0026\u0026 \u003c5.1'\n  freer-simple: '\u003e=1.2.1.2 \u0026\u0026 \u003c1.3'\n  unordered-containers: '\u003e=0.2.16.0 \u0026\u0026 \u003c0.3'\n  text: '\u003e=1.2.4.1 \u0026\u0026 \u003c1.3'\n  compaREST: -any\n  doctemplates: ==0.9.*\n  filepath: '\u003e=1.4.2.1 \u0026\u0026 \u003c1.5'\n  ordered-containers: '\u003e=0.2.2 \u0026\u0026 \u003c0.3'\n  data-default: '\u003e=0.7.1.1 \u0026\u0026 \u003c0.8'\n  pandoc-types: '\u003e=1.22.1 \u0026\u0026 \u003c1.23'\n  lattices: '\u003e=2.0.2 \u0026\u0026 \u003c2.1'\n  tagged: '\u003e=0.8.6.1 \u0026\u0026 \u003c0.9'\n  containers: '\u003e=0.6.5.1 \u0026\u0026 \u003c0.7'\n  pandoc: '\u003e=2.14.0.3 \u0026\u0026 \u003c2.15'\n  openapi3: '\u003e=3.1.0 \u0026\u0026 \u003c3.2'\n  mtl: '\u003e=2.2.2 \u0026\u0026 \u003c2.3'\n  github: ==0.26.*\n  hashable: '\u003e=1.3.0.0 \u0026\u0026 \u003c1.4'\n  file-embed: '\u003e=0.0.15.0 \u0026\u0026 \u003c0.1'\n  type-fun: '\u003e=0.1.3 \u0026\u0026 \u003c0.2'\n  attoparsec: '\u003e=0.13.2.5 \u0026\u0026 \u003c0.14'\n  transformers: '\u003e=0.5.6.2 \u0026\u0026 \u003c0.6'\n  optparse-applicative: '\u003e=0.16.1.0 \u0026\u0026 \u003c0.17'\n  scientific: '\u003e=0.3.7.0 \u0026\u0026 \u003c0.4'\n  pcre2: '\u003e=1.1.5 \u0026\u0026 \u003c1.2'\n  typerep-map: '\u003e=0.3.3.0 \u0026\u0026 \u003c0.4'\n  aeson: '\u003e=1.5.6.0 \u0026\u0026 \u003c1.6'\n  yaml: '\u003e=0.11.8.0 \u0026\u0026 \u003c0.12'\n  http-media: '\u003e=0.8.0.0 \u0026\u0026 \u003c0.9'\n  vector: '\u003e=0.12.3.1 \u0026\u0026 \u003c0.13'\nall-versions:\n- 0.1.0.0\n- 0.1.0.1\nauthor: Typeable\nlatest: 0.1.0.1\ndescription-type: markdown\ndescription: |\n  # compaREST\n\n  [![Hackage](https://img.shields.io/hackage/v/compaREST.svg?logo=haskell)](https://hackage.haskell.org/package/compaREST)\n  [![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n  Compatibility checker for OpenAPI\n\n  ## Using compaREST in Github Actions\n\n  Add the following step to your  Github Actions workflow:\n\n  ```yaml\n  - uses: typeable/comparest\n      if: ${{ github.event_name == 'pull_request' }}\n      with:\n        old: old-openapi.yaml\n        new: new-openapi.yaml\n  ```\n\n  The `new` and `old` values should be paths to your OpenAPI specifications you want to compare.\n\n  You will get something like this in your pull requests:\n\n  ![](docs/img/github-action-report.png)\n\n  For more detail please see our [integration guide](docs/Integration_guide.md).\n\n  ## An example\n\n  ### Your situation\n\n  You are developing a very important server with a REST API. You have clients who use your API that you do not control. Say, you are also developing a mobile app that uses your API and you can't force someone to update to the latest version. (Or you prefer not to for UX reasons.)\n\n  You have recently released version 1.0 and things are going great: user are downloading your app, servers are processing requests.\n\n  You describe your API in a file `api-1.0.0.yaml`:\n\n  ```yaml\n  openapi: \"3.0.0\"\n  info:\n    version: 1.0.0\n    title: Swagger Petstore\n    license:\n      name: MIT\n  servers:\n    - url: https://example.com\n  paths:\n    /pets:\n      get:\n        parameters:\n          - name: limit\n            in: query\n            required: false\n            schema:\n              type: integer\n              maximum: 20\n        responses:\n          \"200\":\n            description: \"\"\n            headers:\n              x-next:\n                schema:\n                  type: string\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Pets\"\n      post:\n        requestBody:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        responses:\n          \"201\":\n            description: \"\"\n  components:\n    schemas:\n      Pet:\n        type: object\n        required:\n          - id\n          - name\n        properties:\n          id:\n            type: integer\n          name:\n            type: string\n            minLength: 3\n            maxLength: 10\n      Pets:\n        type: array\n        items:\n          $ref: \"#/components/schemas/Pet\"\n  ```\n\n  ### Evolving your product\n\n  Enthused over your initial success you hurry to release a new and improved version of your API and mobile app.\n\n  After a round of very intense programming you take a look at your new `api-1.1.0.yaml`:\n\n  ```yaml\n  openapi: \"3.0.0\"\n  info:\n    version: 1.1.0\n    title: Swagger Petstore\n    license:\n      name: MIT\n  servers:\n    - url: https://example.com\n  paths:\n    /pets:\n      get:\n        parameters:\n          - name: limit\n            in: query\n            required: false\n            schema:\n              type: integer\n              maximum: 30\n        responses:\n          \"200\":\n            description: \"\"\n            headers:\n              x-next:\n                schema:\n                  type: string\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Pets\"\n      post:\n        requestBody:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        responses:\n          \"201\":\n            description: \"\"\n  components:\n    schemas:\n      Pet:\n        type: object\n        required:\n          - id\n          - name\n        properties:\n          id:\n            type: integer\n          name:\n            type: string\n            minLength: 1\n            maxLength: 15\n          weight:\n            type: integer\n      Pets:\n        type: array\n        items:\n          $ref: \"#/components/schemas/Pet\"\n  ```\n\n  Looking at the very large and complex API description, you grow more and more concerned that your old mobile app might stop working when you update the server. But the spec is too large and too complex to reasonably assess this manually.\n\n  ### Assessing compatibility automatically\n\n  Luckily, you have access to compaREST which can programmatically analyze your APIs and determine what, if anything, breaks compatibility and what doesn't.\n\n  You can call it, passing the API your client will be aware of, and the API your server will serve like so:\n\n  ```bash\n  docker run --rm -v $(pwd):/data:rw typeable/comparest --client /data/api-1.0.0.yaml --server /data/api-1.1.0.yaml --output /data/report.md\n  ```\n\n  Running this command will output a file `report.md`, containing the compatibility report between the two APIs:\n\n  \u003e # Summary\n  \u003e\n  \u003e | [❌ Breaking changes](#breaking-changes) | [⚠️ Non-breaking changes](#non-breaking-changes) |\n  \u003e |------------------------------------------|--------------------------------------------------|\n  \u003e | 5                                        | 6                                                |\n  \u003e\n  \u003e # \u003cspan id=\"breaking-changes\"\u003e\u003c/span\u003e❌ Breaking changes\n  \u003e\n  \u003e ## **GET** /pets\n  \u003e\n  \u003e ### ⬅️☁️ JSON Response – 200\n  \u003e\n  \u003e #### `$[*].name(String)`\n  \u003e\n  \u003e 1.  Maximum length of the string changed from 10 to 15.\n  \u003e\n  \u003e 2.  Minimum length of the string changed from 3 to 1.\n  \u003e\n  \u003e ## **POST** /pets\n  \u003e\n  \u003e ### ➡️☁️ JSON Request\n  \u003e\n  \u003e #### `$.weight`\n  \u003e\n  \u003e 1.  Values are now limited to the following types:\n  \u003e\n  \u003e     -   Number\n  \u003e\n  \u003e 2.  The property was previously implicitly described by the catch-all\n  \u003e     \"additional properties\" case. It is now explicitly defined.\n  \u003e\n  \u003e #### `$.weight(Number)`\n  \u003e\n  \u003e Value is now a multiple of 1.0.\n  \u003e\n  \u003e # \u003cspan id=\"non-breaking-changes\"\u003e\u003c/span\u003e⚠️ Non-breaking changes\n  \u003e\n  \u003e ## **GET** /pets\n  \u003e\n  \u003e ### Parameter limit\n  \u003e\n  \u003e #### JSON Schema\n  \u003e\n  \u003e ##### `$(Number)`\n  \u003e\n  \u003e Upper bound changed from 20.0 inclusive to 30.0 inclusive.\n  \u003e\n  \u003e ### ⬅️☁️ JSON Response – 200\n  \u003e\n  \u003e #### `$[*].weight`\n  \u003e\n  \u003e 1.  Values are now limited to the following types:\n  \u003e\n  \u003e     -   Number\n  \u003e\n  \u003e 2.  The property was previously implicitly described by the catch-all\n  \u003e     \"additional properties\" case. It is now explicitly defined.\n  \u003e\n  \u003e #### `$[*].weight(Number)`\n  \u003e\n  \u003e Value is now a multiple of 1.0.\n  \u003e\n  \u003e ## **POST** /pets\n  \u003e\n  \u003e ### ➡️☁️ JSON Request\n  \u003e\n  \u003e #### `$.name(String)`\n  \u003e\n  \u003e 1.  Maximum length of the string changed from 10 to 15.\n  \u003e\n  \u003e 2.  Minimum length of the string changed from 3 to 1.\n\n  You now know exactly in what situations and in what way your 1.0 version of the app will break if you deploy your 1.1 version of the server.\n\n  ### Additional formats\n\n  You can also produce a self-contained HTML report that you can open in your browser by simply omitting the file extension of the output file:\n\n  ```bash\n  docker run --rm -v $(pwd):/data:rw typeable/comparest --client /data/api-1.0.0.yaml --server /data/api-1.1.0.yaml --output /data/report\n  ```\n\n  ## CLI docs\n\n  For more detail please see our [user guide](docs/User_guide.md).\n\n  ```\n  Usage: comparest (-c|--client ARG) (-s|--server ARG)\n                   [--silent | --only-breaking | --all] [-o|--output ARG]\n                   [--folding-block-quotes-style | --header-style]\n                   [--signal-exit-code]\n    A tool to check compatibility between two OpenAPI specifications.\n\n    Usage examples\n\n        Compare files old.yaml with new.yaml and output the resulting report to\n        stdout:\n\n            comparest -c old.yaml -s new.yaml\n\n        Only output breaking changes and write a styled HTML report to file\n        report.html:\n\n            comparest -c old.yaml -s new.yaml --only-breaking -o report\n\n        Don't output anything, only fail if there are breaking changes:\n\n            comparest -c old.json -s new.json --silent\n\n        Write full report suitable for embedding into a GitHub comment to\n        report.html:\n\n            comparest -c old.json -s new.json --folding-block-quotes-style -o report.html\n\n  Available options:\n    -h,--help                Show this help text\n    -c,--client ARG          A path to the file containing the specification that\n                             will be used for the client of the API. Can be either\n                             a YAML or JSON file.\n    -s,--server ARG          A path to the file containing the specification that\n                             will be used for the server of the API. Can be either\n                             a YAML or JSON file.\n    --silent                 Silence all output. Only makes sense in combination\n                             with --signal-exit-code.\n    --only-breaking          Only report breaking changes in the output.\n    --all                    Report both incompatible and compatible changes.\n                             Compatible changes will not trigger a failure exit\n                             code.\n    -o,--output ARG          The file path where the output should be written. If\n                             the option is omitted the result will be written to\n                             stdout.\n\n                             The file extension is used to determine the type of\n                             the output file.\n\n                             Supports many formats such as markdown, html, rtf,\n                             doc, txt, rst, and many more.\n\n                             Leave out the extension to produce a self-contained\n                             HTML report with styling.\n    --folding-block-quotes-style\n                             The report tree is structured using summary/detail\n                             HTML elements and indented using block quotes. This\n                             style renders well on GitHub.Intended for HTML output\n                             format. Markdown has rendering bugs on GitHub.\n    --header-style           The report tree is structured using increasing levels\n                             of headers.\n    --signal-exit-code       Signal API compatibility with the exit code.\n\n                             Exit with 0 if there are no breaking changes.\n                             Exit with 1 if there are breaking changes.\n                             Exit with 2 if could not determine compatibility.\n  ```\nlicense-name: MIT\n",
			"canonicalURL": "/github.com/commercialhaskell/all-cabal-metadata@3b8e299cdab09c04afd418a4987eb2776f1ef360/-/blob/packages/co/compaREST.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/commercialhaskell/all-cabal-metadata/blob/3b8e299cdab09c04afd418a4987eb2776f1ef360/packages/co/compaREST.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}