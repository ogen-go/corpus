{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dragonflyoss/image-service"
		},
		"file": {
			"name": "nydus-api-v1.yaml",
			"size": 0,
			"path": "api/openapi/nydus-api-v1.yaml",
			"byteSize": 14165,
			"content": "openapi: 3.0.2\ninfo:\n  description:\n    RESTful public-facing management API. The API is accessible through\n    HTTP calls on specific URLs carrying JSON modeled data.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Nydus-rs API\n  version: 0.1.0\nservers:\n  - url: http://localhost/api/v1\npaths:\n  /daemon:\n    summary: Returns general information about a nydus-rs daemon\n    get:\n      operationId: describeDaemon\n      responses:\n        \"200\":\n          description: Daemon information\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DaemonInfo\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n    put:\n      operationId: configureDaemon\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DaemonConf\"\n      responses:\n        \"204\":\n          description: \"Successfully configure the daemon!\"\n        \"500\":\n          description: \"Can't configure the daemon!\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n  /daemon/events:\n    get:\n      operationId: getEvents\n      responses:\n        \"200\":\n          description: \"Get events happened to nydusd\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Events\"\n        \"500\":\n          description: Nydus api server can't process this request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n  /daemon/backend:\n    get:\n      operationId: queryFsBackend\n      responses:\n        \"200\":\n          description: \"Query mounted file system backend\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DaemonFsBackend\"\n        \"500\":\n          description: Nydus api server can't process this request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n  /daemon/exit:\n    put:\n      operationId: exitDaemon\n      responses:\n        \"204\":\n          description: \"Let nydusd process exit\"\n        \"500\":\n          description: Nydus api server can't process this request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n  /mount:\n    post:\n      operationId: mountFsBackend\n      summary: Operations on nydus file system instances.\n      parameters:\n        - name: mountpoint\n          in: query\n          description: Which directory(mountpoint) in pseudo fs hierarchy to mount to\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MountCmd\"\n        required: true\n      responses:\n        \"204\":\n          description: The fs backend has already been successfully mounted\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Failed in mounting fs backend due to bad request\n    put:\n      operationId: remountFsBackend\n      parameters:\n        - name: mountpoint\n          in: query\n          description: Which directory(mountpoint) in pseudo fs hierarchy to mount to\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MountCmd\"\n        required: true\n      responses:\n        \"204\":\n          description: The mount update was successful\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: The mount update action cannot be executed due to bad input\n      summary: Updates a mount.\n    delete:\n      summary: Umount the specified file system backend\n      operationId: umountFsBackend\n      parameters:\n        - name: mountpoint\n          in: query\n          description: Which directory(mountpoint) in pseudo fs hierarchy to umount from\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Operation - umount - is successful\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Umount operation is not done successfully.\n  /metrics:\n    get:\n      operationId: exportRafsMetrics\n      summary: Rafs filesystem level global metrics.\n      parameters:\n        - name: id\n          in: query\n          description: \"Specify rafs id to get its metrics\"\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Rafs metrics export\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RafsMetrics\"\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Perhaps no counter is found\n  /metrics/files:\n    get:\n      summary: Returns Rafs files' fop stats\n      operationId: exportRafsFilesMetrics\n      parameters:\n        - name: id\n          in: query\n          description: \"Specify rafs id to get its all files metrics\"\n          required: false\n          schema:\n            type: string\n        - name: latest\n          description: \"The returned list represents all files that are ever read ignoring the frequency. The metics of each file will be cleared after this request.\"\n          in: query\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/RafsLatestReadFiles\"\n                  - $ref: \"#/components/schemas/RafsFilesMetrics\"\n          description: Rafs all opened files metrics export\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Internal Server Error\n  /metrics/pattern:\n    get:\n      operationId: exportRafsFilesAccessPattern\n      summary: Rafs files' access patterns\n      parameters:\n        - name: id\n          in: query\n          description: \"Specify rafs id to get its all files access patterns\"\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RafsFilesAccessPatterns\"\n          description: Rafs access pattern exporting\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Internal Server Error\n  /metrics/backend:\n    get:\n      parameters:\n        - name: id\n          in: query\n          description: It is equal to ID of rafs, the ID is also the mountpoint of backend fs.\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RafsBackend\"\n          description: Rafs storage backend metrics\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Internal Server Error\n  /metrics/blobcache:\n    get:\n      parameters:\n        - name: id\n          in: query\n          description: It is equal to ID of rafs, the ID is also the mountpoint of backend fs.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Blobcache\"\n          description: Blobcache metrics\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Internal Server Error\n  /metrics/inflight:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FuseInflight\"\n          description: A set including what fuse requests are being handled. External manager can query this info to judge if request is hang\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorMsg\"\n          description: Internal Server Error\n\ncomponents:\n  schemas:\n    DaemonInfo:\n      properties:\n        version:\n          type: object\n          properties:\n            package_ver:\n              type: string\n            git_commit:\n              type: string\n            build_time:\n              type: string\n            profile:\n              type: string\n            rustc:\n              type: string\n        id:\n          type: string\n        supervisor:\n          type: string\n        state:\n          type: string\n          enum:\n            - INIT\n            - RUNNING\n            - UPGRADING\n            - INTERRUPTED\n            - STOPPED\n            - UNKNOWN\n        backend_collection:\n          type: object\n      type: object\n    DaemonConf:\n      type: object\n      properties:\n        log_level:\n          type: string\n          enum: [trace, debug, info, warn, error]\n    DaemonFsBackend:\n      type: object\n    MountCmd:\n      type: object\n      properties:\n        fs_type:\n          type: string\n        source:\n          description: usually to be the metadata source\n          type: string\n        prefetch_files:\n          description: files that need to be prefetched\n          type: array\n          items:\n            type: string\n        config:\n          description: inline request, use to configure fs backend.\n          type: string\n    ErrorMsg:\n      type: object\n      properties:\n        code:\n          description: Nydus defined error code indicating certain error type\n          type: string\n        message:\n          description: Details about the error\n          type: string\n    RafsMetrics:\n      type: object\n      properties:\n        files_account_enabled:\n          type: boolean\n        measure_latency:\n          type: boolean\n        data_read:\n          type: integer\n        block_count_read:\n          type: array\n          items:\n            type: integer\n        fop_hits:\n          type: array\n          items:\n            type: integer\n        fop_errors:\n          type: array\n          items:\n            type: integer\n        fop_cumulative_latency_total:\n          type: array\n          items:\n            type: integer\n        read_latency_dist:\n          type: array\n          items:\n            type: integer\n        nr_opens:\n          type: integer\n    RafsFilesMetrics:\n      type: object\n      properties:\n        nr_open:\n          type: integer\n        total_fops:\n          type: integer\n        data_read:\n          type: integer\n        block_count_read:\n          type: array\n          items:\n            type: integer\n        fop_hits:\n          type: array\n          items:\n            type: integer\n        fop_errors:\n          type: array\n          items:\n            type: integer\n    RafsLatestReadFiles:\n      type: array\n      description: File ino array, [start,end] -- include inode from start to end, [ino] -- include inode ino\n      items:\n        type: array\n        items:\n          type: integer\n    RafsFilesAccessPatterns:\n      properties:\n        ino:\n          type: integer\n          description: File inode number to identify which file is against\n        nr_read:\n          type: integer\n          description: How many times a file is read regardless of io block size and request offset\n        first_access_time_secs:\n          type: integer\n          description: First time point at which this file is read. It's wall-time in unit of seconds\n    RafsBackend:\n      type: object\n      properties:\n        id:\n          type: string\n        backend_type:\n          type: string\n        read_count:\n          type: string\n        read_errors:\n          type: integer\n        read_amount_total:\n          type: integer\n        read_latency_dist:\n          type: array\n          items:\n            type: array\n            items:\n              type: integer\n    Blobcache:\n      type: object\n      properties:\n        id:\n          type: string\n        underlying_files:\n          type: string\n        store_path:\n          type: string\n        partial_hits:\n          type: integer\n        whole_hits:\n          type: integer\n        total:\n          type: integer\n        entries_count:\n          type: integer\n        prefetch_data_amount:\n          type: integer\n        prefetch_workers:\n          type: integer\n        prefetch_mr_count:\n          type: integer\n        prefetch_unmerged_chunks:\n          type: integer\n    FuseInflight:\n      type: array\n      items:\n        required:\n          - inode\n          - opcode\n          - unique\n          - timestamp_secs\n        type: object\n        properties:\n          inode:\n            type: integer\n          opcode:\n            type: integer\n          unique:\n            type: integer\n          timestamp_secs:\n            type: integer\n    Events:\n      type: object\n      properties:\n        max_errors:\n          type: integer\n        total_errors:\n          type: integer\n        max_size:\n          type: integer\n        errors:\n          type: array\n          items:\n            type: string\n",
			"canonicalURL": "/github.com/dragonflyoss/image-service@58c05b4124d33482713d34eb7ba2d27e24b1856b/-/blob/api/openapi/nydus-api-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dragonflyoss/image-service/blob/58c05b4124d33482713d34eb7ba2d27e24b1856b/api/openapi/nydus-api-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}