{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "setlist.fm-1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/setlist.fm-1.0-swagger.yaml",
			"byteSize": 84634,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: setlistfm\n  description: \u003e-\n    \u003cp\u003e\n\n    The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and\n\n    other applications. Before starting to use the API, be sure to ...\n\n    \u003col\u003e\n\n    \u003cli\u003e... understand how setlist.fm works (the \u003ca href=\"https://www.setlist.fm/faq\"\u003eFAQ\u003c/a\u003e and the\n\n    \u003ca href=\"https://www.setlist.fm/guidelines\"\u003eGuidelines\u003c/a\u003e are a good starting point),\u003c/li\u003e\n\n    \u003cli\u003e... read this documentation carefully and\u003c/li\u003e\n\n    \u003cli\u003e... \u003ca href=\"https://www.setlist.fm/settings/api\"\u003eapply for an API key\u003c/a\u003e (link for logged in users only) - if\n\n    you're no registered user yet, then \u003ca href=\"https://www.setlist.fm/signup\"\u003eregister first\u003c/a\u003e (it's free).\u003c/li\u003e\n\n    \u003c/ol\u003e\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the\n\n    \u003ca href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\"\u003eAPI Forum\u003c/a\u003e.\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    Note that the setlist.fm API is, according to the \u003ca href=\"https://www.setlist.fm/help/api-terms\"\u003eAPI terms of\n\n    service\u003c/a\u003e, only free for non-commercial projects. If you're interested in using the API for commercial purposes,\n\n    \u003ca href=\"https://www.setlist.fm/contact\"\u003econtact us\u003c/a\u003e.\n\n    \u003c/p\u003e\n\n\n    \u003ch2\u003eAbout this Service\u003c/h2\u003e\n\n    \u003cp\u003e\n\n    This service provides methods to get both setlists and components of setlists such as artists, cities, countries or\n\n    venues.\n\n    \u003c/p\u003e\n\n\n    \u003ch2\u003eSupported Content Types\u003c/h2\u003e\n\n    \u003cp\u003e\n\n    The REST service currently supports XML (default) and JSON content.\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    To receive a JSON response, set the \u003ccode\u003eAccept\u003c/code\u003e\n\n    \u003ca href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\"\u003eheader\u003c/a\u003e to \u003cem\u003eapplication/json\u003c/em\u003e.\n\n    \u003c/p\u003e\n\n\n    \u003ch2\u003eInternationalization\u003c/h2\u003e\n\n    \u003cp\u003e\n\n    \u003csmall\u003e(Please note that this is an experimental feature and does not work for all cities!)\u003c/small\u003e\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    Most of the featured methods honor the \u003ccode\u003eAccept-Language\u003c/code\u003e\n\n    \u003ca href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\"\u003eheader\u003c/a\u003e. This header is used for\n\n    localizing cities and countries. The default language is English (en), but you can provide any of the languages\n\n    Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl).\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    E.g. if you search a setlist for a concert that took place in Vienna and you pass \u0026quot;de\u0026quot; as header, you'll\n\n    get \u003cem\u003e\u0026quot;Wien, \u0026Ouml;sterreich\u0026quot;\u003c/em\u003e instead of \u003cem\u003e\u0026quot;Vienna, Austria\u0026quot;\u003c/em\u003e.\u003cbr/\u003e\n\n    This also works if you use a different language than the country's native language.\n\n    \u003c/p\u003e\n\n    \u003cp\u003e\n\n    E.g. for a concert in New York, you'll get \u003cem\u003e\u0026quot;Nueva York, Estados Unidos\u0026quot;\u003c/em\u003e instead of \u003cem\u003e\u0026quot;New\n\n    York, United States\u0026quot;\u003c/em\u003e if you pass \u0026quot;es\u0026quot; as language.\n\n    \u003c/p\u003e\n\n\n    \u003ch2\u003eAPI Keys\u003c/h2\u003e\n\n\n    API keys (\u003ca href=\"https://www.setlist.fm/settings/api\"\u003eapplication form\u003c/a\u003e) must be included in the request with\n\n    the \u003ccode\u003ex-api-key\u003c/code\u003e header.\n\n\n    \u003ch2\u003eVersion History\u003c/h2\u003e\n\n    \u003ctable class=\"table table-bordered table-versions\"\u003e\n\n    \u003cthead\u003e\n\n    \u003ctr\u003e\n\n    \u003cth\u003eVersion\u003c/th\u003e\n\n    \u003cth\u003eDocs\u003c/th\u003e\n\n    \u003cth\u003eEnd of Service\u003c/th\u003e\n\n    \u003c/tr\u003e\n\n    \u003c/thead\u003e \u003ctbody\u003e\n\n    \u003ctr\u003e\n\n    \u003ctd\u003e\u003cstrong\u003e1.0\u003c/strong\u003e\u003c/td\u003e\n\n    \u003ctd\u003e\u003ca href=\"/docs/1.0\"\u003eDocs\u003c/a\u003e\u003c/td\u003e\n\n    \u003ctd\u003e-\u003c/li\u003e\n\n    \u003c/tr\u003e\n\n    \u003ctr\u003e\n\n    \u003ctd\u003e\u003cstrong\u003e0.1\u003c/strong\u003e\u003c/td\u003e\n\n    \u003ctd\u003e\u003c/td\u003e\n\n    \u003ctd\u003eDecember 31, 2017\u003c/li\u003e\n\n    \u003c/tr\u003e\n\n    \u003c/tbody\u003e\n\n    \u003c/table\u003e\n  title: setlist.fm\n  version: \"1.0\"\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://twitter.com/setlistfm/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://api.setlist.fm/docs/1.0/ui/swagger.json\n      version: \"2.0\"\n  x-providerName: setlist.fm\ntags:\n  - name: /1.0/artist/{mbid}\n  - name: /1.0/artist/{mbid}/setlists\n  - name: /1.0/city/{geoId}\n  - name: /1.0/search/artists\n  - name: /1.0/search/cities\n  - name: /1.0/search/countries\n  - name: /1.0/search/setlists\n  - name: /1.0/search/venues\n  - name: /1.0/setlist/version/{versionId}\n  - name: /1.0/setlist/{setlistId}\n  - name: /1.0/user/{userId}\n  - name: /1.0/user/{userId}/attended\n  - name: /1.0/user/{userId}/edited\n  - name: /1.0/venue/{venueId}\n  - name: /1.0/venue/{venueId}/setlists\npaths:\n  \"/1.0/artist/{mbid}\":\n    get:\n      description: |-\n        \u003cp\u003e\n        Returns an artist for a given Musicbrainz MBID\n        \u003c/p\u003e\n      operationId: resource__1.0_artist__mbid__getArtist_GET\n      parameters:\n        - description: a Musicbrainz MBID, e.g. 0bfba3d3-6a04-4779-bb0a-df07df5b0558\n          in: path\n          name: mbid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Artist\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Artist\"\n              examples:\n                response:\n                  value:\n                    disambiguation: John, Paul, George and Ringo\n                    mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                    name: The Beatles\n                    sortName: Beatles, The\n                    tmid: 735610\n                    url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n      summary: .\n      tags:\n        - /1.0/artist/{mbid}\n  \"/1.0/artist/{mbid}/setlists\":\n    get:\n      description: |-\n        \u003cp\u003e\n        Get a list of an artist's setlists.\n        \u003c/p\u003e\n      operationId: resource__1.0_artist__mbid__setlists_getArtistSetlists_GET\n      parameters:\n        - description: the Musicbrainz MBID of the artist\n          in: path\n          name: mbid\n          required: true\n          schema:\n            type: string\n        - description: the number of the result page\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    setlist:\n                      - artist:\n                          disambiguation: John, Paul, George and Ringo\n                          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                          name: The Beatles\n                          sortName: Beatles, The\n                          tmid: 735610\n                          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                        eventDate: 23-08-1964\n                        id: 63de4613\n                        info: Recorded and published as 'The Beatles at the\n                          Hollywood Bowl'\n                        lastUpdated: 2013-10-20T05:18:08.000+0000\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: North American Tour 1964\n                        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                        venue:\n                          city: {}\n                          id: 6bd6ca6e\n                          name: Compaq Center\n                          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                        versionId: 7be1aaa0\n                      - artist:\n                          disambiguation: ...\n                          mbid: ...\n                          name: ...\n                          sortName: ...\n                          tmid: 12345\n                          url: ...\n                        eventDate: ...\n                        id: ...\n                        info: ...\n                        lastUpdated: ...\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: ...\n                        url: ...\n                        venue:\n                          city: {}\n                          id: ...\n                          name: ...\n                          url: ...\n                        versionId: ...\n                    total: 42\n      summary: .\n      tags:\n        - /1.0/artist/{mbid}/setlists\n  \"/1.0/city/{geoId}\":\n    get:\n      description: Get a city by its unique geoId.\n      operationId: resource__1.0_city__geoId__getCity_GET\n      parameters:\n        - description: the city's geoId\n          in: path\n          name: geoId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_City\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_City\"\n              examples:\n                response:\n                  value:\n                    coords:\n                      lat: 34.0983425\n                      long: -118.3267434\n                    country:\n                      code: US\n                      name: United States\n                    id: \"5357527\"\n                    name: Hollywood\n                    state: California\n                    stateCode: CA\n      summary: Get a city by its unique geoId.\n      tags:\n        - /1.0/city/{geoId}\n  /1.0/search/artists:\n    get:\n      description: Search for artists.\n      operationId: resource__1.0_search_artists_getArtists_GET\n      parameters:\n        - description: the artist's Musicbrainz Identifier (mbid)\n          in: query\n          name: artistMbid\n          schema:\n            type: string\n        - description: the artist's name\n          in: query\n          name: artistName\n          schema:\n            type: string\n        - description: the artist's Ticketmaster Identifier (tmid)\n          in: query\n          name: artistTmid\n          schema:\n            type: integer\n        - description: the number of the result page you'd like to have\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n        - description: the sort of the result, either sortName (default) or relevance\n          in: query\n          name: sort\n          schema:\n            type: string\n            default: sortName\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Artists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Artists\"\n              examples:\n                response:\n                  value:\n                    artist:\n                      - disambiguation: John, Paul, George and Ringo\n                        mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                        name: The Beatles\n                        sortName: Beatles, The\n                        tmid: 735610\n                        url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                      - disambiguation: ...\n                        mbid: ...\n                        name: ...\n                        sortName: ...\n                        tmid: 12345\n                        url: ...\n                    itemsPerPage: 20\n                    page: 1\n                    total: 42\n      summary: Search for artists.\n      tags:\n        - /1.0/search/artists\n  /1.0/search/cities:\n    get:\n      description: Search for a city.\n      operationId: resource__1.0_search_cities_getCities_GET\n      parameters:\n        - description: the city's country\n          in: query\n          name: country\n          schema:\n            type: string\n        - description: name of the city\n          in: query\n          name: name\n          schema:\n            type: string\n        - description: the number of the result page you'd like to have\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n        - description: state the city lies in\n          in: query\n          name: state\n          schema:\n            type: string\n        - description: state code the city lies in\n          in: query\n          name: stateCode\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Cities\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Cities\"\n              examples:\n                response:\n                  value:\n                    cities:\n                      - coords:\n                          lat: 34.0983425\n                          long: -118.3267434\n                        country:\n                          code: US\n                          name: United States\n                        id: \"5357527\"\n                        name: Hollywood\n                        state: California\n                        stateCode: CA\n                      - coords:\n                          lat: 12345\n                          long: 12345\n                        country:\n                          code: ...\n                          name: ...\n                        id: ...\n                        name: ...\n                        state: ...\n                        stateCode: ...\n                    itemsPerPage: 20\n                    page: 1\n                    total: 42\n      summary: Search for a city.\n      tags:\n        - /1.0/search/cities\n  /1.0/search/countries:\n    get:\n      description: Get a complete list of all supported countries.\n      operationId: resource__1.0_search_countries_getCountries_GET\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Countries\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Countries\"\n              examples:\n                response:\n                  value:\n                    country:\n                      - code: US\n                        name: United States\n                      - code: ...\n                        name: ...\n                    itemsPerPage: 20\n                    page: 1\n                    total: 42\n      summary: Get a complete list of all supported countries.\n      tags:\n        - /1.0/search/countries\n  /1.0/search/setlists:\n    get:\n      description: Search for setlists.\n      operationId: resource__1.0_search_setlists_getSetlists_GET\n      parameters:\n        - description: the artist's Musicbrainz Identifier (mbid)\n          in: query\n          name: artistMbid\n          schema:\n            type: string\n        - description: the artist's name\n          in: query\n          name: artistName\n          schema:\n            type: string\n        - description: the artist's Ticketmaster Identifier (tmid)\n          in: query\n          name: artistTmid\n          schema:\n            type: integer\n        - description: the city's geoId\n          in: query\n          name: cityId\n          schema:\n            type: string\n        - description: the name of the city\n          in: query\n          name: cityName\n          schema:\n            type: string\n        - description: the country code\n          in: query\n          name: countryCode\n          schema:\n            type: string\n        - description: the date of the event (format dd-MM-yyyy)\n          in: query\n          name: date\n          schema:\n            type: string\n        - description: the event's Last.fm Event ID (deprecated)\n          in: query\n          name: lastFm\n          schema:\n            type: integer\n        - description: \u003e-\n            the date and time (UTC) when this setlist was last updated (format\n            yyyyMMddHHmmss) - either edited or\n\n            reverted. search will return setlists that were updated on or after this date\n          in: query\n          name: lastUpdated\n          schema:\n            type: string\n        - description: the number of the result page\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n        - description: the state\n          in: query\n          name: state\n          schema:\n            type: string\n        - description: the state code\n          in: query\n          name: stateCode\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: tourName\n          schema:\n            type: string\n        - description: the venue id\n          in: query\n          name: venueId\n          schema:\n            type: string\n        - description: the name of the venue\n          in: query\n          name: venueName\n          schema:\n            type: string\n        - description: the year of the event\n          in: query\n          name: year\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    setlist:\n                      - artist:\n                          disambiguation: John, Paul, George and Ringo\n                          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                          name: The Beatles\n                          sortName: Beatles, The\n                          tmid: 735610\n                          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                        eventDate: 23-08-1964\n                        id: 63de4613\n                        info: Recorded and published as 'The Beatles at the\n                          Hollywood Bowl'\n                        lastUpdated: 2013-10-20T05:18:08.000+0000\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: North American Tour 1964\n                        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                        venue:\n                          city: {}\n                          id: 6bd6ca6e\n                          name: Compaq Center\n                          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                        versionId: 7be1aaa0\n                      - artist:\n                          disambiguation: ...\n                          mbid: ...\n                          name: ...\n                          sortName: ...\n                          tmid: 12345\n                          url: ...\n                        eventDate: ...\n                        id: ...\n                        info: ...\n                        lastUpdated: ...\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: ...\n                        url: ...\n                        venue:\n                          city: {}\n                          id: ...\n                          name: ...\n                          url: ...\n                        versionId: ...\n                    total: 42\n      summary: Search for setlists.\n      tags:\n        - /1.0/search/setlists\n  /1.0/search/venues:\n    get:\n      description: Search for venues.\n      operationId: resource__1.0_search_venues_getVenues_GET\n      parameters:\n        - description: the city's geoId\n          in: query\n          name: cityId\n          schema:\n            type: string\n        - description: name of the city where the venue is located\n          in: query\n          name: cityName\n          schema:\n            type: string\n        - description: the city's country\n          in: query\n          name: country\n          schema:\n            type: string\n        - description: name of the venue\n          in: query\n          name: name\n          schema:\n            type: string\n        - description: the number of the result page you'd like to have\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n        - description: the city's state\n          in: query\n          name: state\n          schema:\n            type: string\n        - description: the city's state code\n          in: query\n          name: stateCode\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Venues\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Venues\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    total: 42\n                    venue:\n                      - city:\n                          coords: {}\n                          country: {}\n                          id: \"5357527\"\n                          name: Hollywood\n                          state: California\n                          stateCode: CA\n                        id: 6bd6ca6e\n                        name: Compaq Center\n                        url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                      - city:\n                          coords: {}\n                          country: {}\n                          id: ...\n                          name: ...\n                          state: ...\n                          stateCode: ...\n                        id: ...\n                        name: ...\n                        url: ...\n      summary: Search for venues.\n      tags:\n        - /1.0/search/venues\n  \"/1.0/setlist/version/{versionId}\":\n    get:\n      description: \u003e-\n        \u003cp\u003e\n\n        Returns a setlist for the given versionId. The setlist returned isn't necessarily the most recent version. E.g.\n\n        if you pass the versionId of a setlist that got edited since you last accessed it, you'll get the same version as\n\n        last time.\n\n        \u003c/p\u003e\n      operationId: resource__1.0_setlist_version__versionId__getSetlistVersion_GET\n      parameters:\n        - description: the version id\n          in: path\n          name: versionId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlist\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlist\"\n              examples:\n                response:\n                  value:\n                    artist:\n                      disambiguation: John, Paul, George and Ringo\n                      mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                      name: The Beatles\n                      sortName: Beatles, The\n                      tmid: 735610\n                      url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                    eventDate: 23-08-1964\n                    id: 63de4613\n                    info: Recorded and published as 'The Beatles at the Hollywood\n                      Bowl'\n                    lastUpdated: 2013-10-20T05:18:08.000+0000\n                    set:\n                      - encore: 12345\n                        name: ...\n                        song:\n                          - cover: {}\n                            info: ...\n                            name: Yesterday\n                            tape: false\n                            with: {}\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                      - encore: 12345\n                        name: ...\n                        song:\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                    tour:\n                      name: North American Tour 1964\n                    url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                    venue:\n                      city:\n                        coords: {}\n                        country: {}\n                        id: \"5357527\"\n                        name: Hollywood\n                        state: California\n                        stateCode: CA\n                      id: 6bd6ca6e\n                      name: Compaq Center\n                      url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                    versionId: 7be1aaa0\n      summary: .\n      tags:\n        - /1.0/setlist/version/{versionId}\n  \"/1.0/setlist/{setlistId}\":\n    get:\n      description: \u003e-\n        \u003cp\u003e\n\n        Returns the current version of a setlist. E.g. if you pass the id of a setlist that got edited since you last\n\n        accessed it, you'll get the current version.\n\n        \u003c/p\u003e\n      operationId: resource__1.0_setlist__setlistId__getSetlist_GET\n      parameters:\n        - description: the setlist id\n          in: path\n          name: setlistId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlist\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlist\"\n              examples:\n                response:\n                  value:\n                    artist:\n                      disambiguation: John, Paul, George and Ringo\n                      mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                      name: The Beatles\n                      sortName: Beatles, The\n                      tmid: 735610\n                      url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                    eventDate: 23-08-1964\n                    id: 63de4613\n                    info: Recorded and published as 'The Beatles at the Hollywood\n                      Bowl'\n                    lastUpdated: 2013-10-20T05:18:08.000+0000\n                    set:\n                      - encore: 12345\n                        name: ...\n                        song:\n                          - cover: {}\n                            info: ...\n                            name: Yesterday\n                            tape: false\n                            with: {}\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                      - encore: 12345\n                        name: ...\n                        song:\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                          - cover: {}\n                            info: ...\n                            name: ...\n                            tape: true\n                            with: {}\n                    tour:\n                      name: North American Tour 1964\n                    url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                    venue:\n                      city:\n                        coords: {}\n                        country: {}\n                        id: \"5357527\"\n                        name: Hollywood\n                        state: California\n                        stateCode: CA\n                      id: 6bd6ca6e\n                      name: Compaq Center\n                      url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                    versionId: 7be1aaa0\n      summary: .\n      tags:\n        - /1.0/setlist/{setlistId}\n  \"/1.0/user/{userId}\":\n    get:\n      description: Get a user by userId.\n      operationId: resource__1.0_user__userId__getUser_GET\n      parameters:\n        - description: the user's userId\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_User\"\n              examples:\n                response:\n                  value:\n                    about: ...\n                    flickr: ...\n                    fullname: ...\n                    lastFm: ...\n                    mySpace: ...\n                    twitter: ...\n                    url: ...\n                    userId: ...\n                    website: ...\n      summary: Get a user by userId.\n      tags:\n        - /1.0/user/{userId}\n  \"/1.0/user/{userId}/attended\":\n    get:\n      description: |-\n        \u003cp\u003e\n        Get a list of setlists of concerts attended by a user.\n        \u003c/p\u003e\n      operationId: resource__1.0_user__userId__attended_getUserAttendedSetlists_GET\n      parameters:\n        - description: the user's userId\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: the number of the result page\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    setlist:\n                      - artist:\n                          disambiguation: John, Paul, George and Ringo\n                          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                          name: The Beatles\n                          sortName: Beatles, The\n                          tmid: 735610\n                          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                        eventDate: 23-08-1964\n                        id: 63de4613\n                        info: Recorded and published as 'The Beatles at the\n                          Hollywood Bowl'\n                        lastUpdated: 2013-10-20T05:18:08.000+0000\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: North American Tour 1964\n                        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                        venue:\n                          city: {}\n                          id: 6bd6ca6e\n                          name: Compaq Center\n                          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                        versionId: 7be1aaa0\n                      - artist:\n                          disambiguation: ...\n                          mbid: ...\n                          name: ...\n                          sortName: ...\n                          tmid: 12345\n                          url: ...\n                        eventDate: ...\n                        id: ...\n                        info: ...\n                        lastUpdated: ...\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: ...\n                        url: ...\n                        venue:\n                          city: {}\n                          id: ...\n                          name: ...\n                          url: ...\n                        versionId: ...\n                    total: 42\n      summary: .\n      tags:\n        - /1.0/user/{userId}/attended\n  \"/1.0/user/{userId}/edited\":\n    get:\n      description: \u003e-\n        \u003cp\u003e\n\n        Get a list of setlists of concerts edited by a user. The list contains the current version, not the version\n\n        edited.\n\n        \u003c/p\u003e\n      operationId: resource__1.0_user__userId__edited_getUserEditedSetlists_GET\n      parameters:\n        - description: the user's userId\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: the number of the result page\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    setlist:\n                      - artist:\n                          disambiguation: John, Paul, George and Ringo\n                          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                          name: The Beatles\n                          sortName: Beatles, The\n                          tmid: 735610\n                          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                        eventDate: 23-08-1964\n                        id: 63de4613\n                        info: Recorded and published as 'The Beatles at the\n                          Hollywood Bowl'\n                        lastUpdated: 2013-10-20T05:18:08.000+0000\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: North American Tour 1964\n                        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                        venue:\n                          city: {}\n                          id: 6bd6ca6e\n                          name: Compaq Center\n                          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                        versionId: 7be1aaa0\n                      - artist:\n                          disambiguation: ...\n                          mbid: ...\n                          name: ...\n                          sortName: ...\n                          tmid: 12345\n                          url: ...\n                        eventDate: ...\n                        id: ...\n                        info: ...\n                        lastUpdated: ...\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: ...\n                        url: ...\n                        venue:\n                          city: {}\n                          id: ...\n                          name: ...\n                          url: ...\n                        versionId: ...\n                    total: 42\n      summary: .\n      tags:\n        - /1.0/user/{userId}/edited\n  \"/1.0/venue/{venueId}\":\n    get:\n      description: Get a venue by its unique id.\n      operationId: resource__1.0_venue__venueId__getVenue_GET\n      parameters:\n        - description: the venue's id\n          in: path\n          name: venueId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Venue\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Venue\"\n              examples:\n                response:\n                  value:\n                    city:\n                      coords:\n                        lat: 34.0983425\n                        long: -118.3267434\n                      country:\n                        code: US\n                        name: United States\n                      id: \"5357527\"\n                      name: Hollywood\n                      state: California\n                      stateCode: CA\n                    id: 6bd6ca6e\n                    name: Compaq Center\n                    url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n      summary: Get a venue by its unique id.\n      tags:\n        - /1.0/venue/{venueId}\n  \"/1.0/venue/{venueId}/setlists\":\n    get:\n      description: |-\n        \u003cp\u003e\n        Get setlists for a specific venue.\n        \u003c/p\u003e\n      operationId: resource__1.0_venue__venueId__setlists_getVenueSetlists_GET\n      parameters:\n        - description: the id of the venue\n          in: path\n          name: venueId\n          required: true\n          schema:\n            type: string\n        - description: the number of the result page\n          in: query\n          name: p\n          schema:\n            type: integer\n            default: 1\n      responses:\n        \"200\":\n          description: Success\n          headers: {}\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/json_Setlists\"\n              examples:\n                response:\n                  value:\n                    itemsPerPage: 20\n                    page: 1\n                    setlist:\n                      - artist:\n                          disambiguation: John, Paul, George and Ringo\n                          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n                          name: The Beatles\n                          sortName: Beatles, The\n                          tmid: 735610\n                          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n                        eventDate: 23-08-1964\n                        id: 63de4613\n                        info: Recorded and published as 'The Beatles at the\n                          Hollywood Bowl'\n                        lastUpdated: 2013-10-20T05:18:08.000+0000\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: North American Tour 1964\n                        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n                        venue:\n                          city: {}\n                          id: 6bd6ca6e\n                          name: Compaq Center\n                          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n                        versionId: 7be1aaa0\n                      - artist:\n                          disambiguation: ...\n                          mbid: ...\n                          name: ...\n                          sortName: ...\n                          tmid: 12345\n                          url: ...\n                        eventDate: ...\n                        id: ...\n                        info: ...\n                        lastUpdated: ...\n                        set:\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                          - encore: 12345\n                            name: ...\n                            song:\n                              - {}\n                              - {}\n                        tour:\n                          name: ...\n                        url: ...\n                        venue:\n                          city: {}\n                          id: ...\n                          name: ...\n                          url: ...\n                        versionId: ...\n                    total: 42\n      summary: .\n      tags:\n        - /1.0/venue/{venueId}/setlists\nservers:\n  - url: https://api.setlist.fm/rest\ncomponents:\n  schemas:\n    json_Artist:\n      description: \u003e-\n        This class represents an artist. An artist is a musician or a group of\n        musicians. Each artist has a definite\n\n        \u003ca href=\"http://wiki.musicbrainz.org/MBID\"\u003eMusicbrainz Identifier\u003c/a\u003e (MBID) with which the artist can be uniquely\n\n        identified.\n      example:\n        disambiguation: John, Paul, George and Ringo\n        mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n        name: The Beatles\n        sortName: Beatles, The\n        tmid: 735610\n        url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n      properties:\n        disambiguation:\n          description: disambiguation to distinguish between artists with same names\n          example: John, Paul, George and Ringo\n          type: string\n        mbid:\n          description: unique Musicbrainz Identifier (MBID), e.g.\n            \u003cem\u003e\u0026quot;b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\u0026quot;\u003c/em\u003e\n          example: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n          type: string\n        name:\n          description: the artist's name, e.g. \u003cem\u003e\u0026quot;The Beatles\u0026quot;\u003c/em\u003e\n          example: The Beatles\n          type: string\n        sortName:\n          description: the artist's sort name, e.g. \u003cem\u003e\u0026quot;Beatles, The\u0026quot;\u003c/em\u003e or\n            \u003cem\u003e\u0026quot;Springsteen, Bruce\u0026quot;\u003c/em\u003e\n          example: Beatles, The\n          type: string\n        tmid:\n          description: unique Ticket Master Identifier (TMID), e.g. \u003cem\u003e735610\u003c/em\u003e\n          example: 735610\n          type: number\n        url:\n          description: the attribution url\n          example: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n          type: string\n      title: artist\n      type: object\n    json_Artists:\n      description: A Result consisting of a list of artists.\n      example:\n        artist:\n          - disambiguation: John, Paul, George and Ringo\n            mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n            name: The Beatles\n            sortName: Beatles, The\n            tmid: 735610\n            url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n          - disambiguation: ...\n            mbid: ...\n            name: ...\n            sortName: ...\n            tmid: 12345\n            url: ...\n        itemsPerPage: 20\n        page: 1\n        total: 42\n      properties:\n        artist:\n          description: result list of artists\n          items:\n            $ref: \"#/components/schemas/json_Artist\"\n          type: array\n        itemsPerPage:\n          description: the amount of items you get per page\n          example: 20\n          type: number\n        page:\n          description: the current page. starts at 1\n          example: 1\n          type: number\n        total:\n          description: the total amount of items matching the query\n          example: 42\n          type: number\n      title: artists\n      type: object\n    json_Cities:\n      description: A Result consisting of a list of cities.\n      example:\n        cities:\n          - coords:\n              lat: 34.0983425\n              long: -118.3267434\n            country:\n              code: US\n              name: United States\n            id: \"5357527\"\n            name: Hollywood\n            state: California\n            stateCode: CA\n          - coords:\n              lat: 12345\n              long: 12345\n            country:\n              code: ...\n              name: ...\n            id: ...\n            name: ...\n            state: ...\n            stateCode: ...\n        itemsPerPage: 20\n        page: 1\n        total: 42\n      properties:\n        cities:\n          description: result list of cities\n          items:\n            $ref: \"#/components/schemas/json_City\"\n          type: array\n        itemsPerPage:\n          description: the amount of items you get per page\n          example: 20\n          type: number\n        page:\n          description: the current page. starts at 1\n          example: 1\n          type: number\n        total:\n          description: the total amount of items matching the query\n          example: 42\n          type: number\n      title: cities\n      type: object\n    json_City:\n      description: \u003e-\n        This class represents a city where Venues are located. Most of the\n        original city data was taken from\n\n        \u003ca href=\"http://geonames.org/\"\u003eGeonames.org\u003c/a\u003e.\n      example:\n        coords:\n          lat: 34.0983425\n          long: -118.3267434\n        country:\n          code: US\n          name: United States\n        id: \"5357527\"\n        name: Hollywood\n        state: California\n        stateCode: CA\n      properties:\n        coords:\n          $ref: \"#/components/schemas/json_Coords\"\n        country:\n          $ref: \"#/components/schemas/json_Country\"\n        id:\n          description: unique identifier\n          example: \"5357527\"\n          type: string\n        name:\n          description: \u003e-\n            the city's name, depending on the language valid values are e.g.\n            \u003cem\u003e\u0026quot;M\u0026uuml;chen\u0026quot;\u003c/em\u003e or\n\n            \u003cem\u003eMunich\u003c/em\u003e\n          example: Hollywood\n          type: string\n        state:\n          description: The name of city's state, e.g. \u003cem\u003e\u0026quot;Bavaria\u0026quot;\u003c/em\u003e or\n            \u003cem\u003e\u0026quot;Florida\u0026quot;\u003c/em\u003e\n          example: California\n          type: string\n        stateCode:\n          description: \u003e-\n            The code of the city's state. For most countries this is a two-digit\n            numeric code, with which the state can be\n\n            identified uniquely in the specific Country. The code can also be a String for other cities. Valid\n\n            examples are \u003cem\u003e\u0026quot;CA\u0026quot;\u003c/em\u003e or \u003cem\u003e\u0026quot;02\u0026quot;\u003c/em\u003e\n\n\n            which in turn get uniquely identifiable when combined with the state's country:\n\n\n            \u003cem\u003e\u0026quot;US.CA\u0026quot;\u003c/em\u003e for California, United States or \u003cem\u003e\u0026quot;DE.02\u0026quot;\u003c/em\u003e for Bavaria, Germany\n\n\n            For a complete list of available states (that aren't necessarily used in this database) is available in\n\n            \u003ca href= \"http://download.geonames.org/export/dump/admin1CodesASCII.txt\"\u003ea textfile on geonames.org\u003c/a\u003e.\n\n\n            Note that this code is only unique combined with the city's Country. The code alone is\n\n            \u003cstrong\u003enot\u003c/strong\u003e unique.\n          example: CA\n          type: string\n      title: city\n      type: object\n    json_Coords:\n      description: Coordinates of a point on the globe. Mostly used for Cities.\n      example:\n        lat: 34.0983425\n        long: -118.3267434\n      properties:\n        lat:\n          description: The latitude part of the coordinates.\n          example: 34.0983425\n          type: number\n        long:\n          description: The longitude part of the coordinates.\n          example: -118.3267434\n          type: number\n      title: coords\n      type: object\n    json_Countries:\n      description: A Result consisting of a list of countries.\n      example:\n        country:\n          - code: US\n            name: United States\n          - code: ...\n            name: ...\n        itemsPerPage: 20\n        page: 1\n        total: 42\n      properties:\n        country:\n          description: result list of countries\n          items:\n            $ref: \"#/components/schemas/json_Country\"\n          type: array\n        itemsPerPage:\n          description: the amount of items you get per page\n          example: 20\n          type: number\n        page:\n          description: the current page. starts at 1\n          example: 1\n          type: number\n        total:\n          description: the total amount of items matching the query\n          example: 42\n          type: number\n      title: countries\n      type: object\n    json_Country:\n      description: This class represents a country on earth.\n      example:\n        code: US\n        name: United States\n      properties:\n        code:\n          description: \u003e-\n            The country's \u003ca href=\n            \"http://www.iso.org/iso/english_country_names_and_code_elements\"\n            \u003eISO code\u003c/a\u003e. E.g.\n\n            \u003cem\u003e\u0026quot;ie\u0026quot;\u003c/em\u003e for Ireland\n          example: US\n          type: string\n        name:\n          description: \u003e-\n            The country's name. Can be a localized name - e.g.\n            \u003cem\u003e\u0026quot;Austria\u0026quot;\u003c/em\u003e or\n\n            \u003cem\u003e\u0026quot;\u0026Ouml;sterreich\u0026quot;\u003c/em\u003e for Austria if the German name was requested.\n          example: United States\n          type: string\n      title: country\n      type: object\n    json_Error:\n      description: Returned in case of an error.\n      example:\n        code: 404\n        message: unknown mbid\n        status: Not Found\n        timestamp: 2016-12-08T17:52:48.817+0000\n      properties:\n        code:\n          description: the HTTP status code\n          example: 404\n          type: number\n        message:\n          description: an additional error message\n          example: unknown mbid\n          type: string\n        status:\n          description: the HTTP status message\n          example: Not Found\n          type: string\n        timestamp:\n          description: current timestamp\n          example: 2016-12-08T17:52:48.817+0000\n          type: string\n      title: error\n      type: object\n    json_Set:\n      description: \u003e-\n        A setlist consists of different (at least one) sets. Sets can either be\n        sets as defined in the\n\n        \u003ca href=\"https://www.setlist.fm/guidelines\"\u003eGuidelines\u003c/a\u003e or encores.\n      example:\n        encore: 12345\n        name: ...\n        song:\n          - cover:\n              disambiguation: John, Paul, George and Ringo\n              mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n              name: The Beatles\n              sortName: Beatles, The\n              tmid: 735610\n              url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n            info: ...\n            name: Yesterday\n            tape: false\n            with:\n              disambiguation: John, Paul, George and Ringo\n              mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n              name: The Beatles\n              sortName: Beatles, The\n              tmid: 735610\n              url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n          - cover:\n              disambiguation: ...\n              mbid: ...\n              name: ...\n              sortName: ...\n              tmid: 12345\n              url: ...\n            info: ...\n            name: ...\n            tape: true\n            with:\n              disambiguation: ...\n              mbid: ...\n              name: ...\n              sortName: ...\n              tmid: 12345\n              url: ...\n      properties:\n        encore:\n          description: \u003e-\n            if the set is an encore, this is the number of the encore, starting\n            with 1 for the first encore, 2 for the second\n\n            and so on.\n          type: number\n        name:\n          description: \u003e-\n            the description/name of the set. E.g. \u003cem\u003e\u0026quot;Acoustic\n            set\u0026quot;\u003c/em\u003e or \u003cem\u003e\u0026quot;Paul McCartney\n\n            solo\u0026quot;\u003c/em\u003e\n          type: string\n        song:\n          description: this set's songs\n          items:\n            $ref: \"#/components/schemas/json_Song\"\n          type: array\n      title: set\n      type: object\n    json_Setlist:\n      description: \u003e-\n        Setlists, that's what it's all about. So if you're trying to use this\n        API without knowing what a setlist is then\n\n        you're kinda wrong on this page ;-).\n\n\n        A setlist can be distinguished from other setlists by its unique id. But as\n\n        \u003ca href=\"https://www.setlist.fm/\"\u003esetlist.fm\u003c/a\u003e works the wiki way, there can be different versions of one setlist\n\n        (each time a user updates a setlist a new version gets created). These different versions have a unique id on its\n\n        own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to\n\n        check if two setlists are the same is to compare their versionIds.\n      example:\n        artist:\n          disambiguation: John, Paul, George and Ringo\n          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n          name: The Beatles\n          sortName: Beatles, The\n          tmid: 735610\n          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n        eventDate: 23-08-1964\n        id: 63de4613\n        info: Recorded and published as 'The Beatles at the Hollywood Bowl'\n        lastUpdated: 2013-10-20T05:18:08.000+0000\n        set:\n          - encore: 12345\n            name: ...\n            song:\n              - cover: {}\n                info: ...\n                name: Yesterday\n                tape: false\n                with: {}\n              - cover: {}\n                info: ...\n                name: ...\n                tape: true\n                with: {}\n          - encore: 12345\n            name: ...\n            song:\n              - cover: {}\n                info: ...\n                name: ...\n                tape: true\n                with: {}\n              - cover: {}\n                info: ...\n                name: ...\n                tape: true\n                with: {}\n        tour:\n          name: North American Tour 1964\n        url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n        venue:\n          city:\n            coords: {}\n            country: {}\n            id: \"5357527\"\n            name: Hollywood\n            state: California\n            stateCode: CA\n          id: 6bd6ca6e\n          name: Compaq Center\n          url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n        versionId: 7be1aaa0\n      properties:\n        artist:\n          $ref: \"#/components/schemas/json_Artist\"\n        eventDate:\n          description: date of the concert in the format \u0026quot;dd-MM-yyyy\u0026quot;\n          example: 23-08-1964\n          type: string\n        id:\n          description: unique identifier\n          example: 63de4613\n          type: string\n        info:\n          description: \u003e-\n            additional information on the concert - see the \u003ca\n            href=\"https://www.setlist.fm/guidelines\"\u003esetlist.fm\n\n            guidelines\u003c/a\u003e for a complete list of allowed content.\n          example: Recorded and published as 'The Beatles at the Hollywood Bowl'\n          type: string\n        lastFmEventId:\n          description: the id this event has on \u003ca href=\"http://last.fm/\"\u003elast.fm\u003c/a\u003e\n            (deprecated)\n          example: 1164056\n          type: number\n        lastUpdated:\n          description: \u003e-\n            date, time and time zone of the last update to this setlist in the\n            format\n\n            \u0026quot;yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ\u0026quot;\n          example: 2013-10-20T05:18:08.000+0000\n          type: string\n        set:\n          description: all sets of this setlist\n          items:\n            $ref: \"#/components/schemas/json_Set\"\n          type: array\n        tour:\n          $ref: \"#/components/schemas/json_Tour\"\n        url:\n          description: the attribution url to which you have to link to wherever you use\n            data from this setlist in your application\n          example: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n          type: string\n        venue:\n          $ref: \"#/components/schemas/json_Venue\"\n        versionId:\n          description: unique identifier of the version\n          example: 7be1aaa0\n          type: string\n      title: setlist\n      type: object\n    json_Setlists:\n      description: A Result consisting of a list of setlists.\n      example:\n        itemsPerPage: 20\n        page: 1\n        setlist:\n          - artist:\n              disambiguation: John, Paul, George and Ringo\n              mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n              name: The Beatles\n              sortName: Beatles, The\n              tmid: 735610\n              url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n            eventDate: 23-08-1964\n            id: 63de4613\n            info: Recorded and published as 'The Beatles at the Hollywood Bowl'\n            lastUpdated: 2013-10-20T05:18:08.000+0000\n            set:\n              - encore: 12345\n                name: ...\n                song:\n                  - {}\n                  - {}\n              - encore: 12345\n                name: ...\n                song:\n                  - {}\n                  - {}\n            tour:\n              name: North American Tour 1964\n            url: https://www.setlist.fm/setlist/the-beatles/1964/hollywood-bowl-hollywood-ca-63de4613.html\n            venue:\n              city: {}\n              id: 6bd6ca6e\n              name: Compaq Center\n              url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n            versionId: 7be1aaa0\n          - artist:\n              disambiguation: ...\n              mbid: ...\n              name: ...\n              sortName: ...\n              tmid: 12345\n              url: ...\n            eventDate: ...\n            id: ...\n            info: ...\n            lastUpdated: ...\n            set:\n              - encore: 12345\n                name: ...\n                song:\n                  - {}\n                  - {}\n              - encore: 12345\n                name: ...\n                song:\n                  - {}\n                  - {}\n            tour:\n              name: ...\n            url: ...\n            venue:\n              city: {}\n              id: ...\n              name: ...\n              url: ...\n            versionId: ...\n        total: 42\n      properties:\n        itemsPerPage:\n          description: the amount of items you get per page\n          example: 20\n          type: number\n        page:\n          description: the current page. starts at 1\n          example: 1\n          type: number\n        setlist:\n          description: result list of setlists\n          items:\n            $ref: \"#/components/schemas/json_Setlist\"\n          type: array\n        total:\n          description: the total amount of items matching the query\n          example: 42\n          type: number\n      title: setlists\n      type: object\n    json_Song:\n      description: This class represents a song that is part of a Set.\n      example:\n        cover:\n          disambiguation: John, Paul, George and Ringo\n          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n          name: The Beatles\n          sortName: Beatles, The\n          tmid: 735610\n          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n        info: ...\n        name: Yesterday\n        tape: false\n        with:\n          disambiguation: John, Paul, George and Ringo\n          mbid: b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\n          name: The Beatles\n          sortName: Beatles, The\n          tmid: 735610\n          url: https://www.setlist.fm/setlists/the-beatles-23d6a88b.html\n      properties:\n        cover:\n          $ref: \"#/components/schemas/json_Artist\"\n        info:\n          description: \u003e-\n            Special incidents or additional information about the way the song\n            was performed at this specific concert. See\n\n            the \u003ca href=\"https://www.setlist.fm/guidelines\"\u003esetlist.fm guidelines\u003c/a\u003e for a complete list of allowed content.\n          type: string\n        name:\n          description: The name of the song. E.g. \u003cem\u003eYesterday\u003c/em\u003e or \u003cem\u003e\u0026quot;Wish You\n            Were Here\u0026quot;\u003c/em\u003e\n          example: Yesterday\n          type: string\n        tape:\n          description: \u003e-\n            The song came from tape rather than being performed live. See the\n\n            \u003ca href=\"https://www.setlist.fm/guidelines#tape-songs\"\u003etape section of the guidelines\u003c/a\u003e for valid usage.\n          example: false\n          type: boolean\n        with:\n          $ref: \"#/components/schemas/json_Artist\"\n      title: song\n      type: object\n    json_Tour:\n      description: The tour a setlist was a part of.\n      example:\n        name: North American Tour 1964\n      properties:\n        name:\n          description: The name of the tour.\n          example: North American Tour 1964\n          type: string\n      title: tour\n      type: object\n    json_User:\n      description: This class represents a user.\n      example:\n        about: ...\n        flickr: ...\n        fullname: ...\n        lastFm: ...\n        mySpace: ...\n        twitter: ...\n        url: ...\n        userId: ...\n        website: ...\n      properties:\n        about:\n          description: \"\"\n          type: string\n        flickr:\n          description: \"\"\n          type: string\n        fullname:\n          description: \"\"\n          type: string\n        lastFm:\n          description: \"\"\n          type: string\n        mySpace:\n          description: \"\"\n          type: string\n        twitter:\n          description: \"\"\n          type: string\n        url:\n          description: \"\"\n          type: string\n        userId:\n          description: \"\"\n          type: string\n        website:\n          description: \"\"\n          type: string\n      title: user\n      type: object\n    json_Venue:\n      description: \u003e-\n        Venues are places where concerts take place. They usually consist of a\n        venue name and a city - but there are also\n\n        some venues that do not have a city attached yet. In such a case, the city simply isn't set and the city and country\n\n        may (but do not have to) be in the name.\n      example:\n        city:\n          coords:\n            lat: 34.0983425\n            long: -118.3267434\n          country:\n            code: US\n            name: United States\n          id: \"5357527\"\n          name: Hollywood\n          state: California\n          stateCode: CA\n        id: 6bd6ca6e\n        name: Compaq Center\n        url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n      properties:\n        city:\n          $ref: \"#/components/schemas/json_City\"\n        id:\n          description: unique identifier\n          example: 6bd6ca6e\n          type: string\n        name:\n          description: \u003e-\n            the name of the venue, usually without city and country. E.g.\n            \u003cem\u003e\u0026quot;Madison Square Garden\u0026quot;\u003c/em\u003e or\n\n            \u003cem\u003e\u0026quot;Royal Albert Hall\u0026quot;\u003c/em\u003e\n          example: Compaq Center\n          type: string\n        url:\n          description: the attribution url\n          example: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n          type: string\n      title: venue\n      type: object\n    json_Venues:\n      description: A Result consisting of a list of venues.\n      example:\n        itemsPerPage: 20\n        page: 1\n        total: 42\n        venue:\n          - city:\n              coords: {}\n              country: {}\n              id: \"5357527\"\n              name: Hollywood\n              state: California\n              stateCode: CA\n            id: 6bd6ca6e\n            name: Compaq Center\n            url: https://www.setlist.fm/venue/compaq-center-san-jose-ca-usa-6bd6ca6e.html\n          - city:\n              coords: {}\n              country: {}\n              id: ...\n              name: ...\n              state: ...\n              stateCode: ...\n            id: ...\n            name: ...\n            url: ...\n      properties:\n        itemsPerPage:\n          description: the amount of items you get per page\n          example: 20\n          type: number\n        page:\n          description: the current page. starts at 1\n          example: 1\n          type: number\n        total:\n          description: the total amount of items matching the query\n          example: 42\n          type: number\n        venue:\n          description: result list of venues\n          items:\n            $ref: \"#/components/schemas/json_Venue\"\n          type: array\n      title: venues\n      type: object\n    xml_ns0_artist:\n      allOf:\n        - properties:\n            disambiguation:\n              description: disambiguation to distinguish between artists with same names\n              type: string\n              xml:\n                attribute: true\n            mbid:\n              description: unique Musicbrainz Identifier (MBID), e.g.\n                \u003cem\u003e\u0026quot;b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            name:\n              description: the artist's name, e.g. \u003cem\u003e\u0026quot;The Beatles\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            sortName:\n              description: the artist's sort name, e.g. \u003cem\u003e\u0026quot;Beatles, The\u0026quot;\u003c/em\u003e\n                or \u003cem\u003e\u0026quot;Springsteen, Bruce\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            tmid:\n              description: unique Ticket Master Identifier (TMID), e.g. \u003cem\u003e735610\u003c/em\u003e\n              type: number\n              xml:\n                attribute: true\n            url:\n              description: the attribution url\n              type: string\n              xml: {}\n      description: \u003e-\n        This class represents an artist. An artist is a musician or a group of\n        musicians. Each artist has a definite\n\n        \u003ca href=\"http://wiki.musicbrainz.org/MBID\"\u003eMusicbrainz Identifier\u003c/a\u003e (MBID) with which the artist can be uniquely\n\n        identified.\n      required:\n        - mbid\n        - sortName\n        - name\n        - url\n      title: artist\n      type: object\n    xml_ns0_artists:\n      allOf:\n        - $ref: \"#/components/schemas/xml_ns0_result\"\n        - {}\n      description: A Result consisting of a list of artists.\n      title: artists\n      type: object\n    xml_ns0_cities:\n      allOf:\n        - $ref: \"#/components/schemas/xml_ns0_result\"\n        - {}\n      description: A Result consisting of a list of cities.\n      title: cities\n      type: object\n    xml_ns0_city:\n      allOf:\n        - properties:\n            coords:\n              $ref: \"#/components/schemas/xml_ns0_coords\"\n            country:\n              $ref: \"#/components/schemas/xml_ns0_country\"\n            id:\n              description: unique identifier\n              type: string\n              xml:\n                attribute: true\n            name:\n              description: \u003e-\n                the city's name, depending on the language valid values are e.g.\n                \u003cem\u003e\u0026quot;M\u0026uuml;chen\u0026quot;\u003c/em\u003e or\n\n                \u003cem\u003eMunich\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            state:\n              description: The name of city's state, e.g. \u003cem\u003e\u0026quot;Bavaria\u0026quot;\u003c/em\u003e or\n                \u003cem\u003e\u0026quot;Florida\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            stateCode:\n              description: \u003e-\n                The code of the city's state. For most countries this is a\n                two-digit numeric code, with which the state can be\n\n                identified uniquely in the specific Country. The code can also be a String for other cities. Valid\n\n                examples are \u003cem\u003e\u0026quot;CA\u0026quot;\u003c/em\u003e or \u003cem\u003e\u0026quot;02\u0026quot;\u003c/em\u003e\n\n\n                which in turn get uniquely identifiable when combined with the state's country:\n\n\n                \u003cem\u003e\u0026quot;US.CA\u0026quot;\u003c/em\u003e for California, United States or \u003cem\u003e\u0026quot;DE.02\u0026quot;\u003c/em\u003e for Bavaria, Germany\n\n\n                For a complete list of available states (that aren't necessarily used in this database) is available in\n\n                \u003ca href= \"http://download.geonames.org/export/dump/admin1CodesASCII.txt\"\u003ea textfile on geonames.org\u003c/a\u003e.\n\n\n                Note that this code is only unique combined with the city's Country. The code alone is\n\n                \u003cstrong\u003enot\u003c/strong\u003e unique.\n              type: string\n              xml:\n                attribute: true\n      description: \u003e-\n        This class represents a city where Venues are located. Most of the\n        original city data was taken from\n\n        \u003ca href=\"http://geonames.org/\"\u003eGeonames.org\u003c/a\u003e.\n      required:\n        - id\n        - name\n        - country\n      title: city\n      type: object\n    xml_ns0_coords:\n      allOf:\n        - properties:\n            lat:\n              description: The latitude part of the coordinates.\n              type: number\n              xml:\n                attribute: true\n            long:\n              description: The longitude part of the coordinates.\n              type: number\n              xml:\n                attribute: true\n      description: Coordinates of a point on the globe. Mostly used for Cities.\n      required:\n        - lat\n        - long\n      title: coords\n      type: object\n    xml_ns0_countries:\n      allOf:\n        - $ref: \"#/components/schemas/xml_ns0_result\"\n        - {}\n      description: A Result consisting of a list of countries.\n      title: countries\n      type: object\n    xml_ns0_country:\n      allOf:\n        - properties:\n            code:\n              description: \u003e-\n                The country's \u003ca href=\n                \"http://www.iso.org/iso/english_country_names_and_code_elements\"\n                \u003eISO code\u003c/a\u003e. E.g.\n\n                \u003cem\u003e\u0026quot;ie\u0026quot;\u003c/em\u003e for Ireland\n              type: string\n              xml:\n                attribute: true\n            name:\n              description: \u003e-\n                The country's name. Can be a localized name - e.g.\n                \u003cem\u003e\u0026quot;Austria\u0026quot;\u003c/em\u003e or\n\n                \u003cem\u003e\u0026quot;\u0026Ouml;sterreich\u0026quot;\u003c/em\u003e for Austria if the German name was requested.\n              type: string\n              xml:\n                attribute: true\n      description: This class represents a country on earth.\n      required:\n        - code\n        - name\n      title: country\n      type: object\n    xml_ns0_error:\n      allOf:\n        - properties:\n            code:\n              description: the HTTP status code\n              type: number\n              xml: {}\n            message:\n              description: an additional error message\n              type: string\n              xml: {}\n            status:\n              description: the HTTP status message\n              type: string\n              xml: {}\n            timestamp:\n              description: current timestamp\n              type: string\n              xml: {}\n      description: Returned in case of an error.\n      required:\n        - code\n        - status\n        - timestamp\n      title: error\n      type: object\n    xml_ns0_result:\n      allOf:\n        - properties:\n            itemsPerPage:\n              description: the amount of items you get per page\n              type: number\n              xml:\n                attribute: true\n            page:\n              description: the current page. starts at 1\n              type: number\n              xml:\n                attribute: true\n            total:\n              description: the total amount of items matching the query\n              type: number\n              xml:\n                attribute: true\n      description: \u003e-\n        \u003cp\u003e\n\n        If a request returns a list of items they're always wrapped into a Result. As there is a maximum amount of items to\n\n        be returned at once a Result consists of the total amount of items (total), how many items per page you get\n\n        (itemsPerPage), the current page (page) and the current list of items.\n\n        \u003c/p\u003e\n\n\n        \u003cp\u003e\n\n        E.g. if there are 35 items, itemsPerPage is 10 and the current page is 2, then items 11 to 20 are in the list.\n\n        \u003c/p\u003e\n      required:\n        - itemsPerPage\n        - page\n        - total\n      title: result\n      type: object\n    xml_ns0_set:\n      allOf:\n        - properties:\n            encore:\n              description: \u003e-\n                if the set is an encore, this is the number of the encore,\n                starting with 1 for the first encore, 2 for the second\n\n                and so on.\n              type: number\n              xml:\n                attribute: true\n            name:\n              description: \u003e-\n                the description/name of the set. E.g. \u003cem\u003e\u0026quot;Acoustic\n                set\u0026quot;\u003c/em\u003e or \u003cem\u003e\u0026quot;Paul McCartney\n\n                solo\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            song:\n              $ref: \"#/components/schemas/xml_ns0_song\"\n      description: \u003e-\n        A setlist consists of different (at least one) sets. Sets can either be\n        sets as defined in the\n\n        \u003ca href=\"https://www.setlist.fm/guidelines\"\u003eGuidelines\u003c/a\u003e or encores.\n      required:\n        - song\n      title: set\n      type: object\n    xml_ns0_setlist:\n      allOf:\n        - properties:\n            artist:\n              $ref: \"#/components/schemas/xml_ns0_artist\"\n            eventDate:\n              description: date of the concert in the format \u0026quot;dd-MM-yyyy\u0026quot;\n              type: string\n              xml:\n                attribute: true\n            id:\n              description: unique identifier\n              type: string\n              xml:\n                attribute: true\n            info:\n              description: \u003e-\n                additional information on the concert - see the \u003ca\n                href=\"https://www.setlist.fm/guidelines\"\u003esetlist.fm\n\n                guidelines\u003c/a\u003e for a complete list of allowed content.\n              type: string\n              xml: {}\n            lastFmEventId:\n              description: the id this event has on \u003ca href=\"http://last.fm/\"\u003elast.fm\u003c/a\u003e\n                (deprecated)\n              type: number\n              xml:\n                attribute: true\n            lastUpdated:\n              description: \u003e-\n                date, time and time zone of the last update to this setlist in\n                the format\n\n                \u0026quot;yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ\u0026quot;\n              type: string\n              xml:\n                attribute: true\n            set:\n              $ref: \"#/components/schemas/xml_ns0_set\"\n            tour:\n              $ref: \"#/components/schemas/xml_ns0_tour\"\n            url:\n              description: the attribution url to which you have to link to wherever you\n                use data from this setlist in your application\n              type: string\n              xml: {}\n            venue:\n              $ref: \"#/components/schemas/xml_ns0_venue\"\n            versionId:\n              description: unique identifier of the version\n              type: string\n              xml:\n                attribute: true\n      description: \u003e-\n        Setlists, that's what it's all about. So if you're trying to use this\n        API without knowing what a setlist is then\n\n        you're kinda wrong on this page ;-).\n\n\n        A setlist can be distinguished from other setlists by its unique id. But as\n\n        \u003ca href=\"https://www.setlist.fm/\"\u003esetlist.fm\u003c/a\u003e works the wiki way, there can be different versions of one setlist\n\n        (each time a user updates a setlist a new version gets created). These different versions have a unique id on its\n\n        own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to\n\n        check if two setlists are the same is to compare their versionIds.\n      required:\n        - lastUpdated\n        - versionId\n        - id\n        - eventDate\n        - artist\n        - venue\n        - url\n      title: setlist\n      type: object\n    xml_ns0_setlists:\n      allOf:\n        - $ref: \"#/components/schemas/xml_ns0_result\"\n        - {}\n      description: A Result consisting of a list of setlists.\n      title: setlists\n      type: object\n    xml_ns0_song:\n      allOf:\n        - properties:\n            cover:\n              $ref: \"#/components/schemas/xml_ns0_artist\"\n            info:\n              description: \u003e-\n                Special incidents or additional information about the way the\n                song was performed at this specific concert. See\n\n                the \u003ca href=\"https://www.setlist.fm/guidelines\"\u003esetlist.fm guidelines\u003c/a\u003e for a complete list of allowed content.\n              type: string\n              xml: {}\n            name:\n              description: The name of the song. E.g. \u003cem\u003eYesterday\u003c/em\u003e or \u003cem\u003e\u0026quot;Wish\n                You Were Here\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            tape:\n              description: \u003e-\n                The song came from tape rather than being performed live. See\n                the\n\n                \u003ca href=\"https://www.setlist.fm/guidelines#tape-songs\"\u003etape section of the guidelines\u003c/a\u003e for valid usage.\n              type: boolean\n              xml:\n                attribute: true\n            with:\n              $ref: \"#/components/schemas/xml_ns0_artist\"\n      description: This class represents a song that is part of a Set.\n      required:\n        - name\n      title: song\n      type: object\n    xml_ns0_tour:\n      allOf:\n        - properties:\n            name:\n              description: The name of the tour.\n              type: string\n              xml:\n                attribute: true\n      description: The tour a setlist was a part of.\n      required:\n        - name\n      title: tour\n      type: object\n    xml_ns0_user:\n      allOf:\n        - properties:\n            about:\n              description: \"\"\n              type: string\n              xml: {}\n            flickr:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            fullname:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            lastFm:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            mySpace:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            twitter:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            url:\n              description: \"\"\n              type: string\n              xml: {}\n            userId:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n            website:\n              description: \"\"\n              type: string\n              xml:\n                attribute: true\n      description: This class represents a user.\n      required:\n        - userId\n        - url\n      title: user\n      type: object\n    xml_ns0_venue:\n      allOf:\n        - properties:\n            city:\n              $ref: \"#/components/schemas/xml_ns0_city\"\n            id:\n              description: unique identifier\n              type: string\n              xml:\n                attribute: true\n            name:\n              description: \u003e-\n                the name of the venue, usually without city and country. E.g.\n                \u003cem\u003e\u0026quot;Madison Square Garden\u0026quot;\u003c/em\u003e or\n\n                \u003cem\u003e\u0026quot;Royal Albert Hall\u0026quot;\u003c/em\u003e\n              type: string\n              xml:\n                attribute: true\n            url:\n              description: the attribution url\n              type: string\n              xml: {}\n      description: \u003e-\n        Venues are places where concerts take place. They usually consist of a\n        venue name and a city - but there are also\n\n        some venues that do not have a city attached yet. In such a case, the city simply isn't set and the city and country\n\n        may (but do not have to) be in the name.\n      required:\n        - id\n      title: venue\n      type: object\n    xml_ns0_venues:\n      allOf:\n        - $ref: \"#/components/schemas/xml_ns0_result\"\n        - {}\n      description: A Result consisting of a list of venues.\n      title: venues\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/setlist.fm-1.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/setlist.fm-1.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}