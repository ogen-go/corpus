{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gustcol/Canivete"
		},
		"file": {
			"name": "Cognito-Template.yaml",
			"size": 0,
			"path": "antiope/cognito/cloudformation/Cognito-Template.yaml",
			"byteSize": 11775,
			"content": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Deploy the User Authentication Component of Antiope\n\nParameters:\n\n  pEmailAddress:\n    Type: String\n    Description: Default Username for Cognito\n    Default: NONE\n\n  pIdentityPoolName:\n    Type: String\n    Description: Name of the Identity Pool. Cannot contain non-alphanumeric char\n    Default: AntiopeIDPool\n    ConstraintDescription: pIdentityPoolName must only contain uppercase and lowercase letters and numbers\n    AllowedPattern: \"[A-Za-z0-9]+\"\n\n  pBucketName:\n    Description: Name of the bucket to hold the images\n    Type: String\n\n  pCustomCognitoDomain:\n    Description: What you will modify the User pool after it is created (Can't be done via CFT)\n    Type: String\n\n  pCustomAPIDomain:\n    Description: The Custom Domain Name you will configure once the API Gateway is created\n    Type: String\n\nConditions:\n  CreateCognitoUser: !Not [ !Equals [ !Ref pEmailAddress, \"NONE\"] ]\n\nResources:\n  #\n  # Cognito Auth to ES/Kibana\n  #\n  # Implementation stolen from:\n  # https://aws.amazon.com/blogs/security/visualizing-amazon-guardduty-findings/\n  CognitoUserPool:\n    Type: \"AWS::Cognito::UserPool\"\n    Properties:\n      UserPoolName: !Sub \"${AWS::StackName}-UserPool\"\n\n  KibanaUser:\n    Type: \"AWS::Cognito::UserPoolUser\"\n    Condition: CreateCognitoUser\n    Properties:\n      Username: !Ref pEmailAddress\n      UserAttributes:\n      - Name: \"email\"\n        Value: !Ref pEmailAddress\n      UserPoolId: !Ref CognitoUserPool\n\n  CognitoKibanaAuthRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Federated: cognito-identity.amazonaws.com\n            Action:\n              - \"sts:AssumeRoleWithWebIdentity\"\n            Condition:\n              StringEquals:\n                \"cognito-identity.amazonaws.com:aud\": !Ref CognitoIDPool\n              \"ForAnyValue:StringLike\":\n                \"cognito-identity.amazonaws.com:amr\": authenticated\n      Policies:\n        - PolicyName: Cognito_Kibana_Auth_Policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"mobileanalytics:PutEvents\"\n                  - \"cognito-sync:*\"\n                  - \"cognito-identity:*\"\n                Resource: \"*\"\n\n  CognitoKibanaUnauthRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Federated: \"cognito-identity.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRoleWithWebIdentity\"\n            Condition:\n              StringEquals:\n                \"cognito-identity.amazonaws.com:aud\": !Ref CognitoIDPool\n              \"ForAnyValue:StringLike\":\n                \"cognito-identity.amazonaws.com:amr\": unauthenticated\n      Policies:\n        - PolicyName: Cognito_Kibana_UnAuth_Policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: \"Allow\"\n                Action:\n                  - \"mobileanalytics:PutEvents\"\n                  - \"cognito-sync:*\"\n                Resource: \"*\"\n\n  CognitoIDPool:\n    Type: 'AWS::Cognito::IdentityPool'\n    Properties:\n      IdentityPoolName: !Ref pIdentityPoolName\n      AllowUnauthenticatedIdentities: false\n      CognitoIdentityProviders:\n        - ClientId: !Ref S3AccessAPIGatewayUserPoolClient\n          ProviderName: !GetAtt CognitoUserPool.ProviderName\n\n  IdentityPoolRoleMapping:\n    Type: \"AWS::Cognito::IdentityPoolRoleAttachment\"\n    Properties:\n      IdentityPoolId: !Ref CognitoIDPool\n      Roles:\n        authenticated: !GetAtt CognitoKibanaAuthRole.Arn\n        unauthenticated: !GetAtt CognitoKibanaUnauthRole.Arn\n\n  ApiGatewayRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: apigateway.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      Path: /\n      Policies:\n      - PolicyName: S3Access\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Action:\n            - s3:*\n            Effect: Allow\n            Resource:\n              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]\n              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]\n          - Action:\n            - s3:ListAllMyBuckets\n            - s3:GetBucketLocation\n            Effect: Allow\n            Resource: '*'\n\n  S3AccessAPIGateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Ref AWS::StackName\n      Description: Broker Access to the Antiope Bucket using Cognito Auth\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      # Parameters:\n      #   String: String\n      # Policy: JSON object\n      Body: !Sub |-\n        openapi: \"3.0.1\"\n        info:\n          title: \"${AWS::StackName}-Reports\"\n          version: \"2016-10-13T23:04:43Z\"\n        servers:\n        - url: \"https://gpd67rbo57.execute-api.${AWS::Region}.amazonaws.com/{basePath}\"\n          variables:\n            basePath:\n              default: \"/dev\"\n        paths:\n          /login:\n            get:\n              operationId: \"Login Redirect\"\n              responses:\n                301:\n                  description: \"301 response\"\n                  headers:\n                    Location:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"301\"\n                    responseParameters:\n                      method.response.header.Location: \"'https://${pCustomCognitoDomain}.auth.${AWS::Region}.amazoncognito.com/login?response_type=token\u0026client_id=${S3AccessAPIGatewayUserPoolClient}\u0026redirect_uri=https%3A%2F%2F${pCustomAPIDomain}'\"\n                    responseTemplates:\n                      application/json: \"redirect\"\n                requestTemplates:\n                  application/json: \"{\\\"statusCode\\\": 301}\"\n                passthroughBehavior: \"when_no_match\"\n                type: \"mock\"\n          /{item}:\n            get:\n              parameters:\n              - name: \"item\"\n                in: \"path\"\n                required: true\n                schema:\n                  type: \"string\"\n              responses:\n                400:\n                  description: \"400 response\"\n                  content: {}\n                500:\n                  description: \"500 response\"\n                  content: {}\n                200:\n                  description: \"200 response\"\n                  headers:\n                    content-type:\n                      schema:\n                        type: \"string\"\n                    Content-Type:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              security:\n              - ${AWS::StackName}: []\n              x-amazon-apigateway-integration:\n                credentials: \"${ApiGatewayRole.Arn}\"\n                uri: \"arn:aws:apigateway:${AWS::Region}:s3:path/${pBucketName}/Reports/{object}\"\n                responses:\n                  4\\d{2}:\n                    statusCode: \"400\"\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.content-type: \"integration.response.header.content-type\"\n                      method.response.header.Content-Type: \"integration.response.header.Content-Type\"\n                  5\\d{2}:\n                    statusCode: \"500\"\n                requestParameters:\n                  integration.request.path.object: \"method.request.path.item\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"GET\"\n                type: \"aws\"\n          /:\n            get:\n              responses:\n                400:\n                  description: \"400 response\"\n                  content: {}\n                500:\n                  description: \"500 response\"\n                  content: {}\n                200:\n                  description: \"200 response\"\n                  headers:\n                    content-type:\n                      schema:\n                        type: \"string\"\n                    Content-Type:\n                      schema:\n                        type: \"string\"\n                  content:\n                    application/json:\n                      schema:\n                        $ref: \"#/components/schemas/Empty\"\n              x-amazon-apigateway-integration:\n                credentials: \"${ApiGatewayRole.Arn}\"\n                uri: \"arn:aws:apigateway:${AWS::Region}:s3:path/${pBucketName}/public/index.html\"\n                responses:\n                  4\\d{2}:\n                    statusCode: \"400\"\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.content-type: \"integration.response.header.content-type\"\n                      method.response.header.Content-Type: \"integration.response.header.Content-Type\"\n                  5\\d{2}:\n                    statusCode: \"500\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"GET\"\n                type: \"aws\"\n        components:\n          schemas:\n            Empty:\n              title: \"Empty Schema\"\n              type: \"object\"\n          securitySchemes:\n            ${AWS::StackName}:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"cognito_user_pools\"\n              x-amazon-apigateway-authorizer:\n                providerARNs:\n                - \"${CognitoUserPool.Arn}\"\n                type: \"cognito_user_pools\"\n        x-amazon-apigateway-policy:\n          Version: \"2012-10-17\"\n          Statement:\n          - Effect: \"Deny\"\n            Principal: \"*\"\n            Action: \"execute-api:Invoke\"\n            Resource: \"execute-api:/*\"\n            Condition:\n              NotIpAddress:\n                aws:SourceIp: \"99.161.92.198/32\"\n          - Effect: \"Allow\"\n            Principal: \"*\"\n            Action: \"execute-api:Invoke\"\n            Resource: \"execute-api:/*\"\n\n  S3AccessAPIGatewayDeployment:\n    Type: AWS::ApiGateway::Deployment\n    Properties:\n      Description: \"Access to reports\"\n      RestApiId: !Ref S3AccessAPIGateway\n      StageName: \"Reports\"\n\n  S3AccessAPIGatewayUserPoolClient:\n    Type: AWS::Cognito::UserPoolClient\n    Properties:\n        ClientName: !Sub \"${AWS::StackName}-S3Access\"\n        ExplicitAuthFlows:\n          - ADMIN_NO_SRP_AUTH\n          - USER_PASSWORD_AUTH\n        RefreshTokenValidity: 1\n        UserPoolId: !Ref CognitoUserPool\n\nOutputs:\n  StackName:\n    Description: Name of this Stack\n    Value: !Ref AWS::StackName\n\n  CognitoKibanaAuthRole:\n    Description: \"Role for cognito Kibana auth\"\n    Value: !GetAtt CognitoKibanaAuthRole.Arn\n\n  CognitoUserPoolId:\n    Description: \"ID for user pool used for auth\"\n    Value: !Ref CognitoUserPool\n\n  CognitoIdentityPoolId:\n    Description: \"ID for identity pool used for auth\"\n    Value: !Ref CognitoIDPool\n\n  CognitoUserPoolName:\n    Value: !GetAtt CognitoUserPool.ProviderName\n\n  LoginUrl:\n    Value: !Sub \"https://${pCustomAPIDomain}/login\"\n",
			"canonicalURL": "/github.com/gustcol/Canivete@b8acef26765816c0bf33ed195a8bd74df03c7b70/-/blob/antiope/cognito/cloudformation/Cognito-Template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gustcol/Canivete/blob/b8acef26765816c0bf33ed195a8bd74df03c7b70/antiope/cognito/cloudformation/Cognito-Template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}