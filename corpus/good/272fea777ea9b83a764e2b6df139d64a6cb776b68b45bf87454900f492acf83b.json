{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ply-ct/ply"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "test/mocha/plyex/openapi.yaml",
			"byteSize": 8001,
			"content": "openapi: 3.0.2\ninfo:\n  title: Greeting API\n  version: 1.0.0\npaths:\n  /greeting:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Greeting'\n              example:\n                name: World\n                salutation: Hello\n          description: OK\n      summary: Retrieve a greeting\n      x-codeSamples:\n        - lang: Java\n          source: |\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(baseUrl + \"/greeting\"))\n                    .setHeader(\"Accept\", \"application/json\")\n                    .setHeader(\"Authorization\", \"Bearer \" + authToken)\n                    .build();\n\n            HttpResponse\u003cString\u003e response = client.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() == HttpURLConnection.HTTP_OK) {\n                Greeting greeting = new Gson().fromJson(response.body(), Greeting.class);\n                System.out.println(\"greeting: \" + response.body());\n            }\n        - lang: Python\n          source: |\n            response = requests.get(\n                f\"{baseUrl}/greeting\",\n                headers={\n                    \"Accept\": \"application/json\",\n                    \"Authorization\": f\"Bearer {authToken}\"\n                }\n            )\n            if (response.ok):\n                greeting = response.json()\n                print(f\"greeting: {str(greeting)}\")\n        - lang: TypeScript\n          source: |\n            const response = await fetch(`${baseUrl}/greeting`, {\n                method: 'get',\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: `Bearer ${authToken}`\n                }\n            });\n            if (response.ok) {\n                const greeting = await response.json() as Greeting;\n                console.log(`greeting: ${JSON.stringify(greeting)}`);\n            }\n    post:\n      requestBody:\n        description: greeting\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Greeting'\n            example:\n              salutation: Howdy\n              name: Cowboy\n        required: true\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema: {}\n              example:\n                status:\n                  code: 201\n                  message: Created\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema: {}\n              example:\n                status:\n                  code: 400\n                  errors:\n                    - Greeting should have required property 'name'\n                    - Greeting should NOT have additional property 'notname'\n                    - Greeting/salutation should NOT have more than 10 characters\n                  message: Bad Request\n      summary: Create a greeting\n      description: Emit a greeting based on the greeting payload\n      x-codeSamples:\n        - lang: Java\n          source: |\n            Unknown unknown = new Unknown();\n            // TODO populate unknown object\n\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(baseUrl + \"/greeting\"))\n                    .setHeader(\"Content-Type\", \"application/json\")\n                    .setHeader(\"Authorization\", \"Bearer \" + authToken)\n                    .POST(HttpRequest.BodyPublishers.ofString(new Gson().toJson(unknown)))\n                    .build();\n\n            HttpResponse\u003cString\u003e response = client.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() == HttpURLConnection.HTTP_CREATED) {\n                String location = response.headers().firstValue(\"Location\").get();\n                System.out.println(\"Created unknown at: \" + baseUrl + location);\n            }\n        - lang: Python\n          source: |\n            unknown = Unknown()\n            # TODO populate unknown object\n\n            response = requests.post(\n                f\"{baseUrl}/greeting\",\n                headers={\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": f\"Bearer {authToken}\"\n                },\n                json=unknown.__dict__\n            )\n            if (response.status_code == HTTPStatus.CREATED):\n                location = response.headers.get(\"Location\")\n                print(f\"Created unknown at: {baseUrl}{location}\")\n        - lang: TypeScript\n          source: |\n            const unknown = new Unknown();\n            // TODO populate unknown object\n\n            const response = await fetch(`${baseUrl}/greeting`, {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${authToken}`\n                },\n                body: JSON.stringify(unknown)\n            });\n            if (response.status === StatusCodes.CREATED) {\n                const location = response.headers.get('Location');\n                console.log(`Created unknown at: ${baseUrl}${location}`);\n            }\n  /greeting/{name}:\n    get:\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Greeting'\n              example:\n                name: Linus\n                salutation: Hello\n          description: OK\n      summary: Retrieve a greeting\n      x-codeSamples:\n        - lang: Java\n          source: |\n            HttpClient client = HttpClient.newHttpClient();\n            String name = \"Linus\";\n\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(baseUrl + \"/greeting/\" + name))\n                    .setHeader(\"Accept\", \"application/json\")\n                    .setHeader(\"Authorization\", \"Bearer \" + authToken)\n                    .build();\n\n            HttpResponse\u003cString\u003e response = client.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() == HttpURLConnection.HTTP_OK) {\n                Greeting greeting = new Gson().fromJson(response.body(), Greeting.class);\n                assert greeting.getName().equals(name);\n                System.out.println(\"greeting: \" + response.body());\n            }\n        - lang: Python\n          source: |\n            name = \"Linus\"\n\n            response = requests.get(\n                f\"{baseUrl}/greeting/{name}\",\n                headers={\n                    \"Accept\": \"application/json\",\n                    \"Authorization\": f\"Bearer {authToken}\"\n                }\n            )\n            if (response.ok):\n                greeting = response.json()\n                assert greeting[\"name\"] == name\n                print(f\"greeting: {str(greeting)}\")\n        - lang: TypeScript\n          source: |\n            const name = 'Linus';\n\n            const response = await fetch(`${baseUrl}/greeting/${name}`, {\n                method: 'get',\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: `Bearer ${authToken}`\n                }\n            });\n            if (response.ok) {\n                const greeting = await response.json() as Greeting;\n                assert.equal(greeting.name, name);\n                console.log(`greeting: ${JSON.stringify(greeting)}`);\n            }\ncomponents:\n  schemas:\n    Greeting:\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n        salutation:\n          type: string\n      required:\n        - salutation\n        - name\n      type: object\n",
			"canonicalURL": "/github.com/ply-ct/ply@b8411337d55a4877ad19864114f7b8234cbff211/-/blob/test/mocha/plyex/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ply-ct/ply/blob/b8411337d55a4877ad19864114f7b8234cbff211/test/mocha/plyex/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}