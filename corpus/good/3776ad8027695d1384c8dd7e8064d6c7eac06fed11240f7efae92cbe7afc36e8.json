{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/weg-li/weg-li"
		},
		"file": {
			"name": "specification.yaml",
			"size": 0,
			"path": "specification.yaml",
			"byteSize": 11001,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: weg-li Recommender API\n  version: 0.1.0\n\nservers:\n  - url: https://europe-west3-wegli-296209.cloudfunctions.net/api\n  - url: https://api.weg-li.de/v1\n  - url: https://api.weg.li/v1\n\ntags:\n  - name: user\n    description: Add, remove or update user data.\n  - name: analyze\n    description: Analyze incident data in order to provide recommendations for important report data.\n  - name: report\n    description: Submit a new report.\n\npaths:\n  /user:\n    post:\n      tags:\n        - user\n      description: Create a new user for the analysis platform.\n      responses:\n        \"200\":\n          description: \"The operation was successful.\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user_id:\n                    $ref: '#/components/schemas/UserID'\n                  access_token:\n                    type: string\n                    description: The corresponding access token for the newly created user account.\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /user/{user_id}:\n    delete:\n      tags:\n        - user\n      description: Deletes the information that is associated to the provided anonymous user id on the analysis platform.\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserID'\n      responses:\n        \"200\":\n          description: The operation was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          description: The requested user could not be found.\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /analyze/data:\n    post:\n      tags:\n        - analyze\n      security:\n        - AccessTokenAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - time\n                - location\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UserID'\n                time:\n                  type: integer\n                  format: int64\n                  description: The unix time of the violation in milliseconds.\n                  example: 1605481357079\n                location:\n                  description: The location of the violation.\n                  allOf:\n                    - $ref: '#/components/schemas/Location'\n      responses:\n        \"200\":\n          description: \"Returns ordered list of recommendations with their score and corresponding severity type.\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ViolationSuggestion'\n        \"400\":\n          $ref: \"#/components/responses/BadRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /analyze/image/upload:\n    get:\n      description: Returns expiring cloud storage urls. Upload urls only accept PUT requests and expect files in jpeg format.\n      tags:\n        - analyze\n      parameters:\n        - name: quantity\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 5\n      responses:\n        \"200\":\n          description: The operation was successful.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - token\n                  - google_cloud_urls\n                properties:\n                  token:\n                    type: string\n                    description: A unique image token\n                    example: 82571c4a-7f07-4bdc-acdc-5b2745a00de3\n                  google_cloud_urls:\n                    type: array\n                    items:\n                      type: string\n                    description: The Google Cloud Storage urls to which the image(s) should be uploaded.\n                    example:\n                      - https://api.google.com/...\n        \"400\":\n          $ref: \"#/components/responses/BadRequestError\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /analyze/image/{image_token}:\n    get:\n      description: Returns suggestions of the violating vehicle regarding license plate number, make and color based on the provided images ordered by descending confidence.\n      tags:\n        - analyze\n      parameters:\n        - name: image_token\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The operation was successful.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CarSuggestions\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestError\"\n        \"404\":\n          description: No image(s) could be found for the provided token.\n        \"409\":\n          $ref: \"#/components/responses/ConflictError\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /report:\n    post:\n      tags:\n        - report\n      security:\n        - AccessTokenAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - report\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UserID'\n                report:\n                  $ref: \"#/components/schemas/Report\"\n      responses:\n        \"200\":\n          description: The operation was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/ConflictError\"\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\n  /report/district/{zipcode}:\n    get:\n      tags:\n        - report\n      parameters:\n        - name: zipcode\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The operation was successful.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  public_order_office:\n                    description: The public order office which is responsible for handling the violation reports.\n                    type: object\n                    properties:\n                      name:\n                        description: The name of the public order office (usually the corresponding city name).\n                        type: string\n                      email_address:\n                        description: The email address to which a violation report must be sent.\n                        type: string\n        \"404\":\n          description: No district was found for the provided zipcode. This might either be due to a non-existing zipcode or due to the district not being registered yet.\n        \"500\":\n          $ref: \"#/components/responses/InternalServerError\"\ncomponents:\n  responses:\n    BadRequestError:\n      description: Bad Request. The request format did not conform to the specification and contains invalid structures or values.\n    UnauthorizedError:\n      description: Unauthorized. The request needs to be authorized and the access token is missing or invalid.\n    ForbiddenError:\n      description: Forbidden. The request needs to be authorized and the provided authorization scope does not match the required one.\n    ConflictError:\n      description: Conflict. An endpoint specific error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InternalServerError:\n      description: Internal Server Error. An unspecified internal server error occurred.\n  securitySchemes:\n    AccessTokenAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    UserID:\n      type: string\n      example: 550e8400-e29b-11d4-a716-446655440000\n    Location:\n      type: object\n      required:\n        - latitude\n        - longitude\n      properties:\n        latitude:\n          type: number\n          format: double\n          description: The latitude value of the location's coordinates.\n          example: 52.550081\n        longitude:\n          type: number\n          format: double\n          description: The longitude value of the location's coordinates.\n          example: 13.370763\n    CarSuggestions:\n      type: object\n      properties:\n        suggestions:\n          type: object\n          properties:\n            license_plate_number:\n              type: array\n              items:\n                type: string\n              description: Suggestions for the license plate number. Empty list when no license plate number recognized.\n              example: ['B-WL 1234', 'KA KK 3455']\n            make:\n              type: array\n              items:\n                type: string\n              description: Suggestions for the make. Empty list when no make recognized.\n              example: ['Mercedes-Benz']\n            color:\n              type: array\n              items:\n                type: string\n              description: Suggestions for the color. Empty list when no color recognized.\n              example: ['blue', 'white']\n    ViolationSuggestion:\n      type: object\n      required:\n        - error\n      properties:\n        violation_type:\n          type: integer\n          example: 6\n        score:\n          type: number\n          example: 0.1563\n        severity_type:\n          type: integer\n          example: 0\n    Report:\n      type: object\n      properties:\n        violation_type:\n          type: integer\n          format: int32\n          example: 1\n        severity_type:\n          type: integer\n          format: int32\n          example: 0\n        time:\n          type: integer\n          format: int64\n          example: 1606756404\n          description: The date and time of the violation as Unix timestamp (in seconds since epoch).\n        location:\n          $ref: '#/components/schemas/Location'\n        image_token:\n          type: string\n    Error:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: string\n        description:\n          type: string\n",
			"canonicalURL": "/github.com/weg-li/weg-li@3681adefb9194f4f8ed62367db11cbffa4b59a31/-/blob/specification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/weg-li/weg-li/blob/3681adefb9194f4f8ed62367db11cbffa4b59a31/specification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}