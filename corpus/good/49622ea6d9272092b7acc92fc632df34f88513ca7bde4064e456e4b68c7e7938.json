{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rpstreef/aws-sam-node-example"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 16733,
			"content": "openapi: 3.0.1\ninfo:\n  title: openapi-example\n  version: 0.3.0\n  description: \"\u003cp\u003eThis is an example OpenAPI specification document for our identity management solution\u003c/p\u003e\"\n  termsOfService: \"http://example.com/tos\"\n  contact:\n    email: \"example@example.com\"\nservers:\n- url: http://example.com/\n  variables:\n    basePath:\n      default: /v1\nx-amazon-apigateway-request-validators:\n  all:\n    validateRequestBody: true\n    validateRequestParameters: true\n  params:\n    validateRequestBody: false\n    validateRequestParameters: true\n  body:\n    validateRequestBody: true\n    validateRequestParameters: false\n\npaths:\n  /identity/authenticate:\n    post:\n      operationId: identityAuthenticate\n      description: Authenticate user (either login, or continue session)\n      x-amazon-apigateway-request-validator: body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Authenticate'\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/lambda'\n        400:\n          $ref: '#/components/responses/lambda'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - Identity\n    options:\n      responses:\n        200:\n          $ref: '#/components/responses/cors'\n        400:\n          $ref: '#/components/responses/cors'\n        500:\n          $ref: '#/components/responses/cors'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Max-Age: \"'7200'\"\n              method.response.header.Access-Control-Allow-Methods: \"'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        passthroughBehavior: \"when_no_match\"\n        timeoutInMillis: 29000\n        requestTemplates:\n          application/json: \"{ \\\"statusCode\\\": 200 }\"\n        type: \"mock\"\n  /identity/register:\n    post:\n      operationId: identityRegister\n      description: Register new Business user\n      x-amazon-apigateway-request-validator: body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Register'\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/lambda'\n        400:\n          $ref: '#/components/responses/lambda'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - Identity\n    options:\n      responses:\n        200:\n          $ref: '#/components/responses/cors'\n        400:\n          $ref: '#/components/responses/cors'\n        500:\n          $ref: '#/components/responses/cors'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Max-Age: \"'7200'\"\n              method.response.header.Access-Control-Allow-Methods: \"'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        passthroughBehavior: \"when_no_match\"\n        timeoutInMillis: 29000\n        requestTemplates:\n          application/json: \"{ \\\"statusCode\\\": 200 }\"\n        type: \"mock\"\n  /identity/reset:\n    post:\n      operationId: identityReset\n      description: 1) To request, only send username, 2) to finalize reset; send username, password and confirmation code.\n      x-amazon-apigateway-request-validator: body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Reset'\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/lambda'\n        400:\n          $ref: '#/components/responses/lambda'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - Identity\n    options:\n      responses:\n        200:\n          $ref: '#/components/responses/cors'\n        400:\n          $ref: '#/components/responses/cors'\n        500:\n          $ref: '#/components/responses/cors'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Max-Age: \"'7200'\"\n              method.response.header.Access-Control-Allow-Methods: \"'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        passthroughBehavior: \"when_no_match\"\n        timeoutInMillis: 29000\n        requestTemplates:\n          application/json: \"{ \\\"statusCode\\\": 200 }\"\n        type: \"mock\"\n  /identity/verify:\n    post:\n      operationId: identityVerify\n      description: Verify a registered user via a unique code\n      x-amazon-apigateway-request-validator: body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Verify'\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/lambda'\n        400:\n          $ref: '#/components/responses/lambda'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - Identity\n    options:\n      responses:\n        200:\n          $ref: '#/components/responses/cors'\n        400:\n          $ref: '#/components/responses/cors'\n        500:\n          $ref: '#/components/responses/cors'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Max-Age: \"'7200'\"\n              method.response.header.Access-Control-Allow-Methods: \"'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        passthroughBehavior: \"when_no_match\"\n        timeoutInMillis: 29000\n        requestTemplates:\n          application/json: \"{ \\\"statusCode\\\": 200 }\"\n        type: \"mock\"\n  /user:\n    get:\n      operationId: getUser\n      description: get User details by ID\n      x-amazon-apigateway-request-validator: params\n      parameters:\n        - $ref: '#/components/parameters/userID'\n      security:\n      - example-CognitoUserPoolAuthorizer: []\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/user'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - User\n    post:\n      operationId: postUser\n      description: Add a new user\n      parameters:\n       - $ref: '#/components/parameters/correlationIdHeader'\n       - $ref: '#/components/parameters/debugHeader'\n      x-amazon-apigateway-request-validator: all\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserFunction.Arn}/invocations\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        timeoutInMillis:\n          Ref: APITimeout\n        type: \"aws_proxy\"\n      responses:\n        200:\n          $ref: '#/components/responses/lambda'\n        400:\n          $ref: '#/components/responses/lambda'\n        500:\n          $ref: '#/components/responses/500APIError'\n      tags:\n        - User\n    options:\n      responses:\n        200:\n          $ref: '#/components/responses/cors'\n        400:\n          $ref: '#/components/responses/cors'\n        500:\n          $ref: '#/components/responses/cors'\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Max-Age: \"'7200'\"\n              method.response.header.Access-Control-Allow-Methods: \"'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n        passthroughBehavior: \"when_no_match\"\n        timeoutInMillis: 29000\n        requestTemplates:\n          application/json: \"{ \\\"statusCode\\\": 200 }\"\n        type: \"mock\"\ncomponents:\n  parameters:\n    userID:\n      description: User identifier\n      in: query\n      name: userID\n      schema:\n        type: string\n      required: true\n    correlationIdHeader:\n      description: Unique string that can trace execution across services\n      in: header\n      name: x-correlation-id\n      schema:\n        type: string\n      required: true\n    debugHeader:\n      description: Force debug level for this execution run\n      in: header\n      name: x-debug-level\n      schema:\n        type: string\n        enum: [error, debug, info]  \n      required: false\n  schemas:\n    Authenticate:\n      title: Authenticate\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          type: string\n          example: \"userTest\"\n        password:\n          type: string\n          example: \"123$SFF22l\"\n        refreshToken:\n          type: string\n          example: \"sdfasjdfsfj43242342fsalkfjflksak23424\"\n    Register:\n      title: Register\n      type: object\n      description: Only an Organization can register, this User is its representative\n      required:\n        - email\n        - password\n        - username\n        - firstName\n        - lastName\n      properties:\n        email:\n          type: string\n          example: \"user@business.com\"\n          pattern: \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\"\n        password:\n          type: string\n          example: \"123$SFF22l\"\n        username:\n          type: string\n          example: \"testUsername\"\n        firstName:\n          type: string\n          example: \"Rolf\"\n        lastName:\n          type: string\n          example: \"Streefkerk\"\n    Reset:\n      title: Reset\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          type: string\n          example: \"userTest\"\n        confirmationCode:\n          type: string\n          example: \"234553\"\n        password:\n          type: string\n          example: \"testPassword123!\"\n    Verify:\n      type: object\n      title: Verify\n      required:\n        - username\n        - confirmationCode\n      properties:\n        confirmationCode:\n          type: string\n          example: \"234305\"\n        username:\n          type: string\n          example: \"testUser\"\n    User:\n      type: object\n      title: User\n      required:\n        - name\n        - title\n        - description\n      properties:\n        name:\n          type: string\n          example: \"rolf-streefkerk\"\n        title:\n          type: string\n          example: \"Rolf Streefkerk\"\n        description:\n          type: string\n          example: \"Business Operating Manager\"\n        creationDate:\n          type: string\n          example: \"2019-03-15T12:33:33Z\"\n        modifyDate:\n          type: string\n          example: \"2019-03-15T12:33:33Z\"\n    Lambda:\n      type: object\n      title: Lambda\n      required:\n        - isBase64Encoded\n        - statusCode\n        - body\n      properties:\n        isBase64Encoded:\n          type: boolean\n          example: false\n        statusCode:\n          type: number\n          example: 200\n        body:\n          type: object\n    Empty:\n      title: \"Empty Schema\"\n      type: \"object\"\n  responses:\n    404NotFound:\n      description: The specified resource was not found.\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Methods:\n          schema:\n            type: \"string\"\n        Access-Control-Max-Age:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Headers:\n          schema:\n            type: \"string\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              statusCode:\n                type: string\n                example: \"404\"\n              message:\n                type: string\n                example: The specified resource was not found\n    500APIError:\n      description: Unexpected error\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Methods:\n          schema:\n            type: \"string\"\n        Access-Control-Max-Age:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Headers:\n          schema:\n            type: \"string\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              statusCode:\n                type: string\n                example: \"500\"\n              message:\n                type: string\n                example: This is an error\n    user:\n      description: User\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n    lambda:\n      description: Lambda\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Methods:\n          schema:\n            type: \"string\"\n        Access-Control-Max-Age:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Headers:\n          schema:\n            type: \"string\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Lambda'\n    cors:\n      description: \"200 response\"\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Methods:\n          schema:\n            type: \"string\"\n        Access-Control-Max-Age:\n          schema:\n            type: \"string\"\n        Access-Control-Allow-Headers:\n          schema:\n            type: \"string\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Empty\"\n  securitySchemes:\n    example-CognitoUserPoolAuthorizer:\n      type: \"apiKey\"\n      name: \"Authorization\"\n      in: \"header\"\n      x-amazon-apigateway-authtype: \"cognito_user_pools\"\n      x-amazon-apigateway-authorizer:\n        providerARNs:\n        - Ref: CognitoUserPoolARN\n        type: \"cognito_user_pools\"\ntags:\n  - name: Identity\n    description: Identity management\n  - name: User\n    description: User data",
			"canonicalURL": "/github.com/rpstreef/aws-sam-node-example@e325fa3ef83cb7d6d470985efbc1a2f23443a03c/-/blob/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rpstreef/aws-sam-node-example/blob/e325fa3ef83cb7d6d470985efbc1a2f23443a03c/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}