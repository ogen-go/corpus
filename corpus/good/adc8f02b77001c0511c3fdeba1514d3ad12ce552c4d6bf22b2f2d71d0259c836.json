{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "object_groups_api.yaml",
			"size": 0,
			"path": "PersonalDataManager/src/main/resources/static/grp/swagger/object_groups_api.yaml",
			"byteSize": 36823,
			"content": "openapi: 3.0.1\ninfo:\n  title: Object Groups API\n  description: This API allow the management of groups of objects.\n  version: '1.0'\nservers:\n  - url: http://192.168.0.47:8081/test/datamanager/api/v1\n    description: Internal testing\n  - url: https://www.snap4city.org/mypersonaldata/api/v1\n    description: Production usage\npaths:\n  /devicegroup:\n    post:\n      tags:\n        - Groups\n      summary: It creates a new empty group\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/group'\n      responses:\n        '200':\n          description: A JSON representation of the newly created group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized\n    get:\n      tags: \n        - Groups\n      summary: It provides a list or page of groups.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n      responses:\n        '200':\n          $ref: '#/components/responses/groups'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error        \n  /api/v1/devicegroup/public:\n    get:\n      deprecated: true\n      tags: \n        - Groups\n      summary: It provides a list or page of public groups.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n      responses:\n        '200':\n          $ref: '#/components/responses/groups'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error    \n  /api/v1/public/devicegroup:\n    get:\n      tags: \n        - Groups\n      summary: It provides a list or page of public groups.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n      responses:\n        '200':\n          $ref: '#/components/responses/groups'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error            \n  /api/v1/devicegroup/organization:\n    get:\n      tags: \n        - Groups\n      summary: It provides a list or page of public groups managed by the organization of the requester.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n      responses:\n        '200':\n          $ref: '#/components/responses/groups'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error    \n  /api/v1/devicegroup/delegated:\n    get:\n      tags: \n        - Groups\n      summary: It provides a list or page of groups that the requester can access in read-only mode.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n      responses:\n        '200':\n          $ref: '#/components/responses/groups'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error      \n  /api/v1/devicegroup/{id}:\n    get:\n      tags: \n        - Groups\n      summary: It provides metadata about the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer        \n      responses:\n        '200':\n          description: A JSON representation of the requested group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '204':\n          description: No content        \n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n    patch:\n      tags: \n        - Groups\n      summary: It updates the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer              \n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/group'\n      responses:\n        '200':\n          description: A JSON representation of the group after the update.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n    delete:\n      tags: \n        - Groups\n      summary: It performs a logical delete of the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer              \n      responses:\n        '200':\n          description: A JSON representation of the group after the logical delete.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error          \n  /api/v1/public/devicegroup/{id}:\n    get:\n      tags: \n        - Groups\n      summary: It provides metadata about the specified public group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer        \n      responses:\n        '200':\n          description: A JSON representation of the requested group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '204':\n          description: No content        \n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error \n  /api/v1/devicegroup/{groupId}/elements:\n    get:\n      tags: \n        - Elements\n      summary: It provides a list or page of the elements in the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n      responses:\n        '200':\n          $ref: '#/components/responses/elements'\n        '204':\n          description: If the group cannot be found, or the list of its elements cannot be retrieved.        \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error        \n    post:\n      tags: \n        - Elements\n      summary: It adds objects to the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer        \n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/element'\n      responses:\n        '200':\n          $ref: '#/components/responses/elements'\n        '204':\n          description: If the group cannot be found.\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error        \n    delete:\n      tags: \n        - Elements\n      summary: It performs a logical removal of all elements from the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n      responses:\n        '200':\n          $ref: '#/components/responses/elements'\n        '204':\n          description: If the group cannot be found, or the list of its elements cannot be retrieved.\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error       \n  /api/v1/public/devicegroup/{groupId}/elements:\n    get:\n      tags: \n        - Elements\n      summary: It provides a list or page of the elements in the specified public group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n      responses:\n        '200':\n          $ref: '#/components/responses/elements'\n        '204':\n          description: If the group cannot be found, or the list of its elements cannot be retrieved.        \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error            \n  /api/v1/devicegroup/{groupId}/elements/{elementId}:\n    delete:\n      tags: \n        - Elements\n      summary: It performs a logical removal of the specified element from the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n        - name: elementId\n          in: path\n          required: true\n          schema:\n            type: integer            \n      responses:\n        '200':\n          description: Returns the identifier of the successfully removed element.\n        '204':\n          description: If the group or the element cannot be found.\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error  \n  /api/v1/devicegroup/{groupId}/availElmtTypesToAdd:\n    get:\n      tags: \n        - Elements\n      summary: It provides the list of the types of objects that the requester owns and that can be added to the group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n      responses:\n        '200':\n          description: Array of strings each indicating a type of object that the requester can add to the group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '204':\n          description: If the requester owns no suitable objects or an unexpected error occurs.        \n        '401':\n          description: Unauthorized        \n  /api/v1/devicegroup/{groupId}/availElmtToAdd:\n    get:\n      tags: \n        - Elements\n      summary: It provides the list of the objects of the requested type that the requester can add to the group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/elmtType'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer          \n      responses:\n        '200':\n          description: Array of objects that the requester can add to the group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n        '204':\n          description: If the requester owns no suitable objects or an unexpected error occurs.        \n        '401':\n          description: Unauthorized      \n  /api/v1/groupelement:\n    get:\n      tags: \n        - Elements\n      summary: It provides the listing of groups where the specified object can be found.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/elementId'\n        - $ref: '#/components/parameters/elementType'\n      responses:\n        '200':\n          description: List of _elements_, each representing the relation between the specified object and a group where it can be found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/element'\n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error  \n  /api/v1/devicegroup/{groupId}/delegations/{delegationId}:\n    get:\n      tags:\n        - Delegation\n      summary: It provides information about the requested delegation.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer   \n        - name: delegationId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/delegation'\n        '204':\n          description: If the delegation cannot be found.      \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error       \n    put:\n      tags:\n        - Delegation\n      summary: It updates an existing delegation.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer   \n        - name: delegationId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/delegation'\n      responses:\n        '200':\n          $ref: '#/components/responses/delegation'\n        '204':\n          description: If the delegation to be updated cannot be found.      \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error  \n    patch:\n      tags:\n        - Delegation\n      summary: It updates an existing delegation.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer   \n        - name: delegationId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/delegation'\n      responses:\n        '200':\n          $ref: '#/components/responses/delegation'\n        '204':\n          description: If the delegation to be updated cannot be found.      \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error         \n    delete:\n      tags:\n        - Delegation\n      summary: It performs a logical deletion of an existing delegation.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer   \n        - name: delegationId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/delegation'\n        '204':\n          description: If the delegation to be updated cannot be found.      \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error                \n  /api/v1/devicegroup/{groupId}/delegations:\n    get:\n      tags: \n        - Delegation\n      summary: It provides a list or page of the delegations given for the specified group.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/pageNumber'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/searchKey'\n        - $ref: '#/components/parameters/highLevelType'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/delegations'\n        '204':\n          description: If the group cannot be found, or the list of its delegations cannot be retrieved.        \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error        \n    post:\n      tags:\n        - Delegation\n      summary: It provides information about the requested delegation.\n      parameters:\n        - $ref: '#/components/parameters/accessToken'\n        - $ref: '#/components/parameters/sourceRequest'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/lang'\n        - name: groupId\n          in: path\n          required: true\n          schema:\n            type: integer   \n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/delegation'\n      responses:\n        '200':\n          $ref: '#/components/responses/elements'\n        '204':\n          description: If the group cannot be found.      \n        '400':\n          description: Bad request\n        '401':\n          description: Unauthorized        \n        '500':\n          description: Internal Server Error       \n             \n        \ncomponents:\n  parameters:\n    sourceRequest:\n      name: sourceRequest\n      in: query\n      required: true\n      schema:\n        type: string\n    sourceId:\n      name: sourceId\n      in: query\n      required: false\n      schema:\n        type: string\n    lang:\n      name: lang\n      in: query\n      required: false\n      schema:\n        type: string  \n    pageNumber:\n      name: pageNumber\n      description: Required for requesting paginated listings.\n      in: query\n      required: false\n      schema:\n        type: integer\n    pageSize:\n      name: pageSize\n      description: Required for requesting paginated listings.\n      in: query\n      required: false\n      schema:\n        type: integer\n    sortDirection:\n      name: sortDirection\n      in: query\n      required: false\n      schema: \n        type: string\n        enum: [asc,desc]\n    sortBy:\n      name: sortBy\n      in: query\n      required: false\n      schema:\n        type: string\n        enum: [id,highLevelType,name,description,updateTime,username,ownership]\n    searchKey:\n      name: searchKey\n      description: It allows to perform a full-text filtering of groups. \n      in: query\n      required: false\n      schema:\n        type: string\n    highLevelType:\n      name: highLevelType\n      in: query\n      required: false\n      schema:\n        type: string        \n        enum: [MyGroup]\n    elmtType:\n      name: elmtType\n      description: The type of the objects to be listed.\n      in: query\n      required: false\n      schema:\n        type: string      \n    elementId:\n      name: elementId\n      description: \"The identifier of the object to be searched. Identifiers of objects of different types can have different structures: it depends of data sources from where objects come.\"\n      in: query\n      required: true\n      schema:\n        type: string        \n    elementType:\n      name: elementType\n      description: The type of the objects to be searched.\n      in: query\n      required: true\n      schema:\n        type: string            \n    accessToken:\n      name: accessToken\n      in: query\n      description: The user's access token.\n      required: true\n      schema:\n        type: string    \n  schemas:\n    group:\n      type: object\n      required:\n        - highLevelType\n        - name\n        - description\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the group.\n          example: 1\n        name:\n          type: string\n          description: The name of the group.\n          example: Prova\n        description:\n          type: string\n          description: A textual description for the group.\n          example: Description of group Prova\n        highLevelType:\n          type: string\n          enum: [MyGroup]\n          example: MyGroup\n        insertTime:\n          type: string\n          format: date-time\n          description: Date and time when the group was created.\n          example: 2019-12-10 17:31:45\n        updateTime:\n          type: string\n          format: date-time\n          description: Date and time of the most recent modification of the group, as for its composition or metadata.\n          example: 2019-12-19 09:56:55\n        deleteTime:\n          type: string\n          format: date-time\n          description: Date and time when the group was deleted.\n          example: 2019-12-19 09:56:55\n        organizations:\n          type: string\n          description: The organization that manages the group.\n          example: [ou=Firenze,dc=foo,dc=example,dc=org]\n        ownership:\n          type: string\n          enum: [public,private]\n          description: Wheter the group is public or private.\n          example: public\n        username:\n          type: string\n          description: The username of the owner of the group.\n          example: snap4city\n        size:\n          type: integer\n          description: The number of the elements in the group at the time of the request.\n          example: 10\n    element:\n      type: object\n      required:\n        - elementId\n        - deviceGroupId\n        - elementType\n        - insertTime\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the _membership relation_ that links objects to groups. \n          example: 1\n        elementId:\n          type: string\n          description: The unique identifier of the _object_ (the group member) in the table or API call response from where the object comes.\n          example: Firenze:broker:device1\n        elementType:\n          type: string\n          description: The type of the _object_ (the group member) based on the data source from where the object comes and/or on the categorization that is performed of items internally at that data source.\n          example: IOTID\n        elmtTypeLbl:\n          type: string\n          description: User-friendly version of the elementType.\n          example: IOT Device\n        elementName:\n          type: string\n          description: The name of the object.\n          example: p89BigExampleA221  \n        username:\n          type: string\n          description: The username of the owner of the object.\n          example: snap4city          \n        deviceGroupId:\n          type: integer\n          description: The unique identifier of the group.\n          example: 6\n        deviceGroupUrl:\n          type: integer\n          description: The Web address where it is possible to get full details about the group.\n          example: https://www.snap4city.org/mypersonaldata/?id=17          \n        deviceGroupContact:\n          type: string\n          description: The username of the owner of the group.\n          example: snap4city         \n        insertTime:\n          type: string\n          format: date-time\n          description: Date and time when the element was added to the group.\n          example: 2019-12-10 17:31:45\n        deleteTime:\n          type: string\n          format: date-time\n          description: Date and time when the element was removed from the group.\n          example: 2019-12-19 09:56:55\n    delegation:\n      type: object\n      required:\n        - usernameDelegated\n        - elementId\n        - elementType\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the delegation.\n          example: 1\n        usernameDelegator:\n          type: string\n          description: The username of the user that gives the delegation.\n          example: adifino\n        usernameDelegated:\n          type: string\n          description: The username of the user that gets the delegations.\n          example: snap4city\n        variableName:\n          type: string\n          description: Unused for groups.\n        motivation:\n          type: string      \n          description: Unused for groups.\n        elementId:\n          type: string\n          description: The unique identifier of the group for which the delegation is given.\n          example: 65\n        elementType:\n          type: string\n          enum: [MyGroup]\n          example: MyGroup\n        insertTime:\n          type: string\n          format: date-time\n          description: Date and time when the element was added to the group.\n          example: 2019-12-10 17:31:45\n        delegationDetails:\n          type: string\n          description: Unused for groups.\n        groupnameDelegated:\n          type: string\n          description: Unused for groups.\n  responses:\n    groups:\n      description: A JSON document representing a page of groups of objects, or a simple array of groups of objects.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: array\n                description: When pagination is not requested.\n                items:\n                  $ref: '#/components/schemas/group'\n              - type: object\n                description: When pagination is requested.\n                properties:\n                  content:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/group'\n                  first:\n                    type: boolean\n                  last:\n                    type: boolean\n                  number:\n                    type: integer\n                    description: The zero-based number of the returned page.\n                  totalPages:\n                    type: integer\n                    description: The total number of the pages, resulting from the division of the _totalElements_ by the _size_.\n                  numberOfElements:\n                    type: integer\n                    description: Number of the items in the returned page.\n                  size:\n                    type: integer\n                    description: Maximum number of items that can be returned in a single page.\n                  totalElements:\n                    type: integer\n                    description: Total number of the items across all pages.\n                  sort:\n                    type: array\n                    items:\n                      type: object\n                      description: Implementation-specific description of the sorting criteria.\n    elements:\n      description: A JSON document representing a page of elements in a group of objects, or a simple array of elements.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: array\n                description: When pagination is not requested.\n                items:\n                  $ref: '#/components/schemas/element'\n              - type: object\n                description: When pagination is requested.\n                properties:\n                  content:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/element'\n                  first:\n                    type: boolean\n                  last:\n                    type: boolean\n                  number:\n                    type: integer\n                    description: The zero-based number of the returned page.\n                  totalPages:\n                    type: integer\n                    description: The total number of the pages, resulting from the division of the _totalElements_ by the _size_.\n                  numberOfElements:\n                    type: integer\n                    description: Number of the items in the returned page.\n                  size:\n                    type: integer\n                    description: Maximum number of items that can be returned in a single page.\n                  totalElements:\n                    type: integer\n                    description: Total number of the items across all pages.\n                  sort:\n                    type: array\n                    items:\n                      type: object\n                      description: Implementation-specific description of the sorting criteria.   \n    delegation:\n      description: A JSON document that describes a delegation.\n      content:\n        application/json:\n          schema:           \n            $ref: '#/components/schemas/delegation'\n    delegations:\n      description: A JSON document representing a page of delegations given for a group, or a simple array of delegations.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: array\n                description: When pagination is not requested.\n                items:\n                  $ref: '#/components/schemas/delegation'\n              - type: object\n                description: When pagination is requested.\n                properties:\n                  content:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/delegation'\n                  first:\n                    type: boolean\n                  last:\n                    type: boolean\n                  number:\n                    type: integer\n                    description: The zero-based number of the returned page.\n                  totalPages:\n                    type: integer\n                    description: The total number of the pages, resulting from the division of the _totalElements_ by the _size_.\n                  numberOfElements:\n                    type: integer\n                    description: Number of the items in the returned page.\n                  size:\n                    type: integer\n                    description: Maximum number of items that can be returned in a single page.\n                  totalElements:\n                    type: integer\n                    description: Total number of the items across all pages.\n                  sort:\n                    type: array\n                    items:\n                      type: object\n                      description: Implementation-specific description of the sorting criteria.   \n      ",
			"canonicalURL": "/github.com/disit/snap4city@523488172f08a8e700ea3a777117724aac25eb65/-/blob/PersonalDataManager/src/main/resources/static/grp/swagger/object_groups_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/523488172f08a8e700ea3a777117724aac25eb65/PersonalDataManager/src/main/resources/static/grp/swagger/object_groups_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}