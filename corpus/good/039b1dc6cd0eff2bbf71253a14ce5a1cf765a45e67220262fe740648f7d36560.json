{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-saas-factory-s3-multitenancy"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/s3_manager/src/design_time/api_spec/openapi.yaml",
			"byteSize": 5142,
			"content": "openapi: 3.0.0\ninfo:\n  title: Data Partitioning using S3\n  version: 1.0.0\n  description: \u003e-\n    OpenAPI spec to store multi-tenant data using Amazon Simple Storage Service (S3).\n  contact:\n    email: sujitkh@amazon.com\n    name: Sujit Khasnis\n\ntags:\n  - name: APIs\n  - name: Token Manager\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    ResourceName:\n      type: object\n      properties:\n        name:\n          type: string\n          description: resource name\n  responses:\n    Success:\n      description: Successful operation\n    BadRequest:\n      description: Bad Request\n    Unauthorized:\n      description: Missing or invalid token\n    NotFound:\n      description: Not found\n    InvalidInput:\n      description: Invalid input\n    InternalServerError:\n      description: Server error\n    ServiceUnavailable:\n      description: Service Unavailable\n\npaths:\n  /object:\n    put:\n      tags:\n        - APIs\n      summary: Store object in S3 based on valid token and Partition approach\n      operationId: put_object\n      parameters:\n        - in: query\n          name: partition\n          schema:\n            type: string\n            enum: [bucket, prefix, tag, access_point, db_nosql]\n          description: Partition type\n          required: true\n        - in: header\n          name: x-token\n          schema:\n            type: string\n            format: uuid\n          required: true\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: One or more files to upload\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        '201':\n          $ref: '#/components/responses/Success'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '502':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - APIs\n      summary: Retrieve objects from S3 based on valid token and Partition approach\n      operationId: get_object\n      parameters:\n        - in: query\n          name: partition\n          schema:\n            type: string\n            enum: [bucket, prefix, tag, access_point, db_nosql]\n          description: Partition type\n          required: true\n        - in: header\n          name: x-token\n          schema:\n            type: string\n            format: uuid\n          required: true\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ResourceName'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '405':\n          $ref: '#/components/responses/InvalidInput'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '502':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /token:\n    get:\n      tags:\n        - Token Manager\n      summary: Get JWT token based on user and tenant context\n      operationId: get_token\n      parameters:\n        - in: header\n          name: x-tenant-id\n          schema:\n            type: string\n          description: Unique Tenant Id\n          required: true\n        - in: header\n          name: x-user-id\n          schema:\n            type: string\n          description: Unique User Id\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ResourceName'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '405':\n          $ref: '#/components/responses/InvalidInput'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '502':\n          $ref: '#/components/responses/ServiceUnavailable'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'",
			"canonicalURL": "/github.com/aws-samples/aws-saas-factory-s3-multitenancy@41fcd7f23f782884a7f697ffab395e0d0158a7e1/-/blob/src/s3_manager/src/design_time/api_spec/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-saas-factory-s3-multitenancy/blob/41fcd7f23f782884a7f697ffab395e0d0158a7e1/src/s3_manager/src/design_time/api_spec/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}