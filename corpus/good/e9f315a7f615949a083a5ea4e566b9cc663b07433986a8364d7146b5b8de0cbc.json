{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SmartAPI/smartAPI"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "src/tests/format/openapi.json",
			"byteSize": 42366,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"contact\": {\n            \"email\": \"help@mygene.info\",\n            \"name\": \"Chunlei Wu\",\n            \"x-id\": \"https://github.com/newgene\",\n            \"x-role\": \"responsible developer\"\n        },\n        \"description\": \"Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](http://mygene.info/)\",\n        \"termsOfService\": \"http://mygene.info/terms/\",\n        \"title\": \"MyGene.info API\",\n        \"version\": \"3.0\",\n        \"x-translator\": {\n            \"component\": \"KP\",\n            \"team\": [\n                \"Service Provider\"\n            ]\n        }\n    },\n    \"servers\": [\n        {\n            \"description\": \"Encrypted Production server\",\n            \"url\": \"https://mygene.info/v3\"\n        },\n        {\n            \"description\": \"Production server\",\n            \"url\": \"http://mygene.info/v3\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"name\": \"gene\"\n        },\n        {\n            \"name\": \"annotation\"\n        },\n        {\n            \"name\": \"query\"\n        },\n        {\n            \"name\": \"translator\"\n        },\n        {\n            \"name\": \"biothings\"\n        }\n    ],\n    \"paths\": {\n        \"/gene\": {\n            \"post\": {\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/fields\",\n                        \"name\": \"fields\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/species\",\n                        \"name\": \"species\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/dotfield\",\n                        \"name\": \"dotfield\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/email\",\n                        \"name\": \"email\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/x-www-form-urlencoded\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"ids\": {\n                                        \"description\": \"multiple geneids seperated by comma, e.g., \\\"ids=1017,1018\\\" or \\\"ids=695,ENSG00000123374\\\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.\",\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"ids\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Gene\"\n                                    },\n                                    \"type\": \"array\"\n                                }\n                            }\n                        },\n                        \"description\": \"a list of matching gene objects\"\n                    }\n                },\n                \"summary\": \"For a list of gene ids, return the matching gene objects\",\n                \"tags\": [\n                    \"annotation\"\n                ]\n            }\n        },\n        \"/gene/{geneid}\": {\n            \"get\": {\n                \"parameters\": [\n                    {\n                        \"description\": \"Entrez or Ensembl gene id, e.g., 1017, ENSG00000170248. A retired Entrez Gene id works too if it is replaced by a new one, e.g., 245794\",\n                        \"example\": \"1017\",\n                        \"in\": \"path\",\n                        \"name\": \"geneid\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/fields\",\n                        \"name\": \"fields\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/dotfield\",\n                        \"name\": \"dotfield\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/callback\",\n                        \"name\": \"callback\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/email\",\n                        \"name\": \"email\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Gene\"\n                                }\n                            }\n                        },\n                        \"description\": \"A matching gene object\"\n                    }\n                },\n                \"summary\": \"Retrieve gene annotation object based on Entrez or Ensembl gene id, support JSONP and CORS as well.\",\n                \"tags\": [\n                    \"annotation\"\n                ]\n            }\n        },\n        \"/metadata\": {\n            \"get\": {\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/callback\",\n                        \"name\": \"callback\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"MyGene.info metadata object\"\n                    }\n                },\n                \"summary\": \"Get metadata about the data available from MyGene.info.\"\n            }\n        },\n        \"/metadata/fields\": {\n            \"get\": {\n                \"parameters\": [\n                    {\n                        \"description\": \"Pass a search term to filter the available fields, e.g. \\\"search=clinvar\\\".\",\n                        \"in\": \"query\",\n                        \"name\": \"search\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"description\": \"Pass a prefix string to filter the available fields, e.g. \\\"prefix=refseq\\\".\",\n                        \"in\": \"query\",\n                        \"name\": \"prefix\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/callback\",\n                        \"name\": \"callback\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"MyGene.info metadata fields object\"\n                    }\n                },\n                \"summary\": \"Get metadata about the data fields available from MyGene.info.\"\n            }\n        },\n        \"/query\": {\n            \"get\": {\n                \"parameters\": [\n                    {\n                        \"description\": \"Query string. Examples \\\"CDK2\\\", \\\"NM_052827\\\", \\\"204639_at\\\", \\\"chr1:151,073,054-151,383,976\\\", \\\"hg19.chr1:151073054-151383976\\\". The detailed query syntax can be found from our [docs](http://docs.mygene.info/en/latest/doc/query_service.html).\",\n                        \"example\": \"CDK2\",\n                        \"in\": \"query\",\n                        \"name\": \"q\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/fields\",\n                        \"name\": \"fields\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/species\",\n                        \"name\": \"species\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\",\n                        \"name\": \"size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/from\",\n                        \"name\": \"from\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\",\n                        \"name\": \"sort\"\n                    },\n                    {\n                        \"description\": \"a single field or comma-separated fields to return facets, for example, \\\"facets=taxid\\\", \\\"facets=taxid,type_of_gene\\\".\",\n                        \"in\": \"query\",\n                        \"name\": \"facets\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"description\": \"relevant when faceting on species (i.e., \\\"facets=taxid\\\" are passed). It’s used to pass species filter without changing the scope of faceting, so that the returned facet counts won’t change. Either species name or taxonomy id can be used, just like \\\"species\\\" parameter.\",\n                        \"in\": \"query\",\n                        \"name\": \"species_facet_filter\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"description\": \"when passed as \\\"True\\\" or \\\"1\\\", the query returns only the hits with valid Entrez gene ids. Default: False.\",\n                        \"in\": \"query\",\n                        \"name\": \"entrezonly\",\n                        \"schema\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    {\n                        \"description\": \"when passed as \\\"True\\\" or \\\"1\\\", the query returns only the hits with valid Ensembl gene ids. Default: False.\",\n                        \"in\": \"query\",\n                        \"name\": \"ensemblonly\",\n                        \"schema\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/callback\",\n                        \"name\": \"callback\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/dotfield\",\n                        \"name\": \"dotfield\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/email\",\n                        \"name\": \"email\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/QueryResult\"\n                                }\n                            }\n                        },\n                        \"description\": \"A query response object with \\\"hits\\\" property\"\n                    }\n                },\n                \"summary\": \"Make gene query and return matching gene list. Support JSONP and CORS as well.\",\n                \"tags\": [\n                    \"query\"\n                ]\n            },\n            \"post\": {\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/fields\",\n                        \"name\": \"fields\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/species\",\n                        \"name\": \"species\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/dotfield\",\n                        \"name\": \"dotfield\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/email\",\n                        \"name\": \"email\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/x-www-form-urlencoded\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"q\": {\n                                        \"description\": \"multiple query terms seperated by comma (also support \\\"+\\\" or white space), but no wildcard, e.g., \\\"q=1017,1018\\\" or \\\"q=CDK2+BTK\\\"\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"scopes\": {\n                                        \"description\": \"Specify one or more fields (separated by comma) as the search \\\"scopes\\\", e.g., \\\"scopes=entrezgene\\\", \\\"scopes=entrezgene,ensemblgene\\\". The available \\\"fields\\\" can be passed to \\\"scopes\\\" parameter are listed [here](http://mygene.info/doc/query_service.html#available-fields). Default: \\\"scopes=entrezgene,ensemblgene,retired\\\" (either Entrez or Ensembl gene ids).\",\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"q\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/QueryPOSTResult\"\n                                }\n                            }\n                        },\n                        \"description\": \"Query response objects with \\\"hits\\\" property\"\n                    }\n                },\n                \"summary\": \"Make gene batch query and return matching gene hits\",\n                \"tags\": [\n                    \"query\"\n                ],\n                \"x-bte-kgs-operations\": [\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/enablesMF\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/involvedInBP\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/involvedInCC\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/involvedInPathway\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/hasTranscript\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/hasGeneProduct\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/hasHomolog\"\n                    },\n                    {\n                        \"$ref\": \"#/components/x-bte-kgs-operations/PathwayHasGene\"\n                    }\n                ]\n            }\n        }\n    },\n    \"components\": {\n        \"parameters\": {\n            \"callback\": {\n                \"description\": \"you can pass a \\\"callback\\\" parameter to make a JSONP call.\",\n                \"in\": \"query\",\n                \"name\": \"callback\",\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"dotfield\": {\n                \"description\": \"control the format of the returned fields when passed \\\"fields\\\" parameter contains dot notation, e.g. \\\"fields=refseq.rna\\\". If \\\"True\\\" or \\\"1\\\", the returned data object contains a single \\\"refseq.rna\\\" field, otherwise (\\\"False\\\" or \\\"0\\\"), a single \\\"refseq\\\" field with a sub-field of \\\"rna\\\". Default: True.\",\n                \"in\": \"query\",\n                \"name\": \"dotfield\",\n                \"schema\": {\n                    \"type\": \"boolean\"\n                }\n            },\n            \"email\": {\n                \"description\": \"If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.\",\n                \"in\": \"query\",\n                \"name\": \"email\",\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"fields\": {\n                \"description\": \"a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. http://mygene.info/v3/gene/1017). Note that it supports dot notation as well, e.g., you can pass \\\"refseq.rna\\\". If \\\"fields=all\\\", all available fields will be returned. Default: \\\"symbol,name,taxid,entrezgene,ensemblgene\\\".\",\n                \"in\": \"query\",\n                \"name\": \"fields\",\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"from\": {\n                \"description\": \"the number of matching gene hits to skip, starting from 0. Combining with \\\"size\\\" parameter, this can be useful for paging. Default: 0.\",\n                \"in\": \"query\",\n                \"name\": \"from\",\n                \"schema\": {\n                    \"type\": \"integer\"\n                }\n            },\n            \"size\": {\n                \"description\": \"the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.\",\n                \"in\": \"query\",\n                \"name\": \"size\",\n                \"schema\": {\n                    \"type\": \"integer\"\n                }\n            },\n            \"sort\": {\n                \"description\": \"the comma-separated fields to sort on. Prefix with \\\"-\\\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.\",\n                \"in\": \"query\",\n                \"name\": \"sort\",\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"species\": {\n                \"description\": \"can be used to limit the gene hits from given species. You can use \\\"common names\\\" for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. Multiple species can be passed using comma as a separator. Default: human,mouse,rat.\",\n                \"in\": \"query\",\n                \"name\": \"species\",\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"schemas\": {\n            \"Gene\": {\n                \"properties\": {\n                    \"AnimalQTLdb\": {\n                        \"type\": \"string\"\n                    },\n                    \"FLYBASE\": {\n                        \"type\": \"string\"\n                    },\n                    \"HGNC\": {\n                        \"type\": \"string\"\n                    },\n                    \"HPRD\": {\n                        \"type\": \"string\"\n                    },\n                    \"MGI\": {\n                        \"type\": \"string\"\n                    },\n                    \"MIM\": {\n                        \"type\": \"string\"\n                    },\n                    \"RATMAP\": {\n                        \"type\": \"string\"\n                    },\n                    \"RGD\": {\n                        \"type\": \"string\"\n                    },\n                    \"TAIR\": {\n                        \"type\": \"string\"\n                    },\n                    \"Vega\": {\n                        \"type\": \"string\"\n                    },\n                    \"WormBase\": {\n                        \"type\": \"string\"\n                    },\n                    \"Xenbase\": {\n                        \"type\": \"string\"\n                    },\n                    \"ZFIN\": {\n                        \"type\": \"string\"\n                    },\n                    \"_id\": {\n                        \"type\": \"string\"\n                    },\n                    \"accession\": {\n                        \"type\": \"object\"\n                    },\n                    \"aliase\": {\n                        \"type\": \"string\"\n                    },\n                    \"ec\": {\n                        \"type\": \"string\"\n                    },\n                    \"ensembl\": {\n                        \"type\": \"object\"\n                    },\n                    \"entrezgene\": {\n                        \"format\": \"int64\",\n                        \"type\": \"integer\"\n                    },\n                    \"generif\": {\n                        \"properties\": {\n                            \"pubmed\": {\n                                \"$ref\": \"#/components/schemas/int64_or_array\"\n                            },\n                            \"text\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"type\": \"object\"\n                    },\n                    \"genomic_pos\": {\n                        \"type\": \"object\"\n                    },\n                    \"go\": {\n                        \"type\": \"object\"\n                    },\n                    \"homologene\": {\n                        \"type\": \"object\"\n                    },\n                    \"interpro\": {\n                        \"type\": \"object\"\n                    },\n                    \"locus_tag\": {\n                        \"type\": \"string\"\n                    },\n                    \"map_location\": {\n                        \"type\": \"string\"\n                    },\n                    \"miRBase\": {\n                        \"type\": \"string\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"other_names\": {\n                        \"$ref\": \"#/components/schemas/string_or_array\"\n                    },\n                    \"pathway\": {\n                        \"type\": \"object\"\n                    },\n                    \"pdb\": {\n                        \"$ref\": \"#/components/schemas/string_or_array\"\n                    },\n                    \"pfam\": {\n                        \"type\": \"string\"\n                    },\n                    \"pharmgkb\": {\n                        \"type\": \"string\"\n                    },\n                    \"pid\": {\n                        \"type\": \"string\"\n                    },\n                    \"pir\": {\n                        \"type\": \"string\"\n                    },\n                    \"prosite\": {\n                        \"type\": \"string\"\n                    },\n                    \"reagent\": {\n                        \"type\": \"object\"\n                    },\n                    \"refseq\": {\n                        \"type\": \"object\"\n                    },\n                    \"reporter\": {\n                        \"type\": \"object\"\n                    },\n                    \"summary\": {\n                        \"type\": \"string\"\n                    },\n                    \"symbol\": {\n                        \"type\": \"string\"\n                    },\n                    \"taxid\": {\n                        \"format\": \"int32\",\n                        \"type\": \"integer\"\n                    },\n                    \"type_of_gene\": {\n                        \"type\": \"string\"\n                    },\n                    \"umls\": {\n                        \"type\": \"object\"\n                    },\n                    \"unigene\": {\n                        \"type\": \"string\"\n                    },\n                    \"uniprot\": {\n                        \"properties\": {\n                            \"Swiss-Prot\": {\n                                \"$ref\": \"#/components/schemas/string_or_array\"\n                            },\n                            \"TrEMBL\": {\n                                \"$ref\": \"#/components/schemas/string_or_array\"\n                            }\n                        },\n                        \"type\": \"object\"\n                    },\n                    \"wikipedia\": {\n                        \"properties\": {\n                            \"url_stub\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"type\": \"object\"\n                    }\n                },\n                \"required\": [\n                    \"_id\",\n                    \"taxid\"\n                ],\n                \"type\": \"object\"\n            },\n            \"MinimalGene\": {\n                \"properties\": {\n                    \"_id\": {\n                        \"type\": \"string\"\n                    },\n                    \"entrezgene\": {\n                        \"format\": \"int64\",\n                        \"type\": \"integer\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"symbol\": {\n                        \"type\": \"string\"\n                    },\n                    \"taxid\": {\n                        \"format\": \"int32\",\n                        \"type\": \"integer\"\n                    }\n                },\n                \"required\": [\n                    \"_id\",\n                    \"taxid\"\n                ],\n                \"type\": \"object\"\n            },\n            \"QueryPOSTResult\": {\n                \"items\": {\n                    \"allOf\": [\n                        {\n                            \"$ref\": \"#/components/schemas/MinimalGene\"\n                        },\n                        {\n                            \"properties\": {\n                                \"_score\": {\n                                    \"format\": \"float\",\n                                    \"type\": \"number\"\n                                },\n                                \"query\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    ]\n                },\n                \"type\": \"array\"\n            },\n            \"QueryResult\": {\n                \"properties\": {\n                    \"hits\": {\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Gene\"\n                        },\n                        \"type\": \"array\"\n                    },\n                    \"max_score\": {\n                        \"format\": \"float\",\n                        \"type\": \"number\"\n                    },\n                    \"took\": {\n                        \"type\": \"integer\"\n                    },\n                    \"total\": {\n                        \"type\": \"integer\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"int64_or_array\": {\n                \"oneOf\": [\n                    {\n                        \"items\": {\n                            \"format\": \"int64\",\n                            \"type\": \"integer\"\n                        },\n                        \"type\": \"array\"\n                    },\n                    {\n                        \"format\": \"int64\",\n                        \"type\": \"integer\"\n                    }\n                ]\n            },\n            \"string_or_array\": {\n                \"oneOf\": [\n                    {\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"type\": \"array\"\n                    },\n                    {\n                        \"type\": \"string\"\n                    }\n                ]\n            }\n        },\n        \"x-bte-kgs-operations\": {\n            \"enablesMF\": [\n                {\n                    \"inputSeparator\": \",\",\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"GO\",\n                            \"semantic\": \"MolecularActivity\"\n                        }\n                    ],\n                    \"source\": \"entrez\",\n                    \"predicate\": \"functional_association\",\n                    \"parameters\": {\n                        \"fields\": \"go.MF\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_mf\"\n                    }\n                }\n            ],\n            \"hasGeneProduct\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"ENSEMBL\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"UNIPROTKB\",\n                            \"semantic\": \"Protein\"\n                        }\n                    ],\n                    \"predicate\": \"has_gene_product\",\n                    \"parameters\": {\n                        \"fields\": \"uniprot.Swiss-Prot\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"ensembl.gene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/has_gene_product\"\n                    }\n                },\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"ENSEMBL\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"ENSEMBL\",\n                            \"semantic\": \"Protein\"\n                        }\n                    ],\n                    \"predicate\": \"has_gene_product\",\n                    \"parameters\": {\n                        \"fields\": \"ensembl.protein\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"ensembl.gene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/has_gene_product\"\n                    }\n                }\n            ],\n            \"hasHomolog\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"MGI\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"predicate\": \"homologous_to\",\n                    \"parameters\": {\n                        \"fields\": \"pantherdb.ortholog\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/homologous_to\"\n                    }\n                }\n            ],\n            \"hasTranscript\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"ENSEMBL\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"ENSEMBL\",\n                            \"semantic\": \"Transcript\"\n                        }\n                    ],\n                    \"parameters\": {\n                        \"fields\": \"ensembl.transcript\"\n                    },\n                    \"predicate\": \"gene_to_transcript_relationship\",\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"ensembl.gene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/gene_to_transcript_relationship\"\n                    }\n                }\n            ],\n            \"involvedInBP\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"GO\",\n                            \"semantic\": \"BiologicalProcess\"\n                        }\n                    ],\n                    \"source\": \"entrez\",\n                    \"predicate\": \"functional_association\",\n                    \"parameters\": {\n                        \"fields\": \"go.BP\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_bp\"\n                    }\n                }\n            ],\n            \"involvedInCC\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"id\": \"GO\",\n                            \"semantic\": \"CellularComponent\"\n                        }\n                    ],\n                    \"source\": \"entrez\",\n                    \"predicate\": \"functional_association\",\n                    \"parameters\": {\n                        \"fields\": \"go.CC\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_cc\"\n                    }\n                }\n            ],\n            \"involvedInPathway\": [\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"method\": \"post\",\n                    \"outputs\": [\n                        {\n                            \"id\": \"WIKIPATHWAYS\",\n                            \"semantic\": \"Pathway\"\n                        }\n                    ],\n                    \"source\": \"CPDB\",\n                    \"predicate\": \"functional_association\",\n                    \"parameters\": {\n                        \"fields\": \"pathway.wikipathways\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_wikipathways\"\n                    }\n                }\n            ],\n            \"PathwayHasGene\": [\n                {\n                    \"outputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"method\": \"post\",\n                    \"inputs\": [\n                        {\n                            \"id\": \"REACT\",\n                            \"semantic\": \"Pathway\"\n                        }\n                    ],\n                    \"predicate\": \"functional_association\",\n                    \"source\": \"CPDB\",\n                    \"parameters\": {\n                        \"fields\": \"entrezgene\",\n                        \"species\": \"human\",\n                        \"size\": 1000\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"pathway.reactome.id\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_reactome_gene\"\n                    }\n                },\n                {\n                    \"inputs\": [\n                        {\n                            \"id\": \"NCBIGene\",\n                            \"semantic\": \"Gene\"\n                        }\n                    ],\n                    \"method\": \"post\",\n                    \"outputs\": [\n                        {\n                            \"id\": \"REACT\",\n                            \"semantic\": \"Pathway\"\n                        }\n                    ],\n                    \"predicate\": \"functional_association\",\n                    \"source\": \"CPDB\",\n                    \"parameters\": {\n                        \"fields\": \"pathway.reactome\",\n                        \"species\": \"human\"\n                    },\n                    \"requestBody\": {\n                        \"body\": {\n                            \"q\": \"{inputs[0]}\",\n                            \"scopes\": \"entrezgene\"\n                        },\n                        \"header\": \"application/x-www-form-urlencoded\"\n                    },\n                    \"inputSeparator\": \",\",\n                    \"supportBatch\": true,\n                    \"response_mapping\": {\n                        \"$ref\": \"#/components/x-bte-response-mapping/functional_association_reactome\"\n                    }\n                }\n            ]\n        },\n        \"x-bte-response-mapping\": {\n            \"description\": \"summary\",\n            \"name\": [\n                \"name\",\n                \"other_names\"\n            ],\n            \"OMIM\": \"MIM\",\n            \"PHARMGKB\": \"pharmgkb\",\n            \"PHAROS\": \"pahros.target_id\",\n            \"SYMBOL\": \"symbol\",\n            \"UMLS\": \"umls.cui\",\n            \"ENSEMBL\": \"ensembl.gene\",\n            \"NCBIGene\": \"entrezgene\",\n            \"HGNC\": \"HGNC\",\n            \"inTaxon\": \"taxid\",\n            \"has_gene_product\": {\n                \"ENSEMBL\": \"ensembl.protein\",\n                \"UNIPROTKB\": \"uniprot.Swiss-Prot\"\n            },\n            \"homologous_to\": {\n                \"dictyBase\": \"pantherdb.ortholog.dictyBase\",\n                \"ENSEMBL\": \"pantherdb.ortholog.Ensembl\",\n                \"FlyBase\": \"pantherdb.ortholog.FlyBase\",\n                \"HGNC\": \"pantherdb.ortholog.HGNC\",\n                \"inTaxon\": \"pantherdb.ortholog.taxid\",\n                \"MGI\": \"pantherdb.ortholog.MGI\",\n                \"POMBASE\": \"pantherdb.ortholog.PomBase\",\n                \"RGD\": \"pantherdb.ortholog.RGD\",\n                \"SGD\": \"pantherdb.ortholog.SGD\",\n                \"TAIR\": \"pantherdb.ortholog.TAIR\",\n                \"ZFIN\": \"pantherdb.ortholog.ZFIN\"\n            },\n            \"gene_to_transcript_relationship\": {\n                \"ENSEMBL\": \"ensembl.transcript\"\n            },\n            \"functional_association_wikipathways\": {\n                \"name\": \"pathway.wikipathways.name\",\n                \"WIKIPATHWAYS\": \"pathway.wikipathways.id\"\n            },\n            \"functional_association_reactome\": {\n                \"NCBIGene\": \"entrezgene\"\n            },\n            \"functional_association_cc\": {\n                \"evidence\": \"go.CC.evidence\",\n                \"GO\": \"go.CC.id\",\n                \"pubmed\": \"go.CC.pubmed\",\n                \"term\": \"go.CC.term\"\n            },\n            \"functional_association_bp\": {\n                \"evidence\": \"go.BP.evidence\",\n                \"GO\": \"go.BP.id\",\n                \"pubmed\": \"go.BP.pubmed\",\n                \"term\": \"go.BP.term\"\n            },\n            \"functional_association_mf\": {\n                \"evidence\": \"go.MF.evidence\",\n                \"GO\": \"go.MF.id\",\n                \"pubmed\": \"go.MF.pubmed\",\n                \"term\": \"go.MF.term\"\n            }\n        }\n    }\n}",
			"canonicalURL": "/github.com/SmartAPI/smartAPI@4b65c612ded8e200191ecff2f382f9aaf0e552fe/-/blob/src/tests/format/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/SmartAPI/smartAPI/blob/4b65c612ded8e200191ecff2f382f9aaf0e552fe/src/tests/format/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}