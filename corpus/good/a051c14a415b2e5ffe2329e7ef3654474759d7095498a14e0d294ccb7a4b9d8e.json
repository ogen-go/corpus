{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/isbndb/openapi.yaml",
			"byteSize": 19627,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n      label: ISBNdb\n      iconPath: \"icon.png\"\n  title: ISBNdb API v2\n  description: \u003e\n    This is a generated connector for [ISBNdb API v2.0.0](https://isbndb.com/apidocs/v2) OpenAPI specification.\n\n    The ISBNdb.com API exposes data such as title, author, publisher and publish date about books.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create a [ISBNdb Account](https://isbndb.com/isbn-database) by selecting a pricing plan and obtain tokens following [this guide](https://isbndb.com/apidocs/v2).\n  version: 2.0.0\nservers:\n- url: https://api2.isbndb.com/\npaths:\n  /author/{name}:\n    get:\n      tags:\n      - Author\n      summary: Gets author details\n      description: Returns the name and a list of books by the author.\n      operationId: getAuthorDetails\n      parameters:\n      - name: name\n        in: path\n        description: The name of an author in the Author's database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: integer\n          default: 1\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: integer\n          default: 20\n      responses:\n        200:\n          description: The author name was found in the database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Author'\n        404:\n          description: Author not found\n          content: {}\n      security:\n      - lambda_token: []\n  /authors/{query}:\n    get:\n      tags:\n      - Author\n      summary: Search authors\n      description: This returns a list of authors whos name matches the given query\n      operationId: searchAuthors\n      parameters:\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: string\n      - name: query\n        in: path\n        description: A string to search for in the Author’s database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: string\n      responses:\n        200:\n          description: The query string found results in the author's database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorQueryResults'\n        404:\n          description: There are no results in the author's database for the given\n            query\n          content: {}\n      security:\n      - lambda_token: []\n  /book/{isbn}:\n    get:\n      tags:\n      - Book\n      summary: Gets book details\n      description: Returns the book details\n      operationId: getBookDetails\n      parameters:\n      - name: isbn\n        in: path\n        description: an ISBN 10 or ISBN 13 in the Books database\n        required: true\n        schema:\n          type: string\n      - name: with_prices\n        in: query\n        description: indicate if shows Real Time Prices. Only with the Pro plan\n        schema:\n          type: string\n          enum:\n          - \"1\"\n          - \"0\"\n      responses:\n        200:\n          description: The book ISBN was found in the database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'\n        404:\n          description: Book not found\n          content: {}\n      security:\n      - lambda_token: []\n  /books:\n    post:\n      tags:\n      - Book\n      summary: Search books\n      operationId: searchBooks\n      description: 'This returns a list of books that match the query. Only with the\n        Premium and Pro plans. This endpoint has no pagination but it has the following\n        limits: You can only send up to 1,000 ISBN numbers per request. If you send\n        100 ISBN numbers you will get information back for all 100 books in the response\n        provided the ISBNs do exist in the ISBNdb Database. ISBN Numbers not found\n        in the ISBNdb database will not be part of the response. There is a limit\n        of up to 6MB response size, if the limit is exceeded you will get a 500 error\n        reply.'\n      requestBody:\n        description: Request payload to search to search books\n        content:\n          application/json:\n            schema:\n              required:\n              - isbns\n              properties:\n                isbns:\n                  type: array\n                  description: a list of ISBN 10 or ISBN 13 in the Books database\n                  items:\n                    type: string\n          multipart/form-data:\n            schema:\n              required:\n              - isbns\n              properties:\n                isbns:\n                  type: array\n                  description: a list of ISBN 10 or ISBN 13 in the Books database\n                  items:\n                    type: string\n        required: true\n      responses:\n        200:\n          description: The query string found results in the book's database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n      security:\n      - lambda_token: []\n  /books/{query}:\n    get:\n      tags:\n      - Book\n      summary: Search books\n      description: This returns a list of books that match the query\n      operationId: searchBooksByQuery\n      parameters:\n      - name: query\n        in: path\n        description: A string to search for in the Book’s database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: integer\n          default: 1\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: integer\n          default: 20\n      - name: column\n        in: query\n        description: |\n          Search limited to this column:\n           * `` - Empty value search in every column\n           * `title` - Only searches in Books Title\n           * `author` - Only searches books by the given Author\n           * `date_published` - Only searches books in a given year, e.g. 1998\n        schema:\n          type: string\n          enum:\n          - title\n          - author\n          - date_published\n      - name: beta\n        in: query\n        description: A integer (1 or 0) for enable or disable beta searching.\n        schema:\n          type: integer\n          default: 0\n      responses:\n        200:\n          description: The query string found results in the books's database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n        404:\n          description: There are no results in the book's database for the given query\n          content: {}\n      security:\n      - lambda_token: []\n  /publisher/{name}:\n    get:\n      tags:\n      - Publisher\n      summary: Gets publisher details\n      operationId: getPublisherDetails\n      description: Returns details and a list of books by the publisher.\n      parameters:\n      - name: name\n        in: path\n        description: The name of a publisher in the Publisher's database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: integer\n          default: 1\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: integer\n          default: 20\n      responses:\n        200:\n          description: The publisher name was found in the database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Publisher'\n        404:\n          description: Publisher not found\n          content: {}\n      security:\n      - lambda_token: []\n  /publishers/{query}:\n    get:\n      tags:\n      - Publisher\n      summary: Search publishers\n      operationId: searchPublishers\n      description: This returns a list of publishers that match the given query\n      parameters:\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: string\n      - name: query\n        in: path\n        description: A string to search for in the Publisher’s database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: string\n      responses:\n        200:\n          description: The query string found results in the publisher's database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n        404:\n          description: No results found.\n          content: {}\n      security:\n      - lambda_token: []\n  /search/{index}:\n    get:\n      tags:\n      - Search\n      summary: Search all ISBNDB databases\n      operationId: searchISBNDB\n      description: Uses a determined index and query string to search in any of the\n        ISBNDB's databases\n      parameters:\n      - name: index\n        in: path\n        description: 'Only this values are valids: subjects, publishers, authors y\n          books'\n        required: true\n        schema:\n          type: string\n          enum:\n          - subjects\n          - publishers\n          - authors\n          - books\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: string\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: string\n      - name: isbn\n        in: query\n        description: an ISBN 10 in the Books database\n        schema:\n          type: string\n      - name: isbn13\n        in: query\n        description: an ISBN 13 in the Books database\n        schema:\n          type: string\n      - name: author\n        in: query\n        description: The name of an author in the Author's database\n        schema:\n          type: string\n      - name: text\n        in: query\n        description: A string to search for determinated index database\n        schema:\n          type: string\n      - name: subject\n        in: query\n        description: A subject in the Subject's database\n        schema:\n          type: string\n      - name: publisher\n        in: query\n        description: The name of a publisher in the Publisher's database\n        schema:\n          type: string\n      responses:\n        200:\n          description: Results were found in the requested database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n        404:\n          description: No results found in the requested database\n          content: {}\n      security:\n      - lambda_token: []\n  /stats:\n    get:\n      tags:\n      - Stats\n      summary: Gets status on the ISBNDB Database\n      operationId: getISBNDBStatus\n      description: Returns a status object about the ISBNDB database.\n      responses:\n        200:\n          description: Stats on the ISBNDB sucessfully retrieved\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n      security:\n      - lambda_token: []\n  /subject/{name}:\n    get:\n      tags:\n      - Subject\n      summary: Gets subject details\n      operationId: getSubjectDetails\n      description: Returns details and a list of books with subject.\n      parameters:\n      - name: name\n        in: path\n        description: A subject in the Subject's database\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The subject was found in the database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subject'\n        404:\n          description: Subject not found\n          content: {}\n      security:\n      - lambda_token: []\n  /subjects/{query}:\n    get:\n      tags:\n      - Subject\n      summary: Search subjects\n      operationId: searchSubject\n      description: This returns a list of subjects that match the given query\n      parameters:\n      - name: pageSize\n        in: query\n        description: How many items should be returned per page, maximum of 1,000\n        schema:\n          type: string\n      - name: query\n        in: path\n        description: A string to search for in the Subject’s database\n        required: true\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: The number of page to retrieve, please note the API will not\n          return more than 10,000 results no matter how you paginate them\n        schema:\n          type: string\n      responses:\n        200:\n          description: The query string found results in the subject's database\n          headers:\n            Access-Control-Allow-Origin:\n              description: CORS Header to allow different origin responses\n              schema:\n                type: string\n          content: {}\n        404:\n          description: There are no results in the subject's database for the given\n            query\n          content: {}\n      security:\n      - lambda_token: []\ncomponents:\n  schemas:\n    AuthorQueryResults:\n      type: object\n      properties:\n        total:\n          type: integer\n        authors:\n          type: array\n          items:\n            type: string\n      description: Describes the results of a query in the author's database\n    Book:\n      type: object\n      properties:\n        title:\n          type: string\n        title_long:\n          type: string\n        isbn:\n          type: string\n        isbn13:\n          type: string\n        dewey_decimal:\n          type: string\n        binding:\n          type: string\n        publisher:\n          type: string\n        language:\n          type: string\n        date_published:\n          type: string\n          format: date-time\n        edition:\n          type: string\n        pages:\n          type: integer\n        dimensions:\n          type: string\n        overview:\n          type: string\n        image:\n          $ref: '#/components/schemas/CoverLink'\n        msrp:\n          type: number\n        excerpt:\n          type: string\n        synopsys:\n          type: string\n        authors:\n          type: array\n          items:\n            type: string\n        subjects:\n          type: array\n          items:\n            type: string\n        reviews:\n          type: array\n          items:\n            type: string\n        prices:\n          type: array\n          description: Only shows if the query param 'with_prices' is present.\n          items:\n            $ref: '#/components/schemas/Merchant'\n        related:\n          type: object\n          properties:\n            type:\n              type: string\n      description: Describes a book in the book's database\n    Author:\n      type: object\n      properties:\n        author:\n          description: Author name\n          type: string\n        books:\n          description: Detail about books written by author\n          type: array\n          items:\n            $ref: '#/components/schemas/Book'\n      description: Describes the name of an author and the books written by that author\n        in the database\n    Publisher:\n      type: object\n      description : Describes about book publisher details\n      properties:\n        name:\n          type: string\n          description : Name of book publisher\n        books:\n          type: array\n          description : Details of books published\n          items:\n            type: object\n            description: Details of books published\n            properties:\n              isbn:\n                type: string\n    Subject:\n      type: object\n      description : Describes about what the book is about\n      properties:\n        subject:\n          type: string\n        parent:\n          type: string\n    CoverLink:\n      type: string\n      description: The link to the cover image\n    Merchant:\n      type: object\n      properties:\n        condition:\n          type: string\n        merchant:\n          type: string\n        merchant_logo:\n          type: string\n        merchant_logo_offset:\n          type: object\n          properties:\n            x:\n              type: string\n              description: Merchant logo x-offset\n            y:\n              type: string\n              description: Merchant logo y-offset\n        shipping:\n          type: string\n        price:\n          type: string\n        total:\n          type: string\n        link:\n          type: string\n      description: Describe the conditions of the price by merchant. Only with the\n        Pro plan\n  securitySchemes:\n    lambda_token:\n      description: All requests on the ISBNdb.com API needs to include an API key. The API key can be provided as part of the query string or as a request header. The name of the API key needs to be `Authorization`.\n      type: apiKey\n      name: Authorization\n      in: header\n      x-amazon-apigateway-authtype: custom\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/isbndb/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/isbndb/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}