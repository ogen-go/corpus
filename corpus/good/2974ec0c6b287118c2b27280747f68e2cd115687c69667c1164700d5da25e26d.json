{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nftstorage/nftstorage.link"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "packages/website/public/schema.yml",
			"byteSize": 10199,
			"content": "openapi: 3.0.0\ninfo:\n  title: nftstorage.link API\n  version: '0.1-beta'\n\nservers:\n  - url: https://api.nftstorage.link\n  - url: http://127.0.0.1:8787\n\ntags:\n  - name: nftstorage.link\npaths:\n  /perma-cache/{url}:\n    post:\n      tags:\n        - nftstorage.link\n      summary: Add the content of the given URL to the perma-cache.\n      description: |\n        Store the response of the nftstorage.link IPFS gateway in an edge perma-cache\n        to accelerate future requests to the nftstorage.link gateway.\n\n        Notes:\n        - During beta this is limited to 4.995 GB of content per URL.\n        - Content types `text/json`, `text/html` and `image/svg+xml` are limited to `120 MB` during the near future.\n\n        ### Rate limits\n        This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 100 requests with the same API token within a 60 second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits.\n      operationId: permaCachePost\n      parameters:\n        - name: url\n          in: path\n          description: nftstorage.link IPFS gateway URL properly encoded\n          required: true\n          schema:\n            $ref: '#/components/schemas/URL'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/PermaCachePostResponse'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    delete:\n      tags:\n        - nftstorage.link\n      summary: Remove content for the given URL from the perma-cache.\n      description: |\n        Remove previously added content for the given URL from the perma-cache.\n\n        Note that content will continue to be available in the IPFS network.\n\n        ### Rate limits\n        This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 100 requests with the same API token within a 60 second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits.\n      operationId: permaCacheDelete\n      parameters:\n        - name: url\n          in: path\n          description: nftstorage.link IPFS gateway URL properly encoded\n          required: true\n          schema:\n            $ref: '#/components/schemas/URL'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/PermaCacheDeleteResponse'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /perma-cache:\n    get:\n      tags:\n        - nftstorage.link\n      summary: List the URLs that have been added to the perma-cache.\n      description: |\n        Retrieve a paginated list of the URLs that have been added to the perma-cache.\n\n        ### Rate limits\n        This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 100 requests with the same API token within a 60 second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits.\n      operationId: permaCacheGet\n      parameters:\n        - $ref: '#/components/parameters/size'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/order'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/PermaCacheGetResponse'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /perma-cache/status:\n    get:\n      tags:\n        - nftstorage.link\n      operationId: permaCacheStatusGet\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/StatusResponse'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/internalServerError'\ncomponents:\n  schemas:\n    PermaCacheEntry:\n      type: object\n      properties:\n        url:\n          type: string\n          example: https://bafkreidyeivj7adnnac6ljvzj2e3rd5xdw3revw4da7mx2ckrstapoupoq.ipfs.nftstorage.link/\n          description: 'URL as provided for perma-cache.'\n        size:\n          type: number\n          example: 600\n        insertedAt:\n          $ref: '#/components/schemas/Date'\n    PermaCacheStatus:\n      type: object\n      properties:\n        usedStorage:\n          type: number\n    Date:\n      type: string\n      format: date-time\n      example: '2021-03-12T17:03:07.787Z'\n      description: 'This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.'\n    URL:\n      type: string\n      example: https%3A%2F%2Fbafkreidyeivj7adnnac6ljvzj2e3rd5xdw3revw4da7mx2ckrstapoupoq.ipfs.nftstorage.link%2F\n      description: 'nftstorage.link IPFS gateway URL properly encoded.'\n    PermaCachePostResponse:\n      type: object\n      $ref: '#/components/schemas/PermaCacheEntry'\n    PermaCacheGetResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/PermaCacheEntry'\n    PermaCacheDeleteResponse:\n      type: boolean\n      default: true\n    StatusResponse:\n      type: object\n      $ref: '#/components/schemas/PermaCacheStatus'\n    ErrorResponse:\n      type: object\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n    UnauthorizedErrorResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          default: HTTP Error\n        message:\n          type: string\n          default: Unauthorized\n    ForbiddenErrorResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          default: HTTP Error\n        message:\n          type: string\n          enum: [Token is not valid, Session expired]\n    ConflictErrorResponse:\n      type: object\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n  securitySchemes:\n    bearerAuth:\n      description: |\n        The nftstorage.link API uses *Bearer Tokens* to authenticate requests. You can view and manage your tokens in the [NFT Storage Dashboard](https://nft.storage).   \n        Your tokens carry many privileges, so be sure to keep them secure! Do not share your *secret tokens* in publicly accessible areas such as GitHub, client-side code, and so forth.   \n        **Bearer authentication** (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n        ```js\n        Authorization: Bearer \u003ctoken\u003e\n        ```\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    unauthorized:\n      description: Unauthorized\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/UnauthorizedErrorResponse'\n    forbidden:\n      description: Forbidden\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/ForbiddenErrorResponse'\n    notFound:\n      description: Not Found\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    conflict:\n      description: Not Found\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/ConflictErrorResponse'\n    internalServerError:\n      description: Internal Server Error\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    badRequest:\n      description: Bad Request\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n  parameters:\n    page:\n      description: Page of the list to return\n      name: page\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 0\n      example: 2\n    size:\n      description: Max records to return\n      name: size\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        default: 10\n    sort:\n      description: Sorting property\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: string\n        enum: ['date', 'size']\n      example: 'date'\n    order:\n      description: Sorting order\n      name: order\n      in: query\n      required: false\n      schema:\n        type: string\n        enum: ['asc', 'desc']\n      example: 'asc'\n",
			"canonicalURL": "/github.com/nftstorage/nftstorage.link@0c92cc4266a1d55b952fa3489231bb889ea2a978/-/blob/packages/website/public/schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/nftstorage/nftstorage.link/blob/0c92cc4266a1d55b952fa3489231bb889ea2a978/packages/website/public/schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}