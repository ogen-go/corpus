{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-sam-github-actions-example"
		},
		"file": {
			"name": "template.yaml",
			"size": 0,
			"path": "template.yaml",
			"byteSize": 4104,
			"content": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: A bare bones example of deploying an API Gateway API with one Lambda using an OpenAPI 3.0.1 example spec file as in-line yaml.\n\nParameters:\n\n  Name:\n    Type: String\n    Description: The name of the API to create, also used as the stack name.\n\nResources:\n\n  Api:\n    Type: AWS::Serverless::Api\n    Properties:\n      Name: !Ref Name\n      StageName: live\n      OpenApiVersion: 3.0.1\n      DefinitionBody: \n        openapi: 3.0.1\n        info:\n          title: Hello World API\n          description: This is a swagger example.\n          contact:\n            email: you@your-company.com\n          license:\n            name: Apache 2.0\n            url: http://www.apache.org/licenses/LICENSE-2.0.html\n          version: 1.0.0\n        paths:\n          /hello/world:\n            get:\n              summary: get hello world\n              description: |\n                Invokes hello world lambda function example.\n              responses:\n                \"200\":\n                  description: search results matching criteria\n                \"400\":\n                  description: bad input parameter\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddLambdaFunction.Arn}/invocations\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: when_no_match\n                httpMethod: POST\n                contentHandling: CONVERT_TO_TEXT\n                type: aws_proxy\n\n  AddLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: add.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./lambdas/add\n      Description: Add\n      AutoPublishAlias: live\n\n  CleanInputLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: cleaninput.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./lambdas/cleaninput\n      Description: Clean Input\n      AutoPublishAlias: live\n\n  DivideLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: divide.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./lambdas/divide\n      Description: Divide\n      AutoPublishAlias: live\n\n  MultiplyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: multiply.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./lambdas/multiply\n      Description: Multiply\n      AutoPublishAlias: live\n\n  SubtractLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: subtract.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./lambdas/subtract\n      Description: Subtract\n      AutoPublishAlias: live\n\n  StateMachine:\n    Type: AWS::Serverless::StateMachine\n    Properties:\n      Name: !Sub statemachine-${AWS::StackName}\n      DefinitionUri: sm_def.yaml\n      DefinitionSubstitutions: \n        AddLambdaFunction: !Ref AddLambdaFunction\n        CleanInputLambdaFunction: !Ref CleanInputLambdaFunction\n        DivideLambdaFunction: !Ref DivideLambdaFunction\n        MultiplyLambdaFunction: !Ref MultiplyLambdaFunction\n        SubtractLambdaFunction: !Ref SubtractLambdaFunction\n      Role: !GetAtt StateMachineRole.Arn\n\n  StateMachineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub statemachine-role-${AWS::StackName}\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: states.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n\n  InvokeFunctionPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: !Sub statemachine-invoke-function-policy-${AWS::StackName}\n      Roles:\n        - !Ref StateMachineRole\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - lambda:InvokeFunction\n            Resource: '*'\n",
			"canonicalURL": "/github.com/aws-samples/aws-sam-github-actions-example@6d976298a4f65410adb11142934a766078af4ad0/-/blob/template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-sam-github-actions-example/blob/6d976298a4f65410adb11142934a766078af4ad0/template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}