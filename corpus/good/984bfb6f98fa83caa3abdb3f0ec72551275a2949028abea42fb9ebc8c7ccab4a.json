{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/sessions-with-aws-sam"
		},
		"file": {
			"name": "template.yaml",
			"size": 0,
			"path": "sam-or-cdk/sam/template.yaml",
			"byteSize": 6785,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT-0\n\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Signed Url Generator\n\nGlobals:\n  Function:\n    Timeout: 3\n    Handler: app.handler\n    Runtime: nodejs12.x\n    Tracing: Active\n    Environment:\n        Variables:\n          STORAGE_BUCKET: !Ref storageBucket\n          URL_TABLE: !Ref urlTable\n\nResources:\n  # Amazon S3 storage bucket for uploaded files\n  storageBucket:\n    Type: AWS::S3::Bucket\n\n  # Amazon DynamoDB table to store short urls\n  urlTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: true\n\n  # AWS Lambda function to generate the signed upload URL\n  uploadSignerLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: lambda/uploadSigner/\n      Policies:\n        - S3WritePolicy:\n            BucketName: !Ref storageBucket\n\n  # AWS Lambda function to generate the signed download URL\n  downloadSignerLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: lambda/downloadSigner/\n      Policies:\n        - S3ReadPolicy:\n            BucketName: !Ref storageBucket\n\n  # AWS Lambda function to process the shortened URL\n  fetchedShortUrlLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: lambda/fetchShortUrl/\n      Policies:\n        DynamoDBReadPolicy:\n          TableName: !Ref urlTable\n      Events:\n        ApiEvent:\n          Type: HttpApi\n          Properties:\n            ApiId: !Ref httpApi\n            Path: /{id}\n            Method: GET\n\n  # AWS Step Functions state machine and\n  # Step Functions tasks\n  urlStateMachine:\n    Type: AWS::Serverless::StateMachine\n    Properties:\n      Type: EXPRESS\n      Tracing:\n        Enabled: true\n      Definition:\n        StartAt: Generate Signed URLs\n        States:\n          Generate Signed URLs:\n            Type: Parallel\n            Comment: Fetches a signed upload and download URL for the given Key\n            Next: formatResults\n            Branches:\n            - StartAt: GetUploadSignedUrl\n              States:\n                GetUploadSignedUrl:\n                  End: true\n                  Retry:\n                  - ErrorEquals:\n                    - Lambda.ServiceException\n                    - Lambda.AWSLambdaException\n                    - Lambda.SdkClientException\n                    IntervalSeconds: 2\n                    MaxAttempts: 6\n                    BackoffRate: 2\n                  Type: Task\n                  ResultPath: \"$.UploadSignResults\"\n                  Resource: arn:aws:states:::lambda:invoke\n                  Parameters:\n                    FunctionName: \"${GetUploadSignerFunction}\"\n                    Payload.$: \"$\"\n            - StartAt: GetDownloadSignedUrl\n              States:\n                GetDownloadSignedUrl:\n                  Next: WriteToDynamoDB\n                  Retry:\n                  - ErrorEquals:\n                    - Lambda.ServiceException\n                    - Lambda.AWSLambdaException\n                    - Lambda.SdkClientException\n                    IntervalSeconds: 2\n                    MaxAttempts: 6\n                    BackoffRate: 2\n                  Type: Task\n                  OutputPath: \"$\"\n                  ResultPath: \"$.DownloadSignResults\"\n                  Resource: arn:aws:states:::lambda:invoke\n                  Parameters:\n                    FunctionName: \"${GetDownloadSignerFunction}\"\n                    Payload.$: \"$\"\n                WriteToDynamoDB:\n                  End: true\n                  Type: Task\n                  OutputPath: \"$\"\n                  ResultPath: \"$.DynamoResults\"\n                  Resource: \"${DDBPutItem}\"\n                  Parameters:\n                    Item:\n                      id:\n                        S.$: \"$.DownloadSignResults.Payload.id\"\n                      signedUrl:\n                        S.$: \"$.DownloadSignResults.Payload.signedUrl\"\n                      TTL:\n                        N.$: \"$.DownloadSignResults.Payload.ttl\"\n                    TableName: \"${DDBTable}\"\n          formatResults:\n            Type: Pass\n            Parameters:\n              UploadUrl.$: \"$[0].UploadSignResults.Payload.signedUrl\"\n              DownloadUrl.$: \"$[1].DownloadSignResults.Payload.signedUrl\"\n              DownloadShortId.$: \"$[1].DownloadSignResults.Payload.id\"\n            End: true\n        TimeoutSeconds: 30\n      Policies:\n        - DynamoDBWritePolicy:\n            TableName: !Ref urlTable\n        - LambdaInvokePolicy:\n            FunctionName: !Ref uploadSignerLambda\n        - LambdaInvokePolicy:\n            FunctionName: !Ref downloadSignerLambda\n      DefinitionSubstitutions:\n        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem\n        DDBTable: !Ref urlTable\n        GetUploadSignerFunction: !GetAtt uploadSignerLambda.Arn\n        GetDownloadSignerFunction: !GetAtt downloadSignerLambda.Arn\n\n  # IAM role for HTTP APIs\n  httpApiRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service: \"apigateway.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: ApiDirectWriteToSQS\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              Action:\n              - states:StartSyncExecution\n              Effect: Allow\n              Resource:\n                - !Ref urlStateMachine\n\n  # Amazon API Gateway HTTP APIs and\n  # OpenAPI definition to handle AWS Integration\n  httpApi:\n    Type: AWS::Serverless::HttpApi\n    Properties:\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: Signed URL Generator - Built with AWS SAM\n        paths:\n          \"/\":\n            post:\n              responses:\n                default:\n                  description: Step Function Response\n              x-amazon-apigateway-integration:\n                integrationSubtype: StepFunctions-StartSyncExecution\n                credentials: !GetAtt httpApiRole.Arn\n                requestParameters:\n                  Input: \"$request.body\"\n                  StateMachineArn: !GetAtt urlStateMachine.Arn\n                payloadFormatVersion: '1.0'\n                type: aws_proxy\n                connectionType: INTERNET\n\n# Outputs\nOutputs:\n  apiUrlOut:\n    Value: !Sub \"https://${httpApi}.execute-api.${AWS::Region}.amazonaws.com\"",
			"canonicalURL": "/github.com/aws-samples/sessions-with-aws-sam@b57ae6fa954ec05a6dce67f2b03620ad84bbb420/-/blob/sam-or-cdk/sam/template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/sessions-with-aws-sam/blob/b57ae6fa954ec05a6dce67f2b03620ad84bbb420/sam-or-cdk/sam/template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}