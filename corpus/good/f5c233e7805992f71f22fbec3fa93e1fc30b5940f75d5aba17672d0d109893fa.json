{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ngjoni/wvsv_corona_tracker"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/corona-server/src/main/resources/api/openapi.yaml",
			"byteSize": 10908,
			"content": "openapi: 3.0.1\ninfo:\n  title: Corona Tracker API\n  version: \"0.1\"\nservers:\n  - url: http://localhost/api/v1\nsecurity:\n  - basicAuth: []\npaths:\n  /positions:\n    get:\n      summary: Fetches a list of Positions\n      operationId: getPositions\n      description: Without any params, it returns a list of last known positions for\n        all the user's Devices. _from_ and _to_ fields are not required with _id_\n      parameters:\n        - name: userId\n          in: query\n          schema:\n            type: string\n        - name: from\n          in: query\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          schema:\n            type: string\n            format: date-time\n        - name: to\n          in: query\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          schema:\n            type: string\n            format: date-time\n        - name: id\n          in: query\n          description: To fetch one or more positions. Multiple params can be passed\n            like `id=31\u0026id=42`\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Position'\n            text/csv:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Position'\n            application/gpx+xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Position'\n    post:\n      summary: Create new location entry\n      operationId: createPosition\n      parameters:\n        - name: userId\n          in: query\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Position'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Position'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Position'\n            application/gpx+xml:\n              schema:\n                $ref: '#/components/schemas/Position'\n\n  /users:\n    get:\n      summary: Fetch a list of Users\n      operationId: getUsers\n      parameters:\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        400:\n          description: No Permission\n          content: {}\n    post:\n      summary: Create a User\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /users/{id}:\n    get:\n      summary: Get a single users\n      operationId: getUser\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: No Permission\n          content: {}\n    delete:\n      summary: Delete a User TODO move to /users/id\n      operationId: deleteUser\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: No Content\n          content: {}\n\n  /users/{id}/friends:\n    put:\n      summary: Upload users friends\n      operationId: uploadFriends\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Friend'\n        required: true\n      responses:\n        200:\n          description: OK\n        400:\n          description: No Permission\n          content: {}\n    post:\n      summary: Add users friends\n      operationId: addFriend\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Friend'\n        required: true\n      responses:\n        200:\n          description: OK\n        400:\n          description: No Permission\n          content: {}\n    get:\n      summary: Get users friends\n      operationId: getFriends\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Friend'\n        400:\n          description: No Permission\n          content: {}\n\n  /reports/locations:\n    get:\n      summary: Fetch a list of  within the time period for the Device\n      description: At least one userId must be passed\n      operationId: getLocations\n      parameters:\n        - name: deviceId\n          in: query\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: from\n          in: query\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: to\n          in: query\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          required: true\n          schema:\n            type: string\n            format: date-time\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReportTrips'\n\n  /measurement/bodytemp:\n    get:\n      summary: Fetch a list of body temp measurements\n      operationId: getBodyTempMeasurements\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TempMeasurement'\n        400:\n          description: No Permission\n          content: {}\n    post:\n      summary: Add a plague body temp measurement\n      operationId: createBodyTempMeasurement\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TempMeasurement'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TempMeasurement'\n\n  /healthDataSet:\n    post:\n      summary: Add a health dataset\n      operationId: createDataSet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HealthDataSet'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthDataSet'\n\ncomponents:\n  schemas:\n    Position:\n      type: object\n      properties:\n        id:\n          type: string\n        userId:\n          type: string\n        time:\n          type: string\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          format: date-time\n        latitude:\n          type: number\n        longitude:\n          type: number\n        altitude:\n          type: number\n        accuracy:\n          type: integer\n          description: Position accuracy in meters (radius), lower is better\n    User:\n      type: object\n      required:\n        - token\n        - phoneHash\n      properties:\n        token:\n          type: string\n        phoneHash:\n          type: string\n        healthHistory:\n          type: array\n          items:\n            $ref: '#/components/schemas/HealthDataSet'\n\n    Friend:\n      type: object\n      required:\n        - phoneHash\n      properties:\n        id:\n          type: string\n        phoneHash:\n          type: string\n\n    TempMeasurement:\n      type: object\n      required:\n        - time\n        - userId\n        - value\n      properties:\n        time:\n          type: string\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          format: date-time\n        userId:\n          type: string\n        value:\n          description: 'temp value, caution: is multiplied *100. E.g. 38.02Â°C gets 3802 here!'\n          type: integer\n    HealthDataSet:\n      type: object\n      required:\n        - medicalState\n        - userId\n      properties:\n        userId:\n          type: string\n        medicalState:\n          type: string\n          enum:\n            - UNKNOWN\n            - INFECTED\n            - TREATMENT\n            - CURED\n        time:\n          type: string\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          format: date-time\n\n    ReportTrips:\n      type: object\n      properties:\n        deviceName:\n          type: string\n        maxSpeed:\n          type: number\n          description: in knots\n        averageSpeed:\n          type: number\n          description: in knots\n        distance:\n          type: number\n          description: in meters\n        spentFuel:\n          type: number\n          description: in liters\n        duration:\n          type: integer\n        startTime:\n          type: string\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          format: date-time\n        startAddress:\n          type: string\n        startLat:\n          type: number\n        startLon:\n          type: number\n        endTime:\n          type: string\n          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`\n          format: date-time\n        endAddress:\n          type: string\n        endLat:\n          type: number\n        endLon:\n          type: number\n\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: Basic HTTP authorization with _email_ and _password_\n      scheme: basic\n",
			"canonicalURL": "/github.com/ngjoni/wvsv_corona_tracker@7c35517c33406cd964a31912322ba840a1625673/-/blob/backend/corona-server/src/main/resources/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ngjoni/wvsv_corona_tracker/blob/7c35517c33406cd964a31912322ba840a1625673/backend/corona-server/src/main/resources/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}