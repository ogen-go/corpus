{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Urigo/SOFA"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "example/swagger.yml",
			"byteSize": 6050,
			"content": "openapi: 3.0.0\ninfo:\n  title: Example API\n  version: 3.0.0\nservers:\n  - url: /\n    description: Development server\npaths:\n  /me:\n    get:\n      operationId: meQuery\n      parameters: []\n      responses:\n        '200':\n          description: Resolves current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/{id}:\n    get:\n      operationId: userQuery\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /users:\n    get:\n      operationId: usersQuery\n      parameters: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /users-limit:\n    get:\n      operationId: usersLimitQuery\n      parameters:\n        - in: query\n          name: limit\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /users-sort:\n    get:\n      operationId: usersSortQuery\n      parameters:\n        - in: query\n          name: sort\n          required: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /book/{id}:\n    get:\n      operationId: bookQuery\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'\n  /books:\n    get:\n      operationId: booksQuery\n      parameters: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Book'\n  /never:\n    get:\n      operationId: neverQuery\n      parameters: []\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: string\n  /feed:\n    get:\n      operationId: feedQuery\n      parameters:\n        - in: query\n          name: feedCommentsFilter\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Post'\n  /add-book:\n    post:\n      operationId: addBookMutation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n              required:\n                - title\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'\ncomponents:\n  schemas:\n    Pizza:\n      type: object\n      required:\n        - dough\n      properties:\n        dough:\n          type: string\n        toppings:\n          type: array\n          items:\n            type: string\n    Salad:\n      type: object\n      required:\n        - ingredients\n      properties:\n        ingredients:\n          type: array\n          items:\n            type: string\n    Book:\n      type: object\n      required:\n        - id\n        - title\n        - type\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n        type:\n          type: string\n          enum:\n            - AUDIO\n            - LEGACY\n    User:\n      type: object\n      required:\n        - id\n        - name\n        - favoritePizza\n        - favoriteBook\n        - favoriteFood\n        - shelf\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        favoritePizza:\n          $ref: '#/components/schemas/Pizza'\n        favoriteBook:\n          $ref: '#/components/schemas/Book'\n        favoriteFood:\n          type: object\n        shelf:\n          type: array\n          items:\n            $ref: '#/components/schemas/Book'\n    Post:\n      type: object\n      properties:\n        comments:\n          type: array\n          items:\n            type: string\n    Query:\n      type: object\n      properties:\n        me:\n          $ref: '#/components/schemas/User'\n          description: Resolves current user\n        user:\n          $ref: '#/components/schemas/User'\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        usersLimit:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        usersSort:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        book:\n          $ref: '#/components/schemas/Book'\n        books:\n          type: array\n          items:\n            $ref: '#/components/schemas/Book'\n        never:\n          type: string\n        feed:\n          type: array\n          items:\n            $ref: '#/components/schemas/Post'\n    Mutation:\n      type: object\n      properties:\n        addBook:\n          $ref: '#/components/schemas/Book'\n    Subscription:\n      type: object\n      properties:\n        onBook:\n          $ref: '#/components/schemas/Book'\n",
			"canonicalURL": "/github.com/Urigo/SOFA@5df550f90d06061d7748163724f8d711350220d9/-/blob/example/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Urigo/SOFA/blob/5df550f90d06061d7748163724f8d711350220d9/example/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}