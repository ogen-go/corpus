{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GoogleCloudPlatform/apigee-anthos-service-mesh-demo"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "specs/gen/openapi.yaml",
			"byteSize": 10543,
			"content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Generated with protoc-gen-openapi\n# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi\n\nopenapi: 3.0.3\ninfo:\n    title: \"\"\n    version: 0.0.1\npaths:\n    /convert:\n        post:\n            tags:\n                - CurrencyService\n            operationId: CurrencyService_Convert\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CurrencyConversionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Money'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /currencies:\n        get:\n            tags:\n                - CurrencyService\n            operationId: CurrencyService_GetSupportedCurrencies\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetSupportedCurrenciesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /orders:\n        post:\n            tags:\n                - OrderService\n            operationId: OrderService_SubmitOrder\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/OrderRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/OrderResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /products:\n        get:\n            tags:\n                - ProductCatalogService\n            operationId: ProductCatalogService_ListProducts\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListProductsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\ncomponents:\n    schemas:\n        CurrencyConversionRequest:\n            type: object\n            properties:\n                from:\n                    $ref: '#/components/schemas/Money'\n                toCode:\n                    type: string\n                    description: The 3-letter currency code defined in ISO 4217.\n        GetSupportedCurrenciesResponse:\n            type: object\n            properties:\n                currencyCodes:\n                    type: array\n                    items:\n                        type: string\n                    description: The 3-letter currency code defined in ISO 4217.\n        GoogleProtobufAny:\n            type: object\n            properties:\n                '@type':\n                    type: string\n                    description: The type of the serialized message.\n            additionalProperties: true\n            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.\n        ListProductsResponse:\n            type: object\n            properties:\n                products:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Product'\n        Money:\n            type: object\n            properties:\n                currencyCode:\n                    type: string\n                    description: The 3-letter currency code defined in ISO 4217.\n                units:\n                    type: integer\n                    description: The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.\n                    format: int64\n                nanos:\n                    type: integer\n                    description: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.\n                    format: int32\n            description: Represents an amount of money with its currency type.\n        OrderAddress:\n            type: object\n            properties:\n                street:\n                    type: string\n                city:\n                    type: string\n                state:\n                    type: string\n                country:\n                    type: string\n                zip:\n                    type: integer\n                    format: int32\n        OrderCC:\n            type: object\n            properties:\n                number:\n                    type: string\n                cvv:\n                    type: integer\n                    format: int32\n                expYear:\n                    type: integer\n                    format: int32\n                expMonth:\n                    type: integer\n                    format: int32\n        OrderRequest:\n            type: object\n            properties:\n                user_id:\n                    type: string\n                email:\n                    type: string\n                currency:\n                    type: string\n                address:\n                    $ref: '#/components/schemas/OrderAddress'\n                items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/OrderRequestItem'\n                creditCard:\n                    $ref: '#/components/schemas/OrderCC'\n        OrderRequestItem:\n            type: object\n            properties:\n                id:\n                    type: string\n                quantity:\n                    type: integer\n                    format: int32\n        OrderResponse:\n            type: object\n            properties:\n                id:\n                    type: string\n                shipping_id:\n                    type: string\n                shipping_cost:\n                    type: number\n                    format: double\n                shipping_address:\n                    $ref: '#/components/schemas/OrderAddress'\n                items:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/OrderResponseItem'\n        OrderResponseItem:\n            type: object\n            properties:\n                id:\n                    type: string\n                quantity:\n                    type: integer\n                    format: int32\n                cost:\n                    type: number\n                    format: double\n        Product:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                picture:\n                    type: string\n                priceUsd:\n                    $ref: '#/components/schemas/Money'\n                categories:\n                    type: array\n                    items:\n                        type: string\n                    description: Categories such as \"clothing\" or \"kitchen\" that can be used to look up other related products.\n        Status:\n            type: object\n            properties:\n                code:\n                    type: integer\n                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n                    format: int32\n                message:\n                    type: string\n                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n                details:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufAny'\n                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.\n            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'\ntags:\n    - name: CurrencyService\n    - name: OrderService\n    - name: ProductCatalogService\n",
			"canonicalURL": "/github.com/GoogleCloudPlatform/apigee-anthos-service-mesh-demo@20c8c7b2d19e1e7b1f7870500f9d62aaaed43db6/-/blob/specs/gen/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/GoogleCloudPlatform/apigee-anthos-service-mesh-demo/blob/20c8c7b2d19e1e7b1f7870500f9d62aaaed43db6/specs/gen/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}