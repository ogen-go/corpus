{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/isel-leic-ipw/IPW-2122v-LEIC31N-G13"
		},
		"file": {
			"name": "games-api.yaml",
			"size": 0,
			"path": "lesson18/docs/games-api.yaml",
			"byteSize": 6804,
			"content": "openapi: 3.0.1\ninfo:\n  title: Games API\n  description: This is a simple Games API\n  contact:\n    email: you@your-company.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - description: Localhost server for testing API\n    url: http://localhost:1904/api\n\ntags:\n- name: games\n- name: users\n\npaths:\n  /users:\n    post:\n      tags:\n      - users\n      summary: adds a user\n      description: Adds a user to the system\n      operationId: addUser\n      requestBody:\n        description: User to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUser'\n        required: false\n      responses:\n        201:\n          description: user created\n          content:\n            application/json:\n              schema:\n                required:\n                - token\n                type: object\n                properties:\n                  token:\n                    type: string\n                    format: uuid\n        400:\n          description: Invalid input, object invalid\n          content: {}\n      x-codegen-request-body-name: user\n  /games:\n    get:\n      tags:\n      - games\n      summary: get games\n      description: By passing in the appropriate options, you can search for available\n        games\n      operationId: getGames\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: false\n        schema:\n          type: string\n          format: uuid\n      - name: searchString\n        in: query\n        description: pass an optional search string for looking up games with that  text\n        schema:\n          type: string\n      - name: skip\n        in: query\n        description: number of records to skip for pagination\n        schema:\n          minimum: 0\n          type: integer\n      - name: limit\n        in: query\n        description: maximum number of records to return\n        schema:\n          maximum: 50\n          minimum: 0\n          type: integer\n      responses:\n        200:\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Game'\n        400:\n          description: bad input parameter\n          content: \n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidRequest'\n    post:\n      tags:\n      - games\n      summary: adds a game\n      description: Adds a game to the system\n      operationId: addGame\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: true\n        schema:\n          type: string\n          format: uuid\n      requestBody:\n        description: Game to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewGame'\n        required: false\n      responses:\n        201:\n          description: Game created\n          content: {}\n        400:\n          description: Invalid input, object invalid\n          content: {}\n      x-codegen-request-body-name: game\n  /games/{gameId}:\n    get:\n      tags:\n      - games\n      summary: Get a game given its id\n      description: Get a game given its id\n      operationId: getGameById\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        schema:\n          type: string\n          format: uuid\n      - name: gameId\n        in: path\n        description: ID of game that to be fetched\n        required: true\n        schema:\n          type: integer\n          minimum: 1\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Game'\n        400:\n          description: Invalid ID supplied\n          content: \n            application/json:\n              schema: \n                type: string\n                example: Invalid ID supplied\n        404:\n          description: Game not found\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/InvalidRequest'\n                example: Game Not found\n    put:\n      tags:\n      - games\n      summary: updates a game\n      description: Updates a Game in the system\n      operationId: updateGame\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: Authorization\n        in: header\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: gameId\n        in: path\n        description: ID of the game to be deleted\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Game to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewGame'\n        required: false\n      responses:\n        201:\n          description: game updated\n          content: {}\n        404:\n          description: Game not found\n          content: {}\n    delete:\n      tags:\n      - games\n      summary: Delete a game by ID\n      description: Delete a game by ID\n      operationId: deleteGame\n      security:\n        - bearerAuth: []\n      parameters:\n      - name: gameId\n        in: path\n        description: ID of the game to be deleted\n        required: true\n        schema:\n          type: integer\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Game not found\n          content: {}\ncomponents:\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n  schemas:\n    Game:\n      required:\n      - id\n      - text\n      - userId\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        name:\n          type: string\n          example: Fifa\n        description:\n          type: string\n          example: Fifa game description\n        userId:\n          type: integer\n    NewGame:\n      required:\n      - name\n      - userId\n      type: object\n      properties:\n        name:\n          type: string\n          example: Fifa\n        description:\n          type: string\n          example: Fifa game description\n        userId:\n          type: integer\n    NewUser:\n      required:\n      - userName\n      type: object\n      properties:\n        userName:\n          type: string\n          example: joao\n    InvalidRequest:\n      type: object\n      properties:\n        cause:\n          type: string\n          example: \"Missing required parameter\"\n",
			"canonicalURL": "/github.com/isel-leic-ipw/IPW-2122v-LEIC31N-G13@3cf7192aea750ff1cde96f5f97e130c13e91e845/-/blob/lesson18/docs/games-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/isel-leic-ipw/IPW-2122v-LEIC31N-G13/blob/3cf7192aea750ff1cde96f5f97e130c13e91e845/lesson18/docs/games-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}