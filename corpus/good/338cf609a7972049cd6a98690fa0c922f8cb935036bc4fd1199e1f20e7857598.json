{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "uebermaps.com-2.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/uebermaps.com-2.0-swagger.yaml",
			"byteSize": 52146,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    name: uebermaps API Team\n  description: Enable people to store spots on public and private maps\n  termsOfService: https://uebermaps.com/terms/\n  title: uebermaps API endpoints\n  version: \"2.0\"\n  x-apisguru-categories:\n    - location\n  x-logo:\n    url: https://twitter.com/uebermaps/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://uebermaps.com/api/v2/apidocs\n      version: \"2.0\"\n  x-providerName: uebermaps.com\npaths:\n  /account:\n    patch:\n      description: Update account. Wrap map parameters in [user].\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserEditable\"\n        description: user attributes\n      responses:\n        \"200\":\n          description: Contains user data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      summary: Update account\n      tags:\n        - Account\n  \"/attachments/{id}\":\n    delete:\n      description: Delete attachment.\n      parameters:\n        - description: Attachment id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted attachment.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attachment\"\n      summary: Delete attachment\n      tags:\n        - Attachments\n  /authentication:\n    post:\n      description: Sign in user. Wrap authentication parameters in [user].\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserAuthentication\"\n        description: user authentication attributes\n        required: true\n      responses:\n        \"200\":\n          description: Contains user data including authentication token for subsequent\n            requests\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserFullProfile\"\n      summary: Sign in user\n      tags:\n        - Authentication\n  /collaborator_invitations:\n    get:\n      description: List your collaborator invitations.\n      responses:\n        \"200\":\n          description: Contains list of collaborator invitations.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/CollaboratorInvitation\"\n                type: array\n      summary: List your collaborator invitations\n      tags:\n        - CollaboratorInvitations\n    post:\n      description: Invite user to collaborate on map.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CollaboratorInvitationCreate\"\n        description: Supply map_id and either a comma separated list of user_ids or emails.\n          Optionally you can provide a 'is_admin' parameter with 'true' or\n          'false' to give the invited users admin privileges.\n      responses:\n        \"200\":\n          description: Contains collaborator invitation data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollaboratorInvitation\"\n      summary: Invite user to collaborate on map\n      tags:\n        - CollaboratorInvitations\n  \"/collaborator_invitations/{id}\":\n    delete:\n      description: Delete collaborator invitation.\n      parameters:\n        - description: Collaborator invitation id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted collaborator invitation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollaboratorInvitation\"\n      summary: Delete collaborator invitation\n      tags:\n        - CollaboratorInvitations\n    get:\n      description: Show collaborator invitation\n      parameters:\n        - description: Collaborator invitation id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains collaborator invitation data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollaboratorInvitation\"\n      summary: Show collaborator invitation\n      tags:\n        - CollaboratorInvitations\n    patch:\n      description: Accept collaborator invitation.\n      parameters:\n        - description: Collaborator invitation id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains collaborator invitation data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollaboratorInvitation\"\n      summary: Accept collaborator invitation.\n      tags:\n        - CollaboratorInvitations\n  \"/comments/{id}\":\n    delete:\n      description: Delete comment.\n      parameters:\n        - description: Comment id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted comment.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n      summary: Delete comment\n      tags:\n        - Comments\n    patch:\n      description: Update comment. Wrap comment parameters in [comment].\n      parameters:\n        - description: Comment id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommentEditable\"\n        description: Comment attributes\n      responses:\n        \"200\":\n          description: Contains comment data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n      summary: Update comment\n      tags:\n        - Comments\n  /events:\n    get:\n      description: List your own events.\n      parameters:\n        - description: Begin of time range of event (ISO 8601 date format).\n          in: query\n          name: timeframe_start\n          required: false\n          schema:\n            type: string\n        - description: End of time range of event (ISO 8601 date format).\n          in: query\n          name: timeframe_end\n          required: false\n          schema:\n            type: string\n        - description: \"To refine your event index request to contain only events\n            within                                                             a\n            geographical box pass the followng bounds\n            parameters.                                                             \\\n            F. e. to get events within 'Hamburg, St.\n            Pauli':                                                             \\\n            bounds[sw_lat]=53.54831449741324                                                             \\\n            bounds[sw_lon]=9.943227767944336                                                             \\\n            bounds[ne_lat]=53.5571103674878                                                             \\\n            bounds[ne_lon]=9.9776029586792\"\n          in: query\n          name: bounds\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Contains list of events.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Event\"\n                type: array\n      summary: List your own events\n      tags:\n        - Events\n  \"/events/{id}\":\n    delete:\n      description: Delete event.\n      parameters:\n        - description: Event id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted event.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n      summary: Delete event\n      tags:\n        - Events\n    get:\n      description: Get basic information about an event\n      parameters:\n        - description: Id of event\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains event data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n      summary: Get event\n      tags:\n        - Events\n    patch:\n      description: Update event. Wrap event parameters in [event].\n      parameters:\n        - description: Event id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/EventEditable\"\n      responses:\n        \"200\":\n          description: Contains map data, map settings and your relation to this map\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Map\"\n      summary: Update event\n      tags:\n        - Events\n  /maps:\n    get:\n      description: List your own maps.\n      responses:\n        \"200\":\n          description: Contains list of maps.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Map\"\n                type: array\n      summary: List your own maps\n      tags:\n        - Maps\n    post:\n      description: Create map. Wrap map parameters in [map]. To add a map header picture\n        pass a base64 encoded string to [map][picture].\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MapEditable\"\n        description: map attributes\n      responses:\n        \"200\":\n          description: Contains map data, map settings and your relation to this map\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Map\"\n      summary: Create map\n      tags:\n        - Maps\n  /maps/search:\n    get:\n      description: Search maps\n      parameters:\n        - description: Query\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: \"Distance. Diameter of search radius in meter (default: 2000 meter)\"\n          in: query\n          name: d\n          schema:\n            type: integer\n        - description: \"Latitude for search radius (default distance: 2000 meter)\"\n          in: query\n          name: lat\n          schema:\n            type: number\n        - description: \"Longitude for search radius (default distance: 2000 meter)\"\n          in: query\n          name: lon\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: Contains map data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Map\"\n      summary: Search maps\n      tags:\n        - Search\n  \"/maps/{id}\":\n    delete:\n      description: Delete map.\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted map.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Map\"\n      summary: Delete map\n      tags:\n        - Maps\n    get:\n      description: Get basic information about a map\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains map data, map settings and your relation to this map\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MapWithRelation\"\n      summary: Get map\n      tags:\n        - Maps\n    patch:\n      description: Update map. Wrap map parameters in [map]. To update the map header\n        picture pass a base64 encoded string to [map][picture].\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MapEditable\"\n        description: map settings attributes\n      responses:\n        \"200\":\n          description: Contains map data, map settings and your relation to this map\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Map\"\n      summary: Update map\n      tags:\n        - Maps\n  \"/maps/{id}/attachments\":\n    get:\n      description: List attachments for a given map.\n      parameters:\n        - description: Map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of attachments.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Attachment\"\n                type: array\n      summary: List attachments for a given map\n      tags:\n        - Attachments\n    post:\n      description: Upload map attachment. Wrap attachment parameters in [attachment]\n      parameters:\n        - description: Map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          description: Contains attachment data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attachment\"\n      summary: Upload map attachment\n      tags:\n        - Attachments\n  \"/maps/{id}/collaborators/\":\n    get:\n      description: List collaborators of a map.\n      parameters:\n        - description: Map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of collaborators.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Collaborator\"\n                type: array\n      summary: List collaborators of a map\n      tags:\n        - Collaborators\n  \"/maps/{id}/collaborators/{user_id}\":\n    delete:\n      description: Delete collaboration.\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: user id\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted collaborator.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collaborator\"\n      summary: Delete collaboration\n      tags:\n        - Collaborators\n    patch:\n      description: Update collaborator. Wrap collaborator parameters in [collaborator]\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: user id\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CollaboratorEditable\"\n        description: collaborator attributes\n      responses:\n        \"200\":\n          description: Contains collaborator data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collaborator\"\n      summary: Update collaborator\n      tags:\n        - Collaborators\n  \"/maps/{id}/comments\":\n    get:\n      description: List comments for a given map.\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of comments.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n                type: array\n      summary: List comments for a given map\n      tags:\n        - Comments\n    post:\n      description: Create map comment. Wrap comment parameters in [comment].\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/CommentEditable\"\n      responses:\n        \"200\":\n          description: Contains comment data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n      summary: Create map comment\n      tags:\n        - Comments\n  \"/maps/{id}/respots\":\n    get:\n      description: List respots of a map.\n      parameters:\n        - description: Map Id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of respots.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Respot\"\n                type: array\n      summary: List respots of a map\n      tags:\n        - Respots\n  \"/maps/{id}/spots\":\n    get:\n      description: List spots for a given map.\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: Order of spots\n          in: query\n          name: order\n          schema:\n            type: string\n            enum:\n              - created_at_asc\n              - created_at_desc\n              - updated_at_asc\n              - updated_at_desc\n              - title_asc\n              - title_desc\n      responses:\n        \"200\":\n          description: Contains list of spots.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Spot\"\n                type: array\n      summary: List spots for a given map\n      tags:\n        - Spots\n    post:\n      description: Create spot. Wrap parameters in [spot]. To add a spot picture pass a\n        base64 encoded string to [spot][picture].\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SpotEditable\"\n        description: spot attributes\n        required: true\n      responses:\n        \"200\":\n          description: Contains spot data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spot\"\n      summary: Create spot\n      tags:\n        - Spots\n  \"/maps/{id}/subscriptions\":\n    delete:\n      description: Unsubscribe from map.\n      parameters:\n        - description: map id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted subscription.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n      summary: Unsubscribe from map\n      tags:\n        - Subscriptions\n    get:\n      description: List subscriptions for a given map.\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of subscriptions.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Subscription\"\n                type: array\n      summary: List subscriptions for a given map\n      tags:\n        - Subscriptions\n  \"/maps/{map_id}/spots/{id}\":\n    get:\n      description: Get basic information about a spot\n      parameters:\n        - description: Id of spot\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: Id of map\n          in: path\n          name: map_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains spot data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spot\"\n      summary: Get spot\n      tags:\n        - Spots\n  \"/maps/{map_id}/spots/{spot_id}/respot\":\n    delete:\n      description: Delete respot from map by spot id.\n      parameters:\n        - description: Map Id\n          in: path\n          name: map_id\n          required: true\n          schema:\n            type: integer\n        - description: Spot Id\n          in: path\n          name: spot_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted respot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Respot\"\n      summary: Delete respot from map by spot id\n      tags:\n        - Respots\n  /respot_maps:\n    get:\n      description: List maps that user can respot to.\n      responses:\n        \"200\":\n          description: Contains list of maps.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Map\"\n                type: array\n      summary: List maps that user can respot to\n      tags:\n        - Respots\n  \"/respots/{id}\":\n    delete:\n      description: Delete respot.\n      parameters:\n        - description: Respot Id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted respot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Respot\"\n      summary: Delete respot\n      tags:\n        - Respots\n    get:\n      description: Get basic information about a respot\n      parameters:\n        - description: Id of respot\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains respot data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Respot\"\n      summary: Get respot\n      tags:\n        - Respots\n  \"/share/map/{id}\":\n    get:\n      description: Get secret access token of an uebermap with access set to 'Secret link'.\n        Pass the 'token' on every request you make to access this uebermap and\n        its resources. F.e. token=1-x_gqu7eLBe3uKoAGAGXy\n      parameters:\n        - description: Id of map\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains map data and a secret token to access this map.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MapWithAuthToken\"\n      summary: Get secret access token to share map\n      tags:\n        - Share\n  /spots:\n    get:\n      description: List your own spots.\n      parameters:\n        - description: Order of spots\n          in: query\n          name: order\n          schema:\n            type: string\n            enum:\n              - created_at_asc\n              - created_at_desc\n              - updated_at_asc\n              - updated_at_desc\n              - title_asc\n              - title_desc\n      responses:\n        \"200\":\n          description: Contains list of spots.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Spot\"\n                type: array\n      summary: List your own spots\n      tags:\n        - Spots\n  /spots/search:\n    get:\n      description: Search spots\n      parameters:\n        - description: Query\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: \"Distance. Diameter of search radius in meter (default: 2000 meter)\"\n          in: query\n          name: d\n          schema:\n            type: integer\n        - description: Latitude for search radius (2 km)\n          in: query\n          name: lat\n          schema:\n            type: number\n        - description: Longitude for search radius (2 km)\n          in: query\n          name: lon\n          schema:\n            type: number\n      responses:\n        \"200\":\n          description: Contains spot data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spot\"\n      summary: Search spots\n      tags:\n        - Search\n  \"/spots/{id}\":\n    delete:\n      description: Delete spot.\n      parameters:\n        - description: spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains deleted spot.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spot\"\n      summary: Delete spot\n      tags:\n        - Spots\n    patch:\n      description: Update spot. Wrap parameters in [spot]. To update the spot picture pass\n        a base64 encoded string to [spot][picture].\n      parameters:\n        - description: spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SpotEditable\"\n        description: spot attributes\n      responses:\n        \"200\":\n          description: Contains spot data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spot\"\n      summary: Update spot\n      tags:\n        - Spots\n  \"/spots/{id}/attachments\":\n    get:\n      description: List attachments for a given spot.\n      parameters:\n        - description: Spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of attachments.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Attachment\"\n                type: array\n      summary: List attachments for a given spot\n      tags:\n        - Attachments\n    post:\n      description: Upload spot attachment. Wrap attachment parameters in [attachment]\n      parameters:\n        - description: Spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          description: Contains attachment data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attachment\"\n      summary: Upload spot attachment\n      tags:\n        - Attachments\n  \"/spots/{id}/comments\":\n    get:\n      description: List comments for a given spot.\n      parameters:\n        - description: Id of spot\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of comments.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n                type: array\n      summary: List comments for a given spot\n      tags:\n        - Comments\n    post:\n      description: Create spot comment. Wrap comment parameters in [comment].\n      parameters:\n        - description: spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/CommentEditable\"\n      responses:\n        \"200\":\n          description: Contains comment data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n      summary: Create spot comment\n      tags:\n        - Comments\n  \"/spots/{id}/events\":\n    get:\n      description: List maps for a given spot.\n      parameters:\n        - description: Id of spot\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: Begin of time range of event (ISO 8601 date format).\n          in: query\n          name: timeframe_start\n          required: false\n          schema:\n            type: string\n        - description: End of time range of event (ISO 8601 date format).\n          in: query\n          name: timeframe_end\n          required: false\n          schema:\n            type: string\n        - description: \"To refine your event index request to contain only events\n            within                                                             a\n            geographical box pass the followng bounds\n            parameters.                                                             \\\n            F. e. to get events within 'Hamburg, St.\n            Pauli':                                                             \\\n            bounds[sw_lat]=53.54831449741324                                                             \\\n            bounds[sw_lon]=9.943227767944336                                                             \\\n            bounds[ne_lat]=53.5571103674878                                                             \\\n            bounds[ne_lon]=9.9776029586792\"\n          in: query\n          name: bounds\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Contains list of events.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Event\"\n                type: array\n      summary: List events for a given spot\n      tags:\n        - Events\n    post:\n      description: Create event. Wrap map parameters in [event].\n      parameters:\n        - description: Spot id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/EventEditable\"\n      responses:\n        \"200\":\n          description: Contains event data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n      summary: Create event\n      tags:\n        - Events\n  \"/spots/{id}/respots\":\n    post:\n      description: Respot a spot onto a map.\n      parameters:\n        - description: Spot Id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              format: integer\n              type: number\n        description: Map Id\n        required: true\n      responses:\n        \"200\":\n          description: Contains respot data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Respot\"\n      summary: Respot a spot onto a map\n      tags:\n        - Respots\n  /subscriptions:\n    get:\n      description: List subscriptions.\n      parameters:\n        - description: Id of user\n          in: query\n          name: user_id\n          schema:\n            type: integer\n        - description: Id of map\n          in: query\n          name: map_id\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of subscriptions.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Subscription\"\n                type: array\n      summary: List subscriptions. Pass no parameters to get own subscriptions\n      tags:\n        - Subscriptions\n    post:\n      description: Create map subscription.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              format: integer\n              type: number\n        description: map id\n        required: true\n      responses:\n        \"200\":\n          description: Contains subscription data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n      summary: Create map subscription\n      tags:\n        - Subscriptions\n  /trends/latest:\n    get:\n      description: List latest maps.\n      responses:\n        \"200\":\n          description: Contains list of maps.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Map\"\n                type: array\n      summary: List latest maps\n      tags:\n        - Trends\n  /trends/recommended:\n    get:\n      description: List recommended maps.\n      responses:\n        \"200\":\n          description: Contains list of maps.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Map\"\n                type: array\n      summary: List recommended maps\n      tags:\n        - Trends\n  /users/search:\n    get:\n      description: Search users\n      parameters:\n        - description: Query\n          in: query\n          name: q\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Contains users data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      summary: Search users\n      tags:\n        - Search\n  \"/users/{id}\":\n    get:\n      description: Get profile a user\n      parameters:\n        - description: Id of user\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains user data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      summary: Get user profile\n      tags:\n        - Users\n  \"/users/{user_id}/maps\":\n    get:\n      description: List maps for a given user.\n      parameters:\n        - description: Id of user\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Contains list of maps.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Map\"\n                type: array\n      summary: List maps for a given user\n      tags:\n        - Maps\nservers:\n  - url: https://uebermaps.com/api/v2\ncomponents:\n  requestBodies:\n    EventEditable:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/EventEditable\"\n      description: Event attributes\n    Image:\n      content:\n        application/json:\n          schema:\n            type: string\n      description: Base64 encoded image\n      required: true\n    CommentEditable:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CommentEditable\"\n      description: comment attributes\n  schemas:\n    Attachment:\n      properties:\n        attachable_id:\n          example: 7543829\n          type: integer\n        attachable_type:\n          example: Spot\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: This photo was taken in front of the restaurant\n          type: string\n        file_url:\n          example: https://...\n          type: string\n        id:\n          example: 34939432\n          type: integer\n        map_id:\n          example: 985732\n          type: integer\n        sizes:\n          example:\n            large:\n              h: 860\n              w: 1024\n          type: object\n        spot:\n          $ref: \"#/components/schemas/Spot\"\n        status:\n          enum:\n            - approved\n            - unapproved\n          example: approved\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    Collaborator:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        group:\n          enum:\n            - admin\n            - editor\n          example: editor\n          type: string\n        id:\n          example: 4829504\n          type: integer\n        is_admin:\n          example: false\n          type: boolean\n        map:\n          $ref: \"#/components/schemas/Map\"\n        map_id:\n          example: 324894\n          type: integer\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        user_id:\n          example: 649302\n          type: integer\n    CollaboratorEditable:\n      properties:\n        group:\n          enum:\n            - admin\n            - editor\n          example: editor\n          type: string\n    CollaboratorInvitation:\n      properties:\n        accepted:\n          example: true\n          type: boolean\n        created_at:\n          format: date-time\n          type: string\n        email:\n          example: a@b.com\n          type: string\n        group:\n          enum:\n            - admin\n            - editor\n          example: editor\n          type: string\n        id:\n          example: 8696493\n          type: integer\n        invited_by_user:\n          $ref: \"#/components/schemas/User\"\n        map:\n          $ref: \"#/components/schemas/Map\"\n        sent:\n          example: true\n          type: boolean\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    CollaboratorInvitationCreate:\n      properties:\n        emails:\n          example: a@b.com, c@d.com, e@f.com\n          type: string\n        is_admin:\n          example: true\n          type: boolean\n        map_id:\n          example: 34925783\n          type: integer\n        user_ids:\n          example: 5839459, 389423, 89494, 686950\n          type: string\n    Comment:\n      properties:\n        body:\n          example: Nice photo\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        id:\n          example: 29628358\n          type: integer\n        status:\n          enum:\n            - approved\n            - unapproved\n          example: approved\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    CommentEditable:\n      properties:\n        body:\n          example: Nice photo\n          type: string\n    Event:\n      properties:\n        counts:\n          $ref: \"#/components/schemas/EventCounts\"\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: Very special event\n          type: string\n        ends_at:\n          format: date-time\n          type: string\n        id:\n          example: 482959\n          type: integer\n        lat:\n          example: 53.293493\n          type: number\n        lon:\n          example: 12.394328\n          type: number\n        owner_id:\n          example: 82389429\n          type: integer\n        picture_url:\n          example: https://...\n          type: string\n        spot:\n          $ref: \"#/components/schemas/Spot\"\n        starts_at:\n          format: date-time\n          type: string\n        time_zone:\n          example: Berlin\n          type: string\n        title:\n          example: 20th anniversary event\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    EventCounts:\n      properties:\n        attachments:\n          example: 27\n          type: integer\n        comments:\n          example: 284\n          type: integer\n    EventEditable:\n      properties:\n        description:\n          example: Very special event\n          type: string\n        ends_at:\n          format: date-time\n          type: string\n        lat:\n          example: 53.293493\n          type: number\n        lon:\n          example: 12.394328\n          type: number\n        picture:\n          example: \u003cBASE_64_ENCODED_STRING\u003e\n          type: string\n        starts_at:\n          format: date-time\n          type: string\n        time_zone:\n          example: Berlin\n          type: string\n        title:\n          example: 20th anniversary event\n          type: string\n        user_id:\n          example: 703943\n          type: integer\n    Map:\n      properties:\n        counts:\n          $ref: \"#/components/schemas/MapCounts\"\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: A collection of restaurants, cafes, clubs and random spots that I\n            recommend in Berlin\n          type: string\n        id:\n          example: 18234843\n          type: integer\n        map_settings:\n          $ref: \"#/components/schemas/MapSettings\"\n        owner_id:\n          example: 9829358\n          type: integer\n        picture_url:\n          example: https://...\n          type: string\n        title:\n          example: My favourite places in Berlin\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        visibility:\n          enum:\n            - public\n            - link\n            - private\n          example: public\n          type: string\n    MapCounts:\n      properties:\n        attachments:\n          example: 31\n          type: integer\n        comments:\n          example: 234\n          type: integer\n        impressions:\n          example: 234332\n          type: integer\n        respots:\n          example: 24\n          type: integer\n        spots:\n          example: 67\n          type: integer\n        subscriptions:\n          example: 3892\n          type: integer\n    MapEditable:\n      properties:\n        description:\n          example: A collection of restaurants, cafes, clubs and random spots that I\n            recommend in Berlin\n          type: string\n        map_settings:\n          $ref: \"#/components/schemas/MapSettings\"\n        picture:\n          example: \u003cBASE_64_ENCODED_STRING\u003e\n          type: string\n        title:\n          example: My favourite places in Berlin\n          type: string\n        visibility:\n          enum:\n            - public\n            - link\n            - private\n          example: public\n          type: string\n    MapRelation:\n      properties:\n        access:\n          example:\n            - can_administer.map\n            - can_administer.spots\n            - can_administer.events\n            - can_administer.comments\n            - can_administer.attachments\n            - can_administer.collaborators\n          type: string\n        access_group:\n          enum:\n            - visitor\n            - editor\n            - admin\n          example: owner\n          type: string\n        subscribed:\n          example: true\n          type: boolean\n    MapSettings:\n      properties:\n        editor_access:\n          example:\n            - can_administer.map\n            - can_administer.spots\n            - can_administer.events\n            - can_administer.comments\n            - can_administer.attachments\n            - can_administer.collaborators\n          type: string\n        respotting_to_this_map:\n          example: true\n          type: boolean\n        visitor_access:\n          example:\n            - can_administer.map\n            - can_administer.spots\n            - can_administer.events\n            - can_administer.comments\n            - can_administer.attachments\n            - can_administer.collaborators\n          type: string\n    MapWithAuthToken:\n      properties:\n        counts:\n          $ref: \"#/components/schemas/MapCounts\"\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: A collection of restaurants, cafes, clubs and random spots that I\n            recommend in Berlin\n          type: string\n        id:\n          example: 18234843\n          type: integer\n        owner_id:\n          example: 9829358\n          type: integer\n        picture_url:\n          example: https://...\n          type: string\n        title:\n          example: My favourite places in Berlin\n          type: string\n        token:\n          example: 1-x_gqu7eLBe3uKoAGAGXy\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        visibility:\n          enum:\n            - public\n            - link\n            - private\n          example: public\n          type: string\n    MapWithRelation:\n      properties:\n        counts:\n          $ref: \"#/components/schemas/MapCounts\"\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: A collection of restaurants, cafes, clubs and random spots that I\n            recommend in Berlin\n          type: string\n        id:\n          example: 18234843\n          type: integer\n        map_settings:\n          $ref: \"#/components/schemas/MapSettings\"\n        owner_id:\n          example: 9829358\n          type: integer\n        picture_url:\n          example: https://...\n          type: string\n        relation:\n          $ref: \"#/components/schemas/MapRelation\"\n        title:\n          example: My favourite places in Berlin\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        visibility:\n          enum:\n            - public\n            - link\n            - private\n          example: public\n          type: string\n    Respot:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        id:\n          example: 589032\n          type: integer\n        map:\n          $ref: \"#/components/schemas/Map\"\n        map_id:\n          example: 8393450\n          type: integer\n        spot:\n          $ref: \"#/components/schemas/Spot\"\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    Spot:\n      properties:\n        counts:\n          $ref: \"#/components/schemas/SpotCounts\"\n        created_at:\n          format: date-time\n          type: string\n        description:\n          example: Landed here by accident but look how wonderful this place is in the\n            photos attached\n          type: string\n        id:\n          example: 5932234\n          type: integer\n        lat:\n          example: 53.112385\n          type: number\n        lon:\n          example: 10.58349\n          type: number\n        map_id:\n          example: 394805\n          type: integer\n        picture_url:\n          example: https://...\n          type: string\n        status:\n          enum:\n            - approved\n            - unapproved\n          example: approved\n          type: string\n        time_zone:\n          example: Berlin\n          type: string\n        title:\n          example: Beautiful place out in the country\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n    SpotCounts:\n      properties:\n        attachments:\n          example: 4\n          type: integer\n        comments:\n          example: 24\n          type: integer\n        respot:\n          example: 34\n          type: integer\n    SpotEditable:\n      properties:\n        description:\n          example: Landed here by accident but look how wonderful this place is in the\n            photos attached\n          type: string\n        lat:\n          example: 53.112385\n          type: number\n        lon:\n          example: 10.58349\n          type: number\n        picture:\n          example: \u003cBASE_64_ENCODED_STRING\u003e\n          type: string\n        time_zone:\n          example: Berlin\n          type: string\n        title:\n          example: Beautiful place out in the country\n          type: string\n    Subscription:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        id:\n          example: 23950552\n          type: integer\n        map:\n          $ref: \"#/components/schemas/Map\"\n        updated_at:\n          format: date-time\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        user_id:\n          example: 852002\n          type: integer\n    User:\n      properties:\n        about:\n          example: The comedian\n          type: string\n        counts:\n          properties:\n            maps:\n              example: 24\n              type: integer\n        header_picture:\n          example: https://...\n          type: string\n        id:\n          example: 5829035\n          type: integer\n        location:\n          example: Little Rock, Arkansas\n          type: string\n        name:\n          example: Bill Hicks\n          type: string\n        picture_url:\n          example: https://...\n          type: string\n        screen_name:\n          example: billhicks\n          type: string\n        url:\n          example: http://www.billhicks.com\n          type: string\n    UserAuthentication:\n      properties:\n        email:\n          example: a@b.com\n          type: string\n        password:\n          example: ••••••••\n          type: string\n    UserEditable:\n      properties:\n        about:\n          example: The comedian\n          type: string\n        header:\n          example: \u003cBASE_64_ENCODED_STRING\u003e\n          type: string\n        language:\n          example: en\n          type: string\n        location:\n          example: Little Rock, Arkansas\n          type: string\n        name:\n          example: Bill Hicks\n          type: string\n        picture:\n          example: \u003cBASE_64_ENCODED_STRING\u003e\n          type: string\n        screen_name:\n          example: billhicks\n          type: string\n        time_zone:\n          example: Pacific Time (US \u0026 Canada)\n          type: string\n        url:\n          example: http://www.billhicks.com\n          type: string\n    UserFullProfile:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n      properties:\n        auth_token:\n          example: 6g8as82h3kj23h2\n          type: string\n        language:\n          example: en\n          type: string\n        time_zone:\n          example: Pacific Time (US \u0026 Canada)\n          type: string\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/uebermaps.com-2.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/uebermaps.com-2.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}