{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JoinMarket-Org/joinmarket-clientserver"
		},
		"file": {
			"name": "wallet-rpc.yaml",
			"size": 0,
			"path": "docs/api/wallet-rpc.yaml",
			"byteSize": 34509,
			"content": "openapi: 3.0.0\ninfo:\n  description: Joinmarket wallet API\n  version: \"1\"\n  title: Joinmarket wallet API\n  license:\n    name: GPLv3\n    url: https://www.gnu.org/licenses/gpl-3.0.html\nservers:\n- url: https://none\n  description: This API is called locally to a jmwalletd instance, acting as server, for each wallet owner, it is not public.\npaths:\n  /wallet/create:\n    post:\n      summary: create a new wallet\n      operationId: createwallet\n      description: Give a filename (.jmdat must be included) and a password, create the wallet and get back the seedphrase for the newly persisted wallet file. The wallettype variable must be one of \"sw\" - segwit native, \"sw-legacy\" - segwit legacy or \"sw-fb\" - segwit native with fidelity bonds supported, the last of which is the default. Note that this operation cannot be performed when a wallet is already loaded (unlocked).\n      responses:\n        '201':\n          $ref: '#/components/responses/Create-201-OK'\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '409':\n          $ref: '#/components/responses/409-AlreadyExists'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateWalletRequest'\n        description: wallet creation parameters\n  /wallet/{walletname}/unlock:\n    post:\n      summary: decrypt an existing wallet\n      operationId: unlockwallet\n      description: Give the password for the specified (existing) wallet file, and it will be decrypted ready for use. Note that this operation cannot be performed when another wallet is already loaded (unlocked).\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/Unlock-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '409':\n          $ref: '#/components/responses/409-AlreadyExists'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnlockWalletRequest'\n        description: wallet unlocking parameters\n  /wallet/{walletname}/lock:\n    get:\n      security:\n        - bearerAuth: []\n      summary: block access to a currently decrypted wallet\n      operationId: lockwallet\n      description: After this (authenticated) action, the wallet will not be readable or writeable.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/Lock-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n  /wallet/{walletname}/display:\n    get:\n      security:\n        - bearerAuth: []\n      summary: get detailed breakdown of wallet contents by account.\n      operationId: displaywallet\n      description: get detailed breakdown of wallet contents by account.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/Display-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /session:\n    get:\n      security:\n        - {}\n        - bearerAuth: []\n      summary: get current status of backend\n      operationId: session\n      description: get whether a wallet is loaded and whether coinjoin/maker are happening. if an auth token is provided, which is optional, it will be validated.\n      responses:\n        '200':\n          $ref: \"#/components/responses/Session-200-OK\"\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/all:\n    get:\n      summary: get current available wallets\n      operationId: listwallets\n      description: get all wallet filenames in standard location as a list\n      responses:\n        '200':\n          $ref: \"#/components/responses/ListWallets-200-OK\"\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/yieldgen/report:\n    get:\n      summary: get latest report on yield generating activity\n      operationId: yieldgenreport\n      description: \"Get list of coinjoins taken part in as maker (across all wallets).\n      Data returned as list of strings, each one in the same comma separated format as found in yigen-statement.csv.\n      Note that this returns all lines in the file, including the lines that are only present to represent the starting\n      of a bot. Those lines contain the word Connected and can be thus discarded.\n      The header line is also delivered and so can be ignored as per the client requirements.\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/YieldGenReport-200-OK\"\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/address/new/{mixdepth}:\n    get:\n      security:\n        - bearerAuth: []\n      summary: get a fresh address in the given account for depositing funds.\n      operationId: getaddress\n      description: get a fresh address in the given account for depositing funds.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n        - name: mixdepth\n          in: path\n          description: account or mixdepth to source the address from (0..4)\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/GetAddress-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/address/timelock/new/{lockdate}:\n    get:\n      security:\n        - bearerAuth: []\n      summary: get a fresh timelock address\n      operationId: gettimelockaddress\n      description: get a new timelocked address, for depositing funds, to create a fidelity bond, which will automatically be used when the maker is started. specify the date in YYYY-mm as the last path parameter. Note that mixdepth is not specified as timelock addresses are always in mixdepth(account) zero.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n            example: wallet.jmdat\n        - name: lockdate\n          in: path\n          description: month whose first day will be the end of the timelock, for this address.\n          required: true\n          schema:\n            type: string # note- not a standard date-time string for OpenAPI, so not marked as such\n            example: \"2021-09\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GetAddress-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/utxos:\n    get:\n      security:\n        - bearerAuth: []\n      summary: list details of all utxos currently in the wallet.\n      operationId: listutxos\n      description: list details of all utxos currently in the wallet.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n            example: \"2021-09\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/ListUtxos-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/taker/direct-send:\n    post:\n      security:\n        - bearerAuth: []\n      summary: create and broadcast a transaction (without coinjoin)\n      operationId: directsend\n      description: create and broadcast a transaction (without coinjoin)\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DirectSendRequest'\n        description: transaction creation parameters\n      responses:\n        '200':\n          $ref: \"#/components/responses/DirectSend-200-Accepted\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '409':\n          $ref: '#/components/responses/409-TransactionFailed'\n  /wallet/{walletname}/maker/start:\n    post:\n      security:\n        - bearerAuth: []\n      summary: Start the yield generator service.\n      operationId: startmaker\n      description: Start the yield generator service with the configuration settings specified in the POST request. Note that if fidelity bonds are enabled in the wallet, and a timelock address has been generated, and then funded, the fidelity bond will automatically be advertised without any specific configuration in this request. Note that if the wallet does not have confirmed coins, or another taker or maker coinjoin service is already running, the maker will not start.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n            example: wallet.jmdat\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StartMakerRequest'\n        description: yield generator config parameters\n      responses:\n        # note we use a default response, no data returned:\n        '202':\n          $ref: \"#/components/responses/202-Accepted\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '409':\n          $ref: '#/components/responses/409-No-Coins'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\n  /wallet/{walletname}/maker/stop:\n    get:\n      security:\n        - bearerAuth: []\n      summary: stop the yield generator service\n      operationId: stopmaker\n      description: stop the yield generator service\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '202':\n          $ref: \"#/components/responses/202-Accepted\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: \"#/components/responses/401-Unauthorized\"\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/taker/coinjoin:\n    post:\n      security:\n        - bearerAuth: []\n      summary: initiate a coinjoin as taker\n      operationId: docoinjoin\n      description: initiate a coinjoin as taker\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DoCoinjoinRequest'\n        description: taker side coinjoin parameters\n      responses:\n        '202':\n          $ref: \"#/components/responses/202-Accepted\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '409':\n          $ref: '#/components/responses/409-NoConfig'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\n  /wallet/{walletname}/taker/schedule:\n    post:\n      security:\n        - bearerAuth: []\n      summary: create and run a schedule of transactions\n      operationId: runschedule\n      description: Creates and then starts a schedule of transactions.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RunScheduleRequest'\n        description: taker side schedule parameters\n      responses:\n        '202':\n          $ref: \"#/components/responses/RunSchedule-202-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '409':\n          $ref: '#/components/responses/409-NoConfig'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\n    get:\n      security:\n        - bearerAuth: []\n      summary: get the schedule that is currently running\n      operationId: getschedule\n      description: Get the current transaction schedule if one is running.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of the wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/responses/GetSchedule-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: \"#/components/responses/401-Unauthorized\"\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/taker/stop:\n    get:\n      security:\n        - bearerAuth: []\n      summary: stop a running coinjoin attempt\n      operationId: stopcoinjoin\n      description: stop a running coinjoin attempt\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      responses:\n        '202':\n          $ref: \"#/components/responses/202-Accepted\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: \"#/components/responses/401-Unauthorized\"\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n  /wallet/{walletname}/configset:\n    post:\n      security:\n        - bearerAuth: []\n      summary: change a config variable\n      operationId: configsetting\n      description: change a config variable (for the duration of this backend daemon process instance)\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigSetRequest'\n        description: config editing parameters\n      responses:\n        '200':\n          $ref: \"#/components/responses/ConfigSet-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-Unauthorized'\n        '409':\n          $ref: '#/components/responses/409-NoConfig'\n  /wallet/{walletname}/configget:\n    post:\n      security:\n        - bearerAuth: []\n      summary: get the value of a specific config setting\n      operationId: configget\n      description: Get the value of a specific config setting. Note values are always returned as string.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigGetRequest'\n      responses:\n        '200':\n          $ref: \"#/components/responses/ConfigGet-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: \"#/components/responses/401-Unauthorized\"\n        '409':\n          $ref: '#/components/responses/409-NoConfig'\n  /wallet/{walletname}/freeze:\n    post:\n      security:\n        - bearerAuth: []\n      summary: freeze or unfreeze an individual utxo for spending\n      operationId: freeze\n      description: freeze or unfreeze an individual utxo for spending\n      parameters:\n        - name: walletname\n          in: path\n          description: name of wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FreezeRequest'\n        description: utxo string and freeze toggle as boolean\n      responses:\n        '200':\n          $ref: \"#/components/responses/Freeze-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n  /wallet/{walletname}/getseed:\n    get:\n      security:\n        - bearerAuth: []\n      summary: get the mnemonic recovery phrase with the optional passphrase\n      operationId: getseed\n      description: Get the mnemonic recovery phrase with the optional passphrase. Not the response is a sentence with few line breaks.\n      parameters:\n        - name: walletname\n          in: path\n          description: name of the wallet including .jmdat\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetSeedResponse'\n      responses:\n        '200':\n          $ref: \"#/components/responses/GetSeed-200-OK\"\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: \"#/components/responses/401-Unauthorized\"\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    FreezeRequest:\n      type: object\n      required:\n        - utxo-string\n        - freeze\n      properties:\n        utxo-string:\n          type: string\n        freeze:\n          type: boolean\n    ConfigSetRequest:\n      type: object\n      required:\n        - section\n        - field\n        - value\n      properties:\n        section:\n          type: string\n        field:\n          type: string\n        value:\n          type: string\n    ConfigGetRequest:\n      type: object\n      required:\n        - section\n        - field\n      properties:\n        section:\n          type: string\n        field:\n          type: string\n    ConfigGetResponse:\n      type: object\n      required:\n        - configvalue\n      properties:\n        configvalue:\n          type: string\n    ConfigSetResponse:\n      type: object\n    FreezeResponse:\n      type: object\n    DoCoinjoinRequest:\n      type: object\n      required:\n        - mixdepth\n        - amount_sats\n        - counterparties\n        - destination\n      properties:\n        mixdepth:\n          type: integer\n          example: 0\n        amount_sats:\n          type: integer\n          example: 100000000\n        counterparties:\n          type: integer\n          example: 9\n        destination:\n          type: string\n          example: \"bcrt1qujp2x2fv437493sm25gfjycns7d39exjnpptzw\"\n    RunScheduleRequest:\n      type: object\n      required:\n        - destinations\n      properties:\n        destination_addresses:\n          type: array\n          items:\n            type: string\n            example: \"bcrt1qujp2x2fv437493sm25gfjycns7d39exjnpptzw\"\n        tumbler_options:\n          type: object\n          properties:\n            addrcount:\n              type: integer\n            minmakercount:\n              type: integer\n            makercountrange:\n              type: array\n              items:\n                type: number\n                minItems: 2\n                maxItems: 2\n              example: [9, 1]\n            mixdepthcount:\n              type: integer\n            mintxcount:\n              type: integer\n            txcountparams:\n              type: array\n              items:\n                type: number\n                minItems: 2\n                maxItems: 2\n              example: [2, 1]\n            timelambda:\n              type: number\n            stage1_timelambda_increase:\n              type: number\n            liquiditywait:\n              type: integer\n            waittime:\n              type: number\n            mixdepthsrc:\n              type: integer\n            restart:\n              type: boolean\n            schedulefile:\n              type: string\n            mincjamount:\n              type: integer\n            amtmixdepths:\n              type: integer\n            rounding_chance:\n              type: number\n            rounding_sigfig_weights:\n              type: array\n              items:\n                type: number\n                minItems: 5\n                maxItems: 5\n              example: [55, 15, 25, 65, 40]\n    StartMakerRequest:\n      type: object\n      required:\n        - txfee\n        - cjfee_a\n        - cjfee_r\n        - ordertype\n        - minsize\n      properties:\n        txfee:\n          type: string\n          example: \"0\"\n        cjfee_a:\n          type: string\n          example: \"5000\"\n        cjfee_r:\n          type: string\n          example: \"0.00004\"\n        ordertype:\n          type: string\n          example: \"reloffer\"\n        minsize:\n          type: string\n          example: \"8000000\"\n    GetAddressResponse:\n      type: string\n      example: \"bcrt1qujp2x2fv437493sm25gfjycns7d39exjnpptzw\"\n    ListWalletsResponse:\n      type: object\n      properties:\n        wallets:\n          type: array\n          items:\n            type: string\n            example: wallet.jmdat\n    YieldGenReportResponse:\n      type: array\n      items:\n        type: string\n        example: \"2021/10/26 16:40:21,133986791,1,200000000,2680,2680,0.08,\"\n    SessionResponse:\n      type: object\n      required:\n        - session\n        - maker_running\n        - coinjoin_in_process\n        - wallet_name\n      properties:\n        session:\n          type: boolean\n        maker_running:\n          type: boolean\n        coinjoin_in_process:\n          type: boolean\n        wallet_name:\n          type: string\n          example: wallet.jmdat\n    ListUtxosResponse:\n      type: object\n      properties:\n        utxos: \n          type: array\n          items: \n            type: object\n            properties: \n              utxo: \n                type: string\n              address: \n                type: string\n              path:\n                type: string\n              label:\n                type: string\n              value: \n                type: integer\n              tries: \n                type: integer\n              tries_remaining: \n                type: integer\n              external: \n                type: boolean\n              mixdepth: \n                type: integer\n              confirmations: \n                type: integer\n              frozen: \n                type: boolean\n    WalletDisplayResponse:\n      type: object\n      required:\n        - walletname\n        - walletinfo\n      properties: \n        walletname: \n          type: string\n        walletinfo: \n          type: object\n          required:\n            - wallet_name\n            - total_balance\n            - accounts\n          properties: \n            wallet_name: \n              type: string\n            total_balance: \n              type: string\n            available_balance:\n              type: string\n            accounts: \n              type: array\n              items: \n                type: object\n                properties: \n                  account: \n                    type: string\n                  account_balance: \n                    type: string\n                  available_balance:\n                    type: string\n                  branches: \n                    type: array\n                    items: \n                      type: object\n                      properties: \n                        branch: \n                          type: string\n                        balance: \n                          type: string\n                        available_balance:\n                          type: string\n                        entries: \n                          type: array\n                          items: \n                            type: object\n                            properties: \n                              hd_path: \n                                type: string\n                              address: \n                                type: string\n                              amount: \n                                type: string\n                              available_balance:\n                                type: string\n                              status:\n                                type: string\n                              label:\n                                type: string\n                              extradata:\n                                type: string\n\n    CreateWalletResponse:\n      type: object\n      required:\n        - walletname\n        - token\n        - seedphrase\n      properties:\n        walletname:\n          type: string\n          example: wallet.jmdat\n        token:\n          type: string\n          format: byte\n        seedphrase:\n          type: string\n    UnlockWalletResponse:\n      type: object\n      required:\n        - walletname\n        - token\n      properties:\n        walletname:\n          type: string\n          example: wallet.jmdat\n        token:\n          type: string\n          format: byte\n    DirectSendResponse:\n      type: object\n      required:\n        - txinfo\n      properties:\n        txinfo:\n          type: object\n          properties:\n            hex:\n              type: string\n            inputs:\n              type: array\n              items:\n                type: object\n                properties:\n                  outpoint:\n                    type: string\n                  scriptSig:\n                    type: string\n                  nSequence:\n                    type: number\n                  witness:\n                    type: string\n            outputs:\n              type: array\n              items:\n                type: object\n                properties:\n                  value_sats:\n                    type: number\n                  scriptPubKey:\n                    type: string\n                  address:\n                    type: string\n            txid:\n              type: string\n            nLockTime:\n              type: number\n            nVersion:\n              type: number\n    GetSeedResponse:\n      type: object\n      required:\n        - seedphrase\n      properties:\n        seedphrase:\n          type: string\n    GetScheduleResponse:\n      type: object\n      required:\n        - schedule\n      properties:\n        schedule:\n          type: array\n          items:\n            oneOf:\n              - type: string\n              - type: integer\n    LockWalletResponse:\n      type: object\n      required:\n        - walletname\n        - already_locked\n      properties:\n        walletname:\n          type: string\n          example: wallet.jmdat\n        already_locked:\n          type: boolean\n          example: false\n    CreateWalletRequest:\n      type: object\n      required:\n        - walletname\n        - password\n        - wallettype\n      properties:\n        walletname:\n          type: string\n          example: wallet.jmdat\n        password:\n          type: string\n          format: password\n          example: hunter2\n        wallettype:\n          type: string\n          example: \"sw-fb\"\n    UnlockWalletRequest:\n      type: object\n      required:\n        - password\n      properties:\n        password:\n          type: string\n          format: password\n          example: hunter2\n    DirectSendRequest:\n      type: object\n      required:\n        - mixdepth\n        - amount_sats\n        - destination\n      properties:\n        mixdepth:\n          type: integer\n          example: 0\n        amount_sats:\n          type: integer\n          example: 100000000\n        destination:\n          type: string\n          example: bcrt1qu7k4dppungsqp95nwc7ansqs9m0z95h72j9mze\n    ErrorMessage:\n        type: object\n        properties:\n          message:\n            type: string\n\n  responses:\n    # Success responses\n    DirectSend-200-Accepted:\n      description: \"transaction broadcast OK.\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DirectSendResponse\"\n    ListUtxos-200-OK:\n      description: \"successful retrieval of utxo list\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListUtxosResponse\"\n    ConfigGet-200-OK:\n      description: \"successful retrieval of config value\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ConfigGetResponse\"\n    ConfigSet-200-OK:\n      description: \"successful update of config value\"\n      content:\n        application/json:\n           schema:\n             $ref: \"#/components/schemas/ConfigSetResponse\"\n    GetAddress-200-OK:\n      description: \"successful retrieval of new address\"\n      content:\n        application/json:\n           schema:\n             $ref: \"#/components/schemas/GetAddressResponse\"\n    ListWallets-200-OK:\n      description: \"successful response to listwallets\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListWalletsResponse\"\n    Session-200-OK:\n      description: \"successful heartbeat response\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SessionResponse\"\n    Create-201-OK:\n      description: \"wallet created successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateWalletResponse\"\n    Unlock-200-OK:\n      description: \"wallet unlocked successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UnlockWalletResponse\"\n    Display-200-OK:\n      description: \"wallet display contents retrieved successfully.\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/WalletDisplayResponse\"\n    Lock-200-OK:\n      description: \"wallet locked successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LockWalletResponse\"\n    GetSeed-200-OK:\n      description: \"seedphrase retrieved successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetSeedResponse\"\n    Freeze-200-OK:\n      description: \"freeze or unfreeze utxo action completed successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/FreezeResponse\"\n    RunSchedule-202-OK:\n      description: \"schedule started successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetScheduleResponse\"\n    GetSchedule-200-OK:\n      description: \"schedule retrieved successfully\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetScheduleResponse\"\n    YieldGenReport-200-OK:\n      description: \"get list of coinjoins taken part in as maker (across all wallets)\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/YieldGenReportResponse\"\n    202-Accepted:\n      description: The request has been submitted successfully for processing, but the processing has not been completed. \n    # Clientside error responses\n    400-BadRequest:\n      description: Bad request format.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    401-Unauthorized:\n      description: Unable to authorise the credentials that were supplied.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    409-AlreadyExists:\n      description: Unable to complete request because object already exists.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    409-NoConfig:\n      description: Unable to complete request because config settings are missing.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    409-TransactionFailed:\n      description: Transaction failed to broadcast.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    409-No-Coins:\n      description: Maker could not start without confirmed balance.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    404-NotFound:\n      description: Item not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n    # Serverside error responses\n    503-ServiceUnavailable:\n      description: The server is not ready to process the request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorMessage'\n",
			"canonicalURL": "/github.com/JoinMarket-Org/joinmarket-clientserver@bbd501962087f682f81db90b332b78c8f1a18f1a/-/blob/docs/api/wallet-rpc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JoinMarket-Org/joinmarket-clientserver/blob/bbd501962087f682f81db90b332b78c8f1a18f1a/docs/api/wallet-rpc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}