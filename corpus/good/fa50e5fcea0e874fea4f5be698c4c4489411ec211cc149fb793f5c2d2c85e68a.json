{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "nifid.yml",
			"size": 0,
			"path": "contracts/priv/nifid.yml",
			"byteSize": 10915,
			"content": "openapi: 3.0.0\ninfo:\n  title: nifid\n  version: 1.0.0\nservers:\n  - url: /api/v2private\npaths:\n  /broker/subs:\n    post:\n      summary: creates a Subscription\n      operationId: createSubscription\n      tags:\n        - Subscriptions\n      requestBody:\n        $ref: '#/components/requestBodies/SubscriptionParams'\n      responses:\n        '201':\n          description: Subscription created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    get:\n      summary: get all Subscription records in org\n      operationId: getAllSubscriptions\n      tags:\n        - Subscriptions\n      responses:\n        '200':\n          description: returns all Subscription records in org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriptions'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/broker/subs/{id}':\n    put:\n      summary: update a single Subscription by its ID\n      operationId: putSubscription\n      tags:\n        - Subscriptions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        $ref: '#/components/requestBodies/SubscriptionParams'\n      responses:\n        '200':\n          description: returns the Subscription record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    delete:\n      summary: deletes a single Subscription by its ID\n      operationId: deleteSubscription\n      tags:\n        - Subscriptions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '404':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    get:\n      summary: get single Subscription by its ID\n      operationId: getSubscription\n      tags:\n        - Subscriptions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the Subscription record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/broker/subs/{id}/status':\n    get:\n      summary: get single Subscription status by its ID\n      operationId: getSubscriptionStatus\n      tags:\n        - Subscriptions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the Subscription status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    put:\n      summary: update the run status of a Subscription by its ID\n      operationId: putSubscriptionStatus\n      tags:\n        - Subscriptions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        $ref: '#/components/requestBodies/SubscriptionStatus'\n      responses:\n        '200':\n          description: returns the Subscription status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriptionStatus'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  requestBodies:\n    SubscriptionParams:\n      description: Subscription record\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SubscriptionParams'\n    SubscriptionStatus:\n      description: Subscription run status\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SubscriptionStatus'\n  schemas:\n    JsonSpec:\n      type: object\n      properties:\n        path:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n    StringObjectParams:\n      type: object\n      properties:\n        pattern:\n          type: string\n        name:\n          type: string\n    SubscriptionParams:\n      properties:\n        protocol:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        orgID:\n          type: string\n        brokerHost:\n          type: string\n        brokerPort:\n          type: number\n        brokerUsername:\n          type: string\n        brokerPassword:\n          type: string\n        brokerCert:\n          type: string\n        brokerKey:\n          type: string\n        topic:\n          type: string\n        dataFormat:\n          type: string\n        jsonMeasurementKey:\n          type: object\n          properties:\n            path:\n              type: string\n            name:\n              type: string\n            type:\n              type: string\n        jsonFieldKeys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JsonSpec'\n        jsonTagKeys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JsonSpec'\n        jsonTimestamp:\n          type: object\n          properties:\n            path:\n              type: string\n            name:\n              type: string\n            type:\n              type: string\n        stringMeasurement:\n          type: object\n          properties:\n            pattern:\n              type: string\n        stringFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/StringObjectParams'\n        stringTags:\n          type: array\n          items:\n            $ref: '#/components/schemas/StringObjectParams'\n        stringTimestamp:\n          type: object\n          properties:\n            pattern:\n              type: string\n        bucket:\n          type: string\n        qos:\n          type: number\n        isActive:\n          type: boolean\n          default: true\n    Subscription:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        protocol:\n          type: string\n        orgID:\n          type: string\n        processGroupId:\n          type: string\n        brokerHost:\n          type: string\n        brokerPort:\n          type: number\n        brokerUsername:\n          type: string\n        topic:\n          type: string\n        dataFormat:\n          type: string\n        jsonMeasurementKey:\n          type: object\n          properties:\n            path:\n              type: string\n            name:\n              type: string\n            type:\n              type: string\n        jsonFieldKeys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JsonSpec'\n        jsonTagKeys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JsonSpec'\n        jsonTimestamp:\n          type: object\n          properties:\n            path:\n              type: string\n            name:\n              type: string\n            type:\n              type: string\n        stringMeasurement:\n          type: object\n          properties:\n            pattern:\n              type: string\n        stringFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/StringObjectParams'\n        stringTags:\n          type: array\n          items:\n            $ref: '#/components/schemas/StringObjectParams'\n        stringTimestamp:\n          type: object\n          properties:\n            pattern:\n              type: string\n        status:\n          type: string\n        bucket:\n          type: string\n        qos:\n          type: number\n        isActive:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        tokenID:\n          type: string\n        token:\n          type: string\n    SubscriptionArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Subscription'\n    Subscriptions:\n      properties:\n        subscriptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Subscription'\n    SubscriptionStatus:\n      properties:\n        isActive:\n          type: boolean\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n  responses:\n    NoContent:\n      description: No content\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/influxdata/openapi@a57b04ad0d88b646a1a04bd90a03477ca945fc3b/-/blob/contracts/priv/nifid.yml",
			"externalURLs": [
				{
					"url": "https://github.com/influxdata/openapi/blob/a57b04ad0d88b646a1a04bd90a03477ca945fc3b/contracts/priv/nifid.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}