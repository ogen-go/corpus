{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/getzoop/api-docs"
		},
		"file": {
			"name": "2FA.yaml",
			"size": 0,
			"path": "2FA/2FA.yaml",
			"byteSize": 65662,
			"content": "openapi: 3.0.2\ninfo:\n  title: 2FA\n  version: \"1.1\"\n\nsecurity:\n - basicAuth: []\n\ntags:\n - name: Autenticação\n   description: Gerenciar autenticação  \n - name: Usuário\n   description: Gerenciar dados dos usuários   \n\nservers: [\n    {\n      \"url\": \"https://2fa-sandbox.zoop.ws\",\n      \"description\": \"Sandbox\"\n    },    \n    {\n      \"url\": \"https://2fa.zoop.ws\",\n      \"description\": \"Produção\"\n    }\n    ]\n    \npaths:\n  \"/v1/api/company/login\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n      summary: Realizar login\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faLoginRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faLoginResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"No Company was found with this combination of Token and Secret Key\"\n  \"/v1/api/company/applications\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Obter dados da empresa\n      tags:\n        - Autenticação\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faCompanyResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n  \"/v1/api/company\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Obter aplicativos cadastrados na empresa\n      tags:\n        - Autenticação\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faApplicationsResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n  \"/v1/api/company/renew\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Renovar o token do usuário\n      tags:\n        - Autenticação\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faCompanyResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n  \"/v1/api/user/cellphone/session\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Solicitar sessão de usuário por SMS\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSessionResponse'\n          description: OK\n  \"/v1/api/user/cellphone/validate\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Validar o código enviado por SMS para o celular do usuário\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faCellPhoneValidateResponse'\n          description: OK\n  \"/v1/api/user/totp\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Solicitar sessão de usuário por TOTP\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionTOTPRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSessionTOTPResponse'\n        '401':\n          description:  Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Por SMS\n                properties:\n                  status:\n                    type: string\n                    example: 401\n                  response_code:\n                    type: string\n                    example: -99\n                  Message:\n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Por SMS\n                properties:\n                  status:\n                    type: string\n                    example: 412\n                  response_code:\n                    type: string\n                    example: -99\n                  Message:\n                    type: string\n                    example: \"Application Token incorrect number  // Application Token not found  // \n                    Unique Identifier not found // UniqueIdentifier min length X  // User not exists.\"\n  \"/v1/api/user/totp/validate\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Validar o código TOTP \n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faTOTPValidateResquest'\n      responses:\n        '200': \n          description: OK \n          content: \n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faTOTPValidateResponse'\n        '401': \n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Por SMS\n                properties:\n                  status:\n                    type: string\n                    example: 401\n                  response_code:\n                    type: string\n                    example: -99\n                  Message:\n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Por SMS\n                properties:\n                  status:\n                    type: string\n                    example: 412\n                  response_code:\n                    type: string\n                    example: -99\n                  Message:\n                    type: string\n                    example: \"Application Token incorrect number  // Application Token not found  // \n                    Unique Identifier not found // UniqueIdentifier min length X  // User not exists.\"\n  \"/v1/api/user/email/session\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Solicitar sessão de usuário por email\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSessionResponse'\n          description: OK\n  \"/v1/api/user/email/validate\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Validar o código enviado para o e-mail do usuário\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faEmailValidateResponse'\n          description: OK\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession401Response'\n          description: OK\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession500Response'\n          description: OK\n  \"/v1/api/user/session/validate\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Validar uma sessão de usuário criada por SMS ou E-mail\n      tags:\n        - Autenticação\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/2faSessionValidateRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSessionValidateResponse'\n          description: OK\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession401Response'\n          description: OK\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession500Response'\n          description: OK\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n        - $ref: \"#/components/parameters/UserSessionTokenID\"\n      summary: Verificar se a sessão foi validada\n      tags:\n        - Autenticação\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSessionValidateResponse'\n          description: OK\n        '401':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession401Response'\n          description: Unauthorized\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession500Response'\n          description: Internal Server Error\n        '503':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faSession503Response'\n          description: Service Unavailable\n\n  \"/v1/api/api/user\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Registrar e-mail e celular para um usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faEmailCellRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faEmailCellResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token incorrect number\"\n                              \"Application Token not found\"\n                              \"CellPhone not found\"\n                              \"CellPhone not numeric\"\n                              \"CellPhone incorrect number\"\n                              \"Email incorrect length\"\n                              \"Email not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n        - $ref: \"#/components/parameters/ApplicationTokenID\"\n        - $ref: \"#/components/parameters/UniqueIdentifierID\"\n      summary: Renovar o token do usuário\n      tags:\n        - Usuário\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faEmailCellResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n  \"/v1/api/api/user/cellphone\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Registrar celular para um usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faCellRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faCellResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n        - $ref: \"#/components/parameters/ApplicationTokenID\"\n        - $ref: \"#/components/parameters/UniqueIdentifierID\"\n      summary: Obter dados de celular de usuário\n      tags:\n        - Usuário\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faCellResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Atualizar celular de usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faCellRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faCellResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n  \"/v1/api/api/user/change/cellphone\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Atualizar celular validado de usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faCellRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faCellChangeResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n  \"/v1/api/api/user/email\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Registrar dados de usuário para autenticação por e-mail\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faEmailRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faEmailResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token incorrect number\"\n                              \"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n        - $ref: \"#/components/parameters/ApplicationTokenID\"\n        - $ref: \"#/components/parameters/UniqueIdentifierID\"\n      summary: Obter dados de e-mail do usuário\n      tags:\n        - Usuário\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/2faEmailResponse'\n          description: OK\n        '401':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Atualizar e-mail de usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faEmailRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faEmailResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token incorrect number\"\n                              \"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n  \"/v1/api/api/user/change/email\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/XApiKey\"\n        - $ref: \"#/components/parameters/XAuthToken\"\n      summary: Atualizar e-mail validado de usuário\n      tags:\n        - Usuário\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n               $ref: '#/components/schemas/2faEmailRequest'\n      responses:\n        '200':\n          description: OK - A chave de endereçamento foi incluída com sucesso e está pronta para o uso\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/2faCellChangeResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: \"Token is expired, Token invalid or incorrect secret, Token invalid\"\n                 \n        '412':\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                   message: \n                    type: string\n                    example: '\"Application Token not found\"\n                              \"Unique Identifier min length X\"\n                              \"Unique Identifier not found\"\n                              \"User already exists\"'\n\n\n\ncomponents:\n  securitySchemes:\n     basicAuth:\n       type: http\n       scheme: basic \n  parameters:\n      XApiKey:\n        name: x-api-key\n        in: header\n        description: VErificar origem desse header \n        required: true\n        schema:\n          type: string\n      XAuthToken:\n        name: X-Auth-Token\n        in: header\n        description: Token de leitura do 2FA\n        required: true\n        schema:\n          type: string\n      XSessionToken:\n        name: X-Session-Token\n        in: header\n        description: Token de sessão do 2FA\n        required: true\n        schema:\n          type: string\n      UserSessionTokenID:\n        name: UserSessionToken\n        in: query\n        description: Token de sessão do usuário\n        required: true\n        schema:\n          type: string\n      ApplicationTokenID:\n        name: ApplicationToken\n        in: query\n        description: \"Token da Aplicação. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        required: true\n        schema:\n          type: string\n      UniqueIdentifierID:\n        name: UniqueIdentifier\n        in: query\n        description: \"Código de identificação único do usuário. Exemplo: 12345678910\"\n        required: true\n        schema:\n          type: string\n\n\n\n      marketplaceID:\n        name: marketplace_id\n        in: path\n        description: ID do marketplace\n        required: true\n        schema:\n          type: string\n      holderID:\n        name: holder_id\n        in: path\n        description: ID do holder\n        required: true\n        schema:\n          type: string\n      referenceID:\n        name: reference_id\n        in: path\n        description: Id de referencia informado na solicitação da TED\n        required: true\n        schema:\n          type: string\n      externalTransferID:\n        name: externalTransfer_id\n        in: path\n        description: Id gerado da transferência quando bem sucedida\n        required: true\n        schema:\n          type: string\n      barcodeID:\n        name: barcode\n        in: path\n        description: Identificacao do barcode\n        required: true\n        schema:\n          type: string\n      accountID:\n        name: account_id\n        in: path\n        description: ID da conta digital \n        required: true\n        schema:\n          type: string\n      paymentID:\n        name: payment_id\n        in: path\n        description: Id do pagamento que será confirmado \n        required: true\n        schema:\n          type: string\n      transactionID:\n        name: transaction_id\n        in: path\n        description: Representa o id da transação PIX de crédito que sofrerá a devolução \n        required: true\n        schema:\n          type: string\n      refundID:\n        name: refund_id\n        in: path\n        description: Id da devolução \n        required: true\n        schema:\n          type: string\n      p2p_transferID:\n        name: p2p_transfer_id\n        in: path\n        description: ID da transferência entre contas \n        required: true\n        schema:\n          type: string\n      phoneID:\n        name: phone_id\n        in: path\n        description: ID do telefone \n        required: true\n        schema:\n          type: string\n      type:\n        name: type_id\n        in: query\n        description: Tipo do arquivo a ser enviado\n        required: true\n        schema:\n          type: string\n          enum:\n            - SELFIE\n            - RG_FRENTE\n            - RG_VERSO\n            - CNH_FRENTE\n            - CNH-VERSO\n            - CCMEI\n            - PAGINA_CONTRATO_SOCIAL\n            - PAGINA_ESTATUTO_SOCIAL\n            - PAGINA_ATA_ELEICAO_DIRETORES\n            - PAGINA_PROCURACAO\n      documentID:\n        name: documents_id\n        in: path\n        description: ID do documento\n        required: true\n        schema:\n          type: string\n      adressID:\n        name: address_id\n        in: path\n        description: ID do endereço\n        required: true\n        schema:\n          type: string\n      pageID:\n        name: page_id\n        in: query\n        description: indica a página que será exibida\n        schema:\n          type: number\n          example: 0\n      sizeID:\n        name: size_id\n        in: query\n        description: Quantidade de registros a ser retornado por página\n        schema:\n          type: number\n          example: 20\n      offsetID:\n        name: offset\n        in: query\n        description: Determina o ponto de inicio dos registros retornados\n        schema:\n          type: number\n          example: 0\n      limitID:\n        name: limit\n        in: query\n        description: Quantidade máxima de itens por página (\u003c100)\n        schema:\n          type: number\n          example: 0\n      typeOpID:\n        name: type\n        in: query\n        description: \"Retorna lançamentos onde o tipo da operação seja igual a um dos valores informado. O valor pode ser uma string ou uma lista de valores concatenados por ', '. (ex: charge, charge_refunded, transfer, transfer_refunded, deposit, deposit_refunded, adjustment)\"\n        required: true\n        schema:\n          type: string\n          enum:\n            - charge\n            - charge_refunded\n            - transfer\n            - transfer_refunded\n            - deposit\n            - deposit_refunded\n            - adjustment\n      entryID:\n        name: entry_id\n        in: path\n        description: Id da reivindicação\n        required: true\n        schema:\n          type: number\n          example: 0\n      claimID:\n        name: claim_id\n        in: path\n        description: Id da chave de endereçamento\n        required: true\n        schema:\n          type: number\n          example: 0\n      created_date_rangeID:\n        name: created_date_range\n        in: query\n        description: Retorna lançamentos onde a data for igual o valor informado. O valor pode ser uma string com um horário em UTC timestamp ou ISO (YYYY-DD-MM HH:MM:SS)\n        schema:\n          type: string\n          example: \"2020-10-01 15:34:00\"\n      created_date_rangeGTID:\n        name: created_date_range[gt]\n        in: query\n        description: Retorna lançamentos onde a data for maior o valor informado\n        schema:\n          type: string\n          example: \"2020-10-01 15:34:00\"\n      created_date_rangeLTID:\n        name: created_date_range[lt]\n        in: query\n        description: Retorna lançamentos onde a data for menor o valor informado\n        schema:\n          type: string\n          example: \"2020-10-01 15:34:00\"\n      created_date_rangeGTEID:\n        name: created_date_range[gte]\n        in: query\n        description: Retorna lançamentos onde a data for maior ou igual o valor informado\n        schema:\n          type: string\n          example: \"2020-10-01 15:34:00\"\n      created_date_rangeLTEID:\n        name: created_date_range[lte]\n        in: query\n        description: Retorna lançamentos onde a data for menor ou igual valor informado\n        schema:\n          type: string\n          example: \"2020-10-01 15:34:00\"\n\n  schemas:\n    2faLoginRequest:\n      type: object\n      properties:\n        CompanyToken:\n          type: string\n          description: Token da empresa   \n        SecretKey:\n          type: string\n          description: Senha\n    2faCompanyResponse:\n      type: object\n      properties:\n        CompanyName:\n          type: string\n          example: \"My Company Name\"\n        CompanyToken:\n          type: string\n          example: \"My Company Token\"\n        CompanyStatus:\n          type: string\n          example: \"A\"\n        Token-Expiration:\n          type: string\n          example: \"2020-02-15T06:30:27.000000Z\"\n    2faApplicationsResponse:\n      type: object\n      properties:\n        Applications:\n          type: array\n          items:\n            type: object\n            properties:\n              Name:\n                type: string\n                example: \"Empresa XYZ\"\n              ApplicationToken:\n                type: string\n                example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n              SMSProviderId:\n                type: string\n                example: \"1\"\n              PasswordLength:\n                type: string\n                example: \"6\"\n              SessionDurationMinutes:\n                type: string\n                example: \"2\"\n              AttemptsIntervalInMinutes:\n                type: string\n                example: \"1\"\n              MaxAttempts:\n                type: string\n                example: \"3\"\n              SMSTextUserTemplate:\n                type: string\n                example: \"SENHA PARA CONFIRMAR SEU TELEFONE CELULAR: [PASSWORD]\"\n              SMSTextUserSessionTemplate:\n                type: string\n                example: \"SENHA PARA CONFIRMAR SUA OPERACAO: [PASSWORD]\"\n              Status:\n                type: string\n                example: \"A\"\n              Deleted:\n                type: boolean\n                example: false\n              LastAccessDate:\n                type: string\n                example: \"2020-01-30T18:37:52.000000Z\"\n              CreationDate:\n                type: string\n                example: \"2020-01-30T18:37:52.000000Z\"\n    2faLoginResponse:\n      type: object\n      properties:\n        X-Auth-Token:\n          type: string\n          example: \"My X-Auth-Token\"\n        X-Auth-Token-Reading:\n          type: string\n          example: \"Partner X-Auth-Token-Reading\"\n        Token-Expiration:\n          type: string\n          example: \"2020-02-12T02:53:58.781091Z\"\n    2faSessionRequest:\n      type: object\n      title: Por SMS\n      properties:\n        UserToken:\n          type: string\n          description: \"Token do usuário. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UserPassword:\n          type: string\n          description: \"Senha do usuário. Exemplo: 123456\"\n          example: \"123456\"\n    2faSessionResponse:\n      type: object\n      properties:\n        UserSessionToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        OneTimePassword:\n          type: boolean\n          example: \"false\"\n        ExpirationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n        CreationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n    2faSessionTOTPRequest:\n      type: object\n      properties:\n        UserSessionToken:\n          type: string\n          description: \"Token de sessão validado\"  \n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        UserToken:\n          type: string\n          description: \"Token do usuário. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        KeyPublic:\n          type: string\n          description: \"Chave do tipo RSA publica 2048\"\n          example: \"RSA Key Public 2048\"\n    2faSessionTOTPResponse:\n      type: object\n      properties:\n        UserToken:\n          type: string\n          description: \"Token de sessão validado\"  \n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        PasswordLength:\n          type: number\n          example: 6\n        SeedRSA:\n          type: string\n          example: \"Seed RSA Public Key\"\n    2faTOTPValidateResquest:\n      type: object\n      properties:\n        UserSessionToken:\n          type: string\n          description: \"Token de sessão validado\"  \n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        UserToken:\n          type: string\n          description: \"Token do usuário. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        TOTP:\n          type: string\n          description: \"Código TOTP\"\n          example: \"123456\"\n    2faTOTPValidateResponse:\n      type: object\n      properties:\n        ResponseCode:\n          type: number\n          description: \"Token de sessão validado\"  \n          example: 0\n        Message:\n          type: string\n          example: \"TOTP Validated Successfully\"\n    2faCellPhoneValidateResponse:\n      type: object\n      properties:\n        ResponseCode:\n          type: string\n          example: \"0\"\n        Message:\n          type: string\n          example: \"CELLPHONE VALIDATED SUCCESSFULLY.\"\n    2faEmailValidateResponse:\n      type: object\n      properties:\n        ResponseCode:\n          type: integer\n          example: 0\n        Message:\n          type: string\n          example: \"EMAIL VALIDATED SUCCESSFULLY.\"\n    2faSessionValidateRequest:\n      type: object\n      title: Por SMS\n      properties:\n        UserSessionToken:\n          type: string\n          description: \"oken da sessão do usuário. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UserSessionPassword:\n          type: string\n          description: \"Senha do usuário. Exemplo: 123456\"\n          example: \"123456\"\n    2faSessionValidateResponse:\n      type: object\n      properties:\n        UserSessionToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"\n        Validated:\n          type: boolean\n          example: true\n        ResponseCode:\n          type: integer\n          example: 0\n        Message:\n          type: string\n          example: \"SESSION VALIDATED SUCCESSFULLY.\"\n    2faSession401Response:\n      type: object\n      properties:\n        ResponseCode :\n          type: integer\n          example: -1\n        message:\n          type: string\n          example: \"SENHA INVÁLIDA OU TOKEN DO USUÁRIO\"\n    2faSession500Response:\n      type: object\n      properties:\n        ResponseCode :\n          type: integer\n          example: -2\n        message:\n          type: string\n          example: \"SESSÃO EXPIRADA\"\n    2faSession503Response:\n      type: object\n      properties:\n        ResponseCode :\n          type: integer\n          example: -3\n        message:\n          type: string\n          example: \"SESSÃO NÃO VALIDADA\"\n    2faEmailCellRequest:\n      type: object\n      title: Por SMS\n      properties:\n        ApplicationToken:\n          type: string\n          description: \"Token da aplicação em que o usuário tem acesso. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        CellPhone:\n          type: string\n          description: \"Telefone do usuário\"\n          example: \"5521987654321\"\n        Email:\n          type: string\n          description: \"E-mail do usuário\"\n          example: \"user@company.com.br\"\n        UniqueIdentifier:\n          type: string\n          description: \"Código de identificação única do usuário. Exemplo: 12345678910\"\n          example: \"12345678910\"\n    2faEmailCellResponse:\n      type: object\n      title: Por SMS\n      properties:\n        UserToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UniqueIdentifier:\n          type: string\n          example: \"12345678910\"\n        CellPhone:\n          type: string\n          example: \"5521987654321\"\n        CellPhoneValidated:\n          type: boolean\n          example: false\n        Email:\n          type: string\n          example: \"user@company.com.br\"\n        EmailValidated:\n          type: boolean\n          example: false\n        CreationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n    2faCellRequest:\n      type: object\n      title: Por SMS\n      properties:\n        ApplicationToken:\n          type: string\n          description: \"Token da aplicação em que o usuário tem acesso. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        CellPhone:\n          type: string\n          description: \"Telefone do usuário\"\n          example: \"5521987654321\"\n        UniqueIdentifier:\n          type: string\n          description: \"Código de identificação única do usuário. Exemplo: 12345678910\"\n          example: \"12345678910\"\n    2faCellResponse:\n      type: object\n      title: Por SMS\n      properties:\n        UserToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UniqueIdentifier:\n          type: string\n          example: \"12345678910\"\n        CellPhone:\n          type: string\n          example: \"5521987654321\"\n        CellPhoneValidated:\n          type: boolean\n          example: false\n        CreationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n    2faEmailRequest:\n      type: object\n      title: Por SMS\n      properties:\n        ApplicationToken:\n          type: string\n          description: \"Token da aplicação em que o usuário tem acesso. Mascara: AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        Email:\n          type: string\n          description: \"E-mail do usuário\"\n          example: \"user@company.com.br\"\n        UniqueIdentifier:\n          type: string\n          description: \"Código de identificação única do usuário. Exemplo: 12345678910\"\n          example: \"12345678910\"\n    2faEmailResponse:\n      type: object\n      title: Por SMS\n      properties:\n        UserToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UniqueIdentifier:\n          type: string\n          example: \"12345678910\"\n        Email:\n          type: string\n          example: \"user@company.com.br\"\n        EmailValidated:\n          type: boolean\n          example: false\n        CreationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n    2faCellChangeResponse:\n      type: object\n      properties:\n        UserToken:\n          type: string\n          example: \"AAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"  \n        UniqueIdentifier:\n          type: string\n          example: \"12345678910\"\n        Email:\n          type: string\n          example: \"user@company.com.br\"\n        EmailValidated:\n          type: boolean\n          example: true\n        CellPhoneFrom:\n          type: string\n          example: \"5521987654321\"\n        CellPhoneFromValidated:\n          type: boolean\n          example: true\n        CellPhoneTo:\n          type: string\n          example: \"5521123456789\"\n        CellPhoneToValidated:\n          type: boolean\n          example: false\n        CreationDate:\n          type: string\n          example: \"2020-01-01T12:00:00.000000Z\"\n\n    DictKeyResponse202:\n      type: object\n      properties:\n        id:\n          type: string\n          example: \"29b0000cb501400ea6c3f21b24ef251c\"\n        status:\n          type: string\n          example: \"active\"\n        created_at:\n          type: string\n          example: \"2020-11-06T12:54:11.336975\"\n        updated_at:\n          type: string\n          example: \"2020-11-06T12:54:11.336975\"\n        key:\n          type: object\n          properties:\n            value:\n              type: string\n              example: \"fulano@gmail.com\"\n            type:\n              type: string\n              example: email\n        account:\n          type: object\n          properties:\n            id:\n              type: string\n              example: \"cf27477574e04d4584ac75ef6ca5ec3f\"\n            marketplace_id:\n              type: string\n              example: \"6c237bf9932840ccada92ac629a05d39\"\n            holder_id:\n              type: string\n              example: \"d83a1a81caa243d2a10bc414ae406bd3\"\n            owner:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: João da Silva\n                national_registration:\n                  type: string\n                  example: \"33580667033\"\n                type:\n                  type: string\n                  example: \"individual\"\n            routing_number:\n              type: string\n              example: \"001\"\n            number:\n              type: string\n              example: \"456123\"\n            type:\n              type: string\n              example: \"cacc\"\n        psp:\n          type: object\n          properties:\n            code: \n              type: string\n              example: \"3001155\"\n            name:\n              type: string\n              example: \"Zoop\"\n    DictKeyResponse400:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1000\"\n        message:\n          type: string\n          example: \"Account Id is required\"\n    DictKeyResponse4001:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1001\"\n        message:\n          type: string\n          example: \"Key value is not a valid email format\"\n    DictKeyResponse4002:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1002\"\n        message:\n          type: string\n          example: \"Key of type phone must have 14 characters for its value\"\n    DictKeyResponse4003:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1003\"\n        message:\n          type: string\n          example: \"Key value is required for phone or email types\"\n    DictKeyResponse4004:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1004\"\n        message:\n          type: string\n          example: \"Key type is no compatible with claim type\"\n    DictKeyResponse4005:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"1005\"\n        message:\n          type: string\n          example: \"Key value must not be informed for national_registration or evp types\"\n    DictKeyResponse404:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"3000\"\n        message:\n          type: string\n          example: \"Marketplace not found\"\n    DictKeyResponse412:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"4000\"\n        message:\n          type: string\n          example: \"Maximum entry count allowed reached\"\n\n    ClaimRequest:\n      type: object\n      properties:\n        claim_type:\n          type: string\n          description: Utilize ownership para reinvindicar uma chave e portability para realizar a portabilidade de chave. \n          enum:\n           - ownership \n           - portability\n        key:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \"Indica o tipo de chave de endereçamento. Os tipos de chave são: phone, email, evp e national_registration.\"\n              enum:\n              - email\n              - phone \n              - evp \n              - national_registration\n            value:\n              type: string\n              description: \"Indica o valor da chave de endereçamento\"\n              example: \"fulano@gmail.com\"\n    ClaimResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: \"76d1f0c3772f45899b3025481a79967d\"\n        marketplace_id:\n          type: string\n          example: \"6c237bf9932840ccada92ac629a05d39\"\n        created_at:\n          type: string\n          example: \"2020-11-06T12:54:11.336975\"\n        updated_at:\n          type: string\n          example: \"2020-11-06T12:54:11.336975\"\n        type:\n          type: string\n          example: \"ownership\"\n        status:\n          type: string\n          example: \"open\"\n        key:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \"Indica o tipo de chave de endereçamento. Os tipos de chave são: phone, email, evp e national_registration.\"\n              enum:\n              - email\n              - phone \n              - evp \n              - national_registration\n            value:\n              type: string\n              description: \"Indica o valor da chave de endereçamento\"\n              example: \"fulano@gmail.com\"\n        claimer:\n          type: object\n          properties:\n            name:\n              type: string\n              example: João da Silva\n            national_registration:\n              type: string\n              example: \"33580667033\"\n            type:\n              type: string\n              example: \"individual\"\n            marketplace_id:\n              type: string\n              example: \"6c237bf9932840ccada92ac629a05d39\"\n            holder_id:\n              type: string\n              example: \"d83a1a81caa243d2a10bc414ae406bd3\"\n            account:\n              type: object\n              properties:\n                digital_account_id:\n                  type: string\n                  example: \"cf27477574e04d4584ac75ef6ca5ec3f\"\n                routing_number:\n                  type: string\n                  example: \"001\"\n                number:\n                  type: string\n                  example: \"456123\"\n                type:\n                  type: string\n                  example: \"cacc\"\n            psp:\n              type: object\n              properties:\n                code: \n                  type: string\n                  example: \"3001155\"\n        donor:\n          type: object\n          properties:\n            code:\n              type: string\n              example: 30011455\n            name:\n              type: string\n              example: \"Zoop\"\n        completion_period_end:\n          type: string\n          example: \"2020-01-17T10:00:00Z\"\n        resolution_periodo_end:\n          type: string\n          example: \"2020-01-17T10:00:00Z\"\n\n    pixRequest:\n      title: Pix por Chave\n      required:\n        - amount\n        - creditor\n        - key\n      type: object\n      properties:\n        transaction_id:\n          type: string\n          description: Campo usado pelo recebedor do Pix para identificar uma transação no seu legado. \n          example: \"d747dc8fffec48a69830b40af4078fe1\"\n        amount:\n          type: integer\n          description: Valor do pagamento em centavos. \n          example: 12050\n        description:\n          type: string\n          description: Descrição do pagamento. Não é permitido caracteres especiais. \n          example: \"Churrasco fim pandemia\"\n        creditor:\n          type: object\n          properties:\n            national_registration:\n               type: string\n               description: Representa o CPF/CNPJ do recebedor do Pix - Parâmetro pertencente ao objeto creditor. \n               example: \"84154427008\"\n            psp:\n               type: string\n               description: Código da instituição participante do Pix onde a conta do recebedor está criada - Parâmetro pertencente ao objeto creditor.\n               example: \"60746948\" \n        key:\n          type: object\n          properties:\n            type:\n              type: string\n              description: \"Representa o tipo de chave de endereçamento. Domínio: phone, email, evp e national_registration. Parâmetro pertencente ao objeto key.\" \n              enum:\n              - phone\n              - email\n              - evp\n              - national_registration\n            value:\n              type: string\n              description: Representa o valor da chave de endereçamento. Seu formato e tamanho variam conforme o tipo escolhido anteriormente. Para phone a mascara é +9999999999999. Para email a mascara é xxxxxxxxxx@xxxxxxx.xx.xx com máximo de 77 caracteres. Para evp, não deve ser informado nenhum valor. Para national_registration, não deve ser informado nenhum valor.\n              example: \"+552198744587\"\n    pixAccountRequest:\n      title: Pix por dados da conta\n      required:\n        - amount\n        - creditor\n      type: object\n      properties:\n        amount:\n          type: integer\n          description: Valor do pagamento em centavos. \n          example: 12050\n        creditor:\n          type: object\n          properties:\n            account:\n              type: object\n              properties:\n                routing_number:\n                  type: string\n                  example: \"001\"\n                number:\n                  type: string\n                  example: \"456123\"\n                type:\n                  type: string\n                  example: \"cacc\"\n            name:\n               type: string\n               description: Representa o nome do recebedor - Parâmetro pertencente ao objeto creditor. \n               example: \"84154427008\"\n            national_registration:\n               type: string\n               description: Representa o CPF/CNPJ do recebedor do Pix - Parâmetro pertencente ao objeto creditor. \n               example: \"84154427008\"\n            psp:\n               type: string\n               description: Código da instituição participante do Pix onde a conta do recebedor está criada - Parâmetro pertencente ao objeto creditor.\n               example: \"60746948\" \n        transaction_id:\n          type: string\n          description: Campo usado pelo recebedor do Pix para identificar uma transação no seu legado. \n          example: \"d747dc8fffec48a69830b40af4078fe1\"\n        description:\n          type: string\n          description: Descrição do pagamento. Não é permitido caracteres especiais. \n          example: \"Churrasco fim pandemia\"\n    pixResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: \"026b9c0e9fd34b32872906d5b64efbee\"\n        end_to_end_id:\n          type: string\n          example: \"E00038166201907261559y6j6mt9l0pi\"\n        transaction_id:\n          type: string\n          example: \"d747dc8fffec48a69830b40af4078fe1\"\n        marketplace_id:\n          type: string\n          example: \"0f8546897d6f41f4b3d81049693071ee\"\n        status:\n          type: string\n          example: \"pending\"\n        amount:\n          type: string\n          example: \"120.50\"\n        description:\n          type: string\n          example: \"Churrasco fim pandemia\"\n        debtor:\n          type: object\n          properties:\n            name:\n              type: string\n              example: João da Silva\n            national_registration:\n              type: string\n              example: \"33580667033\"\n            type:\n              type: string\n              example: \"natural_person\"\n            holder_id:\n              type: string\n              example: \"ec1865e565a04bcab9994a395dd6393d\"\n            account:\n              type: object\n              properties:\n                psp:\n                  type: object\n                  properties:\n                    code:\n                      type: string\n                      example: 19468242\n                    name:\n                      type: string\n                      example: \"Zoop Tecnologia e Meios de Pagamento S.A.\"\n                digital_account_id:\n                  type: string\n                  example: \"0ce048eebf024b26957207c53430aabb\"\n                routing_number:\n                  type: string\n                  example: \"001\"\n                number:\n                  type: string\n                  example: \"456123\"\n                type:\n                  type: string\n                  example: \"cacc\"\n        creditor:\n          type: object\n          properties:\n            name:\n              type: string\n              example: Maria da Silva\n            national_registration:\n              type: string\n              example: \"84154427008\"\n            type:\n              type: string\n              example: \"natural_person\"\n            holder_id:\n              type: string\n              example: \"ec1865e565a04bcab9994a395dd6393d\"\n            account:\n              type: object\n              properties:\n                psp:\n                  type: object\n                  properties:\n                    code:\n                      type: string\n                      example: 60746948\n                    name:\n                      type: string\n                      example: \"Bradesco S.A.\"\n                routing_number:\n                  type: string\n                  example: \"3000\"\n                number:\n                  type: string\n                  example: \"600000\"\n                type:\n                  type: string\n                  example: \"cacc\"\n    pixRefundRequest:\n      title: Pix por dados da conta\n      required:\n        - amount\n        - reason\n      type: object\n      properties:\n        amount:\n          type: integer\n          description: Valor do pagamento em centavos. \n          example: 12050\n        reason:\n          type: object\n          properties:\n            additional_information:\n              type: string\n              example: \"envio errado\"\n            code:\n              type: string\n              enum:\n              - AM05\n              - AM09\n              - BE08\n              - DS28\n              - FOCR\n              - FR01\n              - MD06\n              - NARR\n              - RUTA\n              - SL11\n              - SL12\n              - UPAY\n              example: \"AM05\"\n    pixRefundResponse:\n      type: object\n      properties:\n        amount:\n          type: integer\n          example: \"12050\"\n        created_at:\n          type: string\n          example: \"2021-01-07T15:41:52.532Z\"\n        id:\n          type: string\n          example: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n        marketplace_id:\n          type: string\n          example: \"0f8546897d6f41f4b3d81049693071ee\"\n        original_transaction:\n          type: object\n          properties:\n            amount:\n              type: integer\n              example: 0\n            created_at:\n              type: string\n              example: \"2021-01-07T15:41:52.532Z\"\n            creditor:\n              type: object\n              properties:\n                account:\n                  type: object\n                  properties:\n                    digital_account_id:\n                      type: string\n                      example: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n                    routing_number:\n                      type: string\n                      example: \"3000\"\n                    number:\n                      type: string\n                      example: \"600000\"\n                    psp:\n                      type: object\n                      properties:\n                        code:\n                          type: string\n                          example: 60746948\n                        name:\n                          type: string\n                          example: \"Bradesco S.A.\"\n                    type:\n                      type: string\n                      example: \"cacc\"\n                name:\n                  type: string\n                  example: Maria da Silva\n                national_registration:\n                  type: string\n                  example: \"84154427008\"\n                type:\n                  type: string\n                  example: \"natural_person\"\n                holder_id:\n                  type: string\n                  example: \"ec1865e565a04bcab9994a395dd6393d\"\n\n            debtor:\n              type: object\n              properties:\n                account:\n                  type: object\n                  properties:\n                    digital_account_id:\n                      type: string\n                      example: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n                    name:\n                      type: string\n                      example: João da Silva\n                    national_registration:\n                      type: string\n                      example: \"33580667033\"\n                    type:\n                      type: string\n                      example: \"natural_person\"\n                    holder_id:\n                      type: string\n                      example: \"ec1865e565a04bcab9994a395dd6393d\"\n                    account:\n                      type: object\n                      properties:\n                        psp:\n                          type: object\n                          properties:\n                            code:\n                              type: string\n                              example: 19468242\n                            name:\n                              type: string\n                              example: \"Zoop Tecnologia e Meios de Pagamento S.A.\"\n                        digital_account_id:\n                          type: string\n                          example: \"0ce048eebf024b26957207c53430aabb\"\n                        routing_number:\n                          type: string\n                          example: \"001\"\n                        number:\n                          type: string\n                          example: \"456123\"\n                        type:\n                          type: string\n                          example: \"cacc\"\n\n\n    PixTransferError400Response:\n      type: object\n      properties:\n        status:\n          type: string\n          example: \"bad_request\"\n        type:\n          type: string\n          example: \"invalid_request\"\n        code:\n          type: integer\n          example: 2000\n        message:\n          type: string\n          example: \"Validation field error.\"\n        category:\n          type: string\n          example: \"business\"\n        status_code:\n          type: number\n          example: 400\n        fields:\n          type: object\n          properties:\n            account_id:\n              type: object\n              properties:\n                code: \n                  type: integer\n                  example: 1000\n                message:\n                  type: string\n                  example: \"Account Id is required.\"\n            key:\n              type: object\n              properties:\n                type:\n                  type: object\n                  properties:\n                    code: \n                      type: integer\n                      example: 1001\n                    message:\n                      type: string\n                      example: \"Key type is required.\"\n    PixTransferError403Response:\n      type: object\n      properties:\n        status:\n          type: string\n          example: \"Forbidden\"\n        type:\n          type: string\n          example: \"invalid_request\"\n        message:\n          type: string\n          example: \"Transfer window is not valid\"\n        category:\n          type: string\n          example: \"business\"\n        status_code:\n          type: number\n          example: 403\n    PixTransferError404Response:\n      type: object\n      properties:\n        status:\n          type: string\n          example: \"not_found\"\n        type:\n          type: string\n          example: \"not_found\"\n        code:\n          type: integer\n          example: 3000\n        message:\n          type: string\n          example: \"Marketplace not found\"\n        category:\n          type: string\n          example: \"business\"\n        status_code:\n          type: number\n          example: 404\n    PixTransferError412Response:\n      type: object\n      properties:\n        status:\n          type: string\n          example: \"precondition_failed\"\n        type:\n          type: string\n          example: \"invalid_request\"\n        code:\n          type: integer\n          example: 4000\n        message:\n          type: string\n          example: \"Maximum entry count allowed reached\"\n        category:\n          type: string\n          example: \"business\"\n        status_code:\n          type: number\n          example: 412\n",
			"canonicalURL": "/github.com/getzoop/api-docs@d112ae4ee6d40e7b1857ee8b72f364a6869b1c58/-/blob/2FA/2FA.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/getzoop/api-docs/blob/d112ae4ee6d40e7b1857ee8b72f364a6869b1c58/2FA/2FA.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}