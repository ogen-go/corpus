{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bigcommerce/api-specs"
		},
		"file": {
			"name": "sites.v3.yml",
			"size": 0,
			"path": "reference/sites.v3.yml",
			"byteSize": 43209,
			"content": "openapi: 3.0.3\ninfo:\n  title: Sites\n  version: ''\n  description: |-\n    Create and manage [sites](#sites) and [routes](#routes) for [headless storefront](https://support.bigcommerce.com/s/article/The-Headless-Approach#what-mean) sales [channels](/api-reference/store-management/channels).\n\n\n    ## Authentication\n\n    Authenticate requests by sending an [OAuth](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes) `access_token` via `X-Auth-Token` HTTP header.\n\n    ### Example\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites\n    Content-Type: application/json\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    ```\n\n    ### [OAuth Scopes](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes)\n\n    | UI Name        | Permission | Parameter               |\n    |----------------|------------|-------------------------|\n    | Sites \u0026 Routes | modify     | `store_sites`           |\n    | Sites \u0026 Routes | read-only  | `store_sites_read_only` |\n\n    For more information on authenticating BigCommerce APIs, see [Authentication](/api-docs/getting-started/authentication).\n\n    ## [Sites](/api-reference/store-management/sites)\n\n    Sites link [headless storefronts](/api-docs/storefronts/developers-guide-headless) to sales [channels](/api-reference/store-management/channels). To [create a site](/api-reference/store-management/sites/sites/post-site), send a `POST` request to `/stores/{{STORE_HASH}}/v3/sites`.\n\n    ```http\n    POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n\n    {\n      \"url\": \"http://store.example.com/\",\n      \"channel_id\": 5\n    }\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/sites/sites/post-site#requestrunner)\n\n    **[Response:](/api-reference/store-management/sites/sites/post-site#responses)**\n\n    ```json\n    {\n      \"id\": 1,\n      \"url\": \"http://store.example.com/\",\n      \"channel_id\": 5,\n      \"created_at\": \"2018-01-04T04:15:50.000Z\",\n      \"updated_at\": \"2018-01-04T04:15:50.000Z\"\n    }\n    ```\n\n    To [get a list of sites](/api-reference/store-management/sites/sites/getsites), send a `GET` request to `/stores/{{STORE_HASH}}/v3/sites`.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Accept: application/json\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/sites/sites/getsites#requestrunner)\n\n    ## [Site routes](/api-reference/store-management/sites/site-routes/index-site-routes)\n\n    Site routes tell BigCommerce how to link to pages on a [headless storefront](/api-docs/storefronts/developers-guide-headless). To [create a route](/api-reference/store-management/sites/site-routes/post-site-route) for a [site](#sites), send a `POST` request to `/stores/{{STORE_HASH}}/v3/sites/{site_id}/routes`.\n\n    ```http\n    POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites/{site_id}/routes\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n\n    {\n      \"type\": \"product\",\n      \"matching\": \"12\",\n      \"route\": \"/en/product?id=12\"\n    }\n    ```\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/store-management/sites/site-routes/post-site-route#requestrunner)\n\n    ## Route types\n\n    The following route types are supported.\n\n    | Type | Description |\n    |-|-|\n    |`product`|Route for product details pages |\n    |`brand`|Route to brand pages |\n    |`category`|Route to category pages |    \n    |`blog`|Route to blog page|    \n    |`home`|Route to storefront homepage|\n    |`cart`|Route to shopper's cart|\n    |`checkout`|Route to checkout page|\n    |`search`|Route to store search page|\n    |`account`|Route to account profile page|\n    |`login`|Route to account login page|\n    |`returns`|Route for return policy page|\n    |`static`|Route to a static page|    \n    |`create_account`|Route to create new shopper account page|\n    |`forgot_password`|Route to shopper forgot password page|\n    |`account_order_status`|Route for order status page|\n    |`account_new_return`|Route for product returns page|\n    |`recover_abandoned_cart`|Route for URL in emails for a shopper to recover their abandoned cart|\n\n    ## Route variables\n\n    The following route variables are supported\n\n    |Variable|Description|\n    |-|-|\n    |`{id}`|The **ID** of the requested item|\n    |`{slug}`|The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash|\n    |`{lang}`|The **language** string that the client is using|\n\n    **Example:**\n\n    ```http\n    POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites/{site_id}/routes\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n\n    {\n      \"type\": \"product\",\n      \"matching\": \"*\",\n      \"route\": \"/{lang}/{slug}?id={id}\"\n    }\n    ```\n\n    ## Additional Information\n\n    ### Related resources\n    * [Channels and Listings Reference](/api-reference/store-management/channels)\n    * [Channels Overview](/api-docs/channels/overview)\n    * [Building Headless Storefronts Guide](/api-docs/storefronts/developers-guide-headless)\n  contact: {}\nservers:\n  - url: 'https://api.bigcommerce.com'\nsecurity:\n  - X-Auth-Token: []\ntags:\n  - name: Sites\n    description: 'Enables creation and management of external sites (domains) where shoppers shop. Allows for the correct shopping experience to be delivered and maintained (i.e. redirect URLs, email links) when a shopper goes through the purchasing process.'\n  - name: Site Routes\n  - name: Site Certificate\npaths:\n  '/stores/{store_hash}/v3/sites':\n    post:\n      summary: Create a Site\n      operationId: post-site\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/post_Site'\n        required: true\n        x-examples:\n          application/json:\n            url: 'http://store.example.com/'\n            channel_id: 2\n      responses:\n        '201':\n          $ref: '#/components/responses/response_Site'\n        '400':\n          $ref: '#/components/responses/400_BadRequest'\n        '403':\n          $ref: '#/components/responses/403_Unauthorized'\n        '404':\n          $ref: '#/components/responses/404_NotFound'\n        '502':\n          description: ''\n        '504':\n          $ref: '#/components/responses/504_GatewayTimeout'\n      tags:\n        - Sites\n      description: 'Create a site that links a [headless storefront](/api-docs/storefronts/developers-guide-headless) to a sales [channel](/api-reference/store-management/channels).'\n    get:\n      responses:\n        '200':\n          $ref: '#/components/responses/site_RespCollection'\n      summary: Get Sites\n      description: 'Get sites linked to a [headless storefront](/api-docs/storefronts/developers-guide-headless) sales channels.'\n      tags:\n        - Sites\n      parameters:\n        - in: query\n          name: page\n          description: Specifies the page number in a limited (paginated) list of items.\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Controls the number of items per page in a limited (paginated) list of items.\n          schema:\n            type: integer\n        - schema:\n            type: integer\n            example: 1\n          in: query\n          name: 'channel_id:in'\n          description: Filters returned sites by channel ID\n        - schema:\n            type: string\n          in: query\n          name: 'url_type:in'\n          description: Filters sites returned in the `data.urls` array by their URL type\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/sites/{site_id}':\n    get:\n      summary: Get a Site\n      operationId: getSite\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          $ref: '#/components/responses/response_Site'\n      tags:\n        - Sites\n      description: 'Get a site with site ID `{site_id}`.'\n    put:\n      summary: Update a Site\n      operationId: putSite\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/put_Site'\n        required: true\n        x-examples:\n          application/json:\n            url: 'https://remote-site.com/'\n      responses:\n        '200':\n          $ref: '#/components/responses/response_Site'\n      tags:\n        - Sites\n      description: 'Update a site with site ID `{site_id}`.'\n    delete:\n      summary: Delete a Site\n      operationId: deleteSite\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: ''\n      tags:\n        - Sites\n      description: 'Delete a site with site ID `{site_id}`.'\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: site_id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/sites/{site_id}/routes':\n    parameters:\n      - name: site_id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get a Site's Routes\n      operationId: index-site-routes\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: type\n          in: query\n          description: Filter routes by a given resource type\n          schema:\n            type: string\n        - in: query\n          name: page\n          description: Specifies the page number in a limited (paginated) list of items.\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Controls the number of items per page in a limited (paginated) list of items.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/siteRoute_Full'\n                  meta:\n                    $ref: '#/components/schemas/_metaCollection'\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: 1\n                        type: product\n                        matching: '5'\n                        route: '/products?id={id}'\n                      - id: 2\n                        type: category\n                        matching: '44'\n                        route: '/category/{slug}'\n                    meta:\n                      pagination:\n                        total: 1\n                        count: 1\n                        per_page: 50\n                        current_page: 1\n                        total_pages: 1\n      tags:\n        - Site Routes\n      description: Get a site's routes.\n    post:\n      summary: Create a Site Route\n      operationId: post-site-route\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/siteRoute_Base'\n        required: true\n        x-examples:\n          application/json:\n            type: returns\n            matching: '5'\n            route: /my-amazing-product\n      responses:\n        '201':\n          $ref: '#/components/responses/siteRoute_Resp'\n        '422':\n          $ref: '#/components/responses/ErrorResponse'\n        '502':\n          $ref: '#/components/responses/502_GatewayError'\n      tags:\n        - Site Routes\n      description: |-\n        Create routes that tell BigCommerce how to link to pages on a [headless storefront](/api-docs/storefronts/developers-guide-headless).\n\n        ## Usage Notes\n        * For a list of supported route types, see [Route types](/api-reference/store-management/sites#route-types).\n    put:\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/siteRoute_Full'\n                  meta:\n                    $ref: '#/components/schemas/_metaCollection'\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: 123\n                        type: brand\n                        matching: '5'\n                        route: /my-amazing-product\n                      - id: 345\n                        type: blog\n                        matching: '5'\n                        route: /my-amazing-product\n                      - id: 234\n                        type: returns\n                        matching: '5'\n                        route: /my-amazing-product\n                    meta:\n                      pagination:\n                        total: 80\n                        count: 50\n                        per_page: 50\n                        current_page: 50\n                        total_pages: 2\n                        links:\n                          current: '?page=1\u0026limit=50'\n                          next: '?page=2\u0026limit=50'\n        '422':\n          $ref: '#/components/responses/BulkErrorResponse'\n      description: |-\n        Upsert routes for site with ID `{site_id}`.\n\n        ## Usage Notes\n        * `id` is required when updating an existing route.\n      summary: Update Site's Routes\n      parameters:\n        - in: path\n          name: site_id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/siteRoute_Full'\n        x-examples:\n          application/json:\n            - id: 1\n              type: product\n              matching: '*'\n              route: '/products/{id}'\n            - id: 2\n              type: product\n              matching: '10'\n              route: '/products?id={id}'\n      tags:\n        - Site Routes\n  '/stores/{store_hash}/v3/sites/{site_id}/routes/{route_id}':\n    get:\n      summary: Get a Site Route\n      operationId: get-site-route\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: route_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/siteRoute_Full'\n                  meta:\n                    type: object\n              examples:\n                response:\n                  value:\n                    data:\n                      id: 60474753\n                      type: checkout\n                      matching: '5'\n                      route: /my-amazing-product\n                    meta: {}\n      tags:\n        - Site Routes\n      description: Get a site's route.\n    put:\n      summary: Update a Site Route\n      operationId: put-site-route\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: route_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/siteRoutes_Route_Base'\n        required: true\n        x-examples:\n          application/json:\n            type: product\n            matching: '*'\n            route: '/products/{id}'\n      responses:\n        '201':\n          $ref: '#/components/responses/siteRoute_Resp'\n      tags:\n        - Site Routes\n      description: |\n        Update a site's route.\n    delete:\n      summary: Delete a Site Route\n      operationId: delete-route\n      parameters:\n        - name: site_id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: route_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: ''\n      tags:\n        - Site Routes\n      description: Delete a site's route.\n    parameters:\n      - name: store_hash\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: site_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: route_id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/stores/{store_hash}/v3/sites/{site_id}/certificate':\n    parameters:\n      - in: path\n        name: site_id\n        schema:\n          type: integer\n        required: true\n      - schema:\n          type: string\n        name: store_hash\n        in: path\n        required: true\n    get:\n      summary: Get a Site's SSL/TSL Certificate Information\n      description: Get information about a site's SSL/TSL certificate.\n      tags:\n        - Site Certificate\n      operationId: getSitesIdCertificate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateResponse'\n    put:\n      summary: Upsert a Site's SSL/TSL Certificate Information\n      operationId: putSiteIdCertificate\n      tags:\n        - Site Certificate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InstallCertificateData'\n        description: ''\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n            Example:\n              examples:\n                response:\n                  value: |-\n                    {\n                        \"data\": {},\n                        \"meta\": {}\n                    }\n      description: |-\n        - If a value for `url` is not supplied, the saved certificate is associated with the specified site’s `primary` URL.\n        - Use caution. Because this endpoint upserts, supplying an SSL certificate for a domain that already has a certificate connected overwrites the domain’s extant certificate.'\ncomponents:\n  schemas:\n    _metaCollection:\n      title: metaCollection\n      description: Meta data relating to pagination\n      type: object\n      properties:\n        pagination:\n          type: object\n          properties:\n            total:\n              type: integer\n              description: Total number of items returned.\n              example: 3\n            count:\n              type: integer\n              description: Number of items returned on per page.\n              example: 1\n            per_page:\n              type: integer\n              description: Number of items to be displayed per page.\n              example: 1\n            current_page:\n              type: integer\n              description: Current page number.\n              example: 2\n            total_page:\n              type: integer\n              description: Total number of pages.\n              example: 3\n            links:\n              type: object\n              properties:\n                previous:\n                  type: string\n                  description: Query string appended to the resource to return to the previous page.\n                  example: '?limit=1\u0026page=1'\n                next:\n                  type: string\n                  description: Query string appended to the resource to proceed to the next page.\n                  example: '?limit=1\u0026page=3'\n                current:\n                  type: string\n                  description: Query string appended to the resource to show the current page.\n                  example: '?limit=1\u0026page=2'\n      x-internal: false\n    siteRoute_Full:\n      title: siteRoute_Full\n      description: Route object used in responses.\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: integer\n              description: Unique ID for this route. Required when updating an existing route.\n        - $ref: '#/components/schemas/siteRoute_Base'\n      x-internal: false\n    put_Site:\n      type: object\n      properties:\n        url:\n          type: string\n          description: The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.\n          example: 'http://kittens.mybigcommerce.com/'\n      title: put_Site\n      x-internal: false\n    _site:\n      type: object\n      properties:\n        id:\n          type: integer\n        url:\n          type: string\n          description: The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.\n          example: 'http://kittens.mybigcommerce.com/'\n        channel_id:\n          type: integer\n          description: 'The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites.'\n        created_at:\n          type: string\n          description: 'The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.'\n          example: '2018-01-04T04:15:50.000Z'\n          format: date-time\n        updated_at:\n          type: string\n          description: 'The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.'\n          example: '2018-01-04T04:15:50.000Z'\n          format: date-time\n        ssl_status:\n          type: string\n          enum:\n            - dedicated\n            - shared\n          description: 'Indicates if a private/dedicated SSL is installed on this site, or if it''s using shared SSL.'\n        urls:\n          type: array\n          description: 'All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs.'\n          items:\n            $ref: '#/components/schemas/Url'\n        is_checkout_url_customized:\n          type: boolean\n          description: Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channel’s primary URL.\n    _metaEmpty:\n      type: object\n      description: Empty meta object; may be used later.\n      title: _metaEmpty\n      x-internal: false\n    _pagination:\n      type: object\n      description: |\n        Data about the response, including pagination and collection totals.\n      properties:\n        total:\n          type: integer\n          description: |\n            Total number of items in the result set.\n        count:\n          type: integer\n          description: |\n            Total number of items in the collection response.\n        per_page:\n          type: integer\n          description: |\n            The amount of items returned in the collection per page, controlled by the limit parameter.\n        current_page:\n          type: integer\n          description: |\n            The page you are currently on within the collection.\n        total_pages:\n          type: integer\n          description: |\n            The total number of pages in the collection.\n        links:\n          type: object\n          description: |\n            Pagination links for the previous and next parts of the whole collection.\n          properties:\n            previous:\n              type: string\n              description: |\n                Link to the previous page returned in the response.\n            current:\n              type: string\n              description: |\n                Link to the current page returned in the response.\n            next:\n              type: string\n              description: |\n                Link to the next page returned in the response.\n      title: _pagination\n      x-internal: false\n    _errors:\n      type: object\n      description: The keys and values in an errors object will vary depending on the error received.\n      title: _errors\n      x-internal: false\n    EmptyResponse:\n      type: object\n      properties:\n        data:\n          type: object\n        meta:\n          type: object\n    error_Full:\n      type: object\n      title: error_Full\n      properties:\n        status:\n          description: |\n            The HTTP status code.\n          type: integer\n        title:\n          description: |\n            The error title describing the particular error.\n          type: string\n        type:\n          type: string\n      x-internal: false\n    errorDetailed_Full:\n      type: object\n      properties:\n        errors:\n          type: object\n          additionalProperties:\n            type: string\n          title: DetailedErrors\n      title: errorDetailed_Full\n      x-internal: false\n    post_Site:\n      type: object\n      properties:\n        url:\n          type: string\n          description: The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.\n          example: 'http://kittens.mybigcommerce.com/'\n        channel_id:\n          type: integer\n          description: 'The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.'\n      title: post_Site\n      x-internal: false\n    siteRoute_Base:\n      type: object\n      title: siteRoute_Base\n      properties:\n        type:\n          type: string\n          description: 'The type of resource being routed to; [supported types](/api-reference/store-management/sites#route-types).'\n          enum:\n            - product\n            - brand\n            - category\n            - page\n            - blog\n            - home\n            - cart\n            - checkout\n            - search\n            - account\n            - login\n            - returns\n            - static\n        matching:\n          type: string\n          description: |-\n            Depending on the resource type, this can be an ID (matching a specific item), or a \"*\" wildcard (matching all items of that type).\n\n            For example, a route with a type: \"product\" and matching: \"5\" will be used for the product with the ID of 5.\n          example: '5'\n        route:\n          type: string\n          description: |-\n            The route template that will be used to generate the URL for the requested resource.\n\n            Supports several tokens:\n            - `{id}` The **ID** of the requested item\n            - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash\n            - `{language}` The **language** string that the client is using\n          example: /my-amazing-product\n      x-internal: false\n    siteRoutes_Route_Base:\n      title: siteRoutes_Route_Base\n      type: object\n      properties:\n        type:\n          type: string\n          description: 'The type of resource being routed to; [supported types](/api-reference/store-management/sites#route-types).'\n          enum:\n            - product\n            - brand\n            - category\n            - page\n            - blog\n            - home\n            - cart\n            - checkout\n            - search\n            - account\n            - login\n            - returns\n            - static\n        matching:\n          type: string\n          example: '5'\n          description: |-\n            Depending on the resource type, this can be an ID (matching a specific item), or a \"*\" wildcard (matching all items of that type).\n\n            For example, a route with a type: \"product\" and matching: \"5\" will be used for the product with the ID of 5.\n        route:\n          type: string\n          example: /my-amazing-product\n          description: |-\n            The route template that will be used to generate the URL for the requested resource.\n\n            Supports several tokens:\n            - `{id}` The **ID** of the requested item\n            - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash\n            - `{language}` The **language** string that the client is using\n      required:\n        - type\n        - matching\n        - route\n      x-internal: false\n    IndexMeta:\n      type: object\n      description: BC Meta payload for collection-type responses\n      properties:\n        pagination:\n          type: object\n          properties:\n            total:\n              type: integer\n              example: 1\n            count:\n              type: integer\n              example: 1\n            per_page:\n              type: integer\n              example: 50\n            current_page:\n              type: integer\n              example: 1\n            total_pages:\n              type: integer\n              example: 1\n            links:\n              type: object\n              properties:\n                previous:\n                  type: string\n                  example: '?page=1\u0026limit=50'\n                current:\n                  type: string\n                  example: '?page=1\u0026limit=50'\n                next:\n                  type: string\n                  example: '?page=1\u0026limit=50'\n      x-tags:\n        - Models\n    Url:\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL of site\n        type:\n          type: string\n          description: URL type\n          enum:\n            - primary\n            - canonical\n            - checkout\n        created_at:\n          type: string\n          description: 'The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.'\n          example: '2018-01-04T04:15:50.000Z'\n          format: date-time\n        updated_at:\n          type: string\n          description: 'The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.'\n          example: '2018-01-04T04:15:50.000Z'\n          format: date-time\n    SiteCreate:\n      type: object\n      properties:\n        url:\n          type: string\n          description: The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.\n          example: 'http://kittens.mybigcommerce.com/'\n        channel_id:\n          type: integer\n          description: 'The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.'\n        certificate:\n          $ref: '#/components/schemas/CertificateWrite'\n      x-tags:\n        - Models\n    CertificateWrite:\n      title: CertificateWrite\n      type: object\n      description: ''\n      properties:\n        certificate:\n          type: string\n          description: 'The primary certificate, as a string.'\n        private_key:\n          type: string\n          description: 'The private key, as a string. Is a \"write-only\" field, will never be returned after write.'\n        intermediate_certificates:\n          type: string\n          description: 'The intermediate certificate(s), as a string.'\n      x-tags:\n        - Models\n    CertificateResponse:\n      title: CertificateResponse\n      type: object\n      description: ''\n      properties:\n        data:\n          type: object\n          properties:\n            status:\n              type: string\n              enum:\n                - shared\n                - dedicated\n            installed_certificate:\n              $ref: '#/components/schemas/InstalledCertificateDetail'\n        meta:\n          type: object\n      x-tags:\n        - Models\n    InstallCertificateData:\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL for the site.\n          example: kittens.mybigcommerce.com\n        certificate:\n          $ref: '#/components/schemas/CertificateWrite'\n    InstalledCertificateDetail:\n      title: CertificateInfo\n      description: 'Details about the installed certificate, including the raw certificate data, without the private key.'\n      type: object\n      nullable: true\n      properties:\n        common_name:\n          type: string\n          example: store.com\n          description: Common Name on the TLS certificate.\n        subject_alternative_names:\n          type: array\n          example:\n            - store.com\n            - www.store.com\n          description: Subject Alternative Names for which the certificate is also valid.\n          items:\n            type: string\n        validity_not_before:\n          type: string\n          example: '2018-01-04T04:15:50.000Z'\n          description: When does the validity period of this certificate begin? RFC 3339\n        validity_not_after:\n          type: string\n          example: '2018-01-04T04:15:50.000Z'\n          description: 'When does the validity period of this certificate end? If this date is in the past, the certificate has expired. RFC 3339'\n        signing_algorithm:\n          type: string\n          description: Signing algorithm used to sign the certificate.\n        issuer:\n          type: string\n        certificate:\n          type: string\n          description: 'The primary certificate, as a string.'\n        intermediate_certificates:\n          type: string\n          description: 'The intermediate certificate(s), as a string.'\n      x-tags:\n        - Models\n    ErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/BaseError'\n        - type: object\n          properties:\n            errors:\n              $ref: '#/components/schemas/DetailedErrors'\n      x-tags:\n        - Models\n    BaseError:\n      type: object\n      description: |\n        Error payload for the BigCommerce API.\n      x-tags:\n        - Models\n      properties:\n        status:\n          type: integer\n          description: |\n            The HTTP status code.\n          example: 404\n        title:\n          description: |\n            The error title describing the particular error.\n          type: string\n        type:\n          type: string\n        instance:\n          type: string\n    DetailedErrors:\n      type: object\n      additionalProperties:\n        type: string\n      x-tags:\n        - Models\n  responses:\n    502_GatewayError:\n      description: 'If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n    504_GatewayTimeout:\n      description: 'If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n          examples:\n            response:\n              value:\n                status: 504\n                title: Gateway Timeout\n                type: /api-docs/getting-started/api-status-codes\n                errors: {}\n    403_Unauthorized:\n      description: ''\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n          examples:\n            response:\n              value:\n                status: 403\n                title: Unauthorized Access. You do not have permission to make this request.\n                type: /api-docs/getting-started/api-status-codes\n    400_BadRequest:\n      description: |-\n        Malformed request syntax. Typically need to fix the JSON\n        Body to resend successfully.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n          examples:\n            response:\n              value:\n                status: 400\n                title: Input is invalid.\n                type: /api-docs/getting-started/api-status-codes\n    404_NotFound:\n      description: Requested resource not founded.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n    422_UnprocessableEntity:\n      description: This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorDetailed_Full'\n          examples:\n            response:\n              value:\n                status: 422\n                title: JSON data is missing or invalid\n                type: /api-docs/getting-started/api-status-codes\n                errors: {}\n    503_ServiceUnavailable:\n      description: 'If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_Full'\n          examples:\n            response:\n              value:\n                status: 503\n                title: Service Unavailable\n                type: /api-docs/getting-started/api-status-codes\n    response_Site:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/_site'\n              meta:\n                $ref: '#/components/schemas/_metaEmpty'\n          examples:\n            response:\n              value:\n                data:\n                  id: 1000\n                  url: 'https://www.my-awesome-site.com'\n                  channel_id: 1\n                  created_at: '2019-08-05T18:26:21.000Z'\n                  updated_at: '2019-08-05T18:26:21.000Z'\n                meta: {}\n    BulkErrorResponse:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: integer\n                description: The HTTP status code.\n              title:\n                type: string\n              errors:\n                $ref: '#/components/schemas/_errors'\n              meta:\n                $ref: '#/components/schemas/_metaEmpty'\n              type:\n                type: string\n          examples:\n            response:\n              value:\n                meta:\n                  saved_records: 0\n                title: Bulk operation has failed\n                type: /api-docs/getting-started/api-status-codes\n                errors:\n                  0.matching.type: Route already exists for site 1 matching 5 for type product\n                  1.matching.type: Route already exists for site 1 matching * for type home\n                status: 422\n    ErrorResponse:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n                description: General error message\n              status:\n                type: string\n                description: HTTP status code\n              errors:\n                $ref: '#/components/schemas/_errors'\n              type:\n                type: string\n    site_RespCollection:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/_site'\n              meta:\n                $ref: '#/components/schemas/_metaCollection'\n          examples: {}\n    siteRoute_Resp:\n      description: ''\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/siteRoute_Full'\n              meta:\n                type: object\n          examples:\n            response:\n              value:\n                data:\n                  id: 123\n                  type: checkout\n                  matching: '5'\n                  route: /my-amazing-product\n                meta: {}\n  securitySchemes:\n    X-Auth-Token:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\n      description: |-\n        ```http\n        GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/sites\n        Content-Type: application/json\n        X-Auth-Token: {{ACCESS_TOKEN}}\n        ```\n\n        |Header|Description|\n        |-|-|\n        |`X-Auth-Token`|An [OAuth](/api-docs/getting-started/authentication/rest-api-authentication) `access_token`|\n\n        ### [OAuth Scopes](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes)\n\n        |  **UI Name** | **Permission** | **Parameter** |\n        | --- | --- | --- |\n        |  Channel Listings | modify | `store_channel_listings` |\n        |  Channel Listings | read-only | `store_channel_listings_read_only` |\n        |  Channel Settings | modify | `store_channel_settings` |\n        |  Channel Settings | read-only | `store_channel_settings_read_only` |\n        |  Sites \u0026 Routes | modify | `store_sites` |\n        |  Sites \u0026 Routes | read-only | `store_sites_read_only` |\n  parameters:\n    SiteIdPathParam:\n      in: path\n      name: site_id\n      schema:\n        type: integer\n      required: true\nx-stoplight:\n  docs:\n    includeDownloadLink: true\n    showModels: false\n",
			"canonicalURL": "/github.com/bigcommerce/api-specs@3d4f475bfa35fa63397a69165530f47d4d8b3703/-/blob/reference/sites.v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/bigcommerce/api-specs/blob/3d4f475bfa35fa63397a69165530f47d4d8b3703/reference/sites.v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}