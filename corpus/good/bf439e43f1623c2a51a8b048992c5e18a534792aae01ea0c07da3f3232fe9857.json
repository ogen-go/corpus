{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "repo_git.yaml",
			"size": 0,
			"path": "providers/src/github/v0.2.0/services/repo_git.yaml",
			"byteSize": 68209,
			"content": "paths:\n  /repos/{owner}/{repo}/git/blobs:\n    post:\n      summary: Create a blob\n      description: ''\n      tags:\n        - git\n      operationId: git/create-blob\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#create-a-blob\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n                  description: The new blob's content.\n                encoding:\n                  type: string\n                  description: The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.\n                  default: utf-8\n              required:\n                - content\n            example:\n              content: Content of the blob\n              encoding: utf-8\n      responses:\n        '201':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/short-blob'\n              examples:\n                default:\n                  $ref: '#/components/examples/short-blob'\n          headers:\n            Location:\n              example: https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\n              schema:\n                type: string\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: blobs\n  /repos/{owner}/{repo}/git/blobs/{file_sha}:\n    get:\n      summary: Get a blob\n      description: |-\n        The `content` in the response will always be Base64 encoded.\n\n        _Note_: This API supports blobs up to 100 megabytes in size.\n      tags:\n        - git\n      operationId: git/get-blob\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#get-a-blob\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: file_sha\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/blob'\n              examples:\n                default:\n                  $ref: '#/components/examples/blob'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: blobs\n  /repos/{owner}/{repo}/git/commits:\n    post:\n      summary: Create a commit\n      description: |-\n        Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n        **Signature verification object**\n\n        The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n        | Name | Type | Description |\n        | ---- | ---- | ----------- |\n        | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n        | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n        | `signature` | `string` | The signature that was extracted from the commit. |\n        | `payload` | `string` | The value that was signed. |\n\n        These are the possible values for `reason` in the `verification` object:\n\n        | Value | Description |\n        | ----- | ----------- |\n        | `expired_key` | The key that made the signature is expired. |\n        | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n        | `gpgverify_error` | There was an error communicating with the signature verification service. |\n        | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n        | `unsigned` | The object does not include a signature. |\n        | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n        | `no_user` | No user was associated with the `committer` email address in the commit. |\n        | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n        | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n        | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n        | `malformed_signature` | There was an error parsing the signature. |\n        | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n        | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n      tags:\n        - git\n      operationId: git/create-commit\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#create-a-commit\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  type: string\n                  description: The commit message\n                tree:\n                  type: string\n                  description: The SHA of the tree object this commit points to\n                parents:\n                  type: array\n                  description: The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.\n                  items:\n                    type: string\n                author:\n                  type: object\n                  description: Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.\n                  properties:\n                    name:\n                      type: string\n                      description: The name of the author (or committer) of the commit\n                    email:\n                      type: string\n                      description: The email of the author (or committer) of the commit\n                    date:\n                      type: string\n                      format: date-time\n                      description: 'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'\n                  required:\n                    - name\n                    - email\n                committer:\n                  type: object\n                  description: Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.\n                  properties:\n                    name:\n                      type: string\n                      description: The name of the author (or committer) of the commit\n                    email:\n                      type: string\n                      description: The email of the author (or committer) of the commit\n                    date:\n                      type: string\n                      format: date-time\n                      description: 'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'\n                signature:\n                  type: string\n                  description: The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.\n              required:\n                - message\n                - tree\n            example:\n              message: my commit message\n              author:\n                name: Mona Octocat\n                email: octocat@github.com\n                date: '2008-07-09T16:13:30+12:00'\n              parents:\n                - 7d1b31e74ee336d15cbd21741bc88a537ed063a0\n              tree: 827efc6d56897b048c772eb4087f854f46256132\n              signature: |\n                -----BEGIN PGP SIGNATURE-----\n\n                iQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n                7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\n                DkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n                2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\n                OQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\n                nrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n                +NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\n                jHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n                3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\n                UpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\n                X11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\n                eSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n                =5Io4\n                -----END PGP SIGNATURE-----\n      responses:\n        '201':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-commit'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-commit'\n          headers:\n            Location:\n              example: https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\n              schema:\n                type: string\n        '404':\n          $ref: '#/components/responses/not_found'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: commits\n  /repos/{owner}/{repo}/git/commits/{commit_sha}:\n    get:\n      summary: Get a commit\n      description: |-\n        Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n        **Signature verification object**\n\n        The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n        | Name | Type | Description |\n        | ---- | ---- | ----------- |\n        | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n        | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n        | `signature` | `string` | The signature that was extracted from the commit. |\n        | `payload` | `string` | The value that was signed. |\n\n        These are the possible values for `reason` in the `verification` object:\n\n        | Value | Description |\n        | ----- | ----------- |\n        | `expired_key` | The key that made the signature is expired. |\n        | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n        | `gpgverify_error` | There was an error communicating with the signature verification service. |\n        | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n        | `unsigned` | The object does not include a signature. |\n        | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n        | `no_user` | No user was associated with the `committer` email address in the commit. |\n        | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n        | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n        | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n        | `malformed_signature` | There was an error parsing the signature. |\n        | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n        | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n      tags:\n        - git\n      operationId: git/get-commit\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#get-a-commit\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - $ref: '#/components/parameters/commit-sha'\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-commit'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-commit-2'\n        '404':\n          $ref: '#/components/responses/not_found'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: commits\n  /repos/{owner}/{repo}/git/matching-refs/{ref}:\n    get:\n      summary: List matching references\n      description: |-\n        Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/\u003cbranch name\u003e` for branches and `tags/\u003ctag name\u003e` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\n        When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n        **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\n        If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.\n      tags:\n        - git\n      operationId: git/list-matching-refs\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#list-matching-references\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: ref\n          description: ref parameter\n          in: path\n          required: true\n          schema:\n            type: string\n          x-multi-segment: true\n        - $ref: '#/components/parameters/per-page'\n        - $ref: '#/components/parameters/page'\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/git-ref'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-ref-items'\n          headers:\n            Link:\n              $ref: '#/components/headers/link'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: refs\n  /repos/{owner}/{repo}/git/ref/{ref}:\n    get:\n      summary: Get a reference\n      description: |-\n        Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/\u003cbranch name\u003e` for branches and `tags/\u003ctag name\u003e` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n        **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n      tags:\n        - git\n      operationId: git/get-ref\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#get-a-reference\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: ref\n          description: ref parameter\n          in: path\n          required: true\n          schema:\n            type: string\n          x-multi-segment: true\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-ref'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-ref'\n        '404':\n          $ref: '#/components/responses/not_found'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: refs\n  /repos/{owner}/{repo}/git/refs:\n    post:\n      summary: Create a reference\n      description: Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.\n      tags:\n        - git\n      operationId: git/create-ref\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#create-a-reference\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ref:\n                  type: string\n                  description: 'The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn''t start with ''refs'' and have at least two slashes, it will be rejected.'\n                sha:\n                  type: string\n                  description: The SHA1 value for this reference.\n                key:\n                  type: string\n                  example: '\"refs/heads/newbranch\"'\n              required:\n                - ref\n                - sha\n            example:\n              ref: refs/heads/featureA\n              sha: aa218f56b14c9653891f9e74264a383fa43fefbd\n      responses:\n        '201':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-ref'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-ref'\n          headers:\n            Location:\n              example: https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA\n              schema:\n                type: string\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: refs\n  /repos/{owner}/{repo}/git/refs/{ref}:\n    patch:\n      summary: Update a reference\n      description: ''\n      tags:\n        - git\n      operationId: git/update-ref\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#update-a-reference\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: ref\n          description: ref parameter\n          in: path\n          required: true\n          schema:\n            type: string\n          x-multi-segment: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sha:\n                  type: string\n                  description: The SHA1 value to set this reference to\n                force:\n                  type: boolean\n                  description: Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.\n                  default: false\n              required:\n                - sha\n            example:\n              sha: aa218f56b14c9653891f9e74264a383fa43fefbd\n              force: true\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-ref'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-ref'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: refs\n    delete:\n      summary: Delete a reference\n      description: ''\n      tags:\n        - git\n      operationId: git/delete-ref\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#delete-a-reference\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: ref\n          description: ref parameter\n          in: path\n          required: true\n          schema:\n            type: string\n          x-multi-segment: true\n      responses:\n        '204':\n          description: Response\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: refs\n  /repos/{owner}/{repo}/git/tags:\n    post:\n      summary: Create a tag object\n      description: |-\n        Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n\n        **Signature verification object**\n\n        The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n        | Name | Type | Description |\n        | ---- | ---- | ----------- |\n        | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n        | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n        | `signature` | `string` | The signature that was extracted from the commit. |\n        | `payload` | `string` | The value that was signed. |\n\n        These are the possible values for `reason` in the `verification` object:\n\n        | Value | Description |\n        | ----- | ----------- |\n        | `expired_key` | The key that made the signature is expired. |\n        | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n        | `gpgverify_error` | There was an error communicating with the signature verification service. |\n        | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n        | `unsigned` | The object does not include a signature. |\n        | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n        | `no_user` | No user was associated with the `committer` email address in the commit. |\n        | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n        | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n        | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n        | `malformed_signature` | There was an error parsing the signature. |\n        | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n        | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n      tags:\n        - git\n      operationId: git/create-tag\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#create-a-tag-object\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tag:\n                  type: string\n                  description: The tag's name. This is typically a version (e.g., \"v0.0.1\").\n                message:\n                  type: string\n                  description: The tag message.\n                object:\n                  type: string\n                  description: The SHA of the git object this is tagging.\n                type:\n                  type: string\n                  description: The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.\n                  enum:\n                    - commit\n                    - tree\n                    - blob\n                tagger:\n                  type: object\n                  description: An object with information about the individual creating the tag.\n                  properties:\n                    name:\n                      type: string\n                      description: The name of the author of the tag\n                    email:\n                      type: string\n                      description: The email of the author of the tag\n                    date:\n                      type: string\n                      format: date-time\n                      description: 'When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'\n                  required:\n                    - name\n                    - email\n              required:\n                - tag\n                - message\n                - object\n                - type\n            example:\n              tag: v0.0.1\n              message: initial version\n              object: c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\n              type: commit\n              tagger:\n                name: Monalisa Octocat\n                email: octocat@github.com\n                date: '2011-06-17T14:53:35-07:00'\n      responses:\n        '201':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-tag'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-tag'\n          headers:\n            Location:\n              example: https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac\n              schema:\n                type: string\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: tags\n  /repos/{owner}/{repo}/git/tags/{tag_sha}:\n    get:\n      summary: Get a tag\n      description: |-\n        **Signature verification object**\n\n        The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n        | Name | Type | Description |\n        | ---- | ---- | ----------- |\n        | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n        | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n        | `signature` | `string` | The signature that was extracted from the commit. |\n        | `payload` | `string` | The value that was signed. |\n\n        These are the possible values for `reason` in the `verification` object:\n\n        | Value | Description |\n        | ----- | ----------- |\n        | `expired_key` | The key that made the signature is expired. |\n        | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n        | `gpgverify_error` | There was an error communicating with the signature verification service. |\n        | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n        | `unsigned` | The object does not include a signature. |\n        | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n        | `no_user` | No user was associated with the `committer` email address in the commit. |\n        | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n        | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n        | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n        | `malformed_signature` | There was an error parsing the signature. |\n        | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n        | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n      tags:\n        - git\n      operationId: git/get-tag\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#get-a-tag\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: tag_sha\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-tag'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-tag'\n        '404':\n          $ref: '#/components/responses/not_found'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: tags\n  /repos/{owner}/{repo}/git/trees:\n    post:\n      summary: Create a tree\n      description: |-\n        The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\n        If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\"\n      tags:\n        - git\n      operationId: git/create-tree\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#create-a-tree\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tree:\n                  type: array\n                  description: Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.\n                  items:\n                    type: object\n                    properties:\n                      path:\n                        type: string\n                        description: The file referenced in the tree.\n                      mode:\n                        type: string\n                        description: The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.\n                        enum:\n                          - '100644'\n                          - '100755'\n                          - '040000'\n                          - '160000'\n                          - '120000'\n                      type:\n                        type: string\n                        description: Either `blob`, `tree`, or `commit`.\n                        enum:\n                          - blob\n                          - tree\n                          - commit\n                      sha:\n                        type: string\n                        description: |-\n                          The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n                            \n                          **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n                        nullable: true\n                      content:\n                        type: string\n                        description: |-\n                          The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n                            \n                          **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n                base_tree:\n                  type: string\n                  description: |\n                    The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\n                    If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n              required:\n                - tree\n            example:\n              base_tree: 9fb037999f264ba9a7fc6274d15fa3ae2ab98312\n              tree:\n                - path: file.rb\n                  mode: '100644'\n                  type: blob\n                  sha: 44b4fc6d56897b048c772eb4087f854f46256132\n      responses:\n        '201':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-tree'\n              examples:\n                default:\n                  $ref: '#/components/examples/git-tree'\n          headers:\n            Location:\n              example: https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7\n              schema:\n                type: string\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: trees\n  /repos/{owner}/{repo}/git/trees/{tree_sha}:\n    get:\n      summary: Get a tree\n      description: |-\n        Returns a single tree using the SHA1 value for that tree.\n\n        If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n      tags:\n        - git\n      operationId: git/get-tree\n      externalDocs:\n        description: API method documentation\n        url: https://docs.github.com/rest/reference/git#get-a-tree\n      parameters:\n        - $ref: '#/components/parameters/owner'\n        - $ref: '#/components/parameters/repo'\n        - name: tree_sha\n          in: path\n          required: true\n          schema:\n            type: string\n          x-multi-segment: true\n        - name: recursive\n          description: 'Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.'\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/git-tree'\n              examples:\n                default-response:\n                  $ref: '#/components/examples/git-tree-default-response'\n                response-recursively-retrieving-a-tree:\n                  $ref: '#/components/examples/git-tree-response-recursively-retrieving-a-tree'\n        '404':\n          $ref: '#/components/responses/not_found'\n        '422':\n          $ref: '#/components/responses/validation_failed'\n      x-github:\n        githubCloudOnly: false\n        enabledForGitHubApps: true\n        category: git\n        subcategory: trees\ncomponents:\n  schemas:\n    short-blob:\n      title: Short Blob\n      description: Short Blob\n      type: object\n      properties:\n        url:\n          type: string\n        sha:\n          type: string\n      required:\n        - url\n        - sha\n    basic-error:\n      title: Basic Error\n      description: Basic Error\n      type: object\n      properties:\n        message:\n          type: string\n        documentation_url:\n          type: string\n        url:\n          type: string\n        status:\n          type: string\n    validation-error:\n      title: Validation Error\n      description: Validation Error\n      type: object\n      required:\n        - message\n        - documentation_url\n      properties:\n        message:\n          type: string\n        documentation_url:\n          type: string\n        errors:\n          type: array\n          items:\n            type: object\n            required:\n              - code\n            properties:\n              resource:\n                type: string\n              field:\n                type: string\n              message:\n                type: string\n              code:\n                type: string\n              index:\n                type: integer\n              value:\n                oneOf:\n                  - type: string\n                    nullable: true\n                  - type: integer\n                    nullable: true\n                  - type: array\n                    nullable: true\n                    items:\n                      type: string\n    blob:\n      title: Blob\n      description: Blob\n      type: object\n      properties:\n        content:\n          type: string\n        encoding:\n          type: string\n        url:\n          type: string\n          format: uri\n        sha:\n          type: string\n        size:\n          type: integer\n          nullable: true\n        node_id:\n          type: string\n        highlighted_content:\n          type: string\n      required:\n        - sha\n        - url\n        - node_id\n        - size\n        - content\n        - encoding\n    git-commit:\n      title: Git Commit\n      description: Low-level Git commit operations within a repository\n      type: object\n      properties:\n        sha:\n          description: SHA for the commit\n          example: 7638417db6d59f3c431d3e1f261cc637155684cd\n          type: string\n        node_id:\n          type: string\n        url:\n          type: string\n          format: uri\n        author:\n          description: Identifying information for the git-user\n          type: object\n          properties:\n            date:\n              description: Timestamp of the commit\n              example: '2014-08-09T08:02:04+12:00'\n              format: date-time\n              type: string\n            email:\n              type: string\n              description: Git email address of the user\n              example: monalisa.octocat@example.com\n            name:\n              description: Name of the git user\n              example: Monalisa Octocat\n              type: string\n          required:\n            - email\n            - name\n            - date\n        committer:\n          description: Identifying information for the git-user\n          type: object\n          properties:\n            date:\n              description: Timestamp of the commit\n              example: '2014-08-09T08:02:04+12:00'\n              format: date-time\n              type: string\n            email:\n              type: string\n              description: Git email address of the user\n              example: monalisa.octocat@example.com\n            name:\n              description: Name of the git user\n              example: Monalisa Octocat\n              type: string\n          required:\n            - email\n            - name\n            - date\n        message:\n          description: Message describing the purpose of the commit\n          example: 'Fix #42'\n          type: string\n        tree:\n          type: object\n          properties:\n            sha:\n              description: SHA for the commit\n              example: 7638417db6d59f3c431d3e1f261cc637155684cd\n              type: string\n            url:\n              type: string\n              format: uri\n          required:\n            - sha\n            - url\n        parents:\n          type: array\n          items:\n            type: object\n            properties:\n              sha:\n                description: SHA for the commit\n                example: 7638417db6d59f3c431d3e1f261cc637155684cd\n                type: string\n              url:\n                type: string\n                format: uri\n              html_url:\n                type: string\n                format: uri\n            required:\n              - sha\n              - url\n              - html_url\n        verification:\n          type: object\n          properties:\n            verified:\n              type: boolean\n            reason:\n              type: string\n            signature:\n              type: string\n              nullable: true\n            payload:\n              type: string\n              nullable: true\n          required:\n            - verified\n            - reason\n            - signature\n            - payload\n        html_url:\n          type: string\n          format: uri\n      required:\n        - sha\n        - node_id\n        - url\n        - html_url\n        - author\n        - committer\n        - tree\n        - message\n        - parents\n        - verification\n    git-ref:\n      title: Git Reference\n      description: Git references within a repository\n      type: object\n      properties:\n        ref:\n          type: string\n        node_id:\n          type: string\n        url:\n          type: string\n          format: uri\n        object:\n          type: object\n          properties:\n            type:\n              type: string\n            sha:\n              description: SHA for the reference\n              example: 7638417db6d59f3c431d3e1f261cc637155684cd\n              type: string\n              minLength: 40\n              maxLength: 40\n            url:\n              type: string\n              format: uri\n          required:\n            - type\n            - sha\n            - url\n      required:\n        - ref\n        - node_id\n        - url\n        - object\n    git-tag:\n      title: Git Tag\n      description: Metadata for a Git tag\n      type: object\n      properties:\n        node_id:\n          type: string\n          example: MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==\n        tag:\n          description: Name of the tag\n          example: v0.0.1\n          type: string\n        sha:\n          type: string\n          example: 940bd336248efae0f9ee5bc7b2d5c985887b16ac\n        url:\n          description: URL for the tag\n          example: https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac\n          type: string\n          format: uri\n        message:\n          description: Message describing the purpose of the tag\n          example: Initial public release\n          type: string\n        tagger:\n          type: object\n          properties:\n            date:\n              type: string\n            email:\n              type: string\n            name:\n              type: string\n          required:\n            - date\n            - email\n            - name\n        object:\n          type: object\n          properties:\n            sha:\n              type: string\n            type:\n              type: string\n            url:\n              type: string\n              format: uri\n          required:\n            - sha\n            - type\n            - url\n        verification:\n          $ref: '#/components/schemas/verification'\n      required:\n        - sha\n        - url\n        - node_id\n        - tagger\n        - object\n        - tag\n        - message\n    verification:\n      title: Verification\n      type: object\n      properties:\n        verified:\n          type: boolean\n        reason:\n          type: string\n        payload:\n          type: string\n          nullable: true\n        signature:\n          type: string\n          nullable: true\n      required:\n        - verified\n        - reason\n        - payload\n        - signature\n    git-tree:\n      title: Git Tree\n      description: The hierarchy between files in a Git repository.\n      type: object\n      properties:\n        sha:\n          type: string\n        url:\n          type: string\n          format: uri\n        truncated:\n          type: boolean\n        tree:\n          description: Objects specifying a tree structure\n          type: array\n          items:\n            type: object\n            properties:\n              path:\n                type: string\n                example: test/file.rb\n              mode:\n                type: string\n                example: '040000'\n              type:\n                type: string\n                example: tree\n              sha:\n                type: string\n                example: 23f6827669e43831def8a7ad935069c8bd418261\n              size:\n                type: integer\n                example: 12\n              url:\n                type: string\n                example: https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261\n          example:\n            - path: file.rb\n              mode: '100644'\n              type: blob\n              size: 30\n              sha: 44b4fc6d56897b048c772eb4087f854f46256132\n              url: https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132\n              properties:\n                path:\n                  type: string\n                mode:\n                  type: string\n                type:\n                  type: string\n                size:\n                  type: integer\n                sha:\n                  type: string\n                url:\n                  type: string\n              required:\n                - path\n                - mode\n                - type\n                - sha\n                - url\n                - size\n      required:\n        - sha\n        - url\n        - tree\n        - truncated\n  parameters:\n    owner:\n      name: owner\n      in: path\n      required: true\n      schema:\n        type: string\n    repo:\n      name: repo\n      in: path\n      required: true\n      schema:\n        type: string\n    commit-sha:\n      name: commit_sha\n      description: commit_sha parameter\n      in: path\n      required: true\n      schema:\n        type: string\n      x-multi-segment: true\n    per-page:\n      name: per_page\n      description: Results per page (max 100)\n      in: query\n      schema:\n        type: integer\n        default: 30\n    page:\n      name: page\n      description: Page number of the results to fetch.\n      in: query\n      schema:\n        type: integer\n        default: 1\n  responses:\n    forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/basic-error'\n    not_found:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/basic-error'\n    conflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/basic-error'\n    validation_failed:\n      description: Validation failed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/validation-error'\n  securitySchemes: {}\n  callbacks: {}\n  examples:\n    short-blob:\n      value:\n        url: https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\n        sha: 3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\n    blob:\n      value:\n        content: Q29udGVudCBvZiB0aGUgYmxvYg==\n        encoding: base64\n        url: https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\n        sha: 3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\n        size: 19\n        node_id: Q29udGVudCBvZiB0aGUgYmxvYg==\n    git-commit:\n      value:\n        sha: 7638417db6d59f3c431d3e1f261cc637155684cd\n        node_id: MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\n        url: https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\n        author:\n          date: '2014-11-07T22:01:45Z'\n          name: Monalisa Octocat\n          email: octocat@github.com\n        committer:\n          date: '2014-11-07T22:01:45Z'\n          name: Monalisa Octocat\n          email: octocat@github.com\n        message: my commit message\n        tree:\n          url: https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132\n          sha: 827efc6d56897b048c772eb4087f854f46256132\n        parents:\n          - url: https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0\n            sha: 7d1b31e74ee336d15cbd21741bc88a537ed063a0\n            html_url: https://github.com/octocat/Hello-World/commit/7d1b31e74ee336d15cbd21741bc88a537ed063a0\n        verification:\n          verified: false\n          reason: unsigned\n          signature: null\n          payload: null\n        html_url: https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\n    git-commit-2:\n      value:\n        sha: 7638417db6d59f3c431d3e1f261cc637155684cd\n        node_id: MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\n        url: https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\n        html_url: https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\n        author:\n          date: '2014-11-07T22:01:45Z'\n          name: Monalisa Octocat\n          email: octocat@github.com\n        committer:\n          date: '2014-11-07T22:01:45Z'\n          name: Monalisa Octocat\n          email: octocat@github.com\n        message: added readme, because im a good github citizen\n        tree:\n          url: https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\n          sha: 691272480426f78a0138979dd3ce63b77f706feb\n        parents:\n          - url: https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\n            sha: 1acc419d4d6a9ce985db7be48c6349a0475975b5\n            html_url: https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\n        verification:\n          verified: false\n          reason: unsigned\n          signature: null\n          payload: null\n    git-ref-items:\n      value:\n        - ref: refs/heads/feature-a\n          node_id: MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWE=\n          url: https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-a\n          object:\n            type: commit\n            sha: aa218f56b14c9653891f9e74264a383fa43fefbd\n            url: https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd\n        - ref: refs/heads/feature-b\n          node_id: MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWI=\n          url: https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-b\n          object:\n            type: commit\n            sha: 612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac\n            url: https://api.github.com/repos/octocat/Hello-World/git/commits/612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac\n    git-ref:\n      value:\n        ref: refs/heads/featureA\n        node_id: MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==\n        url: https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA\n        object:\n          type: commit\n          sha: aa218f56b14c9653891f9e74264a383fa43fefbd\n          url: https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd\n    git-tag:\n      value:\n        node_id: MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==\n        tag: v0.0.1\n        sha: 940bd336248efae0f9ee5bc7b2d5c985887b16ac\n        url: https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac\n        message: initial version\n        tagger:\n          name: Monalisa Octocat\n          email: octocat@github.com\n          date: '2014-11-07T22:01:45Z'\n        object:\n          type: commit\n          sha: c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\n          url: https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\n        verification:\n          verified: false\n          reason: unsigned\n          signature: null\n          payload: null\n    git-tree:\n      value:\n        sha: cd8274d15fa3ae2ab983129fb037999f264ba9a7\n        url: https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7\n        tree:\n          - path: file.rb\n            mode: '100644'\n            type: blob\n            size: 132\n            sha: 7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\n            url: https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\n        truncated: true\n    git-tree-default-response:\n      summary: Default response\n      value:\n        sha: 9fb037999f264ba9a7fc6274d15fa3ae2ab98312\n        url: https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312\n        tree:\n          - path: file.rb\n            mode: '100644'\n            type: blob\n            size: 30\n            sha: 44b4fc6d56897b048c772eb4087f854f46256132\n            url: https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132\n          - path: subdir\n            mode: '040000'\n            type: tree\n            sha: f484d249c660418515fb01c2b9662073663c242e\n            url: https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e\n          - path: exec_file\n            mode: '100755'\n            type: blob\n            size: 75\n            sha: 45b983be36b73c0788dc9cbcb76cbb80fc7bb057\n            url: https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057\n        truncated: false\n    git-tree-response-recursively-retrieving-a-tree:\n      summary: Response recursively retrieving a tree\n      value:\n        sha: fc6274d15fa3ae2ab983129fb037999f264ba9a7\n        url: https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7\n        tree:\n          - path: subdir/file.txt\n            mode: '100644'\n            type: blob\n            size: 132\n            sha: 7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\n            url: https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\n        truncated: false\n  requestBodies: {}\n  headers:\n    link:\n      example: \u003chttps://api.github.com/resource?page=2\u003e; rel=\"next\", \u003chttps://api.github.com/resource?page=5\u003e; rel=\"last\"\n      schema:\n        type: string\n  links: {}\n  x-stackQL-resources:\n    repos_git_blobs:\n      id: github.repo_git.repos_git_blobs\n      name: repos_git_blobs\n      title: Repos_git_blobs\n      methods:\n        create_blob:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1blobs/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        get_blob:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1blobs~1{file_sha}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_blobs/methods/get_blob'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/repos_git_blobs/methods/create_blob'\n        update: []\n        delete: []\n    repos_git_commits:\n      id: github.repo_git.repos_git_commits\n      name: repos_git_commits\n      title: Repos_git_commits\n      methods:\n        create_commit:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1commits/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        get_commit:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1commits~1{commit_sha}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_commits/methods/get_commit'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/repos_git_commits/methods/create_commit'\n        update: []\n        delete: []\n    repos_git_matching_refs:\n      id: github.repo_git.repos_git_matching_refs\n      name: repos_git_matching_refs\n      title: Repos_git_matching_refs\n      methods:\n        list_matching_refs:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1matching-refs~1{ref}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_matching_refs/methods/list_matching_refs'\n        insert: []\n        update: []\n        delete: []\n    repos_git_ref:\n      id: github.repo_git.repos_git_ref\n      name: repos_git_ref\n      title: Repos_git_ref\n      methods:\n        get_ref:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1ref~1{ref}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_ref/methods/get_ref'\n        insert: []\n        update: []\n        delete: []\n    repos_git_refs:\n      id: github.repo_git.repos_git_refs\n      name: repos_git_refs\n      title: Repos_git_refs\n      methods:\n        create_ref:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1refs/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        update_ref:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1refs~1{ref}/patch'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        delete_ref:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1refs~1{ref}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '204'\n      sqlVerbs:\n        select: []\n        insert:\n          - $ref: '#/components/x-stackQL-resources/repos_git_refs/methods/create_ref'\n        update: []\n        delete:\n          - $ref: '#/components/x-stackQL-resources/repos_git_refs/methods/delete_ref'\n    repos_git_tags:\n      id: github.repo_git.repos_git_tags\n      name: repos_git_tags\n      title: Repos_git_tags\n      methods:\n        create_tag:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1tags/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        get_tag:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1tags~1{tag_sha}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_tags/methods/get_tag'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/repos_git_tags/methods/create_tag'\n        update: []\n        delete: []\n    repos_git_trees:\n      id: github.repo_git.repos_git_trees\n      name: repos_git_trees\n      title: Repos_git_trees\n      methods:\n        create_tree:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1trees/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '201'\n        get_tree:\n          operation:\n            $ref: '#/paths/~1repos~1{owner}~1{repo}~1git~1trees~1{tree_sha}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/repos_git_trees/methods/get_tree'\n        insert:\n          - $ref: '#/components/x-stackQL-resources/repos_git_trees/methods/create_tree'\n        update: []\n        delete: []\nopenapi: 3.0.3\nservers:\n  - url: https://api.github.com\ntags:\n  - name: actions\n    description: Endpoints to manage GitHub Actions using the REST API.\n  - name: activity\n    description: Activity APIs provide access to notifications, subscriptions, and timelines.\n  - name: apps\n    description: Information for integrations and installations.\n  - name: billing\n    description: Monitor charges and usage from Actions and Packages.\n  - name: checks\n    description: Rich interactions with checks run by your integrations.\n  - name: code-scanning\n    description: Retrieve code scanning alerts from a repository.\n  - name: codes-of-conduct\n    description: Insight into codes of conduct for your communities.\n  - name: codespaces\n    description: Endpoints to manage Codespaces using the REST API.\n  - name: emojis\n    description: List emojis available to use on GitHub.\n  - name: enterprise-admin\n    description: Administer a GitHub enterprise.\n  - name: dependabot\n    description: Endpoints to manage Dependabot.\n  - name: gists\n    description: View, modify your gists.\n  - name: git\n    description: Raw Git functionality.\n  - name: gitignore\n    description: View gitignore templates\n  - name: interactions\n    description: Owner or admin management of users interactions.\n  - name: issues\n    description: Interact with GitHub Issues.\n  - name: licenses\n    description: View various OSS licenses.\n  - name: markdown\n    description: Render GitHub flavored markdown\n  - name: meta\n    description: Endpoints that give information about the API.\n  - name: migrations\n    description: Move projects to or from GitHub.\n  - name: oauth-authorizations\n    description: Manage access of OAuth applications\n  - name: orgs\n    description: Interact with GitHub Orgs.\n  - name: packages\n    description: Manage packages for authenticated users and organizations.\n  - name: projects\n    description: Interact with GitHub Projects.\n  - name: pulls\n    description: Interact with GitHub Pull Requests.\n  - name: rate-limit\n    description: Check your current rate limit status\n  - name: reactions\n    description: Interact with reactions to various GitHub entities.\n  - name: repos\n    description: Interact with GitHub Repos.\n  - name: scim\n    description: Provisioning of GitHub organization membership for SCIM-enabled providers.\n  - name: search\n    description: Look for stuff on GitHub.\n  - name: secret-scanning\n    description: Retrieve secret scanning alerts from a repository.\n  - name: server-statistics\n    description: GHES statistics\n  - name: teams\n    description: Interact with GitHub Teams.\n  - name: users\n    description: Interact with and view information about users and also current user.\nexternalDocs:\n  description: GitHub v3 REST API\n  url: https://docs.github.com/rest/\ninfo:\n  version: 1.1.4\n  title: GitHub v3 REST API - repo_git\n  description: Raw Git functionality.\n  license:\n    name: MIT\n    url: https://spdx.org/licenses/MIT\n  termsOfService: https://docs.github.com/articles/github-terms-of-service\n  contact:\n    name: Support\n    url: https://support.github.com/contact?tags=dotcom-rest-api\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/github/v0.2.0/services/repo_git.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/github/v0.2.0/services/repo_git.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}