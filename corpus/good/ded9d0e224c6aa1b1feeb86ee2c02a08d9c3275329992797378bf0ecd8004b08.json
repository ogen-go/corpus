{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/therealexpertai/nlapi-openapi-specification"
		},
		"file": {
			"name": "nlapi.yaml",
			"size": 0,
			"path": "nlapi.yaml",
			"byteSize": 34587,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: api.inquiry@expert.ai\n    name: expert.ai\n    url: 'https://expert.ai/'\n  description: \u003e\n    Natural Language API provides a comprehensive set of natural language\n    understanding capabilities based on expert.ai technology:\n    \u003cul\u003e\n      \u003cli\u003eContext based document analysis, comprising:\u003c/li\u003e\n      \u003cul\u003e\n        \u003cli\u003eDeep linguistic analysis, which, in turn, comprises:\u003c/li\u003e\n        \u003cul\u003e\n          \u003cli\u003eText subdivision\u003c/li\u003e\n          \u003cli\u003ePart-of-speech tagging\u003c/li\u003e\n          \u003cli\u003eMorphological analysis\u003c/li\u003e\n          \u003cli\u003eLemmatization\u003c/li\u003e\n          \u003cli\u003eSyntactic analysis\u003c/li\u003e\n          \u003cli\u003eSemantic analysis\u003c/li\u003e\n        \u003c/ul\u003e\n        \u003cli\u003eKeyphrase extraction\u003c/li\u003e\n        \u003cli\u003eNamed entity recognition\u003c/li\u003e\n        \u003cli\u003eRelation extraction\u003c/li\u003e\n        \u003cli\u003eSentiment analysis\u003c/li\u003e\n      \u003c/ul\u003e\n      \u003cli\u003eTaxonomy based document classification\u003c/li\u003e\n      \u003cli\u003eInformation detection performed by detectors\u003c/li\u003e\n    \u003c/ul\u003e\n  title: expert.ai Natural Language API\n  version: v2\nexternalDocs:\n  description: API documentation\n  url: 'https://docs.expert.ai/nlapi/v2/'\nservers:\n  - url: 'https://nlapi.expert.ai/v2'\ntags:\n  - description: Document analysis API endpoints\n    name: Document analysis\n  - description: Document classification API endpoints\n    name: Document classification\n  - description: Information detection API endpoints\n    name: Information detection\npaths:\n  /analyze/{context}/{language}:\n    post:\n      description: Full analysis (i.e., sum of all available partial analyses) of the posted text\n      parameters:\n        - description: Context name; use the `contexts` resource to discover available contexts\n          in: path\n          name: context\n          required: true\n          schema:\n            type: string\n        - description: Document language (code)\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n            enum:\n              - de\n              - en\n              - es\n              - fr\n              - it\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalysisRequest'\n        description: The document to be analyzed\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzeResponse'\n          description: Resource response\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Full analysis\n      tags:\n        - Document analysis\n  /analyze/{context}/{language}/{analysis}:\n    post:\n      description: |\n        Specific analysis of the posted text.\n        Available analyses are:\n        \u003cul\u003e\n          \u003cli\u003e\u003cstrong\u003edisambiguation\u003c/strong\u003e: linguistic analysis (text subdivision, part-of-speech tagging, morphological analysis, lemmatization, syntactic analysis and semantic analysis)\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003erelevants\u003c/strong\u003e: keyphrase extraction\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003eentities\u003c/strong\u003e: named entity recognition\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003erelations\u003c/strong\u003e: relation extraction\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003esentiment\u003c/strong\u003e: sentiment analysis\u003c/li\u003e\n        \u003c/ul\u003e\n      parameters:\n        - description: Context name; use the `contexts` resource to discover available contexts\n          in: path\n          name: context\n          required: true\n          schema:\n            type: string\n        - description: Document language (code)\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n            enum:\n              - de\n              - en\n              - es\n              - fr\n              - it\n        - description: Analysis name; use the `contexts` resource to determine if the context provides that analysis for the chosen language\n          in: path\n          name: analysis\n          required: true\n          schema:\n            enum:\n              - disambiguation\n              - relevants\n              - entities\n              - sentiment\n              - relations\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalysisRequest'\n        description: The document to be analyzed\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnalyzeResponse'\n          description: Resource response\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Specific partial analysis\n      tags:\n        - Document analysis\n  /categorize/{taxonomy}/{language}:\n    post:\n      description: Classification of the posted text\n      parameters:\n        - description: Taxonomy name; use the `taxonomies` resource to discover available taxonomies\n          in: path\n          name: taxonomy\n          required: true\n          schema:\n            type: string\n        - description: Document language (code); use the `taxonomies` resource to discover the languages for which the taxonomy is available\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n            enum:\n              - de\n              - en\n              - es\n              - fr\n              - it\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalysisRequest'\n        description: The document to be classified\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorizeResponse'\n          description: Resource response\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Classification\n      tags:\n        - Document classification\n  /contexts:\n    get:\n      description: Information about available contexts\n      responses:\n        '200':\n          $ref: '#/components/responses/200Contexts'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Contexts information\n      tags:\n        - Document analysis\n  /taxonomies:\n    get:\n      description: Information about available taxonomies\n      responses:\n        '200':\n          $ref: '#/components/responses/200Taxonomies'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Taxonomies information\n      tags:\n        - Document classification\n  /taxonomies/{taxonomy}/{language}:\n    get:\n      description: Detailed information about a taxonomy for a given language\n      parameters:\n        - description: Taxonomy name\n          in: path\n          name: taxonomy\n          required: true\n          schema:\n            type: string         \n        - description: Taxonomy language (code); use the `taxonomies` resource to discover the languages that the taxonomy supports\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n            enum:\n              - de\n              - en\n              - es\n              - fr\n              - it\n      responses:\n        '200':\n          $ref: '#/components/responses/200Taxonomy'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Taxonomy tree\n      tags:\n        - Document classification\n  /detect/{detector}/{language}:\n    post:\n      description: Information detection on the posted text\n      parameters:\n        - description: Detector name; use the `detectors` resource to discover available detectors\n          in: path\n          name: detector\n          required: true\n          schema:\n            type: string\n        - description: Document language (code); use the `detectors` resource to discover the languages for which the detector is available\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n            enum:\n              - de\n              - en\n              - es\n              - fr\n              - it\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalysisRequest'\n        description: The document on which to perform information detection\n      responses:\n        '200':\n          description: Resource response\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Information detection\n      tags:\n        - Information detection\n  /detectors:\n    get:\n      description: Information about available detectors\n      responses:\n        '200':\n          $ref: '#/components/responses/200Detectors'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Detectors information\n      tags:\n        - Information detection\ncomponents:\n  responses:\n    200Analyze:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AnalyzeResponse'\n    200Contexts:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ContextsResponse'\n    200Categorize:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CategorizeResponse'\n    200Taxonomies:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TaxonomiesResponse'\n    200Taxonomy:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TaxonomyResponse'\n    200Detectors:\n      description: Resource response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DetectorsResponse'\n  schemas:\n    DocumentPosition:\n      description: Position\n      properties:\n        start:\n          description: Zero-based position of the first character\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the character after the last\n          format: int64\n          type: integer\n    VirtualSyncon:\n      description: A concept that does not exist in the Knowledge Graph but heuristics recognized as a type of a known parent concept.\n      properties:\n        id:\n          description: ID used to mark all the occurrences of the virtual concept in the text\n          format: int64\n          type: integer\n        parent:\n          description: \u003e-\n            Parent concept; ID is used to look up Knowledge Graph data in the `knowledge`\n            array\n          format: int64\n          type: integer\n    Atom:\n      description: Atom info\n      properties:\n        start:\n          description: Zero-based position of the first character of the atom\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the atom\n          format: int64\n          type: integer\n        type:\n          description: Expert.ai type\n          type: string\n        lemma:\n          description: Lemma\n          type: string\n    Dependency:\n      description: Dependency info\n      properties:\n        id:\n          description: Zero-based cardinal number of the token\n          format: int64\n          type: integer\n        head:\n          description: Number of the head token\n          format: int64\n          type: integer\n        label:\n          description: \u003e-\n            (\u003ca\n            href='https://universaldependencies.org/u/dep/#universal-dependency-relations'\n            target='_blank'\u003eDependency relation\u003c/a\u003e between the token and the\n            head token\n          type: string\n    Token:\n      description: Token info\n      properties:\n        start:\n          description: Zero-based position of the first character of the token\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the token\n          format: int64\n          type: integer\n        type:\n          description: Expert.ai type\n          type: string\n        pos:\n          description: \u003e-\n            \u003ca href='https://universaldependencies.org/u/pos/'\u003eUniversal\n            Dependencies part-of-speech tag\u003c/a\u003e\n          type: string\n        lemma:\n          description: Lemma\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        vsyn:\n          $ref: '#/components/schemas/VirtualSyncon'          \n        morphology:\n          description: \u003e-\n            A semicolon separated list of \u003ca\n            href='https://universaldependencies.org/format.html#morphological-annotation'\u003eCoNLL-U\n            format\u003c/a\u003e morphological features\n          type: string\n        dependency:\n          $ref: '#/components/schemas/Dependency'\n        atoms:\n          description: Atoms that make up the token\n          type: array\n          items:\n            $ref: '#/components/schemas/Atom'\n        paragraph:\n          description: Paragraph index in the `paragraphs` array\n          format: int64\n          type: integer\n        sentence:\n          description: Sentence index in the `sentences` array\n          format: int64\n          type: integer\n        phrase:\n          description: Phrase index in the `phrases` array\n          format: int64\n          type: integer\n    Phrase:\n      description: Phrase info\n      properties:\n        start:\n          description: Zero-based position of the first character of the phrase\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the phrase\n          format: int64\n          type: integer\n        tokens:\n          description: \u003e-\n            Indexes (in the `tokens` array) of the tokens that make up the\n            phrase\n          type: array\n          items:\n            description: Token index\n            format: int32\n            type: integer\n          uniqueItems: true\n        type:\n          description: Phrase type\n          type: string\n    Sentence:\n      description: Sentence info\n      properties:\n        start:\n          description: Zero-based position of the first character of the sentence\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the sentence\n          format: int64\n          type: integer\n        phrases:\n          description: \u003e-\n            Indexes (in the `phrases` array) of the phrases that make up the\n            sentence\n          type: array\n          items:\n            description: Phrase index\n            format: int32\n            type: integer\n          uniqueItems: true\n    Paragraph:\n      description: Paragraph info\n      properties:\n        start:\n          description: Zero-based position of the first character of the paragraph\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the paragraph\n          format: int64\n          type: integer\n        sentences:\n          description: \u003e-\n            Indexes (in the `sentences` array) of the sentences that make up the\n            paragraph\n          type: array\n          items:\n            description: Sentence index\n            format: int32\n            type: integer\n          uniqueItems: true\n    MainLemma:\n      description: Main lemma info\n      properties:\n        value:\n          description: Lemma\n          type: string\n        score:\n          description: Score assigned to the lemma to represent its relevance\n          format: float\n          type: number\n        positions:\n          description: Positions of lemma occurrences\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n    MainSyncon:\n      description: Main syncon info\n      properties:\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        lemma:\n          description: Lemma\n          type: string\n        score:\n          description: Score assigned to the syncon to represent its relevance\n          format: float\n          type: number\n        positions:\n          description: Positions of the expressions of the syncon\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n    MainPhrase:\n      description: Main phrase info\n      properties:\n        value:\n          description: Phrase text\n          type: string\n        score:\n          description: Score assigned to the phrase to represent its relevance\n          format: float\n          type: number\n        positions:\n          description: Positions of phrase occurrences\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n    MainSentence:\n      description: Main sentence\n      properties:\n        value:\n          description: Sentence text\n          type: string\n        score:\n          description: Score assigned to the sentence to represent its relevance\n          format: float\n          type: number\n        start:\n          description: Zero-based position of the first character of the sentence\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the first character after the sentence\n          format: int64\n          type: integer\n    DocumentTopic:\n      description: Knowledge Graph topic info\n      properties:\n        id:\n          description: Language-independent topic ID\n          format: int64\n          type: integer\n        label:\n          description: Topic name\n          type: string\n        score:\n          description: Score assigned to the topic to represent its relevance\n          format: float\n          type: number\n        winner:\n          description: True if the topic is deemed particularly relevant\n          type: boolean\n    InferredAttribute:\n      description: Inferred attribute\n      properties:\n        attribute:\n          description: Attribute name\n          type: string\n        lemma:\n          description: Lemma\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          type: integer\n          format: int64\n        type:\n          description: Attribute type\n          type: string  \n        attributes:\n          description: Attribute's attributes\n          type: array\n          items:\n            $ref: '#/components/schemas/InferredAttribute'\n    Entity:\n      description: Entity info\n      properties:\n        type:\n          description: Entity type\n          type: string\n        lemma:\n          description: Base form (lemma) of the entity name\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        positions:\n          description: Positions of the entity's mentions\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n        relevance:\n          description: Entity relevance\n          format: int64\n          type: integer\n        attributes:\n          description: Entity attributes inferred from the context or from the Knowledge Graph\n          type: array\n          items:\n            $ref: '#/components/schemas/InferredAttribute'\n    SentimentItem:\n      description: Item or chain of items expressing sentiment\n      properties:\n        lemma:\n          description: Lemma\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        sentiment:\n          description: Item/chain sentiment score\n          type: number\n          format: float\n        items:\n          description: Items expressing sentiment\n          type: array\n          items:\n            $ref: '#/components/schemas/SentimentItem'\n    RelationVerb:\n      description: Verb of a relation\n      properties:\n        text:\n          description: Verb text\n          type: string\n        lemma:\n          description: Lemma\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        type:\n          description: Type\n          type: string\n        phrase:\n          description: Phrase index in the `phrases` array\n          format: int64\n          type: integer\n        relevance:\n          description: Relevance\n          format: int64\n          type: integer\n    AnalysisRequest:\n      description: Request\n      properties:\n        document:\n          $ref: '#/components/schemas/Document'\n    Document:\n      description: Document\n      properties:\n        text:\n          description: The document's text\n          type: string\n    Property:\n      description: Syncon property\n      properties:\n        type:\n          description: Property type\n          type: string\n        value:\n          description: Property value\n          type: string\n    KnowledgeEntry:\n      description: Knowledge Graph data for a syncon\n      properties:\n        syncon:\n          description: Syncon ID\n          format: int64\n          type: integer\n        label:\n          description: Textual rendering of the general conceptual category for the token in the Knowledge Graph\n          type: string\n        properties:\n          description: Syncon extended properties\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    RelatedItem:\n      description: In a relation, a term that's directly or indirectly related to the verb\n      properties:\n        relation:\n          description: Verb-item relation\n          type: string\n        text:\n          description: Item text\n          type: string\n        lemma:\n          description: Lemma\n          type: string\n        syncon:\n          description: ID used to look up Knowledge Graph data in the `knowledge` array\n          format: int64\n          type: integer\n        vsyn:\n          $ref: '#/components/schemas/VirtualSyncon'\n        type:\n          description: Type\n          type: string\n        phrase:\n          description: Phrase index in the `phrases` array\n          format: int64\n          type: integer\n        relevance:\n          description: Relevance\n          format: int64\n          type: integer\n        related:\n          description: Related terms\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedItem'\n    Relation:\n      description: Verb-mediated relation\n      properties:\n        verb:\n          $ref: '#/components/schemas/RelationVerb'\n        related:\n          description: Related items\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedItem'\n    AnalyzeDocument:\n      description: Analysis data\n      properties:\n        version:\n          description: Service version\n          type: string\n        content:\n          description: Analyzed text\n          type: string\n        language:\n          description: Text language\n          type: string\n        paragraphs:\n          description: Paragraphs\n          type: array\n          items:\n            $ref: '#/components/schemas/Paragraph'\n        sentences:\n          description: Sentences\n          type: array\n          items:\n            $ref: '#/components/schemas/Sentence'\n        phrases:\n          description: Phrases\n          type: array\n          items:\n            $ref: '#/components/schemas/Phrase'\n        tokens:\n          description: Tokens\n          type: array\n          items:\n            $ref: '#/components/schemas/Token'\n        mainSentences:\n          description: Main sentences\n          type: array\n          items:\n            $ref: '#/components/schemas/MainSentence'\n        mainPhrases:\n          description: Main phrases\n          type: array\n          items:\n            $ref: '#/components/schemas/MainPhrase'\n        mainLemmas:\n          description: Main lemmas\n          type: array\n          items:\n            $ref: '#/components/schemas/MainLemma'\n        mainSyncons:\n          description: Main syncons\n          type: array\n          items:\n            $ref: '#/components/schemas/MainSyncon'\n        entities:\n          description: Entities\n          type: array\n          items:\n            $ref: '#/components/schemas/Entity'\n        topics:\n          description: Knowledge Graph topics\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentTopic'\n        knowledge:\n          description: Knowledge Graph syncons data\n          type: array\n          items:\n            $ref: '#/components/schemas/KnowledgeEntry'\n        sentiment:\n          description: Sentiment\n          properties:\n            overall:\n              description: Overall text sentiment score\n              type: number\n              format: float;\n            negativity:\n              description: Text negativity\n              type: number\n              format: float\n            positivity:\n              description: Text positivity\n              type: number\n              format: float\n            items:\n              description: Items expressing sentiment\n              type: array\n              items:\n                $ref: '#/components/schemas/SentimentItem'\n        relations:\n          description: Verb-mediated relations\n          type: array\n          items:\n            $ref: '#/components/schemas/Relation'\n    ServiceError:\n      description: Error information\n      properties:\n        code:\n          description: Error code\n          type: string\n        message:\n          description: Error message\n          type: string\n    AnalyzeResponse:\n      description: Analysis resource response\n      properties:\n        success:\n          description: Operation completed successfully (true/false)\n          type: boolean\n        errors:\n          description: Service errors\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceError'\n        data:\n          $ref: '#/components/schemas/AnalyzeDocument'\n    CategorizeResponse:\n      description: Classification resource response\n      properties:\n        success:\n          description: Operation completed successfully (true/false)\n          type: boolean\n        errors:\n          description: Service errors\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceError'\n        data:\n          $ref: '#/components/schemas/CategorizeDocument'\n    CategorizeDocument:\n      description: Categorization data\n      properties:\n        version:\n          description: Service version\n          type: string\n        language:\n          description: Text language\n          type: string\n        categories:\n          description: Categories\n          type: array\n          items:\n            $ref: '#/components/schemas/Category'\n    Category:\n      description: Category\n      properties:\n        id:\n          description: Category ID\n          type: string\n        label:\n          description: Category label\n          type: string\n        hierarchy:\n          description: Hierarchical path\n          type: array\n          items:\n            type: string\n        score:\n          description: Score assigned to the category to represent its relevance\n          format: int32\n          type: integer\n        winner:\n          description: True if the category is deemed particularly relevant\n          type: boolean\n        namespace:\n          description: Name of the software package containing the reference taxonomy\n          type: string\n        frequency:\n          description: \u003e-\n            Score expressed as a percentage of the sum of the scores of all the\n            candidate categories, winners and not (see the **score** property)\n          format: float\n          type: number\n        positions:\n          description: \u003e-\n            Positions of the portions of text that contributed to the selection\n            of the category\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n    ContextLanguageInfo:\n      description: Information about a supported language and available analyses\n      properties:\n        code:\n          description: Language code\n          type: string\n        name:\n          description: Language name\n          type: string\n        analyses:\n          description: Available analyses\n          type: array\n          items:\n            type: string \n    ContextInfo:\n      description: Information about a context\n      properties:\n        name:\n          description: Context name\n          type: string\n        description:\n          description: Context description\n          type: string\n        languages:\n          description: Information about supported languages and available analyses\n          type: array\n          items:\n            $ref: '#/components/schemas/ContextLanguageInfo'\n    LanguageInfo:\n      description: Information about a supported language\n      properties:\n        code:\n          description: Language code\n          type: string\n        name:\n          description: Language name\n          type: string\n    TaxonomyInfo:\n      description: Summary information about a taxonomy\n      properties:\n        name:\n          description: Taxonomy name\n          type: string\n        description:\n          description: Taxonomy description\n          type: string\n        contract:\n          description: OpenAPI document describing extra ways to use the taxonomy and their outputs\n          type: string\n        languages:\n          description: Supported languages\n          type: array\n          items:\n            $ref: '#/components/schemas/LanguageInfo'\n    TaxonomyCategory:\n      description: Taxonomy category\n      properties:\n        id:\n          description: Category ID\n          type: string\n        label:\n          description: Category label\n          type: string\n        categories:\n          description: Sub-categories\n          type: array\n          items:\n            $ref: '#/components/schemas/TaxonomyCategory'\n    Taxonomy:\n       description: A taxonomy's categories tree\n       properties:\n         namespace:\n           description: Name of the software package containing the reference taxonomy\n           type: string\n         taxonomy:\n           description: Categories tree\n           type: array\n           items:\n             $ref: '#/components/schemas/TaxonomyCategory'\n    DetectorInfo:\n      description: Summary information about a detector\n      properties:\n        name:\n          description: Detector name\n          type: string\n        description:\n          description: Detector description\n          type: string\n        contract:\n          description: OpenAPI document describing the use of the detector and its output\n          type: string\n        languages:\n          description: Supported languages\n          type: array\n          items:\n            $ref: '#/components/schemas/LanguageInfo'\n    ContextsResponse:\n      description: Available contexts\n      properties:\n        contexts:\n          description: List of contexts' information\n          type: array\n          items:\n            $ref: '#/components/schemas/ContextInfo'\n    TaxonomiesResponse:\n      description: Available taxonomies\n      properties:\n        texonomies:\n          description: List of taxonomies' information\n          type: array\n          items:\n            $ref: '#/components/schemas/TaxonomyInfo'\n    TaxonomyResponse:\n      description: Taxonomy categories\n      properties:\n        success:\n          description: Operation completed successfully (true/false)\n          type: boolean\n        errors:\n          description: Service errors\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceError'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Taxonomy'\n    DetectorsResponse:\n      description: Available detectors\n      properties:\n        detectors:\n          description: List of detectors' information\n          type: array\n          items:\n            $ref: '#/components/schemas/DetectorInfo'\n  securitySchemes:\n    bearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http",
			"canonicalURL": "/github.com/therealexpertai/nlapi-openapi-specification@2544717a414639e3814f158ec6ef6e33e7a08b7f/-/blob/nlapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/therealexpertai/nlapi-openapi-specification/blob/2544717a414639e3814f158ec6ef6e33e7a08b7f/nlapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}