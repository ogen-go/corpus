{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/esoni88/codemotion20-references-and-demo"
		},
		"file": {
			"name": "book-store.yaml",
			"size": 0,
			"path": "contract/book-store.yaml",
			"byteSize": 7241,
			"content": "openapi: 3.0.2\ninfo:\n    title: bookstore\n    version: 1.0.0\n    description: \u003e-\n        This is a sample server BookStore API\n    contact:\n      name: API Support\n      url: https://italiancoders/support\n      email: italiancoders@gmail.com\n    license:\n        name: Apache 2.0\n        url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: https://italiancoders.it/v1\n    description: Production server\n  - url: https://italiancoders-qa.it/v1\n    description: QA server\n\n# Apply the security globally to all operations\nsecurity:\n  - bearerAuth: []     \npaths:\n  /login:\n    post:\n      operationId: login\n      # declare /login as public endpoint\n      security: []\n      tags:\n        - Authentication\n      description: \u003e\n        Obtain jwt token to access to authenticated APIs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n              required:\n                - username\n                - password\n        required: true\n      responses:\n        '200':\n          description: The session object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n        '400':\n          description: Login failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n                \n  /books:\n    get:\n      operationId: findBooks\n      tags:\n        - Book\n      description: \u003e\n        Find Books\n      parameters:\n        - name: offset\n          in: query\n          required: true\n          description: The number of items to skip before starting to collect the result set\n          schema:\n            type: integer\n            minimum: 0\n        - name: limit\n          in: query\n          required: true\n          description: The numbers of items to return\n          schema:\n            type: integer            \n            minimum: 1\n            maximum: 100\n        - name: genre\n          in: query\n          required: false\n          description: genre of the book\n          schema:\n            $ref: '#/components/schemas/BookGenre'   \n        - name: search\n          in: query\n          required: false\n          description: Free Search (example author name, book title)\n          schema:\n            type: string\n            maxLength: 50\n      responses:\n        '200':\n          description: The Books found\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Book'                \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'                \n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'   \n    post:\n      operationId: addBook\n      tags:\n        - Book\n      description: Insert a book in the platform\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Book'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Book'               \n        required: true\n      responses:\n        '201':\n          description: Book Created      \n          content:\n          #content negotiation to support multiple media types\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Book'  \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Book'                \n        '400':\n          description: Unable to create a Book\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'               \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'                \ncomponents:\n# 1) Define the security scheme type (HTTP bearer)\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      #Authorization: Bearer \u003ctoken\u003e\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  schemas:\n    AccessToken:\n      type: object\n      properties:\n        accessToken:\n          type: string             \n        expiresAt: \n          type: string\n          format: date-time\n      required:\n         - accessToken\n         - expiresAt\n      example:\n        accessToken: xuhwiuhwidhhdwuwihduh\n        expiresAt: 2018-09-15T15:53:00+02:00        \n    Error:\n      description: Error Details\n      #custom property\n      x-docs-additionalinfo: error_table.html\n      properties:\n        code:\n          type: string             \n        message: \n          type: string\n          format: date-time\n      required: \n         - code\n         - message\n      example:\n        code: 1010\n        message: Invalid User\n    Author:\n      description: Author Infos related a Book\n      properties:\n        fullname:\n          type: string\n          minLength: 3\n          maxLength: 30          \n        country:\n          description: Nationality of the author\n          type: string\n          minLength: 3\n          maxLength: 30\n        birthYear:\n          type: string\n          format: date\n        gender:\n          description: gender of the author if it is specified\n          type: string\n          enum:\n            - MALE\n            - FEMALE\n            - UNDEFINED\n      required: \n         - fullname\n      example:\n        fullname: Luigi Pirandello\n        country: Italy\n        birthYear: 1986-06-28\n        gender: MALE\n    BookGenre:\n        description: Genre categories of a book\n        enum:\n           - FANTASY\n           - HORROR\n           - CLASSIC\n           - HOMOR\n           - OTHER\n        type: string\n        example: CLASSIC        \n    Book:\n      description: Author Infos related a Book\n      properties:\n        id:\n          description: Unique Id of the book calculated by the system\n          type: integer\n          format: int64\n          readOnly: true\n        title:\n          description: Title Of the Book\n          type: string\n          minLength: 3\n          maxLength: 50          \n        totalPages:\n          description: No of pages\n          type: integer\n          format: int32\n        publishingHouse:\n          description: Publishing House of the book\n          type: string\n        genre:\n          $ref: '#/components/schemas/BookGenre'\n        author:\n          $ref: '#/components/schemas/Author'          \n      required: \n         - id\n         - title\n         - totalPages\n         - publishingHouse\n         - author\n      example:\n        id: 1\n        title: Il fu Mattia Pascal\n        totalPages: 328\n        publishingHouse: Mondadori\n        author:\n          fullname: Luigi Pirandello\n          country: Italy\n          birthYear: 1986-06-28\n          gender: MALE",
			"canonicalURL": "/github.com/esoni88/codemotion20-references-and-demo@1088232f120a3fc400f352618f6bd2d2f569eddb/-/blob/contract/book-store.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/esoni88/codemotion20-references-and-demo/blob/1088232f120a3fc400f352618f6bd2d2f569eddb/contract/book-store.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}