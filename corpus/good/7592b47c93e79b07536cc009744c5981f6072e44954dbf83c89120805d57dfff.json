{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/pisp-project"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "swagger_ui/openapi.yaml",
			"byteSize": 55679,
			"content": "openapi: 3.0.2\ninfo:\n  version: '1.0'\n  title: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version) Snippets\n  description: |-\n    Based on [API Definition version 1.0](https://github.com/mojaloop/mojaloop-specification/blob/develop/API%20Definition%20v1.0.pdf).\n    **Note:** The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.\n  license:\n    name: TBD\n    url: Yet to be confirmed\nservers:\n  - url: '{protocol}://hostname:\u003cport\u003e/switch/'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: https\ncomponents:\n  schemas:\n    Amount:\n      title: Amount\n      type: string\n      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'\n      description: 'The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.'\n      example: 123.45\n    AmountType:\n      title: AmountType\n      type: string\n      enum:\n        - SEND\n        - RECEIVE\n      description: |-\n        Below are the allowed values for the enumeration AmountType.\n        - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.\n\n        - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.\n      example: RECEIVE\n    AuthenticationInfo:\n      title: AuthenticationInfo\n      type: object\n      description: Data model for the complex type AuthenticationInfo.\n      properties:\n        authentication:\n          $ref: '#/components/schemas/AuthenticationType'\n        authenticationValue:\n          $ref: '#/components/schemas/AuthenticationValue'\n      required:\n        - authentication\n        - authenticationValue\n    AuthenticationType:\n      title: AuthenticationType\n      type: string\n      enum:\n        - OTP\n        - QRCODE\n      description: |-\n        Below are the allowed values for the enumeration AuthenticationType.\n        - OTP - One-time password generated by the Payer FSP.\n\n        - QRCODE - QR code used as One Time Password.\n      example: OTP\n    AuthenticationValue:\n      title: AuthenticationValue\n      oneOf:\n        - $ref: '#/components/schemas/OtpValue'\n        - $ref: '#/components/schemas/QRCODE'\n      pattern: '^\\d{3,10}$|^\\S{1,64}$'\n      description: Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.\n      example: 1234\n    AuthorizationResponse:\n      title: AuthorizationResponse\n      type: string\n      enum:\n        - ENTERED\n        - REJECTED\n        - RESEND\n      description: |-\n        Below are the allowed values for the enumeration.\n        - ENTERED - Consumer entered the authentication value.\n\n        - REJECTED - Consumer rejected the transaction.\n\n        - RESEND - Consumer requested to resend the authentication value.\n      example: ENTERED\n    AuthorizationsIDPutResponse:\n      title: AuthorizationsIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /authorizations/{ID} callback.'\n      properties:\n        authenticationInfo:\n          $ref: '#/components/schemas/AuthenticationInfo'\n        responseType:\n          $ref: '#/components/schemas/AuthorizationResponse'\n      required:\n        - responseType\n    BalanceOfPayments:\n      title: BalanceOfPayments\n      type: string\n      pattern: '^[1-9]\\d{2}$'\n      description: '(BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.'\n      example: 123\n    BinaryString:\n      type: string\n      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n      description: 'The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.'\n    BinaryString32:\n      type: string\n      pattern: '^[A-Za-z0-9-_]{43}$'\n      description: 'The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed.'\n    BulkQuotesIDPutResponse:\n      title: BulkQuotesIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /bulkQuotes/{ID} callback.'\n      properties:\n        individualQuoteResults:\n          type: array\n          maxItems: 1000\n          items:\n            $ref: '#/components/schemas/IndividualQuoteResult'\n          description: 'Fees for each individual transaction, if any of them are charged per transaction.'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - expiration\n    BulkQuotesPostRequest:\n      title: BulkQuotesPostRequest\n      type: object\n      description: The object sent in the POST /bulkQuotes request.\n      properties:\n        bulkQuoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        payer:\n          $ref: '#/components/schemas/Party'\n        geoCode:\n          $ref: '#/components/schemas/GeoCode'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        individualQuotes:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndividualQuote'\n          minLength: 1\n          maxLength: 1000\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - bulkQuoteId\n        - payer\n        - individualQuotes\n    BulkTransfersIDPutResponse:\n      title: BulkTransfersIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /bulkTransfers/{ID} callback.'\n      properties:\n        completedTimestamp:\n          $ref: '#/components/schemas/DateTime'\n        individualTransferResults:\n          type: array\n          maxItems: 1000\n          items:\n            $ref: '#/components/schemas/IndividualTransferResult'\n          description: List of IndividualTransferResult elements.\n        bulkTransferState:\n          $ref: '#/components/schemas/BulkTransferState'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - bulkTransferState\n    BulkTransfersPostRequest:\n      title: BulkTransfersPostRequest\n      type: object\n      description: The object sent in the POST /bulkTransfers request.\n      properties:\n        bulkTransferId:\n          $ref: '#/components/schemas/CorrelationId'\n        bulkQuoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        payerFsp:\n          $ref: '#/components/schemas/FspId'\n        payeeFsp:\n          $ref: '#/components/schemas/FspId'\n        individualTransfers:\n          type: array\n          minItems: 1\n          maxItems: 1000\n          items:\n            $ref: '#/components/schemas/IndividualTransfer'\n          description: List of IndividualTransfer elements.\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - bulkTransferId\n        - bulkQuoteId\n        - payerFsp\n        - payeeFsp\n        - individualTransfers\n        - expiration\n    BulkTransferState:\n      title: BulkTransactionState\n      type: string\n      enum:\n        - RECEIVED\n        - PENDING\n        - ACCEPTED\n        - PROCESSING\n        - COMPLETED\n        - REJECTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Payee FSP has received the bulk transfer from the Payer FSP.\n\n        - PENDING - Payee FSP has validated the bulk transfer.\n\n        - ACCEPTED - Payee FSP has accepted to process the bulk transfer.\n\n        - PROCESSING - Payee FSP has started to transfer fund to the Payees.\n\n        - COMPLETED - Payee FSP has completed transfer of funds to the Payees.\n\n        - REJECTED - Payee FSP has rejected to process the bulk transfer.\n      example: RECEIVED\n    Code:\n      title: Code\n      type: string\n      pattern: '^[0-9a-zA-Z]{4,32}$'\n      description: Any code/token returned by the Payee FSP (TokenCode Type).\n      example: Test-Code\n    CorrelationId:\n      title: CorrelationId\n      type: string\n      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n      description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).'\n      example: b51ec534-ee48-4575-b6a9-ead2955b8069\n    Currency:\n      title: Currency\n      description: 'The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.'\n      type: string\n      minLength: 3\n      maxLength: 3\n      enum:\n        - AED\n        - AFN\n        - ALL\n        - AMD\n        - ANG\n        - AOA\n        - ARS\n        - AUD\n        - AWG\n        - AZN\n        - BAM\n        - BBD\n        - BDT\n        - BGN\n        - BHD\n        - BIF\n        - BMD\n        - BND\n        - BOB\n        - BRL\n        - BSD\n        - BTN\n        - BWP\n        - BYN\n        - BZD\n        - CAD\n        - CDF\n        - CHF\n        - CLP\n        - CNY\n        - COP\n        - CRC\n        - CUC\n        - CUP\n        - CVE\n        - CZK\n        - DJF\n        - DKK\n        - DOP\n        - DZD\n        - EGP\n        - ERN\n        - ETB\n        - EUR\n        - FJD\n        - FKP\n        - GBP\n        - GEL\n        - GGP\n        - GHS\n        - GIP\n        - GMD\n        - GNF\n        - GTQ\n        - GYD\n        - HKD\n        - HNL\n        - HRK\n        - HTG\n        - HUF\n        - IDR\n        - ILS\n        - IMP\n        - INR\n        - IQD\n        - IRR\n        - ISK\n        - JEP\n        - JMD\n        - JOD\n        - JPY\n        - KES\n        - KGS\n        - KHR\n        - KMF\n        - KPW\n        - KRW\n        - KWD\n        - KYD\n        - KZT\n        - LAK\n        - LBP\n        - LKR\n        - LRD\n        - LSL\n        - LYD\n        - MAD\n        - MDL\n        - MGA\n        - MKD\n        - MMK\n        - MNT\n        - MOP\n        - MRO\n        - MUR\n        - MVR\n        - MWK\n        - MXN\n        - MYR\n        - MZN\n        - NAD\n        - NGN\n        - NIO\n        - NOK\n        - NPR\n        - NZD\n        - OMR\n        - PAB\n        - PEN\n        - PGK\n        - PHP\n        - PKR\n        - PLN\n        - PYG\n        - QAR\n        - RON\n        - RSD\n        - RUB\n        - RWF\n        - SAR\n        - SBD\n        - SCR\n        - SDG\n        - SEK\n        - SGD\n        - SHP\n        - SLL\n        - SOS\n        - SPL\n        - SRD\n        - STD\n        - SVC\n        - SYP\n        - SZL\n        - THB\n        - TJS\n        - TMT\n        - TND\n        - TOP\n        - TRY\n        - TTD\n        - TVD\n        - TWD\n        - TZS\n        - UAH\n        - UGX\n        - USD\n        - UYU\n        - UZS\n        - VEF\n        - VND\n        - VUV\n        - WST\n        - XAF\n        - XCD\n        - XDR\n        - XOF\n        - XPF\n        - YER\n        - ZAR\n        - ZMW\n        - ZWD\n      example: USD\n    Date:\n      title: Date\n      type: string\n      pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'\n      description: |-\n        The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\n        This format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples are \"1982-05-23\", \"1987-08-05”.\n    DateOfBirth:\n      title: DateofBirth (type Date)\n      type: string\n      pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'\n      description: Date of Birth of the Party.\n      example: '1966-06-16'\n    DateTime:\n      title: DateTime\n      type: string\n      pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$'\n      description: |-\n        The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\n        The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC).\n      example: '2016-05-24T08:38:08.699-04:00'\n    ErrorCode:\n      title: ErrorCode\n      type: string\n      pattern: '^[1-9]\\d{3}$'\n      description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'\n      example: 5100\n    ErrorDescription:\n      title: ErrorDescription\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Error description string.\n      example: This is an error description.\n    ErrorInformation:\n      title: ErrorInformation\n      type: object\n      description: Data model for the complex type ErrorInformation.\n      properties:\n        errorCode:\n          $ref: '#/components/schemas/ErrorCode'\n        errorDescription:\n          $ref: '#/components/schemas/ErrorDescription'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - errorCode\n        - errorDescription\n    ErrorInformationObject:\n      title: ErrorInformationObject\n      type: object\n      description: Data model for the complex type object that contains ErrorInformation.\n      properties:\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n      required:\n        - errorInformation\n    ErrorInformationResponse:\n      title: ErrorInformationResponse\n      type: object\n      description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.\n      properties:\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n    Extension:\n      title: Extension\n      type: object\n      description: Data model for the complex type Extension.\n      properties:\n        key:\n          $ref: '#/components/schemas/ExtensionKey'\n        value:\n          $ref: '#/components/schemas/ExtensionValue'\n      required:\n        - key\n        - value\n    ExtensionKey:\n      title: ExtensionKey\n      type: string\n      minLength: 1\n      maxLength: 32\n      description: Extension key.\n    ExtensionList:\n      title: ExtensionList\n      type: object\n      description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'\n      properties:\n        extension:\n          type: array\n          items:\n            $ref: '#/components/schemas/Extension'\n          minItems: 1\n          maxItems: 16\n          description: Number of Extension elements.\n      required:\n        - extension\n    ExtensionValue:\n      title: ExtensionValue\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Extension value.\n    FirstName:\n      title: FirstName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\p{L}\\p{Nd} .,''-]{1,128}$'\n      description: First name of the Party (Name Type).\n      example: Henrik\n    FspId:\n      title: FspId\n      type: string\n      minLength: 1\n      maxLength: 32\n      description: FSP identifier.\n      example: 1234\n    GeoCode:\n      title: GeoCode\n      type: object\n      description: Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.\n      properties:\n        latitude:\n          $ref: '#/components/schemas/Latitude'\n        longitude:\n          $ref: '#/components/schemas/Longitude'\n      required:\n        - latitude\n        - longitude\n    IlpCondition:\n      title: IlpCondition\n      type: string\n      pattern: '^[A-Za-z0-9-_]{43}$'\n      maxLength: 48\n      description: Condition that must be attached to the transfer by the Payer.\n      example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA\n    IlpFulfilment:\n      title: IlpFulfilment\n      type: string\n      pattern: '^[A-Za-z0-9-_]{43}$'\n      maxLength: 48\n      description: Fulfilment that must be attached to the transfer by the Payee.\n      example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8\n    IlpPacket:\n      title: IlpPacket\n      type: string\n      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n      minLength: 1\n      maxLength: 32768\n      description: Information for recipient (transport layer information).\n      example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA\n    IndividualQuote:\n      title: IndividualQuote\n      type: object\n      description: Data model for the complex type IndividualQuote.\n      properties:\n        quoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        payee:\n          $ref: '#/components/schemas/Party'\n        amountType:\n          $ref: '#/components/schemas/AmountType'\n        amount:\n          $ref: '#/components/schemas/Money'\n        fees:\n          $ref: '#/components/schemas/Money'\n        transactionType:\n          $ref: '#/components/schemas/TransactionType'\n        note:\n          $ref: '#/components/schemas/Note'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - quoteId\n        - transactionId\n        - payee\n        - amountType\n        - amount\n        - transactionType\n    IndividualQuoteResult:\n      title: IndividualQuoteResult\n      type: object\n      description: Data model for the complex type IndividualQuoteResult.\n      properties:\n        quoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        payee:\n          $ref: '#/components/schemas/Party'\n        transferAmount:\n          $ref: '#/components/schemas/Money'\n        payeeReceiveAmount:\n          $ref: '#/components/schemas/Money'\n        payeeFspFee:\n          $ref: '#/components/schemas/Money'\n        payeeFspCommission:\n          $ref: '#/components/schemas/Money'\n        ilpPacket:\n          $ref: '#/components/schemas/IlpPacket'\n        condition:\n          $ref: '#/components/schemas/IlpCondition'\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - quoteId\n    IndividualTransfer:\n      title: IndividualTransfer\n      type: object\n      description: Data model for the complex type IndividualTransfer.\n      properties:\n        transferId:\n          $ref: '#/components/schemas/CorrelationId'\n        transferAmount:\n          $ref: '#/components/schemas/Money'\n        ilpPacket:\n          $ref: '#/components/schemas/IlpPacket'\n        condition:\n          $ref: '#/components/schemas/IlpCondition'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferId\n        - transferAmount\n        - ilpPacket\n        - condition\n    IndividualTransferResult:\n      title: IndividualTransferResult\n      type: object\n      description: Data model for the complex type IndividualTransferResult.\n      properties:\n        transferId:\n          $ref: '#/components/schemas/CorrelationId'\n        fulfilment:\n          $ref: '#/components/schemas/IlpFulfilment'\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferId\n    Integer:\n      title: Integer\n      type: string\n      pattern: '^[1-9]\\d*$'\n      description: The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.\n    LastName:\n      title: LastName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\p{L}\\p{Nd} .,''-]{1,128}$'\n      description: Last name of the Party (Name Type).\n      example: Karlsson\n    Latitude:\n      title: Latitude\n      type: string\n      pattern: '^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$'\n      description: The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\n      example: '+45.4215'\n    Longitude:\n      title: Longitude\n      type: string\n      pattern: '^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$'\n      description: The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\n      example: '+75.6972'\n    MerchantClassificationCode:\n      title: MerchantClassificationCode\n      type: string\n      pattern: '^[\\d]{1,4}$'\n      description: 'A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.'\n      example: 4321\n    MiddleName:\n      title: MiddleName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\p{L}\\p{Nd} .,''-]{1,128}$'\n      description: Middle name of the Party (Name Type).\n      example: Johannes\n    Money:\n      title: Money\n      type: object\n      description: Data model for the complex type Money.\n      properties:\n        currency:\n          $ref: '#/components/schemas/Currency'\n        amount:\n          $ref: '#/components/schemas/Amount'\n      required:\n        - currency\n        - amount\n    Name:\n      title: Name\n      type: string\n      pattern: '^(?!\\s*$)[\\p{L}\\p{Nd} .,''-]{1,128}$'\n      description: |-\n        The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.\n        Regular Expression - The regular expression for restricting the Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).\n\n\n        **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.\n    Note:\n      title: Note\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Memo assigned to transaction.\n      example: Note sent to Payee.\n    OtpValue:\n      title: OtpValue\n      type: string\n      pattern: '^\\d{3,10}$'\n      description: 'The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.'\n    ParticipantsIDPutResponse:\n      title: ParticipantsIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /participants/{ID} callback.'\n      properties:\n        partyList:\n          type: array\n          items:\n            $ref: '#/components/schemas/PartyResult'\n          minItems: 1\n          maxItems: 10000\n          description: List of PartyResult elements that were either created or failed to be created.\n        currency:\n          $ref: '#/components/schemas/Currency'\n      required:\n        - partyList\n    ParticipantsPostRequest:\n      title: ParticipantsPostRequest\n      type: object\n      description: The object sent in the POST /participants request.\n      properties:\n        requestId:\n          $ref: '#/components/schemas/CorrelationId'\n        partyList:\n          type: array\n          items:\n            $ref: '#/components/schemas/PartyIdInfo'\n          minItems: 1\n          maxItems: 10000\n          description: List of PartyIdInfo elements that the client would like to update or create FSP information about.\n        currency:\n          $ref: '#/components/schemas/Currency'\n      required:\n        - requestId\n        - partyList\n    ParticipantsTypeIDPutResponse:\n      title: ParticipantsTypeIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks.'\n      properties:\n        fspId:\n          $ref: '#/components/schemas/FspId'\n    ParticipantsTypeIDSubIDPostRequest:\n      title: ParticipantsTypeIDSubIDPostRequest\n      type: object\n      description: 'The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests.'\n      properties:\n        fspId:\n          $ref: '#/components/schemas/FspId'\n        currency:\n          $ref: '#/components/schemas/Currency'\n      required:\n        - fspId\n    PartiesTypeIDPutResponse:\n      title: PartiesTypeIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /parties/{Type}/{ID} callback.'\n      properties:\n        party:\n          $ref: '#/components/schemas/Party'\n      required:\n        - party\n    Party:\n      title: Party\n      type: object\n      description: Data model for the complex type Party.\n      properties:\n        partyIdInfo:\n          $ref: '#/components/schemas/PartyIdInfo'\n        merchantClassificationCode:\n          $ref: '#/components/schemas/MerchantClassificationCode'\n        name:\n          $ref: '#/components/schemas/PartyName'\n        personalInfo:\n          $ref: '#/components/schemas/PartyPersonalInfo'\n      required:\n        - partyIdInfo\n    PartyComplexName:\n      title: PartyComplexName\n      type: object\n      description: Data model for the complex type PartyComplexName.\n      properties:\n        firstName:\n          $ref: '#/components/schemas/FirstName'\n        middleName:\n          $ref: '#/components/schemas/MiddleName'\n        lastName:\n          $ref: '#/components/schemas/LastName'\n    PartyIdentifier:\n      title: PartyIdentifier\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Identifier of the Party.\n      example: 16135551212\n    PartyIdInfo:\n      title: PartyIdInfo\n      type: object\n      description: Data model for the complex type PartyIdInfo.\n      properties:\n        partyIdType:\n          $ref: '#/components/schemas/PartyIdType'\n        partyIdentifier:\n          $ref: '#/components/schemas/PartyIdentifier'\n        partySubIdOrType:\n          $ref: '#/components/schemas/PartySubIdOrType'\n        fspId:\n          $ref: '#/components/schemas/FspId'\n      required:\n        - partyIdType\n        - partyIdentifier\n    PartyIdType:\n      title: PartyIdType\n      type: string\n      enum:\n        - MSISDN\n        - EMAIL\n        - PERSONAL_ID\n        - BUSINESS\n        - DEVICE\n        - ACCOUNT_ID\n        - IBAN\n        - ALIAS\n      description: |-\n        Below are the allowed values for the enumeration.\n        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.\n\n        - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).\n\n        - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.\n\n        - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.\n\n        - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.\n\n        - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.\n\n        - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.\n\n        - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.\n      example: PERSONAL_ID\n    PartyName:\n      title: PartyName\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Name of the Party. Could be a real name or a nickname.\n      example: Henrik Karlsson\n    PartyPersonalInfo:\n      title: PartyPersonalInfo\n      type: object\n      description: Data model for the complex type PartyPersonalInfo.\n      properties:\n        complexName:\n          $ref: '#/components/schemas/PartyComplexName'\n        dateOfBirth:\n          $ref: '#/components/schemas/DateOfBirth'\n    PartyResult:\n      title: PartyResult\n      type: object\n      description: Data model for the complex type PartyResult.\n      properties:\n        partyId:\n          $ref: '#/components/schemas/PartyIdInfo'\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n      required:\n        - partyId\n    PartySubIdOrType:\n      title: PartySubIdOrType\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: 'Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.'\n      example: DRIVING_LICENSE\n    PersonalIdentifierType:\n      title: PersonalIdentifierType\n      type: string\n      enum:\n        - PASSPORT\n        - NATIONAL_REGISTRATION\n        - DRIVING_LICENSE\n        - ALIEN_REGISTRATION\n        - NATIONAL_ID_CARD\n        - EMPLOYER_ID\n        - TAX_ID_NUMBER\n        - SENIOR_CITIZENS_CARD\n        - MARRIAGE_CERTIFICATE\n        - HEALTH_CARD\n        - VOTERS_ID\n        - UNITED_NATIONS\n        - OTHER_ID\n      description: |-\n        Below are the allowed values for the enumeration.\n        - PASSPORT - A passport number is used as reference to a Party.\n\n        - NATIONAL_REGISTRATION - A national registration number is used as reference to a Party.\n\n        - DRIVING_LICENSE - A driving license is used as reference to a Party.\n\n        - ALIEN_REGISTRATION - An alien registration number is used as reference to a Party.\n\n        - NATIONAL_ID_CARD - A national ID card number is used as reference to a Party.\n\n        - EMPLOYER_ID - A tax identification number is used as reference to a Party.\n\n        - TAX_ID_NUMBER - A tax identification number is used as reference to a Party.\n\n        - SENIOR_CITIZENS_CARD - A senior citizens card number is used as reference to a Party.\n\n        - MARRIAGE_CERTIFICATE - A marriage certificate number is used as reference to a Party.\n\n        - HEALTH_CARD - A health card number is used as reference to a Party.\n\n        - VOTERS_ID - A voter’s identification number is used as reference to a Party.\n\n        - UNITED_NATIONS - An UN (United Nations) number is used as reference to a Party.\n\n        - OTHER_ID - Any other type of identification type number is used as reference to a Party.\n    QRCODE:\n      title: QRCODE\n      type: string\n      minLength: 1\n      maxLength: 64\n      description: QR code used as a One Time Password.\n    QuotesIDPutResponse:\n      title: QuotesIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /quotes/{ID} callback.'\n      properties:\n        transferAmount:\n          $ref: '#/components/schemas/Money'\n        payeeReceiveAmount:\n          $ref: '#/components/schemas/Money'\n        payeeFspFee:\n          $ref: '#/components/schemas/Money'\n        payeeFspCommission:\n          $ref: '#/components/schemas/Money'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        geoCode:\n          $ref: '#/components/schemas/GeoCode'\n        ilpPacket:\n          $ref: '#/components/schemas/IlpPacket'\n        condition:\n          $ref: '#/components/schemas/IlpCondition'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferAmount\n        - expiration\n        - ilpPacket\n        - condition\n    QuotesPostRequest:\n      title: QuotesPostRequest\n      type: object\n      description: The object sent in the POST /quotes request.\n      properties:\n        quoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionRequestId:\n          $ref: '#/components/schemas/CorrelationId'\n        payee:\n          $ref: '#/components/schemas/Party'\n        payer:\n          $ref: '#/components/schemas/Party'\n        amountType:\n          $ref: '#/components/schemas/AmountType'\n        amount:\n          $ref: '#/components/schemas/Money'\n        fees:\n          $ref: '#/components/schemas/Money'\n        transactionType:\n          $ref: '#/components/schemas/TransactionType'\n        geoCode:\n          $ref: '#/components/schemas/GeoCode'\n        note:\n          $ref: '#/components/schemas/Note'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - quoteId\n        - transactionId\n        - payee\n        - payer\n        - amountType\n        - amount\n        - transactionType\n    Refund:\n      title: Refund\n      type: object\n      description: Data model for the complex type Refund.\n      properties:\n        originalTransactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        refundReason:\n          $ref: '#/components/schemas/RefundReason'\n      required:\n        - originalTransactionId\n    RefundReason:\n      title: RefundReason\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Reason for the refund.\n      example: Free text indicating reason for the refund.\n    TokenCode:\n      title: TokenCode\n      type: string\n      pattern: '^[0-9a-zA-Z]{4,32}$'\n      description: 'The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper- or lowercase characters from a to z.'\n    Transaction:\n      title: Transaction\n      type: object\n      description: Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.\n      properties:\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        quoteId:\n          $ref: '#/components/schemas/CorrelationId'\n        payee:\n          $ref: '#/components/schemas/Party'\n        payer:\n          $ref: '#/components/schemas/Party'\n        amount:\n          $ref: '#/components/schemas/Money'\n        transactionType:\n          $ref: '#/components/schemas/TransactionType'\n        note:\n          $ref: '#/components/schemas/Note'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transactionId\n        - quoteId\n        - payee\n        - payer\n        - amount\n        - transactionType\n    TransactionInitiator:\n      title: TransactionInitiator\n      type: string\n      enum:\n        - PAYER\n        - PAYEE\n      description: |-\n        Below are the allowed values for the enumeration.\n        - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.\n\n        - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.\n      example: PAYEE\n    TransactionInitiatorType:\n      title: TransactionInitiatorType\n      type: string\n      enum:\n        - CONSUMER\n        - AGENT\n        - BUSINESS\n        - DEVICE\n      description: |-\n        Below are the allowed values for the enumeration.\n        - CONSUMER - Consumer is the initiator of the transaction.\n\n        - AGENT - Agent is the initiator of the transaction.\n\n        - BUSINESS - Business is the initiator of the transaction.\n\n        - DEVICE - Device is the initiator of the transaction.\n      example: CONSUMER\n    TransactionRequestsIDPutResponse:\n      title: TransactionRequestsIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /transactionRequests/{ID} callback.'\n      properties:\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionRequestState:\n          $ref: '#/components/schemas/TransactionRequestState'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transactionRequestState\n    TransactionRequestsPostRequest:\n      title: TransactionRequestsPostRequest\n      type: object\n      description: The object sent in the POST /transactionRequests request.\n      properties:\n        transactionRequestId:\n          $ref: '#/components/schemas/CorrelationId'\n        payee:\n          $ref: '#/components/schemas/Party'\n        payer:\n          $ref: '#/components/schemas/PartyIdInfo'\n        amount:\n          $ref: '#/components/schemas/Money'\n        transactionType:\n          $ref: '#/components/schemas/TransactionType'\n        note:\n          $ref: '#/components/schemas/Note'\n        geoCode:\n          $ref: '#/components/schemas/GeoCode'\n        authenticationType:\n          $ref: '#/components/schemas/AuthenticationType'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transactionRequestId\n        - payee\n        - payer\n        - amount\n        - transactionType\n    TransactionRequestState:\n      title: TransactionRequestState\n      type: string\n      enum:\n        - RECEIVED\n        - PENDING\n        - ACCEPTED\n        - REJECTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n\n        - PENDING - Payer FSP has sent the transaction request to the Payer.\n\n        - ACCEPTED - Payer has approved the transaction.\n\n        - REJECTED - Payer has rejected the transaction.\n      example: RECEIVED\n    TransactionScenario:\n      title: TransactionScenario\n      type: string\n      enum:\n        - DEPOSIT\n        - WITHDRAWAL\n        - TRANSFER\n        - PAYMENT\n        - REFUND\n      description: |-\n        Below are the allowed values for the enumeration.\n        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.\n\n        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.\n\n        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.\n\n        - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.\n\n        - REFUND - Used for performing a refund of transaction.\n      example: DEPOSIT\n    TransactionsIDPutResponse:\n      title: TransactionsIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /transactions/{ID} callback.'\n      properties:\n        completedTimestamp:\n          $ref: '#/components/schemas/DateTime'\n        transactionState:\n          $ref: '#/components/schemas/TransactionState'\n        code:\n          $ref: '#/components/schemas/Code'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transactionState\n    TransactionState:\n      title: TransactionState\n      type: string\n      enum:\n        - RECEIVED\n        - PENDING\n        - COMPLETED\n        - REJECTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Payee FSP has received the transaction from the Payer FSP.\n\n        - PENDING - Payee FSP has validated the transaction.\n\n        - COMPLETED - Payee FSP has successfully performed the transaction.\n\n        - REJECTED - Payee FSP has failed to perform the transaction.\n      example: RECEIVED\n    TransactionSubScenario:\n      title: TransactionSubScenario\n      type: string\n      pattern: '^[A-Z_]{1,32}$'\n      description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'\n      example: LOCALLY_DEFINED_SUBSCENARIO\n    TransactionType:\n      title: TransactionType\n      type: object\n      description: Data model for the complex type TransactionType.\n      properties:\n        scenario:\n          $ref: '#/components/schemas/TransactionScenario'\n        subScenario:\n          $ref: '#/components/schemas/TransactionSubScenario'\n        initiator:\n          $ref: '#/components/schemas/TransactionInitiator'\n        initiatorType:\n          $ref: '#/components/schemas/TransactionInitiatorType'\n        refundInfo:\n          $ref: '#/components/schemas/Refund'\n        balanceOfPayments:\n          $ref: '#/components/schemas/BalanceOfPayments'\n      required:\n        - scenario\n        - initiator\n        - initiatorType\n    TransfersIDPutResponse:\n      title: TransfersIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /transfers/{ID} callback.'\n      properties:\n        fulfilment:\n          $ref: '#/components/schemas/IlpFulfilment'\n        completedTimestamp:\n          $ref: '#/components/schemas/DateTime'\n        transferState:\n          $ref: '#/components/schemas/TransferState'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferState\n    TransfersPostRequest:\n      title: TransfersPostRequest\n      type: object\n      description: The object sent in the POST /transfers request.\n      properties:\n        transferId:\n          $ref: '#/components/schemas/CorrelationId'\n        payeeFsp:\n          $ref: '#/components/schemas/FspId'\n        payerFsp:\n          $ref: '#/components/schemas/FspId'\n        amount:\n          $ref: '#/components/schemas/Money'\n        ilpPacket:\n          $ref: '#/components/schemas/IlpPacket'\n        condition:\n          $ref: '#/components/schemas/IlpCondition'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferId\n        - payeeFsp\n        - payerFsp\n        - amount\n        - ilpPacket\n        - condition\n        - expiration\n    TransferState:\n      title: TransferState\n      type: string\n      enum:\n        - RECEIVED\n        - RESERVED\n        - COMMITTED\n        - ABORTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Next ledger has received the transfer.\n\n        - RESERVED - Next ledger has reserved the transfer.\n\n        - COMMITTED - Next ledger has successfully performed the transfer.\n\n        - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.\n      example: RESERVED\n    UndefinedEnum:\n      title: UndefinedEnum\n      type: string\n      pattern: '^[A-Z_]{1,32}$'\n      description: The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_).\n  parameters:\n    Accept:\n      name: Accept\n      in: header\n      required: true\n      schema:\n        type: string\n      description: The `Accept` header field indicates the version of the API the client would like the server to use.\n    Content-Length:\n      name: Content-Length\n      in: header\n      required: false\n      schema:\n        type: integer\n      description: |-\n        The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n        **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n    Content-Type:\n      name: Content-Type\n      in: header\n      schema:\n        type: string\n      required: true\n      description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n    Date:\n      name: Date\n      in: header\n      schema:\n        type: string\n      required: true\n      description: The `Date` header field indicates the date when the request was sent.\n    FSPIOP-Destination:\n      name: FSPIOP-Destination\n      in: header\n      schema:\n        type: string\n      required: false\n      description: 'The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.'\n    FSPIOP-Encryption:\n      name: FSPIOP-Encryption\n      in: header\n      schema:\n        type: string\n      required: false\n      description: The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.\n    FSPIOP-HTTP-Method:\n      name: FSPIOP-HTTP-Method\n      in: header\n      schema:\n        type: string\n      required: false\n      description: 'The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n    FSPIOP-Signature:\n      name: FSPIOP-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n      description: The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.\n    FSPIOP-Source:\n      name: FSPIOP-Source\n      in: header\n      schema:\n        type: string\n      required: true\n      description: The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).\n    FSPIOP-URI:\n      name: FSPIOP-URI\n      in: header\n      schema:\n        type: string\n      required: false\n      description: 'The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n    ID:\n      name: ID\n      in: path\n      required: true\n      schema:\n        type: string\n      description: The identifier value.\n    SubId:\n      name: SubId\n      in: path\n      required: true\n      schema:\n        type: string\n      description: 'A sub-identifier of the party identifier, or a sub-type of the party identifier''s type. For example, `PASSPORT`, `DRIVING_LICENSE`.'\n    Type:\n      name: Type\n      in: path\n      required: true\n      schema:\n        type: string\n      description: 'The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.'\n    X-Forwarded-For:\n      name: X-Forwarded-For\n      in: header\n      schema:\n        type: string\n      required: false\n      description: |-\n        The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.\n        **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.\n  headers:\n    Content-Length:\n      required: false\n      schema:\n        type: integer\n      description: |-\n        The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n        **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n    Content-Type:\n      schema:\n        type: string\n      required: true\n      description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n  responses:\n    '200':\n      description: OK\n    '202':\n      description: Accepted\n    '400':\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '401':\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '403':\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '404':\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '405':\n      description: Method Not Allowed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '406':\n      description: Not Acceptable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '501':\n      description: Not Implemented\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '503':\n      description: Service Unavailable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\npaths:\n  /health:\n    get:\n      summary: This file is for demonstration purposes.\n      description: A valid OpenApi3 specification requires `paths` to be defined.\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n",
			"canonicalURL": "/github.com/mojaloop/pisp-project@4ca8daa097a2f713ad986ef67e5ee45554dfb59d/-/blob/swagger_ui/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mojaloop/pisp-project/blob/4ca8daa097a2f713ad986ef67e5ee45554dfb59d/swagger_ui/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}