{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nasa/uam-apis"
		},
		"file": {
			"name": "unstructured-data-upload.yaml",
			"size": 0,
			"path": "datacollection/openapi/ati/unstructured-data-upload.yaml",
			"byteSize": 10771,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e-\n    NASA Data Collection interface for uploading unstructured data\n  version: \"1.0.1\"\n  title: ATI-Data-Upload\n  termsOfService: http://uam.arc.nasa.gov/terms/\n  contact:\n    name: 'NASA Ames Research Center, Aviation Systems Division'\n    email: shivanjli.sharma@nasa.gov\n  license:\n    name: NASA Open Source Agreement\n    url: 'https://ti.arc.nasa.gov/opensource/nosa/'\n\nservers:\n  - url: 'https://uss.defined.url/'\n\ntags:\n- name: uploading\n  description: Endpoints for uploading data files\n\npaths:\n  /upload-intent:\n    summary: Generate upload URL\n    post:\n      summary: Upload an array of FileMetadata models\n      tags:\n        - uploading\n      responses:\n        '200':\n          $ref: '#/components/responses/r200'\n        '400':\n          $ref: '#/components/responses/r400'\n        '401':\n          $ref: '#/components/responses/r400'\n        '403':\n          $ref: '#/components/responses/r403'\n        '409':\n          $ref: '#/components/responses/r409'\n        '429':\n          $ref: '#/components/responses/r429'\n        '500':\n          $ref: '#/components/responses/r500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/FileMetadata'\n        description: Upload an array of FileMetadata\n        required: true\n\ncomponents:\n  schemas:\n    FileMetadata:\n        description: \u003e-\n          Defines context auxiliary data for a file upload.\n        required:\n          - document_id\n          - file_name\n          - flight_type\n          - data_source\n          - event_id\n          - checksum_code\n          - flight_test_date\n          - submitter_email\n        properties:\n          document_id:\n            description: \u003e-\n              A UUID as a unique identifier to the postflight data file. Provided by the person performing for the upload (i.e., the \"uploader\").\n            type: string\n            format: uuid\n          file_name:\n            description: \u003e-\n              Full path of file being uploaded. File extension highly recommended. Maximum length determined by longest path and filename acceptable to OSX and Linux and Windows.\n            type: string\n            maxLength: 1023\n          box_location:\n            description: \u003e-\n              Box location URL.\n            type: string\n            maxLength: 1023\n          description:\n            description: \u003e-\n              Additional description about the file upload.\n            type: string\n            maxLength: 1000\n          flight_type:\n            description: Type of flight test.\n            type: string\n            enum:\n              - FLIGHT_SIMULATION\n              - LIVE_FLIGHT\n          data_source:\n            description: Source of the file being uploaded. Only one will apply. If this is a new data_source type, please contact the DM team as soon as possible. OTHER requires detailed text in the description field, and is used to archive supporting data that is not directly extracted, such as archives of unprocessed DGPS logs, or maps of precise microphone or camera placement.\n            type: string\n            enum:\n              - AUDIO\n              - DGPS\n              - FIAPA\n              - FLIGHT_REPORTS\n              - IADS\n              - IMU\n              - MOF_COMM\n              - OTHER\n              - RADAR_PRIMARY\n              - SBSM_ADSB\n              - TEST_CARDS\n              - VEHICLE_TELEMETRY\n              - VIDEO\n              - WEATHER_SODAR\n              - WEATHER_SURFACE_STATION\n          industry_partner_name:\n            description: Name of the industry partner associated with the data, if applicable (e.g., DGPS, IMU, RADAR_PRIMARY will likely have an associated partner). Some uploads will not be associated with a particular industry partner (e.g., weather)\n            type: string\n          scenario_ids:\n            description: The scenarios associated with the file upload. Multiple scenarios may be possible, though in most cases only one applies.\n            type: array\n            items:\n              type: string\n              enum:\n                - SCENARIO_1\n                - SCENARIO_2\n                - SCENARIO_3A\n                - SCENARIO_3B\n                - SCENARIO_3C\n          event_id:\n            description: The event associated with the file upload. Following the [campaign]-[phase]-[event]-[test*] naming convention (* if necessary). Only one will apply.\n            type: string\n            enum:\n              - X3\n              - X4\n              - VIRTUAL_DRY_RUN\n              - BUILDUP_RUN_1\n              - BUILDUP_RUN_2\n              - BUILDUP_RUN_3\n              - DT\n              - NC1-DT1-FAM1\n              - NC1-DT1-BuildupRun2-Preconnectivity1\n              - NC1-DT1-BuildupRun2-Preconnectivity2\n              - NC1-DT1-BuildupRun2 \n              - NC1-DT1-BuildupRun3\n          checksum_code:\n            description: \u003e-\n              Checksum algorithm generated code.\n            type: string\n            maxLength: 32\n            minLength: 32\n            pattern: \"^[a-f0-9A-F]+$\"\n          checksum_algorithm:\n            description: Checksum algorithm name. Only MD5 supported at this time.\n            type: string\n            enum:\n              - MD5\n          flight_test_date:\n            description: Date of the flight test to which the file pertains (UTC Timestamp)\n            type: string\n            minLength: 20\n            format: date-time\n          submitted_by:\n            description: User name who submitted the data from its origin.\n            type: string\n            maxLength: 1000\n          submitter_email:\n            description: Submitter email address.\n            type: string\n            maxLength: 254\n            format: \".+@.+\"\n          custom_fields:\n            description: An optional field for capturing metadata specific to a data source. For example, weather data files require the specification of station name and point location. This array captures the field names and values\n            type: array\n            minItems: 1\n            items:\n              type: object\n              required:\n                - field_name\n                - field_value\n              properties:\n                field_name:\n                  type: string\n                  minLength: 1\n                  maxLength: 1000\n                field_value:\n                  type: string\n                  minLength: 0\n                  maxLength: 1000\n    UploadIntentResponse:\n      required:\n        - http_status_code\n        - message\n      description: |-\n        If successful returns URL to use for uploading your file, else\n        returns an error code.\n      type: object\n      properties:\n        upload_url:\n          description: URL to use for uploading your file\n          type: string\n          maxLength: 2000\n          example: 'https://url'\n        message:\n          description: |-\n              If successful returns upload details, else returns information\n              corresponding to the http_status_code.\n          type: string\n          maxLength: 2000\n        http_status_code:\n          type: integer\n          minimum: 100\n          exclusiveMinimum: false\n          maximum: 599\n          exclusiveMaximum: false\n\n\n  responses:\n\n    'r200':\n      description: success\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r400':\n      description: Bad request. Typically validation error. Fix your request and retry.\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r401':\n      description: Invalid or missing access_token provided.\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r403':\n      description: \u003e-\n        Forbidden. Do not retry with same access token. Reason not provided,\n        but do you have the right scopes? Does uss_name match the sub claim?\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r409':\n      description: Conflict for a PUT that is unsuccessful due to a 3rd-party modification\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r429':\n      description: Too many recent requests from you. Wait to make further queries.\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\n    'r500':\n      description: Internal Server Error.\n      content:\n        application/json:\n          schema:\n            $ref:\n              '#/components/schemas/UploadIntentResponse'\n\nx-amazon-apigateway-request-validator: all\nx-amazon-apigateway-request-validators:\n  validate_body_and_parameters:\n    validateRequestBody: true\n    validateRequestParameters: true\n  params-only:\n    validateRequestBody: false\n    validateRequestParameters: true\nx-amazon-apigateway-gateway-responses:\n  DEFAULT_4XX:\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId\\\n        \\ , error: $context.error.responseType $context.error.messageString\\\"\\n}\"\n  EXPIRED_TOKEN:\n    statusCode: 403\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId\\\n        \\ , error: $context.error.responseType $context.error.messageString\\\"\\n}\"\n  QUOTA_EXCEEDED:\n    statusCode: 429\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId,\\\n        \\  error: $context.error.responseType $context.error.messageString\\\"\\n}\"\n  DEFAULT_5XX:\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId,\\\n        \\  error: $context.error.responseType $context.error.messageString\\\"\\n}\"\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId,\\\n        \\ error: $context.error.validationErrorString\\\"\\n}\"\n  UNAUTHORIZED:\n    statusCode: 401\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId,\\\n        \\ error: $context.error.responseType \\\"\\n}\"\n  ACCESS_DENIED:\n    statusCode: 403\n    responseTemplates:\n      application/json: \"{\\n    \\\"message\\\": \\n    \\\"requestId: $context.requestId,\\\n        \\ error: $context.error.responseType $context.error.messageString\\\"\\n}\"\n",
			"canonicalURL": "/github.com/nasa/uam-apis@d18c3afbdac9b91b89564c7a0f9dbe1c7332a9de/-/blob/datacollection/openapi/ati/unstructured-data-upload.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nasa/uam-apis/blob/d18c3afbdac9b91b89564c7a0f9dbe1c7332a9de/datacollection/openapi/ati/unstructured-data-upload.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}