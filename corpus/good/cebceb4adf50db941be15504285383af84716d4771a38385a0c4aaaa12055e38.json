{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/IronSenior/Plato-backend"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "plato/static/swagger.yaml",
			"byteSize": 9923,
			"content": "    openapi: 3.0.0\n    info:\n      title: Plato API\n      description: Control all your social network accounts\n      version: 1.0.0\n    servers:\n      - url: /\n        description: Principal Server\n    tags:\n      - name: User\n        description: API for requesting and returning users\n      - name: Brand\n        description: API for requesting and returning brands\n      - name: Twitter\n        description: API for Twitter Accounts\n    paths:\n      /user/create/:\n        post:\n          tags: [User]\n          summary: Create an user if the given json is correct\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/user-received'\n          responses:\n            '200':\n              description: The user was created\n            '500':\n              description: Error\n      /user/get/{userId}/:\n        get:\n          tags: [User]\n          summary: Get a user by ID\n          parameters:\n            - in: path\n              name: userId\n              schema:\n                type: string\n              required: true\n              description: UUID of the user to get\n          responses:\n            '200':\n              description: The user was found\n            '404':\n              description: User was not found\n            '500':\n              description: Error\n      /user/login/:\n        post:\n          tags: [User]\n          summary: Check if password is correct and returns the user\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/user-login'\n          responses:\n            '200':\n              description: The login was succesfull\n            '401':\n              description: User email or password was incorrect\n            '500':\n              description: Error\n      /brand/create/:\n        post:\n          tags: [Brand]\n          summary: Create a new brand for a user\n          security:\n            - bearerAuth: []\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/brand-received'\n          responses:\n            '200':\n              description: The brand was created\n            '401':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /brand/user/{userId}/:\n        get:\n          tags: [Brand]\n          summary: Get a brand by user id\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: userId\n              schema:\n                type: string\n              required: true\n              description: UUID of the user owner of the brands\n          responses:\n            '200':\n              description: The brand was found\n            '404':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/account/add/:\n        post:\n          tags: [Twitter]\n          summary: Add a twitter Account\n          security:\n            - bearerAuth: []\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/twitter-oauth'\n          responses:\n            '200':\n              description: The account was added\n            '401':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/tweet/schedule/:\n        post:\n          tags: [Twitter]\n          summary: Schedule a Tweet\n          security:\n            - bearerAuth: []\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/twitter-tweet'\n          responses:\n            '200':\n              description: The tweet was scheduled\n            '401':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/tweet/{tweetId}/media/:\n        post:\n          tags: [Twitter]\n          summary: Add media to scheduled tweet\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: tweetId\n              schema:\n                type: string\n              required: true\n              description: UUID of the tweet\n          requestBody:\n            required: true\n            content:\n              multipart/form-data:\n                schema:\n                  type: object\n                  properties:\n                    file:\n                      type: string\n                      format: binary\n          responses:\n            '200':\n              description: Tweet media was added\n            '401':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/tweet/{accountId}/:\n        get:\n          tags: [Twitter]\n          summary: Get a brand by user id\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: accountId\n              schema:\n                type: string\n              required: true\n              description: UUID of the account owner of the tweets\n            - in: query\n              name: sinceDate\n              schema:\n                type: number\n              description: Date since the tweets were scheduled\n            - in: query\n              name: limitDate\n              schema:\n                type: number\n              description: Date limit to get the tweets\n          responses:\n            '200':\n              description: The brand was found\n            '404':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/brand/{brandId}/account/:\n        get:\n          tags: [Twitter]\n          summary: Get a Twitter Account By the Brand Id\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: brandId\n              schema:\n                type: string\n              required: true\n              description: UUID of the brand owner of the account\n          responses:\n            '200':\n              description: The account was found\n            \"404\":\n              description: The account was not found\n            '400':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/tweet/{tweetId}/report/:\n        get:\n          tags: [Twitter]\n          summary: Get a Tweet Report by the tweet Id\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: tweetId\n              schema:\n                type: string\n              required: true\n              description: UUID of the tweet\n          responses:\n            '200':\n              description: The report was found\n            \"404\":\n              description: The tweet report was not found\n            '400':\n              description: Access is not allowed\n            '500':\n              description: Error\n      /twitter/account/{accountId}/report/:\n        get:\n          tags: [Twitter]\n          summary: Get a Account Report by the Account Id\n          security:\n            - bearerAuth: []\n          parameters:\n            - in: path\n              name: accountId\n              schema:\n                type: string\n              required: true\n              description: UUID of the account\n          responses:\n            '200':\n              description: The report was found\n            \"404\":\n              description: The account report was not found\n            '400':\n              description: Access is not allowed\n            '500':\n              description: Error\n\n    components:\n      securitySchemes:\n        bearerAuth:\n          type: http\n          scheme: bearer\n          bearerFormat: JWT  \n      schemas:\n        user-received:\n          type: object\n          properties:\n            user:\n              type: object\n              properties:\n                userId:\n                  type: string\n                username:\n                  type: string\n                usermail:\n                  type: string\n                password:\n                  type: string\n        user-login:\n          type: object\n          properties:\n            usermail:\n              type: string\n            password:\n              type: string\n        brand-received:\n          type: object\n          properties:\n            brand:\n              type: object\n              properties:\n                id:\n                  type: string\n                userId:\n                  type: string\n                name:\n                  type: string\n                image:\n                  type: string\n        twitter-oauth:\n          type: object\n          properties:\n            account:\n              type: object\n              properties:\n                accountId:\n                  type: string\n                brandId:\n                  type: string\n                userId:\n                  type: string\n                oauthToken:\n                  type: string\n                oauthTokenSecret:\n                  type: string\n                oauthVerifier:\n                  type: string\n        twitter-tweet:\n          type: object\n          properties:\n            tweet:\n              type: object\n              properties:\n                tweetId:\n                  type: string\n                accountId:\n                  type: string\n                description:\n                  type: string\n                publicationDate:\n                  type: integer\n",
			"canonicalURL": "/github.com/IronSenior/Plato-backend@361c0cc75af33b11f83f26bc86b9e4783f33ee2c/-/blob/plato/static/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/IronSenior/Plato-backend/blob/361c0cc75af33b11f83f26bc86b9e4783f33ee2c/plato/static/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}