{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FPriv/factom-harmony-connect-go-client"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 106285,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: harmony-support@factom.com\n    name: Factom Inc.\n    url: https://docs.harmony.factom.com\n  description: An easy to use API that helps you access the Factom blockchain.\n  title: Harmony Connect\n  version: 1.0.19\nservers:\n- url: https://ephemeral.api.factom.com/v1\ntags:\n- description: Get information about the API\n  name: Info\n- description: Commands dealing with Chains\n  name: Chains\n- description: Commands dealing with Entries\n  name: Entries\n- description: Commands dealing with Digital Identities\n  name: Identities\n- description: Commands related to proving the validity of entries that have been published to a Factom blockchain.\n  name: Proofs\npaths:\n  /:\n    get:\n      description: Request general information about the Connect API such as the version and available endpoints.\n      operationId: getApiInfo\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllInfo'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: API Info\n      tags:\n      - Info\n  /chains/{chain_id}:\n    get:\n      description: Get information about a specific chain on Connect\n      operationId: getChainByID\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Chain'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Chain Info\n      tags:\n      - Chains\n  /chains:\n    get:\n      description: Returns all of the chains on factomd.\n      operationId: getChains\n      parameters:\n      - description: The number of items you would like back in each page.\n        example: \"15\"\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n        example: \"2\"\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: 'The immutability stages you want to restrict results to. You\n          can choose any from `replicated`, `factom`, and `anchored`. If you would\n          like to search among multiple stages, send them in a comma separated string.\n          For example: `''replicated,factom''`.'\n        explode: true\n        in: query\n        name: stages\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChainList'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get All Chains\n      tags:\n      - Chains\n    post:\n      description: Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the `content` and `external_ids` fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the `content` and `external_id` fields will be applied to this entry.\n      operationId: postChain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChainCreate'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChainShort'\n          description: Created\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Create a Chain\n      tags:\n      - Chains\n  /chains/search:\n    post:\n      description: Finds all of the chains with `external_ids` that match what you've entered. External IDs must be sent in Base64 format.\n      operationId: postChainSearch\n      parameters:\n      - description: The number of items you would like back in each page.\n        example: \"15\"\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n        example: \"2\"\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/postSearchBody'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChainList'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Search Chains\n      tags:\n      - Chains\n  /chains/{chain_id}/entries/{entry_hash}:\n    get:\n      description: Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.\n      operationId: getEntryByHash\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The unique identitfier of the entry.\n        example: db\n        explode: false\n        in: path\n        name: entry_hash\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Entry Info\n      tags:\n      - Entries\n  /chains/{chain_id}/entries:\n    get:\n      description: List all entries contained on the specified chain.\n      operationId: getEntriesByChainID\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The number of items you would like back in each page.\n        example: \"15\"\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n        example: \"2\"\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: 'The immutability stages you want to restrict results to. You\n          can choose any from `replicated`, `factom`, and `anchored`. If you would\n          like to search among multiple stages, send them in a comma separated string.\n          For example: `''replicated,factom''`.'\n        explode: true\n        in: query\n        name: stages\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryList'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Chain's Entries\n      tags:\n      - Entries\n    post:\n      description: Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.\n      operationId: postEntryToChainID\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntryCreate'\n        required: true\n      responses:\n        202:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryShort'\n          description: Accepted\n        422:\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Unprocessable entity\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Create an Entry\n      tags:\n      - Entries\n  /chains/{chain_id}/entries/first:\n    get:\n      description: Retrieve the first entry that has been saved to this chain.\n      operationId: getFirstEntry\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Chain's First Entry\n      tags:\n      - Entries\n  /chains/{chain_id}/entries/last:\n    get:\n      description: Retrieve the last entry that has been saved to this chain.\n      operationId: getLastEntry\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Chain's Last Entry\n      tags:\n      - Entries\n  /chains/{chain_id}/entries/search:\n    post:\n      description: Find all of the entries within the specified chain that have the requested `external_ids`.\n      operationId: postEntriesSearch\n      parameters:\n      - description: Chain identifier\n        example: 285904\n        explode: false\n        in: path\n        name: chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The number of items you would like back in each page.\n        example: \"15\"\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n        example: \"2\"\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      requestBody:\n        $ref: '#/components/requestBodies/postSearchBody'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntrySearchResponse'\n          description: OK\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Search Chain's Entries\n      tags:\n      - Entries\n  /identities/{identity_chain_id}:\n    get:\n      description: Retrieve the details about a particular Identity Chain.\n      operationId: getIdChainbyId\n      parameters:\n      - description: The hex encoded string that points to the identity's chain\n        example: 72933895e24e77d8a46482731386a6f177d61777179a5b11dde582e692910eb0\n        explode: false\n        in: path\n        name: identity_chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityChain'\n          description: OK\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Bad Request\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not Found\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Identity Chain Info\n      tags:\n      - Identities\n  /identities:\n    post:\n      description: Creates a new identity chain. To create the chain, you'll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.\n      operationId: postIdChain\n      requestBody:\n        $ref: '#/components/requestBodies/postIdentityBody'\n      responses:\n        202:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChainShort'\n          description: Accepted\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Bad Request\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Conflict\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Create Identity Chain\n      tags:\n      - Identities\n  /identities/{identity_chain_id}/keys/{key_string}:\n    get:\n      description: Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.\n      operationId: getKeybyEntryHash\n      parameters:\n      - description: The hex encoded string that points to the identity's chain\n        example: 72933895e24e77d8a46482731386a6f177d61777179a5b11dde582e692910eb0\n        explode: false\n        in: path\n        name: identity_chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The public key string. Must be in base58 idpub format.\n        example: db\n        explode: false\n        in: path\n        name: key_string\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityKey'\n          description: OK\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Bad Request\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not Found\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Key Info\n      tags:\n      - Identities\n  /identities/{identity_chain_id}/keys:\n    get:\n      description: Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.\n      operationId: getKeysbyIdChainId\n      parameters:\n      - description: The hex encoded string that points to the identity's chain\n        example: 72933895e24e77d8a46482731386a6f177d61777179a5b11dde582e692910eb0\n        explode: false\n        in: path\n        name: identity_chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The number of items you would like back in each page.\n        example: \"15\"\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n        example: \"2\"\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyList'\n          description: OK\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Bad Request\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not Found\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Identity Chain's Keys\n      tags:\n      - Identities\n    post:\n      description: \"Retires an existing key from an identity and replaces it with\\\n        \\ a new one. To do this, a user must send the key to be replaced (`old_key`),\\\n        \\ the `new_key`, the signing key that authorizes the replacement and a signed\\\n        \\ message from the signing key. The signing key must be either equal to or\\\n        \\ senior to the key that is being replaced. \\n*Note: You may not reuse a key.\\\n        \\ If the `new_key` has been used by this Identity at any level, the replacement\\\n        \\ will fail.*\"\n      operationId: postKeytoIdChainId\n      parameters:\n      - description: The hex encoded string that points to the identity's chain\n        example: 72933895e24e77d8a46482731386a6f177d61777179a5b11dde582e692910eb0\n        explode: false\n        in: path\n        name: identity_chain_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        $ref: '#/components/requestBodies/postKeyBody'\n      responses:\n        202:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryShort'\n          description: Accepted\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Bad Request\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not Found\n        422:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unprocessable entity\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Replace Identity Key\n      tags:\n      - Identities\n  /receipts/{entry_hash}:\n    get:\n      description: Retrieve a receipt providing cryptographically verifiable proof that information was recorded in the Factom blockchain.\n      operationId: getReceiptsbyEntry\n      parameters:\n      - description: The unique identitfier of the entry.\n        example: db\n        explode: false\n        in: path\n        name: entry_hash\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReceiptLong'\n          description: OK\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Page Not Found\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Entry's Receipts\n      tags:\n      - Proofs\n  /anchors/{object_id}:\n    get:\n      description: \"Retreive the blockchain anchors of an entry, chain, or block.\\\n        \\ Returns an array of anchors that may be of type ethereum, bitcoin, or factom.\\\n        \\ The valid identifiers for the objects that can be anchored are as follows:\\\n        \\ \\n* Entry - Entry Hash\\n* Chain - Chain ID\\n* Directory Block - Height or\\\n        \\ Key Merkle Root\\n* Entry Block - Key Merkle Root\\n* Factoid Block - Key\\\n        \\ Merkle Root\"\n      operationId: getAnchorbySearch\n      parameters:\n      - description: Object identifier.  Used to identify an entry, chain, or block that has been published on the Factom blockchain. These objects can be identified by their hash, ID, height, or key Merkle root.\n        explode: false\n        in: path\n        name: object_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorLong'\n          description: OK\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Page Not Found\n        500:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Internal Server Error\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Get Object's Anchors\n      tags:\n      - Proofs\n  /search:\n    get:\n      description: Search for something on the Factom blockchain. You may search for Directory Blocks (by height or key Merkle root), Entry Blocks (by key Merkle root), Factoid Blocks (by key Merkle root), Chains (by Chain ID), Entries (by Entry Hash), Addresses (by user address or address), and Transactions (by transaction ID).\n      operationId: getSearch\n      parameters:\n      - description: The term that you are searching for. You may search for Directory Blocks (by height or key Merkle root), Entry Blocks (by key Merkle root), Factoid Blocks (by key Merkle root), Chains (by Chain ID), Entries (by Entry Hash), Addresses (by user address or address), and Transactions (by transaction ID).\n        explode: true\n        in: query\n        name: term\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: When entered, filters chain and entry responses by immutability stage. Must be either `replicated`, `factom`, or `anchored`.\n        explode: true\n        in: query\n        name: allowed_stages\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n          description: OK\n        404:\n          content:\n            application/json:\n              schema:\n                type: object\n          description: No Results\n      security:\n      - AppId: []\n      - AppKey: []\n      summary: Search\n      tags:\n      - Proofs\ncomponents:\n  parameters:\n    dblock_id:\n      description: Directory Block identifier. You can identify a directory block by either its block height or key Merkle root.\n      explode: false\n      in: path\n      name: dblock_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    object_id:\n      description: Object identifier.  Used to identify an entry, chain, or block that has been published on the Factom blockchain. These objects can be identified by their hash, ID, height, or key Merkle root.\n      explode: false\n      in: path\n      name: object_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    ablock_id:\n      description: Administrative Block identifier\n      explode: false\n      in: path\n      name: ablock_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    tx_id:\n      description: Transaction identifier\n      explode: false\n      in: path\n      name: tx_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    hash:\n      description: The hash of an entry, admin block, or entry credit block.\n      example: 285904\n      explode: false\n      in: path\n      name: hash\n      required: true\n      schema:\n        type: string\n      style: simple\n    keymr:\n      description: Key Merkle Root\n      example: 285904\n      explode: false\n      in: path\n      name: keymr\n      required: true\n      schema:\n        type: string\n      style: simple\n    address:\n      description: Factoid wallet address\n      example: 285904\n      explode: false\n      in: path\n      name: address\n      required: true\n      schema:\n        type: string\n      style: simple\n    chain_id:\n      description: Chain identifier\n      example: 285904\n      explode: false\n      in: path\n      name: chain_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    entry_hash:\n      description: The unique identitfier of the entry.\n      example: db\n      explode: false\n      in: path\n      name: entry_hash\n      required: true\n      schema:\n        type: string\n      style: simple\n    identity_chain_id:\n      description: The hex encoded string that points to the identity's chain\n      example: 72933895e24e77d8a46482731386a6f177d61777179a5b11dde582e692910eb0\n      explode: false\n      in: path\n      name: identity_chain_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    key_string:\n      description: The public key string. Must be in base58 idpub format.\n      example: db\n      explode: false\n      in: path\n      name: key_string\n      required: true\n      schema:\n        type: string\n      style: simple\n    offset:\n      description: The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. `offset=0` starts from the first item of the set and is the default position.\n      example: \"2\"\n      explode: true\n      in: query\n      name: offset\n      required: false\n      schema:\n        format: int32\n        type: integer\n      style: form\n    limit:\n      description: The number of items you would like back in each page.\n      example: \"15\"\n      explode: true\n      in: query\n      name: limit\n      required: false\n      schema:\n        format: int32\n        type: integer\n      style: form\n    stages:\n      description: 'The immutability stages you want to restrict results to. You can\n        choose any from `replicated`, `factom`, and `anchored`. If you would like\n        to search among multiple stages, send them in a comma separated string. For\n        example: `''replicated,factom''`.'\n      explode: true\n      in: query\n      name: stages\n      required: false\n      schema:\n        type: string\n      style: form\n    term:\n      description: The term that you are searching for. You may search for Directory Blocks (by height or key Merkle root), Entry Blocks (by key Merkle root), Factoid Blocks (by key Merkle root), Chains (by Chain ID), Entries (by Entry Hash), Addresses (by user address or address), and Transactions (by transaction ID).\n      explode: true\n      in: query\n      name: term\n      required: false\n      schema:\n        type: string\n      style: form\n    allowed_stages:\n      description: When entered, filters chain and entry responses by immutability stage. Must be either `replicated`, `factom`, or `anchored`.\n      explode: true\n      in: query\n      name: allowed_stages\n      required: false\n      schema:\n        type: string\n      style: form\n  requestBodies:\n    postSearchBody:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SearchBody'\n      required: true\n    postIdentityBody:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/IdentityCreate'\n      required: true\n    postKeyBody:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/IdentityKeyReplace'\n      required: true\n  schemas:\n    AllInfo:\n      example:\n        version: v1.0.1234\n        links:\n          chains: https://api.factom.com/apollo/v1/chains\n      properties:\n        version:\n          description: Current version of the Connect API\n          type: string\n        links:\n          $ref: '#/components/schemas/AllInfo_links'\n      required:\n      - links\n      - version\n      type: object\n    ErrorMessage:\n      properties:\n        errors:\n          description: A list of errors caused by the previous request.\n          items:\n            $ref: '#/components/schemas/ErrorMessage_errors'\n          type: array\n      required:\n      - errors\n      type: object\n    SearchBody:\n      description: The external IDs of the chains or entries you want to retrieve. You must enter these External IDs in Base64 format.\n      example:\n        external_ids:\n        - bXk=\n        - Y2hhaW4=\n      properties:\n        external_ids:\n          description: A list of external IDs.\n          example:\n          - bXk=\n          - Y2hhaW4=\n          items:\n            example: Y2hhaW4=\n            type: string\n          type: array\n      required:\n      - external_ids\n      type: object\n    ChainLink:\n      description: An object that contains the Chain Hash (ID) as well as a URL for the chain.\n      example:\n        chain_id: \"285904\"\n        links:\n          chain: https://api.factom.com/apollo/v1/chains/285904\n      properties:\n        chain_id:\n          description: The ID for this chain on the Factom blockchain.\n          type: string\n        href:\n          description: An API link to retrieve all information about this chain.\n          type: string\n      required:\n      - chain_id\n      - href\n      type: object\n    ChainCreate:\n      description: Used to create a new chain on Connect.\n      example:\n        external_ids:\n        - bXk=\n        - Y2hhaW4=\n        content: VGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgZmlyc3QgY2hhaW4gZW50cnk=\n        callback_url: http://httpbin.org/post?my_id=\"12345\"\n        callback_stages:\n        - factom\n        - anchored\n      properties:\n        external_ids:\n          description: Tags that can be used to identify your chain. You can search for records that contain a particular external_id using Connect. You must send External IDs in Base64 format.\n          items:\n            type: string\n          type: array\n        content:\n          description: This is the data that will make up the first entry in your new chain. It is customary to use this space to describe the entries that are to follow in the chain. You must send the content field in Base64 format.\n          type: string\n        callback_url:\n          description: The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.\n          type: string\n        callback_stages:\n          description: 'The stages that you would like to trigger a callback from\n            Connect. This list can include any or all of the three stages: `replicated`,\n            `factom`, and `anchored`. If callbacks are activated and this field is\n            not sent, it will default to `factom` and `anchored`'\n          items:\n            type: string\n          type: array\n      required:\n      - content\n      - external_ids\n      type: object\n    ChainList:\n      description: Represents a list of Factom entries that have been or will be saved to the blockchain.\n      example:\n        chain_id: \"285904\"\n        external_ids:\n        - bXk=\n        - Y2hhaW4=\n        links:\n          entries: https://api.factom.com/apollo/v1/chains/285904/entries\n          first: https://api.factom.com/apollo/v1/chains/285904/entries/first\n          last: https://api.factom.com/apollo/v1/chains/285904/entries/last\n      properties:\n        data:\n          description: An array that contains the chains on this page.\n          items:\n            $ref: '#/components/schemas/ChainList_data'\n          type: array\n        offset:\n          description: The index of the first chain returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of chains returned.\n          format: int32\n          type: integer\n        count:\n          description: The total number of chains seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    Chain:\n      description: Represents a list of Factom entries that have been or will be saved to the blockchain.\n      example:\n        chain_id: \"285904\"\n        external_ids:\n        - bXk=\n        - Y2hhaW4=\n        links:\n          entries: https://api.factom.com/apollo/v1/chains/285904/entries\n          first: https://api.factom.com/apollo/v1/chains/285904/entries/first\n          last: https://api.factom.com/apollo/v1/chains/285904/entries/last\n      properties:\n        data:\n          $ref: '#/components/schemas/Chain_data'\n      required:\n      - data\n      type: object\n    ChainShort:\n      description: Represents a list of Factom chains that have been or will be saved to the blockchain.\n      example:\n        chain_id: \"285904\"\n        external_ids:\n        - bXk=\n        - Y2hhaW4=\n        links:\n          entries: https://api.factom.com/apollo/v1/chains/285904/entries\n          first: https://api.factom.com/apollo/v1/chains/285904/entries/first\n          last: https://api.factom.com/apollo/v1/chains/285904/entries/last\n      properties:\n        chain_id:\n          description: This is the unique identifier created for each chain.\n          type: string\n        entry_hash:\n          description: The unique identifier of the chain's first entry.\n          type: string\n        stage:\n          description: The immutability stage that this chain has reached.\n          example: Public Witness\n          type: string\n      required:\n      - chain_id\n      - entry_hash\n      - stage\n      type: object\n    EntrySearchResponse:\n      example:\n        data:\n        - stage: stage\n          href: href\n          external_ids:\n          - external_ids\n          - external_ids\n          entry_hash: entry_hash\n        - stage: stage\n          href: href\n          external_ids:\n          - external_ids\n          - external_ids\n          entry_hash: entry_hash\n        offset: 0\n        limit: 6\n        count: 1\n      properties:\n        data:\n          description: An array of entries that match your search criterion.\n          items:\n            $ref: '#/components/schemas/EntrySearchResponse_data'\n          type: array\n        offset:\n          description: The index of the first item returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The maximum number of entries per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of entries seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    EntryList:\n      description: A paginated list of entries.\n      example:\n        data:\n        - chain: '{\"chain_id\":\"285904\",\"links\":{\"chain\":\"https://api.factom.com/apollo/v1/chains/285904\"}}'\n          created_at: created_at\n          href: href\n          entry_hash: entry_hash\n        - chain: '{\"chain_id\":\"285904\",\"links\":{\"chain\":\"https://api.factom.com/apollo/v1/chains/285904\"}}'\n          created_at: created_at\n          href: href\n          entry_hash: entry_hash\n        offset: 0\n        limit: 6\n        count: 1\n      properties:\n        data:\n          description: An array that contains the entries on this page.\n          items:\n            $ref: '#/components/schemas/EntryList_data'\n          type: array\n        offset:\n          description: The index of the first entry returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of entries returned.\n          format: int32\n          type: integer\n        count:\n          description: The total number of entries seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    EntryCreate:\n      description: This information will be used to create a new entry.\n      example:\n        external_ids:\n        - bXk=\n        - bmV3\n        - Y2hhaW4=\n        - ZW50cnk=\n        content: V2FpdCwgYXJlIHlvdSByZWFsbHkgdGFraW5nIHRoZSB0aW1lIHRvIGNvbnZlcnQgdGhlc2UgYW5kIHJlYWQgdGhlbT8gV293Lg==\n        callback_url: http://httpbin.org/post?my_id=\"12345\"\n        callback_stages:\n        - factom\n        - anchored\n      properties:\n        external_ids:\n          description: Tags that can be used to identify your entry. You can search for records that contain a particular `external_id` using Connect. External IDs should be sent in Base64.\n          items:\n            type: string\n          type: array\n        content:\n          description: This is the data that will be stored directly on the blockchain. Please be sure that no private information is entered here. Content should be sent in Base64 format.\n          type: string\n        callback_url:\n          description: The address you'd like the callback to be sent to. If this is not specified, callbacks will not activate.\n          type: string\n        callback_stages:\n          description: 'The immutability stages you''d like to be notified about.\n            This list can include any or all of the three stages: `replicated`, `factom`,\n            and `anchored`. If callbacks are activated and this field is not sent,\n            it will default to `factom` and `anchored`'\n          items:\n            type: string\n          type: array\n      required:\n      - content\n      - external_ids\n      type: object\n    Entry:\n      description: A single record that has been or will be saved to the blockchain.\n      example:\n        entry_hash: ea\n        chain_id: \"285904\"\n        external_ids:\n        - NkQ3OQ==\n        - NjM2ODYxNjk2RQ==\n        content: aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1xSjdZQWh0elJzWQ==\n        links:\n          chain: https://api.factom.com/apollo/v1/chains/285904\n      properties:\n        data:\n          $ref: '#/components/schemas/Entry_data'\n      required:\n      - data\n      type: object\n    EntryShort:\n      example:\n        entry_hash: 7BDC25D1694EF984782A16F6F1710C1C6BC83BA7A131B515BAF532BEA021D011\n        stage: replicated\n      properties:\n        entry_hash:\n          description: The unique identifier of the entry you just created. You can use this hash to referece this entry in the future.\n          type: string\n        stage:\n          description: The current immutability stage of the new entry.\n          type: string\n      type: object\n    IdentityChain:\n      example:\n        stage: stage\n        chain_id: chain_id\n        all_keys_href: all_keys_href\n        name:\n        - name\n        - name\n        active_keys:\n        - data:\n            key: key\n            activated_height: 6\n            retired_height: 1\n        - data:\n            key: key\n            activated_height: 6\n            retired_height: 1\n        version: version\n        created_height: 0\n      properties:\n        version:\n          description: The Identity Chain’s schema version. This details the format of this digital identity. More information about Factom Identity Chain schemas can be seen [here]().\n          type: string\n        stage:\n          description: The immutability stage that this chain has reached. The identity can be considered in use once it reaches the `factom` stage.\n          type: string\n        created_height:\n          description: The block height at which this chain was written into the Factom blockchain. This is `null` if the chain has not reached the `factom` stage.\n          format: int32\n          type: integer\n        chain_id:\n          description: The Chain ID for this identity chain.\n          type: string\n        name:\n          description: A unique array of strings that are associated with this identity.\n          items:\n            type: string\n          type: array\n        active_keys:\n          description: Contains the currently active public keys for this identity.\n          items:\n            $ref: '#/components/schemas/IdentityKeyShort'\n          type: array\n        all_keys_href:\n          description: An API link to retrieve the keys for this identity.\n          type: string\n      required:\n      - active_keys\n      - all_keys_href\n      - chain_id\n      - name\n      - stage\n      - version\n      type: object\n    IdentityCreate:\n      example:\n        callback_url: callback_url\n        callback_stages:\n        - callback_stages\n        - callback_stages\n        names:\n        - names\n        - names\n        keys:\n        - keys\n        - keys\n      properties:\n        names:\n          description: \"A unique array of strings that together constitute the Identity's\\\n            \\ name. Each string should be in Base64 format. \\n *Note: It is best to\\\n            \\ avoid adding personally identifiable information to the blockchain.*\"\n          items:\n            type: string\n          type: array\n        keys:\n          description: A list of public keys that will be used to verify this Indenty’s signatures. You may initiate an identity with as many keys as you like. The array of keys should be sent in order of priority with 0 being the master key. The keys should be sent as Base58 strings in IdPub format.\n          items:\n            description: One of the public keys.\n            type: string\n          type: array\n        callback_url:\n          description: The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.\n          type: string\n        callback_stages:\n          description: 'The stages that you would like to trigger a callback from\n            Connect. This list can include any or all of the three stages: `replicated`,\n            `factom`, and `anchored`. If callbacks are activated and this field is\n            not sent, it will default to `factom` and `anchored`'\n          items:\n            type: string\n          type: array\n      required:\n      - keys\n      - names\n      type: object\n    KeyList:\n      example:\n        data:\n        - data:\n            priority: 1\n            key: key\n            activated_height: 0\n            retired_height: 6\n            entry_hash: entry_hash\n        - data:\n            priority: 1\n            key: key\n            activated_height: 0\n            retired_height: 6\n            entry_hash: entry_hash\n        offset: 0\n        limit: 6\n        count: 1\n      properties:\n        data:\n          description: The keys returned in this set.\n          items:\n            $ref: '#/components/schemas/IdentityKey'\n          type: array\n        offset:\n          description: The index of the first key returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of keys returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of keys seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    IdentityKey:\n      example:\n        data:\n          priority: 1\n          key: key\n          activated_height: 0\n          retired_height: 6\n          entry_hash: entry_hash\n      properties:\n        data:\n          $ref: '#/components/schemas/IdentityKey_data'\n      required:\n      - data\n      type: object\n    IdentityKeyShort:\n      example:\n        data:\n          key: key\n          activated_height: 6\n          retired_height: 1\n      properties:\n        data:\n          $ref: '#/components/schemas/IdentityKeyShort_data'\n      required:\n      - data\n      type: object\n    IdentityKeyReplace:\n      example:\n        new_key: new_key\n        callback_url: callback_url\n        callback_stages:\n        - callback_stages\n        - callback_stages\n        signature: signature\n        signer_key: signer_key\n        old_key: old_key\n      properties:\n        old_key:\n          description: The public key you would like to replace. This should be sent as a Base58 string in IdPub format.\n          type: string\n        new_key:\n          description: The public key that you would like to activate. This should be sent as a Base58 string in IdPub format.\n          type: string\n        signer_key:\n          description: The key you are using to authorize the replacement. Must be equal to or higher level than the key you want to replace. This should be sent as a Base58 string in IdPub format.\n          type: string\n        signature:\n          description: A signature that proves ownership of the `signer_key`. This signature should use the [Ed25519](https://ed25519.cr.yp.to/) specification. The signed message should be the Identity Chain ID, the Old Key, and the New Key in that order. The message should be a single string with no whitespace or separators between the three parts.\n          type: string\n        callback_url:\n          description: The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.\n          type: string\n        callback_stages:\n          description: 'The stages that you would like to trigger a callback from\n            Connect. This list can include any or all of the three stages: `replicated`,\n            `factom`, and `anchored`. If callbacks are activated and this field is\n            not sent, it will default to `factom` and `anchored`'\n          items:\n            type: string\n          type: array\n      required:\n      - new_key\n      - old_key\n      - signature\n      - signer_key\n      type: object\n    DBlockLong:\n      description: A single Directory block from the factom blockchain.\n      properties:\n        height:\n          description: The height of a directory block indicates how many blocks were created before this block. This is used to identify blocks in the blockchain.\n          type: string\n        started_at:\n          description: 'The timestamp for when this block was built. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        keymr:\n          description: The Key Merkle Root for this block.\n          items:\n            type: string\n          type: array\n        btc_anchor_entry:\n          $ref: '#/components/schemas/DBlockLong_btc_anchor_entry'\n        btc_block_hash:\n          description: The bitcoin block hash for the bitcoin anchor that matches this directory block.\n          type: string\n        btc_transaction:\n          description: The bitcoin transaction ID for the transaction that includes the anchor message.\n          type: string\n        prev:\n          $ref: '#/components/schemas/DBlockLong_prev'\n        next:\n          $ref: '#/components/schemas/DBlockLong_next'\n        ablock:\n          $ref: '#/components/schemas/DBlockLong_ablock'\n        ecblock:\n          $ref: '#/components/schemas/DBlockLong_ecblock'\n        fblock:\n          $ref: '#/components/schemas/DBlockLong_fblock'\n        eblocks:\n          description: The entry blocks contained in this directory block.\n          items:\n            $ref: '#/components/schemas/DBlockLong_eblocks'\n          type: array\n      type: object\n    DBlockShort:\n      description: A single Directory block from the factom blockchain.\n      properties:\n        height:\n          description: The height of a directory block indicates how many blocks were created before this block. This is used to identify blocks in the blockchain.\n          format: int32\n          type: integer\n        started_at:\n          description: 'The timestamp for when this block was built. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        keymr:\n          description: The Key Merkle Root for this block.\n          type: string\n        href:\n          description: The link to retrieve all information for this directory block.\n          type: string\n        admin_entries:\n          description: The number of entries contained in the admin block.\n          type: string\n        ec_entries:\n          description: The number of entries contained in the entry credit block.\n          type: string\n        factoid_entries:\n          description: The number of entries contained in the factoid block.\n          type: string\n        entries:\n          description: The number of entries contained in the entry blocks.\n          type: string\n      type: object\n    DBlockLink:\n      description: A link to the directory block.\n      example:\n        keymr: keymr\n        href: href\n        height: 0\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom block height of this block.\n          format: int32\n          type: integer\n        href:\n          description: An API link to retrieve all available information about this directory block.\n          type: string\n      required:\n      - height\n      - href\n      - keymr\n      type: object\n    DBlockList:\n      properties:\n        data:\n          description: The directory blocks returned in this set.\n          items:\n            $ref: '#/components/schemas/DBlockShort'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of blocks seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    ABlockLong:\n      description: A single Admin block from the factom blockchain.\n      properties:\n        hash:\n          description: The SHA256 Hash of this block.\n          type: string\n        back_reference_hash:\n          description: The hash of the previous admin block.\n          type: string\n        prev:\n          $ref: '#/components/schemas/ABlockLong_prev'\n        next:\n          $ref: '#/components/schemas/ABlockLong_next'\n        dblock:\n          $ref: '#/components/schemas/ABlockLong_dblock'\n        entries:\n          description: The entries contained in this admin block.\n          type: string\n      type: object\n    ABlockShort:\n      description: A single Admin block from the factom blockchain.\n      properties:\n        hash:\n          description: The SHA256 Hash of this block.\n          type: string\n        href:\n          description: A link to retrieve all data for this admin block.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/ABlockShort_dblock'\n      type: object\n    ABlockList:\n      properties:\n        data:\n          description: The admin blocks returned in this set.\n          items:\n            $ref: '#/components/schemas/ABlockShort'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of blocks seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    ABlockEntryList:\n      properties:\n        data:\n          description: The Admin block entries returned in this set.\n          items:\n            $ref: '#/components/schemas/ABlockEntryLink'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of entries seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    ABlockEntry:\n      properties:\n        data:\n          $ref: '#/components/schemas/ABlockEntry_data'\n      required:\n      - data\n      type: object\n    ABlockEntryLink:\n      description: An admin block entry.\n      properties:\n        hash:\n          description: The SHA256 Hash of this entry.\n          type: string\n        content:\n          description: The content of the admin block entry.\n          type: string\n        created_at:\n          description: 'The timestamp for when this entry was created. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        href:\n          description: An API link to retreive all of the information about the entry.\n          type: string\n      required:\n      - content\n      - created_at\n      - hash\n      - href\n      type: object\n    ECBlockLong:\n      description: A single entry credit block from the factom blockchain.\n      properties:\n        hash:\n          description: The SHA256 Hash of this entry credit block.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/ECBlockLong_dblock'\n        entries:\n          description: The entries contained in this admin block.\n          type: string\n      type: object\n    ECBlockShort:\n      description: A single entry credit block from the factom blockchain.\n      properties:\n        hash:\n          description: The SHA256 Hash of this entry credit block.\n          type: string\n        href:\n          description: An API link to obtain the full set of data for this entry credit block.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/ECBlockLong_dblock'\n      type: object\n    ECBlockList:\n      properties:\n        data:\n          description: The entry credit blocks returned in this set.\n          items:\n            $ref: '#/components/schemas/ECBlockShort'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of blocks seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    ECBlockEntryList:\n      properties:\n        data:\n          description: The commits returned in this set.\n          items:\n            $ref: '#/components/schemas/CommitLink'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of commits seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    CommitLink:\n      properties:\n        hash:\n          description: The SHA256 Hash of this commit.\n          type: string\n        created_at:\n          description: 'The timestamp for when this commit was created. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        href:\n          description: An API link to retreive all of the information about this commit.\n          type: string\n      required:\n      - created_at\n      - hash\n      - href\n      type: object\n    CommitLong:\n      properties:\n        hash:\n          description: The SHA256 Hash of this commit.\n          type: string\n        tx_id:\n          description: The entry credit transaction ID that resulted in this commit.\n          type: string\n        version:\n          description: The type version of this transaction.\n          format: int32\n          type: integer\n        created_at:\n          description: 'The timestamp for when this commit was created. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        chain_id:\n          description: The ID of the chain that was altered by this commit.\n          type: string\n        weld:\n          description: The commit weld for this commit. This is the double hash (SHA256d) of the Entry Hash concatenated with the ChainID.\n          type: string\n        entry_hash:\n          description: The unique identifier of the entry that was created by this commit.\n          type: string\n        entry_credits:\n          description: The number of entry credits spent on this commit.\n          format: int32\n          type: integer\n        address:\n          description: The entry credit address that initiated this transaction.\n          type: string\n        signature:\n          description: The signature that authorized this commit.\n          type: string\n        ec_block:\n          $ref: '#/components/schemas/ECBlockShort'\n      required:\n      - address\n      - chain_id\n      - created_at\n      - ecblock\n      - entry_credits\n      - entry_hash\n      - hash\n      - signature\n      - tx_id\n      - version\n      - weld\n      type: object\n    EBlockLinkChain:\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n        chain:\n          $ref: '#/components/schemas/DBlockLong_btc_anchor_entry_chain'\n      type: object\n    EBlockLink:\n      description: A link to the entry block.\n      example:\n        keymr: keymr\n        href: href\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n      type: object\n    EBlockShort:\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        chain:\n          $ref: '#/components/schemas/EBlockShort_chain'\n        dblock:\n          $ref: '#/components/schemas/EBlockShort_dblock'\n        started_at:\n          description: 'The timestamp for when this block was built. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: object\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n        entries:\n          description: The number of entries contained within this entry block.\n          format: int32\n          type: integer\n      required:\n      - chain\n      - dblock\n      - entries\n      - href\n      - keymr\n      - started_at\n      type: object\n    EBlockLong:\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        sequence:\n          description: Shows where this entry block falls within the list of entry blocks that are contained in the parent directory block.\n          format: int32\n          type: integer\n        prev:\n          $ref: '#/components/schemas/EBlockLong_prev'\n        next:\n          $ref: '#/components/schemas/EBlockLong_next'\n        chain:\n          $ref: '#/components/schemas/EBlockShort_chain'\n        dblock:\n          $ref: '#/components/schemas/EBlockShort_dblock'\n        started_at:\n          description: 'The timestamp for when this block was built. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: object\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n        entries:\n          description: An API link to all of the entries in this entry block.\n          type: string\n      required:\n      - chain\n      - dblock\n      - entries\n      - href\n      - keymr\n      - sequence\n      - started_at\n      type: object\n    EBlockList:\n      properties:\n        data:\n          description: The entry blocks returned in this set.\n          items:\n            $ref: '#/components/schemas/EBlockLink'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of blocks seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    FBlockLong:\n      description: A single factoid block from the factom blockchain.\n      properties:\n        keymr:\n          description: The SHA256 Hash of this entry.\n          type: string\n        prev:\n          $ref: '#/components/schemas/FBlockLong_prev'\n        next:\n          $ref: '#/components/schemas/FBlockLong_next'\n        dblock:\n          $ref: '#/components/schemas/ABlockLong_dblock'\n        ec_rate:\n          description: The Entry credit rate at the time this block was created.\n          type: string\n        fct_total_inputs:\n          description: The number of factoid inputs in this block.\n          type: string\n        fct_total_outputs:\n          description: The number of factoid outputs in this block.\n          type: string\n        ec_total_created:\n          description: The total number of entry credits purchased in this block.\n          type: string\n        transactions:\n          description: A list of all of the transactions that occur in this block.\n          type: string\n      type: object\n    FBlockShort:\n      description: A single factoid block from the factom blockchain.\n      properties:\n        keymr:\n          description: The SHA256 Hash of this entry.\n          type: string\n        href:\n          description: An API link to obtain the full set of data for this factoid block.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/ABlockLong_dblock'\n        ec_rate:\n          description: The Entry credit rate at the time this block was created.\n          type: string\n        transactions:\n          description: The number of factoid transactions that occur in this block.\n          type: string\n      type: object\n    FBlockList:\n      properties:\n        data:\n          description: The factoid blocks returned in this set.\n          items:\n            $ref: '#/components/schemas/FBlockShort'\n          type: array\n        offset:\n          description: The index of the first block returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of blocks returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of blocks seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    Address:\n      description: A factoid or entry credit address.\n      properties:\n        address:\n          description: The literal address.\n          type: string\n        user_address:\n          description: The user address.\n          type: string\n        type:\n          description: Whether this is an entry credit or factoid address.\n          type: string\n        balance:\n          description: The current entry credit or factoid balance of the address.\n          type: string\n        transactions:\n          description: A list of all transactions that this address has paricipated in.\n          type: object\n      type: object\n    AddressLink:\n      description: A link to a factoid or entry credit address.\n      properties:\n        address:\n          description: The literal address.\n          type: string\n        user_address:\n          description: The user address.\n          type: string\n        href:\n          description: An API link to obtain all data about this address.\n          type: string\n      type: object\n    AddressList:\n      properties:\n        data:\n          description: The addresses returned in this set.\n          items:\n            $ref: '#/components/schemas/AddressLink'\n          type: array\n        offset:\n          description: The index of the first address returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of addresses returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of addresses seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    Transaction:\n      description: A single factoid transaction.\n      properties:\n        tx_id:\n          description: The transaction ID for this transaction.\n          type: string\n        created_at:\n          description: 'The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        fct_total_inputs:\n          description: The number of factoids coming in from the sender.\n          type: string\n        fct_total_outputs:\n          description: The number of factoids going out to the receiver.\n          type: string\n        ec_created:\n          description: The number of entry credits that have been purchased in this transaction.\n          type: string\n        ec_rate:\n          description: The price of an entry credit at the time of this transaction.\n          type: string\n        fct_fee:\n          description: The fee paid to the processor of this transaction.\n          type: string\n        dblock:\n          description: A link to the directory block that contains this transaction.\n          type: string\n        fblock:\n          description: A link to the factoid block that contains this transaction.\n          type: string\n        inputs:\n          description: All of the input transactions for this transaction.\n          type: string\n        outputs:\n          description: All of the output transactions for this transaction.\n          type: string\n      type: object\n    TransactionShort:\n      description: A single factoid transaction.\n      properties:\n        tx_id:\n          description: The transaction ID for this transaction.\n          type: string\n        created_at:\n          description: 'The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        dblock:\n          description: A link to the directory block that contains this transaction.\n          type: string\n        fblock:\n          description: A link to the factoid block that contains this transaction.\n          type: string\n        href:\n          description: An API link to obtain all data for this transaction.\n          type: string\n        inputs:\n          description: All of the input transactions for this transaction.\n          type: string\n        outputs:\n          description: All of the output transactions for this transaction.\n          type: string\n        out_ecs:\n          description: The number of entry credits that have been purchased in this transaction.\n          type: string\n      type: object\n    TransactionLink:\n      description: A single factoid transaction.\n      properties:\n        tx_id:\n          description: The transaction ID for this transaction.\n          type: string\n        created_at:\n          description: 'The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        href:\n          description: An API link to obtain all data for this transaction.\n          type: string\n        fct_total_inputs:\n          description: The number of factoids coming in from the sender.\n          type: string\n        fct_total_outputs:\n          description: The number of factoids going out to the receiver.\n          type: string\n        ec_created:\n          description: The number of entry credits that have been purchased in this transaction.\n          type: string\n        fct_fee:\n          description: The fee paid to the processor of this transaction.\n          type: string\n      type: object\n    TransactionLinkShort:\n      description: A single factoid transaction.\n      properties:\n        tx_id:\n          description: The transaction ID for this transaction.\n          type: string\n        created_at:\n          description: 'The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        href:\n          description: An API link to obtain all data for this transaction.\n          type: string\n        ec_rate:\n          description: The price of an entry credit at the time of this transaction.\n          type: string\n      type: object\n    TransactionList:\n      properties:\n        data:\n          description: The transactions returned in this set.\n          items:\n            $ref: '#/components/schemas/TransactionLink'\n          type: array\n        offset:\n          description: The index of the first transaction returned from the total set (Starting from 0).\n          format: int32\n          type: integer\n        limit:\n          description: The number of transactions returned per page.\n          format: int32\n          type: integer\n        count:\n          description: The total number of transactions seen.\n          format: int32\n          type: integer\n      required:\n      - count\n      - data\n      - limit\n      - offset\n      type: object\n    ReceiptLong:\n      example:\n        data:\n          dblock:\n            keymr: keymr\n            href: href\n            height: 0\n          created_at: created_at\n          merkle_branch:\n          - top: top\n            left: left\n            right: right\n          - top: top\n            left: left\n            right: right\n          eblock:\n            keymr: keymr\n            href: href\n          entry_serialized: entry_serialized\n          entry_hash: entry_hash\n      properties:\n        data:\n          $ref: '#/components/schemas/ReceiptLong_data'\n      required:\n      - data\n      type: object\n    AnchorLong:\n      example:\n        data:\n          dblock:\n            keymr: keymr\n            href: href\n            height: 0\n          anchors:\n          - window_mr: window_mr\n            block_hash: block_hash\n            created_at: created_at\n            merkle_branch:\n            - top: top\n              left: left\n              right: right\n            - top: top\n              left: left\n              right: right\n            tx_id: tx_id\n            entry_serialized: entry_serialized\n            contract_address: contract_address\n            entry_hash: entry_hash\n            network: bitcoin\n            dblock:\n              keymr: keymr\n              href: href\n              height: 0\n            window_start_height: 0\n            tx_index: 6\n            status: pending\n          - window_mr: window_mr\n            block_hash: block_hash\n            created_at: created_at\n            merkle_branch:\n            - top: top\n              left: left\n              right: right\n            - top: top\n              left: left\n              right: right\n            tx_id: tx_id\n            entry_serialized: entry_serialized\n            contract_address: contract_address\n            entry_hash: entry_hash\n            network: bitcoin\n            dblock:\n              keymr: keymr\n              href: href\n              height: 0\n            window_start_height: 0\n            tx_index: 6\n            status: pending\n      properties:\n        data:\n          $ref: '#/components/schemas/AnchorLong_data'\n      required:\n      - data\n      type: object\n    SingleAnchor:\n      example:\n        window_mr: window_mr\n        block_hash: block_hash\n        created_at: created_at\n        merkle_branch:\n        - top: top\n          left: left\n          right: right\n        - top: top\n          left: left\n          right: right\n        tx_id: tx_id\n        entry_serialized: entry_serialized\n        contract_address: contract_address\n        entry_hash: entry_hash\n        network: bitcoin\n        dblock:\n          keymr: keymr\n          href: href\n          height: 0\n        window_start_height: 0\n        tx_index: 6\n        status: pending\n      properties:\n        network:\n          description: Indicates the blockchain network that contains this anchor.\n          enum:\n          - bitcoin\n          - ethereum\n          - factom\n          type: string\n        status:\n          description: The confirmation status of the anchor. Either pending or confirmed.\n          enum:\n          - pending\n          - confirmed\n          type: string\n        tx_id:\n          description: Only returned for confirmed bitcoin or ethereum anchors. The bitcoin or ethereum transaction ID for the transaction that includes the anchor message.\n          type: string\n        block_hash:\n          description: Only returned for confirmed bitcoin or ethereum anchors. The hash of the bitcoin or ethereum block that contains the anchor message.\n          type: string\n        created_at:\n          description: 'Only returned for confirmed factom anchors. The time at which\n            this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ss.ssssssZ` This will be null if the chain\n            is not at least at the `factom` immutability stage.'\n          format: ISO 8601\n          type: string\n        entry_serialized:\n          description: Only returned for confirmed factom anchors. The raw data that makes up the entry.\n          type: string\n        entry_hash:\n          description: Only returned for confirmed factom anchors. The unique identitfier of the entry.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/DBlockLink'\n        merkle_branch:\n          description: Only returned for confirmed factom or ethereum anchors. The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.\n          items:\n            $ref: '#/components/schemas/MerkleNode'\n          type: array\n        window_start_height:\n          description: Only returned for confirmed ethereum anchors. The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.\n          format: int32\n          type: integer\n        window_mr:\n          description: Only returned for confirmed ethereum anchors. Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that's included in this anchor.\n          type: string\n        contract_address:\n          description: Only returned for confirmed ethereum anchors. The address of the contract that initiated the anchor transaction.\n          type: string\n        tx_index:\n          description: Only returned for confirmed ethereum anchors. The index of the transaction within the block.\n          format: int32\n          type: integer\n      required:\n      - network\n      - status\n      type: object\n    BitcoinAnchor:\n      properties:\n        network:\n          description: Indicates the blockchain network that contains this anchor.\n          enum:\n          - bitcoin\n          - ethereum\n          - factom\n          type: string\n        status:\n          description: The confirmation status of the anchor. Either pending or confirmed.\n          enum:\n          - pending\n          - confirmed\n          type: string\n        tx_id:\n          description: The bitcoin transaction ID for the transaction that includes the anchor message.\n          type: string\n        block_hash:\n          description: The hash of the bitcoin block that contains the anchor message.\n          type: string\n      required:\n      - network\n      - status\n      type: object\n    FactomAnchor:\n      properties:\n        network:\n          description: Indicates the blockchain network that contains this anchor.\n          enum:\n          - bitcoin\n          - ethereum\n          - factom\n          type: string\n        status:\n          description: The confirmation status of the anchor. Either pending or confirmed.\n          enum:\n          - pending\n          - confirmed\n          type: string\n        created_at:\n          description: 'The time at which this entry was created. Sent in [ISO 8601\n            Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ss.ssssssZ`\n            This will be null if the chain is not at least at the `factom` immutability\n            stage.'\n          format: ISO 8601\n          type: string\n        entry_serialized:\n          description: The raw data that makes up the entry.\n          type: string\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/DBlockLink'\n        merkle_branch:\n          description: The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.\n          items:\n            $ref: '#/components/schemas/MerkleNode'\n          type: array\n      required:\n      - network\n      - status\n      type: object\n    EthereumAnchor:\n      properties:\n        network:\n          description: Indicates the blockchain network that contains this anchor.\n          enum:\n          - bitcoin\n          - ethereum\n          - factom\n          type: string\n        status:\n          description: The confirmation status of the anchor. Either pending or confirmed.\n          enum:\n          - pending\n          - confirmed\n          type: string\n        window_start_height:\n          description: The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.\n          format: int32\n          type: integer\n        window_mr:\n          description: Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that's included in this anchor.\n          type: string\n        merkle_branch:\n          description: The merkle branch that leads to the Directory block in question. Relates to the Window Merkle root. Presented as an array of Merkle nodes.\n          items:\n            $ref: '#/components/schemas/MerkleNode'\n          type: array\n        contract_address:\n          description: The address of the contract that initiated the anchor transaction.\n          type: string\n        tx_id:\n          description: The ethereum transaction ID for the transaction that includes the anchor message.\n          type: string\n        tx_index:\n          description: The index of the transaction within the block.\n          format: int32\n          type: integer\n        block_hash:\n          description: The hash of the ethereum block that contains the anchor transaction.\n          type: string\n      required:\n      - network\n      - status\n      type: object\n    MerkleNode:\n      example:\n        top: top\n        left: left\n        right: right\n      properties:\n        top:\n          description: The top of this node of the Merkle tree.\n          type: string\n        right:\n          description: The right branch of this node of the Merkle tree.\n          type: string\n        left:\n          description: The left branch of this node of the Merkle tree.\n          type: string\n      type: object\n    inline_response_200_data:\n      description: The search result. Includes an API link that allows you to retreive more information about the result. Also includes additional information based on the type of result reterned.\n      example:\n        href: href\n      properties:\n        href:\n          description: An API link to retrieve all information about this search result.\n          type: string\n    inline_response_200:\n      example:\n        data:\n          href: href\n        type: type\n      properties:\n        data:\n          $ref: '#/components/schemas/inline_response_200_data'\n        type:\n          description: Tells you what type of result was found. Possible types include `directory_block`, `entry_block`, `factoid_block`, `chain`, `entry`, `address`, and `transaction`.\n          type: string\n    AllInfo_links:\n      description: Links to internal paths of the application\n      properties:\n        chains:\n          description: Link to chain api\n          type: string\n      required:\n      - chains\n    ErrorMessage_errors:\n      description: Contains information about a single error.\n      properties:\n        details:\n          description: A detailed description of the error.\n          type: string\n      required:\n      - details\n    ChainList_data:\n      properties:\n        chain_id:\n          description: The ID for this chain on the Factom blockchain.\n          type: string\n        external_ids:\n          description: The external IDs attached to this chain on the Factom blockchain.\n          items:\n            type: string\n          type: array\n        href:\n          description: An API link to retrieve all information about this chain.\n          type: string\n        stage:\n          description: The level of immutability that this chain has reached.\n          type: string\n        created_at:\n          description: 'The time at which this chain was created. Sent in [ISO 8601\n            Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ss.ssssssZ`\n            This will be null if the chain is not at least at the `factom` immutability\n            stage.'\n          type: string\n      required:\n      - chain_id\n      - external_ids\n      - href\n      - stage\n    Chain_data_entries:\n      properties:\n        href:\n          description: An API link to all of the entries in this chain.\n          type: string\n      required:\n      - href\n    Chain_data_eblock:\n      description: Represents the Entry Block that contains the first entry of this chain. This will be null if the chain is not at least at the `factom` immutability stage.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n    Chain_data_dblock:\n      description: Represents the Directory Block that relates to this chain. This will be null if the chain is not at least at the `factom` immutability stage.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom blockchain height of this directory block.\n          format: int32\n          type: integer\n        href:\n          description: An API link to retrieve all information about this directory block.\n          type: string\n    Chain_data:\n      properties:\n        chain_id:\n          description: This is the unique identifier created for each chain.\n          type: string\n        content:\n          description: This is the data that was stored in the first entry of this chain.\n          type: string\n        external_ids:\n          description: Tags that have been used to identify this entry.\n          items:\n            type: string\n          type: array\n        stage:\n          description: The immutability stage that this chain has reached.\n          example: replicated\n          type: string\n        entries:\n          $ref: '#/components/schemas/Chain_data_entries'\n        eblock:\n          $ref: '#/components/schemas/Chain_data_eblock'\n        dblock:\n          $ref: '#/components/schemas/Chain_data_dblock'\n        created_at:\n          description: 'The time at which this chain was created. Sent in [ISO 8601\n            Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ss.ssssssZ`\n            This will be null if the chain is not at least at the `factom` immutability\n            stage.'\n          type: string\n      required:\n      - chain_id\n      - content\n      - entries\n      - external_ids\n      - stage\n    EntrySearchResponse_data:\n      example:\n        stage: stage\n        href: href\n        external_ids:\n        - external_ids\n        - external_ids\n        entry_hash: entry_hash\n      properties:\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        external_ids:\n          description: Tags that can be used to identify this entry.\n          items:\n            type: string\n          type: array\n        stage:\n          description: The level of immutability that this entry has reached.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry.\n          type: string\n      required:\n      - entry_hash\n      - external_ids\n      - href\n      - stage\n    EntryList_chain:\n      description: An object that contains the Chain Hash (ID) as well as a URL for the chain.\n      example: '{\"chain_id\":\"285904\",\"links\":{\"chain\":\"https://api.factom.com/apollo/v1/chains/285904\"}}'\n      properties:\n        chain_id:\n          description: The ID for this chain on the Factom blockchain.\n          type: string\n        href:\n          description: An API link to retrieve all information about this chain.\n          type: string\n    EntryList_data:\n      example:\n        chain: '{\"chain_id\":\"285904\",\"links\":{\"chain\":\"https://api.factom.com/apollo/v1/chains/285904\"}}'\n        created_at: created_at\n        href: href\n        entry_hash: entry_hash\n      properties:\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        chain:\n          $ref: '#/components/schemas/EntryList_chain'\n        created_at:\n          description: 'The time at which this entry was created. Sent in [ISO 8601\n            Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ss.ssssssZ`'\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry.\n          type: string\n      required:\n      - chain\n      - entry_hash\n      - href\n    Entry_data_dblock:\n      description: Represents the Directory Block that relates to this entry. This will be null if the chain is not at least at the `factom` immutability stage.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom blockchain height of this directory block.\n          format: int32\n          type: integer\n        href:\n          description: An API link to retrieve all information about this directory block.\n          type: string\n    Entry_data_eblock:\n      description: Represents the Entry Block that contains the entry. This will be null if the entry is not at least at the `factom` immutability stage.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n    Entry_data:\n      properties:\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        chain:\n          $ref: '#/components/schemas/EntryList_chain'\n        created_at:\n          description: 'The time when this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ss.ssssssZ`'\n          type: string\n        external_ids:\n          description: Tags that can be used to identify your entry. You can search for records that contain a particular `external_id` using Connect. External IDs are returned in Base64.\n          items:\n            type: string\n          type: array\n        content:\n          description: This is the data that is stored by the entry. Content will be sent in Base64 format.\n          type: string\n        stage:\n          description: The level of immutability that this entry has reached.\n          type: string\n        dblock:\n          $ref: '#/components/schemas/Entry_data_dblock'\n        eblock:\n          $ref: '#/components/schemas/Entry_data_eblock'\n      required:\n      - chain\n      - content\n      - entry_hash\n      - external_ids\n      - stage\n    IdentityKey_data:\n      example:\n        priority: 1\n        key: key\n        activated_height: 0\n        retired_height: 6\n        entry_hash: entry_hash\n      properties:\n        key:\n          description: The public key string in Base58 idpub format.\n          type: string\n        activated_height:\n          description: The height at which this key became valid.\n          format: int32\n          type: integer\n        retired_height:\n          description: The expiration height of this key. `null` if this key is currently active.\n          format: int32\n          type: integer\n        priority:\n          description: The level of this key within the hierarchy. A lower number indicates a key that allows a holder to replace higher numbered keys. The master key is priority 0.\n          format: int32\n          type: integer\n        entry_hash:\n          description: The unique identifier of the entry on the Identity chain where this key was activated.\n          type: string\n      required:\n      - key\n    IdentityKeyShort_data:\n      example:\n        key: key\n        activated_height: 6\n        retired_height: 1\n      properties:\n        key:\n          description: The public key.\n          type: string\n        activated_height:\n          description: The height at which this key became valid. `null` if this is the first key.\n          format: int32\n          type: integer\n        retired_height:\n          description: The expiration height of this key. `null` if this is the current key.\n          format: int32\n          type: integer\n      required:\n      - key\n    DBlockLong_btc_anchor_entry_chain:\n      description: An object that contains the Chain Hash (ID) as well as a URL for the chain.\n      properties:\n        chain_id:\n          description: The ID for this chain on the Factom blockchain.\n          type: string\n        href:\n          description: An API link to retrieve all information about this chain.\n          type: string\n    DBlockLong_btc_anchor_entry:\n      description: An object that contains the Entry Hash (ID) and a URL for the entry.\n      properties:\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        chain:\n          $ref: '#/components/schemas/DBlockLong_btc_anchor_entry_chain'\n        created_at:\n          description: 'The time at which this entry was created. Sent in [ISO 8601\n            Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry.\n          type: string\n    DBlockLong_prev:\n      description: The previous directory block in the Factom blockchain.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom block height.\n          type: string\n        href:\n          description: An API link to retrieve all information about this directory block.\n          type: string\n    DBlockLong_next:\n      description: The next directory block in the Factom blockchain. If null, this is the most recent block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom block height.\n          type: string\n        href:\n          description: An API link to retrieve all information about this directory block.\n          type: string\n    DBlockLong_ablock:\n      description: The admin block contained in this directory block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this admin block.\n          type: string\n        height:\n          description: The Factom block height.\n          type: string\n        href:\n          description: An API link to retrieve all information about this admin block.\n          type: string\n    DBlockLong_ecblock:\n      description: The entry credit block contained in this directory block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry credit block.\n          type: string\n        height:\n          description: The Factom block height.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry credit block.\n          type: string\n    DBlockLong_fblock:\n      description: The factoid block contained in this directory block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this factoid block.\n          type: string\n        height:\n          description: The Factom block height.\n          type: string\n        href:\n          description: An API link to retrieve all information about this factoid block.\n          type: string\n    DBlockLong_eblocks:\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n        chain:\n          $ref: '#/components/schemas/DBlockLong_btc_anchor_entry_chain'\n    ABlockLong_prev:\n      description: The previous admin block.\n      properties:\n        hash:\n          description: The SHA256 hash of this admin block.\n          type: string\n        href:\n          description: An API link to this Admin block.\n          type: string\n    ABlockLong_next:\n      description: The next admin block.\n      properties:\n        hash:\n          description: The SHA256 hash of this admin block.\n          type: string\n        href:\n          description: An API link to this Admin block.\n          type: string\n    ABlockLong_dblock:\n      description: The directory block that contains this factoid block.\n      properties:\n        keymr:\n          description: The Key Merkle root of the directory block.\n          type: string\n        href:\n          description: An API link to the directory block.\n          type: string\n    ABlockShort_dblock:\n      description: The directory block that contains this admin block.\n      properties:\n        hash:\n          description: The SHA256 hash of this directory block.\n          type: string\n        href:\n          description: An API link to this directory block.\n          type: string\n    ABlockEntry_data:\n      properties:\n        content:\n          description: The content of the admin block entry.\n          type: string\n        created_at:\n          description: 'The timestamp for when this entry was created. Sent in [ISO\n            8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        ablock:\n          $ref: '#/components/schemas/ABlockShort'\n      required:\n      - ablock\n      - content\n      - created_at\n    ECBlockLong_dblock:\n      description: The directory block that contains this entry credit block.\n      properties:\n        hash:\n          description: The SHA256 hash of this directory block.\n          type: string\n        href:\n          description: An API link to this directory block.\n          type: string\n    EBlockShort_chain:\n      description: The chain that has been created or altered by this entry block.\n      properties:\n        chain_id:\n          description: The ID for this chain on the Factom blockchain.\n          type: string\n        href:\n          description: An API link to retrieve all information about this chain.\n          type: string\n      required:\n      - chain_id\n      - href\n    EBlockShort_dblock:\n      description: The directory block that contains this entry block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this directory block.\n          type: string\n        height:\n          description: The Factom block height of this block.\n          format: int32\n          type: integer\n        href:\n          description: An API link to retrieve all available information about this directory block.\n          type: string\n      required:\n      - height\n      - href\n      - keymr\n    EBlockLong_prev:\n      description: The previous entry block within the parent directory block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n    EBlockLong_next:\n      description: The next entry block within the parent directory block.\n      properties:\n        keymr:\n          description: The Key Merkle Root for this entry block.\n          type: string\n        href:\n          description: An API link to retrieve all information about this entry block.\n          type: string\n    FBlockLong_prev:\n      description: A link to the previous factoid block in the chain.\n      properties:\n        keymr:\n          description: The Key Merkle root of the factoid block.\n          type: string\n        href:\n          description: An API link to the factoid block.\n          type: string\n    FBlockLong_next:\n      description: A link to the next factoid block in the chain.\n      properties:\n        keymr:\n          description: The Key Merkle root of the factoid block.\n          type: string\n        href:\n          description: An API link to the factoid block.\n          type: string\n    ReceiptLong_data:\n      description: Contains the receipt information for the desired entry.\n      example:\n        dblock:\n          keymr: keymr\n          href: href\n          height: 0\n        created_at: created_at\n        merkle_branch:\n        - top: top\n          left: left\n          right: right\n        - top: top\n          left: left\n          right: right\n        eblock:\n          keymr: keymr\n          href: href\n        entry_serialized: entry_serialized\n        entry_hash: entry_hash\n      properties:\n        created_at:\n          description: 'The timestamp for this entry. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601).\n            For example: `YYYY-MM-DDThh:mm:ssZ`'\n          type: string\n        entry_serialized:\n          description: The raw data that makes up the entry.\n          type: string\n        entry_hash:\n          description: The unique identitfier of the entry.\n          type: string\n        merkle_branch:\n          description: The branch of the merkle tree that represents this entry. Presented as an array of Merkle nodes.\n          items:\n            $ref: '#/components/schemas/MerkleNode'\n          type: array\n        eblock:\n          $ref: '#/components/schemas/EBlockLink'\n        dblock:\n          $ref: '#/components/schemas/DBlockLink'\n      required:\n      - created_at\n      - dblock\n      - eblock\n      - entry_hash\n      - entry_serialized\n      - merkle_branch\n    AnchorLong_data:\n      description: Contains information about the desired Directory Block Anchor.\n      example:\n        dblock:\n          keymr: keymr\n          href: href\n          height: 0\n        anchors:\n        - window_mr: window_mr\n          block_hash: block_hash\n          created_at: created_at\n          merkle_branch:\n          - top: top\n            left: left\n            right: right\n          - top: top\n            left: left\n            right: right\n          tx_id: tx_id\n          entry_serialized: entry_serialized\n          contract_address: contract_address\n          entry_hash: entry_hash\n          network: bitcoin\n          dblock:\n            keymr: keymr\n            href: href\n            height: 0\n          window_start_height: 0\n          tx_index: 6\n          status: pending\n        - window_mr: window_mr\n          block_hash: block_hash\n          created_at: created_at\n          merkle_branch:\n          - top: top\n            left: left\n            right: right\n          - top: top\n            left: left\n            right: right\n          tx_id: tx_id\n          entry_serialized: entry_serialized\n          contract_address: contract_address\n          entry_hash: entry_hash\n          network: bitcoin\n          dblock:\n            keymr: keymr\n            href: href\n            height: 0\n          window_start_height: 0\n          tx_index: 6\n          status: pending\n      properties:\n        dblock:\n          $ref: '#/components/schemas/DBlockLink'\n        anchors:\n          description: A list of all the anchors of this Directory Block.\n          items:\n            $ref: '#/components/schemas/SingleAnchor'\n          type: array\n      required:\n      - anchors\n      - dblock\n  securitySchemes:\n    AppId:\n      description: You must include a user key in the header of all requests to Factom Connect. If you attempt to communicate with the API without this key, you will trigger an error response.\n      in: header\n      name: app_id\n      type: apiKey\n    AppKey:\n      description: You must include a user key in the header of all requests to Factom Connect. If you attempt to communicate with the API without this key, you will trigger an error response.\n      in: header\n      name: app_key\n      type: apiKey\nx-api-id: connect\nx-samples-languages:\n- curl\n- javascript\n- python\n- java\n- php\n- go\n- csharp\nx-headers:\n- key: Content-Type\n  value: application/json\n- key: Accept\n  value: application/json\nx-send-defaults: false\nx-explorer-enabled: true\nx-proxy-enabled: true\nx-samples-enabled: true\n",
			"canonicalURL": "/github.com/FPriv/factom-harmony-connect-go-client@9bd9923f4ed53792ea9b78cd0702ed7892165f15/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/FPriv/factom-harmony-connect-go-client/blob/9bd9923f4ed53792ea9b78cd0702ed7892165f15/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}