{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/clover-network/clover-rosetta-service"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "sdk/lib/server/api/openapi.yaml",
			"byteSize": 107456,
			"content": "openapi: 3.0.2\ninfo:\n  description: Build Once. Integrate Your Blockchain Everywhere.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Rosetta\n  version: 1.4.1\nservers:\n- url: /\npaths:\n  /network/summary:\n    post:\n      description: This is the Summary API\n      operationId: networkSummary\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloverGeneralResponse'\n          description: Expected response to a json\n      summary: Get Network Summary\n      tags:\n        - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/rank:\n    post:\n      description: This is the Rank API\n      operationId: networkRank\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloverGeneralResponse'\n          description: Expected response to a json\n      summary: Get Network Rank\n      tags:\n        - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/tick:\n    post:\n      description: This is the Tick API\n      operationId: networkTick\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloverGeneralResponse'\n          description: Expected response to a json\n      summary: Get Network Tick\n      tags:\n        - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/search:\n    post:\n      description: This is the Search API\n      operationId: networkSearch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloverGeneralResponse'\n          description: Expected response to a json\n      summary: Search Network\n      tags:\n        - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/list:\n    post:\n      description: This endpoint returns a list of NetworkIdentifiers that the Rosetta\n        server supports.\n      operationId: networkList\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NetworkListResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get List of Available Networks\n      tags:\n      - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/status:\n    post:\n      description: This endpoint returns the current status of the network requested.\n        Any NetworkIdentifier returned by /network/list should be accessible here.\n      operationId: networkStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NetworkStatusResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get Network Status\n      tags:\n      - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /network/options:\n    post:\n      description: This endpoint returns the version information and allowed network-specific\n        types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list\n        should be accessible here. Because options are retrievable in the context\n        of a NetworkIdentifier, it is possible to define unique options for each network.\n      operationId: networkOptions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NetworkOptionsResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get Network Options\n      tags:\n      - Network\n      x-eov-operation-handler: controllers/NetworkController\n  /block:\n    post:\n      description: 'Get a block by its Block Identifier. If transactions are returned\n        in the same call to the node as fetching the block, the response should include\n        these transactions in the Block object. If not, an array of Transaction Identifiers\n        should be returned so /block/transaction fetches can be done to get all transaction\n        information. When requesting a block by the hash component of the BlockIdentifier,\n        this request MUST be idempotent: repeated invocations for the same hash-identified\n        block must return the exact same block contents. No such restriction is imposed\n        when requesting a block by height, given that a chain reorg event might cause\n        the specific block at height `n` to be set to a different one.'\n      operationId: block\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BlockRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get a Block\n      tags:\n      - Block\n      x-eov-operation-handler: controllers/BlockController\n  /block/transaction:\n    post:\n      description: 'Get a transaction in a block by its Transaction Identifier. This\n        endpoint should only be used when querying a node for a block does not return\n        all transactions contained within it. All transactions returned by this endpoint\n        must be appended to any transactions returned by the /block method by consumers\n        of this data. Fetching a transaction by hash is considered an Explorer Method\n        (which is classified under the Future Work section). Calling this endpoint\n        requires reference to a BlockIdentifier because transaction parsing can change\n        depending on which block contains the transaction. For example, in Bitcoin\n        it is necessary to know which block contains a transaction to determine the\n        destination of fee payments. Without specifying a block identifier, the node\n        would have to infer which block to use (which could change during a re-org).\n        Implementations that require fetching previous transactions to populate the\n        response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache\n        within the Rosetta server in the /data directory (on a path that does not\n        conflict with the node).'\n      operationId: blockTransaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BlockTransactionRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlockTransactionResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get a Block Transaction\n      tags:\n      - Block\n      x-eov-operation-handler: controllers/BlockController\n  /mempool:\n    post:\n      description: Get all Transaction Identifiers in the mempool\n      operationId: mempool\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NetworkRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MempoolResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get All Mempool Transactions\n      tags:\n      - Mempool\n      x-eov-operation-handler: controllers/MempoolController\n  /mempool/transaction:\n    post:\n      description: 'Get a transaction in the mempool by its Transaction Identifier.\n        This is a separate request than fetching a block transaction (/block/transaction)\n        because some blockchain nodes need to know that a transaction query is for\n        something in the mempool instead of a transaction in a block. Transactions\n        may not be fully parsable until they are in a block (ex: may not be possible\n        to determine the fee to pay before a transaction is executed). On this endpoint,\n        it is ok that returned transactions are only estimates of what may actually\n        be included in a block.'\n      operationId: mempoolTransaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MempoolTransactionRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MempoolTransactionResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get a Mempool Transaction\n      tags:\n      - Mempool\n      x-eov-operation-handler: controllers/MempoolController\n  /account/balance:\n    post:\n      description: Get an array of all AccountBalances for an AccountIdentifier and\n        the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier\n        must always be returned because some consumers of account balance data need\n        to know specifically at which block the balance was calculated to compare\n        balances they compute from operations with the balance returned by the node.\n        It is important to note that making a balance request for an account without\n        populating the SubAccountIdentifier should not result in the balance of all\n        possible SubAccountIdentifiers being returned. Rather, it should result in\n        the balance pertaining to no SubAccountIdentifiers being returned (sometimes\n        called the liquid balance). To get all balances associated with an account,\n        it may be necessary to perform multiple balance requests with unique AccountIdentifiers.\n        It is also possible to perform a historical balance lookup (if the server\n        supports it) by passing in an optional BlockIdentifier.\n      operationId: accountBalance\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountBalanceRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountBalanceResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get an Account Balance\n      tags:\n      - Account\n      x-eov-operation-handler: controllers/AccountController\n  /construction/derive:\n    post:\n      description: Derive returns the network-specific address associated with a public\n        key. Blockchains that require an on-chain action to create an account should\n        not implement this method.\n      operationId: constructionDerive\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionDeriveRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionDeriveResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Derive an Address from a PublicKey\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/preprocess:\n    post:\n      description: Preprocess is called prior to `/construction/payloads` to construct\n        a request for any metadata that is needed for transaction construction given\n        (i.e. account nonce). The request returned from this method will be used by\n        the caller (in a different execution environment) to call the `/construction/metadata`\n        endpoint.\n      operationId: constructionPreprocess\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionPreprocessRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionPreprocessResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Create a Request to Fetch Metadata\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/metadata:\n    post:\n      description: Get any information required to construct a transaction for a specific\n        network. Metadata returned here could be a recent hash to use, an account\n        sequence number, or even arbitrary chain state. The request used when calling\n        this endpoint is often created by calling `/construction/preprocess` in an\n        offline environment. It is important to clarify that this endpoint should\n        not pre-construct any transactions for the client (this should happen in `/construction/payloads`).\n        This endpoint is left purposely unstructured because of the wide scope of\n        metadata that could be required.\n      operationId: constructionMetadata\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionMetadataRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionMetadataResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get Metadata for Transaction Construction\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/payloads:\n    post:\n      description: Payloads is called with an array of operations and the response\n        from `/construction/metadata`. It returns an unsigned transaction blob and\n        a collection of payloads that must be signed by particular addresses using\n        a certain SignatureType. The array of operations provided in transaction construction\n        often times can not specify all \"effects\" of a transaction (consider invoked\n        transactions in Ethereum). However, they can deterministically specify the\n        \"intent\" of the transaction, which is sufficient for construction. For this\n        reason, parsing the corresponding transaction in the Data API (when it lands\n        on chain) will contain a superset of whatever operations were provided during\n        construction.\n      operationId: constructionPayloads\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionPayloadsRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionPayloadsResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Generate an Unsigned Transaction and Signing Payloads\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/combine:\n    post:\n      description: Combine creates a network-specific transaction from an unsigned\n        transaction and an array of provided signatures. The signed transaction returned\n        from this method will be sent to the `/construction/submit` endpoint by the\n        caller.\n      operationId: constructionCombine\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionCombineRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionCombineResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Create Network Transaction from Signatures\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/parse:\n    post:\n      description: 'Parse is called on both unsigned and signed transactions to understand\n        the intent of the formulated transaction. This is run as a sanity check before\n        signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). '\n      operationId: constructionParse\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionParseRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConstructionParseResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Parse a Transaction\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/hash:\n    post:\n      description: TransactionHash returns the network-specific transaction hash for\n        a signed transaction.\n      operationId: constructionHash\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionHashRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionIdentifierResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Get the Hash of a Signed Transaction\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\n  /construction/submit:\n    post:\n      description: Submit a pre-signed transaction to the node. This call should not\n        block on the transaction being included in a block. Rather, it should return\n        immediately with an indication of whether or not the transaction was included\n        in the mempool. The transaction submission response should only return a 200\n        status if the submitted transaction could be included in the mempool. Otherwise,\n        it should return an error.\n      operationId: constructionSubmit\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConstructionSubmitRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionIdentifierResponse'\n          description: Expected response to a valid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: unexpected error\n      summary: Submit a Signed Transaction\n      tags:\n      - Construction\n      x-eov-operation-handler: controllers/ConstructionController\ncomponents:\n  schemas:\n    NetworkIdentifier:\n      description: The network_identifier specifies which network a particular object\n        is associated with.\n      example:\n        blockchain: bitcoin\n        sub_network_identifier:\n          metadata:\n            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n          network: shard 1\n        network: mainnet\n      properties:\n        blockchain:\n          example: bitcoin\n          type: string\n        network:\n          description: If a blockchain has a specific chain-id or network identifier,\n            it should go in this field. It is up to the client to determine which\n            network-specific identifier is mainnet or testnet.\n          example: mainnet\n          type: string\n        sub_network_identifier:\n          $ref: '#/components/schemas/SubNetworkIdentifier'\n      required:\n      - blockchain\n      - network\n      type: object\n    SubNetworkIdentifier:\n      description: In blockchains with sharded state, the SubNetworkIdentifier is\n        required to query some object on a specific shard. This identifier is optional\n        for all non-sharded blockchains.\n      example:\n        metadata:\n          producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n        network: shard 1\n      properties:\n        network:\n          example: shard 1\n          type: string\n        metadata:\n          example:\n            producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n          type: object\n      required:\n      - network\n      type: object\n    BlockIdentifier:\n      description: The block_identifier uniquely identifies a block in a particular\n        network.\n      example:\n        index: 1123941\n        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        index:\n          description: This is also known as the block height.\n          example: 1123941\n          format: int64\n          type: integer\n        hash:\n          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n          type: string\n      required:\n      - hash\n      - index\n      type: object\n    PartialBlockIdentifier:\n      description: When fetching data by BlockIdentifier, it may be possible to only\n        specify the index or hash. If neither property is specified, it is assumed\n        that the client is making a request at the current block.\n      example:\n        index: 1123941\n        hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        index:\n          example: 1123941\n          format: int64\n          type: integer\n        hash:\n          example: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n          type: string\n      type: object\n    TransactionIdentifier:\n      description: The transaction_identifier uniquely identifies a transaction in\n        a particular network and block or in the mempool.\n      example:\n        hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        hash:\n          description: 'Any transactions that are attributable only to a block (ex:\n            a block event) should use the hash of the block as the identifier.'\n          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n          type: string\n      required:\n      - hash\n      type: object\n    OperationIdentifier:\n      description: The operation_identifier uniquely identifies an operation within\n        a transaction.\n      example:\n        index: 1\n        network_index: 0\n      properties:\n        index:\n          description: The operation index is used to ensure each operation has a\n            unique identifier within a transaction. This index is only relative to\n            the transaction and NOT GLOBAL. The operations in each transaction should\n            start from index 0. To clarify, there may not be any notion of an operation\n            index in the blockchain being described.\n          example: 1\n          format: int64\n          minimum: 0\n          type: integer\n        network_index:\n          description: Some blockchains specify an operation index that is essential\n            for client use. For example, Bitcoin uses a network_index to identify\n            which UTXO was used in a transaction. network_index should not be populated\n            if there is no notion of an operation index in a blockchain (typically\n            most account-based blockchains).\n          example: 0\n          format: int64\n          minimum: 0\n          type: integer\n      required:\n      - index\n      type: object\n    AccountIdentifier:\n      description: The account_identifier uniquely identifies an account within a\n        network. All fields in the account_identifier are utilized to determine this\n        uniqueness (including the metadata field, if populated).\n      example:\n        metadata: '{}'\n        address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n        sub_account:\n          metadata: '{}'\n          address: 0x6b175474e89094c44da98b954eedeac495271d0f\n      properties:\n        address:\n          description: The address may be a cryptographic public key (or some encoding\n            of it) or a provided username.\n          example: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n          type: string\n        sub_account:\n          $ref: '#/components/schemas/SubAccountIdentifier'\n        metadata:\n          description: Blockchains that utilize a username model (where the address\n            is not a derivative of a cryptographic public key) should specify the\n            public key(s) owned by the address in metadata.\n          type: object\n      required:\n      - address\n      type: object\n    SubAccountIdentifier:\n      description: An account may have state specific to a contract address (ERC-20\n        token) and/or a stake (delegated balance). The sub_account_identifier should\n        specify which state (if applicable) an account instantiation refers to.\n      example:\n        metadata: '{}'\n        address: 0x6b175474e89094c44da98b954eedeac495271d0f\n      properties:\n        address:\n          description: 'The SubAccount address may be a cryptographic value or some\n            other identifier (ex: bonded) that uniquely specifies a SubAccount.'\n          example: 0x6b175474e89094c44da98b954eedeac495271d0f\n          type: string\n        metadata:\n          description: If the SubAccount address is not sufficient to uniquely specify\n            a SubAccount, any other identifying information can be stored here. It\n            is important to note that two SubAccounts with identical addresses but\n            differing metadata will not be considered equal by clients.\n          type: object\n      required:\n      - address\n      type: object\n    Block:\n      description: 'Blocks contain an array of Transactions that occurred at a particular\n        BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations\n        is that they MUST be _inalterable_: once a client has requested and received\n        a block identified by a specific BlockIndentifier, all future calls for that\n        same BlockIdentifier must return the same block contents.'\n      example:\n        metadata:\n          transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n          difficulty: \"123891724987128947\"\n        parent_block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n        transactions:\n        - metadata:\n            size: 12378\n            lockTime: 1582272577\n          operations:\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          transaction_identifier:\n            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        - metadata:\n            size: 12378\n            lockTime: 1582272577\n          operations:\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          transaction_identifier:\n            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n        timestamp: 1582833600000\n      properties:\n        block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        parent_block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        transactions:\n          items:\n            $ref: '#/components/schemas/Transaction'\n          type: array\n        metadata:\n          example:\n            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n            difficulty: \"123891724987128947\"\n          type: object\n      required:\n      - block_identifier\n      - parent_block_identifier\n      - timestamp\n      - transactions\n      type: object\n    Transaction:\n      description: Transactions contain an array of Operations that are attributable\n        to the same TransactionIdentifier.\n      example:\n        metadata:\n          size: 12378\n          lockTime: 1582272577\n        operations:\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        transaction_identifier:\n          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        transaction_identifier:\n          $ref: '#/components/schemas/TransactionIdentifier'\n        operations:\n          items:\n            $ref: '#/components/schemas/Operation'\n          type: array\n        metadata:\n          description: Transactions that are related to other transactions (like a\n            cross-shard transaction) should include the tranaction_identifier of these\n            transactions in the metadata.\n          example:\n            size: 12378\n            lockTime: 1582272577\n          type: object\n      required:\n      - operations\n      - transaction_identifier\n      type: object\n    Operation:\n      description: Operations contain all balance-changing information within a transaction.\n        They are always one-sided (only affect 1 AccountIdentifier) and can succeed\n        or fail independently from a Transaction.\n      example:\n        amount:\n          metadata: '{}'\n          currency:\n            symbol: BTC\n            metadata:\n              Issuer: Satoshi\n            decimals: 8\n          value: \"1238089899992\"\n        metadata:\n          asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n            03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n        related_operations:\n        - index: 0\n          operation_identifier:\n            index: 0\n        type: Transfer\n        coin_change:\n          coin_identifier:\n            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n        account:\n          metadata: '{}'\n          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n          sub_account:\n            metadata: '{}'\n            address: 0x6b175474e89094c44da98b954eedeac495271d0f\n        operation_identifier:\n          index: 1\n          network_index: 0\n        status: Reverted\n      properties:\n        operation_identifier:\n          $ref: '#/components/schemas/OperationIdentifier'\n        related_operations:\n          description: Restrict referenced related_operations to identifier indexes\n            \u003c the current operation_identifier.index. This ensures there exists a\n            clear DAG-structure of relations. Since operations are one-sided, one\n            could imagine relating operations in a single transfer or linking operations\n            in a call tree.\n          example:\n          - index: 0\n            operation_identifier:\n              index: 0\n          items:\n            $ref: '#/components/schemas/OperationIdentifier'\n          type: array\n        type:\n          description: The network-specific type of the operation. Ensure that any\n            type that can be returned here is also specified in the NetworkStatus.\n            This can be very useful to downstream consumers that parse all block data.\n          example: Transfer\n          type: string\n        status:\n          description: The network-specific status of the operation. Status is not\n            defined on the transaction object because blockchains with smart contracts\n            may have transactions that partially apply. Blockchains with atomic transactions\n            (all operations succeed or all operations fail) will have the same status\n            for each operation.\n          example: Reverted\n          type: string\n        account:\n          $ref: '#/components/schemas/AccountIdentifier'\n        amount:\n          $ref: '#/components/schemas/Amount'\n        coin_change:\n          $ref: '#/components/schemas/CoinChange'\n        metadata:\n          example:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          type: object\n      required:\n      - operation_identifier\n      - status\n      - type\n      type: object\n    Amount:\n      description: Amount is some Value of a Currency. It is considered invalid to\n        specify a Value without a Currency.\n      example:\n        metadata: '{}'\n        currency:\n          symbol: BTC\n          metadata:\n            Issuer: Satoshi\n          decimals: 8\n        value: \"1238089899992\"\n      properties:\n        value:\n          description: Value of the transaction in atomic units represented as an\n            arbitrary-sized signed integer. For example, 1 BTC would be represented\n            by a value of 100000000.\n          example: \"1238089899992\"\n          type: string\n        currency:\n          $ref: '#/components/schemas/Currency'\n        metadata:\n          type: object\n      required:\n      - currency\n      - value\n      type: object\n    Currency:\n      description: Currency is composed of a canonical Symbol and Decimals. This Decimals\n        value is used to convert an Amount.Value from atomic units (Satoshis) to standard\n        units (Bitcoins).\n      example:\n        symbol: BTC\n        metadata:\n          Issuer: Satoshi\n        decimals: 8\n      properties:\n        symbol:\n          description: Canonical symbol associated with a currency.\n          example: BTC\n          type: string\n        decimals:\n          description: Number of decimal places in the standard unit representation\n            of the amount. For example, BTC has 8 decimals. Note that it is not possible\n            to represent the value of some currency in atomic units that is not base\n            10.\n          example: 8\n          format: int32\n          minimum: 0\n          type: integer\n        metadata:\n          description: Any additional information related to the currency itself.\n            For example, it would be useful to populate this object with the contract\n            address of an ERC-20 token.\n          example:\n            Issuer: Satoshi\n          type: object\n      required:\n      - decimals\n      - symbol\n      type: object\n    SyncStatus:\n      description: SyncStatus is used to provide additional context about an implementation's\n        sync status. It is often used to indicate that an implementation is healthy\n        when it cannot be queried  until some sync phase occurs. If an implementation\n        is immediately queryable, this model is often not populated.\n      example:\n        target_index: 150\n        stage: header sync\n        current_index: 100\n      properties:\n        current_index:\n          description: CurrentIndex is the index of the last synced block in the current\n            stage.\n          example: 100\n          format: int64\n          type: integer\n        target_index:\n          description: TargetIndex is the index of the block that the implementation\n            is attempting to sync to in the current stage.\n          example: 150\n          format: int64\n          type: integer\n        stage:\n          description: Stage is the phase of the sync process.\n          example: header sync\n          type: string\n      required:\n      - current_index\n      type: object\n    Peer:\n      description: A Peer is a representation of a node's peer.\n      example:\n        metadata: '{}'\n        peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n      properties:\n        peer_id:\n          example: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n          type: string\n        metadata:\n          type: object\n      required:\n      - peer_id\n      type: object\n    Version:\n      description: The Version object is utilized to inform the client of the versions\n        of different components of the Rosetta implementation.\n      example:\n        metadata: '{}'\n        rosetta_version: 1.2.5\n        node_version: 1.0.2\n        middleware_version: 0.2.7\n      properties:\n        rosetta_version:\n          description: The rosetta_version is the version of the Rosetta interface\n            the implementation adheres to. This can be useful for clients looking\n            to reliably parse responses.\n          example: 1.2.5\n          type: string\n        node_version:\n          description: The node_version is the canonical version of the node runtime.\n            This can help clients manage deployments.\n          example: 1.0.2\n          type: string\n        middleware_version:\n          description: When a middleware server is used to adhere to the Rosetta interface,\n            it should return its version here. This can help clients manage deployments.\n          example: 0.2.7\n          type: string\n        metadata:\n          description: Any other information that may be useful about versioning of\n            dependent services should be returned here.\n          type: object\n      required:\n      - node_version\n      - rosetta_version\n      type: object\n    Allow:\n      description: Allow specifies supported Operation status, Operation types, and\n        all possible error statuses. This Allow object is used by clients to validate\n        the correctness of a Rosetta Server implementation. It is expected that these\n        clients will error if they receive some response that contains any of the\n        above information that is not specified here.\n      example:\n        operation_types:\n        - TRANSFER\n        - TRANSFER\n        historical_balance_lookup: true\n        operation_statuses:\n        - status: SUCCESS\n          successful: true\n        - status: SUCCESS\n          successful: true\n        errors:\n        - retriable: true\n          code: 12\n          details:\n            address: 0x1dcc4de8dec75d7aab85b567b6\n            error: not base64\n          message: Invalid account format\n        - retriable: true\n          code: 12\n          details:\n            address: 0x1dcc4de8dec75d7aab85b567b6\n            error: not base64\n          message: Invalid account format\n      properties:\n        operation_statuses:\n          description: All Operation.Status this implementation supports. Any status\n            that is returned during parsing that is not listed here will cause client\n            validation to error.\n          items:\n            $ref: '#/components/schemas/OperationStatus'\n          type: array\n        operation_types:\n          description: All Operation.Type this implementation supports. Any type that\n            is returned during parsing that is not listed here will cause client validation\n            to error.\n          items:\n            example: TRANSFER\n            type: string\n          type: array\n        errors:\n          description: All Errors that this implementation could return. Any error\n            that is returned during parsing that is not listed here will cause client\n            validation to error.\n          items:\n            $ref: '#/components/schemas/Error'\n          type: array\n        historical_balance_lookup:\n          description: Any Rosetta implementation that supports querying the balance\n            of an account at any height in the past should set this to true.\n          type: boolean\n      required:\n      - errors\n      - historical_balance_lookup\n      - operation_statuses\n      - operation_types\n      type: object\n    OperationStatus:\n      description: OperationStatus is utilized to indicate which Operation status\n        are considered successful.\n      example:\n        status: SUCCESS\n        successful: true\n      properties:\n        status:\n          description: The status is the network-specific status of the operation.\n          type: string\n        successful:\n          description: An Operation is considered successful if the Operation.Amount\n            should affect the Operation.Account. Some blockchains (like Bitcoin) only\n            include successful operations in blocks but other blockchains (like Ethereum)\n            include unsuccessful operations that incur a fee. To reconcile the computed\n            balance from the stream of Operations, it is critical to understand which\n            Operation.Status indicate an Operation is successful and should affect\n            an Account.\n          type: boolean\n      required:\n      - status\n      - successful\n      type: object\n    Timestamp:\n      description: The timestamp of the block in milliseconds since the Unix Epoch.\n        The timestamp is stored in milliseconds because some blockchains produce blocks\n        more often than once a second.\n      example: 1582833600000\n      format: int64\n      minimum: 0\n      type: integer\n    PublicKey:\n      description: PublicKey contains a public key byte array for a particular CurveType\n        encoded in hex. Note that there is no PrivateKey struct as this is NEVER the\n        concern of an implementation.\n      example:\n        hex_bytes: hex_bytes\n      properties:\n        hex_bytes:\n          description: Hex-encoded public key bytes in the format specified by the\n            CurveType.\n          type: string\n        curve_type:\n          $ref: '#/components/schemas/CurveType'\n      required:\n      - curve_type\n      - hex_bytes\n      type: object\n    CurveType:\n      description: 'CurveType is the type of cryptographic curve associated with a\n        PublicKey.  * secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3)\n        * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf)'\n      enum:\n      - secp256k1\n      - edwards25519\n      type: string\n    SigningPayload:\n      description: SigningPayload is signed by the client with the keypair associated\n        with an address using the specified SignatureType. SignatureType can be optionally\n        populated if there is a restriction on the signature scheme that can be used\n        to sign the payload.\n      example:\n        address: address\n        hex_bytes: hex_bytes\n      properties:\n        address:\n          description: The network-specific address of the account that should sign\n            the payload.\n          type: string\n        hex_bytes:\n          type: string\n        signature_type:\n          $ref: '#/components/schemas/SignatureType'\n      required:\n      - address\n      - hex_bytes\n      type: object\n    Signature:\n      description: Signature contains the payload that was signed, the public keys\n        of the keypairs used to produce the signature, the signature (encoded in hex),\n        and the SignatureType. PublicKey is often times not known during construction\n        of the signing payloads but may be needed to combine signatures properly.\n      example:\n        public_key:\n          hex_bytes: hex_bytes\n        signing_payload:\n          address: address\n          hex_bytes: hex_bytes\n        hex_bytes: hex_bytes\n      properties:\n        signing_payload:\n          $ref: '#/components/schemas/SigningPayload'\n        public_key:\n          $ref: '#/components/schemas/PublicKey'\n        signature_type:\n          $ref: '#/components/schemas/SignatureType'\n        hex_bytes:\n          type: string\n      required:\n      - hex_bytes\n      - public_key\n      - signature_type\n      - signing_payload\n      type: object\n    SignatureType:\n      description: 'SignatureType is the type of a cryptographic signature. * ecdsa:\n        `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes)\n        || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)`\n        - `64 bytes`'\n      enum:\n      - ecdsa\n      - ecdsa_recovery\n      - ed25519\n      type: string\n    CoinAction:\n      description: CoinActions are different state changes that a Coin can undergo.\n        When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent.\n        It is assumed that a single Coin cannot be created or spent more than once.\n      enum:\n      - coin_created\n      - coin_spent\n      type: string\n    CoinIdentifier:\n      description: CoinIdentifier uniquely identifies a Coin.\n      example:\n        identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n      properties:\n        identifier:\n          description: Identifier should be populated with a globally unique identifier\n            of a Coin. In Bitcoin, this identifier would be transaction_hash:index.\n          example: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          type: string\n      required:\n      - identifier\n      type: object\n    CoinChange:\n      description: CoinChange is used to represent a change in state of a some coin\n        identified by a coin_identifier. This object is part of the Operation model\n        and must be populated for UTXO-based blockchains. Coincidentally, this abstraction\n        of UTXOs allows for supporting both account-based transfers and UTXO-based\n        transfers on the same blockchain (when a transfer is account-based, don't\n        populate this model).\n      example:\n        coin_identifier:\n          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n      properties:\n        coin_identifier:\n          $ref: '#/components/schemas/CoinIdentifier'\n        coin_action:\n          $ref: '#/components/schemas/CoinAction'\n      required:\n      - coin_action\n      - coin_identifier\n      type: object\n    Coin:\n      description: Coin contains its unique identifier and the amount it represents.\n      example:\n        amount:\n          metadata: '{}'\n          currency:\n            symbol: BTC\n            metadata:\n              Issuer: Satoshi\n            decimals: 8\n          value: \"1238089899992\"\n        coin_identifier:\n          identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n      properties:\n        coin_identifier:\n          $ref: '#/components/schemas/CoinIdentifier'\n        amount:\n          $ref: '#/components/schemas/Amount'\n      required:\n      - amount\n      - coin_identifier\n      type: object\n    AccountBalanceRequest:\n      description: An AccountBalanceRequest is utilized to make a balance request\n        on the /account/balance endpoint. If the block_identifier is populated, a\n        historical balance query should be performed.\n      example:\n        account_identifier:\n          metadata: '{}'\n          address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n          sub_account:\n            metadata: '{}'\n            address: 0x6b175474e89094c44da98b954eedeac495271d0f\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n        block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        account_identifier:\n          $ref: '#/components/schemas/AccountIdentifier'\n        block_identifier:\n          $ref: '#/components/schemas/PartialBlockIdentifier'\n      required:\n      - account_identifier\n      - network_identifier\n      type: object\n    AccountBalanceResponse:\n      description: 'An AccountBalanceResponse is returned on the /account/balance\n        endpoint. If an account has a balance for each AccountIdentifier describing\n        it (ex: an ERC-20 token balance on a few smart contracts), an account balance\n        request must be made with each AccountIdentifier.'\n      example:\n        balances:\n        - metadata: '{}'\n          currency:\n            symbol: BTC\n            metadata:\n              Issuer: Satoshi\n            decimals: 8\n          value: \"1238089899992\"\n        - metadata: '{}'\n          currency:\n            symbol: BTC\n            metadata:\n              Issuer: Satoshi\n            decimals: 8\n          value: \"1238089899992\"\n        metadata:\n          sequence_number: 23\n        coins:\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          coin_identifier:\n            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          coin_identifier:\n            identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n        block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        balances:\n          description: A single account may have a balance in multiple currencies.\n          items:\n            $ref: '#/components/schemas/Amount'\n          type: array\n        coins:\n          description: If a blockchain is UTXO-based, all unspent Coins owned by an\n            account_identifier should be returned alongside the balance. It is highly\n            recommended to populate this field so that users of the Rosetta API implementation\n            don't need to maintain their own indexer to track their UTXOs.\n          items:\n            $ref: '#/components/schemas/Coin'\n          type: array\n        metadata:\n          description: Account-based blockchains that utilize a nonce or sequence\n            number should include that number in the metadata. This number could be\n            unique to the identifier or global across the account address.\n          example:\n            sequence_number: 23\n          type: object\n      required:\n      - balances\n      - block_identifier\n      type: object\n    BlockRequest:\n      description: A BlockRequest is utilized to make a block request on the /block\n        endpoint.\n      example:\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n        block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        block_identifier:\n          $ref: '#/components/schemas/PartialBlockIdentifier'\n      required:\n      - block_identifier\n      - network_identifier\n      type: object\n    BlockResponse:\n      description: A BlockResponse includes a fully-populated block or a partially-populated\n        block with a list of other transactions to fetch (other_transactions).\n      example:\n        block:\n          metadata:\n            transactions_root: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n            difficulty: \"123891724987128947\"\n          parent_block_identifier:\n            index: 1123941\n            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n          transactions:\n          - metadata:\n              size: 12378\n              lockTime: 1582272577\n            operations:\n            - amount:\n                metadata: '{}'\n                currency:\n                  symbol: BTC\n                  metadata:\n                    Issuer: Satoshi\n                  decimals: 8\n                value: \"1238089899992\"\n              metadata:\n                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              related_operations:\n              - index: 0\n                operation_identifier:\n                  index: 0\n              type: Transfer\n              coin_change:\n                coin_identifier:\n                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n              account:\n                metadata: '{}'\n                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n                sub_account:\n                  metadata: '{}'\n                  address: 0x6b175474e89094c44da98b954eedeac495271d0f\n              operation_identifier:\n                index: 1\n                network_index: 0\n              status: Reverted\n            - amount:\n                metadata: '{}'\n                currency:\n                  symbol: BTC\n                  metadata:\n                    Issuer: Satoshi\n                  decimals: 8\n                value: \"1238089899992\"\n              metadata:\n                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              related_operations:\n              - index: 0\n                operation_identifier:\n                  index: 0\n              type: Transfer\n              coin_change:\n                coin_identifier:\n                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n              account:\n                metadata: '{}'\n                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n                sub_account:\n                  metadata: '{}'\n                  address: 0x6b175474e89094c44da98b954eedeac495271d0f\n              operation_identifier:\n                index: 1\n                network_index: 0\n              status: Reverted\n            transaction_identifier:\n              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n          - metadata:\n              size: 12378\n              lockTime: 1582272577\n            operations:\n            - amount:\n                metadata: '{}'\n                currency:\n                  symbol: BTC\n                  metadata:\n                    Issuer: Satoshi\n                  decimals: 8\n                value: \"1238089899992\"\n              metadata:\n                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              related_operations:\n              - index: 0\n                operation_identifier:\n                  index: 0\n              type: Transfer\n              coin_change:\n                coin_identifier:\n                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n              account:\n                metadata: '{}'\n                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n                sub_account:\n                  metadata: '{}'\n                  address: 0x6b175474e89094c44da98b954eedeac495271d0f\n              operation_identifier:\n                index: 1\n                network_index: 0\n              status: Reverted\n            - amount:\n                metadata: '{}'\n                currency:\n                  symbol: BTC\n                  metadata:\n                    Issuer: Satoshi\n                  decimals: 8\n                value: \"1238089899992\"\n              metadata:\n                asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                  03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n                hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              related_operations:\n              - index: 0\n                operation_identifier:\n                  index: 0\n              type: Transfer\n              coin_change:\n                coin_identifier:\n                  identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n              account:\n                metadata: '{}'\n                address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n                sub_account:\n                  metadata: '{}'\n                  address: 0x6b175474e89094c44da98b954eedeac495271d0f\n              operation_identifier:\n                index: 1\n                network_index: 0\n              status: Reverted\n            transaction_identifier:\n              hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n          block_identifier:\n            index: 1123941\n            hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n          timestamp: 1582833600000\n        other_transactions:\n        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        block:\n          $ref: '#/components/schemas/Block'\n        other_transactions:\n          description: 'Some blockchains may require additional transactions to be\n            fetched that weren''t returned in the block response (ex: block only returns\n            transaction hashes). For blockchains with a lot of transactions in each\n            block, this can be very useful as consumers can concurrently fetch all\n            transactions returned.'\n          items:\n            $ref: '#/components/schemas/TransactionIdentifier'\n          type: array\n      required:\n      - block\n      type: object\n    CloverGeneralResponse:\n      type: object\n    BlockTransactionRequest:\n      description: A BlockTransactionRequest is used to fetch a Transaction included\n        in a block that is not returned in a BlockResponse.\n      example:\n        transaction_identifier:\n          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n        block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        transaction_identifier:\n          $ref: '#/components/schemas/TransactionIdentifier'\n      required:\n      - block_identifier\n      - network_identifier\n      - transaction_identifier\n      type: object\n    BlockTransactionResponse:\n      description: A BlockTransactionResponse contains information about a block transaction.\n      example:\n        transaction:\n          metadata:\n            size: 12378\n            lockTime: 1582272577\n          operations:\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          transaction_identifier:\n            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        transaction:\n          $ref: '#/components/schemas/Transaction'\n      required:\n      - transaction\n      type: object\n    MempoolResponse:\n      description: A MempoolResponse contains all transaction identifiers in the mempool\n        for a particular network_identifier.\n      example:\n        transaction_identifiers:\n        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        - hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        transaction_identifiers:\n          items:\n            $ref: '#/components/schemas/TransactionIdentifier'\n          type: array\n      required:\n      - transaction_identifiers\n      type: object\n    MempoolTransactionRequest:\n      description: A MempoolTransactionRequest is utilized to retrieve a transaction\n        from the mempool.\n      example:\n        transaction_identifier:\n          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        transaction_identifier:\n          $ref: '#/components/schemas/TransactionIdentifier'\n      required:\n      - network_identifier\n      - transaction_identifier\n      type: object\n    MempoolTransactionResponse:\n      description: 'A MempoolTransactionResponse contains an estimate of a mempool\n        transaction. It may not be possible to know the full impact of a transaction\n        in the mempool (ex: fee paid).'\n      example:\n        metadata:\n          descendant_fees: 123923\n          ancestor_count: 2\n        transaction:\n          metadata:\n            size: 12378\n            lockTime: 1582272577\n          operations:\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          - amount:\n              metadata: '{}'\n              currency:\n                symbol: BTC\n                metadata:\n                  Issuer: Satoshi\n                decimals: 8\n              value: \"1238089899992\"\n            metadata:\n              asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n                03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n              hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            related_operations:\n            - index: 0\n              operation_identifier:\n                index: 0\n            type: Transfer\n            coin_change:\n              coin_identifier:\n                identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n            account:\n              metadata: '{}'\n              address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n              sub_account:\n                metadata: '{}'\n                address: 0x6b175474e89094c44da98b954eedeac495271d0f\n            operation_identifier:\n              index: 1\n              network_index: 0\n            status: Reverted\n          transaction_identifier:\n            hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        transaction:\n          $ref: '#/components/schemas/Transaction'\n        metadata:\n          example:\n            descendant_fees: 123923\n            ancestor_count: 2\n          type: object\n      required:\n      - transaction\n      type: object\n    MetadataRequest:\n      description: A MetadataRequest is utilized in any request where the only argument\n        is optional metadata.\n      example:\n        metadata: '{}'\n      properties:\n        metadata:\n          type: object\n      type: object\n    NetworkListResponse:\n      description: A NetworkListResponse contains all NetworkIdentifiers that the\n        node can serve information for.\n      example:\n        network_identifiers:\n        - blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n        - blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifiers:\n          items:\n            $ref: '#/components/schemas/NetworkIdentifier'\n          type: array\n      required:\n      - network_identifiers\n      type: object\n    NetworkRequest:\n      description: A NetworkRequest is utilized to retrieve some data specific exclusively\n        to a NetworkIdentifier.\n      example:\n        metadata: '{}'\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        metadata:\n          type: object\n      required:\n      - network_identifier\n      type: object\n    NetworkStatusResponse:\n      description: NetworkStatusResponse contains basic information about the node's\n        view of a blockchain network. It is assumed that any BlockIdentifier.Index\n        less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta\n        implementation prunes historical state, it should populate the optional `oldest_block_identifier`\n        field with the oldest block available to query. If this is not populated,\n        it is assumed that the `genesis_block_identifier` is the oldest queryable\n        block. If a Rosetta implementation performs some pre-sync before it is possible\n        to query blocks, sync_status should be populated so that clients can still\n        monitor healthiness. Without this field, it may appear that the implementation\n        is stuck syncing and needs to be terminated.\n      example:\n        oldest_block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n        current_block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n        peers:\n        - metadata: '{}'\n          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n        - metadata: '{}'\n          peer_id: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n        sync_status:\n          target_index: 150\n          stage: header sync\n          current_index: 100\n        current_block_timestamp: 1582833600000\n        genesis_block_identifier:\n          index: 1123941\n          hash: 0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\n      properties:\n        current_block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        current_block_timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        genesis_block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        oldest_block_identifier:\n          $ref: '#/components/schemas/BlockIdentifier'\n        sync_status:\n          $ref: '#/components/schemas/SyncStatus'\n        peers:\n          items:\n            $ref: '#/components/schemas/Peer'\n          type: array\n      required:\n      - current_block_identifier\n      - current_block_timestamp\n      - genesis_block_identifier\n      - peers\n      type: object\n    NetworkOptionsResponse:\n      description: NetworkOptionsResponse contains information about the versioning\n        of the node and the allowed operation statuses, operation types, and errors.\n      example:\n        allow:\n          operation_types:\n          - TRANSFER\n          - TRANSFER\n          historical_balance_lookup: true\n          operation_statuses:\n          - status: SUCCESS\n            successful: true\n          - status: SUCCESS\n            successful: true\n          errors:\n          - retriable: true\n            code: 12\n            details:\n              address: 0x1dcc4de8dec75d7aab85b567b6\n              error: not base64\n            message: Invalid account format\n          - retriable: true\n            code: 12\n            details:\n              address: 0x1dcc4de8dec75d7aab85b567b6\n              error: not base64\n            message: Invalid account format\n        version:\n          metadata: '{}'\n          rosetta_version: 1.2.5\n          node_version: 1.0.2\n          middleware_version: 0.2.7\n      properties:\n        version:\n          $ref: '#/components/schemas/Version'\n        allow:\n          $ref: '#/components/schemas/Allow'\n      required:\n      - allow\n      - version\n      type: object\n    ConstructionMetadataRequest:\n      description: A ConstructionMetadataRequest is utilized to get information required\n        to construct a transaction. The Options object used to specify which metadata\n        to return is left purposely unstructured to allow flexibility for implementers.\n      example:\n        options: '{}'\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        options:\n          description: 'Some blockchains require different metadata for different\n            types of transaction construction (ex: delegation versus a transfer).\n            Instead of requiring a blockchain node to return all possible types of\n            metadata for construction (which may require multiple node fetches), the\n            client can populate an options object to limit the metadata returned to\n            only the subset required.'\n          type: object\n      required:\n      - network_identifier\n      - options\n      type: object\n    ConstructionMetadataResponse:\n      description: The ConstructionMetadataResponse returns network-specific metadata\n        used for transaction construction.\n      example:\n        metadata:\n          account_sequence: 23\n          recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n      properties:\n        metadata:\n          example:\n            account_sequence: 23\n            recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n          type: object\n      required:\n      - metadata\n      type: object\n    ConstructionDeriveRequest:\n      description: ConstructionDeriveRequest is passed to the `/construction/derive`\n        endpoint. Network is provided in the request because some blockchains have\n        different address formats for different networks. Metadata is provided in\n        the request because some blockchains allow for multiple address types (i.e.\n        different address for validators vs normal accounts).\n      example:\n        public_key:\n          hex_bytes: hex_bytes\n        metadata: '{}'\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        public_key:\n          $ref: '#/components/schemas/PublicKey'\n        metadata:\n          type: object\n      required:\n      - network_identifier\n      - public_key\n      type: object\n    ConstructionDeriveResponse:\n      description: ConstructionDeriveResponse is returned by the `/construction/derive`\n        endpoint.\n      example:\n        metadata: '{}'\n        address: address\n      properties:\n        address:\n          description: Address in network-specific format.\n          type: string\n        metadata:\n          type: object\n      required:\n      - address\n      type: object\n    ConstructionPreprocessRequest:\n      description: ConstructionPreprocessRequest is passed to the `/construction/preprocess`\n        endpoint so that a Rosetta implementation can determine which metadata it\n        needs to request for construction.\n      example:\n        metadata: '{}'\n        operations:\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        operations:\n          items:\n            $ref: '#/components/schemas/Operation'\n          type: array\n        metadata:\n          type: object\n      required:\n      - network_identifier\n      - operations\n      type: object\n    ConstructionPreprocessResponse:\n      description: ConstructionPreprocessResponse contains the request that will be\n        sent directly to `/construction/metadata`. If it is not necessary to make\n        a request to `/construction/metadata`, options should be null.\n      example:\n        options: '{}'\n      properties:\n        options:\n          description: The options that will be sent directly to `/construction/metadata`\n            by the caller.\n          type: object\n      type: object\n    ConstructionPayloadsRequest:\n      description: ConstructionPayloadsRequest is the request to `/construction/payloads`.\n        It contains the network, a slice of operations, and arbitrary metadata that\n        was returned by the call to `/construction/metadata`.\n      example:\n        metadata: '{}'\n        operations:\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        operations:\n          items:\n            $ref: '#/components/schemas/Operation'\n          type: array\n        metadata:\n          type: object\n      required:\n      - network_identifier\n      - operations\n      type: object\n    ConstructionPayloadsResponse:\n      description: ConstructionTransactionResponse is returned by `/construction/payloads`.\n        It contains an unsigned transaction blob (that is usually needed to construct\n        the a network transaction from a collection of signatures) and an array of\n        payloads that must be signed by the caller.\n      example:\n        unsigned_transaction: unsigned_transaction\n        payloads:\n        - address: address\n          hex_bytes: hex_bytes\n        - address: address\n          hex_bytes: hex_bytes\n      properties:\n        unsigned_transaction:\n          type: string\n        payloads:\n          items:\n            $ref: '#/components/schemas/SigningPayload'\n          type: array\n      required:\n      - payloads\n      - unsigned_transaction\n      type: object\n    ConstructionCombineRequest:\n      description: ConstructionCombineRequest is the input to the `/construction/combine`\n        endpoint. It contains the unsigned transaction blob returned by `/construction/payloads`\n        and all required signatures to create a network transaction.\n      example:\n        unsigned_transaction: unsigned_transaction\n        signatures:\n        - public_key:\n            hex_bytes: hex_bytes\n          signing_payload:\n            address: address\n            hex_bytes: hex_bytes\n          hex_bytes: hex_bytes\n        - public_key:\n            hex_bytes: hex_bytes\n          signing_payload:\n            address: address\n            hex_bytes: hex_bytes\n          hex_bytes: hex_bytes\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        unsigned_transaction:\n          type: string\n        signatures:\n          items:\n            $ref: '#/components/schemas/Signature'\n          type: array\n      required:\n      - network_identifier\n      - signatures\n      - unsigned_transaction\n      type: object\n    ConstructionCombineResponse:\n      description: ConstructionCombineResponse is returned by `/construction/combine`.\n        The network payload will be sent directly to the `construction/submit` endpoint.\n      example:\n        signed_transaction: signed_transaction\n      properties:\n        signed_transaction:\n          type: string\n      required:\n      - signed_transaction\n      type: object\n    ConstructionParseRequest:\n      description: ConstructionParseRequest is the input to the `/construction/parse`\n        endpoint. It allows the caller to parse either an unsigned or signed transaction.\n      example:\n        signed: true\n        transaction: transaction\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        signed:\n          description: Signed is a boolean indicating whether the transaction is signed.\n          type: boolean\n        transaction:\n          description: This must be either the unsigned transaction blob returned\n            by `/construction/payloads` or the signed transaction blob returned by\n            `/construction/combine`.\n          type: string\n      required:\n      - network_identifier\n      - signed\n      - transaction\n      type: object\n    ConstructionParseResponse:\n      description: ConstructionParseResponse contains an array of operations that\n        occur in a transaction blob. This should match the array of operations provided\n        to `/construction/preprocess` and `/construction/payloads`.\n      example:\n        signers:\n        - signers\n        - signers\n        metadata: '{}'\n        operations:\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n        - amount:\n            metadata: '{}'\n            currency:\n              symbol: BTC\n              metadata:\n                Issuer: Satoshi\n              decimals: 8\n            value: \"1238089899992\"\n          metadata:\n            asm: 304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01\n              03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n            hex: 48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\n          related_operations:\n          - index: 0\n            operation_identifier:\n              index: 0\n          type: Transfer\n          coin_change:\n            coin_identifier:\n              identifier: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\n          account:\n            metadata: '{}'\n            address: 0x3a065000ab4183c6bf581dc1e55a605455fc6d61\n            sub_account:\n              metadata: '{}'\n              address: 0x6b175474e89094c44da98b954eedeac495271d0f\n          operation_identifier:\n            index: 1\n            network_index: 0\n          status: Reverted\n      properties:\n        operations:\n          items:\n            $ref: '#/components/schemas/Operation'\n          type: array\n        signers:\n          description: All signers of a particular transaction. If the transaction\n            is unsigned, it should be empty.\n          items:\n            type: string\n          type: array\n        metadata:\n          type: object\n      required:\n      - operations\n      - signers\n      type: object\n    ConstructionHashRequest:\n      description: ConstructionHashRequest is the input to the `/construction/hash`\n        endpoint.\n      example:\n        signed_transaction: signed_transaction\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        signed_transaction:\n          type: string\n      required:\n      - network_identifier\n      - signed_transaction\n      type: object\n    ConstructionSubmitRequest:\n      description: The transaction submission request includes a signed transaction.\n      example:\n        signed_transaction: signed_transaction\n        network_identifier:\n          blockchain: bitcoin\n          sub_network_identifier:\n            metadata:\n              producer: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\n            network: shard 1\n          network: mainnet\n      properties:\n        network_identifier:\n          $ref: '#/components/schemas/NetworkIdentifier'\n        signed_transaction:\n          type: string\n      required:\n      - network_identifier\n      - signed_transaction\n      type: object\n    TransactionIdentifierResponse:\n      description: TransactionIdentifierResponse contains the transaction_identifier\n        of a transaction that was submitted to either `/construction/hash` or `/construction/submit`.\n      example:\n        metadata: '{}'\n        transaction_identifier:\n          hash: 0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\n      properties:\n        transaction_identifier:\n          $ref: '#/components/schemas/TransactionIdentifier'\n        metadata:\n          type: object\n      required:\n      - transaction_identifier\n      type: object\n    Error:\n      description: Instead of utilizing HTTP status codes to describe node errors\n        (which often do not have a good analog), rich errors are returned using this\n        object. Both the code and message fields can be individually used to correctly\n        identify an error. Implementations MUST use unique values for both fields.\n      example:\n        retriable: true\n        code: 12\n        details:\n          address: 0x1dcc4de8dec75d7aab85b567b6\n          error: not base64\n        message: Invalid account format\n      properties:\n        code:\n          description: Code is a network-specific error code. If desired, this code\n            can be equivalent to an HTTP status code.\n          example: 12\n          format: int32\n          minimum: 0\n          type: integer\n        message:\n          description: Message is a network-specific error message. The message MUST\n            NOT change for a given code. In particular, this means that any contextual\n            information should be included in the details field.\n          example: Invalid account format\n          type: string\n        retriable:\n          description: An error is retriable if the same request may succeed if submitted\n            again.\n          type: boolean\n        details:\n          description: Often times it is useful to return context specific to the\n            request that caused the error (i.e. a sample of the stack trace or impacted\n            account) in addition to the standard error message.\n          example:\n            address: 0x1dcc4de8dec75d7aab85b567b6\n            error: not base64\n          type: object\n      required:\n      - code\n      - message\n      - retriable\n      type: object\n",
			"canonicalURL": "/github.com/clover-network/clover-rosetta-service@42060482a53b198cb425122e7211649e4f0bf8af/-/blob/sdk/lib/server/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/clover-network/clover-rosetta-service/blob/42060482a53b198cb425122e7211649e4f0bf8af/sdk/lib/server/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}