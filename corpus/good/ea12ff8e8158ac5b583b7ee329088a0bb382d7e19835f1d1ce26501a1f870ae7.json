{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stellar/java-stellar-anchor-sdk"
		},
		"file": {
			"name": "Platform API.yml",
			"size": 0,
			"path": "docs/Anchor Integration/Platform API.yml",
			"byteSize": 14957,
			"content": "openapi: 3.0.0\ninfo:\n  description: The Platform API specification for the Stellar Anchor Platform project.\n  version: \"1.0\"\n  title: Platform API\ntags:\n  - name: \"Transactions\"\n    description: \"Transactions initiated by client applications via SEP APIs\"\n  - name: \"Quotes\"\n    description: \"Firm quotes provided to client applications via SEP APIs\"\npaths:\n  /transactions:\n    get:\n      tags:\n        - \"Transactions\"\n      summary: Fetchs all transactions initiated by client applications\n      operationId: getTransactions\n      description: |\n        Provides the information necessary for the business to determine the state of each transaction, decide if any \n        action must be taken to continue processing each transaction, and act on those decisions.\n      parameters:\n        - in: query\n          name: sep\n          description: The SEP number for the protocol used to initiate this transaction.\n          required: false\n          schema:\n            type: integer\n            enum: [31]\n        - in: query\n          name: order\n          description: Either ascending or descending by `order_by` value.\n          required: false\n          schema:\n            type: string\n            enum: [\"asc\", \"desc\"]\n            default: \"desc\"\n        - in: query\n          name: order_by\n          description: The data to be used for ordering transactions.\n          schema:\n            type: string\n            enum: [\"started_at\", \"completed_at\", \"transfer_received_at\"]\n            default: \"started_at\"\n        - in: query\n          name: cursor\n          description:\n            The cursor used for pagination. Each response will include a `cursor` value that can be used to\n            view the next page, assuming all other parameters kept the same.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: after\n          description: Timestamp for which all `order_by` values will be after (exclusive), in UTC.\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: before\n          description: Timestamp for which all `order_by` values will be before (exclusive), in UTC.\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: status\n          description: Status of the transaction.\n          required: false\n          schema:\n            type: string\n            enum: [\n              \"pending_sender\",\n              \"pending_stellar\",\n              \"pending_customer_info_update\",\n              \"pending_receiver\",\n              \"pending_external\",\n              \"completed\",\n              \"error\"\n            ]\n      responses:\n        '200':\n          description: valid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  records:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Transaction'\n                  cursor:\n                    type: string\n        '400':\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                required:\n                  - error\n    patch:\n      tags:\n        - \"Transactions\"\n      summary: Accepts updated information on transactions.\n      operationId: patchTransactions\n      description:\n        Accepts one or more objects containing updated information on transactions. Note that requests containing \n        invalid data for any transaction will result in a 400 Bad Request and no transactions will be updated. Note\n        that this endpoint accepts a subset of transaction information defined in the `PatchTransaction` schema.\n      responses:\n        '200':\n          description: Transaction(s) updated.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  records:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Transaction'\n        '400':\n          description: 'Invalid request body. The error returned pertains to the transaction first determined to be invalid.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                  id:\n                    type: string\n                    description: The `id` of the transaction first determined to be invalid.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                records:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PatchTransaction'\n  /transactions/{id}:\n    get:\n      tags:\n        - \"Transactions\"\n      summary: Fetches a single transaction.\n      operationId: getTransaction\n      description:\n        Provides the information necessary for the business to determine the state of the transaction identified by \n        `id`, decide if any action must be taken to continue processing the transaction, and act on the decision.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \"Transaction found.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        '404':\n          description: \"Transaction not found.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /exchange/quotes:\n    get:\n      tags:\n        - Quotes\n      summary: Fetches the quotes provided to client applications.\n      operationId: getQuotes\n      description:\n        Only relevant for SEP-38 (used by SEP-31). Fetches the quotes that were created by client applications using \n        SEP-38's `POST /quote` endpoint.\n      parameters:\n        - in: query\n          name: order\n          description: Either ascending or descending by `order_by` value.\n          required: false\n          schema:\n            type: string\n            enum: [\"asc\", \"desc\"]\n            default: \"desc\"\n        - in: query\n          name: order_by\n          description: The data to be used for ordering transactions.\n          required: false\n          schema:\n            type: string\n            enum: [\"created_at\", \"expires_at\", \"used_at\"]\n            default: \"created_at\"\n        - in: query\n          name: cursor\n          description:\n            Cursor used for pagination. Each response will include a `cursor` value that can be used to view \n            the next page, assuming all other parameters kept the same.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: after\n          description: Timestamp for which all `order_by` values will be after (exclusive), in UTC.\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: before\n          description: Timestamp for which all `order_by` values will be before (exclusive), in UTC.\n          required: false\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  records:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Quote'\n                  cursor:\n                    type: string\n        '400':\n          description: \"Bad Request\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /exchange/quotes/{id}:\n    get:\n      tags:\n        - Quotes\n      summary: Fetch a single quote provided to a client application.\n      operationId: getQuote\n      description:\n        Only relevant for SEP-38 (used by SEP-31). Fetches the quote that ascreated by a client application using \n        SEP-38's `POST /quote` endpoint.\n      parameters:\n        - in: path\n          name: id\n          description: The ID returned as a result of creating the quote via SEP-38's `POST /quote` endpoint.\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: \"Success\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Quote'\n        '404':\n          description: \"Not Found.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Transaction:\n      type: object\n      properties:\n        id:\n          type: string\n        sep:\n          type: integer\n          enum: [31]\n        kind:\n          type: string\n          enum: [\"receive\"]\n        status:\n          type: string\n          enum: [\n            \"pending_sender\",\n            \"pending_stellar\",\n            \"pending_customer_info_update\",\n            \"pending_receiver\",\n            \"pending_external\",\n            \"completed\",\n            \"error\"\n          ]\n        amount_expected:\n          $ref: '#/components/schemas/Amount'\n        amount_in:\n          $ref: '#/components/schemas/Amount'\n        amount_out:\n          $ref: '#/components/schemas/Amount'\n        amount_fee:\n          $ref: '#/components/schemas/Amount'\n        quote_id:\n          type: string\n        started_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n        completed_at:\n          type: string\n          format: date-time\n        transfer_received_at:\n          type: string\n          format: date-time\n        message:\n          type: string\n        refunds:\n          $ref: '#/components/schemas/Refunds'\n        stellar_transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/StellarTransaction'\n        external_transaction_id:\n          type: string\n        custodial_transaction_id:\n          type: string\n        customers:\n          type: object\n          properties:\n            sender:\n              $ref: '#/components/schemas/StellarId'\n            receiver:\n              $ref: '#/components/schemas/StellarId'\n        creator:\n          $ref: '#/components/schemas/StellarId'\n    PatchTransaction:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        status:\n          type: string\n          enum: [\n            \"pending_stellar\",\n            \"pending_customer_info_update\",\n            \"pending_receiver\",\n            \"pending_external\",\n            \"completed\",\n            \"error\"\n          ]\n        amount_in:\n          $ref: '#/components/schemas/Amount'\n        amount_out:\n          $ref: '#/components/schemas/Amount'\n        amount_fee:\n          $ref: '#/components/schemas/Amount'\n        transfer_received_at:\n          type: string\n          format: date-time\n        message:\n          type: string\n        refund:\n          $ref: '#/components/schemas/Refunds'\n        external_transaction_id:\n          type: string\n    Amount:\n      type: object\n      required:\n        - amount\n        - asset\n      properties:\n        amount:\n          type: string\n        asset:\n          type: string\n    Refunds:\n      type: object\n      properties:\n        amount_refunded:\n          $ref: '#/components/schemas/Amount'\n        amount_fee:\n          $ref: '#/components/schemas/Amount'\n        payments:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              id_type:\n                type: string\n                enum:\n                  - stellar\n                  - external\n              amount:\n                $ref: '#/components/schemas/Amount'\n              fee:\n                $ref: '#/components/schemas/Amount'\n              requested_at:\n                type: string\n                format: date-time\n              refunded_at:\n                type: string\n                format: date-time\n    Quote:\n      type: object\n      properties:\n        id:\n          type: string\n        sell_asset:\n          type: string\n        buy_asset:\n          type: string\n        expires_at:\n          type: string\n          format: date-time\n        price:\n          type: string\n        creator:\n          $ref: '#/components/schemas/StellarId'\n        transaction_id:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n    StellarId:\n      type: object\n      description:\n        StellarId's are objects that identify an on-chain entity. Both end users and SEP-31 senders can be identified \n        with StellarId's. Id's for SEP-31 senders will never include a `memo` or `memo_type`.\n      properties:\n        account:\n          type: string\n          description: Either the Stellar account or Muxed account address of the on-chain entity.\n        memo:\n          type: string\n          description:\n            The memo unique identifys the on-chain entity when paired with `StellarId.account`. Memos are not valid if \n            `StellarId.account` is a Muxed account.\n        memo_type:\n          type: string\n          description: The type of `StellarId.memo`.\n          enum:\n            - hash\n            - text\n            - id\n    StellarTransaction:\n      type: object\n      required:\n        - id\n        - memo\n        - memo_type\n        - created_at\n        - envelope\n        - payments\n      properties:\n        id:\n          type: string\n        memo:\n          type: string\n        memo_type:\n          type: string\n          enum:\n            - text\n            - hash\n            - id\n        created_at:\n          type: string\n          format: date-time\n        envelope:\n          type: string\n        payments:\n          type: array\n          items:\n            type: object\n            properties:\n              operationId:\n                type: string\n              source_account:\n                type: string\n              destination_account:\n                type: string\n              amount:\n                $ref: '#/components/schemas/Amount'\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n        id:\n          type: string\n      required:\n        - error",
			"canonicalURL": "/github.com/stellar/java-stellar-anchor-sdk@043ce5bc2dea2bc9584fc035107fd927287daec6/-/blob/docs/Anchor%20Integration/Platform%20API.yml",
			"externalURLs": [
				{
					"url": "https://github.com/stellar/java-stellar-anchor-sdk/blob/043ce5bc2dea2bc9584fc035107fd927287daec6/docs/Anchor Integration/Platform API.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}