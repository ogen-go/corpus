{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/pinnacleapi/openapi-specification"
		},
		"file": {
			"name": "linesapi-oas.yaml",
			"size": 0,
			"path": "linesapi-oas.yaml",
			"byteSize": 110711,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Pinnacle - Lines API Reference\n  description: \u003e\n    All about odds and fixtures\n\n\n    # Authentication \n    \n    Please note that API has restriction that client password can be maximum up 10 characters long.\n    \n\n    API uses HTTP Basic access authentication. You need to send Authorization\n    HTTP Request header:  \n\n\n    `Authorization: Basic `\n\n\n    Example:\n\n\n    `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`\n  x-logo:\n    url: \u003e-\n      https://avatars2.githubusercontent.com/u/31601407?s=400\u0026u=f3c6e1cfc8a26665e4a4df6d8da4a7ee527aeceb\u0026v=4\nsecurity:\n  - basicAuth: []\npaths:\n  /v1/fixtures:\n    get:\n      tags:\n        - Fixtures\n      summary: Get Fixtures - v1\n      description: \u003e-\n        Returns all **non-settled** events for the given sport. Please note that\n        it is possible that the event is in Get Fixtures response but not in Get\n        Odds. This happens when the odds are not currently available for\n        wagering. Please note that it is possible to receive the same exact\n        response when using **since** parameter. This is rare and can be caused\n        by internal updates of event properties.\n      operationId: Fixtures_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          description: The sport id to retrieve the fixtures for.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          description: \u003e-\n            The leagueIds array may contain a list of comma separated league\n            ids.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: isLive\n          in: query\n          description: \u003e-\n            To retrieve ONLY live events set the value to 1 (isLive=1). Missing\n            or any other value will result in retrieval of events regardless of\n            their Live status.\n          required: false\n          schema:\n            type: boolean\n        - name: since\n          in: query\n          description: \u003e-\n            This is used to receive incremental updates. Use the value of last\n            from previous fixtures response. When since parameter is not\n            provided, the fixtures are delayed up to 1 minute to encourage the\n            use of the parameter.\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: eventIds\n          in: query\n          description: Comma separated list of event ids to filter by\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FixturesResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/fixtures/special:\n    get:\n      tags:\n        - Fixtures\n      summary: Get Special Fixtures - v1\n      description: Returns all **non-settled** specials for the given sport.\n      operationId: Fixtures_Special_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          description: Id of a sport for which to retrieve the specials.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          description: \u003e-\n            The leagueIds array may contain a list of comma separated league\n            ids.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: since\n          in: query\n          description: \u003e-\n            This is used to receive incremental updates. Use the value of last\n            field from the previous response. When since parameter is not\n            provided, the fixtures are delayed up to 1 min to encourage the use\n            of the parameter.\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: category\n          in: query\n          description: The category the special falls under.\n          required: false\n          schema:\n            type: string\n        - name: eventId\n          in: query\n          description: Id of an event associated with a special.\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: specialId\n          in: query\n          description: Id of the special.\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpecialsFixturesResponse'\n              examples:\n                response:\n                  value:\n                    sportId: 4\n                    last: 636433059508250600\n                    leagues:\n                      - id: 487\n                        specials:\n                          - id: 1\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 4th quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: I\n                            event:\n                              id: 1\n                              periodNumber: 0\n                            contestants:\n                              - id: 1\n                                name: Odd\n                                rotNum: 100\n                              - id: 2\n                                name: Even\n                                rotNum: 101\n                          - id: 2\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 3rd quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: I\n                            event:\n                              id: 1\n                              periodNumber: 0\n                            contestants:\n                              - id: 3\n                                name: Odd\n                                rotNum: 100\n                              - id: 4\n                                name: Even\n                                rotNum: 101\n                          - id: 3\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 2nd quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: H\n                            event:\n                              id: 1\n                              periodNumber: 0\n                            contestants:\n                              - id: 5\n                                name: Odd\n                                rotNum: 100\n                              - id: 6\n                                name: Even\n                                rotNum: 101\n                          - id: 4\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 1st quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: I\n                            event:\n                              id: 1\n                              periodNumber: 0\n                            contestants:\n                              - id: 7\n                                name: Odd\n                                rotNum: 100\n                              - id: 8\n                                name: Even\n                                rotNum: 101\n                          - id: 5\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 4th quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: null\n                            event:\n                              id: 2\n                              periodNumber: 0\n                            contestants:\n                              - id: 9\n                                name: Odd\n                                rotNum: 100\n                              - id: 10\n                                name: Even\n                                rotNum: 101\n                          - id: 6\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 3rd quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: I\n                            event:\n                              id: 2\n                              periodNumber: 0\n                            contestants:\n                              - id: 11\n                                name: Odd\n                                rotNum: 100\n                              - id: 12\n                                name: Even\n                                rotNum: 101\n                          - id: 7\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 2nd quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: I\n                            event:\n                              id: 2\n                              periodNumber: 0\n                            contestants:\n                              - id: 13\n                                name: Odd\n                                rotNum: 100\n                              - id: 14\n                                name: Even\n                                rotNum: 101\n                          - id: 8\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Will the 1st quarter be odd or even?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: 1/4 Totals\n                            units: ''\n                            status: H\n                            event:\n                              id: 2\n                              periodNumber: 0\n                            contestants:\n                              - id: 15\n                                name: Odd\n                                rotNum: 100\n                              - id: 16\n                                name: Even\n                                rotNum: 101\n                          - id: 9\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Who will win the NBA finals?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: Outright Winner\n                            units: ''\n                            status: I\n                            contestants:\n                              - id: 17\n                                name: Golden State Warriors\n                                rotNum: 100\n                              - id: 18\n                                name: Cleveland Cavaliers\n                                rotNum: 101\n                              - id: 19\n                                name: San Antonio Spurs\n                                rotNum: 102\n                              - id: 20\n                                name: Chicago Bulls\n                                rotNum: 103\n                      - id: 578\n                        specials:\n                          - id: 10\n                            betType: MULTI_WAY_HEAD_TO_HEAD\n                            name: Who will win the WNBA finals?\n                            date: '2017-10-11T14:00:00Z'\n                            cutoff: '2017-10-11T14:00:00Z'\n                            category: Outright Winner\n                            units: ''\n                            status: I\n                            contestants:\n                              - id: 21\n                                name: Minnesota Lynx\n                                rotNum: 100\n                              - id: 22\n                                name: Indiana Fever\n                                rotNum: 101\n                              - id: 23\n                                name: Phoenix Mercury\n                                rotNum: 102\n                              - id: 24\n                                name: Chicago Sky\n                                rotNum: 103\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      deprecated: false\n  /v1/fixtures/settled:\n    get:\n      tags:\n        - Fixtures\n      summary: Get Settled Fixtures - v1\n      description: Returns fixtures settled in the last 24 hours for the given sport.\n      operationId: Fixtures_Settled_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: since\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettledFixturesSport'\n              examples:\n                response:\n                  value:\n                    sportId: 0\n                    last: 0\n                    leagues:\n                      - id: 0\n                        events:\n                          - id: 0\n                            periods:\n                              - number: 0\n                                status: 0\n                                settlementId: 0\n                                settledAt: '2017-09-03T18:21:22.3846289-07:00'\n                                team1Score: 0\n                                team2Score: 0\n                                cancellationReason:\n                                  code: string\n                                  details:\n                                    correctTeam1Id: string\n                                    correctTeam2Id: string\n                                    correctListedPitcher1: string\n                                    correctListedPitcher2: string\n                                    correctSpread: '0.0'\n                                    correctTotalPoints: '0.0'\n                                    correctTeam1TotalPoints: '0.0'\n                                    correctTeam2TotalPoints: '0.0'\n                                    correctTeam1Score: '0'\n                                    correctTeam2Score: '0'\n                                    correctTeam1TennisSetsScore: '0'\n                                    correctTeam2TennisSetsScore: '0'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/fixtures/special/settled:\n    get:\n      tags:\n        - Fixtures\n      summary: Get Settled Special Fixtures - v1\n      description: \u003e-\n        Returns all specials which are settled in the last 24 hours for the\n        given Sport.\n      operationId: Fixtures_Specials_Settled_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          description: Id of the sport for which to retrieve the settled specials.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          description: Array of leagueIds. This is optional parameter.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: since\n          in: query\n          description: \u003e-\n            This is used to receive incremental updates. Use the value of last\n            from previous response.\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettledSpecialsResponse'\n              examples:\n                response:\n                  value:\n                    sportId: 29\n                    last: 7004137\n                    leagues:\n                      - id: 5200\n                        specials:\n                          - id : 1206517453\n                            settlementId: 7003218\n                            status: 3\n                            settledAt: '2020-11-10T06:56:28.427Z'\n                            contestants:\n                              - name: Barranquilla\n                                outcome: \"X\"\n                              - name: Valledupar\n                                outcome: \"X\"                                \n                            cancellationReason:\n                              code: FBS_CW_65 \n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      deprecated: false\n  /v1/odds:\n    get:\n      tags:\n        - Odds\n      summary: Get Straight Odds - v1\n      description: \u003e-\n        Returns straight odds for all non-settled events. Please note that it is  possible that the event is in Get Fixtures response but not in Get Odds.\n        This happens when the odds are not currently available for wagering.\n      operationId: Odds_Straight_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          description: The sportid for which to retrieve the odds.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          description: \u003e-\n            The leagueIds array may contain a list of comma separated league\n            ids.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: oddsFormat\n          in: query\n          description: \u003e-\n            Format in which we return the odds. Default is American. [American,\n            Decimal, HongKong, Indonesian, Malay]\n          required: false\n          schema:\n            type: string\n            enum:\n              - American\n              - Decimal\n              - HongKong\n              - Indonesian\n              - Malay\n        - name: since\n          in: query\n          description: \u003e-\n            This is used to receive incremental updates. Use the value of last\n            from previous odds response. When since parameter is not provided,\n            the odds are delayed up to 1 min to encourage the use of the\n            parameter. Please note that when using since parameter you will get\n            in the response ONLY changed periods. If a period did not have any\n            changes it will not be in the response.\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: isLive\n          in: query\n          description: \u003e-\n            To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise\n            response will have all odds.\n          required: false\n          schema:\n            type: boolean\n        - name: eventIds\n          in: query\n          description: Filter by EventIds\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int64\n        - name: toCurrencyCode\n          in: query\n          description: \u003e-\n            3 letter currency code as in the\n            [/currency](https://pinnacleapi.github.io/linesapi#operation/Currencies_V2_Get)\n            response. Limits will be returned in the requested currency. Default\n            is USD.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OddsResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/odds/teaser:\n    get:\n      tags:\n        - Odds\n      summary: Get Teaser Odds - v1\n      description: Returns odds for specified teaser.\n      operationId: Odds_Teasers_V1_Get\n      parameters:\n        - name: teaserId\n          in: query\n          description: \u003e-\n            Unique identifier.Teaser details can be retrieved from a call to Get\n            Teaser Groups endpoint.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeaserOddsResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/odds/special:\n    get:\n      tags:\n        - Odds\n      summary: Get Special Odds - v1\n      description: Returns odds for specials for all non-settled events.\n      operationId: Odds_Special_V1_Get\n      parameters:\n        - name: oddsFormat\n          in: query\n          description: \u003e-\n            Format the odds are returned in. [American, Decimal, HongKong,\n            Indonesian, Malay]\n          required: false\n          schema:\n            type: string\n            enum:\n              - American\n              - Decimal\n              - HongKong\n              - Indonesian\n              - Malay\n        - name: sportId\n          in: query\n          description: Id of a sport for which to retrieve the specials.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: leagueIds\n          in: query\n          description: \u003e-\n            The leagueIds array may contain a list of comma separated league\n            ids.\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: since\n          in: query\n          description: \u003e-\n            This is used to receive incremental updates. Use the value of last\n            from previous response. When since parameter is not provided, the\n            fixtures are delayed up to 1 min to encourage the use of the\n            parameter.\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: specialId\n          in: query\n          description: Id of the special. This is an optional argument.\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpecialOddsResponse'\n              examples:\n                response:\n                  value:\n                    sportId: 4\n                    last: 636433059510590700\n                    leagues:\n                      - id: 487\n                        specials:\n                          - id: 1\n                            maxBet: 100\n                            contestantLines:\n                              - id: 1\n                                lineId: 1001\n                                price: -199\n                                handicap: null\n                              - id: 2\n                                lineId: 1002\n                                price: -198\n                                handicap: null\n                          - id: 2\n                            maxBet: 100\n                            contestantLines:\n                              - id: 3\n                                lineId: 1003\n                                price: -197\n                                handicap: null\n                              - id: 4\n                                lineId: 1004\n                                price: -196\n                                handicap: null\n                          - id: 3\n                            maxBet: 100\n                            contestantLines:\n                              - id: 5\n                                lineId: 1005\n                                price: -195\n                                handicap: null\n                              - id: 6\n                                lineId: 1006\n                                price: -194\n                                handicap: null\n                          - id: 4\n                            maxBet: 100\n                            contestantLines:\n                              - id: 7\n                                lineId: 1007\n                                price: -193\n                                handicap: null\n                              - id: 8\n                                lineId: 1008\n                                price: -192\n                                handicap: null\n                          - id: 5\n                            maxBet: 100\n                            contestantLines:\n                              - id: 9\n                                lineId: 1009\n                                price: -191\n                                handicap: null\n                              - id: 10\n                                lineId: 1010\n                                price: -190\n                                handicap: null\n                          - id: 6\n                            maxBet: 100\n                            contestantLines:\n                              - id: 11\n                                lineId: 1011\n                                price: -189\n                                handicap: null\n                              - id: 12\n                                lineId: 1012\n                                price: -188\n                                handicap: null\n                          - id: 7\n                            maxBet: 100\n                            contestantLines:\n                              - id: 13\n                                lineId: 1013\n                                price: -187\n                                handicap: null\n                              - id: 14\n                                lineId: 1014\n                                price: -186\n                                handicap: null\n                          - id: 8\n                            maxBet: 100\n                            contestantLines:\n                              - id: 15\n                                lineId: 1015\n                                price: -185\n                                handicap: null\n                              - id: 16\n                                lineId: 1016\n                                price: -184\n                                handicap: null\n                          - id: 9\n                            maxBet: 100\n                            contestantLines:\n                              - id: 17\n                                lineId: 1017\n                                price: -183\n                                handicap: null\n                              - id: 18\n                                lineId: 1018\n                                price: -182\n                                handicap: null\n                              - id: 19\n                                lineId: 1019\n                                price: -181\n                                handicap: null\n                              - id: 20\n                                lineId: 1020\n                                price: -180\n                                handicap: null\n                      - id: 578\n                        specials:\n                          - id: 10\n                            maxBet: 100\n                            contestantLines:\n                              - id: 21\n                                lineId: 1021\n                                price: -179\n                                handicap: null\n                              - id: 22\n                                lineId: 1022\n                                price: -178\n                                handicap: null\n                              - id: 23\n                                lineId: 1023\n                                price: -177\n                                handicap: null\n                              - id: 24\n                                lineId: 1024\n                                price: -176\n                                handicap: null\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      deprecated: false\n  /v1/line:\n    get:\n      tags:\n        - Line\n      summary: Get Straight Line - v1\n      description: Returns latest line.\n      operationId: Line_Straight_V1_Get\n      parameters:\n        - name: leagueId\n          in: query\n          description: League Id.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: handicap\n          in: query\n          description: \u003e-\n            This is needed for SPREAD, TOTAL_POINTS and TEAM_TOTAL_POINTS bet\n            types\n          required: true\n          schema:\n            type: number\n            format: double\n        - name: oddsFormat\n          in: query\n          description: Format in which we return the odds. Default is American.\n          required: true\n          schema:\n            type: string\n            enum:\n              - American\n              - Decimal\n              - HongKong\n              - Indonesian\n              - Malay\n        - name: sportId\n          in: query\n          description: Sport identification\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: eventId\n          in: query\n          description: Event identification\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: periodNumber\n          in: query\n          description: \u003e-\n            This represents the period of the match. Please check Get Periods endpoint for the list of currently supported periods per sport.  \n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: betType\n          in: query\n          description: Bet Type\n          required: true\n          schema:\n            type: string\n            enum:\n              - SPREAD\n              - MONEYLINE\n              - TOTAL_POINTS\n              - TEAM_TOTAL_POINTS\n        - name: team\n          in: query\n          description: \u003e-\n            Chosen team type. This is needed only for SPREAD, MONEYLINE and\n            TEAM_TOTAL_POINTS bet types\n          required: false\n          schema:\n            type: string\n            enum:\n              - Team1\n              - Team2\n              - Draw\n        - name: side\n          in: query\n          description: \u003e-\n            Chosen side. This is needed only for TOTAL_POINTS and\n            TEAM_TOTAL_POINTS\n          required: false\n          schema:\n            type: string\n            enum:\n              - OVER\n              - UNDER\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v2/line/parlay:\n    post:\n      tags:\n        - Line\n      summary: Get Parlay Line - v2\n      description: Returns parlay lines and calculate odds. For placing round robin bets, must be used with /v2/bets/parlay.\n      operationId: Line_Parlay_V2_Post\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParlayLinesResponseV2'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ParlayLinesRequest'\n        required: true      \n  /v1/line/teaser:\n    post:\n      tags:\n        - Line\n      summary: Get Teaser Line - v1\n      description: \u003e-\n        Validates a teaser bet prior to submission. Returns bet limit and price\n        on success.\n      operationId: Line_Teaser_V1_Post\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeaserLinesResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinesRequestTeaser'\n        required: true\n  /v1/line/special:\n    get:\n      tags:\n        - Line\n      operationId: Line_Special_V1_Get\n      summary: Get Special Line - v1\n      description: Returns special lines and calculate odds.\n      parameters:\n        - name: oddsFormat\n          in: query\n          description: \u003e-\n            Format the odds are returned in. [American, Decimal, HongKong,\n            Indonesian, Malay]\n          required: true\n          schema:\n            type: string\n            enum:\n              - American\n              - Decimal\n              - HongKong\n              - Indonesian\n              - Malay\n        - name: specialId\n          in: query\n          description: Id of the special.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: contestantId\n          in: query\n          description: Id of the contestant.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: handicap\n          in: query\n          description: \u003e-\n            handicap of the contestant. As contestant's handicap is a mutable\n            property, it may happened that line/special returns status:SUCCESS,\n            but with the different handicap from the one that client had at the\n            moment of calling the line/special. One can specify handicap\n            parameter in the request and if the contestant's handicap changed,\n            it would return status:NOT_EXISTS. This way line/special is more\n            aligned to how /line works.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpecialLineResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n      deprecated: false\n  /v2/sports:\n    get:\n      tags:\n        - Others\n      summary: Get Sports - v2\n      description: \u003e-\n        Returns all sports with the status whether they currently have lines or\n        not.\n      operationId: Sports_V2_Get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SportsResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinesErrorResponse'\n  /v2/leagues:\n    get:\n      tags:\n        - Others\n      summary: Get Leagues - v2\n      description: \u003e-\n        Returns all sports leagues with the status whether they currently have\n        lines or not.\n      operationId: Leagues_V2_Get\n      parameters:\n        - name: sportId\n          in: query\n          description: Sport id for which the leagues are requested.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Leagues'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/periods:\n    get:\n      tags:\n        - Others\n      summary: Get Periods - v1\n      description: Returns all periods for a given sport.\n      operationId: Periods_V1_Get\n      parameters:\n        - name: sportId\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SportPeriod'\n              examples:\n                response:\n                  value:\n                    periods:\n                      - number: 0\n                        description: Match\n                        shortDescription: FT\n                        spreadDescription: Handicap\n                        moneylineDescription: 1X2\n                        totalDescription: Total\n                        team1TotalDescription: Team 1 Goals\n                        team2TotalDescription: Team 2 Goals\n                        spreadShortDescription: HDP\n                        moneylineShortDescription: 1X2\n                        totalShortDescription: O/U\n                        team1TotalShortDescription: Team 1 Goals\n                        team2TotalShortDescription: Team 2 Goals \n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/inrunning:\n    get:\n      tags:\n        - Others\n      summary: Get In-Running - v1\n      description: \u003e-\n        Returns all live soccer events that have a status that indicates the\n        event is in progress.\n      operationId: InRunning_V1_Get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InRunningResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedLinesErrorResponse'\n  /v1/teaser/groups:\n    get:\n      tags:\n        - Others\n      summary: Get Teaser Groups - v1\n      description: Returns all teaser groups.\n      operationId: Teaser_Groups_V1_Get\n      parameters:\n        - name: oddsFormat\n          in: query\n          description: \u003e-\n            Format the odds are returned in. [American, Decimal, HongKong,\n            Indonesian, Malay]\n          required: true\n          schema:\n            type: string\n            enum:\n              - American\n              - Decimal\n              - HongKong\n              - Indonesian\n              - Malay\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeaserGroupsResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v1/cancellationreasons:\n    get:\n      tags:\n        - Others\n      summary: Get Cancellation Reasons - v1\n      description: Lookup for all the cancellation reasons\n      operationId: CancellationReasons_V1_Get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CancellationReasonResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\n  /v2/currencies:\n    get:\n      tags:\n        - Others\n      summary: Get Currencies - v2\n      description: Returns the list of supported currencies\n      operationId: Currencies_V2_Get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessfulCurrenciesResponse'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedErrorResponse'\nservers:\n  - url: 'https://api.pinnacle.com/'\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Identifier representing the type of error that occurred.\n        message:\n          type: string\n          description: Description of the error.\n      description: Contains details of an error that was encountered.\n    ExtendedErrorResponse:\n      type: object\n      properties:\n        ref:\n          type: string\n        code:\n          type: string\n        message:\n          type: string\n    LinesErrorResponse:\n      type: object\n      properties:\n        status:\n          type: string\n        error:\n          $ref: '#/components/schemas/ErrorResponse'\n        code:\n          type: integer\n          format: int32\n          description: Code identifying an error that occurred.\n    ExtendedLinesErrorResponse:\n      type: object\n      properties:\n        ref:\n          type: string\n        status:\n          type: string\n        error:\n          $ref: '#/components/schemas/ErrorResponse'\n        code:\n          type: integer\n          format: int32\n          description: Code identifying an error that occurred.\n    CancellationReasonResponse:\n      type: object\n      properties:\n        cancellationReasons:\n          type: array\n          description: Contains a list of Cancellation Reasons.\n          items:\n            $ref: '#/components/schemas/CancellationReason'\n      description: Cancellation Response Data\n    CancellationReason:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Cancellation code assigned by the server\n          example: FBS_CW_65\n        description:\n          type: string\n          description: Text description for the cancellation reason\n          example: The event was postponed\n      description: Cancellation Data\n    SuccessfulCurrenciesResponse:\n      type: object\n      properties:\n        currencies:\n          type: array\n          description: Currencies container.\n          items:\n            $ref: '#/components/schemas/Currency'\n    Currency:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Currency code.\n          example: AED\n        name:\n          type: string\n          description: Currency name.\n          example: United Arab Emirates Dirham\n        rate:\n          type: number\n          format: double\n          description: Exchange rate to USD.\n          example: 3.6738\n    FixturesResponse:\n      type: object\n      properties:\n        sportId:\n          type: integer\n          format: int32\n          description: Same as requested sport Id.\n        last:\n          type: integer\n          format: int64\n          description: \u003e-\n            Use this value for the subsequent requests for since query parameter\n            to get just the changes since previous response.\n        league:\n          type: array\n          description: Contains a list of Leagues.\n          items:\n            $ref: '#/components/schemas/FixturesLeague'\n    FixturesLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: League ID.\n        name:\n          type: string\n          description: League Name.\n        events:\n          type: array\n          description: Contains a list of events.\n          items:\n            $ref: '#/components/schemas/Fixture'\n    Fixture:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Event id.\n        parentId:\n          type: integer\n          format: int64\n          description: \u003e-\n            If event is linked to another event, parentId will be populated. \n            Live event would have pre game event as parent id.\n        starts:\n          type: string\n          format: date-time\n          description: Start time of the event in UTC.\n        home:\n          type: string\n          description: Home team name.\n        away:\n          type: string\n          description: Away team name.\n        rotNum:\n          type: string\n          description: \u003e-\n            Team1 rotation number. Please note that in the next version of\n            /fixtures, rotNum property will be decommissioned. ParentId can be\n            used instead to group the related events.\n        liveStatus:\n          type: integer\n          format: int32\n          description: \u003e\n            Indicates live status of the event. \n\n\n            0 = No live betting will be offered on this event, \n\n            1 = Live betting event, \n\n            2 = Live betting will be offered on this match, but on a different\n            event. Please note that [pre-game and live events are\n            different](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-find-associated-events)\n            .\n          enum:\n            - 0\n            - 1\n            - 2\n        homePitcher:\n          type: string\n          description: Home team pitcher. Only for Baseball.\n        awayPitcher:\n          type: string\n          description: Away team pitcher. Only for Baseball.\n        status:\n          type: string\n          description:  |\n            This is deprecated parameter, please check period's `status` in the\n            `/odds` endpoint to see if it's open for betting.\n            \n            \n            O = This is the starting status of a game.  \n\n            H = This status indicates that the lines are temporarily unavailable\n            for betting, \n\n            I = This status indicates that one or more lines have a red circle\n            (lower maximum bet amount).\n          enum:\n            - O\n            - H\n            - I\n          deprecated: true  \n        parlayRestriction:\n          type: integer\n          format: int32\n          description: \u003e\n\n            Parlay status of the event. \n\n\n            0 = Allowed to parlay, without restrictions, \n\n            1 = Not allowed to parlay this event, \n\n            2 = Allowed to parlay with the restrictions. You cannot have more\n            than one leg from the same event in the parlay. All events with the same rotation number are treated as same event.\n          enum:\n            - 0\n            - 1\n            - 2\n        altTeaser:\n          type: boolean\n          description: \u003e-\n            Whether an event is offer with alternative teaser points. Events\n            with alternative teaser points may vary from teaser definition.\n        resultingUnit:\n          type: string\n          description: \u003e\n            Specifies based on what the event will be resulted, e.g. Corners,\n            Bookings \n        version:\n          type: number\n          format: int64\n          description: \u003e\n            Fixture version, goes up when there is a change in the fixture.    \n    SettledFixturesSport:\n      type: object\n      properties:\n        sportId:\n          type: integer\n          format: int32\n          description: Same as requested sport Id.\n        last:\n          type: integer\n          format: int64\n          description: \u003e-\n            Use this value for the subsequent requests for since query parameter\n            to get just the changes since previous response.\n        leagues:\n          type: array\n          description: Contains a list of Leagues.\n          items:\n            $ref: '#/components/schemas/SettledFixturesLeague'\n    SettledFixturesLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: League Id.\n        events:\n          type: array\n          description: Contains a list of events.\n          items:\n            $ref: '#/components/schemas/SettledFixturesEvent'\n    SettledFixturesEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Event Id.\n        periods:\n          type: array\n          description: Contains a list of periods.\n          items:\n            $ref: '#/components/schemas/SettledFixturesPeriod'\n    SettledFixturesPeriod:\n      type: object\n      properties:\n        number:\n          type: integer\n          format: int32\n          description: \u003e-\n            This represents the period of the match. \n        status:\n          type: integer\n          format: int32\n          description: |\n            Period settlement status. \n\n            1 = Event period is settled, \n            2 = Event period is re-settled, \n            3 = Event period is cancelled, \n            4 = Event period is re-settled as cancelled, \n            5 = Event is deleted\n          enum:\n            - 1\n            - 2\n            - 3\n            - 4\n            - 5\n        settlementId:\n          type: integer\n          format: int64\n          description: \u003e-\n            Unique id of the settlement. In case of a re-settlement, a new\n            settlementId and settledAt will be generated.\n        settledAt:\n          type: string\n          format: date-time\n          description: Date and time in UTC when the period was settled.\n        team1Score:\n          type: integer\n          format: int32\n          description: Team1 score.\n        team2Score:\n          type: integer\n          format: int32\n          description: Team2 score.\n        team1ScoreSets:\n          type: integer\n          format: int32\n          description: Team1 sets score. Supported for tennis only.\n        team2ScoreSets:\n          type: integer\n          format: int32\n          description: Team2 sets score. Supported for tennis only.  \n        cancellationReason:\n          $ref: '#/components/schemas/CancellationReasonType'\n    CancellationReasonType:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Cancellation Reason Code\n        details:\n          $ref: '#/components/schemas/CancellationReasonDetailsType'\n    CancellationReasonDetailsType:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    InRunningResponse:\n      type: object\n      properties:\n        sports:\n          type: array\n          description: Sports container\n          items:\n            $ref: '#/components/schemas/InRunningSport'\n    InRunningSport:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: Sport Id\n        leagues:\n          type: array\n          description: Leagues container\n          items:\n            $ref: '#/components/schemas/InRunningLeague'\n    InRunningLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: League Id\n        events:\n          type: array\n          description: Events container\n          items:\n            $ref: '#/components/schemas/InRunningEvent'\n    InRunningEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Game Id\n        state:\n          type: integer\n          format: int32\n          description: |\n            State of the game.\n\n            1 = First half in progress, \n            2 = Half time in progress, \n            3 = Second half in progress, \n            4 = End of regular time,\n            5 = First half extra time in progress, \n            6 = Extra time half time in progress, \n            7 = Second half extra time in progress, \n            8 = End of extra time, \n            9 = End of Game, \n            10 = Game is temporary suspended, \n            11 = Penalties in progress\n          enum:\n            - 1\n            - 2\n            - 3\n            - 4\n            - 5\n            - 6\n            - 7\n            - 8\n            - 9\n            - 10\n            - 11\n        elapsed:\n          type: integer\n          format: int32\n          description: Elapsed minutes\n    Leagues:\n      type: object\n      properties:\n        leagues:\n          type: array\n          description: Leagues container\n          items:\n            $ref: '#/components/schemas/League'\n    League:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: League Id.\n        name:\n          type: string\n          description: Name of the league.\n        homeTeamType:\n          type: string\n          description: \u003e-\n            Specifies whether the home team is team1 or team2. You need this\n            information to place a bet.\n        hasOfferings:\n          type: boolean\n          description: Whether the league currently has events or specials.\n        container:\n          type: string\n          description: 'Represents grouping for the league, usually a region/country'\n        allowRoundRobins:\n          type: boolean\n          description: \u003e-\n            Specifies whether you can place parlay round robins on events in\n            this league.\n        leagueSpecialsCount:\n          type: integer\n          format: int32\n          description: Indicates how many specials are in the given league.\n        eventSpecialsCount:\n          type: integer\n          format: int32\n          description: Indicates how many game specials are in the given league.\n        eventCount:\n          type: integer\n          format: int32\n          description: Indicates how many events are in the given league.\n    LineResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            If the value is NOT_EXISTS, than this will be the only parameter in\n            the response. All other params would be empty. [SUCCESS = OK,\n            NOT_EXISTS = Line not offered anymore]\n          enum:\n            - SUCCESS\n            - NOT_EXISTS\n        price:\n          type: number\n          format: double\n          description: Latest price.\n        lineId:\n          type: integer\n          format: int64\n          description: Line identification needed to place a bet.\n        altLineId:\n          type: integer\n          format: int64\n          description: \u003e-\n            This would be needed to place the bet if the handicap is on\n            alternate line, otherwise it will not be populated in the response.\n        team1Score:\n          type: integer\n          format: int32\n          description: Away team score. Applicable to soccer only.\n        team2Score:\n          type: integer\n          format: int32\n          description: Home team score. Applicable to soccer only.\n        team1RedCards:\n          type: integer\n          format: int32\n          description: Team 1 red cards. Applicable to soccer only.\n        team2RedCards:\n          type: integer\n          format: int32\n          description: Team 2 red cards. Applicable to soccer only.\n        maxRiskStake:\n          type: number\n          format: double\n          description: Maximum bettable risk amount.\n        minRiskStake:\n          type: number\n          format: double\n          description: Minimum bettable risk amount.\n        maxWinStake:\n          type: number\n          format: double\n          description: Maximum bettable win amount.\n        minWinStake:\n          type: number\n          format: double\n          description: Minimum bettable win amount.\n        effectiveAsOf:\n          type: string\n          description: Line is effective as of this date and time in UTC.\n    ParlayLinesRequest:\n      type: object\n      properties:\n        oddsFormat:\n          type: string\n          description: \u003e-\n            Odds in the response will be in this format. [American, Decimal,\n            HongKong, Indonesian, Malay]\n          enum:\n            - American\n            - Decimal\n            - HongKong\n            - Indonesian\n            - Malay\n        legs:\n          type: array\n          description: This is a collection of legs\n          items:\n            $ref: '#/components/schemas/ParlayLineRequest'\n    ParlayLineRequest:\n      type: object\n      properties:\n        uniqueLegId:\n          type: string\n          description: \u003e-\n            This unique id of the leg. It used to identify and match leg in the\n            response.\n        eventId:\n          type: integer\n          format: int64\n          description: Id of the event.\n        periodNumber:\n          type: integer\n          format: int32\n          description: \u003e-\n            This represents the period of the match. \n        legBetType:\n          type: string\n          description: \u003e-\n            SPREAD, MONEYLINE,  TOTAL_POINTS and TEAM_TOTAL_POINTS are supported.  \n          enum:\n            - SPREAD\n            - MONEYLINE\n            - TOTAL_POINTS\n            - TEAM_TOTAL_POINTS\n        team:\n          type: string\n          description: \u003e-\n            Chosen team type. This is needed only for SPREAD and MONEYLINE wager\n            types. [Team1, Team2, Draw (MONEYLINE only)]\n          enum:\n            - Team1\n            - Team2\n            - Draw\n        side:\n          type: string\n          description: \u003e-\n            Chosen side. This is needed only for TOTAL_POINTS wager type. \n            [OVER, UNDER]\n          enum:\n            - OVER\n            - UNDER\n        handicap:\n          type: number\n          format: double\n          description: This is needed for SPREAD and TOTAL_POINTS bet type.\n      required:\n        - uniqueLegId\n        - eventId\n        - periodNumber\n        - legBetType\n    ParlayLinesResponseV2:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            Status of the parlay [VALID = Parlay is valid, PROCESSED_WITH_ERROR\n            = Parlay contains error(s)]\n          example: PROCESSED_WITH_ERROR\n          enum:\n            - VALID\n            - PROCESSED_WITH_ERROR\n        error:\n          type: string\n          description: \u003e-\n            INVALID_LEGS. Signifies that one or more legs are invalid. Populated\n            only if status is PROCESSED_WITH_ERROR.\n          example: INVALID_LEGS\n        minRiskStake:\n          type: number\n          format: double\n          description: Minimum allowed stake amount.\n        maxParlayRiskStake:\n          type: number\n          format: double\n          description: Maximum allowed stake amount for parlay bets. For round robin max stake [see FAQ](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-round-robin-max-stake).\n        maxRoundRobinTotalRisk:\n          type: number\n          format: double\n          description: Maximum allowed total stake amount for all the parlay bets in the round robin.\n        maxRoundRobinTotalWin:\n          type: number\n          format: double\n          description: Maximum allowed total win amount for all the parlay bets in the round robin.\n        roundRobinOptionWithOdds:\n          type: array\n          description: \u003e-\n            Provides array with all acceptable Round Robin options with parlay\n            odds for that option.\n          items:\n            $ref: '#/components/schemas/RoundRobinOptionWithOddsV2'\n        legs:\n          type: array\n          description: \u003e-\n            The collection of legs (the format of the object is described\n            below).\n          items:\n            $ref: '#/components/schemas/ParlayLineLeg'\n      required:\n        - status\n    ParlayLinesResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            Status of the parlay [VALID = Parlay is valid, PROCESSED_WITH_ERROR\n            = Parlay contains error(s)]\n          example: PROCESSED_WITH_ERROR\n          enum:\n            - VALID\n            - PROCESSED_WITH_ERROR\n        error:\n          type: string\n          description: \u003e-\n            INVALID_LEGS. Signifies that one or more legs are invalid. Populated\n            only if status is PROCESSED_WITH_ERROR.\n          example: INVALID_LEGS\n        maxRiskStake:\n          type: number\n          format: double\n          description: Maximum allowed stake amount.\n        minRiskStake:\n          type: number\n          format: double\n          description: Minimum allowed stake amount.\n        roundRobinOptionWithOdds:\n          type: array\n          description: \u003e-\n            Provides array with all acceptable Round Robin options with parlay\n            odds for that option.\n          items:\n            $ref: '#/components/schemas/RoundRobinOptionWithOdds'\n        legs:\n          type: array\n          description: \u003e-\n            The collection of legs (the format of the object is described\n            below).\n          items:\n            $ref: '#/components/schemas/ParlayLineLeg'\n      required:\n        - status\n    RoundRobinOptionWithOdds:\n      type: object\n      properties:\n        roundRobinOption:\n          type: string\n          description: |\n            RoundRobinOptions  \n              \n              Parlay = Single parlay that include all wagers (No Round Robin),  \n              TwoLegRoundRobin = Multiple parlays having 2 wagers each (round robin style),  \n              ThreeLegRoundRobin = Multiple parlays having 3 wagers each (round robin style),  \n              FourLegRoundRobin = Multiple parlays having 4 wagers each (round robin style),  \n              FiveLegRoundRobin = Multiple parlays having 5 wagers each (round robin style),  \n              SixLegRoundRobin = Multiple parlays having 6 wagers each (round robin style),  \n              SevenLegRoundRobin = Multiple parlays having 7 wagers each (round robin style),   \n              EightLegRoundRobin = Multiple parlays having 8 wagers each (round robin style)  \n          enum:\n            - Parlay\n            - TwoLegRoundRobin\n            - ThreeLegRoundRobin\n            - FourLegRoundRobin\n            - FiveLegRoundRobin\n            - SixLegRoundRobin\n            - SevenLegRoundRobin\n            - EightLegRoundRobin\n        odds:\n          type: number\n          format: double\n          description: Parlay odds for this option.\n        unroundedDecimalOdds:\n          type: number\n          format: double\n          description: \u003e-\n            Unrounded parlay odds in decimal format to be used for calculations\n            only\n      required:\n        - roundRobinOption\n        - odds\n        - unroundedDecimalOdds\n    RoundRobinOptionWithOddsV2:\n      type: object\n      properties:\n        roundRobinOption:\n          type: string\n          description: |\n            RoundRobinOptions  \n              \n              Parlay = Single parlay that include all wagers (No Round Robin),  \n              TwoLegRoundRobin = Multiple parlays having 2 wagers each (round robin style),  \n              ThreeLegRoundRobin = Multiple parlays having 3 wagers each (round robin style),  \n              FourLegRoundRobin = Multiple parlays having 4 wagers each (round robin style),  \n              FiveLegRoundRobin = Multiple parlays having 5 wagers each (round robin style),  \n              SixLegRoundRobin = Multiple parlays having 6 wagers each (round robin style),  \n              SevenLegRoundRobin = Multiple parlays having 7 wagers each (round robin style),   \n              EightLegRoundRobin = Multiple parlays having 8 wagers each (round robin style)  \n          enum:\n            - Parlay\n            - TwoLegRoundRobin\n            - ThreeLegRoundRobin\n            - FourLegRoundRobin\n            - FiveLegRoundRobin\n            - SixLegRoundRobin\n            - SevenLegRoundRobin\n            - EightLegRoundRobin\n        odds:\n          type: number\n          format: double\n          description: Parlay odds for this option.\n        unroundedDecimalOdds:\n          type: number\n          format: double\n          description: \u003e-\n            Unrounded parlay odds in decimal format to be used for calculations\n            only\n        numberOfBets:\n            type: number\n            format: int\n            description: Number of bets in the roundRobinOption.\n      required:\n        - roundRobinOption\n        - odds\n        - unroundedDecimalOdds    \n    ParlayLineLeg:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            Status of the request. [VALID = Valid leg, PROCESSED_WITH_ERROR =\n            Processed with error]\n          enum:\n            - VALID\n            - PROCESSED_WITH_ERROR\n        errorCode:\n          type: string\n          description: \u003e\n            When Status is PROCESSED_WITH_ERROR, provides a code indicating the\n            specific problem. \n\n              CORRELATED = The leg is correlated with another one,  \n              CANNOT_PARLAY_LIVE_GAME = The wager is placed on Live game,   \n              EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = The event is no longer offered for Parlays,  \n              EVENT_NOT_OFFERED_FOR_PARLAY = The event is not offered for Parlays,  \n              LINE_DOES_NOT_BELONG_TO_EVENT = LineId does not match the EventId specified in the request,  \n              WAGER_TYPE_NO_LONGER_AVAILABLE_FOR_BETTING = Wager Type no longer available for betting, \n              WAGER_TYPE_NOT_VALID_FOR_PARLAY =  Wager Type not valid for parlay,  \n              WAGER_TYPE_CONFLICTS_WITH_OTHER_LEG = Wager Type conflicts with other leg  \n          enum:\n            - CORRELATED\n            - CANNOT_PARLAY_LIVE_GAME\n            - EVENT_NO_LONGER_AVAILABLE_FOR_BETTING\n            - EVENT_NOT_OFFERED_FOR_PARLAY\n            - LINE_DOES_NOT_BELONG_TO_EVENT\n            - WAGER_TYPE_NO_LONGER_AVAILABLE_FOR_BETTING\n            - WAGER_TYPE_NOT_VALID_FOR_PARLAY\n            - WAGER_TYPE_CONFLICTS_WITH_OTHER_LEG\n        legId:\n          type: string\n          description: Echo of the legId from the request.\n        lineId:\n          type: integer\n          format: int64\n          description: Line identification.\n        altLineId:\n          type: integer\n          format: int64\n          description: \u003e-\n            If alternate Line was requested, the Id of that line will be\n            returned.\n        price:\n          type: number\n          format: double\n          description: Price\n        correlatedLegs:\n          type: array\n          description: \u003e-\n            If errorCode is CORRELATED will contain legIds of all correlated\n            legs.\n          items:\n            type: string\n      required:\n        - legId\n        - status\n    LinesRequestTeaser:\n      type: object\n      properties:\n        teaserId:\n          type: integer\n          format: int64\n          description: \u003e-\n            Unique identifier. Teaser details can be retrieved from a call to\n            v1/teaser/groups endpoint.\n        oddsFormat:\n          type: string\n          description: \u003e-\n            Format the odds are returned in.. = [American, Decimal, HongKong,\n            Indonesian, Malay]\n          enum:\n            - American\n            - Decimal\n            - HongKong\n            - Indonesian\n            - Malay\n        legs:\n          type: array\n          description: Collection of Teaser Legs.\n          items:\n            $ref: '#/components/schemas/TeaserLineRequest'\n      required:\n        - teaserId\n        - oddsFormat\n        - legs\n    TeaserLineRequest:\n      type: object\n      properties:\n        legId:\n          type: string\n          description: Client genereated GUID for uniquely identifying the leg.\n        eventId:\n          type: integer\n          format: int64\n          description: Unique identifier.\n        periodNumber:\n          type: integer\n          format: int32\n          description: \u003e-\n            Period of the match that is being bet on. v1/periods endpoint can be\n            used to retrieve all periods for a sport.\n        betType:\n          type: string\n          description: \u003e-\n            Type of bet. Currently only SPREAD and TOTAL_POINTS are supported.\n            [SPREAD, TOTAL_POINTS]\n          enum:\n            - SPREAD\n            - TOTAL_POINTS\n        team:\n          type: string\n          description: 'Team being bet on for a spread line. [Team1, Team2]'\n          enum:\n            - Team1\n            - Team2\n        side:\n          type: string\n          description: 'Side of a total line being bet on. [OVER, UNDER]'\n          enum:\n            - OVER\n            - UNDER\n        handicap:\n          type: number\n          format: double\n          description: Number of points.\n      required:\n        - legId\n        - eventId\n        - periodNumber\n        - betType\n        - handicap\n    TeaserLinesResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            Status of the request. [VALID = Teaser is valid,\n            PROCESSED_WITH_ERROR = Teaser contains one or more errors]\n          example: PROCESSED_WITH_ERROR\n          enum:\n            - VALID\n            - PROCESSED_WITH_ERROR\n        errorCode:\n          type: string\n          description: \u003e\n            When Status is PROCESSED_WITH_ERROR, provides a code indicating the\n            specific problem.  \n               \n              INVALID_LEGS = One or more of the legs is invalid,\n              SAME_EVENT_ONLY_REQUIRED = Teaser specified requires that all legs are from the same event,  \n              TEASER_DISABLED = Teaser has been disabled and cannot be bet on,  \n              TEASER_DOES_NOT_EXIST = The teaser identifier could not be found,  \n              TOO_FEW_LEGS = You do not meet the minimum number of legs requirement for the teaser specified,  \n              TOO_MANY_LEGS = You are above the maximum number of legs for the teaser specified,  \n              UNKNOWN = An unknown error has occurred  \n          enum:\n            - INVALID_LEGS\n            - SAME_EVENT_ONLY_REQUIRED\n            - TEASER_DISABLED\n            - TEASER_DOES_NOT_EXIST\n            - TOO_FEW_LEGS\n            - TOO_MANY_LEGS\n            - UNKNOWN\n        price:\n          type: number\n          format: double\n          description: Price for the bet.\n        minRiskStake:\n          type: number\n          format: double\n          description: Minimum bet amount for WIN_RISK_TYPE.RISK.\n        maxRiskStake:\n          type: number\n          format: double\n          description: Maximum bet amount for WIN_RISK_TYPE.RISK.\n        minWinStake:\n          type: number\n          format: double\n          description: Minimum bet amount for WIN_RISK_TYPE.WIN.\n        maxWinStake:\n          type: number\n          format: double\n          description: Maximum bet amount for WIN_RISK_TYPE.WIN.\n        legs:\n          type: array\n          description: Collection of Teaser Legs from the request.\n          items:\n            $ref: '#/components/schemas/TeaserLineLeg'\n      required:\n        - status\n        - legs\n    TeaserLineLeg:\n      type: object\n      properties:\n        status:\n          type: string\n          description: \u003e-\n            Status of the request. [VALID = Teaser is valid,\n            PROCESSED_WITH_ERROR = Teaser contains error(s)]\n          example: PROCESSED_WITH_ERROR\n          enum:\n            - VALID\n            - PROCESSED_WITH_ERROR\n        errorCode:\n          type: string\n          description: \u003e\n            When Status is PROCESSED_WITH_ERROR, provides a code indicating the\n            specific problem.  \n              \n              EVENT_NOT_FOUND = The event specified could not be found,  \n              POINTS_NO_LONGER_AVAILABLE = The points requested are no longer available. This means that the lines moved,   \n              UNKNOWN = An unknown error has occured,  \n              WAGER_TYPE_NOT_VALID_FOR_TEASER = The specified wager type is not valid for teasers  \n          enum:\n            - EVENT_NOT_FOUND\n            - POINTS_NO_LONGER_AVAILABLE\n            - UNKNOWN\n            - WAGER_TYPE_NOT_VALID_FOR_TEASER\n        legId:\n          type: string\n          description: Echo of the unique id for the leg from the request.\n        lineId:\n          type: integer\n          format: int64\n          description: Line identification.\n      required:\n        - legId\n        - status\n    OddsResponse:\n      type: object\n      properties:\n        sportId:\n          type: integer\n          format: int32\n          description: Same as requested sport Id.\n        last:\n          type: integer\n          format: int64\n          description: \u003e-\n            Use this value for the subsequent requests for since query parameter\n            to get just the changes since previous response.\n        leagues:\n          type: array\n          description: Contains a list of Leagues.\n          items:\n            $ref: '#/components/schemas/OddsLeague'\n    OddsLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: League Id.\n        events:\n          type: array\n          description: Contains a list of events.\n          items:\n            $ref: '#/components/schemas/OddsEvent'\n    OddsEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Event Id.\n        awayScore:\n          type: number\n          format: double\n          description: Away team score. Only for live soccer events.Supported only for full match period (number=0).\n        homeScore:\n          type: number\n          format: double\n          description: Home team score. Only for live soccer events.Supported only for full match period (number=0).\n        awayRedCards:\n          type: integer\n          format: int32\n          description: Away team red cards. Only for live soccer events. Supported only for full match period (number=0).\n        homeRedCards:\n          type: integer\n          format: int32\n          description: Home team red cards. Only for live soccer events.Supported only for full match period (number=0).\n        periods:\n          type: array\n          description: Contains a list of periods.\n          items:\n            $ref: '#/components/schemas/OddsPeriod'\n    OddsPeriod:\n      type: object\n      properties:\n        lineId:\n          type: integer\n          format: int64\n          description: Line Id.\n        number:\n          type: integer\n          format: int32\n          description: \u003e-\n            This represents the period of the match.\n        cutoff:\n          type: string\n          format: date-time\n          description: Period’s wagering cut-off date in UTC.\n        status:\n          type: integer\n          format: int32\n          description: |\n            1 - online, period is open for betting \n            2 - offline, period is not open for betting\n          example: 1\n        maxSpread:\n          type: number\n          format: double\n          description: Maximum spread bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        maxMoneyline:\n          type: number\n          format: double\n          description: Maximum moneyline bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        maxTotal:\n          type: number\n          format: double\n          description: Maximum total points bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        maxTeamTotal:\n          type: number\n          format: double\n          description: Maximum team total points bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        moneylineUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last moneyline update.\n        spreadUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last spread update.  \n        totalUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last total update.\n        teamTotalUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last team total update.  \n        spreads:\n          type: array\n          description: Container for spread odds.\n          items:\n            $ref: '#/components/schemas/OddsSpread'\n        moneyline:\n          $ref: '#/components/schemas/OddsMoneyline'\n        totals:\n          type: array\n          description: Container for team total points.\n          items:\n            $ref: '#/components/schemas/OddsTotal'\n        teamTotal:\n          $ref: '#/components/schemas/OddsTeamTotals'\n    OddsSpread:\n      type: object\n      properties:\n        altLineId:\n          type: integer\n          format: int64\n          description: This is present only if it’s alternative line.\n        hdp:\n          type: number\n          format: double\n          description: Home team handicap.\n        home:\n          type: number\n          format: double\n          description: Home team price.\n        away:\n          type: number\n          format: double\n          description: Away team price.\n        max:\n          type: number\n          format: double\n          nullable: true\n          description: Maximum bet volume. Present only on alternative lines, if set it overides `maxSpread` market limit.  \n    OddsMoneyline:\n      type: object\n      properties:\n        home:\n          type: number\n          format: double\n          description: Away team price\n        away:\n          type: number\n          format: double\n          description: Away team price.\n        draw:\n          type: number\n          format: double\n          description: Draw price. This is present only for events we offer price for draw.\n    OddsTotal:\n      type: object\n      properties:\n        altLineId:\n          type: integer\n          format: int64\n          description: This is present only if it’s alternative line.\n        points:\n          type: number\n          format: double\n          description: Total points.\n        over:\n          type: number\n          format: double\n          description: Over price.\n        under:\n          type: number\n          format: double\n          description: Under price.\n        max:\n          type: number\n          format: double\n          nullable: true\n          description: Maximum bet volume. Present only on alternative lines, if set it overides `maxTotal` market limit.  \n    OddsTeamTotals:\n      type: object\n      properties:\n        home:\n          $ref: '#/components/schemas/OddsTeamTotal'\n        away:\n          $ref: '#/components/schemas/OddsTeamTotal'\n    OddsTeamTotal:\n      type: object\n      properties:\n        points:\n          type: number\n          format: double\n          description: Total points.\n        over:\n          type: number\n          format: double\n          description: Over price.\n        under:\n          type: number\n          format: double\n          description: Under price.\n    TeaserOddsResponse:\n      type: object\n      properties:\n        teaserId:\n          type: integer\n          format: int64\n          description: \u003e-\n            Unique identifier. Teaser details can be retrieved from a call to\n            Get Teaser Groups endpoint.\n        sportId:\n          type: integer\n          format: int32\n          description: \u003e-\n            Unique identifier. Sport details can be retrieved from a call to Get\n            Sports endpoint.\n        leagues:\n          type: array\n          description: A collection of League.\n          items:\n            $ref: '#/components/schemas/TeaserOddsLeague'\n    TeaserOddsLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: \u003e-\n            Unique identifier. League details can be retrieved from a call to\n            Get Leagues endpoint.\n        events:\n          type: array\n          description: A collection of Event.\n          items:\n            $ref: '#/components/schemas/TeaserOddsEvent'\n    TeaserOddsEvent:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Unique identifier.\n        periods:\n          type: array\n          description: \u003e-\n            A collection of periods indicating the period numbers available for\n            betting.\n          items:\n            $ref: '#/components/schemas/TeaserOddsPeriod'\n    TeaserOddsPeriod:\n      type: object\n      properties:\n        number:\n          type: integer\n          format: int32\n          description: \u003e-\n            Period of the match that the request is for. Refer to v1/periods\n            endpoint to retrieve all valid periods for a sport.\n        lineId:\n          type: integer\n          format: int64\n          description: Unique identifier.\n        spreadUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last spread update.  \n        totalUpdatedAt:\n          type: string\n          format: date-time\n          description: Date time of the last total update.          \n        spread:\n          $ref: '#/components/schemas/TeaserOddsSpread'\n        total:\n          $ref: '#/components/schemas/TeaserOddsTotalPoints'\n    TeaserOddsSpread:\n      type: object\n      properties:\n        maxBet:\n          type: number\n          format: double\n          description: Maximum bet amount volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        homeHdp:\n          type: number\n          format: double\n          description: \u003e-\n            Home team handicap. Refer to Get Fixtures endpoint to determine home\n            and away teams.\n        awayHdp:\n          type: number\n          format: double\n          description: \u003e-\n            Away team handicap. Refer to Get Fixtures endpoint to determine home\n            and away teams.\n        altHdp:\n          type: boolean\n          description: \u003e-\n            Whether the spread is offer with alterantive teaser points. Events\n            with alternative teaser points may vary from teaser definition.\n          example: false\n    TeaserOddsTotalPoints:\n      type: object\n      properties:\n        maxBet:\n          type: number\n          format: double\n          description: Maximum bet amount volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n        overPoints:\n          type: number\n          format: double\n          description: Over points.\n        underPoints:\n          type: number\n          format: double\n          description: Under points.\n    SportPeriod:\n      type: object\n      properties:\n        number:\n          type: integer\n          format: int32\n          description: Period Number\n        description:\n          type: string\n          description: Description for the period\n        shortDescription:\n          type: string\n          description: Short description for the period\n        spreadDescription:\n          type: string\n          description: Description for the Spread\n        moneylineDescription:\n          type: string\n          description: Description for the Moneyline\n        totalDescription:\n          type: string\n          description: Description for the Totals\n        team1TotalDescription:\n          type: string\n          description: Description for Team1 Totals\n        team2TotalDescription:\n          type: string\n          description: Description for Team2 Totals\n        spreadShortDescription:\n          type: string\n          description: Short description for the Spread\n        moneylineShortDescription:\n          type: string\n          description: Short description for the Moneyline\n        totalShortDescription:\n          type: string\n          description: Short description for the Totals\n        team1TotalShortDescription:\n          type: string\n          description: Short description for Team1 Totals\n        team2TotalShortDescription:\n          type: string\n          description: Short description for Team2 Totals\n    SportsResponse:\n      type: object\n      properties:\n        sports:\n          type: array\n          description: Sports container.\n          items:\n            $ref: '#/components/schemas/Sport'\n    Sport:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: Sport Id.\n        name:\n          type: string\n          description: Sport name.\n        hasOfferings:\n          type: boolean\n          description: Whether the sport currently has events or specials.\n        leagueSpecialsCount:\n          type: integer\n          format: int32\n          description: Indicates how many specials are in the given sport.\n        eventSpecialsCount:\n          type: integer\n          format: int32\n          description: Indicates how many event specials are in the given sport.\n        eventCount:\n          type: integer\n          format: int32\n          description: Indicates how many events are in the given sport.\n    TeaserGroupsResponse:\n      type: object\n      properties:\n        teaserGroups:\n          type: array\n          description: A collection of TeaserGroups containing available teasers.\n          items:\n            $ref: '#/components/schemas/TeaserGroups'\n    TeaserGroups:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Unique identifier.\n        name:\n          type: string\n          description: Friendly name for the Teaser Group\n        teasers:\n          type: array\n          description: A collection of Teaser.\n          items:\n            $ref: '#/components/schemas/TeaserGroupsTeaser'\n    TeaserGroupsTeaser:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Unique identifier.\n        description:\n          type: string\n          description: Description for the Teaser.\n        sportId:\n          type: integer\n          format: int32\n          description: \u003e-\n            Unique Sport identifier. Sport details can be retrieved from a call\n            to v2/sports endpoint.\n        minLegs:\n          type: integer\n          format: int32\n          description: Minimum number of legs that must be selected.\n        maxLegs:\n          type: integer\n          format: int32\n          description: Maximum number of legs that can be selected.\n        sameEventOnly:\n          type: boolean\n          description: \u003e-\n            If 'true' then all legs must be from the same event, otherwise legs\n            can be from different events.\n        payouts:\n          type: array\n          description: A collection of Payout indicating all possible payout combinations.\n          items:\n            $ref: '#/components/schemas/TeaserGroupsPayout'\n        leagues:\n          type: array\n          description: A collection of Leagues available to the teaser.\n          items:\n            $ref: '#/components/schemas/TeaserGroupsLeague'\n    TeaserGroupsPayout:\n      type: object\n      properties:\n        numberOfLegs:\n          type: integer\n          format: int32\n          description: Number of legs that must be bet and won to get the associated price.\n        price:\n          type: number\n          format: double\n          description: Price of the bet given the specified number of legs.\n    TeaserGroupsLeague:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: \u003e-\n            Unique identifier. League details can be retrieved from a call to\n            v2/leagues endpoint.\n        spread:\n          $ref: '#/components/schemas/TeaserGroupsBetType'\n        total:\n          $ref: '#/components/schemas/TeaserGroupsBetType'\n    TeaserGroupsBetType:\n      type: object\n      properties:\n        points:\n          type: number\n          format: double\n          description: Number of points the line will be teased for the given league.\n    SpecialsFixturesResponse:\n      type: object\n      properties:\n        sportId:\n          format: int32\n          description: Id of a sport for which to retrieve the odds.\n          type: integer\n        last:\n          format: int64\n          description: \u003e-\n            Used for retrieving changes only on subsequent requests. Provide\n            this value as the Since paramter in subsequent calls to only\n            retrieve changes.\n          type: integer\n        leagues:\n          description: Contains a list of Leagues.\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialsFixturesLeague'\n    SpecialsFixturesLeague:\n      type: object\n      properties:\n        id:\n          format: int32\n          description: FixturesLeague Id.\n          type: integer\n        specials:\n          description: A collection of Specials\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialFixture'\n    SpecialFixture:\n      type: object\n      properties:\n        id:\n          format: int64\n          description: Unique Id\n          type: integer\n        betType:\n          description: 'The type [MULTI_WAY_HEAD_TO_HEAD, SPREAD, OVER_UNDER]'\n          enum:\n            - MULTI_WAY_HEAD_TO_HEAD\n            - SPREAD\n            - OVER_UNDER\n          type: string\n        name:\n          description: Name of the special.\n          type: string\n        date:\n          format: date-time\n          description: Date of the special in UTC.\n          type: string\n        cutoff:\n          format: date-time\n          description: Wagering cutoff date in UTC.\n          type: string\n        category:\n          description: The category that the special falls under.\n          type: string\n        units:\n          description: \u003e-\n            Measurment in the context of the special. This is applicable to\n            specials bet type spead and over/under. In a hockey special this\n            could be goals.\n          type: string\n        status:\n          description: \u003e\n           Status of the Special \n\n            O = This is the starting status. It means that the lines\n            are open for betting, \n\n            H = This status indicates that the lines are temporarily unavailable\n            for betting, \n\n            I = This status indicates that one or more lines have a red circle\n            (a lower maximum bet amount)\n          enum:\n            - O\n            - H\n            - I\n          type: string\n        event:\n          $ref: '#/components/schemas/SpecialsFixturesEvent'\n        contestants:\n          description: ContestantLines available for wagering.\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialsFixturesContestant'\n        liveStatus:\n          type: integer\n          format: int32\n          description: \u003e\n            When a special is linked to an event, we will return live status of the event, otherwise it will be 0. \n            \n            0 = No live betting will be offered on this event, \n            \n            1 = Live betting event, \n            \n            2 = Live betting will be offered on this match, but on a different\n            event.  \n            \n            Please note that live delay is applied when placing bets on special with LiveStatus=1 \n          enum:\n            - 0\n            - 1\n            - 2    \n    SpecialsFixturesEvent:\n      type: object\n      description: Optional event asscoaited with the special.\n      properties:\n        id:\n          format: int32\n          description: Event Id\n          type: integer\n        periodNumber:\n          format: int32\n          description: \u003e-\n            The period of the match.\n          type: integer\n        home:\n          type: string\n          description: Home team name.\n        away:\n          type: string\n          description: Away team name.\n    SpecialsFixturesContestant:\n      type: object\n      properties:\n        id:\n          format: int64\n          description: Contestant Id.\n          type: integer\n        name:\n          description: Name of the contestant.\n          type: string\n        rotNum:\n          format: int32\n          description: Rotation Number.\n          type: integer\n    SettledSpecialsResponse:\n      description: Response dto for SettledSpecials request\n      type: object\n      properties:\n        sportId:\n          format: int32\n          description: Id of a sport for which to retrieve the odds.\n          type: integer\n        last:\n          format: int64\n          description: Last index for the settled fixture\n          type: integer\n        leagues:\n          description: List of Leagues.\n          type: array\n          items:\n            $ref: '#/components/schemas/SettledSpecialsLeague'\n    SettledSpecialsLeague:\n      description: League Dto to hold all settled specials for the league\n      type: object\n      properties:\n        id:\n          format: int32\n          description: League Id.\n          type: integer\n        specials:\n          description: A collection of Settled Specials\n          type: array\n          items:\n            $ref: '#/components/schemas/SettledSpecial'\n    SettledSpecial:\n      description: Settled Special\n      type: object\n      properties:\n        id:\n          format: int64\n          description: Id for the Settled Special\n          type: integer\n        status:\n          format: int32\n          description: Status of the settled special.\n          type: integer\n        settlementId:\n          format: int64\n          description: Id for the Settled Special\n          type: integer\n        settledAt:\n          format: date-time\n          description: Settled DateTime\n          type: string\n        cancellationReason:\n          $ref: '#/components/schemas/CancellationReason'\n          description: Cancellation Reason for Special Event\n        contestants:\n          description: A collection of contestants\n          type: array\n          items:\n            $ref: '#/components/schemas/SettledContestants'   \n    SettledContestants:\n      description: Settled Special\n      type: object\n      properties:\n        name: \n          description: Contestant name\n          type: string\n          example: Union Magdalena\n        outcome: \n           description: \u003e\n            Contestant outcomes\n\n            W =  Won,\n\n            L = Lost, \n\n            X = Cancelled,\n            \n            T = Tie,\n            \n            Z = Scratched\n           type: string\n           example: Z\n           enum:\n            - W\n            - L\n            - X\n            - T\n            - Z\n    SpecialLineResponse:\n      type: object\n      properties:\n        status:\n          description: 'Status [SUCCESS = OK, NOT_EXISTS = Line not offered anymore]'\n          enum:\n            - SUCCESS\n            - NOT_EXISTS\n          type: string\n        specialId:\n          format: int64\n          description: Special Id.\n          type: integer\n        contestantId:\n          format: int64\n          description: Contestant Id.\n          type: integer\n        minRiskStake:\n          format: double\n          description: Minimum bettable risk amount.\n          type: number\n        maxRiskStake:\n          format: double\n          description: Maximum bettable risk amount.\n          type: number\n        minWinStake:\n          format: double\n          description: Minimum bettable win amount.\n          type: number\n        maxWinStake:\n          format: double\n          description: Maximum bettable win amount.\n          type: number\n        lineId:\n          format: int64\n          description: Line identification needed to place a bet.\n          type: integer\n        price:\n          format: double\n          description: Latest price.\n          type: number\n        handicap:\n          format: double\n          description: Handicap.\n          type: number\n    SpecialOddsResponse:\n      type: object\n      properties:\n        sportId:\n          format: int32\n          description: Id of a sport for which to retrieve the odds.\n          type: integer\n        last:\n          format: int64\n          description: \u003e-\n            Used for retrieving changes only on subsequent requests. Provide\n            this value as the Since paramter in subsequent calls to only\n            retrieve changes.\n          type: integer\n        leagues:\n          description: Contains a list of Leagues. \n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialOddsLeague'\n    SpecialOddsLeague:\n      type: object\n      properties:\n        id:\n          format: int32\n          description: League id.\n          type: integer\n        specials:\n          description: A collection of FixturesSpecial.\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialOddsSpecial'\n    SpecialOddsSpecial:\n      type: object\n      properties:\n        id:\n          format: int64\n          description: Special Id.\n          type: integer\n        maxBet:\n          format: double\n          description: Maximum bet volume amount. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)\n          type: number\n        contestantLines:\n          description: ContestantLines available for wagering on.\n          type: array\n          items:\n            $ref: '#/components/schemas/SpecialOddsContestantLine'\n    SpecialOddsContestantLine:\n      type: object\n      properties:\n        id:\n          format: int64\n          description: ContestantLine Id.\n          type: integer\n        lineId:\n          format: int64\n          description: Line identifier required for placing a bet.\n          type: integer\n        price:\n          format: double\n          description: Price of the line.\n          type: number\n        handicap:\n          format: double\n          description: 'A number indicating the spread, over/under etc.'\n          type: number\n",
			"canonicalURL": "/github.com/pinnacleapi/openapi-specification@a6e68514bd2ecfa688e6104d9f2a0a7e0c40bef8/-/blob/linesapi-oas.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/pinnacleapi/openapi-specification/blob/a6e68514bd2ecfa688e6104d9f2a0a7e0c40bef8/linesapi-oas.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}