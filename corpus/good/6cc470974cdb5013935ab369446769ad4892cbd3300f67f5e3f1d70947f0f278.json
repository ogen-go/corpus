{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "crucible.local-1.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/crucible.local-1.0.0-swagger.yaml",
			"byteSize": 47395,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: Atlassian\n  title: Crucible\n  version: 1.0.0\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://twitter.com/Atlassian/profile_image?size=original\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.18\n      format: wadl\n      url: https://docs.atlassian.com/fisheye-crucible/latest_backup/wadl/crucible.wadl\n      version: \"1.0\"\n  x-providerName: crucible.local\npaths:\n  /rest-service/auth-v1/login:\n    get:\n      description: \u003e-\n        Get the user authentication token.\n         \n         This is a legacy version of the login request. Using GET is deprecated as your password is likely to appear in logs which record request URLs.\n         Use the POST version instead.\n      operationId: login\n      parameters:\n        - description: the username of the user to get the token for\n          in: query\n          name: userName\n          required: false\n          schema:\n            type: string\n        - description: the password for the user to get the token for\n          in: query\n          name: password\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n    post:\n      description: Get the user authentication token.\n      operationId: loginPost\n      responses:\n        \"200\":\n          description: Successful Response\n  /rest-service/projects-v1:\n    get:\n      description: Get the list of projects that the authenticated user is entitled to\n        access.\n      operationId: getAllProjects\n      parameters:\n        - description: \u003e-\n            if set to true, user data (e.g. allowedReviewers) which is expensive\n             to compute, will not be included in the response data. Defaults to false so allowedReviewers are included in the response.\n          in: query\n          name: excludeAllowedReviewers\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  \"/rest-service/projects-v1/{key}\":\n    get:\n      description: Returns a project description.\n      operationId: getProject\n      parameters:\n        - in: query\n          name: excludeAllowedReviewers\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of a Crucible project.\n        in: path\n        name: key\n        required: true\n        schema:\n          type: string\n  /rest-service/repositories-v1:\n    get:\n      description: Returns a list of all repositories. This includes plugin provided\n        repositories\n      operationId: getAllRepositories\n      parameters:\n        - description: \u003e-\n            filter repositories by the repository key, only repositories of keys\n            containing this value\n             would be returned if value was provided.  Case insensitive.\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: \u003e-\n            filter repositories by enabled flag.  Only enabled/disabled\n            repositories would be returned\n             accordingly if value was provided.\n          in: query\n          name: enabled\n          required: false\n          schema:\n            type: boolean\n        - description: \u003e-\n            filter repositories by its availability.  Only available/unavailable\n            repositories would be returned\n             accordingly if value was provided.\n          in: query\n          name: available\n          required: false\n          schema:\n            type: boolean\n        - description: \u003e-\n            filter repositories by type.  Allowed values: cvs, svn, p4, git, hg,\n            plugin (for light SCM repositories).\n             Parameter can be specified more than once.\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: maximum number of repositories to be returned.\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 10000\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  \"/rest-service/repositories-v1/browse/{repository}/{path}\":\n    get:\n      description: Lists the contents of the specified directory.\n      operationId: browse\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: path to a directory. When path represents a file name, the result is\n          unspecified.\n        in: path\n        name: path\n        required: true\n        schema:\n          type: string\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/change/{repository}/{revision}\":\n    get:\n      description: Represents a particular changeset.\n      operationId: change\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: the SCM revision string.\n        in: path\n        name: revision\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/changes/{repository}/{path}\":\n    get:\n      description: Represents a sorted list of changesets, newest first.\n      operationId: changes\n      parameters:\n        - description: only return change sets after this change set. If omitted there is\n            no restriction.\n          in: query\n          name: oldestCsid\n          required: false\n          schema:\n            type: string\n        - description: include the change set with id \"from\" in the change sets returned.\n          in: query\n          name: includeOldest\n          required: false\n          schema:\n            type: boolean\n        - description: only return change sets before this change set. If omitted there is\n            no restriction.\n          in: query\n          name: newestCsid\n          required: false\n          schema:\n            type: string\n        - description: include the change set with id \"to\" in the change sets returned.\n          in: query\n          name: includeNewest\n          required: false\n          schema:\n            type: boolean\n        - description: return only the newest change sets, to a maximum of maxChangesets.\n          in: query\n          name: max\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: \u003e-\n          only show change sets which contain at least one revision with a path\n          under this path.\n           Changesets with some revisions outside this path still include all revisions.\n           i.e. Revisions outside the path are *not* excluded from the change set.\n        in: path\n        name: path\n        required: true\n        schema:\n          type: string\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/content/{repository}/{revision}/{path}\":\n    get:\n      description: |-\n        Returns the raw content of the specified file revision as a binary\n         stream. No attempt is made to identify the content type and no mime\n         type is provided.\n      operationId: getContents\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the path of a file.\n        in: path\n        name: path\n        required: true\n        schema:\n          type: string\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: the SCM revision string.\n        in: path\n        name: revision\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/history/{repository}/{revision}/{path}\":\n    get:\n      description: Represents the history of a versioned entity.\n      operationId: history\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: |-\n          the path of a file or versioned directory (note that\n           versioned directories are not supported by all SCM plugins).\n        in: path\n        name: path\n        required: true\n        schema:\n          type: string\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: the SCM revision string.\n        in: path\n        name: revision\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/{repository}\":\n    get:\n      operationId: getRepositoryDetails\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/{repository}/svn\":\n    get:\n      description: For backward compatibility we provide this method, but repositories\n        should be referred to just by their key.\n      operationId: getSvnRepositoryDetails\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of a FishEye or Crucible SCM plugin repository\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  \"/rest-service/repositories-v1/{repository}/{revision}/{path}\":\n    get:\n      operationId: details\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: |-\n          the path of a file or versioned directory (note that\n           versioned directories are not supported by all SCM plugins).\n        in: path\n        name: path\n        required: true\n        schema:\n          type: string\n      - description: the key of the Crucible SCM plugin repository.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: the SCM revision string.\n        in: path\n        name: revision\n        required: true\n        schema:\n          type: string\n  /rest-service/reviews-v1:\n    get:\n      operationId: getAllReviews\n      parameters:\n        - description: only return reviews that are in these states.\n          in: query\n          name: state\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n    post:\n      operationId: createReview\n      responses:\n        \"200\":\n          description: Successful Response\n  /rest-service/reviews-v1/details:\n    get:\n      description: \u003e-\n        Retrieves all reviews that are in one of the the specified states. For\n        each review all details are included (review items + comments). The\n         wiki rendered comments will be available via the \u003cmessageAsHtml\u003e element\n      operationId: getAllDetailedReviews\n      parameters:\n        - description: the review states to match.\n          in: query\n          name: state\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  /rest-service/reviews-v1/filter:\n    get:\n      description: To ignore a property, omit it from the query string.\n      operationId: getCustomFilterReviews\n      parameters:\n        - description: a string that will be searched for in review titles.\n          in: query\n          name: title\n          required: false\n          schema:\n            type: string\n        - description: reviews authored by this user.\n          in: query\n          name: author\n          required: false\n          schema:\n            type: string\n        - description: reviews moderated by this user.\n          in: query\n          name: moderator\n          required: false\n          schema:\n            type: string\n        - description: reviews created by this user.\n          in: query\n          name: creator\n          required: false\n          schema:\n            type: string\n        - description: |-\n            comma-separated list of amy of the following strings: (Draft,\n             Approval, Review, Summarize, Closed, Dead, Rejected, Unknown).\n          in: query\n          name: states\n          required: false\n          schema:\n            type: string\n        - description: reviews reviewed by this user.\n          in: query\n          name: reviewer\n          required: false\n          schema:\n            type: string\n        - description: |-\n            whether the value of , ,\n              and  should be OR'd\n             () or AND'd ()\n             together.\n          in: query\n          name: orRoles\n          required: false\n          schema:\n            type: boolean\n        - description: reviews that the specified reviewer has completed.\n          in: query\n          name: complete\n          required: false\n          schema:\n            type: boolean\n        - description: Reviews that all reviewers have completed.\n          in: query\n          name: allReviewersComplete\n          required: false\n          schema:\n            type: boolean\n        - description: reviews for the specified project.\n          in: query\n          name: project\n          required: false\n          schema:\n            type: string\n        - description: reviews with last activity date after the specified timestamp, in\n            milliseconds. Inclusive.\n          in: query\n          name: fromDate\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - description: reviews with last activity date before the specified timestamp, in\n            milliseconds. Inclusive.\n          in: query\n          name: toDate\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n    post:\n      description: |-\n        This method should no longer be used, as it uses a POST for a read-only\n         retrieval operation and is provided for backward compatibility only.\n      operationId: postCustomFilterReviews\n      responses:\n        \"200\":\n          description: Successful Response\n  /rest-service/reviews-v1/filter/details:\n    get:\n      description: To ignore a property, omit it from the query string.\n      operationId: getDetailedCustomFilterReviews\n      parameters:\n        - description: a string that will be searched for in review titles.\n          in: query\n          name: title\n          required: false\n          schema:\n            type: string\n        - description: reviews authored by this user.\n          in: query\n          name: author\n          required: false\n          schema:\n            type: string\n        - description: reviews moderated by this user.\n          in: query\n          name: moderator\n          required: false\n          schema:\n            type: string\n        - description: reviews created by this user.\n          in: query\n          name: creator\n          required: false\n          schema:\n            type: string\n        - description: |-\n            comma-separated list of amy of the following strings: (Draft,\n             Approval, Review, Summarize, Closed, Dead, Rejected, Unknown).\n          in: query\n          name: states\n          required: false\n          schema:\n            type: string\n        - description: reviews reviewed by this user.\n          in: query\n          name: reviewer\n          required: false\n          schema:\n            type: string\n        - description: |-\n            whether the value of , ,\n              and  should be OR'd\n             () or AND'd ()\n             together.\n          in: query\n          name: orRoles\n          required: false\n          schema:\n            type: boolean\n        - description: reviews that the specified reviewer has completed.\n          in: query\n          name: complete\n          required: false\n          schema:\n            type: boolean\n        - description: Reviews that all reviewers have completed.\n          in: query\n          name: allReviewersComplete\n          required: false\n          schema:\n            type: boolean\n        - description: reviews for the specified project.\n          in: query\n          name: project\n          required: false\n          schema:\n            type: string\n        - description: reviews with last activity date after the specified timestamp, in\n            milliseconds. Inclusive.\n          in: query\n          name: fromDate\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - description: reviews with last activity date before the specified timestamp, in\n            milliseconds. Inclusive.\n          in: query\n          name: toDate\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n    post:\n      description: |-\n        This method should no longer be used, as it uses a POST for a read-only\n         retrieval operation and is provided for backward compatibility only.\n      operationId: postDetailedCustomFilterReviews\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/filter/{filter}\":\n    get:\n      description: Get all the reviews which match the given filter, for the current user.\n      operationId: getFilteredReviewsForUser\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: a predefined filter type.\n        in: path\n        name: filter\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/filter/{filter}/details\":\n    get:\n      description: Gets a list of all the reviews that match the specified filter criteria.\n      operationId: getDetailedFilteredReviewsForUser\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: a predefined filter type.\n        in: path\n        name: filter\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/metrics/{version}\":\n    get:\n      description: Get comment metrics metadata for the specified metrics version.\n      operationId: getMetrics\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: a metrics version.\n        in: path\n        name: version\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/search/{repository}\":\n    get:\n      description: Return a list of Reviews which include a particular file.\n      operationId: getReviewsForPath\n      parameters:\n        - description: path to find in reviews\n          in: query\n          name: path\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of the repository to search for file\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/search/{repository}/details\":\n    get:\n      description: Return a list of Reviews which include a particular file.\n      operationId: getReviewsDetailsForPath\n      parameters:\n        - description: path to find in reviews.\n          in: query\n          name: path\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of the repository to search for file.\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n  /rest-service/reviews-v1/versionInfo:\n    get:\n      description: Returns Crucible version information.\n      operationId: getVersionInfo\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  \"/rest-service/reviews-v1/{id}\":\n    delete:\n      description: |-\n        Permanently deletes the specified review.\n         The review must have been abandoned.\n      operationId: deleteReview\n      responses:\n        \"200\":\n          description: Successful Response\n    get:\n      description: \u003e-\n        Get a single review by its permId (e.g. \"CR-45\").\n         If the review does not exist, a 404 is returned.\n         \n         The moderator element may not exist if the review does not have a Moderator.\n      operationId: getReview\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the permId of the review to delete (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/actions\":\n    get:\n      description: |-\n        Get a list of the actions which the current user is allowed to perform\n         on the review.\n      operationId: getAvailableActions\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the permId of the a review (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/addChangeset\":\n    parameters:\n      - description: the perm id of the review to add the changeset to\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: addChangesetToReview\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/addFile\":\n    parameters:\n      - description: the review perma id to add the file\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      operationId: addFile\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/addPatch\":\n    parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Old, non-restful name. Kept for backwards compatibility. Exactly the\n        same as POSTing to /{id}/patch\n      operationId: addPatchReview0\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/close\":\n    parameters:\n      - description: the review perma id to close. it should be in the open state.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Closes the given review with the summary given.\n      operationId: closeReviewWithComment\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments\":\n    get:\n      description: Return all the comments visible to the requesting user for the review.\n      operationId: getAllComments\n      parameters:\n        - description: \u003e-\n            indicate whether to render the wiki text in the returned comments.\n            If set to \"true\", the comments will contain a\n             \u003cmessageAsHtml\u003e element containing the wiki rendered html.\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review perma-id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Add a general comment to the review.\n      operationId: addGeneralComment\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/general\":\n    get:\n      operationId: getGeneralComments\n      parameters:\n        - description: \u003e-\n            indicate whether to render the wiki text in the returned comments.\n            If set to \"true\", the comments will contain a\n             \u003cmessageAsHtml\u003e element containing the wiki rendered html.\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: review perma-id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/comments/markAllAsRead\":\n    parameters:\n      - description: the review perma-id (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: |-\n        For the effective user, mark all comments in a review as read (except\n         those marked as leave unread).\n      operationId: markAllCommentsAsRead\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/versioned\":\n    get:\n      operationId: getVersionedComments\n      parameters:\n        - description: \u003e-\n            indicate whether to render the wiki text in the returned comments.\n            If set to \"true\", the comments will contain a\n             \u003cmessageAsHtml\u003e element containing the wiki rendered html.\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: review perma-id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/comments/{cId}\":\n    delete:\n      description: Deletes the given comment.\n      operationId: removeComment\n      responses:\n        \"200\":\n          description: Successful Response\n    get:\n      description: Gets the given comment.\n      operationId: getComment\n      parameters:\n        - description: true if the wiki text should be rendered into html, into the field\n            \u003cmessageAsHtml\u003e.\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the perma id of the review\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the id of the comment\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: Updates the comment given by the perma id to the new comment posted.\n      operationId: updateComment\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/{cId}/markAsLeaveUnread\":\n    parameters:\n      - description: the review perma id for the comment\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the comment perma id\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: Marks the comment as leave unread to the current user - it will not\n        automatically be marked as read by crucible.\n      operationId: markCommentAsLeaveUnread\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/{cId}/markAsRead\":\n    parameters:\n      - description: the review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the comment perma id.\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: Mark the given comment as read for the user used to make this POST.\n      operationId: markCommentAsRead\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/{cId}/replies\":\n    get:\n      description: Gets the replies to the given comment.\n      operationId: getReplies\n      parameters:\n        - description: true if the comments should also be rendered into html, into the\n            element \u003cmessageAsHtml\u003e\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review perma-id (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the comment to reply to\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: \u003e-\n        Adds a reply to the given comment. This call includes the  repsonse\n        header that\n         contains the URL of the newly created entity.\n      operationId: addReply\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/comments/{cId}/replies/{rId}\":\n    delete:\n      description: Deletes the reply.\n      operationId: removeReply\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: The review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the perma id of the reply to delete\n        in: path\n        name: rId\n        required: true\n        schema:\n          type: string\n      - description: the reply's parent comment perma id\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: Updates a reply with the given newComment.\n      operationId: updateReply\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/complete\":\n    parameters:\n      - description: the review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Completes the review for the current user\n      operationId: completeReview\n      parameters:\n        - description: if {@code ignoreWarnings==true} then condition failure warnings will\n            be ignored\n          in: query\n          name: ignoreWarnings\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/details\":\n    get:\n      description: Returns the specified review.\n      operationId: getDetailedReview\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the permId of the review (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/patch\":\n    get:\n      description: Get a list of patches and their details for the given review\n      operationId: getReviewPatches\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review id to get the patches for\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Add the revisions in a patch to an existing review.\n      operationId: addPatchToReview\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/patch/{patchId}\":\n    delete:\n      description: Removes the patch with the given id from the review. All of the\n        revisions provided by the patch will be removed as well.\n      operationId: removePatch\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the id of the patch (as returned by the '{id}/patch' resource)\n        in: path\n        name: patchId\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - description: the permaId of the review\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/publish\":\n    parameters:\n      - description: the review perma id to look for draft comments\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Publishes all the draft comments of the current user.\n      operationId: publishAllComments\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/publish/{cId}\":\n    parameters:\n      - description: the review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the comment perma id\n        in: path\n        name: cId\n        required: true\n        schema:\n          type: string\n    post:\n      description: publishes the given draft comment.\n      operationId: publishComment\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/remind\":\n    parameters:\n      - description: the review perma id to remind about. it should be in the open state.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Immediately send a reminder to incomplete reviewers about the given\n        review.\n      operationId: remindIncompleteReviewers\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewers\":\n    get:\n      description: Get a list of reviewers in the review given by the permaid id.\n      operationId: getReviewers\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the id of the review to add to\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Adds the given list of reviewers to the review.\n      operationId: addReviewers\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewers/completed\":\n    get:\n      description: Gets a list of completed reviewers.\n      operationId: getCompletedReviewers\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review perma id to retrieve reviewers\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/reviewers/uncompleted\":\n    get:\n      description: Gets a list of reviewers that have not completed the review.\n      operationId: getUncompletedReviewers\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review perma id to retrieve reviewers\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/reviewers/{username}\":\n    delete:\n      description: Removes the reviewer from the review.\n      operationId: removeReviewer\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the perma id of the review\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: the name of the reviewer.\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/reviewitems\":\n    get:\n      description: Returns a list of all the items in a review.\n      operationId: getReviewItemsForReview\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the id of the review (e.g. \"CR-362\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Add the changes between two files in a fisheye repository to the review.\n      operationId: addFisheyeReviewItem\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewitems/details\":\n    parameters:\n      - description: the id of the review (e.g. \"CR-362\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: \u003e-\n        Adds the given review item to the review. This will always create a new\n        review item, even if there is an existing\n         one with the same data in the review (in which case the existing item will be replaced).\n      operationId: addReviewItem\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewitems/revisions\":\n    parameters:\n      - description: the id of the review (e.g. \"CR-362\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Adds a review item for each of the supplied crucibleRevisionData\n        elements.\n      operationId: addReviewItems\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewitems/{riId}\":\n    delete:\n      description: Removes an item from a review.\n      operationId: removeReviewItem\n      responses:\n        \"200\":\n          description: Successful Response\n    get:\n      description: Returns detailed information for a specific review item.\n      operationId: getReviewItem\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: review item id (e.g. \"CFR-6312\").\n        in: path\n        name: riId\n        required: true\n        schema:\n          type: string\n      - description: review id (e.g. \"CR-345\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/reviewitems/{riId}/comments\":\n    get:\n      operationId: getReviewItemsComments\n      parameters:\n        - description: \u003e-\n            indicate whether to render the wiki text in the returned comments.\n            If set to \"true\", the comments will contain a\n             \u003cmessageAsHtml\u003e element containing the wiki rendered html.\n          in: query\n          name: render\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the review item id.\n        in: path\n        name: riId\n        required: true\n        schema:\n          type: string\n      - description: the review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: This call includes the  repsonse header that contains the URL of the\n        newly created entity.\n      operationId: addVersionedComment\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewitems/{riId}/details\":\n    parameters:\n      - description: a valid review item id (e.g. \"CFR-5622\").\n        in: path\n        name: riId\n        required: true\n        schema:\n          type: string\n      - description: a valid review id (e.g. \"CR-345\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    put:\n      description: \u003e-\n        Sets the review item specified by itemId with the given reviewItem. The\n        old review item is discarded. Can only\n         perform this operation if the old review item specified by itemId can be deleted. The old review item's permId is\n         not changed.\n      operationId: setReviewItem\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/reviewitems/{riId}/revisions\":\n    delete:\n      description: \u003e-\n        Removes the revisions given from the review item in the review specified\n        by the id. If the review item has no\n         more revisions left, it is automatically deleted.\n      operationId: removeReviewItemRevisions\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: \u003e-\n          a list of revisions to add to the review item, merging if required. If\n          a revision already exists\n           in the given review item, then the given revision is ignored.\n        in: query\n        name: rev\n        required: false\n        schema:\n          type: string\n      - description: the id of the review item (e.g. \"CFR-5622\").\n        in: path\n        name: riId\n        required: true\n        schema:\n          type: string\n      - description: the id of the review (e.g. \"CR-345\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: \u003e-\n        Adds the given list of revisions to the supplied review item, merging if\n        required. For example, if the review\n         item for  contains revisions 3 to 6, and if:\n      operationId: addReviewItemRevisions\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/transition\":\n    parameters:\n      - description: the review perma-id (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Change the state of a review by performing an action on it.\n      operationId: changeState\n      parameters:\n        - description: \u003e-\n            the string representation of the action to perform. Valid actions\n            are:\n             \n             Note:\n          in: query\n          name: action\n          required: false\n          schema:\n            type: string\n        - description: if  then condition failure warnings will be ignored\n          in: query\n          name: ignoreWarnings\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        \"200\":\n          description: Successful Response\n  \"/rest-service/reviews-v1/{id}/transitions\":\n    get:\n      description: |-\n        Get a list of the actions which the current user can perform on this\n         review, given its current state and the user's permissions.\n      operationId: getAvailableTransitions\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the permId of the a review (e.g. \"CR-45\").\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n  \"/rest-service/reviews-v1/{id}/uncomplete\":\n    parameters:\n      - description: the review perma id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n    post:\n      description: Uncompletes the review for the current user.\n      operationId: uncompleteReview\n      parameters:\n        - description: if {@code ignoreWarnings==true} then condition failure warnings will\n            be ignored\n          in: query\n          name: ignoreWarnings\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        \"200\":\n          description: Successful Response\n  /rest-service/search-v1/reviews:\n    get:\n      description: Search for reviews where the name, description, state or permaId contain\n        the specified term.\n      operationId: getReviewsForTerm\n      parameters:\n        - description: a search term.\n          in: query\n          name: term\n          required: false\n          schema:\n            type: string\n        - description: the maximum number of reviews to return.\n          in: query\n          name: maxReturn\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  /rest-service/search-v1/reviewsForIssue:\n    get:\n      description: Get a list of all reviews that have been linked to the specified JIRA\n        issue key.\n      operationId: getReviewsForIssueKey\n      parameters:\n        - description: a Jira issue key (e.g. \"FOO-3453\")\n          in: query\n          name: jiraKey\n          required: false\n          schema:\n            type: string\n        - description: the maximum number of reviews to return.\n          in: query\n          name: maxReturn\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  /rest-service/users-v1:\n    get:\n      description: Get a list of all the users. You can also ask for a set of users.\n      operationId: getUsers\n      parameters:\n        - description: a username (or a few) to limit the number of returned entries. It\n            will return only existing users.\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters: []\n  \"/rest-service/users-v1/{repository}/{username}\":\n    get:\n      description: Returns the user details of the user mapped to a committer in a\n        repository.\n      operationId: getMappedUser\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the key of the repository\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: the name of the committer\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n  \"/rest-service/users-v1/{username}\":\n    get:\n      description: Returns the user's profile details.\n      operationId: getUserProfile\n      responses:\n        \"200\":\n          description: Successful Response\n    parameters:\n      - description: the username of the user\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\nservers:\n  - url: http://crucible.local/context/\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/crucible.local-1.0.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/crucible.local-1.0.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}