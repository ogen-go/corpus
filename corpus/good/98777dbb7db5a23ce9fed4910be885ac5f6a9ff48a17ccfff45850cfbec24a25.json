{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/72nd/acc"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "doc/api.yaml",
			"byteSize": 35711,
			"content": "openapi: 3.0.0\ninfo:\n  title: ACC REST API Documentation\n  description: \"This API enables to use the plain-text ERP tool Acc via an RESTful interface.\"\n  contact:\n    name: 72nd\n    url: https://github.com/72nd\n    email: msg@frg72.com\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 0.5.2\nbasePath: \"/v1\"\nschemes:\n  - https\ntags:\n  - name: customer\n    x-displayName: Customers\n    description: Someone who buys stuff from your company.\n  - name: employee\n    x-displayName: Employees\n    description: Someone who works for you.\n  - name: expense\n    x-displayName: Expenses\n    description: Represents a payment done by the company or a third party to assure the ongoing of the business.\n  - name: invoice\n    x-displayName: Invoices\n    description: Interact with your invoices.\n  - name: misc_record\n    x-displayName: Miscellaneous Records\n    description: \"Business records which are not invoices or expenses but still important for accounting. Example: A credit note from an insurance.\"\n  - name: project\n    x-displayName: Projects\n    description: A project for a customer.\n  - name: statement\n    x-displayName: Statements\n    description: A bank statement containing transactions on a bank account.\n  - name: expense_model\n    x-displayName: Expense Model\n    description: |\n      ### Expenses\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/expenses\" /\u003e\n\n      ### Expense\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/expense\" /\u003e\n\n  - name: invoice_model\n    x-displayName: Invoice Model\n    description: |\n      ### Invoices\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/invoices\" /\u003e\n\n      ### Invoice\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/invoice\" /\u003e\n\n  - name: misc_record_model\n    x-displayName: Miscellaneous Records Model\n    description: |\n      ### Miscellaneous Records\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/miscRecords\" /\u003e\n\n      ### Miscellaneous Record\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/miscRecord\" /\u003e\n  - name: party_model\n    x-displayName: Party Model (Customer, Employee)\n    description: |\n      ### Parties\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/parties\" /\u003e\n\n      ### Party\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/party\" /\u003e\n  - name: project_model\n    x-displayName: Project Model\n    description: |\n      ### Projects\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/projects\" /\u003e\n\n      ### Project\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/project\" /\u003e\n  - name: statement_model\n    x-displayName: Bank Statement Model\n    description: \n  - name: transaction_model\n    x-displayName: Transaction Model\n    description: \nx-tagGroups:\n  - name: API\n    tags:\n      - customer\n      - employee\n      - expense\n      - invoice\n      - misc_record\n      - project\n      - statement\n  - name: Models\n    tags:\n      - expense_model\n      - invoice_model\n      - misc_record_model\n      - party_model\n      - project_model\n      - statement_model\n      - transaction_model\npaths:\n  /customers:\n    get:\n      tags:\n        - customer\n      summary: Get all customers\n      description: Returns an Array of all customers with the option to query them. \n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Customers. The use of both parameters is currently not supported as this makes no sense (every identifier can only exist once).\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Customers with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever). The use of both parameters is currently not supported as this makes no sense (every identifier can only exist once).\n      responses:\n        200:\n          description: All matching customers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/parties'\n        400:\n          description: Malformed request, also when query and identifier parameters where used at the same time.\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - customer\n      summary: Add a customer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/partyBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Customer failed.\n        500:\n          description: Internal Server Error\n  /customers/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested customer\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - customer\n      summary: Get a customer by ID\n      responses:\n        200:\n          description: A customer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/party'\n        404:\n          description: No Customer with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - customer\n      summary: Update a customer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/partyBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Customer with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - customer\n      summary: Remove a customer\n      responses:\n        200:\n          description: Customer deleted successfully.\n        404:\n          description: No Customer with specified ID found.\n        500:\n          description: Internal Server Error\n  /employees:\n    get:\n      tags:\n        - employee\n      summary: Get all employees\n      description: Returns an Array of all employees with the option to query them. \n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Employees.\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Employees with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).\n      responses:\n        200:\n          description: All matching employees\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/parties'\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - employee\n      summary: Add a employee\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/partyBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Employee failed.\n        500:\n          description: Internal Server Error\n  /employees/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested customer\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - employee\n      summary: Get a employee by ID\n      responses:\n        200:\n          description: A employee\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/party'\n        404:\n          description: No Employee with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - employee\n      summary: Update a employee\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/partyBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Employee with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - employee\n      summary: Remove a employee\n      responses:\n        200:\n          description: Employee deleted successfully.\n        404:\n          description: No Employee with specified ID found.\n        500:\n          description: Internal Server Error\n  /expenses:\n    get:\n      tags:\n        - expense\n      summary: Get all Expenses\n      description: Returns an array of all Expenses which optionally matches to some query.\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Expenses.\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Expenses with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).\n      responses:\n        200:\n          description: All matching Expenses\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/expenses'\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - expense\n      summary: Add a Expense\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/expenseBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Expense failed.\n        500:\n          description: Internal Server Error\n\n  /expenses/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested Expense\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - expense\n      summary: Get a Expense by ID\n      responses:\n        200:\n          description: A expense\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/expense'\n        404:\n          description: No Expense with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - expense\n      summary: Update a Expense\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/expenseBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Expense with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - expense\n      summary: Remove a Expense\n      responses:\n        200:\n          description: Expense deleted successfully.\n        404:\n          description: No Expense with specified ID found.\n        500:\n          description: Internal Server Error\n  /invoices:\n    get:\n      tags:\n        - invoice\n      summary: Get all invoices\n      description: Returns an array of all invoices which optionally matches to some query.\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Invoices.\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Invoices with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).\n      responses:\n        200:\n          description: All matching Invoices\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/invoices'\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - invoice\n      summary: Add a Invoice\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/invoiceBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Invoice failed.\n        500:\n          description: Internal Server Error\n\n  /invoices/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested Invoice\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - invoice\n      summary: Get a Invoice by ID\n      responses:\n        200:\n          description: A Invoice\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/invoice'\n        404:\n          description: No Invoice with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - invoice\n      summary: Update a Invoice\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/invoiceBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Invoice with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - invoice\n      summary: Remove a Invoice\n      responses:\n        200:\n          description: Invoice deleted successfully.\n        404:\n          description: No Invoice with specified ID found.\n        500:\n          description: Internal Server Error\n  /misc_records:\n    get:\n      tags:\n        - misc_record\n      summary: Get all Miscellaneous Records\n      description: Returns an array of all Miscellaneous Records which optionally matches to some query.\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching customers.\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Miscellaneous Records with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).\n      responses:\n        200:\n          description: All matching Miscellaneous Records\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/miscRecords'\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - misc_record\n      summary: Add a Miscellaneous Record\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/miscRecordBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Miscellaneous Record failed.\n        500:\n          description: Internal Server Error\n\n  /misc_records/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested Miscellaneous Record\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - misc_record\n      summary: Get a Miscellaneous Record by ID\n      responses:\n        200:\n          description: A misc\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/miscRecord'\n        404:\n          description: No Miscellaneous Record with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - misc_record\n      summary: Update a Miscellaneous Record\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/miscRecordBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Miscellaneous Record with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - misc_record\n      summary: Remove a Miscellaneous Record\n      responses:\n        200:\n          description: Miscellaneous Record deleted successfully.\n        404:\n          description: No Miscellaneous Record with specified ID found.\n        500:\n          description: Internal Server Error\n  /projects:\n    get:\n      tags:\n        - project\n      summary: Get all Projects\n      description: Returns an array of all Projects which optionally matches to some query.\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: The current version of Acc doesn't support searching in specific parameters it uses a fuzzy search over all advisable fields and returns any matching Projects.\n        - in: query\n          name: identifier\n          schema:\n            type: string\n          description: Search for Projects with a matching identifier. This returns only exact matching elements (no fuzzy search whatsoever).\n      responses:\n        200:\n          description: All matching Projects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/projects'\n        500:\n          description: Internal Server Error\n    post: \n      tags:\n        - project\n      summary: Add a Project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/projectBase'\n      responses:\n        200:\n          description: Added successfully.\n        404:\n          description: Adding Project failed.\n        500:\n          description: Internal Server Error\n  /projects/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Unique ID of the requested Project\n        schema:\n          type: string\n        required: true\n        example: 8b205b3f-33c0-4758-a780-9f2c8119caf6\n    get:\n      tags:\n        - project\n      summary: Get a Project by ID\n      responses:\n        200:\n          description: A project\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        404:\n          description: No Project with specified ID found.\n        500:\n          description: Internal Server Error\n    put:\n      tags:\n        - project\n      summary: Update a Project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/projectBase'\n      responses:\n        200:\n          description: Updated successfully.\n        404:\n          description: No Project with specified ID found.\n        500:\n          description: Internal Server Error\n    delete:\n      tags:\n        - project\n      summary: Remove a Project\n      responses:\n        200:\n          description: Project deleted successfully.\n        404:\n          description: No Project with specified ID found.\n        500:\n          description: Internal Server Error\ncomponents:\n  schemas:\n    parties:\n      type: array\n      description: A collection of multiple parties (customers or employees)\n      items:\n        $ref: '#/components/schemas/party'\n    partyBase:\n      type: object\n      description: A company or person (customer or employee) which is in in some way relevant to the company\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Party, should be human readable\n          example: 'c-5'\n        name:\n          type: string\n          description: Name of the person/company\n          example: Max Mustermann\n        street: \n          type: string\n          description: Name of the street the party residence in\n          example: Society Street\n        streetNr:\n          type: integer\n          description: Street number of party's address\n          example: 49\n        postalCode:\n          type: integer\n          description: ZIP/Postal-Code of the address\n          example: 8000\n        place:\n          type: string\n          description: Name of the place\n          example: Zürich\n        partyType:\n          type: integer\n          description: States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.\n          enum:\n            - 0\n            - 1\n          example: 0\n    party:\n      type: object\n      description: A company or person (customer or employee) which is in in some way relevant to the company\n      properties:\n        id:\n          type: string\n          description: UUID of the object used for the universal identification of an element\n          example: 33eaa67e-3225-4d1e-962f-3c4fdd8b3602\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Invoice, should be human readable\n          example: 'i-28'\n        name:\n          type: string\n          description: Name of the person/company\n          example: Max Mustermann\n        street: \n          type: string\n          description: Name of the street the party residence in\n          example: Society Street\n        streetNr:\n          type: integer\n          description: Street number of party's address\n          example: 49\n        postalCode:\n          type: integer\n          description: ZIP/Postal-Code of the address\n          example: 8000\n        place:\n          type: string\n          description: Name of the place\n          example: Zürich\n        partyType:\n          type: integer\n          description: States whether a party is a customer or a employee. 0 = Employee, 1 = Customer.\n          enum:\n            - 0\n            - 1\n          example: 0\n    expenses:\n      type: array\n      description: A collection of multiple Expenses\n      items:\n        $ref: '#/components/schemas/expense'\n    expenseBase:\n      type: object\n      description: Expense represents a payment done by the company or a third party to assure the ongoing of the business\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Expense, should be human readable\n          example: 'e-69'\n        name:\n          type: string\n          description: Describes meaningful manner the Expense\n          example: HAL 9000\n        amount:\n          type: string\n          pattern: '^\\d*\\.\\d{2}\\s[A-z]{3}$'\n          example: '230.42 CHF'\n          description: The costs of the Expense\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG)\n          example: /path/to/expense.pdf\n        dateOfAccrual:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: Day the obligation emerged\n        billable:\n          type: boolean\n          description: States whether the costs for the Expense will be forwarded to the customer\n        obligedCustomerId:\n          type: string\n          description: Refers to the customer which have to pay the Expense\n          example: c-15\n        advancedByThirdParty:\n          type: boolean\n          description: States whether a third party (employee, etc.) advanced the payment of this Expense for the company\n        advancedThirdPartyId:\n          type: string\n          description: Refers to the third party which advanced the payment\n          example: y-46\n        dateOfSettlement:\n          type: string\n          description: The date of the settlement of the Expense (the company has not to take further actions after this date)\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n        settlementTransactionId:\n          type: string\n          description: Refers to a possible bank transaction which settled the Expense for the company\n        expenseCategory:\n          type: string\n          description: \"Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.\"\n          example: Food\n        paidWithDebit:\n          type: boolean\n          description: States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.\n        internal:\n          type: boolean\n          description: States whether this Expense is for an internal purpose or not.\n        projectId:\n          type: string\n          description: Refers to the associated project.\n    expense:\n      type: object\n      description: Expense represents a payment done by the company or a third party to assure the ongoing of the business\n      properties:\n        id:\n          type: string\n          description: UUID of the object used for the universal identification of an element\n          example: 33eaa67e-3225-4d1e-962f-3c4fdd8b3602\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Expense, should be human readable\n          example: 'e-69'\n        name:\n          type: string\n          description: Describes meaningful manner the Expense\n          example: HAL 9000\n        amount:\n          type: string\n          description: Representation of a amount of money. Cents are appended as a two digit number separated by a dot. The value has to be appended with the three character currency code.\n          pattern: '^\\d*\\.\\d{2}\\s[A-z]{3}$'\n          example: '230.42 CHF'\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG)\n          example: /path/to/expense.pdf\n        dateOfAccrual:\n          type: string\n          description: Day the obligation emerged\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n        billable:\n          type: boolean\n          description: States whether the costs for the Expense will be forwarded to the customer\n        obligedCustomerId:\n          type: string\n          description: Refers to the customer which have to pay the Expense\n          example: c-15\n        advancedByThirdParty:\n          type: boolean\n          description: States whether a third party (employee, etc.) advanced the payment of this Expense for the company\n        advancedThirdPartyId:\n          type: string\n          description: Refers to the third party which advanced the payment\n          example: y-46\n        dateOfSettlement:\n          type: string\n          description: The date of the settlement of the Expense (the company has not to take further actions after this date)\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n        settlementTransactionId:\n          type: string\n          description: Refers to a possible bank transaction which settled the Expense for the company\n        expenseCategory:\n          type: string\n          description: \"Classify the Expense into an Expense category. This information is used to generate the ledger entries for the Expense. Notice: The Expense category has to be existent in acc.\"\n          example: Food\n        paidWithDebit:\n          type: boolean\n          description: States whether the Expense was directly paid with the main account debithether the Expense was directly paid with the main account debit card.\n        internal:\n          type: boolean\n          description: States whether this Expense is for an internal purpose or not.\n        projectId:\n          type: string\n          description: Refers to the associated project.\n    invoices:\n      type: array\n      description: A collection of multiple Invoices\n      items:\n        $ref: '#/components/schemas/invoice'\n    invoiceBase:\n      type: object\n      description: A Invoice sent to a customer.\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Invoice, should be human readable\n          example: 'i-28'\n        name:\n          type: string\n          description: Describes the Invoice.\n          example: Your Invoice\n        amount:\n          description: Outstanding amount.\n          type: string\n          pattern: '^\\d*\\.\\d{2}\\s[A-z]{3}$'\n          example: '230.42 CHF'\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG).\n          example: /path/to/invoice.pdf\n        revoked:\n          type: boolean\n          description: Revoked Invoices are disabled an no longer taken into account.\n        customerId:\n          type: string\n          description: Refers to the customer the Invoice was sent to.\n          example: c-17\n        sendDate:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: Day the Invoice was sent to the customer.\n        dateOfSettlement:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: The date the customer paid the outstanding amount.\n        settlementTransactionId:\n          type: string\n          description: Refers to a possible bank transaction which settled the Invoice for the company.\n          example: t-115\n        projectId:\n          type: string\n          description: Refers to the associated project.\n    invoice:\n      type: object\n      description: A Invoice sent to a customer.\n      properties:\n        id:\n          type: string\n          description: UUID of the object used for the universal identification of an element\n          example: 33eaa67e-3225-4d1e-962f-3c4fdd8b3602\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Invoice, should be human readable\n          example: 'i-28'\n        name:\n          type: string\n          description: Describes the Invoice.\n          example: Your Invoice\n        amount:\n          description: Outstanding amount.\n          type: string\n          pattern: '^\\d*\\.\\d{2}\\s[A-z]{3}$'\n          example: '230.42 CHF'\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG).\n          example: /path/to/invoice.pdf\n        revoked:\n          type: boolean\n          description: Revoked Invoices are disabled an no longer taken into account.\n        customerId:\n          type: string\n          description: Refers to the customer the Invoice was sent to.\n          example: c-17\n        sendDate:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: Day the Invoice was sent to the customer.\n        dateOfSettlement:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: The date the customer paid the outstanding amount.\n        settlementTransactionId:\n          type: string\n          description: Refers to a possible bank transaction which settled the Invoice for the company.\n          example: t-115\n        projectId:\n          type: string\n          description: Refers to the associated project.\n    miscRecords:\n      type: array\n      description: A collection of multiple Miscellaneous Records\n      items:\n        $ref: '#/components/schemas/miscRecord'\n    miscRecordBase:\n      type: object\n      description: \"Business records which are not invoices or expenses but still important for accounting. Example: A credit note from an insurance.\"\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Invoice, should be human readable\n          example: 'i-28'\n        name:\n          type: string\n          description: Name of the Miscellaneous Record.\n          example: Health insurance settlement\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG)\n          example: /path/to/misc-record.pdf\n        date:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: Day the Miscellaneous Record arrived emerged\n        settlementTransactionId:\n          type: string\n          description: Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.\n          example: t-115\n    miscRecord:\n      type: object\n      description: \"Business records which are not invoices or expenses but still important for accounting. Example: A credit note from an insurance.\"\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Miscellaneous Records, should be human readable\n          example: 'm-10'\n        name:\n          type: string\n          description: Name of the Miscellaneous Record.\n          example: Health insurance settlement\n        path:\n          type: string\n          description: The full path to the business record document (PDF or PNG)\n          example: /path/to/misc-record.pdf\n        date:\n          type: string\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          example: 2014-05-23\n          description: Day the Miscellaneous Record arrived emerged\n        settlementTransactionId:\n          type: string\n          description: Refers to an optional transaction which was issued upon the arrival of the Miscellaneous Record. Name of this property is misleading and will be changed in a future version.\n          example: t-115\n    projects:\n      type: array\n      description: A collection of multiple Projects\n      items:\n        $ref: '#/components/schemas/project'\n    projectBase:\n      type: object\n      description: A Project for a specific Customer.\n      properties:\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Project, should be human readable\n          example: 'c-5'\n        name:\n          type: string\n          description: Name of the Project.\n          example: Aktion neue soziale Marktwirtschaft\n        customerId:\n          type: string\n          description: Refers to the customer the project is associated to.\n          example: c-15\n    project:\n      type: object\n      description: A Project for a specific Customer.\n      properties:\n        id:\n          type: string\n          description: UUID of the object used for the universal identification of an element\n          example: 33eaa67e-3225-4d1e-962f-3c4fdd8b3602\n        identifier:\n          type: string\n          description: Unique user-chosen identifier for a Project, should be human readable\n          example: 'c-5'\n        name:\n          type: string\n          description: Name of the Project.\n          example: Aktion neue soziale Marktwirtschaft\n        customerId:\n          type: string\n          description: Refers to the customer the project is associated to.\n          example: c-15\n",
			"canonicalURL": "/github.com/72nd/acc@c76e9cdaad5943a40d1a3799efd4e768fc937fa1/-/blob/doc/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/72nd/acc/blob/c76e9cdaad5943a40d1a3799efd4e768fc937fa1/doc/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}