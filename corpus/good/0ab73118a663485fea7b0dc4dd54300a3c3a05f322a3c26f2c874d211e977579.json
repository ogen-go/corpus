{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/devtron-labs/devtron"
		},
		"file": {
			"name": "plugin-system.yaml",
			"size": 0,
			"path": "specs/plugin-system.yaml",
			"byteSize": 20042,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: \"Plugin System Integration - CI stages\"\n  description: \u003e-\n    Provide functionality to user to use plugins in pre/post ci steps.\n  version: \"1.0.0\"\n\npaths:\n  /orchestrator/plugin/global/list:\n    get:\n      description: Get list of all global plugins\n      operationId: GetAllPluginsAtGlobalLevel\n      parameters:\n        - name: appId\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully return all plugins\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginMetaDataDto'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      description: Get list of all global plugins by filters\n      operationId: GetAllPluginsAtGlobalLevelByFilters\n      requestBody:\n        description: A JSON object containing the filter details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PluginListFilters'\n      responses:\n        '200':\n          description: Successfully return all filtered plugins\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginMetaDataDto'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orchestrator/plugin/global/{pluginId}:\n    get:\n      description: Get plugin by Id\n      operationId: GetPluginById\n      parameters:\n        - name: pluginId\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: appId\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully return detail of the plugin\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    $ref: '#/components/schemas/PluginDetailDto'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orchestrator/plugin/global/list/filter/options:\n    get:\n      description: Get list of all filter options for plugins, i.e. tags and types\n      operationId: GetAllPluginFilterOptions\n      responses:\n        '200':\n          description: Successfully return all filter options\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginFilterOptions'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orchestrator/plugin/global/list/global-variable:\n    get:\n      description: Get list of all global variables\n      operationId: GetAllGlobalVaariables\n      parameters:\n        - name: appId\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully return all operators\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/GlobalVariable'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orchestrator/app/ci-pipeline/patch:\n    post:\n      description: Create CI pipeline\n      operationId: CreateCiPipeline\n      requestBody:\n        description: A JSON object containing the pipelinconfig\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CiPipelineDto'\n      responses:\n        '200':\n          description: Successfully save the pipeline config\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CiPipelineDto'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /orchestrator/app/ci-pipeline/{appId}/{ciPipelineId}:\n    get:\n      description: get CI pipeline details\n      operationId: GetCiPipeline\n      parameters:\n        - name: appId\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: ciPipelineId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successfully get the pipeline config\n          content:\n            application/json:\n              schema:\n                properties:\n                  code:\n                    type: integer\n                    description: status code\n                  status:\n                    type: string\n                    description: status\n                  result:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CiPipelineDto'\n        '400':\n          description: Bad Request. Input Validation error/wrong request body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    PluginDetailDto:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/PluginMetaDataDto'\n        inputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginVariableDto'\n        outputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginVariableDto'\n    PluginMetaDataDto:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        type:\n          type: string\n          example:\n            - \"PRESET\"\n        description:\n          type: string\n        icon:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n            example:\n              - \"GIT\"\n              - \"DATABASE\"\n    PluginVariableDto:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        value:\n          type: integer\n        format:\n          type: string\n          example:\n            - \"STRING\"\n            - \"NUMBER\"\n            - \"BOOL\"\n            - \"DATE\"\n        description:\n          type: string\n        defaultValue:\n          type: string\n        RefVariableUsed:\n          type: boolean\n        variableType:\n          type: string\n          example:\n            - \"GLOBAL\"\n            - \"FROM_PREVIOUS_STEP\"\n        RefVariableStepIndex:\n          type: integer\n        RefVariableName:\n          type: string\n    PluginListFilters:\n      type: object\n      properties:\n        pluginNameContains:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n            example:\n              - \"GIT\"\n        sortBy:\n          type: string\n        sortOrder:\n          type: string\n        pluginType:\n          type: string\n          example:\n            - \"PRESET\"\n            - \"SHARED\"\n    PluginFilterOptions:\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            type: string\n        types:\n          type: array\n          items:\n            type: string\n    GlobalVariable:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        value:\n          type: string\n        format:\n          type: string\n        description:\n          type: string\n    CiPipelineDto:\n      type: object\n      properties:\n        appId:\n          type: integer\n        action:\n          type: integer\n        appWorkflowId:\n          type: integer\n        ciPipeline:\n          $ref: '#/components/schemas/CiPipelineDetails'\n    CiPipelineDetails:\n      type: object\n      properties:\n        id:\n          type: integer\n        active:\n          type: boolean\n        isExternal:\n          type: boolean\n        isManual:\n          type: boolean\n        linkedCount:\n          type: integer\n        name:\n          type: string\n        scanEnabled:\n          type: boolean\n        dockerArgs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DockerArg'\n        externalCiConfig:\n          $ref: '#/components/schemas/ExternalCiConfig'\n        ciMaterial:\n          $ref: '#/components/schemas/CiMaterial'\n        beforeDockerBuildScripts:\n          type: array\n          items:\n            $ref: '#/components/schemas/DockerBuildScript'\n        afterDockerBuildScripts:\n          type: array\n          items:\n            $ref: '#/components/schemas/DockerBuildScript'\n        preBuildStage:\n          $ref: '#/components/schemas/BuildStageDto'\n        postBuildStage:\n          $ref: '#/components/schemas/BuildStageDto'\n    DockerArg:\n      type: object\n      description: map of key value pairs\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    ExternalCiConfig:\n      type: object\n      properties:\n        id:\n          type: integer\n        accessKey:\n          type: string\n        webhookUrl:\n          type: string\n        payload:\n          type: string\n    CiMaterial:\n      type: array\n      items:\n        $ref: '#/components/schemas/CiMaterialDetail'\n    CiMaterialDetail:\n      type: object\n      properties:\n        id:\n          type: integer\n        gitMaterialId:\n          type: integer\n        source:\n          type: object\n          properties:\n            type:\n              type: string\n              example: \"SOURCE_TYPE_BRANCH_FIXED\"\n            value:\n              type: string\n              example: \"master\"\n    DockerBuildScript:\n      type: object\n      properties:\n        id:\n          type: integer\n        index:\n          type: integer\n        name:\n          type: string\n        outputLocation:\n          type: string\n        script:\n          type: string\n    BuildStageDto:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: pipelineStageId(every stage is given a Id)\n        steps:\n          type: array\n          items:\n            $ref: '#/components/schemas/stageStepDetails'\n    stageStepDetails:\n      type: object\n      properties:\n        id:\n          type: integer\n        index:\n          type: integer\n          description: sequence of step in all steps\n        name:\n          type: string\n        description:\n          type: string\n        stepType:\n          type: string\n          example:\n            - \"INLINE\"\n            - \"REF_PLUGIN\"\n        outputDirectoryPath:\n          type: array\n          items:\n            type: string\n        inlineStepDetail:\n          $ref: '#/components/schemas/InlineStepDetail'\n        pluginRefStepDetail:\n          $ref: '#/components/schemas/PluginRefStepDetail'\n    InlineStepDetail:\n      type: object\n      properties:\n        scriptType:\n          type: string\n          example:\n            - \"SHELL\"\n            - \"DOCKERFILE\"\n            - \"CONTAINER_IMAGE\"\n        script:\n          type: string\n        storeScriptAt:\n          type: string\n        dockerFileExists:\n          type: boolean\n        mountPath:\n          type: string\n        mountCodeToContainer:\n          type: boolean\n        mountCodeToContainerPath:\n          type: string\n        mountDirectoryFromHost:\n          type: boolean\n        containerImagePath:\n          type: string\n        imagePullSecretType:\n          type: string\n          example:\n            - \"CONTAINER_REGISTRY\"\n            - \"SECRET_PATH\"\n        imagePullSecret:\n          type: string\n        mountPathMap:\n          type: array\n          items:\n            $ref: '#/components/schemas/MountPathMap'\n        commandArgsMap:\n          type: array\n          items:\n            $ref: '#/components/schemas/CommandArgMap'\n        portMap:\n          type: array\n          items:\n            $ref: '#/components/schemas/PortMap'\n        inputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineStepsVariableDto'\n        outputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PipelineStepsVariableDto'\n        conditionDetails:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConditionDetail'\n    PluginRefStepDetail:\n      type: object\n      properties:\n        pluginId:\n          type: integer\n          description: id of the plugin used in the step\n        inputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginVariableDto'\n        outputVariables:\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginVariableDto'\n        conditionDetails:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConditionDetail'\n    PipelineStepsVariableDto:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        value:\n          type: integer\n        format:\n          type: string\n          example:\n            - \"STRING\"\n            - \"NUMBER\"\n            - \"BOOL\"\n            - \"DATE\"\n        description:\n          type: string\n        defaultValue:\n          type: string\n        refVariableUsed:\n          type: boolean\n        refVariableType:\n          type: string\n          example:\n            - \"GLOBAL\"\n            - \"FROM_PREVIOUS_STEP\"\n            - \"NEW\"\n        refVariableStepIndex:\n          type: integer\n        refVariableName:\n          type: string\n        refVariableStage:\n          type: string\n          example:\n            - \"PRE_CI\"\n            - \"POST_CI\"\n    ConditionDetail:\n      type: object\n      properties:\n        id:\n          type: integer\n        conditionOnVariable:\n          type: string\n          description: name of the variable on which condition is applied\n        conditionOperator:\n          type: string\n        conditionType:\n          type: string\n          example:\n            - \"SKIP\"\n            - \"TRIGGER\"\n            - \"SUCCESS\"\n            - \"FAIL\"\n        conditionalValue:\n          type: string\n    MountPathMap:\n      type: object\n      properties:\n        filePathOnDisk:\n          type: string\n        filePathOnContainer:\n          type: string\n    CommandArgMap:\n      type: object\n      properties:\n        command:\n          type: string\n        args:\n          type: array\n          items:\n            type: string\n    PortMap:\n      type: object\n      properties:\n        portOnLocal:\n          type: integer\n        portOnContainer:\n          type: integer\n    Error:\n      title: Error\n      type: object\n      description: \"A general error schema returned when status is not 200 OK\"\n      properties:\n        code:\n          type: string\n          description: \"a code for this particular error\"\n        message:\n          type: string\n          description: \"a message with further detail\"",
			"canonicalURL": "/github.com/devtron-labs/devtron@62f6101b37819e1ac319a744bbf3438184f0c8d5/-/blob/specs/plugin-system.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/devtron-labs/devtron/blob/62f6101b37819e1ac319a744bbf3438184f0c8d5/specs/plugin-system.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}