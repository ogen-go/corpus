{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sherpair/weather4s"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "auth-service/src/main/resources/openapi.yml",
			"byteSize": 11892,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: Auth-Service API (Weather4s)\n  description: Handles all aspects of user management. From registration via email activation to authentication and authorization for all routes of Weather4s, to the management of the member's profile, used by **Geo** to show the weather of the landing locality, chosen by the user during the registration, every time she logs in.\n  version: 1.0.0\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: ==server-address==\npaths:\n  /account-activation/{tokenId}:\n    get:\n      summary: Member activation\n      description: Confirm the member activation, setting the member to the `active` state. The member can now sign in.\n      parameters:\n        - name: tokenId\n          in: path\n          description: Activation token. The token must be known by the DB.\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Member activated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '404':\n          description: The token or the member-id associated with the token were not found in the DB.\n  /activation-expired:\n    post:\n      summary: Activation token expired\n      description: The activation token has expired (or maybe the email was mistakenly deleted?) before the member could confirm it. The member, in addition to the secret, can ask a new token by using her accountId or her email.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/member-request'\n      responses:\n        '204':\n          description: Token sent\n        '406':\n          description: The member is already `active`\n        '429':\n          description: A new token cannot be sent because the former is more recent than the set time threshold\n  /change-email-confirmed/{tokenId}:\n    get:\n      summary: Confirmation of the email modification\n      description: Confirm the email modification, setting the member to the `active` state. The member can now sign in again.\n      parameters:\n        - name: tokenId\n          in: path\n          description: ChangeEMail token. The token must be known by the DB.\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Member reactivated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '404':\n          description: The token or the member-id associated with the token were not found in the DB.\n  /change-email-expired:\n    post:\n      summary: ChangeEMail token expired\n      description: The ChangeEMail token has expired (or maybe the email was mistakenly deleted?) before the member could confirm it. The member, in addition to the secret, can ask a new token by using her accountId or her email.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/member-request'\n      responses:\n        '204':\n          description: Token sent\n        '406':\n          description: The member is already `active`\n        '429':\n          description: A new token cannot be sent because the former is more recent than the set time threshold\n  /email/{id}:\n    post:\n      tags:\n        - (Any role)\n      summary: Change Member's email\n      description: Change the member's email, as long as the new email is not already taken by another member. The member is left in `non-active` state. To move again to state `active` the new email has to be confirmed via the activation token sent to the new address.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Member-id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: The `secret` property can be specified as an empty array, but still it has to be present in the request.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/member-request'\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Member is not known or is not active\n        '409':\n          description: Email given is already taken by another member\n  /health:\n    get:\n      tags:\n        - (Master role only)\n      summary: DB Health Check\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Current DB status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/healthCheck'\n        '403':\n          description: Forbidden\n  /member/{id}:\n    delete:\n      tags:\n        - (Any role)\n      summary: Member cancellation\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Member-id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Member is not known\n    get:\n      tags:\n        - (Master role only)\n      summary: Member's data\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Member-id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Member's data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '403':\n          description: Forbidden\n        '404':\n          description: Member is not known\n    put:\n      tags:\n        - (Any role)\n      summary: Change Member's data\n      description: In the event of an `accountId` change, the new accountId cannot be already taken by another member. When successful,the response includes a new bearer token (JWT) in the `Authorization` header.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Member-id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/update-request'\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Member is not known or is not active\n        '409':\n          description: AccountId given is already taken by another member\n  /members:\n    get:\n      tags:\n        - (Master role only)\n      summary: Member List\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Member's data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/members'\n        '403':\n          description: Forbidden\n  /secret/{id}:\n    post:\n      tags:\n        - (Any role)\n      summary: Change Member's secret\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          description: Member-id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: The `accountId` property can be specified as an empty string, but still it has to be present in the request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/member-request'\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Member is not known or is not active\n        '406':\n          description: Illegal secret. Must contain uppercase and lowercase letters, digits and special characters\n  /signin:\n    post:\n      summary: Member signin\n      description: Members, in addition to the secret, can sign-in by using their accountId or their email. When successful,the response includes a bearer token (JWT) in the `Authorization` header.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/member-request'\n      responses:\n        '204':\n          description: Sign-in successful\n        '403':\n          description: Member is not `active`\n        '404':\n          description: Member is not known\n  /signup:\n    post:\n      summary: Member registration\n      description: Add a new member, as long as accountId and email given are not already taken by another member. The new member is left in `non-active` state. To move to state `active` the member has to confirm her identity clicking the button (which includes a token) provided by email.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/signup'\n      responses:\n        '201':\n          description: Member added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '406':\n          description: Illegal secret. Must contain uppercase and lowercase letters, digits and special characters\n        '409':\n          description: AccountId and/or email given are already taken by another member\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    healthCheck:\n      type: object\n      required:\n        - attempts\n        - database\n      properties:\n        attempts:\n          type: string\n        database:\n          type: string\n    member:\n      type: object\n      required:\n        - id\n        - accountId\n        - firstName\n        - lastName\n        - email\n        - geoId\n        - country\n        - active\n        - role\n        - createdAt\n      properties:\n        id:\n          type: integer\n          format: int64\n        accountId:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        geoId:\n          type: string\n        country:\n          type: string\n        active:\n          type: boolean\n        role:\n          type: string\n          enum: [Master, Member]\n        createdAt:\n          type: integer\n          format: int64\n    member-request:\n      type: object\n      required:\n        - accountId\n        - secret\n      properties:\n        accountId:\n          type: string\n        secret:\n          type: string\n          format: byte\n    members:\n      type: array\n      items:\n        $ref: \"#/components/schemas/member\"\n    signup:\n      type: object\n      required:\n        - accountId\n        - firstName\n        - lastName\n        - email\n        - geoId\n        - country\n        - secret\n      properties:\n        accountId:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        geoId:\n          type: string\n        country:\n          type: string\n        secret:\n          type: string\n          format: byte\n    update-request:\n      type: object\n      required:\n        - accountId\n        - firstName\n        - lastName\n        - geoId\n        - country\n      properties:\n        accountId:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        geoId:\n          type: string\n        country:\n          type: string\n",
			"canonicalURL": "/github.com/sherpair/weather4s@411ad0dbcfef8fe2e8c2f3d01576197862be4a47/-/blob/auth-service/src/main/resources/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/sherpair/weather4s/blob/411ad0dbcfef8fe2e8c2f3d01576197862be4a47/auth-service/src/main/resources/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}