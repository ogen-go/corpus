{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/linksmart/historical-datastore"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "apidoc/swagger.yaml",
			"byteSize": 26314,
			"content": "openapi: 3.0.3\ninfo:\n  version: v1.0.0-beta.11\n  title: 'LinkSmart Historical Datastore'\n  description: 'LinkSmart Historical Datastore (HDS) is a modular service for time-series data storage. This stores sensor measurements in [SenML](https://tools.ietf.org/html/rfc8428) formats. Data API takes care of creating and accessing sensor measurements. Registry APIs manage metadata corresponding to the sensor measurements'\ntags:\n  - name: registry\n    description: Registry API\n  - name: data\n    description: Data API\n  - name: pki\n    description: Certification Authority API\npaths:\n  /registry/:\n    get:\n      tags:\n        - registry\n      summary: Returns all the time series registrations\n      operationId: findseries\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/perPage'\n        - name: If-Modified-Since\n          in: header\n          description: Conditional request based on date\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registry'\n              examples:\n                TimeSeriesList:\n                  $ref: '#/components/examples/Registry'\n        '304':\n          description: Not Modified (since `If-Modified-Since`)\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n\n    post:\n      deprecated: true\n      tags:\n        - registry\n      summary: Creates new time series\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegistryItem\"\n            examples:\n              TimeSeries:\n                $ref: \"#/components/examples/RegistryItem\"\n      responses:\n        '201':\n          description: Created Successfully\n          headers:\n            Location:\n              description: URL of the newly created TimeSeries\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '405':\n          $ref: '#/components/responses/methodNotAllowed'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /registry/{name}:\n    get:\n      tags:\n        - registry\n      summary: Retrieves a time series registration object\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistryItem'\n              examples:\n                TimeSeries:\n                  $ref: '#/components/examples/RegistryItem'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      tags:\n        - registry\n      summary: Creates or updates the time series registration object\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegistryItem\"\n            example:\n              TimeSeries:\n                $ref: '#/components/examples/RegistryItem'\n      responses:\n        '201':\n          description: Created Successfully\n          headers:\n            Location:\n              description: URL of the newly created TimeSeries\n              schema:\n                type: string\n        '204':\n          description: TimeSeries updated successfully\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '405':\n          $ref: '#/components/responses/methodNotAllowed'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    delete:\n      tags:\n        - registry\n      summary: Deletes the time series registration and corresponding data\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      responses:\n        '204':\n          description: Deletion successful\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '405':\n          $ref: '#/components/responses/methodNotAllowed'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /registry/{type}/{path}/{op}/{value}:\n    get:\n      tags:\n        - registry\n      summary: Filters time series registration objects\n      description: |\n        The filtering API enables filtering based on a given path, operator, and value. Below are few examples:\n        * Get TimeSeries with name:\n          `/registry/one/name/equals/home/bedroom/temperature`\n        * Filter all TimeSeriess with prefix `home` in name:\n          `/registry/many/name/prefix/home`\n        * Filter all TimeSeriess based on address meta field:\n          `/registry/many/meta.address/contains/Bonn`\n      parameters:\n        - name: type\n          in: path\n          description: The expected type of response (one or many)\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: Dot-separated path in the registration JSON\n          required: true\n          schema:\n            type: string\n        - name: op\n          in: path\n          description: One of (equals, prefix, suffix, contains) string comparison operations\n          required: true\n          schema:\n            type: string\n        - name: value\n          in: path\n          description: The intended value/prefix/suffix/substring of the key identified\n            by the path\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/perPage'\n      responses:\n        '200':\n          description: Successful response with matched elements\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registry'\n              examples:\n                TimeSeriesList:\n                  $ref: '#/components/examples/Registry'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /data/:\n    post:\n      tags:\n        - data\n      summary: Submits time series data without specifying the senml name in the url\n      requestBody:\n        required: true\n        description: \"Dataset to be submitted. \\n\\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)\n          object.\\n\"\n        content:\n          application/senml+json:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            examples:\n              SenMLPack:\n                $ref: '#/components/examples/SenMLPack'\n          application/senml+cbor:\n            schema:\n              type: string\n              format: binary\n            example:\n              \"84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5\"\n          application/senml+xml:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            example:\n              \u003csensml xmlns=\"urn:ietf:params:xml:ns:senml\"\u003e\n              \u003csenml bn=\"urn:dev:ow:10e2073a0108006:\" bt=\"1.276020076001e+09\"\n              bu=\"A\" bver=\"5\" n=\"voltage\" u=\"V\" v=\"120.1\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-5\" v=\"1.2\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-4\" v=\"1.3\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-3\" v=\"1.4\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-2\" v=\"1.5\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-1\" v=\"1.6\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" v=\"1.7\"\u003e\u003c/senml\u003e\n              \u003c/sensml\u003e\n          text/vnd.senml.v2+csv:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            example:\n              \"Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \\n\n              946684799,10,dev123temp,degC,22.1,,,,0 \\n\n              946684799,0,dev123room,degC,,kitchen,,, \\n\n              946684800,0,dev123data,degC,,,,abc, \\n\n              946684800,0,dev123ok,degC,,,true,,\"\n      responses:\n        '204':\n          description: Successful response\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '405':\n          $ref: '#/components/responses/methodNotAllowed'\n        '415':\n          $ref: '#/components/responses/unsupportedMediaType'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /data/{names}:\n    post:\n      tags:\n        - data\n      summary: Submits time series data\n      parameters:\n        - $ref: \"#/components/parameters/names\"\n      requestBody:\n        required: true\n        description: \"Dataset to be submitted. \\n\\nThe dataset is a [SenML](https://tools.ietf.org/html/rfc8428)\n          object.\\n\"\n        content:\n          application/senml+json:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            example:\n              SenMLPack:\n                $ref: '#/components/examples/SenMLPack'\n          application/senml+cbor:\n            schema:\n              type: string\n              format: binary\n            example:\n              \"84aa216664657631323322fbc046d5c28f5c28f62364646567432005006474656d7001646465674306fbbff000000000000007fb402400000000000002fb403619999999999a05fb0000000000000000a30064726f6f6d06fbbff000000000000003676b69746368656ea20064646174610863616263a200626f6b04f5\"\n          application/senml+xml:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            example:\n              \u003csensml xmlns=\"urn:ietf:params:xml:ns:senml\"\u003e\n              \u003csenml bn=\"urn:dev:ow:10e2073a0108006:\" bt=\"1.276020076001e+09\"\n              bu=\"A\" bver=\"5\" n=\"voltage\" u=\"V\" v=\"120.1\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-5\" v=\"1.2\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-4\" v=\"1.3\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-3\" v=\"1.4\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-2\" v=\"1.5\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" t=\"-1\" v=\"1.6\"\u003e\u003c/senml\u003e\n              \u003csenml n=\"current\" v=\"1.7\"\u003e\u003c/senml\u003e\n              \u003c/sensml\u003e\n          text/vnd.senml.v2+csv:\n            schema:\n              $ref: '#/components/schemas/SenMLPack'\n            example:\n              \"Time,Update Time,Name,Unit,Value,String Value,Boolean Value,Data Value,Sum \\n\n              946684799,10,dev123temp,degC,22.1,,,,0 \\n\n              946684799,0,dev123room,degC,,kitchen,,, \\n\n              946684800,0,dev123data,degC,,,,abc, \\n\n              946684800,0,dev123ok,degC,,,true,,\"\n      responses:\n        '204':\n          description: Successful response\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '405':\n          $ref: '#/components/responses/methodNotAllowed'\n        '415':\n          $ref: '#/components/responses/unsupportedMediaType'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    get:\n      tags:\n        - data\n      summary: Retrieve the paginated data of the specified time series\n      parameters:\n        - $ref: \"#/components/parameters/names\"\n        - name: from\n          in: query\n          description: Time from which the measurements (chronologically) are expected\n          required: false\n          schema:\n            type: string\n            format: date\n            default: \"0001-01-01T00:00:00Z\"\n        - name: to\n          in: query\n          description: Time upto which the measurements (chronologically) is expected\n          required: false\n          schema:\n            type: string\n            format: date\n            default: \"now (datetime value when query is created)\"\n        - name: sort\n          in: query\n          description: Sorting order of records by timestamps\n          required: false\n          schema:\n            type: string\n            enum: [\"asc\", \"desc\"]\n            default: \"desc\"\n        - name: denormalize\n          in: query\n          description: Fields to be denormalized in the response senml pack.  \"n\" to denormalize name field, \"t\" to denormalize time field  \"u\" to denormalize unit field, \"v\" to denormalize value and \"s\" to denormalize sum fields. Client can pass multiple values as \"denormalize=t\u0026denormalize=n\"\n          required: false\n          schema:\n            type: string\n            enum: [\"n\",\"t\", \"u\",\"v\", \"s\"]\n            example: n\n        - name: count\n          in: query\n          description: Include the total number of entries inside the response. This is useful for pagination such that the client can calculate total pages after the first query. Please use this only in the first query as counting adds additional computation.\n          required: false\n          schema:\n            type: boolean\n        - name: aggr\n          in: query\n          description: Function for computing aggregates on the fly.\n          required: false\n          schema:\n            type: string\n            enum: [\"mean\", \"sum\", \"min\", \"max\", \"count\"]\n            example: mean\n        - name: window\n          in: query\n          description: |\n            Window size for computing aggregates on the fly.\n\n            Valid window size unit suffixes: ns, us, ms, s, m, h\n\n            Fractions may be given as 1.5h or 1h30m\n          required: false\n          schema:\n            type: string\n            example: 10m\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  selfLink:\n                    type: string\n                    description: link to fetch the current response\n                  took:\n                    description: Time taken in seconds\n                    type: number\n                  nextLink:\n                    type: string\n                    description: when the total entries exceed current limit of \"perPage\" (which defaults to 1000), the nextLink has the link to next page\n                  data:\n                    $ref: '#/components/schemas/SenMLPack'\n                  count:\n                    type: integer\n                    description: This field is only present when the GET has parameter `count=true`\n              examples:\n                SenMLPackResponse:\n                  $ref: '#/components/examples/SenMLPackResponse'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    delete:\n      tags:\n        - data\n      summary: Deletes the time series data for a given range\n      parameters:\n        - $ref: \"#/components/parameters/names\"\n        - name: from\n          in: query\n          description: Time from which the measurements (chronologically) are deleted\n          required: false\n          schema:\n            type: string\n            format: date\n            default: \"0001-01-01T00:00:00Z\"\n        - name: to\n          in: query\n          description: Time upto which the measurements (chronologically) are deleted\n          required: false\n          schema:\n            type: string\n            format: date\n            default: \"now (datetime value when query is created)\"\n      responses:\n        '204':\n          description: Successful response\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notfound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  /pki/:\n    post:\n      tags:\n        - pki\n      summary: Creates a certificate signed by HDS for a given CSR and sends in the response.\n      requestBody:\n        description: \"Certificate Signing Request (CSR) generated by the client\"\n        content:\n          application/x-pem-file:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: Successful response with PEM encoded certificate\n          content:\n            application/x-pem-file:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '500':\n          $ref: '#/components/responses/internalServerError'\ncomponents:\n  schemas:\n    Registry:\n      properties:\n        streams: # TODO: change to series\n          type: array\n          items:\n            $ref: '#/components/schemas/RegistryItem'\n        page:\n          type: integer\n        per_page:\n          type: integer\n        total:\n          type: integer\n        dataLink:\n          type: string\n          description: data query endpoint for items in the response\n      required:\n        - name\n    RegistryItem:\n      properties:\n        name:\n          type: string\n          example: \"IZB/C5/125/avgtemp\"\n        source:\n          $ref: \"#/components/schemas/MQTTConnector\"\n        dataType:\n          type: string\n          enum: ['string','float','bool','data']\n        meta:\n          type: object\n          properties:\n            key:\n              type: string\n            value:\n              type: string\n          description: \"A map containing miscellaneous details about the registry entry\"\n        retain:\n          type: object\n          properties:\n            min:\n              type: string\n              example: \"24h\"\n            max:\n              type: string\n              example: \"720h\"\n      required:\n        - name\n    MQTTConnector:\n      type: object\n      required:\n        - uri\n        - topic\n      properties:\n        type:\n          type: string\n          pattern: 'MQTT'\n\n        url: #complete URL including protocols\n          type: string\n          example: \"tcp://example.com:1883\"\n        topic: #topic being used\n          type: string\n          example: \"LS/#/temperature\"\n        qos:\n          type: integer\n        username :\n          type: string\n        password:\n          type: string\n        caFile:\n          type: string\n        certFile:\n          type: string\n        keyFile:\n          type: string\n    SenMLPack:\n      title: SenML Pack\n      type: array\n      items:\n        $ref: '#/components/schemas/SenMLRecord'\n    SenMLRecord:\n      title: SenML Record\n      type: object\n      properties:\n        bn:\n          type: string\n        bt:\n          type: integer\n          format: double\n        bu:\n          type: string\n        bver:\n          type: integer\n        n:\n          type: string\n        t:\n          type: integer\n          format: double\n        u:\n          type: string\n        v:\n          type: number\n          format: double\n        vs:\n          type: string\n        vb:\n          type: boolean\n    Error:\n      description: Problem Details for HTTP APIs (see RFC 7807)\n      required:\n        - title\n        - status\n        - detail\n      properties:\n        status:\n          type: integer\n          format: int32\n          description: The HTTP status code (RFC7231, Section 6)\n        title:\n          type: string\n          description: A short, human-readable summary of the problem type.\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem\n        instance:\n          type: string\n          description:  A URI reference that identifies the specific occurrence of the problem. This is applicable to errors with status \u003e=500. Currently, this link cannot be dereferenced.\n  parameters:\n    name:\n      name: name\n      in: path\n      description: Senml name of the time series\n      required: true\n      schema:\n        type: string\n    names:\n      name: names\n      in: path\n      description: Comma seperated names of the time series\n      required: true\n      schema:\n        type: string\n    page:\n      name: page\n      in: query\n      description: Page number in the pagination\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        default: 1\n    perPage:\n      name: perPage\n      in: query\n      description: Number of entries in each page.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 1000\n        default: 1000\n  responses:\n    badRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    notfound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    methodNotAllowed:\n      description: Method Not Allowed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    conflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    unsupportedMediaType:\n      description: Unsupported Media Type\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    internalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  examples:\n    RegistryItem:\n      summary: TimeSeries\n      value:\n        {\n          \"name\": \"terrace/temperature\",\n          \"source\": {\n            \"type\": \"MQTT\",\n            \"url\": \"ssl://example.com:8883\",\n            \"topic\": \"terrace/temperature\",\n            \"username\": \"*****\",\n            \"password\": \"*****\"\n          },\n          \"dataType\": \"float\",\n          \"unit\": \"Cel\",\n          \"meta\": null,\n        }\n    Registry:\n      summary: Paginated TimeSeries List\n      value:\n        {\n          \"streams\": [\n          {\n            \"name\": \"hall/cat\",\n            \"source\": {\n              \"type\": \"MQTT\",\n              \"url\": \"ssl://example.com:8883\",\n              \"topic\": \"hall/cat\",\n              \"username\": \"*****\",\n              \"password\": \"*****\"\n            },\n            \"dataType\": \"string\",\n            \"meta\": null,\n          },\n          {\n            \"name\": \"kitchen/lamp\",\n            \"source\": {\n              \"type\": \"MQTT\",\n              \"url\": \"ssl://example.com:8883\",\n              \"topic\": \"kitchen/lamp\",\n              \"username\": \"*****\",\n              \"password\": \"*****\"\n            },\n            \"dataType\": \"bool\",\n            \"meta\": null,\n          },\n          {\n            \"name\": \"terrace/temperature\",\n            \"source\": {\n              \"type\": \"MQTT\",\n              \"url\": \"ssl://example.com:8883\",\n              \"topic\": \"terrace/temperature\",\n              \"username\": \"*****\",\n              \"password\": \"*****\"\n            },\n            \"dataType\": \"float\",\n            \"unit\": \"Cel\",\n            \"meta\": null,\n          }\n          ],\n          \"page\": 1,\n          \"per_page\": 100,\n          \"total\": 3,\n          \"dataLink\": \"/data/hall/cat,kitchen/lamp,terrace/temperature\"\n        }\n    SenMLPack:\n      summary: Example SenML pack\n      value:\n        [\n        {\"n\":\"terrace/temperature\",\"u\":\"Cel\",\"t\":1579192670, \"v\":20},\n        {\"n\":\"terrace/temperature\",\"u\":\"Cel\",\"t\":1579192675, \"v\":23.5}\n        ]\n    SenMLPackResponse:\n      summary: Example data response\n      value:\n        {\n          \"selfLink\": \"/data/terrace/temperature?\u0026perPage=1000\u0026sort=desc\u0026from=2020-02-10T17:10:00Z\u0026to=2020-04-10T17:10:30Z\u0026page=1\u0026denormalize=n\u0026denormalize=u\u0026denormalize=v\",\n          \"data\": [\n          {\"bn\": \"terrace/temperature\",\"bu\": \"Cel\",\"bv\": 20.770862545133333,\"t\": 1583861337.5185657},\n          {\"t\": 1583861332.5185533,\"v\": -1.0490685363560743},\n          {\"t\": 1583856342.5184987,\"v\": -0.9880044657724802}\n          ],\n          \"took\": 0.004148714,\n          \"nextLink\": \"/data/terrace/temperature?\u0026perPage=1000\u0026sort=desc\u0026from=2020-02-10T17:10:00Z\u0026to=2020-04-10T17:10:30Z\u0026page=2\u0026denormalize=n\u0026denormalize=u\u0026denormalize=v\"\n        }\n",
			"canonicalURL": "/github.com/linksmart/historical-datastore@1c64c592606d8b6664ebd3bf3edf26d0888e8d3d/-/blob/apidoc/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/linksmart/historical-datastore/blob/1c64c592606d8b6664ebd3bf3edf26d0888e8d3d/apidoc/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}