{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vwt-digital-solutions/restcaperoom"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi_server/openapi/openapi.yaml",
			"byteSize": 6908,
			"content": "openapi: 3.0.2\ninfo:\n  description: REST API Escaperoom\n  title: restcaperoom\n  version: 1.0.0\nservers:\n- url: /\npaths:\n  /:\n    description: The REST endpoint/path used to enter the restcaperoom\n    get:\n      description: Gets the entrance\n      operationId: getentrance\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/door'\n          description: Successful response - returns a `door` entity.\n      summary: Get first door\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage entrance\n  /doors:\n    description: The REST endpoint/path used to list and create zero or more `door`\n      entities.  This path contains a `GET` and `POST` operation to perform the list\n      and create tasks, respectively.\n    get:\n      description: Gets a list of all `door` entities.\n      operationId: getdoors\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/door'\n                type: array\n          description: Successful response - returns an array of `door` entities.\n      summary: List All doors\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage the list of doors.\n  /doors/{doorId}:\n    description: The REST endpoint/path used to get, update, and delete single instances\n      of an `door`.  This path contains `GET`, `PUT`, and `DELETE` operations used\n      to perform the get, update, and delete tasks, respectively.\n    get:\n      description: Gets the details of a single instance of a `door`.\n      operationId: getdoor\n      parameters:\n      - description: A unique identifier for a `door`.\n        explode: false\n        in: path\n        name: doorId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Key to open door\n        name: key\n        in: query\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/door'\n          description: Successful response - returns a single `door`.\n      summary: Get a door\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage a single door.\n  /items:\n    description: The REST endpoint/path used to list and create zero or more `item`\n      entities.  This path contains a `GET` and `POST` operation to perform the list\n      and create tasks, respectively.\n    get:\n      description: Gets a list of all `item` entities.\n      operationId: getitems\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/item'\n                type: array\n          description: Successful response - returns an array of `item` entities.\n      summary: List All items\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage the list of items.\n  /items/{itemId}:\n    description: The REST endpoint/path used to get, update, and delete single instances\n      of an `item`.  This path contains `GET`, `PUT`, and `DELETE` operations used\n      to perform the get, update, and delete tasks, respectively.\n    get:\n      description: Gets the details of a single instance of a `item`.\n      operationId: getitem\n      parameters:\n      - description: A unique identifier for a `item`.\n        explode: false\n        in: path\n        name: itemId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/item'\n          description: Successful response - returns a single `item`.\n      summary: Get a item\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage a single item.\n  /rooms:\n    description: The REST endpoint/path used to list and create zero or more `room`\n      entities.  This path contains a `GET` and `POST` operation to perform the list\n      and create tasks, respectively.\n    get:\n      description: Gets a list of all `room` entities.\n      operationId: getrooms\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/room'\n                type: array\n          description: Successful response - returns an array of `room` entities.\n      summary: List All rooms\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage the list of rooms.\n  /rooms/{roomId}:\n    description: The REST endpoint/path used to get, update, and delete single instances\n      of an `room`.  This path contains `GET`, `PUT`, and `DELETE` operations used\n      to perform the get, update, and delete tasks, respectively.\n    get:\n      description: Gets the details of a single instance of a `room`.\n      operationId: getroom\n      parameters:\n      - description: A unique identifier for a `room`.\n        explode: false\n        in: path\n        name: roomId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/room'\n          description: Successful response - returns a single `room`.\n      summary: Get a room\n      x-openapi-router-controller: openapi_server.controllers.default_controller\n    summary: Path used to manage a single room.\ncomponents:\n  schemas:\n    door:\n      example:\n        panel:\n        - color: green\n      properties:\n        panel:\n          items:\n            $ref: '#/components/schemas/door_panel'\n          type: array\n      title: Root Type for door\n      type: object\n    room:\n      example:\n        items:\n        - i_am_a: table\n          color: brown\n          link: link_to_item\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/room_items'\n          type: array\n      title: Root Type for room\n      type: object\n    item:\n      example:\n        type: table\n        color: green\n      properties:\n        type:\n          type: string\n        color:\n          type: string\n      title: Root Type for item\n      type: object\n    door_panel:\n      properties:\n        color:\n          type: string\n    room_items:\n      properties:\n        type:\n          type: string\n        color:\n          type: string\n        link:\n          type: string\n",
			"canonicalURL": "/github.com/vwt-digital-solutions/restcaperoom@6de12cd4365293c892fe3881766608a54dd984ce/-/blob/openapi_server/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vwt-digital-solutions/restcaperoom/blob/6de12cd4365293c892fe3881766608a54dd984ce/openapi_server/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}