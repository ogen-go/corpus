{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/codesInML/twitter_gram"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 15943,
			"content": "openapi: 3.0.0\ninfo:\n  title: twitterGram\n  description: A social media API influenced greatly by twitter, built with node, typescript, express, sequelize and a lot more.\n  contact: {}\n  version: \"1.0\"\nservers:\n  - url: https://twitter-gram-api.herokuapp.com/api/v1\n    variables: {}\npaths:\n  /users:\n    post:\n      tags:\n        - Auth\n      summary: create user\n      description: This is the route to register a user unto the app.\n      operationId: createuser\n      parameters: []\n      requestBody:\n        description: \"\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createuserrequest\"\n            example:\n              firstName: John\n              lastName: Doe\n              email: johndoe@gmail.com\n              password: someSecret\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n      security: []\n  /sessions:\n    post:\n      tags:\n        - Auth\n      summary: create session\n      description: This endpoint returns a session with contains the access token and refresh token. The api expects an \"x-refresh\" header which must be set to the refresh token that was sent.\n      operationId: createsession\n      parameters: []\n      requestBody:\n        description: \"\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createsessionrequest\"\n            example:\n              email: johndoe@gmail.com\n              password: someSecret\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n      security: []\n    get:\n      tags:\n        - Auth\n      summary: get sessions\n      description: This route gets all the valid sessions that a user has.\n      operationId: getsessions\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    delete:\n      tags:\n        - Auth\n      summary: delete session\n      description: This route deletes all the valid sessions that a user has. Use this route to log out a user.\n      operationId: deletesession\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /posts:\n    post:\n      tags:\n        - Post\n      summary: create post\n      description: You can create post with this route\n      operationId: createpost\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                caption:\n                  type: string\n                file:\n                  type: string\n                  format: binary\n        required: false\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    get:\n      tags:\n        - Post\n      summary: get feeds\n      description: This gets the post of those the user follows. user must follow other's to see their posts\n      operationId: getfeeds\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /posts/user:\n    get:\n      tags:\n        - Post\n      summary: get all user's post\n      description: This route returns all of the user's posts\n      operationId: getalluser'spost\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /posts/{postId}:\n    parameters:\n      - in: path\n        name: postId\n        schema:\n          type: integer\n        required: true\n        description: The post ID\n    get:\n      tags:\n        - Post\n      summary: get a post\n      description: Returns a particular post given the post id as params\n      operationId: getapost\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    delete:\n      tags:\n        - Post\n      summary: delete post\n      description: \u003e-\n        Use this route to delete posts given the post id as params\n\n\n        NB: Only the owner of the post can delete the post\n      operationId: deletepost\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    patch:\n      tags:\n        - Post\n      summary: update post\n      description: \u003e-\n        This route is used to update user's post, it requires the post id and the new post content.\n\n        NB: Only the owner of the post can update the post\n      operationId: updatepost\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n        - name: postId\n          in: path\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            encoding: {}\n            schema:\n              required:\n                - file\n              type: object\n              properties:\n                file:\n                  type: string\n        required: false\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /follow:\n    post:\n      tags:\n        - Follow\n      summary: follow user\n      description: This route is used to follow other users. The id of the user to follow is sent through the request body.\n      operationId: followuser\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        description: \"\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/followuserrequest\"\n            example:\n              followedId: 385395ee-5749-49c7-9338-03d889bf8061\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    delete:\n      tags:\n        - Follow\n      summary: unfollow user\n      description: Like the follow user route, this route requires the id of the user to be unfollowed in the request body.\n      operationId: unfollowuser\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n    get:\n      tags:\n        - Follow\n      summary: get all followers\n      description: You can get all of a user's followers with this route.\n      operationId: getallfollowers\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /follow/following:\n    get:\n      tags:\n        - Follow\n      summary: get all following\n      description: This route returns all the users a particular user follows\n      operationId: getallfollowing\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /comments:\n    post:\n      tags:\n        - Comment\n      summary: create comment\n      description: This route is used to comment on a particular post\n      operationId: createcomment\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                file:\n                  type: string\n                  format: binary\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /comments/{commentId}:\n    parameters:\n      - in: path\n        name: commentId\n        schema:\n          type: integer\n        required: true\n        description: The post ID\n    patch:\n      tags:\n        - Comment\n      summary: edit comment\n      description: \u003e-\n        User's comments are updated with this route.\n\n        Again, only the user that created the comment can update it.\n      operationId: editcomment\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            encoding: {}\n            schema:\n              required:\n                - file\n              type: object\n              properties:\n                file:\n                  type: string\n        required: false\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n\n    delete:\n      tags:\n        - Comment\n      summary: delete comment\n      description: This route is used to delete a comment.\n      operationId: deletecomment\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /likes:\n    get:\n      tags:\n        - Like\n      summary: toggle like on post or comment\n      description: \u003e-\n        This route can be used to like either a post or a comment given the post or comment id as a query params.\n\n\n        You can also hit this endpoint to unlike a post or comment\n      operationId: togglelikeonpostorcomment\n      parameters:\n        - name: commentId\n          in: query\n          description: \"comment id you want to like\"\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: postId\n          in: query\n          description: \"Post id you want to like\"\n          style: form\n          explode: true\n          schema:\n            type: integer\n            format: int32\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /replies:\n    post:\n      tags:\n        - Reply\n      summary: create reply\n      description: \u003e-\n        This route is used to make replies to either a post or a comment, given the postId or commentId as request sent by the body.\n\n\n        Under the hood, a reply is also a comment, so you can use the comment route to update and delete the replies.\n      operationId: createreply\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                file:\n                  type: string\n                  format: binary\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /retweet/{postId}:\n    post:\n      tags:\n        - Retweet\n      summary: create retweet\n      description: Just like the normal retweet on the twitter app, this route is used to make retweets on posts. The post id to be retweeted is sent as a param in the request.\n      operationId: createretweet\n      parameters:\n        - in: path\n          name: postId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the post to retweet\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\n  /posts/image/{postId}:\n    parameters:\n      - in: path\n        name: postId\n        schema:\n          type: string\n        required: true\n        description: The post ID\n    get:\n      tags:\n        - Image\n      summary: get image\n      description: Get an image\n      operationId: getimage\n      parameters:\n        - name: x-refresh\n          in: header\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n      deprecated: false\ncomponents:\n  schemas:\n    createuserrequest:\n      title: createuserrequest\n      required:\n        - firstName\n        - lastName\n        - email\n        - password\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        firstName: Emmanuella\n        lastName: Olubo\n        email: ellaolubo@gmail.com\n        password: someSecret\n    createsessionrequest:\n      title: createsessionrequest\n      required:\n        - email\n        - password\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        email: ellaolubo@gmail.com\n        password: someSecret\n    followuserrequest:\n      title: followuserrequest\n      required:\n        - followedId\n      type: object\n      properties:\n        followedId:\n          type: string\n      example:\n        followedId: 385395ee-5749-49c7-9338-03d889bf8061\n    unfollowuserrequest:\n      title: unfollowuserrequest\n      required:\n        - followedId\n      type: object\n      properties:\n        followedId:\n          type: string\n      example:\n        followedId: f677f4a7-39dd-419c-aa44-dfc66c26170a\n  securitySchemes:\n    httpBearer:\n      type: http\n      scheme: bearer\nsecurity:\n  - httpBearer: []\ntags:\n  - name: Auth\n  - name: Post\n  - name: Follow\n  - name: Comment\n  - name: Like\n  - name: Reply\n  - name: Retweet\n  - name: Image\n",
			"canonicalURL": "/github.com/codesInML/twitter_gram@311f96ddccba190bc56f9e3ac71232e8c56ef7e7/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/codesInML/twitter_gram/blob/311f96ddccba190bc56f9e3ac71232e8c56ef7e7/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}