{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DMGT-TECH/the-usher-server"
		},
		"file": {
			"name": "mockidentityprovider-openapi-spec.yaml",
			"size": 0,
			"path": "mockidentityprovider/mockidentityprovider-openapi-spec.yaml",
			"byteSize": 8262,
			"content": "openapi: 3.0.3\ninfo:\n  title: MockIdentityProvider for The Usher\n  description: |\n    The mock identity provider helps in testing The Usher without dependency on an external identity provider.\n  termsOfService: replace_with_url\n  contact:\n    email: theusher@dmgt.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\nexternalDocs:\n  description: Requirements doc\n  url: https://dmgtcloud-my.sharepoint.com/:w:/g/personal/patryk_laurent_dmgt_com/Eb2xvNe6YA1LqSySXfqgn-4BUjBadg3nX_AEKnmH1xK1XA?e=RletVi\nservers:\n    - url: https://localhost:3002\ntags:\n- name: Server Configuration\n  description: Retrieve server configuration information.\n- name: Token APIs\n  description: Obtain tokens from the server.\n\npaths:\n  /:\n    get:\n      operationId: getConfiguration\n      'x-swagger-router-controller': 'endpoint_root'\n      summary: Returns basic information about this server.\n      description: This endpoint returns a JSON object with URIs for an authenticated persona to obtain an access token, and for an API or client application to get this server's JSON Web Key Set (JWKS).\n      tags:\n        - Server Configuration\n      responses:\n        '200':\n          description: On success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfig'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /.well-known/jwks.json:\n    get:\n      'x-swagger-router-controller': 'endpoint_jwksjson'\n      operationId: getJwks\n      summary: Returns this serverâ€™s public key in JSON Web Key Set (JWKS) format.\n      tags:\n        - Server Configuration\n      description: \"Returns public key information that can be used to verify the signature on tokens (JWTs) issued by this server.\"\n      security: [] # public endpoint\n      responses:\n        '200':\n          description: The JWKS public key server information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jwks'\n        default:\n          $ref: '#/components/responses/Default'\n\n\n  /oauth/token:\n    post:\n      'x-swagger-router-controller': 'endpoint_oauth_token'\n      operationId: issueOauthToken  #  https://tools.ietf.org/html/rfc7523#section-2.1\n      summary: Issue an access token (JWT) containing permissions for the logged-in persona to cover the requested scope, and an ID token.\n      description: |\n        Returns, in the response body (not in the header), a signed JWT access token with the requested scope, if granted.  May return a smaller scope if fewer entitlements were granted to the persona. Requires a signed access token from the Persona Authorization (identity) server (e.g., Auth0, Cognito, or Azure AD) containing the **sub** claim and possibly a **groups** claim if individual personas are not being managed on this server for the given client application.\n\n        Use this endpoint if the scope need to be passed to a publicly accessible resource server.\n      security: [] # public endpoint\n      tags:\n        - Token APIs\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  client_id:\n                    $ref: '#/components/schemas/EntityNameDef'\n                  client_secret:\n                    $ref: '#/components/schemas/EntityNameDef'\n                  audience:\n                    $ref: '#/components/schemas/EntityNameDef'\n                  scope:\n                    $ref: '#/components/schemas/ScopeDef'\n                  username:\n                    $ref: '#/components/schemas/EntityNameDef'\n                  password:\n                    $ref: '#/components/schemas/EntityNameDef'\n                  grant_type:\n                    $ref: '#/components/schemas/GrantTypeDef'\n                  realm:\n                    $ref: '#/components/schemas/EntityNameDef'\n      responses:\n        '200':\n          description: Returns a signed JWTs containing the following JSON payload.\n          headers:\n            X-OAuth-Scopes:\n              schema:\n                type: string\n              description: The scopes the token has authorized.\n            X-Accepted-OAuth-Scopes:\n              schema:\n                type: string\n              description: The scopes that the action checks for.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessAndIdentityTokens'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        default:\n          $ref: '#/components/responses/Default'\n\n\ncomponents:\n\n  schemas:\n#---------------------\n# Entities\n\n# BASE DEFINITIONS\n    EntityNameDef:\n      type: string\n      maxLength: 100\n      pattern: '[0-9a-zA-Z-_:\\*]{1,100}'\n    ScopeDef:\n      type: string\n      pattern: '^((openid|email|read:email)\\b\\s*)*$'  # Only match scope containing these words\n    GrantTypeDef:\n      type: string\n      enum: ['http://auth0.com/oauth/grant-type/password-realm', 'password']\n\n# TOKEN\n#---------------------\n    AccessAndIdentityTokens:\n      type: object\n      additionalProperties: false\n      properties:\n          token_type:\n            type: string\n          id_token:\n            type: string\n          access_token:\n            type: string\n          scope:\n            $ref: '#/components/schemas/ScopeDef'\n          expires_in:\n            type: integer\n            format: int32\n      required:\n        - token_type\n        - access_token\n        - id_token\n        - expires_in\n      example:\n        \"Example Access Identity and Tokens\":\n          token_type: \"Bearer\"\n          access_token: \"OPAQUE TOKEN\"\n          id_token: \"Example Here\"\n          scope: \"openid email\"\n          refresh_token: \"2550f150-b75a-459b-8d98-19961b651892\"\n          expires_in: 3600\n\n# KEYS\n#---------------------\n    Key:\n      type: object\n      additionalProperties: false\n      properties:\n        kty:\n          type: string\n        kid:\n          type: string\n        use:\n          type: string\n        alg:\n          type: string\n        n:\n          type: string\n        e:\n          type: string\n\n# JWKS\n#---------------------\n    Jwks:\n      type: object\n      additionalProperties: false\n      properties:\n        keys:\n          type: array\n          maxItems: 1\n          items:\n            $ref: '#/components/schemas/Key'\n      required:\n        - keys\n      example:\n        {\"keys\":[\n          {\n            \"kid\":\"2020-02-12A\",\n            \"kty\":\"RSA\",\n            \"alg\":\"RS256\",\n            \"use\":\"sig\",\n            \"key_ops\": \"verify\",\n            \"n\":\"2kVO54uvOhDfpn3SUrWA-iaVhlBry6MgiUImReN_4jpYf-aBA-f0mgDmF-708bspPluzGjG6KRDg0UtGl3PpndyZk9PDAxgHbdzY6bRwHLchxB7RW4NYF4CgScqAQ38HbFmUQlQOj-V_Xadb_PSUoV-acM0aGjBig-t5mRSvdoedg1nF9Lt4eJ-1DV0lw-xS5XHKzzS0s9aJtwUuR38Iem3tF5k_o71cvnbKM9T_kQhASn9RGloS9LXgjWsChNiyP0KgMLINdYo3x-hdUbpZCiit0b3fvJQIsX2BXeOcgtEGuTNcxYPdbLMD5wA7TLzSFWrkJ0ZemVAuSilOyfaHdw\",\n            \"e\":\"AQAB\",\n        }]}\n\n# CONFIG\n#---------------------\n    ServerConfig:\n      type: object\n      additionalProperties: false\n      properties:\n        token_endpoint:\n          type: string\n        jwks_uri:\n          type: string\n          format: uri\n      required:\n        - token_endpoint\n        - jwks_uri\n      example:\n        token_endpoint: $SERVER_URL/self/token\n        jwks_uri: $SERVER_URL/.well-known/jwks.json\n\n# RESPONSE SCHEMAS\n#---------------------\n    # Error response body\n    Error:\n      type: object\n      additionalProperties: false\n      properties:\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n        message:\n          type: string\n          pattern: '.'\n      required:\n        - code\n        - message\n\n  responses:\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 401\n            message: Unauthorized\n    Default:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/DMGT-TECH/the-usher-server@bb2768a3c590af57a79088ae4486d7765ba508a1/-/blob/mockidentityprovider/mockidentityprovider-openapi-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/DMGT-TECH/the-usher-server/blob/bb2768a3c590af57a79088ae4486d7765ba508a1/mockidentityprovider/mockidentityprovider-openapi-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}