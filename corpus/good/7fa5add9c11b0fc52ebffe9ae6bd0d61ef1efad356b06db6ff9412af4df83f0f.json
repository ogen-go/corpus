{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/product-apim-tooling"
		},
		"file": {
			"name": "petstore_basic.yaml",
			"size": 0,
			"path": "import-export-cli/specs/v2/testdata/petstore_basic.yaml",
			"byteSize": 4759,
			"content": "---\nopenapi: 3.0.0\nservers:\n- url: https://petstore.swagger.io/v2\n- url: http://petstore.swagger.io/v2\ninfo:\n  description: 'This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For\n    this sample, you can use the api key `special-key` to test the authorization filters.'\n  version: 1.0.0\n  title: Swagger Petstore New\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n- name: pet\n  description: Everything about your Pets\n  externalDocs:\n    description: Find out more\n    url: http://swagger.io\n- name: store\n  description: Access to Petstore orders\n- name: user\n  description: Operations about user\n  externalDocs:\n    description: Find out more about our store\n    url: http://swagger.io\nx-wso2-basePath: /petstore/v1\nx-wso2-production-endpoints:\n  urls:\n  - https://petstore.swagger.io/v2\n  - https://petstore.swagger.io/v2/1\n  - https://petstore.swagger.io/v2/2\nx-wso2-sandbox-endpoints:\n  urls:\n    - https://petstore.swagger.io/v2\n    - https://petstore.swagger.io/v2/1\n    - https://petstore.swagger.io/v2/2\nx-wso2-cors:\n  accessControlAllowOrigins:\n    - test.com\n    - example.com\n  accessControlAllowHeaders:\n    - Authorization\n    - Content-Type\n  accessControlAllowMethods:\n    - GET\n    - PUT\n    - POST\npaths:\n  \"/pet/findByStatus\":\n    get:\n      tags:\n      - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - available\n            - pending\n            - sold\n            default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/Pet\"\n        '400':\n          description: Invalid status value\n  \"/pet/{petId}\":\n    get:\n      tags:\n      - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                \"$ref\": \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Pet\"\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n      - name\n      - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          \"$ref\": \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            \"$ref\": \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: Pet\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            \"$ref\": \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n\n\n\n",
			"canonicalURL": "/github.com/wso2/product-apim-tooling@4d849906c450c817cebbb9c5d0b8c59242211a00/-/blob/import-export-cli/specs/v2/testdata/petstore_basic.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/product-apim-tooling/blob/4d849906c450c817cebbb9c5d0b8c59242211a00/import-export-cli/specs/v2/testdata/petstore_basic.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}