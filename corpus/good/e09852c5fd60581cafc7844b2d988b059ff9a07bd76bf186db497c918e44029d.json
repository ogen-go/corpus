{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ordina-jworks/ordina-jworks.github.io"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/api.yml",
			"byteSize": 5694,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: API for the Ordina conference event\n  version: '1'\n  title: Conference-API\nservers:\n  - url: \"https://your-conference-domain.com/api/\"\n    description: 'Base URL for the API'\npaths:\n  \"/sessions\":\n    get:\n      description: Get all sessions of the conference\n      operationId: getAllSessions\n      tags:\n        - sessions\n      responses:\n        '200':\n          description: \"The list of sessions is returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetAllSessionsResponse\"\n      x-amazon-apigateway-integration:\n        type: \"aws_proxy\"\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllSessionsFunction.Arn}/invocations\n        responses:\n          default:\n            statusCode: 200\n    post:\n      description: Create a new session on the conference\n      operationId: createSession\n      tags:\n        - sessions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Session\"\n      responses:\n        '202':\n          description: \"Session accepted for creation\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateSessionResponse'\n        '400':\n          description: \"You made a bad request\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestResponse'\n      x-amazon-apigateway-integration:\n        type: \"aws_proxy\"\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSessionFunction.Arn}/invocations\n        responses:\n          default:\n            statusCode: 200\n  \"/sessions/{sessionId}\":\n    get:\n      description: Get session of the conference by sessionId\n      operationId: getSessionByUuid\n      tags:\n        - sessions\n      parameters:\n        - in: path\n          name: sessionId\n          schema:\n            type: string\n          required: true\n          description: Numeric ID of the session to get\n      responses:\n        '200':\n          description: \"The session is returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetSessionResponse\"\n      x-amazon-apigateway-integration:\n        type: \"aws_proxy\"\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOneSessionFunction.Arn}/invocations\n        responses:\n          default:\n            statusCode: 200\n\ncomponents:\n  schemas:\n    Session:\n      type: object\n      required:\n        - subject\n        - speaker\n      properties:\n        subject:\n          type: string\n          minLength: 1\n          example: \"API first development with OAS\"\n        duration:\n          type: number\n          description: \"The duration of the session in minutes\"\n          example: 20\n        timestamp:\n          type: string\n          description: \"Timestamp in milliseconds at which this session will take place\"\n          example: \"1570202335000\"\n        speaker:\n          $ref: '#/components/schemas/Speaker'\n    Speaker:\n      type: object\n      required:\n        - firstName\n      properties:\n        firstName:\n          type: string\n          minLength: 1\n          example: \"Nick\"\n        lastName:\n          type: string\n          example: \"Van Hoof\"\n        company:\n          $ref: '#/components/schemas/Company'\n    Company:\n      type: object\n      properties:\n        companyName:\n          type: string\n          example: \"Ordina\"\n        companyCity:\n          type: string\n          description: \"City where the company is based\"\n          example: \"Mechelen\"\n\n    GetAllSessionsResponse:\n      type: object\n      required:\n        - sessions\n      properties:\n        sessions:\n          type: array\n          description: \"List of sessions\"\n          items:\n            $ref: '#/components/schemas/GetSessionResponse'\n\n    GetSessionResponse:\n      required:\n        - sessionId\n      allOf:\n        - $ref: '#/components/schemas/Session'\n        - type: object\n          properties:\n            sessionId:\n              type: string\n              example: \"11313\"\n\n    CreateSessionResponse:\n      required:\n        - sessionId\n      allOf:\n        - $ref: '#/components/schemas/Session'\n        - type: object\n          properties:\n            sessionId:\n              type: string\n              example: \"11313\"\n\n    GenericResponse:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          example: \"This is the response message\"\n\n    NotFoundResponse:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/GenericResponse'\n\n    BadRequestResponse:\n      type: object\n      required:\n        - problems\n      properties:\n        problems:\n          type: array\n          description: list of problems\n          items:\n            $ref: '#/components/schemas/BadRequestItem'\n\n    BadRequestItem:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          minLength: 1\n          description: message that explains what is wrong with this field\n          example: Incorrect data type\n\n  responses:\n    BadRequest:\n      description: Request was not conform the API specifications\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BadRequestResponse'\n",
			"canonicalURL": "/github.com/ordina-jworks/ordina-jworks.github.io@b61721f0281aaf8b9d20c91815dc3b6ec3394ee1/-/blob/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ordina-jworks/ordina-jworks.github.io/blob/b61721f0281aaf8b9d20c91815dc3b6ec3394ee1/img/2019-10-02-API-first-development-with-OpenAPI-or-Swagger/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}