{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/techdozo/microservices"
		},
		"file": {
			"name": "openApi.yaml",
			"size": 0,
			"path": "product-catalog-svc/openApi.yaml",
			"byteSize": 10718,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Product catalog service\n  description: \"The product catalog API supports the creation and management of the product. The API includes the following capabilities and operations:\\n\\n**Create Product**\\n\\n**Update Product**\\n\\n**Delete Product**\\n\\n**Publish Product**\\n\\n\u003cbr\u003e\\nThe following resource collections are offered by this API:\\n\\n\\n**Products** - Products represents collection of products that is sold by seller. \\n\\n\"\n  version: 1.0.0\nservers:\n- url: https://virtserver.swaggerhub.com/techdozo5/product-catalog/1.0.0\n  description: SwaggerHub API Auto Mocking\n- url: localhost:8080\n  description: local\ntags:\n- name: Seller\npaths:\n  /products:\n    get:\n      tags:\n      - Seller\n      summary: Return list of products.\n      description: |\n        Return list of products.\n      operationId: ListProducts\n      parameters:\n      - name: sellerId\n        in: header\n        description: Id of the seller\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      - name: status\n        in: query\n        description: Status of the product (DRAFT,PUBLISHED).\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n        example: DRAFT\n      - name: query\n        in: query\n        description: Free text search query\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n        example: Apple\n      responses:\n        \"200\":\n          description: List of all products based on optional status or free text search query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Products'\n        \"401\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    put:\n      tags:\n      - Seller\n      summary: Update product.\n      description: |\n        Update product.\n      operationId: updateProduct\n      parameters:\n      - name: sellerId\n        in: header\n        description: Id of the seller\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Product'\n      responses:\n        \"200\":\n          description: Product updated successfully.\n        \"201\":\n          description: Product created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductResponse'\n        \"401\":\n          description: Not authorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      tags:\n      - Seller\n      summary: Create a new product.\n      operationId: CreateProduct\n      parameters:\n      - name: sellerId\n        in: header\n        description: Id of the seller.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      requestBody:\n        $ref: '#/components/requestBodies/Product'\n      responses:\n        \"201\":\n          description: Product created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductResponse'\n        \"401\":\n          description: Not authorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /products/{productId}:\n    get:\n      tags:\n      - Seller\n      summary: Retrieve product for a given product Id.\n      description: |\n        API to get product for a given product Id.\n      operationId: getProductByID\n      parameters:\n      - name: productId\n        in: path\n        description: Id of the product.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: number\n      - name: sellerId\n        in: header\n        description: Id of the seller.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      responses:\n        \"200\":\n          description: Return the product for a productId.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        \"401\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"404\":\n          description: Product not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n      - Seller\n      summary: Delete product.\n      description: delete product by id.\n      operationId: DeleteProduct\n      parameters:\n      - name: productId\n        in: path\n        description: Id of product to be deleted\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: number\n      - name: sellerId\n        in: header\n        description: Id of the seller\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      responses:\n        \"200\":\n          description: Successfully deleted product.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"401\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"404\":\n          description: Product not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /products/{productId}/publish:\n    post:\n      tags:\n      - Seller\n      summary: Publish product\n      description: Publish product. After products are published it can be bought by buyer.\n      operationId: PublishProduct\n      parameters:\n      - name: productId\n        in: path\n        description: ID of product.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: number\n      - name: sellerId\n        in: header\n        description: Id of the seller\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: SL-1234-68686755\n      responses:\n        \"200\":\n          description: Product published.\n        \"401\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    Products:\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Product'\n    Product:\n      type: object\n      properties:\n        productId:\n          type: number\n          description: Unique identifier of the product\n          example: 867856\n        productName:\n          type: string\n          description: name of the product\n          example: Apple iPhone 12 (64GB)\n        productStatus:\n          type: string\n          description: status of product\n          example: Draft\n          enum:\n          - Draft\n          - Published\n        description:\n          type: string\n          description: description about the product\n          example: 6.1-inch (15.5 cm diagonal) Super Retina XDR display\n        price:\n          type: string\n          description: price of the product\n          example: 100$\n        model:\n          type: string\n          description: model of the product\n          example: IPhone 12 64GB (PRODUCT)RED\n        brand:\n          type: string\n          description: brand of the product\n          example: Apple\n    ProductRequest:\n      type: object\n      properties:\n        productName:\n          type: string\n          description: name of the product\n          example: Apple iPhone 12 (64GB)\n        description:\n          type: string\n          description: description about the product\n          example: 6.1-inch (15.5 cm diagonal) Super Retina XDR display\n        price:\n          type: string\n          description: price of the product\n          example: 100$\n        model:\n          type: string\n          description: model of the product\n          example: IPhone 12 64GB (PRODUCT)RED\n        brand:\n          type: string\n          description: brand of the product\n          example: Apple\n    ProductResponse:\n      properties:\n        productId:\n          type: number\n          description: Unique identifier of the product\n          example: 68656\n    ErrorResponse:\n      required:\n      - error\n      type: object\n      properties:\n        message:\n          type: string\n          example: error occurred\n  requestBodies:\n    Product:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProductRequest'\n",
			"canonicalURL": "/github.com/techdozo/microservices@656a1a2c1f9e3daf6130a5c016e5bbd1d4b0632f/-/blob/product-catalog-svc/openApi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/techdozo/microservices/blob/656a1a2c1f9e3daf6130a5c016e5bbd1d4b0632f/product-catalog-svc/openApi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}