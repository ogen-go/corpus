{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/allenheltondev/gopher-holes-unlimited"
		},
		"file": {
			"name": "ghu-openapi.yaml",
			"size": 0,
			"path": "ghu-openapi.yaml",
			"byteSize": 41650,
			"content": "openapi: 3.0.0\ninfo:\n  title: Gopher Holes Unlimited API!\n  description: |\n    Gopher Holes Unlimited (GHU) is a fictional website to track gophers, holes, and our continuous quest to keep them from destroying our gardens.\n\n    This API is designed to help illustrate the capabilities of OAS3.0 in a fun and meaningful way.\n\n    ![Gopher Holes Unlimited](https://readysetcloud.s3.amazonaws.com/GHU.png)\n  version: 1.0.0\ntags:\n  - name: Gophers\n    description: The little varmints themselves\n  - name: Holes\n    description: Details on the gopher holes\n\nservers:\n  - description: test\n    url: https://c5dbc886-b8ab-48c8-907b-d34893b05569.mock.pstmn.io\n  - description: prod\n    url: https://api.gopherholesunlimited.com\n\nx-amazon-apigateway-request-validators:\n  Validate All:\n    validateRequestParameters: true\n    validateRequestBody: true\nx-amazon-apigateway-gateway-responses:\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseTemplates:\n      application/json: '{ \"message\": \"$context.error.validationErrorString\" }'\n  INVALID_API_KEY:\n    statusCode: 401\n    responseTemplates:\n      application/json: '{ \"message\": \"Unauthorized\" }'\n\nsecurity:\n  - api_key: []\n\npaths:\n  /gophers:\n    post:\n      summary: Track a new gopher\n      description: When you find a new gopher, add it to the list with this endpoint. Keeping track of gophers helps the community know where they are and where not to plant their garden.\n      tags:\n        - Gophers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Gopher'\n      responses:\n        202:\n          $ref: '#/components/responses/Accepted'\n          x-postman-variables:\n            - type: save\n              name: gopherId\n              path: .id\n        400:\n          $ref: '#/components/responses/BadRequest'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${AddGopherRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Item\": {\n                    \"pk\": { \"S\": \"$context.requestId\"},\n                    \"sk\": { \"S\": \"job#addGopher\"},\n                    \"status\": { \"S\": \"Pending\" },\n                    \"createdDate\": { \"S\": \"$context.requestTime\" },\n                    \"data\": {\n                      \"M\": {\n                        \"name\": { \"S\": \"$input.path('$.name')\" },\n                        \"location\": { \n                          \"M\": {\n                              \"latitude\": { \"S\": \"$input.path('$.location.latitude')\"},\n                              \"longitude\": { \"S\": \"$input.path('$.location.longitude')\"},\n                              \"city\": { \"S\": \"$input.path('$.location.city')\" },\n                              \"state\": { \"S\": \"$input.path('$.location.state')\" },\n                              \"addressLine1\": { \"S\": \"$input.path('$.location.addressLine1')\" },\n                              \"addressLine2\": { \"S\": \"$input.path('$.location.addressLine2')\" }\n                            }\n                          }\n                        },\n                        \"picture\": { \"S\": \"$input.path('$.picture')\"},\n                        \"type\": { \"S\": \"$input.path('$.type')\"},\n                        \"sex\": { \"S\": \"$input.path('$.sex')\"},\n                        \"status\": { \"S\": \"$input.path('$.status')\"},\n                        \"color\": { \"S\": \"$input.path('$.color')\"},\n                        \"comment\": { \"S\": \"$input.path('$.comment')\"}\n                      }\n                    }\n                  },\n                  \"ReturnValues\": \"NONE\"\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 202\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"id\": \"$context.requestId\",\n                  \"links\": [\n                    {\n                      \"method\": \"GET\",\n                      \"url\": \"https://api.gopherholesunlimited.com/jobs/gophers/$context.requestId\"\n                    }\n                  ]\n                }\n    get:\n      summary: View a list of all gophers\n      description: Use this endpoint to view a list of all gophers in the system\n      tags:\n        - Gophers\n      responses:\n        200:\n          description: The request was successful and a list of gophers was returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GopherSummary'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetAllGophersRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/Query\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: never\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"IndexName\": \"GSI1\",\n                  \"KeyConditionExpression\": \"#GSI1PK = :GSI1PK\",\n                  \"ExpressionAttributeNames\": {\n                    \"#GSI1PK\": \"GSI1PK\"\n                  },\n                  \"ExpressionAttributeValues\": {\n                    \":GSI1PK\": { \"S\": \"gopher#\" }\n                  }\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.reponseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"items\": [\n                    #foreach($elem in $inputRoot.Items) {\n                      \"id\": \"$elem.pk.S\",\n                      \"name\": \"$elem.data.M.name.S\",\n                      \"location\": {\n                        #if(\"$elem.data.M.location.M.city.S\" != \"\")\n                        \"city\": \"$elem.data.M.location.M.city.S\",\n                        \"state\": \"$elem.data.M.location.M.state.S\"\n                        #else\n                        \"latitude\": \"$elem.data.M.location.M.latitude.S\",\n                        \"longitude\": \"$elem.data.M.location.M.longitude.S\"\n                        #end\n                      }\n                      #if(\"$elem.data.M.location.M.type.S\" != \"\"),\n                      \"type\": \"$elem.data.M.location.M.type.S\"\n                      #end\n                    }\n                    #end\n                  ]\n                }\n\n  /gophers/{gopherId}/statuses:\n    parameters:\n      - $ref: '#/components/parameters/gopherId'\n    post:\n      summary: Add a new status to a specific gopher\n      description: Sets a the current status of a gopher. All status history is maintained\n      tags:\n        - Gophers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - status\n              properties:\n                status:\n                  type: string\n                  minLength: 1\n                  description: Current status of the gopher\n                  enum: [at large, trapped, deceased, unknown]\n                  example: trapped\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddGopherStatusFunction.Arn}/invocations\n        httpMethod: POST\n        type: aws_proxy\n\n  /gophers/{gopherId}:\n    parameters:\n      - $ref: '#/components/parameters/gopherId'\n    patch:\n      summary: Update a subset of details of a specific gopher\n      description: If updates are necessary to the gopher, provide only the details that have changed\n      tags:\n        - Gophers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateGopher'\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        400:\n          $ref: '#/components/responses/BadRequest'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateGopherFunction.Arn}/invocations\n        httpMethod: POST\n        type: aws_proxy\n    get:\n      parameters:\n        - name: include\n          in: query\n          description: |\n            Denotes what additional information to include in the response. Currently allows: *holes*\n          required: false\n          schema:\n            type: string\n            example: holes\n\n      summary: Get the details of a specific gopher\n      description: To view additional details about a gopher, look them up by their id\n      tags:\n        - Gophers\n      responses:\n        200:\n          description: The requested gopher has been found and the details returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Gopher'\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGopherFunction.Arn}/invocations\n        httpMethod: POST\n        type: aws_proxy\n    delete:\n      summary: Delete a gopher\n      description: Deletes a gopher and all statuses from the system\n      tags:\n        - Gophers\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${DeleteGopherRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/DeleteItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Key\": {\n                    \"pk\": { \"S\": \"$input.params('gopherId')\"},\n                    \"sk\": { \"S\": \"gopher#\"}\n                  },\n                  \"ReturnValues\": \"NONE\"\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 204\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n\n  /jobs/gophers/{gopherId}:\n    parameters:\n      - $ref: '#/components/parameters/gopherId'\n    get:\n      summary: View the details of a job that creates a gopher\n      description: Get the status of an \"Add Gopher\" job\n      tags:\n        - Jobs\n      responses:\n        200:\n          description: The request was successful and the job detail was returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddGopherJobDetail'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetAddGopherJobRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/GetItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: never\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Key\": {\n                    \"pk\": { \"S\": \"$input.params('gopherId')\" },\n                    \"sk\": { \"S\": \"job#addGopher\" }\n                  }\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.reponseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  #if(\"$inputRoot.Item\" != \"\")\n                    \"id\": \"$inputRoot.Item.pk.S\",\n                    \"status\": \"$inputRoot.Item.status.S\",\n                    \"createdDate\": \"$inputRoot.Item.createdDate.S\",\n                    \"input\": {\n                      \"name\": \"$inputRoot.Item.data.M.name.S\",\n                      \"location\": {\n                        #if(\"$inputRoot.Item.data.M.location.M.latitude.S\" != \"\")\n                          \"latitude\": \"$inputRoot.Item.data.M.location.M.latitude.S\",\n                          \"longitude\": \"$inputRoot.Item.data.M.location.M.longitude.S\"\n                        #else\n                          \"city\": \"$inputRoot.Item.data.M.location.M.city.S\",\n                          \"state\": \"$inputRoot.Item.data.M.location.M.state.S\",\n                          \"addressLine1\": \"$inputRoot.Item.data.M.location.M.addressLine1.S\"\n                          #if(\"$inputRoot.Item.data.M.location.M.addressLine2.S\" != \"\")\n                            ,\"addressLine2\": \"$inputRoot.Item.data.M.location.M.addressLine2.S\"\n                          #end\n                        #end\n                      }\n                      #if(\"$inputRoot.Item.data.M.picture\" != \"\")\n                        ,\"picture\": \"$inputRoot.Item.data.M.picture.S\"\n                      #end\n                      #if(\"$inputRoot.Item.data.M.type\" != \"\")\n                        ,\"type\": \"$inputRoot.Item.data.M.type.S\"\n                      #end\n                      #if(\"$inputRoot.Item.data.M.sex\" != \"\")\n                        ,\"sex\": \"$inputRoot.Item.data.M.sex.S\"\n                      #end\n                      #if(\"$inputRoot.Item.data.M.status\" != \"\")\n                        ,\"status\": \"$inputRoot.Item.data.M.status.S\"\n                      #else\n                        ,\"status\": \"unknown\"\n                      #end\n                      #if(\"$inputRoot.Item.data.M.color\" != \"\")\n                        ,\"color\": \"$inputRoot.Item.data.M.color.S\"\n                      #end\n                      #if(\"$inputRoot.Item.data.M.comment\" != \"\")\n                        ,\"comment\": \"$inputRoot.Item.data.M.comment.S\"\n                      #end\n                    }\n                    #if(\"$inputRoot.Item.result\" != \"\")\n                      ,\"result\": {\n                        \"gopherId\": \"$inputRoot.Item.result.M.gopherId.S\",\n                        \"linkedHoles\": \"$inputRoot.Item.result.M.linkedHoles.N\"\n                      }\n                    #end\n                    #if(\"$inputRoot.Item.error\" != \"\")\n                      ,\"error\": \"$inputRoot.Item.error.S\"\n                    #end\n                  #else\n                    #set($context.responseOverride.status = 404)\n                    \"message\": \"A job with the provided id could not be found\"\n                  #end\n                }\n\n  /holes:\n    post:\n      summary: Track a new hole\n      description: When you find a new gopher hole, add it into the system via this endpoint\n      tags:\n        - Holes\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Hole'\n      responses:\n        201:\n          $ref: '#/components/responses/Created'\n          x-postman-variables:\n            - type: save\n              name: holdId\n              path: .id\n        400:\n          $ref: '#/components/responses/BadRequest'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${AddHoleRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                #set($epochDate = $context.requestTimeEpoch / 1000 )\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Item\":{\n                    \"pk\": { \"S\": \"$context.requestId\"},\n                    \"sk\": { \"S\": \"hole#\"},\n                    \"GSI1PK\": { \"S\": \"hole#\"},\n                    \"GSI1SK\": { \"S\": \"$epochDate\"},\n                    #if(\"$input.path('$.location.latitude')\" != \"\")\n                      \"GSI2PK\": { \"S\": \"$input.path('$.location.latitude')#$input.path('$.location.longitude')\" },\n                    #else\n                      \"GSI2PK\": { \"S\": \"$input.path('$.location.addressLine1')#$input.path('$.location.city')#$input.path('$.location.state')\" },\n                    #end\n                    \"GSI2SK\": { \"S\": \"hole#\" },\n                    \"data\": {\n                      \"M\": {\n                        \"description\": { \"S\": \"$input.path('$.description')\" },\n                        \"location\": { \n                          \"M\": {\n                            #if(\"$input.path('$.location.latitude')\" != \"\")\n                              \"latitude\": { \"S\": \"$input.path('$.location.latitude')\"},\n                              \"longitude\": { \"S\": \"$input.path('$.location.longitude')\"}\n                            #end\n                            #if(\"$input.path('$.location.city')\" != \"\")\n                              \"city\": { \"S\": \"$input.path('$.location.city')\" },\n                              \"state\": { \"S\": \"$input.path('$.location.state')\" }\n                              #if(\"$input.path('$.location.addressLine1')\" != \"\"),\n                              \"addressLine1\": { \"S\": \"$input.path('$.location.addressLine1')\" }\n                              #end\n                              #if(\"$input.path('$.location.addressLine2')\" != \"\"),\n                              \"addressLine2\": { \"S\": \"$input.path('$.location.addressLine2')\" }\n                              #end\n                            #end\n                            }\n                          }\n                        }                        \n                        #if(\"$input.path('$.gopherId')\" != \"\"),\n                        \"gopherId\": { \"S\": \"$input.path('$.gopherId')\"}\n                        #end\n                        #if(\"$input.path('$.status')\" != \"\"),\n                        \"status\": { \"S\": \"$input.path('$.status')\"}\n                        #else\n                        ,\"status\": { \"S\": \"visible\"}\n                        #end\n                        #if(\"$input.path('$.comment')\" != \"\"),\n                        \"comment\": { \"S\": \"$input.path('$.comment')\"}\n                        #end\n                      }\n                    }\n                  },\n                  \"ReturnValues\": \"NONE\"\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 201\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"id\": \"$context.requestId\"\n                }\n    get:\n      summary: View a list of all holes\n      description: To view a list of all the gopher holes, use this endpoint. Returns all holes by default, but has an optional query parameter to filter by status\n      parameters:\n        - in: query\n          name: status\n          required: false\n          description: Filter holes by their current status\n          example: filled\n          schema:\n            type: string\n      tags:\n        - Holes\n      responses:\n        200:\n          description: The list of holes was returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HoleSummary'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${GetAllHolesRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/Query\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: never\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"IndexName\": \"GSI1\",\n                  \"KeyConditionExpression\": \"#GSI1PK = :GSI1PK\",\n                  \"ExpressionAttributeNames\": {\n                    \"#GSI1PK\": \"GSI1PK\"\n                  },\n                  \"ExpressionAttributeValues\": {\n                    \":GSI1PK\": { \"S\": \"hole#\" }\n                  }\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 200\n            responseTemplates:\n              application/json: |\n                #set($context.reponseOverride.header.Access-Control-Allow-Origin = '*')\n                #set($inputRoot = $input.path('$'))\n                {\n                  \"items\": [\n                    #foreach($elem in $inputRoot.Items) {\n                      \"id\": \"$elem.pk.S\",\n                      \"description\": \"$elem.data.M.description.S\",\n                      \"location\": {\n                        #if(\"$elem.data.M.location.M.city.S\" != \"\")\n                        \"city\": \"$elem.data.M.location.M.city.S\",\n                        \"state\": \"$elem.data.M.location.M.state.S\"\n                        #else\n                        \"latitude\": \"$elem.data.M.location.M.latitude.S\",\n                        \"longitude\": \"$elem.data.M.location.M.longitude.S\"\n                        #end\n                      }\n                      #if(\"$elem.data.M.location.M.gopherId.S\" != \"\"),\n                      \"type\": \"$elem.data.M.location.M.gopherId.S\"\n                      #end\n                    }\n                    #end\n                  ]\n                }\n\n  /holes/{holeId}/statuses:\n    parameters:\n      - $ref: '#/components/parameters/holeId'\n    post:\n      summary: Update the gopher hole status\n      description: When the status of the gopher hole changes, i.e. filled, post to the this endpoint to update the hole.\n      tags:\n        - Holes\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - status\n              properties:\n                status:\n                  type: string\n                  minLength: 1\n                  enum: [filled, visible]\n                  description: New status of the gopher hole\n                  example: filled\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        400:\n          $ref: '#/components/responses/BadRequest'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        credentials:\n          Fn::Sub: ${AddHoleStatusRole.Arn}\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/UpdateItem\n        httpMethod: POST\n        type: aws\n        passthroughBehavior: 'never'\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                #set($epochDate = $context.requestTimeEpoch / 1000 )\n                {\n                  \"TableName\": \"${TableName}\",\n                  \"Key\": {\n                    \"pk\": { \"S\": \"$input.params('holeId')\" },\n                    \"sk\": { \"S\": \"hole#\" }\n                  },\n                  \"KeyConditionExporession\": \"#pk = :pk\",\n                  \"UpdateExpression\": \"#data.#status = :status\",\n                  \"ExpressionAttributeNames\": {\n                    \"#pk\": \"pk\",\n                    \"#data\": \"data\",\n                    \"#status\": \"status\"\n                  },\n                  \"ExpressionAttributeValues\": {\n                    \":pk\": { \"S\": \"$input.params('holeId')\" },\n                    \":status\": { \"S\": \"$input.path('$.status')\" }\n                  },\n                  \"ReturnValues\": \"NONE\"\n                }\n              - { TableName: { Ref: TableName } }\n        responses:\n          200:\n            statusCode: 204\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n          400:\n            statusCode: 404\n            responseTemplates:\n              application/json: |\n                #set($context.responseOverride.header.Access-Control-Allow-Origin = '*')\n                {\n                  \"message\": \"A hole with the provided id could not be found\"\n                }\n\n  /holes/{holeId}:\n    parameters:\n      - $ref: '#/components/parameters/holeId'\n    put:\n      summary: Update the details of a specific hole\n      description: If updates are necessary to the hole, pass in all the details and replace the entity entirely.\n      tags:\n        - Holes\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Hole'\n      responses:\n        204:\n          $ref: '#/components/responses/NoContent'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateHoleFunction.Arn}/invocations\n        httpMethod: POST\n        type: aws_proxy\n    get:\n      summary: Get the details of a specific hole\n      description: To view additional details about a hole, look it up by id.\n      tags:\n        - Holes\n      responses:\n        200:\n          description: The requested hole has been found and the details returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Hole'\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-amazon-apigateway-request-validator: Validate All\n      x-amazon-apigateway-integration:\n        uri:\n          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHoleFunction.Arn}/invocations\n        httpMethod: POST\n        type: aws_proxy\n\ncomponents:\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: x-api-key\n      in: header\n\n  parameters:\n    gopherId:\n      name: gopherId\n      in: path\n      description: Unique identifier for a gopher\n      required: true\n      schema:\n        type: string\n        example: kfghusfdglksgu858y\n      x-postman-variables:\n        - type: load\n          name: gopherId\n    holeId:\n      name: holeId\n      in: path\n      description: Unique identifier for a hole\n      required: true\n      schema:\n        type: string\n        example: dhr558QRdvSoBkM9JcLFSK\n      x-postman-variables:\n        - type: load\n          name: holeId\n  schemas:\n    Gopher:\n      description: All information describing a gopher\n      type: object\n      required:\n        - name\n        - location\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the gopher\n          example: 8dqNfMQaR4VfHxsizLJyCx\n        name:\n          type: string\n          minLength: 1\n          description: The name of the gopher given by the hunter who submitted it\n          example: Gerry\n        type:\n          type: string\n          enum: [Western Pocket, Eastern Pocket, Geomys]\n          description: What kind of gopher is this?\n          example: Western Pocket\n        sex:\n          type: string\n          enum: [male, female, no preference, unknown]\n          description: Sex of the gopher\n          example: male\n        picture:\n          type: string\n          minLength: 1\n          description: Url of a recent photo\n          example: https://gopherhunter.s3.amazonaws.com/gerry.jpg\n        timesSeen:\n          type: number\n          description: How many times has this gopher been spotted\n          example: 42\n        status:\n          type: string\n          description: Current status of the gopher\n          enum: [at large, trapped, deceased, unknown]\n          example: at large\n        color:\n          type: string\n          description: Color of the Gopher's fur\n          example: brown\n        location:\n          $ref: '#/components/schemas/Location'\n        comment:\n          type: string\n          description: Text comment with any additional details\n          example: He keeps eating the carrots from my garden. So annoying!!\n        knownAssociates:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - name\n            properties:\n              id:\n                type: string\n                minLength: 1\n                description: Unique identifier of the gopher\n                example: 5Fe3ZQqqEcurytZdK69iew\n              name:\n                type: string\n                minLength: 1\n                description: Name of the associated gopher\n                example: Carla\n\n    UpdateGopher:\n      description: All information describing a gopher\n      type: object\n      properties:\n        name:\n          type: string\n          minLength: 1\n          description: The name of the gopher given by the hunter who submitted it\n          example: Gerry\n        type:\n          type: string\n          enum: [Western Pocket, Eastern Pocket, Geomys]\n          description: What kind of gopher is this?\n          example: Western Pocket\n        sex:\n          type: string\n          enum: [male, female, no preference, unknown]\n          description: Sex of the gopher\n          example: male\n        picture:\n          type: string\n          minLength: 1\n          description: Url of a recent photo\n          example: https://gopherhunter.s3.amazonaws.com/gerry.jpg\n        status:\n          type: string\n          description: Current status of the gopher\n          enum: [at large, trapped, deceased, unknown]\n          example: at large\n        color:\n          type: string\n          description: Color of the Gopher's fur\n          example: brown\n        location:\n          $ref: '#/components/schemas/Location'\n        comment:\n          type: string\n          description: Text comment with any additional details\n          example: He keeps eating the carrots from my garden. So annoying!!\n\n    Location:\n      description: Where it is located\n      oneOf:\n        - type: object\n          required:\n            - latitude\n            - longitude\n          properties:\n            latitude:\n              type: string\n              minLength: 1\n              description: Latitude location of the known whereabouts\n              example: '33.067067'\n            longitude:\n              type: string\n              minLength: 1\n              description: Longitude location of the known whereabouts\n              example: '-96.801599'\n        - type: object\n          required:\n            - city\n            - state\n          properties:\n            addressLine1:\n              type: string\n              description: Line 1 of the address of the known whereabouts\n              example: 123 Main Street\n            addressLine 2:\n              type: string\n              description: Line 2 of the address of the known whereabouts\n              example: 'Apt #2212'\n            city:\n              type: string\n              minLength: 1\n              description: City of the known whereabouts\n              example: Plano\n            state:\n              type: string\n              minLength: 1\n              description: State of the known whereabouts\n              example: TX\n      example:\n        latitude: '33.067067'\n        longitude: '-96.801599'\n\n    GopherSummary:\n      description: High level information about a gopher\n      type: array\n      items:\n        type: object\n        required:\n          - id\n          - name\n        properties:\n          id:\n            type: string\n            minLength: 1\n            description: Unique identifier of the gopher\n            example: igdLLki4no9ey1aN2rAB3s\n          name:\n            type: string\n            minLength: 1\n            description: The name of the gopher given by the hunter who submitted it\n            example: Gerry\n          type:\n            type: string\n            enum: [Western Pocket, Eastern Pocket, Geomys]\n            description: What kind of gopher is this?\n            example: Western Pocket\n          location:\n            type: object\n            description: Known location of the gopher\n            oneOf:\n              - type: object\n                required:\n                  - latitude\n                  - longitude\n                properties:\n                  latitude:\n                    type: string\n                    minLength: 1\n                    description: Latitude location of the gopher's whereabouts\n                    example: '33.067067'\n                  longitude:\n                    type: string\n                    minLength: 1\n                    description: Longitude location of the gopher's whereabouts\n                    example: '-96.801599'\n              - type: object\n                required:\n                  - city\n                  - state\n                  - addressLine1\n                properties:\n                  addressLine1:\n                    type: string\n                    description: Line 1 of the address of the known whereabouts\n                    example: 123 Main Street\n                  addressLine 2:\n                    type: string\n                    description: Line 2 of the address of the known whereabouts\n                    example: 'Apt #2212'\n                  city:\n                    type: string\n                    minLength: 1\n                    description: City of the known whereabouts\n                    example: Plano\n                  state:\n                    type: string\n                    minLength: 1\n                    description: State of the known whereabouts\n                    example: TX\n            example:\n              latitude: '33.067067'\n              longitude: '-96.801599'\n\n    Hole:\n      description: Full detailed information about a gopher hole\n      type: object\n      required:\n        - location\n        - description\n      properties:\n        id:\n          type: string\n          description: Unique identifier for the hole\n          example: koktdBhckCtYTsHbvnXrqr\n        description:\n          type: string\n          minLength: 1\n          maxLength: 100\n          description: Brief description about the hole\n          example: Near the fire hydrant\n        gopherId:\n          type: string\n          description: The gopher who dug the hole\n          example: igdLLki4no9ey1aN2rAB3s\n        location:\n          $ref: '#/components/schemas/Location'\n        status:\n          type: string\n          enum: [filled, visible]\n          description: Current status of the hole\n          example: filled\n        comment:\n          type: string\n          description: The hole comment\n          example: This one is huge! I stepped right in it!\n\n    HoleSummary:\n      description: High level information about a gopher hole\n      type: array\n      items:\n        type: object\n        required:\n          - id\n          - location\n          - description\n        properties:\n          id:\n            type: string\n            minLength: 1\n            description: Unique identifier for the hole\n            example: koktdBhckCtYTsHbvnXrqr\n          location:\n            type: object\n            description: Known location of the gopher\n            required:\n              - latitude\n              - longitude\n            properties:\n              latitude:\n                type: string\n                minLength: 1\n                description: Latitude location of the hole\n                example: '33.067067'\n              longitude:\n                type: string\n                minLength: 1\n                description: Longitude location of the hole\n                example: '-96.801599'\n          description:\n            type: string\n            minLength: 1\n            maxLength: 100\n            description: Brief description about the hole\n            example: Near the fire hydrant\n          gopherId:\n            type: string\n            description: Unique identifier of the gopher that dug the hole\n            example: lag91345wgli154098dghb908\n\n    AddGopherJobDetail:\n      type: object\n      required:\n        - status\n        - id\n        - createdDate\n        - input\n      properties:\n        status:\n          type: string\n          enum: [Pending, In Progress, Succeeded, Failed]\n          description: Current status of the add gopher job\n          example: Pending\n        id:\n          type: string\n          description: Unique identifier of the job. Also will be the id of the gopher if the job succeeds\n          example: 823krg81234sdg34134\n        createdDate:\n          type: string\n          format: date-time\n          description: Date and time the job was created\n          example: '2022-03-22T12:10:33.932Z'\n        input:\n          $ref: '#/components/schemas/Gopher'\n        result:\n          type: object\n          required:\n            - gopherId\n            - linkedHoles\n          properties:\n            gopherId:\n              type: string\n              description: Unique identifier of the created gopher\n              example: idfg63249234hf76\n            linkedHoles:\n              type: integer\n              description: The number of existing holes that were automatically linked to the created gopher\n              example: 2\n        error:\n          type: string\n          description: Detail about the error that occurred while running the job\n          example: Something went wrong\n\n  responses:\n    Accepted:\n      description: The request was recieved and is being processed\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: string\n                description: Unique identifier to track progress\n                example: iysgsfdgk347gnsfgG73\n              links:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - method\n                    - url\n                  properties:\n                    method:\n                      type: string\n                      description: HTTP method to use when calling the link\n                      example: GET\n                    url:\n                      type: string\n                      description: Endpoint to call\n                      example: https://api.gopherholesunlimited.com/jobs/gophers/123\n    Created:\n      description: Successfully added into the system\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - id\n            properties:\n              id:\n                type: string\n                description: The identifier for the new entity\n                example: igdLLki4no9ey1aN2rAB3s\n    BadRequest:\n      description: Unable to process request. Likely due to improperly formatted request.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Message detailing what went wrong\n                example: The 'name' field is required and is missing.\n    NotFound:\n      description: Unable to find entity with a given identifier\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Message stating the entity was not found\n                example: Unable to find entity with the provided id\n    UnknownError:\n      description: An unexpected error occurred on the server.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n                description: Unknown error message\n                example: An unexpected error occurred.\n    NoContent:\n      description: A blank response is returned indicating success\n",
			"canonicalURL": "/github.com/allenheltondev/gopher-holes-unlimited@d20a1cfaa69d8a0957889658a3da6719f157dc0b/-/blob/ghu-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/allenheltondev/gopher-holes-unlimited/blob/d20a1cfaa69d8a0957889658a3da6719f157dc0b/ghu-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}