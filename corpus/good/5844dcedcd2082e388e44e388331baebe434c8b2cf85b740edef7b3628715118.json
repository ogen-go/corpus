{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sovetromantica/sr-api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 17271,
			"content": "openapi: 3.0.1\ninfo:\n  title: Sovetromantica APIᵇᵉᵗᵃ\n  description: \"Sovetromantica API методы. \\r\\nВсе методы, на данный момент, возвр\\\n    ащают ответ со статусом 200. Response-коды ошибок нужно проверять по телу отве\\\n    та.\"\n  version: 1.0.2\nservers:\n- url: https://service.sovetromantica.com/v1\ntags:\n- name: Anime\n  description: Методы для получения деталей по тайтлам\n  externalDocs:\n    description: Больше информации на\n    url: https://github.com/sovetromantica/sr-api\n- name: Episodes\n  description: Методы для получения информации об эпизодах\n  externalDocs:\n    description: Больше информации на\n    url: https://github.com/sovetromantica/sr-api\npaths:\n  /animesearch:\n    get:\n      tags:\n      - Anime\n      summary: Ищет тайтлы по части названия\n      description: Возвращает JSON таблицу\n      operationId: getAnimeSearch\n      parameters:\n      - name: anime_name\n        in: query\n        description: часть названия аниме, на английском или русском\n        required: true\n        schema:\n          type: string\n          format: string\n        example: black lagoon\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Anime'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /anime/{anime_id}:\n    get:\n      tags:\n      - Anime\n      summary: Возвращает информацию об аниме по id\n      description: \"Возвращает JSON таблицу с одним элементом. \\r\\nВ случае ошибки\\\n        \\ в ответ приходит сообщение с response-кодом и описанием.\"\n      operationId: getAnimeInfo\n      parameters:\n      - name: anime_id\n        in: path\n        description: ID аниме\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Anime'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /list:\n    get:\n      tags:\n      - Anime\n      summary: Возвращает список аниме с сортировкой по id и опциональными фильтрами\n      description: \"Возвращает JSON таблицу с одним элементом. \\r\\nВ случае ошибки\\\n        \\ в ответ приходит сообщение с response-кодом и описанием.\"\n      operationId: getAnimeList\n      parameters:\n      - name: offset\n        in: query\n        description: Начало страницы\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - name: limit\n        in: query\n        description: Количество тайтлов на странице (\u0026le 30)\n        schema:\n          type: integer\n          format: int32\n          default: 30\n      - name: studio\n        in: query\n        description: Название студии\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Anime'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /animes:\n    post:\n      tags:\n      - Anime\n      summary: Возвращает информацию об аниме по списку id\n      description: \"Возвращает JSON таблицу с информацией о всех доступных аниме и\\\n        з присланного списка. \\r\\nКоличество возвращаемых объектов \u0026le; 60. \\r\\nВ\\\n        \\ случае ошибки в ответ приходит сообщение с response-кодом и описанием.\"\n      operationId: getAnimeInfoForList\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n              - anime_id_array\n              properties:\n                anime_id_array:\n                  type: string\n                  description: JSON-список с id нужных аниме\n                  default: '[1,955]'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Anime'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /ongoing:\n    get:\n      tags:\n      - Anime\n      summary: Возвращает список id тайтлов в онгоинге\n      description: Возвращает JSON таблицу со списком id всех тайтлов в онгоинге\n      operationId: getOngoingAnime\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Anime'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /anime/{anime_id}/episodes:\n    get:\n      tags:\n      - Anime\n      - Episodes\n      summary: Метод возвращает спиок эпизодов выбранного тайтла\n      description: Метод возвращает спиок эпизодов по ID аниме\n      operationId: getAnimeEpisodesByAnimeID\n      parameters:\n      - name: anime_id\n        in: path\n        description: ID аниме\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Episode'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /episode/{episode_id}:\n    get:\n      tags:\n      - Episodes\n      summary: Метод возвращает информацию об эпизоде\n      description: Метод возвращает информацию об эпизоде по его ID\n      operationId: getAnimeEpisodeById\n      parameters:\n      - name: episode_id\n        in: path\n        description: ID эпизода\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Episode'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /last_episodes:\n    get:\n      tags:\n      - Episodes\n      summary: Возвращает список эпизодов по limit,offset, начиная с самых последних.\n      description: Возвращает JSON таблицу с \\\u003climit\\\u003e эпизодов, по смещению в базе на \\\u003coffset\\\u003e\n      operationId: getEpisodesLatest\n      parameters:\n        - name: limit\n          in: query\n          description: \"Количество эпизодов в ответе. Макс: 30\"\n          required: false\n          schema:\n            type: integer\n            exclusiveMinimum: true\n            minimum: 0\n            maximum: 30\n            default: 30\n        - name: offset\n          in: query\n          description: Смещение в базе данных\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Episode'\n        503:\n          description: не корректные аргументы/по этому запросу ничего не найдено\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\ncomponents:\n  schemas:\n    Anime:\n      required:\n      - anime_description\n      - anime_episodes\n      - anime_folder\n      - anime_id\n      - anime_keywords\n      - anime_name\n      - anime_name_russian\n      - anime_paused\n      - anime_shikimori\n      - anime_studio\n      - anime_year\n      type: object\n      properties:\n        anime_description:\n          type: string\n          description: длинное текстовое описание аниме\n          example: Рокуро Окадзима [岡島緑郎] — типичный японский служащий, работающий\n            на крупную корпорацию и живущий в городе, население которого едва ли не\n            полностью состоит из похожих людей. Как и у многих, его обычный день компонуют\n            многочисленные «пинки» начальства и «деловые встречи», обязывающие Рокуро\n            не столько работать, сколько выпивать вместе с клиентами.\\r\\nОдним днём\n            привычный образ жизни «рабочей лошадки» нарушает неожиданная командировка.\n            В качестве посыльного, которому вверили диск с чрезвычайно важной информацией,\n            начальство отправляет Рокуро в тёплые воды Южно-Китайского моря. Казалось\n            бы, нужно всего-то пересечь пару десятков морских миль, сойти у берегов\n            Борнео и вручить ценную посылку менеджеру тамошнего филиала. Но, как известно,\n            не всё творится, что просто говорится. По пути корабль, на котором плывёт\n            Рокуро, захватывают пираты, нанятые русской мафией.\\r\\nРасставшись с посылкой,\n            взамен получив пару болезненных ударов, Рокуро решает, что отделался мелкой\n            монетой. Однако ствол блестящего пистолета, в ту же минуту вновь направленный\n            на него, доходчиво объясняет обратное. Так мягкотелый клерк становится\n            заложником на маленьком пиратском судне под названием «Лагуна».\\r\\nПока\n            диск с информацией о незаконной деятельности ещё не попал в руки мафии,\n            совет директоров корпорации решает избавиться не только от пиратов, но\n            и от неудавшегося посыльного. Чтобы замести следы, бизнесмены покупают\n            услуги наёмников, которые в ближайшие пару часов становятся серьёзной\n            проблемой для экипажа «Лагуны». Как ни странно, выбраться из передряги\n            им помогает пленный Рокуро, с тех пор «похороненный» в родной стране как\n            безликий служащий и «воскресший» как пират в чужой.\n        anime_episodes:\n          type: integer\n          description: количество эпизодов\n          example: 12\n        anime_folder:\n          type: string\n          description: название папки (нужно при получении ресурсов, связанных с аниме,\n            такими как обложка и ссылки на эпизоды)\n          example: black-lagoon\n        anime_id:\n          type: integer\n          description: id в базе\n          example: 980\n        anime_keywords:\n          type: string\n          description: теги этого аниме\n          example: null\n        anime_name:\n          type: string\n          description: оригинальное название\n          example: Black Lagoon\n        anime_name_russian:\n          type: string\n          description: руссифицированное название\n          example: Пираты «Чёрной лагуны»\n        anime_paused:\n          type: integer\n          description: маркер приостановленного тайтла\n          example: 0\n        anime_shikimori:\n          type: integer\n          description: id в базе шикимори\n          example: 889\n        anime_studio:\n          type: integer\n          description: id студии\n          example: 83\n        anime_year:\n          type: integer\n          description: дата выхода\n          example: 2006\n        episode_current_dub:\n          type: integer\n          description: число эпизодов с SR озвучкой\n          example: 12\n        episode_current_sub:\n          type: integer\n          description: число эпизодов с SR сабами\n          example: 0\n    ApiError:\n      required:\n      - code\n      - description\n      type: object\n      properties:\n        code:\n          type: integer\n          description: код ошибки\n          example: 503\n        description:\n          type: string\n          description: описание ошибки\n          example: incorrect argument\n    Episode:\n      type: object\n      properties:\n        embed:\n          type: string\n          description: ссылка на встраиваемый плеер\n          example: https://sovetromantica.com/embed/episode_925_16-subtitles\n        episode_anime:\n          type: integer\n          description: id аниме\n          example: 925\n        episode_count:\n          type: integer\n          description: номер эпизода\n          example: 16\n        episode_id:\n          type: integer\n          description: id эпизода\n          example: 17556\n        episode_type:\n          type: integer\n          description: тип эпизода (0 - сабы, 1 - озвучка)\n          example: 0\n        episode_updated_at:\n          type: string\n          description: время последнего обновления в формате \"YYYY-MM-DD HH:mm:SS\"\n          example: 2020-06-02 16:26:33\n        episode_view:\n          type: integer\n          description: число просмотров (?)\n          example: 16\n",
			"canonicalURL": "/github.com/sovetromantica/sr-api@7b7e0d0adfdde1ab4f47a33cb0b1510ea0789675/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sovetromantica/sr-api/blob/7b7e0d0adfdde1ab4f47a33cb0b1510ea0789675/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}