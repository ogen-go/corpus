{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MyZenKey/sp-sdk-provider-integration-web"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "Examples/APIBackend/static/swagger.yml",
			"byteSize": 30361,
			"content": "openapi: 3.0.1\ninfo:\n  title: ZenKey Example Backend API\n  description: ZenKey Example Backend API\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - url: /\npaths:\n  /auth/zenkey-signin:\n    post:\n      tags:\n        - Auth\n      summary: Complete ZenKey sign in to receive a token\n      description: |\n        Use this endpoint to finish the ZenKey sign in get an access token. Behind the scenes, the API server will exchange the ZenKey auth code for a ZenKey token and make a request to ZenKey for the user's info.\n      operationId: sign-in\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            examples:\n              minimal:\n                $ref: '#/components/examples/MinimalSignInRequest'\n              full:\n                $ref: '#/components/examples/FullSignInRequest'\n            schema:\n              $ref: '#/components/schemas/SignInRequest'\n          application/x-www-form-urlencoded:\n            examples:\n              minimal:\n                $ref: '#/components/examples/MinimalSignInRequest'\n              full:\n                $ref: '#/components/examples/FullSignInRequest'\n            schema:\n              $ref: '#/components/schemas/SignInRequest'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          description: User does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDoesNotExistResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /auth/token:\n    post:\n      summary: Refresh token (not fully implemented)\n      description: |\n        Use a refresh token to get a new access token\n      operationId: refresh-token\n      tags:\n        - Auth\n      security:\n        - BearerAuth: []\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - grant_type\n                - refresh_token\n              properties:\n                grant_type:\n                  type: string\n                  description: Requested grant type. Only \"refresh_token\" is allowed\n                  example: refresh_token\n                refresh_token:\n                  type: string\n                  description: The refresh token to be exchanged for a new token\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      summary: Log out (not fully implemented)\n      description: End a session by invalidating the access token to log the user out\n      operationId: end-session\n      tags:\n        - Auth\n      security:\n        - BearerAuth: []\n        - ApiKeyAuth: []\n      responses:\n        200:\n          description: Success\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /auth/zenkey-async-signin:\n    post:\n      summary: Begin server-initiated ZenKey auth\n      tags:\n        - Async Auth\n      description: |\n        Kick off a server-initiated auth flow. In this flow, the server will send an authorize request to ZenKey. After the user has authorized using the ZenKey app, the server will receive a callback with the user's tokens. Your API client must poll the server until the token is received.\n      operationId: sign-in-async\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            examples:\n              minimal:\n                $ref: '#/components/examples/MinimalAsyncSignInRequest'\n              full:\n                $ref: '#/components/examples/FullAsyncSignInRequest'\n            schema:\n              $ref: '#/components/schemas/AsyncSignInRequest'\n          application/x-www-form-urlencoded:\n            examples:\n              minimal:\n                $ref: '#/components/examples/MinimalAsyncSignInRequest'\n              full:\n                $ref: '#/components/examples/FullAsyncSignInRequest'\n            schema:\n              $ref: '#/components/schemas/AsyncSignInRequest'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncSignInResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        502:\n          description: ZenKey auth request failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZenKeyErrorResponse'\n  /auth/zenkey-async-signin/{auth_req_id}:\n    get:\n      summary: Poll to learn when server-initiated auth is complete\n      tags:\n        - Async Auth\n      description: |\n        You can make requests to this endpoint to learn when server-initiated auth is complete. This auth flow is asyncronous so the server will not receive a token immediately.\n        \n        The specific auth request to check on is determined by the `auth_req_id` in the URL. This is received when beginning server-initiated auth.\n        \n        While the server is waiting for ZenKey to hit the server's callback URL with a token, this endpoint will return a 200 message that only contains the `auth_req_id`.\n        \n        After ZenKey has sent a token to this server's callback URL, this endpoint will return a 302 message containing token information. This is an internal token, not a token from ZenKey.\n        \n        Do not poll this endpoint more than once per second.\n      operationId: sign-in-async-poll\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - in: path\n          name: auth_req_id\n          required: true\n          description: Specifies the server-initiated auth request to check on\n          schema:\n            type: string\n            example: \"abc123\"\n      responses:\n        302:\n          description: Successfully received ZenKey token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncSignInPollingSuccessResponse'\n        200:\n          description: Still waiting to receive ZenKey token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncSignInPollingWaitingResponse'\n        400:\n          description: Bad request, or auth request has expired, or auth request has been cancelled\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Auth request not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        429:\n          description: Too many requests - rate limit exceeded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        502:\n          description: ZenKey auth request failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZenKeyErrorResponse'\n    post:\n      summary: Retry a server-initiated authorization\n      tags:\n        - Async Auth\n      description: |\n        Restart the server-initiated auth request with a fresh push message to the user's phone.\n        \n        The specific auth request to retry determined by the `auth_req_id` in the URL. This is received when beginning server-initiated auth.\n      operationId: sign-in-async-retry\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - in: path\n          name: auth_req_id\n          required: true\n          description: Specifies the server-initiated auth request to retry\n          schema:\n            type: string\n            example: \"abc123\"\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncSignInRetrySuccessResponse'\n        400:\n          description: Bad request, or auth request has been cancelled\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Auth request not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        429:\n          description: Too many requests - rate limit exceeded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        502:\n          description: ZenKey auth request failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZenKeyErrorResponse'\n    delete:\n      summary: Cancel a server-initiated authorization\n      tags:\n        - Async Auth\n      description: |\n        Cancel the server-initiated auth request. After cancelling, ZenKey will never send an access token to the callback URL.\n        \n        The specific auth request to retry determined by the `auth_req_id` in the URL. This is received when beginning server-initiated auth.\n      operationId: sign-in-async-cancel\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - in: path\n          name: auth_req_id\n          required: true\n          description: Specifies the server-initiated auth request to cancel\n          schema:\n            type: string\n            example: \"abc123\"\n      responses:\n        200:\n          description: Success\n        400:\n          description: Bad request, or request was already cancelled, or auth request was expired\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Auth request not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        502:\n          description: ZenKey auth cancellation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZenKeyErrorResponse'\n  /auth/zenkey-async-signin/notification:\n    post:\n      summary: Receive a server-initiated callback from ZenKey\n      tags:\n        - Async Auth\n      description: |\n        This endpoint is for the carrier and not for clients. Once the user has authorized this transaction using their ZenKey app the ZenKey carrier can give us a token. This endpoint is used for the carrier to notify us of the completed transaction. The carrier sends a POST request to this URL with the access token and id_token. They identify which transaction was completed using the `auth_req_id` paramter.\n      operationId: sign-in-async-notification\n      parameters:\n        - in: header\n          name: Authorization\n          required: true\n          schema:\n            type: string\n            example: Bearer \u003cnotification_token\u003e\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AsyncSignInNotificationRequest'\n      responses:\n        200:\n          description: Success\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /users:\n    post:\n      summary: Register a user (not fully implemented)\n      tags:\n        - Auth\n      description: |\n        Use this endpoint to register a new user and receive a token. The new\n        user will be saved in the database.\n      operationId: create-user\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - username\n                - password\n                - zenkey_sub\n                - name\n                - phone_number\n                - postal_code\n                - email\n              properties:\n                username:\n                  type: string\n                  description: User's desired username\n                  example: Angel313\n                password:\n                  type: string\n                  description: User's desired password\n                  example: password\n                zenkey_sub:\n                  type: string\n                  description: Unique ZenKey account identifier for the user\n                  example: my-zenkey-sub\n                name:\n                  type: string\n                  description: User's name\n                  example: Jesse Doe\n                phone_number:\n                  type: string\n                  description: User's phone number\n                  example: 555-555-5555\n                postal_code:\n                  type: string\n                  description: User's postal code\n                  example: 55155\n                email:\n                  type: string\n                  description: User's email address\n                  example: jesse@myzenkey.com\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /users/me:\n    get:\n      summary: Get current user details\n      tags:\n        - Account\n      description: |\n        Use this endpoint to retrieve details about the current user from the database\n      operationId: userinfo\n      security:\n        - BearerAuth: []\n        - ApiKeyAuth: []\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        401:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  examples:\n    MinimalSignInRequest:\n      summary: A simple request\n      value:\n        client_id: my-client-id\n        code: DZYeUmmQjKfTsZeRa6PukTps\n        mccmnc: \"311480\"\n        redirect_uri: https://mydomain.com/zenkey/callback\n    FullSignInRequest:\n      summary: A request with all the parameters\n      value:\n        client_id: my-client-id\n        code: DZYeUmmQjKfTsZeRa6PukTps\n        mccmnc: \"311480\"\n        redirect_uri: https://mydomain.com/zenkey/callback\n        code_verifier: ZYeUmmQjKfTsZeRa6PukTp\n        correlation_id: 10001\n        nonce: mmQjKfTsZeRa6P\n        context: \"Transfer $10.00 to Jesse\"\n        acr_values: \"a1 a3\"\n    FullAsyncSignInRequest:\n      summary: A request with all the parameters\n      value:\n        context: \"Transfer $100 to Jesse?\"\n        correlation_id: \"00012\"\n        login_hint: \"+15555555555\"\n        acr_values: \"a1 a3\"\n        redirect_uri: https://mydomain.com/zenkey/callback\n        client_id: my-client-id\n        options: \"dark\"\n        prompt: consent\n        scope: \"openid name\"\n        mccmnc: \"311480\"\n    MinimalAsyncSignInRequest:\n      summary: A simple request\n      value:\n        login_hint: \"+15555555555\"\n        redirect_uri: https://mydomain.com/zenkey/callback\n        client_id: my-client-id\n        scope: \"openid name\"\n        mccmnc: \"311480\"\n  schemas:\n    SignInRequest:\n      required:\n        - client_id\n        - code\n        - mccmnc\n        - redirect_uri\n      properties:\n        client_id:\n          type: string\n          description: Client ID\n          example: my-client-id\n        code:\n          type: string\n          description: code from ZenKey SDK AuthorizedResponse\n          example: DZYeUmmQjKfTsZeRa6PukTps\n        redirect_uri:\n          type: string\n          description: Redirect URL\n          example: https://mydomain.com/zenkey/callback\n        code_verifier:\n          type: string\n          description: codeVerifier from ZenKey SDK AuthorizedResponse\n        mccmnc:\n          type: string\n          description: MCCMNC of the user's carrier\n          example: \"311480\"\n        correlation_id:\n          type: string\n          description: the same correlation ID passed in the auth request.\n            Used to correlate requests\n        nonce:\n          type: string\n          description: the nonce passed in the auth request. If present, the\n            backend will validate the nonce returned in the ID token to make\n            sure it matches\n        context:\n          type: string\n          description: the context passed in the auth request. If present,\n            the backend will validate the context returned in the ID token\n            to make sure it matches\n          example: \"Transfer $100 to Jesse?\"\n        acr_values:\n          type: string\n          description: the ACR values passed in the auth request. If present,\n            the backend will validate the ACR values returned in the ID token\n            to make sure they match. This should be a series of strings separated by spaces.\n          example: \"a1 a3\"\n    AsyncSignInRequest:\n      type: object\n      required:\n        - client_id\n        - mccmnc\n        - redirect_uri\n        - scope\n        - login_hint\n      properties:\n        context:\n          type: string\n          description: The transaction context information to be shown to the user in the ZenKey app\n          example: \"Transfer $100 to Jesse?\"\n        correlation_id:\n          type: string\n          description: a tracking ID used for transaction logging\n        login_hint:\n          type: string\n          description: |\n            An SP may use a clear text login_hint when the SP is requesting a specific user to be authenticated, or authorize.  \n            \n            Value will be one of the following\n            - phone_number in the form found in userinfo (+1xxxxxxxxxx)\n            - sub in the form found in userinfo\n            \n            An SP will only be able to use phone_number if the client_id has \"enum_enabled\" in the SP configuration. \n        acr_values:\n          type: string\n          description: |\n            SP's should ask for a1 when they need a low level of authentication, users will not be asked for their pin or biometrics. Any user holding the device will be able to authenticate.\n          \n            SP's should ask for a3 and prompt=login anytime they want to ensure the user has provided their (pin | bio), within the last 60 seconds.\n        \n            SP's may pass no acr_values as the default is an a3 user authenticated response.  \n            \n            This should be a series of strings separated by spaces.\n          example: \"a1 a3\"\n        redirect_uri:\n          type: string\n          description: Redirect URL. This is only used for validation in a server-initiated request. No redirects occur.\n          example: https://mydomain.com/zenkey/callback\n        client_id:\n          type: string\n          description: Client ID\n          example: my-client-id\n        options:\n          type: string\n          description: |\n            An SP can ask for a dark mode experience for the user by using the \"dark\" option (for example, if the SP is using dark UI).\n            \n            Options should be separated by spaces. Only the \"dark\" option is valid at this time.\n          example: \"dark\"\n        prompt:\n          type: string\n          enum: [none, login, consent]\n          description: |\n            prompt=none - Only select SP's will be allowed to ask for prompt=none.\n            \n            prompt=login - An SP can ask for a user to authenticate again. (even if the user authenticated within the last SSO authentication period.\n            \n            prompt=consent - An SP can ask for a user to explicitly re-confirm that the user agrees to the exposure of their data. The MNO will recapture user consent for the listed scopes. \n\n            This should be a series of strings separated by spaces.\n          example: consent\n        scope:\n          type: string\n          description: |\n            A list of scopes that will enable a SP to access data from the userinfo endpoint.  \n            \n            This should be a series of strings separated by spaces.\n          example: \"openid name\"\n        mccmnc:\n          type: string\n          enum: [dark]\n          description: MCCMNC of the user's carrier\n          example: \"311480\"\n    AsyncSignInResponse:\n      type: object\n      properties:\n        auth_req_id:\n          type: string\n          description: the unique idenfier of the server-initiated auth request\n        expires_in:\n          type: number\n          example: 3600\n          description: number of seconds until the asyncronous auth request expires\n    AsyncSignInPollingSuccessResponse:\n      type: object\n      properties:\n        auth_req_id:\n          type: string\n          description: the unique idenfier of the server-initiated auth request\n        token:\n          type: string\n          description: a JWT linked to the session. This JWT acts as an access token and must be passed in the Authorization header for authenticated requests made to the API backend. This is an internal token, not a token from ZenKey.\n        refresh_token:\n          type: string\n          description: a refresh token to be used to renew the token. This is an internal token, not a token from ZenKey.\n        token_type:\n          type: string\n          description: the type of the token\n          example: \"bearer\"\n        expires:\n          type: number\n          description: seconds remaining until the token expires\n          example: 3600\n    AsyncSignInPollingWaitingResponse:\n      type: object\n      properties:\n        auth_req_id:\n          type: string\n          description: the unique idenfier of the server-initiated auth request\n    AsyncSignInRetrySuccessResponse:\n      type: object\n      properties:\n        auth_req_id:\n          type: string\n          description: the unique idenfier of the server-initiated auth request\n    AsyncSignInNotificationRequest:\n      type: object\n      properties:\n        auth_req_id:\n          type: string\n          description: the unique idenfier of the server-initiated auth request\n        state:\n          type: string\n        scope:\n          type: string\n          example: openid\n          description: scopes that the access token has access to\n        access_token:\n          type: string\n          description: ZenKey access token\n        expires_in:\n          type: number\n          example: 3600\n          description: seconds until the access token expires\n        refresh_token:\n          type: string\n          description: ZenKey refresh token\n        id_token:\n          type: string\n          description: ZenKey ID token\n        error:\n          type: string\n        error_description:\n          type: string\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          type: string\n        error_description:\n          type: string\n    ZenKeyErrorResponse:\n      type: object\n      properties:\n        error:\n          type: string\n        error_description:\n          type: string\n    UserResponse:\n      type: object\n      properties:\n        username:\n          type: string\n        user_id:\n          type: number\n        zenkey_sub:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        postal_code:\n          type: string\n        phone_number:\n          type: string\n    UserDoesNotExistResponse:\n      type: object\n      properties:\n        zenkey_attributes:\n          $ref: '#/components/schemas/ZenKeyAttributes'\n        error:\n          type: string\n        error_description:\n          type: string\n    TokenResponse:\n      type: object\n      properties:\n        token:\n          type: string\n          description: a JWT linked to the session. This JWT acts as an access token and must be passed in the Authorization header for authenticated requests made to the API backend. This is an internal token, not a token from ZenKey.\n        refresh_token:\n          type: string\n          description: a refresh token to be used to renew the token. This is an internal token, not a token from ZenKey.\n        token_type:\n          type: string\n          description: the type of the token\n          example: \"bearer\"\n        expires:\n          type: number\n          description: seconds remaining until the token expires\n          example: 3600\n    ZenKeyAttributes:\n      type: object\n      required:\n        - sub\n      properties:\n        sub:\n          type: string\n          description: Unique ZenKey account identifier for the user\n          example: my-zenkey-sub\n        name:\n          type: object\n          properties:\n            value:\n              type: string\n              description: User's full name\n              example: Jesse Doe\n            given_name:\n              type: string\n              description: User's first name\n              example: Jesse\n            family_name:\n              type: string\n              description: User's last name\n              example: Doe\n            verified:\n              type: number\n              example: 1\n        phone_number:\n          type: object\n          properties:\n            value:\n              type: string\n              description: User's phone number\n              example: 555-555-5555\n            verified:\n              type: number\n              example: 1\n        postal_code:\n          type: object\n          properties:\n            value:\n              type: string\n              description: User's postal code\n              example: 55155\n            verified:\n              type: number\n              example: 1\n        email:\n          type: object\n          properties:\n            value:\n              type: string\n              description: User's email address\n              example: jesse@myzenkey.com\n            verified:\n              type: number\n              example: 1\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: token\n    ApiKeyAuth:        # arbitrary name for the security scheme\n      type: apiKey\n      in: header       # can be \"header\", \"query\" or \"cookie\"\n      name: X-API-KEY\n",
			"canonicalURL": "/github.com/MyZenKey/sp-sdk-provider-integration-web@82b33af183232dec86bf587ac03c50a3868627af/-/blob/Examples/APIBackend/static/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/MyZenKey/sp-sdk-provider-integration-web/blob/82b33af183232dec86bf587ac03c50a3868627af/Examples/APIBackend/static/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}