{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/panosc-eu/panosc"
		},
		"file": {
			"name": "panosc.yaml",
			"size": 0,
			"path": "Work Packages/WP3 Data catalogue services/api/documentation/panosc.yaml",
			"byteSize": 12807,
			"content": "openapi: 3.0.0\ninfo:\n  title: PANOSC API Draft v1\n  description: PANOSC API Draft for data catalog WP3\n  version: \"0.1\"\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\npaths:\n  '/proposals':\n    get:\n      responses:\n        '200':\n          description: Returns all proposals\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/proposalsResponse'\n  '/proposals/{proposalId}':\n    get:\n      summary: Gets a specific proposal with a proposal idenfier\n      parameters:\n        - in: path\n          description: Proposal's identifier\n          name: proposalId\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Returns a specific proposal for a given identifier\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/proposalResponse'\n        '400':\n          $ref: '#/components/responses/error400'\n  '/proposals/{proposalId}/schedules':\n    get:\n      summary: Gets schedules (session or visit) for a given proposal\n      parameters:\n        - in: path\n          description: Proposal's identifier\n          name: proposalId\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Returns all schedules\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/schedulesResponse'\n        '400':\n          $ref: '#/components/responses/error400'\n  '/proposals/{proposalId}/schedules/{scheduleId}/datasets':\n    get:\n      summary: Gets datasets for a specific schedule of a proposal\n      parameters:\n        - in: path\n          description: proposal's identifier\n          name: proposalId\n          schema:\n            type: integer\n          required: true\n        - in: path\n          description: schedule's identifier\n          name: scheduleId\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Returns all datasets for a specific schedule of a proposal.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datasetsResponse'\n        '400':\n          $ref: '#/components/responses/error400'\n  '/proposals/{proposalId}/schedules/{scheduleId}/datasets/{datasetId}/files':\n    get:\n      summary: Gets a list of files associated to a dataset\n      parameters:\n        - in: path\n          description: proposalId\n          name: proposalId\n          schema:\n            type: integer\n          required: true\n        - in: path\n          description: scheduleId\n          name: scheduleId\n          schema:\n            type: integer\n          required: true\n        - in: path\n          description: dataset's identifier\n          name: datasetId\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Returns all files associated with a dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/datafilesResponse'\n        '400':\n          $ref: '#/components/responses/error400'\n  # '/datasets':\n  #   get:\n  #     summary: Returns a set of datasets given a PID\n  #     parameters:\n  #       - in: query\n  #         description: PID\n  #         name: PID\n  #         schema:\n  #           type: string\n  #         example: 10.15151/example\n  #         required: true\n  #     responses:\n  #       '200':\n  #         description: Returns a set of datasets given a PID\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/datasetResponse'\n  #       '400':\n  #         $ref: '#/components/responses/error400'\n  #       '500':\n  #         $ref: '#/components/responses/error500'\n  '/proposals/{proposalId}/schedules/{scheduleId}/datasets/{datasetId}/status':\n    get:\n      description: Return the archive status of the data files specified by the datasetId along with a sessionId.\n      parameters:\n        - in: path\n          description: proposal's identifier\n          name: proposalId\n          schema:\n            type: integer\n          required: true\n        - in: path\n          description: schedule's identifier\n          name: scheduleId\n          schema:\n            type: integer\n          required: true\n        - in: path\n          description: dataset's identifier\n          name: datasetId\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Returns archive status for a dataset\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/status'\n        '401':\n          $ref: '#/components/responses/error401'\n        '500':\n          $ref: '#/components/responses/error500'\n  '/instruments':\n    get:\n      summary: Returns all instruments for the facility\n      responses:\n        '200':\n          description: 'Returns all instruments for the facility'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/instrumentsResponse'\n  '/info':\n    get:\n      summary: Returns information on the API implementation at the facility and includes a list of searchable keywords\n      responses:\n        '200':\n          description: 'Returns information on the API implementation at the facility and includes a list of searchable keywords'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/infoResponse'\ncomponents:\n  schemas:\n    proposalsResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaWithPagination'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/proposal'\n        links:\n          $ref: '#/components/schemas/links'\n    proposalResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/meta'\n        data:\n          $ref: '#/components/schemas/proposal'\n    instrumentsResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/meta'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/instrument'\n    schedulesResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/meta'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/schedule'\n    datasetsResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaWithPagination'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/dataset'\n        links:\n          $ref: '#/components/schemas/links'\n    datasetResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/meta'\n        data:\n          $ref: '#/components/schemas/dataset'\n    datafilesResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaWithPagination'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/datafile'\n        links:\n          $ref: '#/components/schemas/links'\n    infoResponse:\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/meta'\n        data:\n          type: object\n          properties:\n            version:\n              type: string\n            keywords:\n              type: array\n              items:\n                type: string\n    metaWithPagination:\n      externalDocs:\n        description: An example of pagination with the response data\n        url: https://jsonapi.org/examples/#pagination\n      type: object\n      properties:\n        institute:\n          type: string\n        page:\n          type: number\n        pageSize:\n          type: number\n        totalPages:\n          type: number\n    meta:\n      type: object\n      properties:\n        institute:\n          type: string\n    links:\n      type: object\n      properties:\n        self:\n          type: string\n        prev:\n          type: string\n        next:\n          type: string\n        first:\n          type: string\n        last:\n          type: string\n    proposal:\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n        summary:\n          type: string\n        doi:\n          type: string\n        startDate:\n          type: string\n        endDate:\n          type: string\n        releaseDate:\n          type: string\n        name:\n          type: string\n        parameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              value:\n                type: string\n        members:\n          type: array\n          items:\n            $ref: '#/components/schemas/member'\n        schedules:\n          type: array\n          items:\n            $ref: '#/components/schemas/schedule'\n    schedule:\n      type: object\n      properties:\n        id:\n          type: string\n        proposal:\n          required:\n            - name\n            - id\n          properties:\n            name:\n              type: string\n            id:\n              type: number\n            link:\n              type: string\n          type: object\n        startDate:\n          type: string\n        endDate:\n          type: string\n        doi:\n          type: string\n        instrument:\n          $ref: '#/components/schemas/instrument'\n    instrument:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n    member:\n      properties:\n        person:\n          $ref: '#/components/schemas/person'\n        affiliation:\n          $ref: '#/components/schemas/laboratory'\n        role:\n          type: string\n    person:\n      properties:\n        id:\n          type: number\n        orcid:\n          type: string\n        researcherId:\n          type: string\n        publicationName:\n          type: string\n        name:\n          type: string\n        surname:\n          type: string\n    laboratory:\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        address:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n    datafile:\n      required:\n        - id\n      properties:\n        id:\n          type: number\n        fileSize:\n          type: number\n        path:\n          type: string\n        name:\n          type: string\n    dataset:\n      required:\n        - parameters\n        - proposal\n        - id\n        - name\n        - startDate\n        - endDate\n        - location\n      properties:\n        parameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              value:\n                type: string\n        schedule:\n          $ref: '#/components/schemas/schedule'\n        # schedule:\n        #   required:\n        #     - id\n        #   properties:\n        #     id:\n        #       type: number\n        #     link:\n        #       type: string\n        #   type: object\n        id:\n          type: string\n        name:\n          type: string\n        owner:\n          type: string\n        contactEmail:\n          type: string\n        orcidOfOwner:\n          type: string\n        license:\n          type: string\n        embargoEndDate:\n          type: string\n        startDate:\n          type: string\n        endDate:\n          type: string\n        size:\n          $ref: '#/components/schemas/measurement'\n        path:\n          type: string\n        technique:\n          type: string\n        sampleName:\n          type: string\n        chemicalFormula:\n          type: string\n        wavelength:\n          $ref: '#/components/schemas/measurement'\n    status:\n      type: string\n      enum:\n        - ONLINE\n        - RESTORING\n        - ARCHIVED\n    measurement:\n      required:\n        - value\n      properties:\n        value:\n          type: number\n        units:\n          type: string\n  responses:\n    error400:\n      description : Bad request. Some parameters are missing.\n    error401:\n      description: Authentication required. The user is not logged in the server.\n    error403:\n      description: Action not allowed for this user\n    error404:\n      description: Requested item(s) not found\n    error500:\n      description: An error occured on the server side.\n",
			"canonicalURL": "/github.com/panosc-eu/panosc@c6f82a229ec579fe85364f146ee4606f28058dd5/-/blob/Work%20Packages/WP3%20Data%20catalogue%20services/api/documentation/panosc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/panosc-eu/panosc/blob/c6f82a229ec579fe85364f146ee4606f28058dd5/Work Packages/WP3 Data catalogue services/api/documentation/panosc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}