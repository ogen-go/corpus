{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/finos/symphony-api-spec"
		},
		"file": {
			"name": "symphony-common-definitions.yaml",
			"size": 0,
			"path": "profile-manager/symphony-common-definitions.yaml",
			"byteSize": 10021,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Symphony API - Common Objects\n  description: A set of standard objects that should be used by all microservices when defining their API contracts\n\npaths: {}\n\ncomponents:\n  schemas:\n    CommonProperties:\n      type: object\n      description: Properties common to all resources\n      properties:\n        id:\n          description: Unique ID of the resource\n          type: string\n        eTag:\n          description: \u003e-\n            Unique tag for current version of the object. Should be used with \"If-Match\" header to prevent lost updates.\n          type: string\n        createdBy:\n          description: ID of the user who created this resouces\n          type: string\n        createdDate:\n          description: Date/time resouces was created in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)\n          type: string\n          format: 'date-time'\n        updatedBy:\n          description: ID of the user who last updated this resouces\n          type: string\n        updatedDate:\n          description: Date/time of last update in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)\n          type: string\n          format: 'date-time'\n\n    Error:\n      description: Common error response body\n      required:\n        - code\n        - message\n      properties:\n        code:\n          description: \u003e-\n            An internal code that can be used by support/developers to quickly locate the line of code that generated\n            the error response.\n          type: string\n        message:\n          description: A human-readable error message\n          type: string\n        context:\n          description: A name-value map of variables and their value necessary to construct the message\n          type: object\n          additionalProperties:\n            type: string\n        details:\n          description: Additional data that might be included\n          type: object\n\n    PagedResponse:\n      description: Common top level object defining envelope for endpoints that return paged data\n      required:\n        - data\n        - pagination\n      properties:\n        data:\n          description: A page of data.  Type depends on resource being accessed.\n          type: array\n          items:\n            type: object\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n\n    Pagination:\n      description: Pagination information\n      required:\n        - cursors\n      properties:\n        previous:\n          description: \u003e-\n            Path to retrieve the previous page of data. If not present, the current page is the first page of data.\n          type: string\n        next:\n          description: \u003e-\n            Path to retrieve the next page of data. If not present, the current page is the last page of data.\n          type: string\n        cursors:\n          $ref: '#/components/schemas/PaginationCursors'\n\n    PaginationCursors:\n      description: Cursors for pagination\n      properties:\n        before:\n          description: \u003e-\n            Cursor that points to the start of the current page of data.  If not present, the current page is\n            the first page.\n          type: string\n        after:\n          description: \u003e-\n            Cursor that points to the end of the current page of data.  If not present, the current page is\n            the last page.\n          type: string\n\n    JsonPatch:\n      type: array\n      items:\n        $ref: \"#/components/schemas/PatchOperation\"\n    PatchOperation:\n      description: A JSONPatch operation as defined by RFC 6902\n      properties:\n        op:\n          type: string\n          description: The operation to be performed\n          enum:\n            - \"add\"\n            - \"remove\"\n            - \"replace\"\n            - \"move\"\n            - \"copy\"\n            - \"test\"\n        path:\n          type: string\n          description: A JSON-Pointer\n        value:\n          type: object\n          description: The value to be used within the operations.\n        from:\n          type: string\n          description: A string containing a JSON Pointer value.\n\n  parameters:\n    idPathParameter:\n      name: id\n      in: path\n      required: true\n      description: The id of the resource to retrieve\n      schema:\n        type: string\n\n    limitParameter:\n      name: limit\n      in: query\n      required: false\n      description: \u003e-\n        Specifies the maximum number of objects to return. It is possible that fewer than the specified number is\n        returned, either due to reaching the end of the record set or due to data access rules that filter results\n        of the back end query.  The number of returned objects should not be used to determine if there are more\n        objects to retrieve.  Instead, the presence of the \"next\" and \"previous\" (see below) fields should be used.\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 100\n        default: 100\n\n    beforeParameter:\n      name: before\n      in: query\n      required: false\n      description: \u003e-\n        Cursor value that specifies that the returned page of data should consist of records that come before this\n        cursor value (essentially the \"previous\" page).\n      schema:\n        type: string\n\n    afterParameter:\n      name: after\n      in: query\n      required: false\n      description: \u003e-\n        Cursor value that specifies that the returned page of data should consist of records that come after this\n        cursor value (essentially the \"next\" page).\n      schema:\n        type: string\n\n    fieldsParameter:\n      name: fields\n      in: query\n      required: false\n      description: \u003e-\n        Specifies which resource fields to include.  If present, only the named fields are included.\n        If not present, all fields are included.  The \"id\" and \"eTag\" fields are always included.\n      example: name,type\n      schema:\n        type: string\n\n    expandParameter:\n      name: expand\n      in: query\n      required: false\n      description: \u003e-\n        Specifies which ID fields can be expanded to include the whole object for which the ID is a reference.  Value\n        is a comma-separated list of fields containing IDs.\n      example: userId,itemIds\n      schema:\n        type: string\n\n    sortParameter:\n      name: sort\n      in: query\n      required: false\n      description: \u003e-\n        Specifies which field to use for sorting returned records when more than one record is returned.  Syntax is:\n        sort=[+|-]\u003cfield name\u003e, where '+' indicates ascending order and '-' indicates descending order.  This parameter\n        is used instead of 'sortOrder' when the value upon which to sort records is selectable by the caller.  Only\n        one of 'sort' or 'sortOrder' can be included in the query.  See endpoint description for the list of fields\n        that can be used with this parameter.\n      example: +createdDate\n      schema:\n        type: string\n\n    sortOrderParameter:\n      name: sortOrder\n      in: query\n      required: false\n      description: \u003e-\n        Specifies the sort order of the returned results.  This parameter is used instead of 'sort' parameter when\n        the value upon which to sort records is not selectable by the caller. Only one of 'sort' or 'sortOrder' can be\n        included in the query.  Possible values are 'asc' or 'desc'.\n      example: asc\n      schema:\n        type: string\n\n    qlParameter:\n      name: ql\n      in: query\n      required: false\n      description: \u003e-\n        Filter query using RSQL syntax.  Fields available for filtering should be specified in the documentation\n        for each resource.\n      example: name==\"Kill Bill\";year=gt=2003\n      schema:\n        type: string\n\n    ifMatchParameter:\n      in: header\n      name: If-Match\n      description: \u003e-\n        Current ETag value for the resource being mutated.  If the ETag value of the resource on the server doesn't\n        match the value from the header, the resource will not be modified and a HTTP 412 response will be returned\n        by the server.  The caller should GET the most recent version of the resource and try the request again.\n        Only a single ETag value is supported.\n      required: true\n      allowEmptyValue: false\n      schema:\n        type: string\n\n    beforeDateParameter:\n      name: beforeDate\n      description: Date before which changes to a resource won't be considered.\n      in: query\n      required: false\n      schema:\n        type: string\n\n  headers:\n    ETagHeader:\n      description: Unique identifier for a version of a resource\n      schema:\n        type: string\n    locationHeader:\n      description: URI for the resource\n      schema:\n        type: string\n\n  requestBodies:\n    JsonPatchBody:\n      description: Body for a JSON Patch request\n      required: false\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PagedResponse'\n\n  responses:\n    SuccessNoContent:\n      description: Successful response.  No response body.\n\n    Unauthorized:\n      description: Unauthorized. Returned if JWT token verification failed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: Not found.  Returned if specified key is not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    PreconditionFailed:\n      description: Precondition failed.  Returned if specified \"If-Match\" header doesn't match \"ETag\" from DB record to be deleted.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: Forbidden.  Returned if the caller doesn't have the required entitlements to call an endpoint.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/finos/symphony-api-spec@46abc03ad7225ebc32439c06920019c9d0fb0814/-/blob/profile-manager/symphony-common-definitions.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/finos/symphony-api-spec/blob/46abc03ad7225ebc32439c06920019c9d0fb0814/profile-manager/symphony-common-definitions.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}