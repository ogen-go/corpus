{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-serverless-saas-workshop"
		},
		"file": {
			"name": "packaged.yaml",
			"size": 0,
			"path": "Solution/Lab1/event-engine-assets/packaged.yaml",
			"byteSize": 33057,
			"content": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: 'Lab1 - Basic Serverless Application'\n\nParameters:\n  EEAssetsBucket:\n    Description: \"Region-specific assets S3 bucket name (e.g. ee-assets-prod-us-east-1)\"\n    Type: String\n    Default: \"aws-sam-cli-managed-default-samclisourcebucket-8tf6bmi4rdcx\"\n  EEAssetsKeyPrefix:\n    Description: \"S3 key prefix where this modules assets are stored. (e.g. modules/my_module/v1/)\"\n    Type: String\n    Default: \"serverless-saas/\"\n  StageName:\n    Type: String\n    Default: prod\n    Description: Stage Name for the api\n\nGlobals:\n  Function:\n    Timeout: 29\n    Layers:\n    - Fn::Sub: arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14\n    Environment:\n      Variables:\n        LOG_LEVEL: DEBUG\n  \nResources:\n  ServerlessSaaSLayers:\n    Type: AWS::Serverless::LayerVersion\n    Properties:\n      LayerName: serverless-saas-workshoplab1\n      Description: Utilities for project\n      ContentUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}1b6d1796b5948e393749602691c77e44\n      CompatibleRuntimes:\n      - python3.8\n      LicenseInfo: MIT\n      RetentionPolicy: Retain\n    Metadata:\n      BuildMethod: python3.8\n  ProductTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n      - AttributeName: productId\n        AttributeType: S\n      KeySchema:\n      - AttributeName: productId\n        KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: Product-Lab1\n  OrderTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n      - AttributeName: orderId\n        AttributeType: S\n      KeySchema:\n      - AttributeName: orderId\n        KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: Order-Lab1\n  ProductFunctionExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: product-function-execution-role-lab1\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\n      Policies:\n      - PolicyName: product-function-policy-lab1\n        PolicyDocument:\n          Version: 2012-10-17\n          Statement:\n          - Effect: Allow\n            Action:\n            - dynamodb:GetItem\n            - dynamodb:UpdateItem\n            - dynamodb:PutItem\n            - dynamodb:DeleteItem\n            - dynamodb:Query\n            - dynamodb:Scan\n            Resource:\n            - Fn::GetAtt:\n              - ProductTable\n              - Arn\n  GetProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}3f9284a8b1fb9547d59e56cc8560b94c\n      Handler: product_service.get_product\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - ProductFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ProductService\n          PRODUCT_TABLE_NAME:\n            Ref: ProductTable\n  GetProductsFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}3f9284a8b1fb9547d59e56cc8560b94c\n      Handler: product_service.get_products\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - ProductFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ProductService\n          PRODUCT_TABLE_NAME:\n            Ref: ProductTable\n  CreateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}3f9284a8b1fb9547d59e56cc8560b94c\n      Handler: product_service.create_product\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - ProductFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ProductService\n          PRODUCT_TABLE_NAME:\n            Ref: ProductTable\n  UpdateProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}3f9284a8b1fb9547d59e56cc8560b94c\n      Handler: product_service.update_product\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - ProductFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ProductService\n          PRODUCT_TABLE_NAME:\n            Ref: ProductTable\n  DeleteProductFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: ProductFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}3f9284a8b1fb9547d59e56cc8560b94c\n      Handler: product_service.delete_product\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - ProductFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ProductService\n          PRODUCT_TABLE_NAME:\n            Ref: ProductTable\n  OrderFunctionExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: order-function-execution-role-lab1\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess\n      Policies:\n      - PolicyName: order-function-policy-lab1\n        PolicyDocument:\n          Version: 2012-10-17\n          Statement:\n          - Effect: Allow\n            Action:\n            - dynamodb:GetItem\n            - dynamodb:UpdateItem\n            - dynamodb:PutItem\n            - dynamodb:DeleteItem\n            - dynamodb:Query\n            - dynamodb:Scan\n            Resource:\n            - Fn::GetAtt:\n              - OrderTable\n              - Arn\n  GetOrdersFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}ac28465dbac64f71e4739d551119c420\n      Handler: order_service.get_orders\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - OrderFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: OrderService\n          ORDER_TABLE_NAME:\n            Ref: OrderTable\n  GetOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}ac28465dbac64f71e4739d551119c420\n      Handler: order_service.get_order\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - OrderFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: OrderService\n          ORDER_TABLE_NAME:\n            Ref: OrderTable\n  CreateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}ac28465dbac64f71e4739d551119c420\n      Handler: order_service.create_order\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - OrderFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: OrderService\n          ORDER_TABLE_NAME:\n            Ref: OrderTable\n  UpdateOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}ac28465dbac64f71e4739d551119c420\n      Handler: order_service.update_order\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - OrderFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: OrderService\n          ORDER_TABLE_NAME:\n            Ref: OrderTable\n  DeleteOrderFunction:\n    Type: AWS::Serverless::Function\n    DependsOn: OrderFunctionExecutionRole\n    Properties:\n      CodeUri: \n        Bucket: !Ref EEAssetsBucket\n        Key: !Sub ${EEAssetsKeyPrefix}ac28465dbac64f71e4739d551119c420\n      Handler: order_service.delete_order\n      Runtime: python3.8\n      Tracing: Active\n      Role:\n        Fn::GetAtt:\n        - OrderFunctionExecutionRole\n        - Arn\n      Layers:\n      - Ref: ServerlessSaaSLayers\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: OrderService\n          ORDER_TABLE_NAME:\n            Ref: OrderTable\n  ApiGatewayAccessLogs:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: /aws/api-gateway/access-logs-serverless-saas-workshop-lab1-api\n      RetentionInDays: 30\n  ApiGatewayApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      MethodSettings:\n      - DataTraceEnabled: true\n        LoggingLevel: INFO\n        MetricsEnabled: true\n        ResourcePath: /*\n        HttpMethod: '*'\n      AccessLogSetting:\n        DestinationArn:\n          Fn::GetAtt:\n          - ApiGatewayAccessLogs\n          - Arn\n        Format: '{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\",\n          \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\n          \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\n          \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\"\n          }'\n      TracingEnabled: true\n      DefinitionBody:\n        openapi: 3.0.1\n        info:\n          title: serverless-saas-workshop-lab1\n        basePath:\n          Fn::Join:\n          - ''\n          - - /\n            - Ref: StageName\n        schemes:\n        - https\n        paths:\n          /order/{id}:\n            get:\n              summary: Returns a order\n              description: Return a order by a order id.\n              produces:\n              - application/json\n              parameters:\n              - name: id\n                in: path\n                required: true\n                type: string\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - GetOrderFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            put:\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - UpdateOrderFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            delete:\n              summary: Deletes a order\n              description: Deletes a order by a order id.\n              produces:\n              - application/json\n              parameters:\n              - name: id\n                in: path\n                required: true\n                type: string\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - DeleteOrderFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /orders:\n            get:\n              summary: Returns all orders\n              description: Returns all orders.\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - GetOrdersFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /order:\n            post:\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - CreateOrderFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /product/{id}:\n            get:\n              summary: Returns a product\n              description: Return a product by a product id.\n              produces:\n              - application/json\n              parameters:\n              - name: id\n                in: path\n                required: true\n                type: string\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - GetProductFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            put:\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - UpdateProductFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            delete:\n              summary: Deletes a product\n              description: Deletes a product by a product id.\n              produces:\n              - application/json\n              parameters:\n              - name: id\n                in: path\n                required: true\n                type: string\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - DeleteProductFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /products:\n            get:\n              summary: Returns all products\n              description: Returns all products.\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - GetProductsFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n          /product:\n            post:\n              produces:\n              - application/json\n              responses: {}\n              x-amazon-apigateway-integration:\n                uri:\n                  Fn::Join:\n                  - ''\n                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/\n                    - Fn::GetAtt:\n                      - CreateProductFunction\n                      - Arn\n                    - /invocations\n                httpMethod: POST\n                type: aws_proxy\n            options:\n              consumes:\n              - application/json\n              produces:\n              - application/json\n              responses:\n                '200':\n                  description: 200 response\n                  schema:\n                    $ref: '#/definitions/Empty'\n                  headers:\n                    Access-Control-Allow-Origin:\n                      type: string\n                    Access-Control-Allow-Methods:\n                      type: string\n                    Access-Control-Allow-Headers:\n                      type: string\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: 200\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''\n                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''\n                      method.response.header.Access-Control-Allow-Origin: '''*'''\n                passthroughBehavior: when_no_match\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: mock\n      StageName:\n        Ref: StageName\n  GetProductsLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - GetProductsFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  GetProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - GetProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  CreateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - CreateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  UpdateProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - UpdateProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  DeleteProductLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - DeleteProductFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  GetOrdersLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - GetOrdersFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  GetOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - GetOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  CreateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - CreateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  UpdateOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - UpdateOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  DeleteOrderLambdaApiGatewayExecutionPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Fn::GetAtt:\n        - DeleteOrderFunction\n        - Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn:\n        Fn::Join:\n        - ''\n        - - 'arn:aws:execute-api:'\n          - Ref: AWS::Region\n          - ':'\n          - Ref: AWS::AccountId\n          - ':'\n          - Ref: ApiGatewayApi\n          - /*/*/*\n  CloudFrontOriginAccessIdentity:\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: Origin Access Identity for CloudFront Distribution\n  AppBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n  AppSiteReadPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket:\n        Ref: AppBucket\n      PolicyDocument:\n        Statement:\n        - Action: s3:GetObject\n          Effect: Allow\n          Resource:\n            Fn::Sub: arn:aws:s3:::${AppBucket}/*\n          Principal:\n            CanonicalUser:\n              Fn::GetAtt:\n              - CloudFrontOriginAccessIdentity\n              - S3CanonicalUserId\n  ApplicationSite:\n    Type: AWS::CloudFront::Distribution\n    Properties:\n      DistributionConfig:\n        CustomErrorResponses:\n        - ErrorCode: 403\n          ResponseCode: 200\n          ResponsePagePath: /index.html\n        - ErrorCode: 404\n          ResponseCode: 200\n          ResponsePagePath: /index.html\n        DefaultCacheBehavior:\n          AllowedMethods:\n          - DELETE\n          - GET\n          - HEAD\n          - OPTIONS\n          - PATCH\n          - POST\n          - PUT\n          Compress: true\n          DefaultTTL: 3600\n          ForwardedValues:\n            Cookies:\n              Forward: none\n            QueryString: false\n          MaxTTL: 86400\n          MinTTL: 60\n          TargetOriginId: lab1-tenantapp-s3origin\n          ViewerProtocolPolicy: allow-all\n        DefaultRootObject: index.html\n        Enabled: true\n        HttpVersion: http2\n        Origins:\n        - DomainName:\n            Fn::GetAtt:\n            - AppBucket\n            - RegionalDomainName\n          Id: lab1-tenantapp-s3origin\n          S3OriginConfig:\n            OriginAccessIdentity:\n              Fn::Join:\n              - ''\n              - - origin-access-identity/cloudfront/\n                - Ref: CloudFrontOriginAccessIdentity\n        PriceClass: PriceClass_All\nOutputs:\n  APIGatewayURL:\n    Description: API Gateway endpoint URL for API\n    Value:\n      Fn::Join:\n      - ''\n      - - Fn::Sub: https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/\n        - Ref: StageName\n        - /\n  ApplicationSite:\n    Description: The name of the CloudFront url for Tenant Management site\n    Value:\n      Fn::GetAtt:\n      - ApplicationSite\n      - DomainName\n  AppBucket:\n    Description: The name of the bucket for uploading the Tenant Management site to\n    Value:\n      Ref: AppBucket\n",
			"canonicalURL": "/github.com/aws-samples/aws-serverless-saas-workshop@5731506f22c965f231a6f7065edaa8cc949344ef/-/blob/Solution/Lab1/event-engine-assets/packaged.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-serverless-saas-workshop/blob/5731506f22c965f231a6f7065edaa8cc949344ef/Solution/Lab1/event-engine-assets/packaged.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}