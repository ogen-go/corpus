{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/numary/ledger"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "pkg/api/controllers/swagger.yaml",
			"byteSize": 31780,
			"content": "openapi: 3.0.3\ninfo:\n  title: Ledger API\n  contact: {}\n  version: \"LEDGER_VERSION\"\n\npaths:\n  /_info:\n    get:\n      tags:\n        - server\n      summary: Show server information.\n      operationId: getInfo\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigInfoResponse'\n\n  /{ledger}/accounts:\n    head:\n      summary: Count the accounts from a ledger.\n      operationId: countAccounts\n      tags:\n      - accounts\n      parameters:\n      - name: ledger\n        in: path\n        description: Name of the ledger.\n        required: true\n        schema:\n          type: string\n          example: ledger001\n      - name: address\n        in: query\n        description: Filter accounts by address pattern (regular expression placed between ^ and $).\n        schema:\n          type: string\n          example: users:.+\n      - name: metadata\n        in: query\n        description: Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.\n        style: deepObject\n        explode: true\n        schema:\n          type: object\n          properties: {}\n        example: metadata[key]=value1\u0026metadata[a.nested.key]=value2\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Count:\n              schema:\n                type: integer\n    get:\n      summary: List accounts from a ledger.\n      description: List accounts from a ledger, sorted by address in descending order.\n      operationId: listAccounts\n      tags:\n        - accounts\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: after\n          in: query\n          description: Pagination cursor, will return accounts after given address, in descending order.\n          schema:\n            type: string\n            example: users:003\n        - name: address\n          in: query\n          description: Filter accounts by address pattern (regular expression placed between ^ and $).\n          schema:\n            type: string\n            example: users:.+\n        - name: metadata\n          in: query\n          description: Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.\n          style: deepObject\n          explode: true\n          schema:\n            type: object\n            properties: {}\n          example: metadata[key]=value1\u0026metadata[a.nested.key]=value2\n        - name: balance\n          in: query\n          description: Filter accounts by their balance (default operator is gte)\n          schema:\n            type: integer\n            format: int64\n            example: 2400\n        - name: balance_operator\n          in: query\n          description: Operator used for the filtering of balances can be greater than/equal, less than/equal, greater than, less than, or equal\n          schema:\n            type: string\n            enum: [gte, lte, gt, lt, e]\n            example: gte\n        - name: pagination_token\n          in: query\n          description: |\n            Parameter used in pagination requests. Maximum page size is set to 15.\n            Set to the value of next for the next page of results. \n            Set to the value of previous for the previous page of results.\n            No other parameters can be set when the pagination token is set.\n          schema:\n            type: string\n            example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                required:\n                  - cursor\n                properties:\n                  cursor:\n                    allOf:\n                      - $ref: '#/components/schemas/Cursor'\n                      - properties:\n                          data:\n                            items:\n                              $ref: '#/components/schemas/Account'\n                            type: array\n                        type: object\n                        required:\n                          - data\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"no other query params can be set with 'pagination_token'\"\n\n  /{ledger}/accounts/{address}:\n    get:\n      summary: Get account by its address.\n      operationId: getAccount\n      tags:\n        - accounts\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: address\n          in: path\n          description: |\n            Exact address of the account. It must match the following regular expressions pattern:\n            ```\n            ^\\w+(:\\w+)*$\n            ```\n          required: true\n          schema:\n            type: string\n            example: users:001\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AccountWithVolumesAndBalances'\n                type: object\n                required:\n                  - data\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid account address format\"\n\n\n  /{ledger}/accounts/{address}/metadata:\n    post:\n      summary: Add metadata to an account.\n      operationId: addMetadataToAccount\n      tags:\n        - accounts\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: address\n          in: path\n          description: |\n            Exact address of the account. It must match the following regular expressions pattern:\n            ```\n            ^\\w+(:\\w+)*$\n            ```\n          required: true\n          schema:\n            type: string\n            example: users:001\n      requestBody:\n        description: metadata\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n        required: true\n      responses:\n        \"204\":\n          description: No Content\n          content: {}\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid account address format\"\n\n  /{ledger}/mapping:\n    get:\n      tags:\n        - mapping\n      operationId: getMapping\n      summary: Get the mapping of a ledger.\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingResponse'\n    put:\n      tags:\n        - mapping\n      operationId: updateMapping\n      summary: Update the mapping of a ledger.\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Mapping'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingResponse'\n      \n  /{ledger}/script:\n    post:\n      tags:\n        - script\n      operationId: runScript\n      summary: Execute a Numscript.\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: preview\n          in: query\n          description: Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.\n          schema:\n            type: boolean\n            example: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Script'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResult'\n      \n  /{ledger}/stats:\n    get:\n      tags:\n        - stats\n      operationId: readStats\n      summary: Get Stats\n      description: |\n        Get ledger stats (aggregate metrics on accounts and transactions)\n        The stats for account\n      parameters:\n        - name: ledger\n          in: path\n          description: name of the ledger\n          required: true\n          schema:\n            type: string\n            example: ledger001\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatsResponse'\n\n  /{ledger}/transactions:\n    head:\n      tags:\n      - transactions\n      summary: Count the transactions from a ledger.\n      operationId: countTransactions\n      parameters:\n      - name: ledger\n        in: path\n        description: Name of the ledger.\n        required: true\n        schema:\n          type: string\n          example: ledger001\n      - name: reference\n        in: query\n        description: Filter transactions by reference field.\n        schema:\n          type: string\n          example: ref:001\n      - name: account\n        in: query\n        description: Filter transactions with postings involving given account, either\n          as source or destination.\n        schema:\n          type: string\n          example: users:001\n      - name: source\n        in: query\n        description: Filter transactions with postings involving given account at source.\n        schema:\n          type: string\n          example: users:001\n      - name: destination\n        in: query\n        description: Filter transactions with postings involving given account at destination.\n        schema:\n          type: string\n          example: users:001\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Count:\n              schema:\n                type: integer\n    get:\n      tags:\n        - transactions\n      summary: List transactions from a ledger.\n      description: List transactions from a ledger, sorted by txid in descending order.\n      operationId: listTransactions\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: after\n          in: query\n          description: Pagination cursor, will return transactions after given txid\n            (in descending order).\n          schema:\n            type: string\n            example: 1234\n        - name: reference\n          in: query\n          description: Find transactions by reference field.\n          schema:\n            type: string\n            example: ref:001\n        - name: account\n          in: query\n          description: Find transactions with postings involving given account, either\n            as source or destination.\n          schema:\n            type: string\n            example: users:001\n        - name: source\n          in: query\n          description: Find transactions with postings involving given account at source.\n          schema:\n            type: string\n            example: users:001\n        - name: destination\n          in: query\n          description: Find transactions with postings involving given account at destination.\n          schema:\n            type: string\n            example: users:001\n        - name: start_time\n          in: query\n          description: |\n            Filter transactions that occurred after this timestamp.\n            The format is RFC3339 and is inclusive (for example, 12:00:01 includes the first second of the minute).\n          schema:\n            type: string\n            example:\n        - name: end_time\n          in: query\n          description: |\n            Filter transactions that occurred before this timestamp.\n            The format is RFC3339 and is exclusive (for example, 12:00:01 excludes the first second of the minute).\n          schema:\n            type: string\n        - name: pagination_token\n          in: query\n          description: |\n            Parameter used in pagination requests. Maximum page size is set to 15.\n            Set to the value of next for the next page of results. \n            Set to the value of previous for the previous page of results.\n            No other parameters can be set when the pagination token is set.\n          schema:\n            type: string\n            example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - cursor\n                properties:\n                  cursor:\n                    allOf:\n                      - $ref: '#/components/schemas/Cursor'\n                      - type: object\n                        properties:\n                          data:\n                            type: array\n                            items:\n                              $ref: '#/components/schemas/Transaction'\n                        required:\n                          - data\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"no other query params can be set with 'pagination_token'\"\n    post:\n      tags:\n        - transactions\n      summary: Create a new transaction to a ledger.\n      operationId: createTransaction\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: preview\n          in: query\n          description: Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.\n          schema:\n            type: boolean\n            example: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransactionData'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionsResponse'\n        \"304\":\n          description: Not modified (when preview is enabled)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionsResponse'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"transaction has no postings\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"CONFLICT\"\n                  error_message:\n                    type: string\n                    example: \"conflict error on reference\"\n\n  /{ledger}/transactions/{txid}:\n    get:\n      tags:\n        - transactions\n      summary: Get transaction from a ledger by its ID.\n      operationId: getTransaction\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: txid\n          in: path\n          description: Transaction ID.\n          required: true\n          schema:\n            type: integer\n            example: 1234\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionResponse'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid transaction ID\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"NOT_FOUND\"\n                  error_message:\n                    type: string\n                    example: \"transaction not found\"\n\n  /{ledger}/transactions/{txid}/metadata:\n    post:\n      tags:\n        - transactions\n      summary: Set the metadata of a transaction by its ID.\n      operationId: addMetadataOnTransaction\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: txid\n          in: path\n          description: Transaction ID.\n          required: true\n          schema:\n            type: integer\n            example: 1234\n      requestBody:\n        description: metadata\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        \"204\":\n          description: No Content\n          content: {}\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid transaction ID\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"NOT_FOUND\"\n                  error_message:\n                    type: string\n                    example: \"transaction not found\"\n\n  /{ledger}/transactions/{txid}/revert:\n    post:\n      tags:\n        - transactions\n      operationId: revertTransaction\n      summary: Revert a ledger transaction by its ID.\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n        - name: txid\n          in: path\n          description: Transaction ID.\n          required: true\n          schema:\n            type: integer\n            example: 1234\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionResponse'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid transaction ID\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"NOT_FOUND\"\n                  error_message:\n                    type: string\n                    example: \"transaction not found\"\n\n  /{ledger}/transactions/batch:\n    post:\n      tags:\n        - transactions\n      summary: Create a new batch of transactions to a ledger.\n      operationId: CreateTransactions\n      parameters:\n        - name: ledger\n          in: path\n          description: Name of the ledger.\n          required: true\n          schema:\n            type: string\n            example: ledger001\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transactions'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionsResponse'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"VALIDATION\"\n                  error_message:\n                    type: string\n                    example: \"invalid transactions format\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error_code\n                properties:\n                  error_code:\n                    type: string\n                    example: \"CONFLICT\"\n                  error_message:\n                    type: string\n                    example: \"conflict error on reference\"\n\nsecurity:\n  - basicAuth: []\n\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    Config:\n      type: object\n      properties:\n        storage:\n          $ref: '#/components/schemas/LedgerStorage'\n      required:\n        - storage\n    Metadata:\n      type: object\n      nullable: true\n      additionalProperties: {}\n      example: { admin: true, a: { nested: { key: value}} }\n    ConfigInfo:\n      type: object\n      properties:\n        config:\n          $ref: '#/components/schemas/Config'\n        server:\n          type: string\n        version:\n          type: string\n      required:\n        - config\n        - server\n        - version\n    LedgerStorage:\n      type: object\n      properties:\n        driver:\n          type: string\n        ledgers:\n          type: array\n          items:\n            type: string\n      required:\n        - driver\n        - ledgers\n    ScriptResult:\n      type: object\n      properties:\n        details:\n          type: string\n        error_code:\n          type: string\n          enum:\n            - INTERNAL\n            - INSUFFICIENT_FUND\n            - COMPILATION_FAILED\n            - NO_SCRIPT\n        error_message:\n          type: string\n        transaction:\n          $ref: '#/components/schemas/Transaction'\n    Account:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: users:001\n        type:\n          type: string\n          example: virtual\n        metadata:\n          type: object\n          properties: {}\n          example: { admin: true, a: { nested: { key: value}} }\n    AccountWithVolumesAndBalances:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: users:001\n        type:\n          type: string\n          example: virtual\n        metadata:\n          type: object\n          properties: {}\n          example: { admin: true, a: { nested: { key: value}} }\n        volumes:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: integer\n          example: { COIN: { input: 100, output: 0 } }\n        balances:\n          type: object\n          additionalProperties:\n            type: integer\n          example:\n            COIN: 100\n    Contract:\n      type: object\n      properties:\n        account:\n          type: string\n          example: users:001\n        expr:\n          type: object\n      required:\n        - accounts\n        - expr\n    Mapping:\n      type: object\n      nullable: true\n      required:\n        - contracts\n      properties:\n        contracts:\n          type: array\n          items:\n            $ref: '#/components/schemas/Contract'\n    Posting:\n      type: object\n      properties:\n        amount:\n          type: integer\n          example: 100\n        asset:\n          type: string\n          example: COIN\n        destination:\n          type: string\n          example: users:002\n        source:\n          type: string\n          example: users:001\n      required:\n        - amount\n        - asset\n        - destination\n        - source\n    Script:\n      type: object\n      properties:\n        plain:\n          type: string\n          example: \"vars {\\naccount $user\\n}\\nsend [COIN 10] (\\n\\tsource = @world\\n\\tdestination = $user\\n)\\n\"\n        vars:\n          type: object\n          properties: {}\n          example: {\n            \"vars\": {\n              \"user\": \"users:042\"\n            }\n          }\n      required:\n        - plain\n    Transaction:\n      type: object\n      properties:\n        postings:\n          type: array\n          items:\n            $ref: '#/components/schemas/Posting'\n        reference:\n          type: string\n          example: ref:001\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        timestamp:\n          type: string\n          format: date-time\n        txid:\n          type: integer\n        preCommitVolumes:\n          $ref: '#/components/schemas/AggregatedVolumes'\n        postCommitVolumes:\n          $ref: '#/components/schemas/AggregatedVolumes'\n      required:\n        - postings\n        - timestamp\n        - txid\n    TransactionData:\n      type: object\n      properties:\n        postings:\n          type: array\n          items:\n            $ref: '#/components/schemas/Posting'\n        reference:\n          type: string\n          example: ref:001\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      required:\n        - postings\n    Transactions:\n      required:\n        - transactions\n      type: object\n      properties:\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransactionData'\n    Stats:\n      type: object\n      properties:\n        accounts:\n          type: integer\n        transactions:\n          type: integer\n      required:\n        - accounts\n        - transactions\n    Cursor:\n      type: object\n      required:\n        - page_size\n      properties:\n        page_size:\n          type: integer\n          example: 1\n        has_more:\n          type: boolean\n          example: false\n        previous:\n          type: string\n          example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=\n        next:\n          type: string\n          example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==\n\n    TransactionsResponse:\n      type: object\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/Transaction'\n          type: array\n      required:\n        - data\n    TransactionResponse:\n      properties:\n        data:\n          $ref: '#/components/schemas/Transaction'\n      type: object\n      required:\n        - data\n    StatsResponse:\n      properties:\n        data:\n          $ref: '#/components/schemas/Stats'\n      type: object\n      required:\n        - data\n    MappingResponse:\n      properties:\n        data:\n          $ref: '#/components/schemas/Mapping'\n      type: object\n    ConfigInfoResponse:\n      properties:\n        data:\n          $ref: '#/components/schemas/ConfigInfo'\n      type: object\n      required:\n        - data\n    Volume:\n      type: object\n      properties:\n        input:\n          type: number\n        output:\n          type: number\n        balance:\n          type: number\n      required:\n      - input\n      - output\n      example:\n        input: 100\n        output: 20\n        balance: 80\n    Volumes:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/Volume'\n      example:\n        USD:\n          input: 100\n          output: 10\n          balance: 90\n        EUR:\n          input: 100\n          output: 10\n          balance: 90\n    AggregatedVolumes:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/Volumes'\n      example:\n        \"orders:1\":\n          \"USD\":\n            input: 100\n            output: 10\n            balance: 90\n        \"orders:2\":\n          \"USD\":\n            input: 100\n            output: 10\n            balance: 90\n    ErrorCode:\n      type: string\n      enum:\n        - INTERNAL\n        - INSUFFICIENT_FUND\n        - VALIDATION\n        - CONFLICT\n    ErrorResponse:\n      type: object\n      required:\n        - error_code\n      properties:\n        error_code:\n          $ref: '#/components/schemas/ErrorCode'\n        error_message:\n          type: string\n          example: internal error\n",
			"canonicalURL": "/github.com/numary/ledger@c2f6637df0a9c2dbfb51ffb497dd9644aee12209/-/blob/pkg/api/controllers/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/numary/ledger/blob/c2f6637df0a9c2dbfb51ffb497dd9644aee12209/pkg/api/controllers/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}