{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gbrueckl/Databricks.API.PowerShell"
		},
		"file": {
			"name": "token-management-aws.yaml",
			"size": 0,
			"path": "Docs/OpenAPISpecs/token-management-aws.yaml",
			"byteSize": 14812,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2.0.0\n  title: Token Management API\n  description:\n    \"The Token Management API has several groups of endpoints:\n\n    * **[Workspace configuration for tokens](#tag/Workspace-configuration-for-tokens)** — Set maximum lifetime for a token. Enable or disable personal access tokens for the workspace.\\n\n\n    * **[Token management](#tag/Token-management)** — View or revoke existing tokens.\\n\n\n    To grant or revoke user and group permissions to use tokens, instead use the [Permissions API](https://docs.databricks.com/dev-tools/api/latest/permissions.html).\\n\n    \n    **Important:** To access Databricks REST APIs, you must [authenticate](https://docs.databricks.com/dev-tools/api/latest/authentication.html).\"\n    # change URL for azure\ntags:\n  - name: Workspace configuration for tokens\n    description: \n      \"There are multiple token management tasks you can do with the APIs in this group:\n      \n      * Manage the lifetime of new tokens. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set. To review existing tokens, see the [get tokens API](#operation/get-tokens).\\n\n\n      * Enable or disable personal access tokens for this workspace.\"\n  - name: Token management\n    description: \n      \"Manage all the tokens in this workspace.\"\n\nservers:\n  - url: https://\u003cdatabricks-instance\u003e/api/2.0\n    description: \u003e-\n      In the URL, substitute `\u003cdatabricks-instance\u003e` with the domain name of your\n      deployment. Use the form `\u003caccount\u003e.cloud.databricks.com`.\npaths:\n  /workspace-conf:\n    description:\n      \"This endpoint configures the maximum token lifetime for any token in a workspace.\"\n      # ^^ endpoint description outside verb get/post/etc is not exposed in current redoc version\n    get:\n      tags:\n        - Workspace configuration for tokens\n      summary: Get workspace config for tokens (max lifetime, enabled/disabled)\n      operationId: get-configuration\n      description:\n        \"This request gets different information based on what you pass to `keys` parameter:\\n\n        \n        * `enableTokensConfig` — Enable or disable personal access tokens for this workspace.\\n\n\n        * `maxTokenLifetimeDays` — Get the maximum token lifetime in days that a new token can have in a workspace. If set, users cannot create new tokens with a lifetime greater than this value. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set. To review existing tokens, see the [get tokens API](#operation/get-tokens).\"\n      parameters:\n        - name: keys\n          in: query\n          required: true\n          schema:\n            type: string\n            enum:\n              - maxTokenLifetimeDays\n              - enableTokensConfig\n          description: \n            \"Pass one of the following:\\n\n            \n            * `enableTokensConfig` — Enable or disable personal access tokens for this workspace.\\n\n\n            * `maxTokenLifetimeDays` — Get the maximum token lifetime in days that a new token can have in a workspace. If set, users cannot create new tokens with a lifetime greater than this value. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set. To review existing tokens, see the [get tokens API](#operation/get-tokens).\"\n\n          example: maxTokenLifetimeDays\n      responses:\n        200:\n          description: Getting token lifetime status was returned successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkspaceConfObject'\n        400:\n          $ref: '#/components/responses/WorkspaceConfBadRequest'\n    patch:\n      tags:\n        - Workspace configuration for tokens\n      summary: Set workspace config for tokens (max lifetime, enabled/disabled)\n      operationId: set-configuration\n      description:\n        \"This request sets different workspace settings based on the parameters that you set. For example, enable or disable personal access tokens, or set maximum token lifetime for new tokens. See parameters for details.\"\n      requestBody:\n        description: \u003e-\n          To configure maximum token lifetime in days set an integer value for the number of days.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkspaceConfObject'\n      responses:\n        204:\n          description: Configuring maximum token lifetime was successful.\n        400:\n          $ref: '#/components/responses/WorkspaceConfBadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalError'\n\n  /token-management/tokens:\n    description: \n      \"This endpoint enables administrators to get all tokens and delete tokens for other users. Admins can either get every token, get a specific token by ID, or get all tokens for a particular user.\"\n      # ^^ endpoint description outside verb get/post/etc is not exposed in current redoc version\n    get:\n      tags:\n        - Token management\n      summary: Get all tokens in this workspace (optionally filter by user).\n      operationId: get-tokens\n      description:\n        \"List all tokens belonging to a workspace or a user.\"\n        # presumably admins can see everything. what about non-admins, can they see thiers? or not call it?\n      parameters:\n        - name: created_by_id\n          in: query\n          schema:\n            type: string\n          description: User ID of the user that created the token.\n          required: false\n        - name: created_by_username\n          in: query\n          schema:\n            type: string\n          description: Username of the user that created the token.\n          required: false\n      responses:\n        200:\n          description: Tokens were successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTokenManagementResponse'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/FeatureDisabled'\n\n\n  /token-management/tokens/{token_id}:\n    description:\n      \"This endpoint enables admins to get a specific token.\"\n      # ^^ endpoint description outside verb get/post/etc is not exposed in current redoc version\n    parameters:\n      - name: token_id\n        in: path\n        schema:\n          type: string\n        description: The ID of the token to get.\n        required: true\n    get:\n      tags:\n        - Token management\n      summary: Get a token\n      operationId: get-token\n      description: Get a token, specified by its ID.\n      responses:\n        200:\n          description:  Token with specified Token ID was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfoObject'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n    delete:\n      tags:\n        - Token management\n      summary: Delete a token\n      operationId: delete-token\n      description: Delete a token, specified by its ID.\n      responses:\n        200:\n          description: The token was successfully deleted.\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\ncomponents:\n  schemas:\n    WorkspaceConfObject:\n      type: object\n      properties:\n        maxTokenLifetimeDays:\n          type: string\n          description:\n            \"Maximum token lifetime of new tokens in days, as an integer. If zero, new tokens are permitted to have no lifetime limit. Negative numbers are unsupported. **WARNING:** This limit only applies to new tokens, so there may be tokens with lifetimes longer than this value, including unlimited lifetime. Such tokens may have been created before the current maximum token lifetime was set. To review existing tokens, see the [get tokens API](#operation/get-tokens).\"\n          example: \"90\"\n        enableTokensConfig:\n          type: boolean\n          description:\n            \"Enable or disable personal access tokens for this workspace.\"\n    token_id:\n      type: string\n      format: string\n      description: ID of the token\n      example: 5684c955822ac792a51ae2aeb80190f13457bab3e2e2934c133a08b38454816c\n    creation_time:\n      type: number\n      description: Timestamp when the token was created\n      example: 1580265020299\n    expiry_time:\n      type: number\n      description: Timestamp when the token expires\n      example: 1580265020299\n    comment:\n      type: string\n      description: Comment that describes the purpose of the token. This was entered by the user at the time of the creation.\n      example: \"This is for the ABC department automation scripts.\"\n    created_by_id:\n      type: number\n      description: User ID of the user that created the token.\n      example: 202480738464078\n    created_by_username:\n      type: string\n      description: Username of the user that created the token.\n      example: \"jsmith@example.com\"\n    object_id:\n      type: string\n      enum:\n        - authorization/tokens\n      description: Always the value `authorization/tokens`. This field is returned for consistency with other Databricks object permissions APIs.\n      example: \"authorization/tokens\"\n    object_type:\n      type: string\n      enum:\n        - tokens\n      description: Always the value `tokens`. This field is returned for consistency with other Databricks object permissions APIs.\n      example: \"tokens\"\n\n    TokenInfoObject:\n      type: object\n      properties:\n        token_id:\n          $ref: '#/components/schemas/token_id'\n        creation_time:\n          $ref: '#/components/schemas/creation_time'\n        expiry_time:\n          $ref: '#/components/schemas/expiry_time'\n        comment:\n          $ref: '#/components/schemas/comment'\n        created_by_id:\n          $ref: '#/components/schemas/created_by_id'\n        created_by_username:\n          $ref: '#/components/schemas/created_by_username'\n\n    GetTokenManagementResponse:\n      type: object\n      properties:\n        token_infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/TokenInfoObject'\n\n\n    Error:\n      type: object\n      properties:\n        error_code:\n          type: string\n          description: Error code\n        message:\n          type: string\n          description: Human-readable error message describe the cause of the error.\n  responses:\n    WorkspaceConfBadRequest:\n      description: The request is malformed. See the error code and message for details.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            Bad Request - Invalid Keys:\n              value:\n                error_code: \"BAD_REQUEST\"\n                message:\n                  - \"Invalid keys: \u003ckey-name\u003e\"\n            Bad Request - Invalid Values:\n              value:\n                error_code: \"BAD_REQUEST\"\n                message:\n                  - \"Some values are not allowed: \u003cmessage\u003e\"\n    Unauthorized:\n      description: The request is unauthorized.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error_code: \"PERMISSION_DENIED\"\n            message: \"Only Admins can access token management APIs\"\n    FeatureDisabled:\n      description: The requested feature is not available\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            Feature disabled:\n              value:\n                error_code: \"FEATURE_DISABLED\"\n                message: \"\u003cfeature-name\u003e is not enabled for this feature tier\"\n    NotFound:\n      description: The requested resource does not exist.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            Feature disabled:\n              value:\n                error_code: \"FEATURE_DISABLED\"\n                message: \"\u003cfeature-name\u003e is not enabled for this feature tier\"\n            Resource does not exist:\n              value:\n                error_code: \"RESOURCE_DOES_NOT_EXIST\"\n                message: \"Token with ID \u003ctoken-id\u003e does not exist\"\n    InternalError:\n      description: The request is not handled correctly due to a server error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    PermissionsUnauthorized:\n      description: The request is unauthorized.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error_code: \"PERMISSION_DENIED\"\n            message: \"Please contact the owner or an administrator for access.\"\n    PermissionsBadRequest:\n      description: The request is malformed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            bad_request:\n              value:\n                error_code: \"BAD_REQUEST\"\n                message: \"Bad object ID: \u003cerror-message\u003e\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: String\n        # Strictly speaking, users can auth to the Tokens API with a token and create\n        # a new token programmatically. Also, on Azure, customers can use AAD tokens.\n        # For the cloud-agnostic OpenAPI docs, we don't need to go into that detail. See:\n        # AWS: https://docs.databricks.com/dev-tools/api/latest/authentication.html\n        # Azure: https://docs.microsoft.com/en-us/azure/databricks/dev-tools/api/latest/authentication\n      # For Azure, note that Databricks PAT token is non-JWT String but AAD token is JWT.\n      description: \u003e-\n        You can authenticate with a Databricks personal access token (PAT) that you\n        create for yourself within the application user interface.\n    basicAuth:\n      type: http\n      scheme: basic\n      description: \u003e-\n        HTTP Basic authentication with a name and password for native (non-SSO)\n        authentication.\nsecurity:\n  - bearerAuth: []\n  - basicAuth: []\n",
			"canonicalURL": "/github.com/gbrueckl/Databricks.API.PowerShell@d1d54858d69d4f5c82f2ce110e01070a11ea05bd/-/blob/Docs/OpenAPISpecs/token-management-aws.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gbrueckl/Databricks.API.PowerShell/blob/d1d54858d69d4f5c82f2ce110e01070a11ea05bd/Docs/OpenAPISpecs/token-management-aws.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}