{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kserve/kserve"
		},
		"file": {
			"name": "rest_predict_v2.yaml",
			"size": 0,
			"path": "docs/predict-api/v2/rest_predict_v2.yaml",
			"byteSize": 10143,
			"content": "openapi: 3.0.0\ninfo:\n  title: Data Plane\n  version: '2.0'\n  description: 'https://github.com/kubeflow/kfserving/blob/master/docs/predict-api/v2/required_api.md'\n  license:\n    name: Apache 2.0\nservers: []\npaths:\n  /v2/health/live:\n    get:\n      summary: Server Live\n      responses:\n        '200':\n          description: OK\n      operationId: get-v2-health-live\n      description: The “server live” API indicates if the inference server is able to receive and respond to metadata and inference requests. The “server live” API can be used directly to implement the Kubernetes livenessProbe.\n  /v2/health/ready:\n    get:\n      summary: Server Ready\n      tags: []\n      responses:\n        '200':\n          description: OK\n      operationId: get-v2-health-ready\n      description: The “server ready” health API indicates if all the models are ready for inferencing. The “server ready” health API can be used directly to implement the Kubernetes readinessProbe.\n  '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}/ready':\n    parameters:\n      - schema:\n          type: string\n        name: MODEL_NAME\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: MODEL_VERSION\n        in: path\n        required: true\n    get:\n      summary: Model Ready\n      tags: []\n      responses:\n        '200':\n          description: OK\n      operationId: get-v2-models-$-modelName-versions-$-modelVersion-ready\n      description: The “model ready” health API indicates if a specific model is ready for inferencing. The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies.\n  /v2/:\n    get:\n      summary: Server Metadata\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/metadata_server_response'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/metadata_server_error_response'\n      operationId: get-v2\n      description: 'The server metadata endpoint provides information about the server. A server metadata request is made with an HTTP GET to a server metadata endpoint. In the corresponding response the HTTP body contains the [Server Metadata Response JSON Object](#server-metadata-response-json-object) or the [Server Metadata Response JSON Error Object](#server-metadata-response-json-error-object).'\n  '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}':\n    parameters:\n      - schema:\n          type: string\n        name: MODEL_NAME\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: MODEL_VERSION\n        in: path\n        required: true\n    get:\n      summary: Model Metadata\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/metadata_model_response'\n      operationId: get-v2-models-$-modelName-versions-$-modelVersion\n      description: 'The per-model metadata endpoint provides information about a model. A model metadata request is made with an HTTP GET to a model metadata endpoint. In the corresponding response the HTTP body contains the [Model Metadata Response JSON Object](#model-metadata-response-json-object) or the [Model Metadata Response JSON Error Object](#model-metadata-response-json-error-object). The model name and (optionally) version must be available in the URL. If a version is not provided the server may choose a version based on its own policies or return an error.'\n  '/v2/models/${MODEL_NAME}/versions/${MODEL_VERSION}/infer':\n    parameters:\n      - schema:\n          type: string\n        name: MODEL_NAME\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: MODEL_VERSION\n        in: path\n        required: true\n    post:\n      summary: Inference\n      operationId: post-v2-models-$-MODEL_NAME-versions-$-MODEL_VERSION-infer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inference_response'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inference_error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/inference_request'\n      description: 'An inference request is made with an HTTP POST to an inference endpoint. In the request the HTTP body contains the [Inference Request JSON Object](#inference-request-json-object). In the corresponding response the HTTP body contains the [Inference Response JSON Object](#inference-response-json-object) or [Inference Response JSON Error Object](#inference-response-json-error-object). See [Inference Request Examples](#inference-request-examples) for some example HTTP/REST requests and responses.'\ncomponents:\n  schemas:\n    metadata_server_response:\n      title: metadata_server_response\n      type: object\n      description: ''\n      x-examples: {}\n      properties:\n        name:\n          type: string\n        version:\n          type: string\n        extensions:\n          type: array\n          items:\n            type: string\n      required:\n        - name\n        - version\n        - extensions\n    metadata_server_error_response:\n      title: metadata_server_error_response\n      type: object\n      properties:\n        error:\n          type: string\n      required:\n        - error\n    metadata_model_response:\n      title: metadata_model_response\n      type: object\n      properties:\n        name:\n          type: string\n        versions:\n          type: array\n          items:\n            type: string\n        platform:\n          type: string\n        inputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/metadata_tensor'\n        outputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/metadata_tensor'\n      required:\n        - name\n        - platform\n    metadata_tensor:\n      title: metadata_tensor\n      type: object\n      properties:\n        name:\n          type: string\n        datatype:\n          type: string\n        shape:\n          type: array\n          items:\n            type: integer\n      required:\n        - name\n        - datatype\n        - shape\n    metadata_model_error_response:\n      title: metadata_model_error_response\n      type: object\n      properties:\n        error:\n          type: string\n      required:\n        - error\n    inference_request:\n      title: inference_request\n      type: object\n      x-examples:\n        Example 1:\n          id: '42'\n          inputs:\n            - name: input0\n              shape:\n                - 2\n                - 2\n              datatype: UINT32\n              data:\n                - 1\n                - 2\n                - 3\n                - 4\n            - name: input1\n              shape:\n                - 3\n              datatype: BOOL\n              data:\n                - true\n          outputs:\n            - name: output0\n        Example 2:\n          id: '42'\n          outputs:\n            - name: output0\n              shape:\n                - 3\n                - 2\n              datatype: FP32\n              data:\n                - 1\n                - 1.1\n                - 2\n                - 2.1\n                - 3\n                - 3.1\n      properties:\n        id:\n          type: string\n        parameters:\n          $ref: '#/components/schemas/parameters'\n        inputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/request_input'\n        outputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/request_output'\n      required:\n        - inputs\n    parameters:\n      title: parameters\n      x-examples: {}\n      type: object\n    request_input:\n      title: request_input\n      type: object\n      properties:\n        name:\n          type: string\n        shape:\n          type: array\n          items:\n            type: integer\n        datatype:\n          type: string\n        parameters:\n          $ref: '#/components/schemas/parameters'\n        data:\n          $ref: '#/components/schemas/tensor_data'\n      required:\n        - name\n        - shape\n        - datatype\n        - data\n    tensor_data:\n      title: tensor_data\n      type: array\n      items:\n        anyOf:\n          - $ref: '#/components/schemas/tensor_data'\n          - type: number\n          - type: string\n          - type: boolean\n    request_output:\n      title: request_output\n      type: object\n      properties:\n        name:\n          type: string\n        parameters:\n          $ref: '#/components/schemas/parameters'\n      required:\n        - name\n    response_output:\n      title: response_output\n      type: object\n      properties:\n        name:\n          type: string\n        shape:\n          type: array\n          items:\n            type: integer\n        datatype:\n          type: string\n        parameters:\n          $ref: '#/components/schemas/parameters'\n        data:\n          $ref: '#/components/schemas/tensor_data'\n      required:\n        - name\n        - shape\n        - datatype\n        - data\n    inference_response:\n      title: inference_response\n      type: object\n      properties:\n        model_name:\n          type: string\n        model_version:\n          type: string\n        id:\n          type: string\n        parameters:\n          $ref: '#/components/schemas/parameters'\n        outputs:\n          type: array\n          items:\n            $ref: '#/components/schemas/response_output'\n      required:\n        - model_name\n        - outputs\n    inference_error_response:\n      title: inference_error_response\n      type: object\n      properties:\n        error:\n          type: string\n",
			"canonicalURL": "/github.com/kserve/kserve@2992d430c0b7c7458d0b557a642db8e6129c4f7c/-/blob/docs/predict-api/v2/rest_predict_v2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kserve/kserve/blob/2992d430c0b7c7458d0b557a642db8e6129c4f7c/docs/predict-api/v2/rest_predict_v2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}