{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ApolloFoundation/Apollo"
		},
		"file": {
			"name": "apollo-auth-api.yaml",
			"size": 0,
			"path": "apl-api2/src/main/resources/yaml/apollo-auth-api.yaml",
			"byteSize": 3817,
			"content": "openapi: 3.0.1\ninfo:\n  title: Apollo Auth API V2\n  description: |\n    Apollo Auth API V2 work in progress.\n\n    JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.\n\n    Required payload:\n     - User ID\n     - Application/Service ID\n     - Role\n\n    *User ID* - authenticates the user identity for personal responsibility\n\n    *Service ID* - the uniq ID of particular application or service\n\n    *Role* - the granular role to manage access to the different groups of the API methods\n\n  contact:\n    email: authapiteam@firstbridge.io\n  version: 2.0.0\n\nexternalDocs:\n    description: Introduction to JSON Web Tokens\n    url: https://jwt.io/introduction/\n\nservers:\n- url: http://localhost:8080/api/v2\n\ntags:\n- name: auth\n  description: System authorisation\n\npaths:\n  /auth/login:\n    post:\n      tags:\n      - auth\n      summary: user login routine\n      description: basic routine in order to obtain a token\n      operationId: authLogin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthRequest'\n      responses:\n        200:\n          description: Return the access token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthResponse'\n        401:\n          description: Unauthorized Error, cause bad credentials\n\n  /auth/refresh:\n    post:\n      tags:\n      - auth\n      summary: refresh token\n      description: Refresh the access token\n      operationId: authRefresh\n      responses:\n        200:\n          description: Return refreshed access token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthResponse'\n        401:\n          description: Unauthorized Error\n        403:\n          description: Access Forbidden\n      security:\n      - bearerAuth: []\ncomponents:\n  schemas:\n    AuthRequest:\n      type: object\n      properties:\n        login:\n          description: The login name\n          type: string\n          example: 'manager1'\n        password:\n          description: Top secret password\n          type: string\n    AuthResponse:\n      type: object\n      properties:\n        login:\n          type: string\n          example: 'manager1'\n        accessToken:\n          type: string\n          description: The access token carry the necessary information to access a resource directly\n          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJiMjBlYjIxMzkxZGMyOTg1OWY5NTcwOTM4MTEzNjM1ODc2MDhmNzZmIiwic2NvcGUiOlsiVVNFUl9ST0xFIl0sImlzcyI6Imh0dHBzOi8vYXBvbGxvY3VycmVuY3kub3JnIiwiY29tcGxlbWVudGFyeS1zdWJzY3JpcHRpb24iOiI0NDNmNDY1ZS1lYmVhLTRiYTUtOTA5NS04OGE1YTFhZTY0MDUiLCJleHAiOjE1OTE1Mzc1OTgsImlhdCI6MTU5MTUzMzk5OH0.dBdP7HjNo5DeWUlvlz_K2-lSI0zp6pgyLRU8ADjiDlsMw03_yT4BQxzd3PR5j108jRdiBwdUQo64q0XfIvZc7w'\n        refreshToken:\n          type: string\n          description: The refresh token carry the information necessary to get a new access token\n          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJiMjBlYjIxMzkxZGMyOTg1OWY5NTcwOTM4MTEzNjM1ODc2MDhmNzZmIiwic2NvcGUiOlsiUkVGUkVTSF9UT0tFTl9ST0xFIl0sImlzcyI6Imh0dHBzOi8vYXBvbGxvY3VycmVuY3kub3JnIiwiY29tcGxlbWVudGFyeS1zdWJzY3JpcHRpb24iOiJmZTQ0NzY3MS1jNjAwLTRlMTItYjIxMS0wZmU0ZjRkNzg2ZDQiLCJleHAiOjE1OTE1Mzk2MTEsImlhdCI6MTU5MTUzNDIxMX0.r276DFiH1ghvgYyYY68i_HWUHJabOSKcZRD3o_fdOsEBldq3xAOTyBHDGHZWSKSGN89lLJwohu9uJp2XNdhSBA'\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/ApolloFoundation/Apollo@83b1332760c76b9457e4857f22467159d6556191/-/blob/apl-api2/src/main/resources/yaml/apollo-auth-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ApolloFoundation/Apollo/blob/83b1332760c76b9457e4857f22467159d6556191/apl-api2/src/main/resources/yaml/apollo-auth-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}