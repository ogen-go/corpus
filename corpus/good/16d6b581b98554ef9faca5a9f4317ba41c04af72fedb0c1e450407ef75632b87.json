{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ns1labs/orb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "sinks/api/http/openapi.yaml",
			"byteSize": 13411,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: orb-sinks\nservers:\n  - url: 'http://localhost:8200'\npaths:\n  /sinks:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    get:\n      summary: 'List current Sinks'\n      operationId: listSinks\n      tags:\n        - sink\n      parameters:\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Name\"\n        - $ref: \"#/components/parameters/Order\"\n        - $ref: \"#/components/parameters/Direction\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/SinksPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    post:\n      summary: 'Create a new Sink'\n      operationId: createSink\n      tags:\n        - sink\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/SinkCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/SinkObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /sinks/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/SinkId\"\n    get:\n      summary: 'Get an existing Sink configuration'\n      operationId: readSink\n      tags:\n        - sink\n      responses:\n        '201':\n          $ref: \"#/components/responses/SinkObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    put:\n      summary: 'Update an existing Sink configuration'\n      operationId: updateSink\n      tags:\n        - sink\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/SinkUpdateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/SinkObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n    delete:\n      summary: 'Delete an existing Sink configuration'\n      operationId: deleteSink\n      tags:\n        - sink\n      responses:\n        '204':\n          description: Sink removed.\n        '400':\n          description: Failed due to malformed Sink ID.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /features/sinks:\n    get:\n      summary: 'List supported Sink backends and their configuration parameters'\n      operationId: sinkFeatures\n      tags:\n        - sink\n      parameters:\n        - $ref: \"#/components/parameters/Authorization\"\n      responses:\n        '200':\n          description: 'Sink feature details'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SinkBackendResSchema'\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /features/sinks/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n      - $ref: \"#/components/parameters/BackendId\"\n    get:\n      summary: 'Get an existing Sink backend configuration'\n      operationId: readBackend\n      tags:\n        - sink\n      responses:\n        '200':\n          $ref: \"#/components/responses/SinkBackendObjRes\"\n        '404':\n          description: A non-existent entity request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n  /sinks/validate:\n    parameters:\n      - $ref: \"#/components/parameters/Authorization\"\n    post:\n      summary: \"validate a sink configuration without saving it\"\n      operationId: validateSink\n      tags:\n        - sink\n      requestBody:\n        required: true\n        $ref: \"#/components/requestBodies/SinkCreateReq\"\n      responses:\n        '200':\n          description: Valid sink.\n          $ref: \"#/components/responses/SinkObjRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Entity already exist.\n        '415':\n          description: Missing or invalid content type.\n        '422':\n          description: Database can't process request.\n        '500':\n          $ref: \"#/components/responses/ServiceErrorRes\"\n\ncomponents:\n  requestBodies:\n    SinkCreateReq:\n      description: JSON-formatted document describing the new Sink configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SinkCreateReqSchema\"\n    SinkUpdateReq:\n      description: JSON-formatted document describing the updated Sink configuration\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SinkUpdateReqSchema\"\n  parameters:\n    Name:\n      name: name\n      description: Name filter. Filtering is performed as a case-insensitive partial match.\n      in: query\n      schema:\n        type: string\n      required: false\n    Order:\n      name: order\n      description: Order type.\n      in: query\n      schema:\n        type: string\n        default: id\n        enum:\n          - name\n          - id\n      required: false\n    Direction:\n      name: dir\n      description: Order direction.\n      in: query\n      schema:\n        type: string\n        default: desc\n        enum:\n          - asc\n          - desc\n      required: false\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    Authorization:\n      name: Authorization\n      description: User's access token.\n      in: header\n      schema:\n        type: string\n        format: jwt\n      required: true\n    SinkId:\n      name: id\n      description: Unique Sink identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    BackendId:\n      name: id\n      description: Unique Backend identifier.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n  responses:\n    SinkObjRes:\n      description: Sink object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SinksObjSchema\"\n    SinksPageRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SinkPageSchema\"\n    ServiceErrorRes:\n      description: Unexpected server-side error occurred.\n      content:\n        application/json:\n          schema:\n            type: string\n            format: byte\n    SinkBackendObjRes:\n      description: Backend object\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SinkBackendObjSchema\"\n  schemas:\n    SinkUpdateReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-prom-sink\n        description:\n          type: string\n          description: User description of this Sink\n          example: An example prometheus sink\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            cloud: aws\n        config:\n          type: object\n          example:\n            remote_host: my.prometheus-host.com\n            username: dbuser\n          description:\n            Object representing backend specific configuration information\n    SinkCreateReqSchema:\n      type: object\n      required:\n        - name\n        - backend\n        - config\n      properties:\n        name:\n          type: string\n          description: A unique name label\n          example: my-prom-sink\n        description:\n          type: string\n          description: User description of this Sink\n          example: An example prometheus sink\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            cloud: aws\n        backend:\n          type: string\n          example: prometheus\n          description: The sink backend to use. Must match a backend from /features/sinks. Cannot change once created.\n        config:\n          type: object\n          example:\n            remote_host: my.prometheus-host.com\n            username: dbuser\n          description: Object representing backend specific configuration information\n    SinkPageSchema:\n      type: object\n      properties:\n        sinks:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/SinksObjSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n      required:\n        - sinks\n    ConfigEntrySchema:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Visual title of the config item shown in UI\n        type:\n          type: string\n          description: \"Data field type\"\n          enum:\n            - string\n            - password\n            - int\n        name:\n          type: string\n          description: The field label used in the JSON config object for this field\n        description:\n          type: string\n          description: A description of the use of this configuration field\n      example:\n        title: Remote Host\n        type: string\n        name: remote_host\n        description: The remote host to send Prometheus metrics too\n    SinksObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Unique identifier (UUID)\n        name:\n          type: string\n          description: A unique name label\n          example: my-prom-sink\n        description:\n          type: string\n          description: User description of this Sink\n          example: An example prometheus sink\n        tags:\n          type: object\n          description: User defined key/values for organization and searching\n          example:\n            cloud: aws\n        state:\n          readOnly: true\n          enum:\n            - active\n            - error\n          type: string\n          description: State of this Sink connection to the backend\n        error:\n          readOnly: true\n          type: string\n          description: Error message from Sink backend connection if the Sink is in error state\n        backend:\n          type: string\n          readOnly: true\n          example: prometheus\n          description: The sink backend to use. Must match a backend from /features/sinks. Cannot change once created.\n        config:\n          type: object\n          example:\n            remote_host: my.prometheus-host.com\n            username: dbuser\n          description: Object representing backend specific configuration information\n        ts_created:\n          type: string\n          format: date-time\n          description: Timestamp of creation\n    SinkBackendResSchema:\n      type: object\n      properties:\n        backend:\n          type: string\n          example: prometheus\n          description: Name and identifier of the sink backend, used when creating new sinks\n        description:\n          type: string\n          example: Prometheus time series database sink\n        config:\n          type: array\n          description: Backend configuration field details\n          items:\n            items:\n              $ref: '#/components/schemas/ConfigEntrySchema'\n    SinkBackendObjSchema:\n      type: object\n      required:\n        - id\n      properties:\n        backend:\n          type: string\n          example: prometheus\n          description: Name and identifier of the sink backend, used when creating new sinks\n        description:\n          type: string\n          example: Prometheus time series database sink\n        config:\n          type: array\n          description: Backend configuration field details\n          items:\n            items:\n              $ref: '#/components/schemas/ConfigEntrySchema'",
			"canonicalURL": "/github.com/ns1labs/orb@2bd7f38794feaeff3b9dfae3a83bb1b67c7812f5/-/blob/sinks/api/http/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ns1labs/orb/blob/2bd7f38794feaeff3b9dfae3a83bb1b67c7812f5/sinks/api/http/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}