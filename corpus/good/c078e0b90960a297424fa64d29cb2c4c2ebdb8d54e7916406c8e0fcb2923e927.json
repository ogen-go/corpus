{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ishrivatsa/user"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 9756,
			"content": "openapi: 3.0.0\ninfo:\n  title: User\n  version: v2.0.0\n  description: |\n    This is the REST API documentation for the [User](https://github.com/vmwarecloudadvocacy/user) Service app of the [ACME Fitness Shop](https://github.com/vmwarecloudadvocacy/acme_fitness_demo).\n  contact:\n    name: VMware Cloud Advocacy team\n    url: 'https://github.com/vmwarecloudadvocacy'\n  license:\n    name: MIT\n    url: 'https://github.com/vmwarecloudadvocacy/user/blob/master/LICENSE'\nservers:\n  - url: 'http://localhost:8081'\npaths:\n  /users:\n    get:\n      summary: Get Users\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    username:\n                      type: string\n                    email:\n                      type: string\n                    firstname:\n                      type: string\n                    lastname:\n                      type: string\n                    id:\n                      type: string\n              examples:\n                sample:\n                  value:\n                    data:\n                      - username: walter\n                        email: walter@acmefitness.com\n                        firstname: Walter\n                        lastname: White\n                        id: 5c61ed848d891bd9e8016898\n                      - username: dwight\n                        email: dwight@acmefitness.com\n                        firstname: Dwight\n                        lastname: Schrute\n                        id: 5c61ed848d891bd9e8016899\n      description: Returns the list of all users\n      operationId: get_users\n  '/users/{id}':\n    parameters:\n      - type: string\n        name: id\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get User Details\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      username:\n                        type: string\n                      email:\n                        type: string\n                      firstname:\n                        type: string\n                      lastname:\n                        type: string\n                      id:\n                        type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    data:\n                      username: dwight\n                      email: dwight@acmefitness.com\n                      firstname: Dwight\n                      lastname: Schrute\n                      id: 5c61ed848d891bd9e8016899\n                    status: 200\n      operationId: get_user_details\n      description: Returns details about a specific user id\n  /login/:\n    post:\n      summary: Login\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  refresh_token:\n                    type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjI5NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.n70EAaiY6rbH1QzpoUJhx3hER4odW8FuN2wYG1sgH7g\n                    refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE\n                    status: 200\n      operationId: post_login\n      description: 'Authenticate and Login user. The payload to a valid response contains an `access_token` which is used to make requests to other services to get data. The `refresh_token` is used to request new `access_token`. If both `refresh_token` and `access_token` expire, then the user needs to log back in again.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n            examples:\n              sample:\n                value:\n                  username: username\n                  password: password\n        description: Login payload\n  /refresh-token:\n    post:\n      summary: Refresh Token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  refresh_token:\n                    type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjMyMjksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.wrWsDNor28aWv6huKUHAuVyROGAXqjO5luPfa5K5NQI\n                    refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE\n                    status: 200\n      description: Request new `access_token` by using the `refresh_token`\n      operationId: post_refresh_token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: {}\n          application/xml:\n            schema:\n              type: object\n              properties:\n                refresh_token:\n                  type: string\n            examples:\n              sample:\n                value:\n                  refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE\n        description: Refresh token payload\n  /verify-token:\n    post:\n      summary: Verify Token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    message: Token Valid. User Authorized\n                    status: 200\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    message: Invalid Key. User Not Authorized\n                    status: 401\n      operationId: post_verify_token\n      description: 'Verify access_token validity. If the the JWT is valid and user is authorized, if the JWT is not valid (either expired or invalid signature) then the user is NOT authorized.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  type: string\n            examples:\n              sample:\n                value:\n                  access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjMyMjksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.wrWsDNor28aWv6huKUHAuVyROGAXqjO5luPfa5K5NQI\n        description: Verify token payload\n  /register:\n    post:\n      summary: Register User\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  resourceId:\n                    type: string\n                  status:\n                    type: integer\n              examples:\n                sample:\n                  value:\n                    message: 'User created successfully!'\n                    resourceId: 5c61ef891d41c8de20281dd2\n                    status: 201\n      operationId: post_register\n      description: Register/Create new user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                firstname:\n                  type: string\n                lastname:\n                  type: string\n                email:\n                  type: string\n            examples:\n              sample:\n                value:\n                  username: peterp\n                  password: 'vmware1!'\n                  firstname: amazing\n                  lastname: spiderman\n                  email: peterp@acmefitness.com\n        description: Register user payload\n",
			"canonicalURL": "/github.com/ishrivatsa/user@6a7ee7633337b5228a8792520afe353c947a836d/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ishrivatsa/user/blob/6a7ee7633337b5228a8792520afe353c947a836d/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}