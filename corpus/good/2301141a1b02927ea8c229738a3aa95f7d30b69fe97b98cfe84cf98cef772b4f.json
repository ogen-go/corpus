{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bonnetn/adh6"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "openapi/spec.yaml",
			"byteSize": 45966,
			"content": "openapi: 3.0.0\nexternalDocs:\n  description: Find out more about MiNET\n  url: http://minet.net\ninfo:\n  description: 'Adherent api'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Adherent\n  version: 1.0.0\nservers:\n  - url: /api\npaths:\n  /health/:\n    get:\n      operationId: health\n      responses:\n        200:\n          description: ADH6 is alive!\n        503:\n          description: Database is down.\n      summary: Health endpoint, query this with zabbix to know if ADH6 is running or not.\n  /account/:\n    get:\n      parameters:\n      - description: Limit the number of accounts returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: The generic search terms (will search in any field)\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      - description: Filter by name\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n      - description: Filter by type\n        in: query\n        name: type\n        required: false\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Account'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter accounts\n      tags:\n      - account\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Account'\n        description: New values of the account\n        required: true\n      responses:\n        200:\n          description: Created\n        400:\n          description: Invalid input\n      summary: Create account\n      tags:\n      - account\n  /account/{account_id}:\n    get:\n      parameters:\n      - description: The id of the account that needs to be fetched.\n        in: path\n        name: account_id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve\n      tags:\n      - account\n    patch:\n      parameters:\n      - description: id of the account will be updated\n        in: path\n        name: account_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountPatchRequest'\n        description: New values of the account\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Partially update\n      tags:\n      - account\n  /account_type/:\n    get:\n      parameters:\n      - description: Limit the number of account types returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/AccountType'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter account types\n      tags:\n      - account_type\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountType'\n        description: Account type to create\n        required: true\n      responses:\n        200:\n          description: Created\n          headers:\n            Location:\n              description: URI to the newly created account type\n              schema:\n                type: string\n        400:\n          description: Invalid input\n      summary: Create an account type\n      tags:\n      - account_type\n  /account_type/{account_type_id}:\n    get:\n      parameters:\n      - in: path\n        name: account_type_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountType'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve an account type\n      tags:\n      - account_type\n    patch:\n      parameters:\n      - description: Name of the account type will be updated\n        in: path\n        name: account_type_id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountTypePatchRequest'\n        description: New values of the account type\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Partially update\n      tags:\n      - account_type\n  /device/:\n    get:\n      parameters:\n      - description: Limit the number of devices returned in the result. Default is\n          100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Filter by owner's username\n        in: query\n        name: username\n        required: false\n        schema:\n          type: string\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Device'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter devices\n      tags:\n      - device\n  /device/{mac_address}:\n    delete:\n      parameters:\n      - description: The mac address of the device that will be deleted\n        in: path\n        name: mac_address\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Deleted\n        404:\n          description: Not found\n      summary: Delete a device\n      tags:\n      - device\n    get:\n      parameters:\n      - description: The mac address of the device that will be fetched\n        in: path\n        name: mac_address\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve a device\n      tags:\n      - device\n    put:\n      parameters:\n      - description: The mac address of the device that will be update\n        in: path\n        name: mac_address\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Device'\n        description: Device to update\n        required: true\n      responses:\n        201:\n          description: Created\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n      summary: Update/create a device\n      tags:\n      - device\n  /device/{mac_address}/vendor:\n    get:\n      operationId: vendor_get\n      parameters:\n      - description: The mac address of the device that will be looked up\n        in: path\n        name: mac_address\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                properties:\n                  vendorname:\n                    example: Cisco Systems, Inc\n                    type: string\n                type: object\n          description: Success\n        404:\n          description: No match\n      summary: Retrieve the vendor of a device based on its MAC\n      tags:\n      - device\n  /member/:\n    get:\n      parameters:\n      - description: Limit the number of members returned in the result. Default is\n          100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: The generic search terms (will search in any field)\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      - description: Filter by room number\n        in: query\n        name: roomNumber\n        required: false\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Member'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter members\n      tags:\n      - member\n  /member/{username}:\n    delete:\n      parameters:\n      - description: The username of the member that will be deleted\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Deleted\n        404:\n          description: Not found\n      summary: Delete\n      tags:\n      - member\n    get:\n      parameters:\n      - description: The username of the member that needs to be fetched.\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve\n      tags:\n      - member\n    patch:\n      parameters:\n      - description: username of the member will be updated\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemberPatchRequest'\n        description: New values of the member\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Partially update\n      tags:\n      - member\n    put:\n      parameters:\n      - description: username of the member will be updated\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Member'\n        description: New values of the member\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n      summary: Update/create\n      tags:\n      - member\n  /member/{username}/logs/:\n    get:\n      parameters:\n      - description: username of the member\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  example: 2018-07-14T04:44:51.537Z Password OK\n                  type: string\n                type: array\n          description: Success\n        404:\n          description: Not found\n      summary: Get the most recent logs\n      tags:\n      - member\n  /member/{username}/membership/:\n    post:\n      parameters:\n      - description: The username of the member\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - description: Just a random string to ensure that membership creation is idempotent\n          (very important since double submission may result to the member being charged\n          two times). I recommand using a long random string for that.\n        in: header\n        name: X-Idempotency-Key\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MembershipRequest'\n        description: 'Membership record, if no start is specified, it will use the\n          current date. Duration is expressed in days. WARNING: DO NOT set the start\n          date to be in the future, it is not implemented for the moment.'\n        required: true\n      responses:\n        200:\n          description: Success\n        400:\n          description: Invalid input\n      summary: Add a membership record for an member\n      tags:\n      - membership\n  /member/{username}/password/:\n    put:\n      parameters:\n      - description: username of the member will be updated\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                password:\n                  example: '\u0026\u003cHs8XK/H+dT{7d7:=bxN~9;EqhwtW-;'\n                  type: string\n              required:\n              - password\n              type: object\n        description: New values of the member\n        required: true\n      responses:\n        204:\n          description: Modified\n        404:\n          description: Not found\n      summary: Update password\n      tags:\n      - member\n  /payment_method/:\n    get:\n      parameters:\n      - description: Limit the number of payment methods returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/PaymentMethod'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter payment methods\n      tags:\n      - payment_method\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentMethod'\n        description: Payment method to create\n        required: true\n      responses:\n        200:\n          description: Created\n          headers:\n            Location:\n              description: URI to the newly created payment method\n              schema:\n                type: string\n        400:\n          description: Invalid input\n      summary: Create a payment method\n      tags:\n      - payment_method\n  /payment_method/{payment_method_id}:\n    get:\n      parameters:\n      - in: path\n        name: payment_method_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaymentMethod'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve a payment method\n      tags:\n      - payment_method\n    patch:\n      parameters:\n      - description: Name of the payment method will be updated\n        in: path\n        name: payment_method_id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentMethodPatchRequest'\n        description: New values of the payment method\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Partially update\n      tags:\n      - payment_method\n  /port/:\n    get:\n      parameters:\n      - description: Limit the number of ports returned in the result. Default is\n          100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Filter only ports from that switch\n        in: query\n        name: switchID\n        required: false\n        schema:\n          type: integer\n      - description: Filter only ports from that room\n        in: query\n        name: roomNumber\n        required: false\n        schema:\n          type: integer\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Port'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter ports\n      tags:\n      - port\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Port'\n        description: Port to create\n        required: true\n      responses:\n        200:\n          description: Created\n          headers:\n            Location:\n              description: URI to the newly created port\n              schema:\n                type: string\n        400:\n          description: Invalid input\n      summary: Create a port\n      tags:\n      - port\n  /port/{port_id}:\n    delete:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        204:\n          description: Deleted\n        404:\n          description: Not found\n      summary: Delete a port\n      tags:\n      - port\n    get:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Port'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve a port\n      tags:\n      - port\n    put:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Port'\n        description: Port to update\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Update a port\n      tags:\n      - port\n  /port/{port_id}/mab/:\n    get:\n      operationId: mab_get\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: True if MAB is enabled\n        404:\n          description: Not found\n      summary: Check whether MAB is enable on this port or not.\n      tags:\n      - port\n    put:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        required: true\n      responses:\n        204:\n          description: Updated\n        404:\n          description: Not found\n      summary: Enable/disable MAB on a port\n      tags:\n      - port\n  /port/{port_id}/state/:\n    get:\n      operationId: state_get\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: Success, false if it is shutdown, true otherwise\n        404:\n          description: Not found\n      summary: Retrieve the status of a port.\n      tags:\n      - port\n    put:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        description: True to open, False to shutdown\n        required: true\n      responses:\n        204:\n          description: Updated\n        404:\n          description: Not found\n      summary: Shutdown/enable a port\n      tags:\n      - port\n  /port/{port_id}/vlan/:\n    get:\n      operationId: vlan_get\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                example: 48\n                type: integer\n          description: Success, returns 1 if the port has authentication on\n        404:\n          description: Not found\n      summary: Retrieve the VLAN assigned to the port.\n      tags:\n      - port\n    put:\n      parameters:\n      - in: path\n        name: port_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              example: 48\n              type: integer\n        description: VLAN to assign. Set it to 1 if you want to enable authentication\n          on the port.\n        required: true\n      responses:\n        204:\n          description: Updated\n        404:\n          description: Not found\n      summary: Change the VLAN assigned a to port\n      tags:\n      - port\n  /product/:\n    get:\n      parameters:\n      - description: Limit the number of products returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: The generic search terms (will search in any field)\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      - description: Filter by name\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Product'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter products\n      tags:\n      - product\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Product'\n        description: New values of the product\n        required: true\n      responses:\n        200:\n          description: Created\n        400:\n          description: Invalid input\n      summary: Create product\n      tags:\n      - product\n  /product/{product_id}:\n    get:\n      parameters:\n      - description: The id of the product that needs to be fetched.\n        in: path\n        name: product_id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve\n      tags:\n      - product\n    patch:\n      parameters:\n        - description: id of the product will be updated\n          in: path\n          name: product_id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductPatchRequest'\n        description: New values of the product\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Partially update\n      tags:\n        - product\n  /room/:\n    get:\n      parameters:\n      - description: Limit the number of rooms returned in the result. Default is\n          100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Room'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter rooms\n      tags:\n      - room\n  /room/{roomNumber}:\n    delete:\n      parameters:\n      - in: path\n        name: roomNumber\n        required: true\n        schema:\n          type: integer\n      responses:\n        204:\n          description: Deleted\n        404:\n          description: Not found\n      summary: Delete a room\n      tags:\n      - room\n    get:\n      parameters:\n      - in: path\n        name: roomNumber\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Room'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve a room\n      tags:\n      - room\n    put:\n      parameters:\n      - in: path\n        name: roomNumber\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Room'\n        description: Room to update\n        required: true\n      responses:\n        201:\n          description: Created\n        204:\n          description: Updated\n        400:\n          description: Invalid input / no more IP\n      summary: Update/create a room\n      tags:\n      - room\n  /switch/:\n    get:\n      parameters:\n      - description: Limit the number of switches returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: Search terms\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Switch'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Get all switches\n      tags:\n      - switch\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Switch'\n        description: Switch to create\n        required: true\n      responses:\n        200:\n          description: Created\n          headers:\n            Location:\n              description: URI to the newly created switch\n              schema:\n                type: string\n        400:\n          description: Invalid input\n      summary: Create a switch\n      tags:\n      - switch\n  /switch/{switchID}:\n    delete:\n      parameters:\n      - in: path\n        name: switchID\n        required: true\n        schema:\n          type: integer\n      responses:\n        204:\n          description: Deleted\n        404:\n          description: Not found\n      summary: Delete a switch\n      tags:\n      - switch\n    get:\n      parameters:\n      - in: path\n        name: switchID\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Switch'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve a switch\n      tags:\n      - switch\n    put:\n      parameters:\n      - in: path\n        name: switchID\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Switch'\n        description: Switch to update\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n        404:\n          description: Not found\n      summary: Update a switch\n      tags:\n      - switch\n  /temporary_account/:\n    delete:\n      responses:\n        204:\n          description: Success\n      summary: Revoke all active temporary accounts.\n      tags:\n      - temporary_account\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                firstname:\n                  example: Jean\n                  type: string\n                lastname:\n                  example: Dupont\n                  type: string\n              type: object\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    example: NAINA_AMLKSJQLMHFQ\n                    type: string\n                type: object\n          description: Success\n      summary: Create new temporary account for this day. Only super admins can do\n        that.\n      tags:\n      - temporary_account\n  /transaction/:\n    get:\n      parameters:\n      - description: Limit the number of transactions returned in the result. Default\n          is 100\n        in: query\n        name: limit\n        required: false\n        schema:\n          default: 100\n          type: integer\n      - description: Skip the first n results\n        in: query\n        name: offset\n        required: false\n        schema:\n          default: 0\n          type: integer\n      - description: The generic search terms (will search in any field)\n        in: query\n        name: terms\n        required: false\n        schema:\n          type: string\n      - description: Filter by account id (either as source or destination)\n        in: query\n        name: account\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Transaction'\n                type: array\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of filtered entities\n              schema:\n                type: integer\n        400:\n          description: Invalid input\n      summary: Filter transactions\n      tags:\n      - transaction\n    post:\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n        description: Transaction to create\n        required: true\n      responses:\n        200:\n          description: Created\n          headers:\n            Location:\n              description: URI to the newly created transaction\n              schema:\n                type: string\n        400:\n          description: Invalid input\n      summary: Create a transaction\n      tags:\n      - transaction\n  /transaction/{transaction_id}:\n    get:\n      parameters:\n      - description: The unique identifier of the transaction that needs to be fetched\n        in: path\n        name: transaction_id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n          description: Success\n        404:\n          description: Not found\n      summary: Retrieve\n      tags:\n      - transaction\n    put:\n      parameters:\n      - description: The unique identifier of the transaction that needs to be updated\n        in: path\n        name: transaction_id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transaction'\n        description: New values for the transaction, only the attachments can be modified\n        required: true\n      responses:\n        204:\n          description: Updated\n        400:\n          description: Invalid input\n      summary: Update/create\n      tags:\n      - transaction\ncomponents:\n  schemas:\n    Account:\n      example:\n        actif: 'true'\n        type: 2\n      properties:\n        actif:\n          description: Account state\n          example: 'true'\n          type: boolean\n        id:\n          description: ID of the account\n          example: 1\n          type: integer\n        name:\n          description: Name of the account\n          example: MiNET\n          type: string\n        type:\n          description: The type of account\n          example: 'adherent'\n          type: integer\n        creation_date:\n          description: The date the account was created\n          format: date-time\n          type: string\n      required:\n      - type\n      - actif\n      type: object\n    AccountPatchRequest:\n      example:\n        actif: 'true'\n        name: MiNET\n        type: 2\n      properties:\n        actif:\n          example: 'true'\n          type: boolean\n        name:\n          example: MiNET\n          type: string\n        type:\n          example: 2\n          type: integer\n      type: object\n    AccountType:\n      example:\n        id: 1\n        name: \"Adh\\xE9rent\"\n      properties:\n        id:\n          example: 1\n          readOnly: true\n          type: integer\n        name:\n          example: \"Adh\\xE9rent\"\n          type: string\n      required:\n      - name\n      type: object\n    AccountTypePatchRequest:\n      example:\n        name: \"Adh\\xE9rent\"\n      properties:\n        name:\n          example: \"Adh\\xE9rent\"\n          type: string\n      type: object\n    Device:\n      example:\n        connectionType: wired\n        ipAddress: 127.0.0.1\n        ipv6Address: ipv6Address\n        mac: 01-23-45-67-89-AB\n        username: doe_john\n      properties:\n        connectionType:\n          enum:\n          - wired\n          - wireless\n          type: string\n        ipAddress:\n          example: 127.0.0.1\n          type: string\n        ipv6Address:\n          type: string\n        mac:\n          example: 01-23-45-67-89-AB\n          type: string\n        username:\n          example: doe_john\n          type: string\n      required:\n      - connectionType\n      - mac\n      type: object\n    Member:\n      example:\n        associationMode: '2000-01-23T04:56:07.000+00:00'\n        comment: comment\n        departureDate: '2000-01-23T04:56:07.000+00:00'\n        email: john.doe@gmail.com\n        firstName: John\n        lastName: Doe\n        roomNumber: 5012\n        username: doe_john\n      properties:\n        associationMode:\n          format: date-time\n          type: string\n        comment:\n          type: string\n        departureDate:\n          format: date-time\n          type: string\n        email:\n          example: john.doe@gmail.com\n          type: string\n        firstName:\n          example: John\n          type: string\n        lastName:\n          example: Doe\n          type: string\n        roomNumber:\n          example: 5012\n          format: int32\n          type: integer\n        username:\n          example: doe_john\n          type: string\n      required:\n      - email\n      - firstName\n      - lastName\n      - username\n      type: object\n    MemberPatchRequest:\n      example:\n        associationMode: '2000-01-23T04:56:07.000+00:00'\n        comment: comment\n        departureDate: '2000-01-23T04:56:07.000+00:00'\n        email: john.doe@gmail.com\n        firstName: John\n        lastName: Doe\n        roomNumber: 5012\n        username: doe_john\n      properties:\n        associationMode:\n          format: date-time\n          type: string\n        comment:\n          type: string\n        departureDate:\n          format: date-time\n          type: string\n        email:\n          example: john.doe@gmail.com\n          type: string\n        firstName:\n          example: John\n          type: string\n        lastName:\n          example: Doe\n          type: string\n        roomNumber:\n          example: 5012\n          format: int32\n          type: integer\n        username:\n          example: doe_john\n          type: string\n      type: object\n    MembershipRequest:\n      example:\n        duration: 365\n        start: '2000-01-23T04:56:07.000+00:00'\n      properties:\n        duration:\n          description: Duration in days\n          example: 365\n          type: integer\n        paymentMethod:\n          enum:\n          - cash\n          - card\n          - bank_cheque\n          type: string\n      required:\n      - duration\n      type: object\n    PaymentMethod:\n      example:\n        id: 1\n        name: Carte bancaire\n      properties:\n        id:\n          example: 1\n          readOnly: true\n          type: integer\n        name:\n          example: Carte bancaire\n          type: string\n      required:\n      - name\n      type: object\n    PaymentMethodPatchRequest:\n      example:\n        name: Carte bancaire\n      properties:\n        name:\n          example: Carte bancaire\n          type: string\n      type: object\n    Port:\n      example:\n        portNumber: 1/0/4\n        roomNumber: 5110\n        switchID: 6\n      properties:\n        id:\n          example: 1\n          type: integer\n        portNumber:\n          example: 1/0/4\n          type: string\n        roomNumber:\n          example: 5110\n          type: integer\n        switchID:\n          example: 6\n          type: integer\n      required:\n      - portNumber\n      type: object\n    Product:\n      example:\n        buying_price: 99\n        id: 1\n        name: \"C\\xE2ble 5m\"\n        selling_price: 99\n      properties:\n        buying_price:\n          description: Buying price of the product (in cents)\n          example: 99\n          type: integer\n        id:\n          description: ID of the product\n          example: 1\n          type: integer\n        name:\n          description: Name of the product\n          example: \"C\\xE2ble 5m\"\n          type: string\n        selling_price:\n          description: Buying price of the product (in cents)\n          example: 99\n          type: integer\n      required:\n      - buying_price\n      - selling_price\n      - name\n      type: object\n    ProductPatchRequest:\n      example:\n        name: 'Cable'\n        buying_price: 99\n        selling_price: 99\n      properties:\n        name:\n          example: 'Cable'\n          type: string\n        buying_price:\n          example: 99\n          type: integer\n        selling_price:\n          example: 99\n          type: integer\n      type: object\n    Room:\n      example:\n        description: Chambre 5110\n        phone: 6842\n        roomNumber: 5110\n        vlan: 45\n      properties:\n        description:\n          example: Chambre 5110\n          type: string\n        phone:\n          example: 6842\n          type: integer\n        roomNumber:\n          example: 5110\n          type: integer\n        vlan:\n          example: 45\n          type: integer\n      required:\n      - roomNumber\n      type: object\n    Switch:\n      example:\n        community: ghWgpQvHRkrYuqpMLWYkstS3\n        description: Switch U5\n        ip: 192.168.102.211\n      properties:\n        community:\n          example: ghWgpQvHRkrYuqpMLWYkstS3\n          format: password\n          type: string\n        description:\n          example: Switch U5\n          type: string\n        id:\n          example: 1\n          type: integer\n        ip:\n          example: 192.168.102.211\n          type: string\n      required:\n      - community\n      - ip\n      type: object\n    Transaction:\n      properties:\n        id:\n          example: 0\n          format: int32\n          readOnly: true\n          type: integer\n        name:\n          example: Transaction test\n          type: string\n        src:\n          readOnly: true\n          $ref: '#/components/schemas/Account'\n        dst:\n          readOnly: true\n          $ref: '#/components/schemas/Account'  \n        timestamp:\n          example: '2000-01-23T04:56:07.000+00:00'\n          format: date-time\n          readOnly: true\n          type: string\n        paymentMethod:\n          readOnly: true\n          $ref: \"#/components/schemas/PaymentMethod\"\n        value:\n          example: 42.0\n          format: double\n          type: number\n        attachments:\n          type: string\n        dstID:\n          example: 0\n          format: int32\n          type: integer\n          writeOnly: true\n        srcID:\n          example: 0\n          format: int32\n          type: integer\n          writeOnly: true\n        paymentMethodID:\n          example: 0\n          format: int32\n          type: integer\n          writeOnly: true\n      required:\n      - value\n      - src\n      - dst\n      - name\n      - paymentMethod\n      - paymentMethodID\n      - dstID\n      - srcID\n      type: object\n\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://cas.minet.net/oauth2.0/authorize\n          scopes:\n            profile: Read the profile of the user to get their LDAP groups\n\n# security:\n# - OAuth2: [profile]\n\ntags:\n- description: Operations on members\n  name: member\n- description: Manage membership records\n  name: membership\n- description: Operations on devices\n  name: device\n- description: Operations on rooms\n  name: room\n- description: Operations on switches\n  name: switch\n- description: Operations on ports\n  name: port\n- description: Temporary accounts\n  name: temporary_account\n\n",
			"canonicalURL": "/github.com/bonnetn/adh6@50a8c20f63d947b2500d1c6214668b5ae4dbf99e/-/blob/openapi/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bonnetn/adh6/blob/50a8c20f63d947b2500d1c6214668b5ae4dbf99e/openapi/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}