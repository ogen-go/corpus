{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/mitto.sms/openapi.yml",
			"byteSize": 25321,
			"content": "openapi: 3.0.1\ninfo:\n  title: SMS and Bulk SMS APIs\n  description: |\n    This is a generated connector for [Mitto SMS and Bulk SMS APIs v1](https://docs.mitto.ch/sms-api-reference/) OpenAPI specification.\n    Send individual SMS reliably and securely, or send them in bulk. \n    You can choose from different servers to test with based on where you want to send a message to.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [Mitto account](https://docs.mitto.ch) and obtain tokens by following [this guide](https://docs.mitto.ch/sms-api/#authentication).\n  x-ballerina-display:\n    label: Mitto SMS\n    iconPath: \"icon.png\"\n  version: '1'\nservers:\n  - url: https://rest.mittoapi.net\nsecurity:\n  - apiKeyAuth: []\npaths:\n  /sms:\n    post:\n      operationId: sendSms\n      summary: Send an SMS\n      description: \u003e-\n        Send an SMS for marketing or a one-time password. Support for test\n        messages, long messages, A/B testing with reference tags, and different\n        languages.\n      # parameters:\n      #   - name: X-Mitto-API-Key\n      #     in: header\n      #     description: \u003e-\n      #       Your API key. You must include it for every request to send an SMS.\n      #       Contact Mitto Support to get set up with one.\n      #     schema:\n      #       type: string\n      #     example: uAGJbTkSuUJEMBExuofFwOzqJ5f5biwz1\n      requestBody:\n        description: Request payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - from\n                - to\n                - text\n              properties:\n                test:\n                  type: boolean\n                  description: \u003e\n                    When set to true, the API call is in test mode and no actual\n                    SMS is delivered. The response returns “test”: true. For\n                    test calls, there is no id parameter in the response. When\n                    set to false, you make the API call in production mode. The\n                    system delivers an SMS, and returns the id parameter in the\n                    response.\n                      If you do not use this parameter , by default you make the API call in production mode.\n                  example: true\n                from:\n                  type: string\n                  description: \u003e\n                    Free-form text with which the sender identifies themselves\n                    to the recipient. This is what the recipient will see as\n                    from whom the message is. Can be a phone number, or the name\n                    of the company or the service. NOTE - what you provide here\n                    may not be shown to the customer depending on how carriers\n                    choose to handle your message.\n                  example: MITTO SMS\n                to:\n                  type: string\n                  description: \u003e\n                    The number to which the message is sent. Numbers are\n                    specified in E.164 format. \n                  example: '359898876737'\n                text:\n                  type: string\n                  description: |\n                    The body of the SMS message.\n                      If the message contains characters outside the range of the GSM Standard and Extended tables, then you need to set the character encoding to Unicode (type=Unicode as a query parameter). For details, refer to Long SMSs and Changing the Default Encoding of the Message. \n                  example: \u003e-\n                    Due to the limitations of GSM/PDU standard, the body text of\n                    an SMS message cannot be longer than 160 characters (70\n                    characters if the text is Unicode format). MITTOs SMS API\n                    overcomes this limitations by splitting larger messages into\n                    several smaller messages, each of which conforms to that\n                    standards. This operation is automatic and you do not have\n                    to do anything when making the API request the process is\n                    triggered automatically when the text entered in body of the\n                    SMS (the body parameter of the request) exceeds the limit.\n                type:\n                  type: string\n                  description: \u003e\n                    Character set in which the message body will be encoded. If\n                    not specified, the default encoding (GSM) is used. For\n                    Unicode, set type Unicode. For Binary, set type to be Byte.\n                    For automatic detection set type to auto.\n                  example: unicode\n                reference:\n                  type: string\n                  description: \u003e\n                    First metadata field for tagging the message. The metadata\n                    is returned in the delivery report by the callback. It can\n                    be any free-form text you consider appropriate. You can use\n                    a different reference string for each message or tag\n                    multiple messages with the same string and group them\n                    together in this way. For details, refer to [Delivery\n                    Reports](https://docs.mitto.ch/sms-use-cases/#retrieve-delivery-reports)\n                    and [Add Metadata to the\n                    Message](https://docs.mitto.ch/sms-use-cases/#add-metadata-to-a-message).\n                  example: Spring campaign\n                udh:\n                  type: string\n                  description: |\n                    Custom Hex-encoded User Data Header.\n                  example: 6050415811581\n                validity:\n                  type: integer\n                  description: \u003e\n                    Validity period of the SMS message in minutes. When a\n                    message has not been delivered to the receiver at the first\n                    attempt, subsequent delivery attempts will be made until the\n                    validity period expires, after which the message is\n                    discarded as undeliverable. If the specified validity period\n                    is different from the validity period of the supplier, then\n                    the shorter period is enforced. When not specified, the\n                    validity of a message defaults to 2,880 minutes (48 hours).\n                  example: 2879\n                pid:\n                  type: integer\n                  description: \u003e\n                    Protocol identifier to use. Must be consistent with the udh\n                    parameter value. When not specified, defaults to 0.\n                flash:\n                  type: boolean\n                  description: \u003e\n                    When set to true it will send the message in Flash mode.\n                    Flash SMS is when the SMS appears directly on the main\n                    screen without user interaction, and is not automatically\n                    stored in the inbox.\n                  example: true\n                callback:\n                  type: string\n                  description: \u003e\n                    When used, it overrides the URL address set on the account.\n                    For more details see the use case [Replace Callback URL in\n                    API\n                    Call](http://mitto.wpengine.com/sms-use-cases/#optional-callback-url-in-api-call).\n                  example: https://www.mycallback.com\n            examples:\n              Make a Test API Call:\n                value:\n                  from: MITTO SMS\n                  to: '15555552795'\n                  text: Hello, World!\n                  test: true\n              Send an SMS:\n                value:\n                  from: MITTO SMS\n                  to: '15555552795'\n                  text: Hello, World!\n              Send a Long SMS:\n                value:\n                  from: MITTO SMS\n                  to: '491725551234'\n                  text: \u003e-\n                    Due to the limitations of GSM/PDU standard, the body text of\n                    an SMS message cannot be longer than 160 characters (70\n                    characters if the text is Unicode format). MITTO's SMS API\n                    overcomes this limitations by splitting larger messages into\n                    several smaller messages, each of which conforms to that\n                    standards. This operation is automatic and you don't have to\n                    do anything when making the API request the process is\n                    triggered automatically when the text entered in body of the\n                    SMS (the body parameter of the request) exceeds the limit.\n                  type: auto\n              Send a Message in a Different Language:\n                value:\n                  from: MITTO SMS\n                  to: '491725551234'\n                  text: Здравствуй, Мир!\n                  type: auto\n              Add Metadata to a Message:\n                value:\n                  from: MITTO SMS\n                  to: '491725551234'\n                  text: Enjoy the stunning Spring 2019 visuals in our gallery!\n                  reference: Campaign 2019-05, B-split message\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/sms'\n              examples:\n                Response to Test SMS:\n                  description: This is a test.\n                  value:\n                    id: 7d35863fe6f44695a713d54e6ba0aeb5\n                    timestamp: '2019-04-13T17:51:06.3091182Z'\n                    responseCode: 0\n                    textLength: 13\n                    responseText: SMS sent\n                    test: true\n                Response to Send SMS:\n                  value:\n                    id: 715118ef01aa4480bbd67324a0459b0b\n                    timestamp: '2019-04-13T12:07:57.8625574Z'\n                    to: '41751231234'\n                    responseCode: 0\n                    textLength: 13\n                    responseText: SMS sent\n                Response to Send a Long SMS:\n                  value:\n                    id: 7d35863fe6f44695a713d54e6ba0aeb5\n                    timestamp: '2019-04-14T16:55:56.2652450Z'\n                    responseCode: 0\n                    textLength: 529\n                    responseText: SMS sent successfully.\n                Response to Send SMS in Another Language:\n                  value:\n                    id: 715118ef01aa4480bbd67324a0459b0b\n                    timestamp: '2019-04-13T12:07:57.8625574Z'\n                    responseCode: 0\n                    textLength: 13\n                    responseText: SMS sent successfully\n        '400':\n          description: 'Bad Request - '\n      servers:\n        - url: https://rest.mittoapi.net\n    servers:\n      - url: https://rest.mittoapi.net\n  /sms/converted:\n    post:\n      operationId: trackConversions\n      summary: Track Conversions\n      description: \u003e-\n        Ask your account manager to enable this feature for you. You can use\n        conversion tracking to monitor whether a message was delivered.\n      # parameters:\n      #   - name: X-Mitto-API-Key\n      #     in: header\n      #     schema:\n      #       type: string\n      #     example: uAGJbTkSuUJEMBExuofFwOzqJ5f5biwz\n      requestBody:\n        description: Request payload\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                messageId:\n                  type: string\n            examples:\n              Conversion Example:\n                value: |-\n                  {\n                  \"messageId\": \"069d0e82-a437-47bc-b158-0f4065e83fce\"\n                  }\n      responses:\n        '200':\n          description: Success\n          # content:\n          #   application/json; charset=utf-8:\n          #     schema:\n          #       $ref: '#/components/schemas/smsconverted'\n          #     example: OK\n        '400':\n          description: \u003e-\n            Bad Request - Conversion rate tracking is not enabled for this\n            customer account – a JSON string is also returned.\n          # content:\n          #   application/json; charset=utf-8:\n          #     schema:\n          #       $ref: '#/components/schemas/badrequest'\n          #     example: \u003e-\n          #       No convertible message found for id\n          #       \"8d19cf53-a264-4cc6-800c-95600aeb9141\"\n        '404':\n          description: \u003e-\n            Not Found - No message with the given messageId was found to mark as\n            converted – a JSON string is also returned.\n          # content:\n          #   application/json; charset=utf-8:\n          #     schema:\n          #       $ref: '#/components/schemas/notfound'\n          #     example: \u003e-\n          #       No convertible message found for id\n          #       \"8d19cf53-a264-4cc6-800c-95600aeb9141\"\n        '429':\n          description: Too many requests - Too many requests within a certain time frame.\n        '500':\n          description: Internal Server Error\n      servers:\n        - url: https://rest.mittoapi.net\n    servers:\n      - url: https://rest.mittoapi.net\n  /smsbulk:\n    post:\n      operationId: sendBulkSms\n      summary: Send SMS in Bulk\n      # parameters:\n      #   - name: X-Mitto-API-Key\n      #     in: header\n      #     schema:\n      #       type: string\n      #     example: uAGJbTkSuUJEMBExuofFwOzqJ5f5biwz\n      description: \u003e\n        Send multiple messages with a single API call. (If you inlude the same\n        phone number in the list more than once, the number will receive a text\n        message for each instance in your list.) The response you receive for\n        your request will show a different id for each phone number you included\n        with your request.\n          in: header\n          description: 'Your API key. You must include it for every request to send an SMS. Contact Mitto Support to get set up with one.'\n          schema:\n            type: string\n          example: 'uAGJbTkSuUJEMBExuofFwOzqJ5f5biwz'\n      requestBody:\n        description: Request payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - from\n                - to\n                - text\n              properties:\n                test:\n                  type: boolean\n                  description: \u003e\n                    When set to true, the API call is in test mode and no actual\n                    SMSes are delivered. The response returns “test”: true. For\n                    test calls, there is no id parameter in the response. When\n                    set to false, you make the API call in production mode. The\n                    system delivers an SMS, and returns the id parameter in the\n                    response.\n                      If you do not use this parameter , by default you make the API call in production mode.\n                  example: true\n                from:\n                  type: string\n                  description: \u003e\n                    Free-form text with which the sender identifies themselves\n                    to the recipient. This is what the recipient will see as\n                    from whom the message is. Can be a phone number, or the name\n                    of the company or the service. NOTE - what you provide here\n                    may not be shown to the customer depending on how carriers\n                    choose to handle your message.\n                  example: MITTO SMS\n                to:\n                  type: string\n                  description: \u003e\n                    A list of strings separated by commas. Each string is the\n                    number to which your message is sent. Numbers are specified\n                    in E.164 format. You can repeat the same phone number, and\n                    the message will be sent to the number as many times as the\n                    number is listed.\n                  example: '359898876737'\n                text:\n                  type: string\n                  description: |\n                    The body of the SMS message.\n                      If the message contains characters outside the range of the GSM Standard and Extended tables, then you need to set the character encoding to Unicode (type=Unicode as a query parameter). For details, refer to Long SMSs and Changing the Default Encoding of the Message. \n                  example: \u003e-\n                    Due to the limitations of GSM/PDU standard, the body text of\n                    an SMS message cannot be longer than 160 characters (70\n                    characters if the text is Unicode format). MITTOs SMS API\n                    overcomes this limitations by splitting larger messages into\n                    several smaller messages, each of which conforms to that\n                    standards. This operation is automatic and you do not have\n                    to do anything when making the API request the process is\n                    triggered automatically when the text entered in body of the\n                    SMS (the body parameter of the request) exceeds the limit.\n                type:\n                  type: string\n                  description: \u003e\n                    Character set in which the message body will be encoded. If\n                    not specified, the default encoding (GSM) is used. For\n                    Unicode, set type Unicode. For Binary, set type to be Byte.\n                    For automatic detection set type to auto.\n                  example: unicode\n                reference:\n                  type: string\n                  description: \u003e\n                    First metadata field for tagging the message. The metadata\n                    is returned in the delivery report by the callback. It can\n                    be any free-form text you consider appropriate. You can use\n                    a different reference string for each message or tag\n                    multiple messages with the same string and group them\n                    together in this way.\n                  example: Spring campaign\n                udh:\n                  type: string\n                  description: |\n                    Custom Hex-encoded User Data Header.\n                  example: 6050415811581\n                validity:\n                  type: integer\n                  description: \u003e\n                    Validity period of the SMS message in minutes. When a\n                    message has not been delivered to the receiver at the first\n                    attempt, subsequent delivery attempts will be made until the\n                    validity period expires, after which the message is\n                    discarded as undeliverable. If the specified validity period\n                    is different from the validity period of the supplier, then\n                    the shorter period is enforced. When not specified, the\n                    validity of a message defaults to 2,880 minutes (48 hours).\n                  example: 2879\n                pid:\n                  type: integer\n                  description: \u003e\n                    Protocol identifier to use. Must be consistent with the udh\n                    parameter value. When not specified, defaults to 0.\n                flash:\n                  type: boolean\n                  description: \u003e\n                    When set to true it will send the message in Flash mode.\n                    Flash SMS is when the SMS appears directly on the main\n                    screen without user interaction, and is not automatically\n                    stored in the inbox.\n                  example: true\n                callback:\n                  type: string\n                  description: |\n                    When used, it overrides the URL address set on the account. \n                  example: https://www.mycallback.com\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/smsbulk'\n              examples: {}\n      servers:\n        - url: https://rest.mittoapi.net\n    servers:\n      - url: https://rest.mittoapi.net\n  /usage/bycountry:\n    post:\n      operationId: getUsageByCountry\n      summary: Usage by Country\n      description: Find out how much you are using the API per country.\n      # parameters:\n      #   - name: X-Mitto-API-Key\n      #     in: header\n      #     schema:\n      #       type: string\n      #     example: uAGJbTkSuUJEMBExuofFwOzqJ5f5biwz\n      requestBody:\n        description: Request payload\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - startDate\n                - endDate\n                - accountName\n              properties:\n                startDate:\n                  type: string\n                  description: \u003e\n                    The date you want to start retrieving usage retrieving usage\n                    information from. The date should be expressed according to\n                    ISO-8601 format YYYY-MM-DD or YYYYMMDD.\n                  example: '2020-02-15'\n                endDate:\n                  type: string\n                  description: \u003e\n                    The date you want to stop retrieving usage information from.\n                    As with the start date, use ISO-8601 format YYYY-MM-DD or\n                    YYYYMMDD.\n                  example: '2020-02-28'\n                accountName:\n                  type: string\n                  description: \u003e\n                    The account name tied to your API key. If unknown, please\n                    contact your Account Manager.\n                  example: Starfleet Academy\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/usage'\ncomponents:\n  schemas:\n    usage:\n      type: object\n      title: Usage\n      properties:\n        country:\n          type: string\n          description: \u003e\n            The country code expressed according to [ISO 3166-1\n            Alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1) code format.\n        messagesCount:\n          type: string\n          description: |\n            Number of messages sent per country.\n        cost:\n          type: string\n          description: \u003e\n            This is the account name tied to your API key. If unknown, please\n            contact your account manager at Mitto for more information.\n    sms:\n      type: object\n      title: SMS\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            ID string of the SMS message. When the length of the body text of\n            the message exceeds the limit, then several concatenated are send to\n            the receiver and in that case only id of the first message is\n            returned. Not returned when making a test call or when error occurs.\n        timestamp:\n          type: string\n          description: \u003e-\n            Timestamp of the SMS message in ISO 8601 format. Example -\n            2019-04-13T17:51:06.3091182Z For a description of the format, refer\n            to [Date and Time Formats](https://www.w3.org/TR/NOTE-datetime) page\n            of the W3 Consortium.\n        responseCode:\n          type: integer\n          description: \u003e-\n            Text describing the responseCode. For details, refer to Status\n            Codes.\n        textLength:\n          type: integer\n          description: \u003e-\n            The length of the message you sent. If there is an error, or if the\n            message is empty, this will be 0.\n        responseText:\n          type: string\n          description: \u003e-\n            Text describing the responseCode. For details, refer to Status\n            Codes.\n        test:\n          type: boolean\n          description: \u003e-\n            When \"test\" is set to true, it indicates you are making a test API\n            call. (No actual SMS is sent.) When not present, or when \"test\" is\n            set to false or not included, an actual message is sent.\n      example:\n        id: 7d35863fe6f44695a713d54e6ba0aeb5\n        timestamp: '2019-04-13T17:51:06.3091182Z'\n        responseCode: 0\n        textLength: 13\n        responseText: SMS sent\n        test: true\n    smsbulk:\n      type: object\n      title: smsbulk\n      properties:\n        responseCode:\n          type: integer\n        responseText:\n          type: string\n        messages:\n          type: object\n          properties:\n            id:\n              type: string\n              description: \u003e-\n                The unique identifier for the individual message sent to a phone\n                number.\n            timestamp:\n              type: string\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      name: X-Mitto-API-Key\n      in: header\n      description: Represents API Key `X-Mitto-API-Key`\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/mitto.sms/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/mitto.sms/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}