{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/tvmaze.com/1.0/openapi.yaml",
			"byteSize": 30392,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.tvmaze.com/v1\n  - url: http://api.tvmaze.com/v1\ninfo:\n  contact:\n    url: http://www.tvmaze.com\n  description: |\n    Access to the user API is only possible for users with a [premium](http://www.tvmaze.com/premium) account. A user can only access their own user data.\n\n    Authentication uses HTTP Basic. Use the TVmaze username as authentication username, and the TVmaze API key as authentication password. Your API key can be found on your [dashboard](http://www.tvmaze.com/dashboard). To try out these API calls from this page, click the \"Authorize\" button on top and input your credentials.\n  title: TVmaze user API\n  version: \"1.0\"\n  x-apisguru-categories:\n    - media\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://twitter.com/tvmaze/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: http://static.tvmaze.com/apidoc/v1.yaml\n      version: \"3.0\"\n  x-providerName: tvmaze.com\nsecurity:\n  - usertoken: []\npaths:\n  /auth/poll:\n    post:\n      description: |\n        Using the token acquired in the `start` endpoint, you can start polling this endpoint once every 10 seconds.\n\n        When the user has confirmed the authentication request on their end, this endpoint will return the user's API key that you can use in subsequent authenticated endpoints. Note that it'll do so only once, subsequent requests after the initial 200 response will return a 404.\n\n        For as long as the user did not yet confirm their authentication request, this endpoint will return a 403.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                token:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  apikey:\n                    description: The user's API key\n                    type: string\n                  username:\n                    description: The user's username\n                    type: string\n                type: object\n          description: The user confirmed the authentication request\n        \"403\":\n          description: The authentication request was not confirmed yet\n        \"404\":\n          description: The authentication request was not found\n        \"429\":\n          description: You are polling too quickly, please back off\n      summary: Poll whether an authentication request was confirmed\n      tags:\n        - auth\n  /auth/start:\n    post:\n      description: |\n        If you want to access the TVmaze API on behalf of a user without querying them for their password, use this endpoint.\n\n        To get started, send a POST request containing the user's email address. The response will contain a `token`, which you can use as input to the `poll` endpoint. The user will receive an email prompting them to confirm the authentication request.\n\n        Alternatively, if you expect the user to be logged in to TVmaze on the device they are currently interacting with, you can set `email_confirmation` to false and redirect them to the `confirm_url` URL. If they are logged in to TVmaze, they will be able to confirm the authentication request instantly.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: The user's email address\n                  type: string\n                email_confirmation:\n                  default: true\n                  description: Whether to email the user a confirmation link\n                  type: boolean\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  confirm_url:\n                    description: URL where the user can confirm the authentication request\n                    type: string\n                  token:\n                    description: Authentication token to use in the `poll` endpoint\n                    type: string\n                type: object\n          description: The authentication request was succesfully started\n        \"401\":\n          description: The email address was found, but not confirmed\n        \"404\":\n          description: The email address was not found\n        \"429\":\n          description: You are starting authentication requests too quickly, please back off\n      summary: Start an authentication request\n      tags:\n        - auth\n  /auth/validate:\n    get:\n      description: If the credentials supplied as HTTP basic are valid, the user's level of premium - if any - is returned.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  premium:\n                    description: The user's premium level; 1 for Bronze, 2 for Silver, 3 for Gold; or 0 for none\n                    type: integer\n                type: object\n          description: The supplied credentials are valid\n        \"401\":\n          description: The supplied credentials are not valid\n      summary: Validate your authentication credentials\n      tags:\n        - auth\n  /scrobble/episodes:\n    post:\n      description: This endpoint can be used by all users, even without premium\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                properties:\n                  episode_id:\n                    description: The TVmaze episode ID\n                    type: integer\n                  marked_at:\n                    description: Epoch timestamp for when the user watched the episode, or 0 for unknown.\n                    type: integer\n                  type:\n                    $ref: \"#/components/schemas/MarkType\"\n                type: object\n              type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: All episodes were succesfully marked\n        \"207\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: Some episodes were succesfully marked, but there are errors\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: None of the episodes were succesfully marked\n      summary: Mark episodes as acquired or watched based on their IDs\n      tags:\n        - scrobbling\n  \"/scrobble/episodes/{episode_id}\":\n    parameters:\n      - in: path\n        name: episode_id\n        required: true\n        schema:\n          type: integer\n    put:\n      description: This endpoint can be used by all users, even without premium\n      requestBody:\n        $ref: \"#/components/requestBodies/MarkedEpisode\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MarkedEpisode\"\n          description: this episode is now marked\n        \"404\":\n          description: this episode does not exist\n        \"422\":\n          description: invalid input data\n      summary: Mark an episode as acquired or watched based on its ID\n      tags:\n        - scrobbling\n  /scrobble/shows:\n    post:\n      description: |\n        To specify a show, supply either `tvmaze_id`, `thetvdb_id` or `imdb_id`. To specify an episode, supply either both `season` and `episode`, or `airdate`.\n\n        This endpoint can be used by all users, even without premium.\n      parameters:\n        - description: The show's TVmaze ID\n          in: query\n          name: tvmaze_id\n          schema:\n            type: integer\n        - description: The show's TheTVDB ID\n          in: query\n          name: thetvdb_id\n          schema:\n            type: integer\n        - description: The show's IMDB ID\n          in: query\n          name: imdb_id\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                properties:\n                  airdate:\n                    description: The episode airdate\n                    format: date\n                    type: string\n                  episode:\n                    description: The episode number\n                    type: integer\n                  marked_at:\n                    description: Epoch timestamp for when the user watched the episode, or 0 for unknown.\n                    type: integer\n                  season:\n                    description: The season number\n                    type: integer\n                  type:\n                    $ref: \"#/components/schemas/MarkType\"\n                type: object\n              type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: All episodes were succesfully marked\n        \"207\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: Some episodes were succesfully marked, but there are errors\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BulkResponse\"\n          description: None of the episodes were succesfully marked\n      summary: Mark episodes within a show as acquired or watched based on their attributes\n      tags:\n        - scrobbling\n  \"/scrobble/shows/{show_id}\":\n    get:\n      description: This endpoint can be used by all users, even without premium\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/MarkedEpisode\"\n                type: array\n          description: An array of marked episodes\n      summary: List watched and acquired episodes for a show\n      tags:\n        - scrobbling\n    parameters:\n      - description: ID of the target show\n        in: path\n        name: show_id\n        required: true\n        schema:\n          type: integer\n      - description: Embed full episode info\n        in: query\n        name: embed\n        required: false\n        schema:\n          enum:\n            - episode\n          type: string\n  /user/episodes:\n    get:\n      parameters:\n        - description: Only return episodes from this specific show\n          in: query\n          name: show_id\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/MarkedEpisode\"\n                type: array\n          description: An array of marked episodes\n      summary: List the marked episodes\n      tags:\n        - marked episodes\n  \"/user/episodes/{episode_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: the episode is now unmarked\n        \"404\":\n          description: this episode was not marked\n      summary: Unmark an episode\n      tags:\n        - marked episodes\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MarkedEpisode\"\n          description: The marked episode\n        \"404\":\n          description: This episode is not marked\n      summary: Check if an episode is marked\n      tags:\n        - marked episodes\n    parameters:\n      - in: path\n        name: episode_id\n        required: true\n        schema:\n          type: integer\n    put:\n      description: Set `marked_at` to `NULL` or leave it out to use the current time.\n      requestBody:\n        $ref: \"#/components/requestBodies/MarkedEpisode\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MarkedEpisode\"\n          description: this episode is now marked\n        \"404\":\n          description: this episode does not exist\n        \"422\":\n          description: invalid input data\n      summary: Mark an episode\n      tags:\n        - marked episodes\n  /user/follows/networks:\n    get:\n      parameters:\n        - description: Embed full network info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - network\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/NetworkFollow\"\n                type: array\n          description: An array of followed networks\n      summary: List the followed networks\n      tags:\n        - followed networks\n  \"/user/follows/networks/{network_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: the network is now unfollowed\n        \"404\":\n          description: this network was not followed\n      summary: Unfollow a network\n      tags:\n        - followed networks\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NetworkFollow\"\n          description: The followed network\n        \"404\":\n          description: this network is not followed\n      summary: Check if a network is followed\n      tags:\n        - followed networks\n    parameters:\n      - in: path\n        name: network_id\n        required: true\n        schema:\n          type: integer\n    put:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NetworkFollow\"\n          description: this network is now followed\n        \"404\":\n          description: this network does not exist\n      summary: Follow a network\n      tags:\n        - followed networks\n  /user/follows/people:\n    get:\n      parameters:\n        - description: Embed full person info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - person\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PersonFollow\"\n                type: array\n          description: An array of followed people\n      summary: List the followed people\n      tags:\n        - followed people\n  \"/user/follows/people/{person_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: the person is now unfollowed\n        \"404\":\n          description: this person was not followed\n      summary: Unfollow a person\n      tags:\n        - followed people\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonFollow\"\n          description: The followed person\n        \"404\":\n          description: this person is not followed\n      summary: Check if a person is followed\n      tags:\n        - followed people\n    parameters:\n      - in: path\n        name: person_id\n        required: true\n        schema:\n          type: integer\n    put:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonFollow\"\n          description: this person is now followed\n        \"404\":\n          description: this person does not exist\n      summary: Follow a person\n      tags:\n        - followed people\n  /user/follows/shows:\n    get:\n      parameters:\n        - description: Embed full show info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - show\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ShowFollow\"\n                type: array\n          description: An array of followed shows\n      summary: List the followed shows\n      tags:\n        - followed shows\n  \"/user/follows/shows/{show_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: The show is now unfollowed\n        \"404\":\n          description: This show was not followed\n      summary: Unfollow a show\n      tags:\n        - followed shows\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShowFollow\"\n          description: The followed show\n        \"404\":\n          description: This show is not followed\n      summary: Check if a show is followed\n      tags:\n        - followed shows\n    parameters:\n      - in: path\n        name: show_id\n        required: true\n        schema:\n          type: integer\n    put:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShowFollow\"\n          description: This show is now followed\n        \"404\":\n          description: This show does not exist\n      summary: Follow a show\n      tags:\n        - followed shows\n  /user/follows/webchannels:\n    get:\n      parameters:\n        - description: Embed full webchannel info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - webchannel\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/WebchannelFollow\"\n                type: array\n          description: An array of followed webchannels\n      summary: List the followed webchannels\n      tags:\n        - followed webchannels\n  \"/user/follows/webchannels/{webchannel_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: the webchannel is now unfollowed\n        \"404\":\n          description: this webchannel was not followed\n      summary: Unfollow a webchannel\n      tags:\n        - followed webchannels\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebchannelFollow\"\n          description: The followed webchannel\n        \"404\":\n          description: this webchannel is not followed\n      summary: Check if a webchannel is followed\n      tags:\n        - followed webchannels\n    parameters:\n      - in: path\n        name: webchannel_id\n        required: true\n        schema:\n          type: integer\n    put:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebchannelFollow\"\n          description: this webchannel is now followed\n        \"404\":\n          description: this webchannel does not exist\n      summary: Follow a webchannel\n      tags:\n        - followed webchannels\n  /user/tags:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Tag\"\n                type: array\n          description: An array of tags\n      summary: List all tags\n      tags:\n        - tagged shows\n    post:\n      requestBody:\n        $ref: \"#/components/requestBodies/Tag\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tag\"\n          description: The newly created tag\n        \"422\":\n          description: invalid input data\n      summary: Create a new tag\n      tags:\n        - tagged shows\n  \"/user/tags/{tag_id}\":\n    delete:\n      parameters:\n        - in: path\n          name: tag_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: The tag was deleted\n        \"404\":\n          description: The tag does not exist\n      summary: Delete a specific tag\n      tags:\n        - tagged shows\n    patch:\n      parameters:\n        - in: path\n          name: tag_id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/Tag\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tag\"\n          description: The tag was updated\n        \"404\":\n          description: The tag does not exist\n        \"422\":\n          description: The tag could not be updated\n      summary: Update a specific tag\n      tags:\n        - tagged shows\n  \"/user/tags/{tag_id}/shows\":\n    get:\n      parameters:\n        - in: path\n          name: tag_id\n          required: true\n          schema:\n            type: integer\n        - description: Embed full show info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - show\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/TagInstance\"\n                type: array\n          description: A list of tagged shows\n        \"404\":\n          description: The tag does not exist\n      summary: List all shows under this tag\n      tags:\n        - tagged shows\n  \"/user/tags/{tag_id}/shows/{show_id}\":\n    delete:\n      parameters:\n        - in: path\n          name: tag_id\n          required: true\n          schema:\n            type: integer\n        - in: path\n          name: show_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: The show was untagged\n        \"404\":\n          description: The show was not tagged\n      summary: Untag a show\n      tags:\n        - tagged shows\n    put:\n      parameters:\n        - in: path\n          name: tag_id\n          required: true\n          schema:\n            type: integer\n        - in: path\n          name: show_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagInstance\"\n          description: The show was tagged\n        \"404\":\n          description: The show or tag does not exist\n      summary: Tag a show\n      tags:\n        - tagged shows\n  /user/votes/episodes:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/EpisodeVote\"\n                type: array\n          description: An array of episode votes\n      summary: List the episodes voted for\n      tags:\n        - voted episodes\n  \"/user/votes/episodes/{episode_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: The episode vote is now removed\n        \"404\":\n          description: This episode was not voted for\n      summary: Remove an episode vote\n      tags:\n        - voted episodes\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EpisodeVote\"\n          description: The episode vote\n        \"404\":\n          description: This episode is not voted for\n      summary: Check if an episode is voted for\n      tags:\n        - voted episodes\n    parameters:\n      - in: path\n        name: episode_id\n        required: true\n        schema:\n          type: integer\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EpisodeVote\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EpisodeVote\"\n          description: This episode is now voted for\n        \"404\":\n          description: This episode does not exist\n      summary: Vote for an episode\n      tags:\n        - voted episodes\n  /user/votes/shows:\n    get:\n      parameters:\n        - description: Embed full show info\n          in: query\n          name: embed\n          required: false\n          schema:\n            enum:\n              - show\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ShowVote\"\n                type: array\n          description: An array of show votes\n      summary: List the shows voted for\n      tags:\n        - voted shows\n  \"/user/votes/shows/{show_id}\":\n    delete:\n      responses:\n        \"200\":\n          description: The show vote is now removed\n        \"404\":\n          description: This show was not voted for\n      summary: Remove a show vote\n      tags:\n        - voted shows\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShowVote\"\n          description: The show vote\n        \"404\":\n          description: This show is not voted for\n      summary: Check if a show is voted for\n      tags:\n        - voted shows\n    parameters:\n      - in: path\n        name: show_id\n        required: true\n        schema:\n          type: integer\n    put:\n      description: Set `voted_at` to `NULL` or leave it out to use the current time.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ShowVote\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShowVote\"\n          description: This show is now voted for\n        \"404\":\n          description: This show does not exist\n      summary: Vote for a show\n      tags:\n        - voted shows\ncomponents:\n  requestBodies:\n    MarkedEpisode:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/MarkedEpisode\"\n    Tag:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Tag\"\n  schemas:\n    BulkResponse:\n      description: A list of responses to your bulk input, ordered the same as your input\n      items:\n        properties:\n          code:\n            description: The HTTP code that corresponds to this item\n            type: integer\n          errors:\n            description: A list of validation errors for this item (in case of error)\n            type: object\n          input:\n            description: The request data that belonged to this response (in case of error)\n            type: object\n          message:\n            description: A human-readable error message (in case of error)\n            type: string\n          result:\n            description: The resulting created/updated object (in case of success)\n            type: object\n      type: array\n    Episode:\n      type: object\n    EpisodeVote:\n      properties:\n        episode_id:\n          readOnly: true\n          type: integer\n        vote:\n          description: The vote number\n          maximum: 10\n          minimum: 1\n          type: integer\n        voted_at:\n          description: Epoch timestamp for when the user voted for the episode\n          readOnly: true\n          type: integer\n      type: object\n    MarkType:\n      description: 0 for watched, 1 for acquired, 2 for skipped\n    MarkedEpisode:\n      properties:\n        _embedded:\n          properties:\n            episode:\n              $ref: \"#/components/schemas/Episode\"\n          type: object\n        episode_id:\n          readOnly: true\n          type: integer\n        marked_at:\n          description: Epoch timestamp for when the user watched the episode, or 0 for unknown.\n          type: integer\n        type:\n          $ref: \"#/components/schemas/MarkType\"\n      type: object\n    Network:\n      type: object\n    NetworkFollow:\n      properties:\n        _embedded:\n          properties:\n            network:\n              $ref: \"#/components/schemas/Network\"\n          type: object\n        network_id:\n          type: integer\n      type: object\n    Person:\n      type: object\n    PersonFollow:\n      properties:\n        _embedded:\n          properties:\n            person:\n              $ref: \"#/components/schemas/Person\"\n          type: object\n        person_id:\n          type: integer\n      type: object\n    Show:\n      type: object\n    ShowFollow:\n      properties:\n        _embedded:\n          properties:\n            show:\n              $ref: \"#/components/schemas/Show\"\n          type: object\n        show_id:\n          type: integer\n      type: object\n    ShowVote:\n      properties:\n        show_id:\n          readOnly: true\n          type: integer\n        vote:\n          description: The vote number\n          maximum: 10\n          minimum: 1\n          type: integer\n        voted_at:\n          description: Epoch timestamp for when the user voted for the episode\n          readOnly: true\n          type: integer\n      type: object\n    Tag:\n      properties:\n        id:\n          readOnly: true\n          type: integer\n        name:\n          type: string\n      type: object\n    TagInstance:\n      properties:\n        _embedded:\n          properties:\n            show:\n              $ref: \"#/components/schemas/Show\"\n          type: object\n        show_id:\n          type: integer\n      type: object\n    Webchannel:\n      type: object\n    WebchannelFollow:\n      properties:\n        _embedded:\n          properties:\n            webchannel:\n              $ref: \"#/components/schemas/Webchannel\"\n          type: object\n        webchannel_id:\n          type: integer\n      type: object\n  securitySchemes:\n    usertoken:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/tvmaze.com/1.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/tvmaze.com/1.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}