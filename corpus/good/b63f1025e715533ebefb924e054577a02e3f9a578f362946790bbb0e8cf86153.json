{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/therealexpertai/nlapi-openapi-specification"
		},
		"file": {
			"name": "geotax-w-geojson.yaml",
			"size": 0,
			"path": "geotax-w-geojson.yaml",
			"byteSize": 10323,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    email: api.inquiry@expert.ai\n    name: expert.ai\n    url: 'https://expert.ai/'\n  description: \u003e\n    The `geotax` taxonomy document classification resources of the expert.ai Natural Language API detect the citations of geographic places in a text and returns the corresponding countries.\u003cbr /\u003e\n    The Natural Language API has a [general contract](https://github.com/therealexpertai/nlapi-openapi-specification/blob/master/nlapi.yaml) specifying how to use document classification resources. This specific sub-contract specifies how to use the `geotax taxonomy resources in a special way to also obtain GeoJOSN data that can be used in a GIS (Geographic Information System), for example to highlight in a map the countries the text is about.\n  title: expert.ai Natural Language API - GeoTax classification with GeoJSON\n  version: v2\nservers:\n  - url: 'https://nlapi.expert.ai/v2'\npaths:\n  /categorize/geotax/{language}:\n    post:\n      description: GeoJSON classification of the posted text\n      parameters:\n       - description: Document language (code); use the `taxonomies` resource of the expert.ai Natural Language API to discover the languages that the classification module supports\n         in: path\n         name: language\n         required: true\n         schema:\n           type: string\n           enum:\n             - de\n             - en\n             - es\n             - fr\n             - it\n       - description: Classification features, specify `extradata` to obtain GeoJSON data\n         in: query\n         name: features\n         required: true\n         schema:\n           type: string\n           enum:\n             - extradata\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnalysisRequest'\n        description: The document to be classified\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GeoTaxResponse'\n          description: Resource response\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n      summary: Classification\n      tags:\n        - Document Classification\ncomponents:\n  schemas:\n    GeoTaxResponse:\n      description: Resource response\n      properties:\n        success:\n          description: Operation completed successfully (true/false)\n          type: boolean\n        errors:\n          description: Service errors\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceError'\n        data:\n          $ref: '#/components/schemas/GeoTaxDocument'\n    GeoTaxDocument:\n      description: Classification results\n      properties:\n        version:\n          description: Service version\n          type: string\n        language:\n          description: Text language\n          type: string\n        categories:\n          description: Categories\n          type: array\n          items:\n            $ref: '#/components/schemas/Category'\n        extraData:\n          description: Extra-data containing GeoJSON data\n          properties:\n            geojson:\n              $ref: '#/components/schemas/geoJsonBase'\n    geoJsonBase:\n        description: \u003e\n          This schema is solely an abstract definition to share the common GeoJSON\n          attributes to the concrete GeoJSON types.\n        type: object\n        properties:\n          type:\n            $ref: '#/components/schemas/featureCollection'\n    point:\n      title: Point\n      description: \u003e\n        For type `Point`, the `coordinates` member must be a single position.\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Point\n        coordinates:      \n          description: lat long coordinates\n          minimum: 2\n          maximum: 2\n          type: number\n    feature:\n      title: Feature\n      description: \u003e-\n        A GeoJSON object with the type `Feature` is a feature object.\n        * A feature object must have a member with the name `geometry`. The\n        value of the geometry member is a geometry object as defined above or\n        a JSON null value.\n        * A feature object must have a member with the name `properties`. The\n        value of the properties member is an object (any JSON object or\n        a JSON null value).\n        * If a feature has a commonly used identifier, that identifier should\n        be included as a member of the feature object with the name `id`.\n      type: object\n      required:\n        - geometry\n        - properties\n      properties:\n        type:\n          type: string\n          enum:\n            - Feature\n        geometry:\n          title: Feature Geometry\n          description: \u003e\n            The `geometry` member specifies the location Geometry Object of the\n            feature.  If the feature has no location, the value should be null.\n          type: object\n          $ref: '#/components/schemas/point'\n        properties:\n          title: Feature Properties\n          description: \u003e\n            The `properties` member is an object containing application-specific\n            attributes of the feature.\n          type: object\n          properties:\n              id:\n                description: The GeoTax id\n                type: string\n              geonameid:\n                description: The geonameid of place\n                type: string\n              name:\n                description: The Geo Place name\n                type: string\n    featureCollection:\n      title: Feature Collection\n      description: \u003e-\n        A GeoJSON object with the type `FeatureCollection` is a feature\n        collection object.\n        An object of type `FeatureCollection` must have a member with the\n        name `features`. The value corresponding to `features` is an array.\n        Each element in the array is a feature object as defined above.\n      required: [ features ]\n      properties:\n        type:\n          type: string\n          enum:\n            - FeatureCollection\n        features:\n          title: Features\n          type: array\n          items:\n            $ref: '#/components/schemas/feature'\n        bbox:\n           $ref: '#/components/schemas/boundingBox'\n    boundingBox:\n      title: Bounding Box\n      type: array\n      description: \u003e\n        To include information on the coordinate range for geometries, features,\n        or feature collections, a GeoJSON object may have a member named `bbox`.\n        The value of the bbox member must be a 2*n array where n is the number of\n        dimensions represented in the contained geometries, with the lowest\n        values for all axes followed by the highest values. The axes order of a\n        bbox follows the axes order of geometries. In addition, the coordinate\n        reference system for the bbox is assumed to match the coordinate\n        reference system of the GeoJSON object of which it is a member.\n      minItems: 4\n      items:\n        minimum: 4\n        type: number\n    AnalysisRequest:\n      description: Request\n      properties:\n        document:\n          $ref: '#/components/schemas/Document'\n    Document:\n      description: Document\n      properties:\n        text:\n          description: The document's text\n          type: string\n    DocumentPosition:\n      description: Position\n      properties:\n        start:\n          description: Zero-based position of the first character\n          format: int64\n          type: integer\n        end:\n          description: Zero-based position of the character after the last\n          format: int64\n          type: integer\n    ServiceError:\n      description: Error information\n      properties:\n        code:\n          description: Error code\n          type: string\n        message:\n          description: Error message\n          type: string\n    CategorizeResponse:\n      description: Classification resource response\n      properties:\n        success:\n          description: Operation completed successfully (true/false)\n          type: boolean\n        errors:\n          description: Service errors\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceError'\n        data:\n          $ref: '#/components/schemas/CategorizeDocument'\n    Category:\n      description: Category\n      properties:\n        id:\n          description: Category ID\n          type: string\n        label:\n          description: Category label\n          type: string\n        hierarchy:\n          description: Hierarchical path\n          type: array\n          items:\n            type: string\n        score:\n          description: Score assigned to the category to represent its relevance\n          format: int32\n          minimum: 0\n          type: integer\n        winner:\n          description: True if the category is deemed particularly relevant\n          type: boolean\n        namespace:\n          description: Name of the software package containing the reference taxonomy\n          type: string\n        frequency:\n          description: \u003e-\n            Score expressed as a percentage of the sum of the scores of all the\n            candidate categories, winners and not (see the **score** property)\n          format: float\n          maximum: 100\n          minimum: 0\n          type: number\n        positions:\n          description: \u003e-\n            Positions of the portions of text that contributed to the selection\n            of the category\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentPosition'\n    CategorizeDocument:\n      description: Categorization data\n      properties:\n        version:\n          description: Service version\n          type: string\n        language:\n          description: Text language\n          type: string\n        categories:\n          description: Categories\n          type: array\n          items:\n            $ref: '#/components/schemas/Category'\n  securitySchemes:\n    bearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http",
			"canonicalURL": "/github.com/therealexpertai/nlapi-openapi-specification@2544717a414639e3814f158ec6ef6e33e7a08b7f/-/blob/geotax-w-geojson.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/therealexpertai/nlapi-openapi-specification/blob/2544717a414639e3814f158ec6ef6e33e7a08b7f/geotax-w-geojson.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}