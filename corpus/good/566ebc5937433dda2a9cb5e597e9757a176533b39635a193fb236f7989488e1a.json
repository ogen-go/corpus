{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swsad-dalaotelephone/docs"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api/api.yaml",
			"byteSize": 33225,
			"content": "openapi: 3.0.0\ninfo:\n  title: Bao Bao Zhuan\n  description: 'All apis for Bao Bao Zhuan.'\n  termsOfService: https://swsad-dalaotelephone.github.io/docs/%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html###%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83\n  contact:\n    name: gitgiter\n    email: 1176748429@qq.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about baobaozhuan\n  url: https://swsad-dalaotelephone.github.io/docs/\nservers:\n- url: https://api.baobaozhuan.cn/\n- url: http://127.0.0.1:8080\n\npaths:\n  /user/weApp:\n    get:\n      tags: \n      - user\n      summary: Login weApp, get the openId\n      parameters:\n      - name: code\n        in: query\n        description: The code for getting openid and session key.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Status OK. If user exist, return msg and user info, else return msg and openId.\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                  user:\n                    $ref: '#/components/schemas/user'\n                  open_id:\n                    type: string\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /user:\n    post:\n      tags:\n      - user\n      summary: Register account, create a new user\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                nick_name:\n                  type: string\n                  description: Nick name\n                phone:\n                  type: string\n                  description: Phone number\n                password:\n                  type: string\n                  description: Password\n                open_id:\n                  type: string\n                  description: OpenId for identifying wechat user\n      responses:\n        200:\n          description: OK\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                  user:\n                    $ref: '#/components/schemas/user'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n      \n  /user/session:\n    post:\n      tags:\n      - user\n      summary: Login account, which will return cookie in header when success\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                phone:\n                  type: string\n                  description: Phone number\n                password:\n                  type: string\n                  description: Password\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n        404:\n          $ref: '#/components/responses/404NotFound'\n    delete:\n      tags:\n      - user\n      summary: Logout account and delete session, cookie needed\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n          \n  /user/profile:\n    get:\n      tags:\n      - user\n      summary: Get user profile, cookie needed\n      responses:\n        200:\n          description: OK\n          content: \n            application/json:\n              schema:\n                $ref: '#/components/schemas/user'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n    put:\n      tags:\n      - user\n      summary: Update user profile, cookie needed \n  \n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: User id, cannot be modified or be empty\n                nick_name:\n                  type: string\n                  description: New nick name\n                phone:\n                  type: string\n                  description: Phone number, cannot be modified or be empty \n                gender:\n                  type: integer\n                  description: New gender, 0 for unknow, 1 for male, 2 for female\n                birthday:\n                  type: string\n                  description: New birthday\n                campus_id:\n                  type: integer\n                  description: Id of campus in SYSU\n                grade:\n                  type: string\n                  description: New grade\n                school_id:\n                  type: integer\n                  description: Id of school\n                preferences:\n                  type: array\n                  description: The types of the task which the user interests in\n                  items:\n                    type: integer\n                    description: Id of tag\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n                  \n  /user/password:\n    patch:\n      tags:\n      - user\n      summary: Modify user password, cookie needed\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                old_pass:\n                  type: string\n                  description: The old password\n                new_pass:\n                  type: string\n                  description: The new password\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /user/preferences:\n    get:\n      tags: \n      - user\n      summary: Get user preferences, cookie needed\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tag_ids:\n                    type: array\n                    description: All tag ids\n                    items:\n                      type: integer\n                      description: Tag id\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n    put:\n      tags:\n      - user\n      summary: Update user preferences, cookie needed\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                tag_ids:\n                    type: array\n                    description: All tag ids\n                    items:\n                      type: integer\n                      description: Tag id\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /user/recommendedTasks:\n    get:\n      tags: \n      - user\n      summary: Get the list of undo tasks for recommendation\n      parameters: \n      - name: user_id\n        in: query\n        required: false\n        description: Id of the user, can be empty\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: List of tasks\n                properties:\n                  tasks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/task'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /user/publishedTasks:\n    get:\n      tags: \n      - user\n      summary: Get the list of published tasks, cookie needed\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: List of tasks\n                properties:\n                  tasks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/task'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /user/acceptedTasks:\n    get:\n      tags: \n      - user\n      summary: Get the list of accepted tasks, cookie needed\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: List of tasks\n                properties:\n                  accepted:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        acceptance:\n                          $ref: '#/components/schemas/acceptance'\n                        task:\n                          $ref: '#/components/schemas/task'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /task:\n    post:\n      tags:\n      - task\n      summary: Publish task, create a new task, cookie needed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/task'\n      responses:\n        200:\n          description: OK\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                  task:\n                    $ref: '#/components/schemas/task'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n    put:\n      tags: \n      - task\n      summary: Update Task, update an exited task, cookie needed\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/task'\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /task/{task_id}:\n    get:\n      tags: \n      - task\n      summary: Get the detail information of the task, if has cookie, will also return the acceptance\n      parameters: \n      - name: task_id\n        in: path\n        description: Id of the task which is queried\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task:\n                    $ref: '#/components/schemas/task'\n                  acceptance:\n                    $ref: '#/components/schemas/acceptance'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /task/{task_id}/submittedTasks:\n    get:\n      tags: \n      - task\n      summary: Get the list of submitted tasks' acceptance record, cookie needed\n      parameters: \n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: List of tasks\n                properties:\n                  submitted:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/acceptance'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /task/{task_id}/status:\n    patch:\n      tags: \n      - task\n      summary: Update task status, only allowing to change the task status to stop task, cookie needed\n      parameters: \n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task which is to be stopped\n        schema:\n          type: string\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /task/{task_id}/statistic:\n    get:\n      tags:\n      - task\n      summary: Get the statistics of questionnaire, cookie needed\n      parameters:\n      - name: task_id\n        in: path\n        required: true\n        description: Task id of the questionnaire\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statistics:\n                    type: array\n                    description: Statistics of multiple choice questions\n                    items:\n                      type: object\n                      description: All the multiple choice questions\n                      properties:\n                        option_count:\n                          type: array\n                          description: Statistics of each option of the question\n                          items:\n                            type: integer\n                        option_name:\n                          type: array\n                          description: The specific name of each option\n                          items:\n                            type: string\n                        question:\n                          type: string\n                          description: The content of the multiple choice questions\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /task/{task_id}/statistic/downloadLink:\n    get:\n      tags:\n      - task\n      summary: Get the download link of the statistics\n      parameters:\n      - name: task_id\n        in: path\n        required: true\n        description: Task id\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  link:\n                    type: string\n                    description: The download link of the statistics\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n        \n  /task/{task_id}/acceptance:\n    post:\n      tags: \n      - task\n      summary: Accept task, create an acceptance, cookie needed\n      parameters: \n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task which is chosen\n        schema:\n          type: string\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n    delete:\n      tags: \n      - task\n      summary: Quit/Give up task, delete the acceptance, cookie needed\n      parameters: \n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task which is to be given up\n        schema:\n          type: string\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /task/{task_id}/acceptance/result:\n    patch:\n      tags: \n      - task\n      summary: Verify tasks, cookie needed\n      parameters:\n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task which is to be verified\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                accepter_id:\n                  type: string\n                  description: Id of the user who has accepted and completed the task\n                result:\n                  type: boolean\n                  description: True for confirm, false for reject\n                feedback:\n                  type: string\n                  description: Feedback for result\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n      \n  /task/{task_id}/acceptance/answer:\n    patch:\n      tags: \n      - task\n      summary: Submit answer, cookie needed\n      parameters:\n      - name: task_id\n        in: path\n        required: true\n        description: Id of the task which is to be submitted\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                answer:\n                  type: object\n                  description: Answer for questionnaire or information for recruitment, in json format\n      responses:\n        200:\n          $ref: '#/components/responses/200StatusOK'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n    \n  /ad/recommendedAds:\n    get:\n      tags: \n      - ad\n      summary: Advertisement recommendation\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ads:\n                    type: array\n                    description: List of recommended advertisements\n                    items:\n                      $ref: '#/components/schemas/advertisement'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /resource/school/{school_id}:\n    get:\n      tags: \n      - resources\n      summary: Get school name by id\n      parameters:\n      - name: school_id\n        in: path\n        description: Id of school\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  school_name: \n                    type: string\n                    description: Name of school\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /resource/schools:\n    get:\n      tags: \n      - resources\n      summary: Get all schools\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  schools: \n                    type: array\n                    description: School list\n                    items:\n                      $ref: '#/components/schemas/school'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /resource/campus/{campus_id}:\n    get:\n      tags: \n      - resources\n      summary: Get campus name by id\n      parameters:\n      - name: campus_id\n        in: path\n        description: Id of campus\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  campus_name: \n                    type: string\n                    description: Name of campus\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /resource/campuses:\n    get:\n      tags: \n      - resources\n      summary: Get all campuses\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  campuses: \n                    type: array\n                    description: Campus list\n                    items:\n                      $ref: '#/components/schemas/campus'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n  \n  /resource/tag/{tag_id}:\n    get:\n      tags: \n      - resources\n      summary: Get tag name by tag id\n      parameters:\n      - name: tag_id\n        in: path\n        description: Id of tag\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tag_name: \n                    type: string\n                    description: Name of tag\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \n  /resource/tags:\n    get:\n      tags: \n      - resources\n      summary: Get all tags\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tags: \n                    type: array\n                    description: Tag list\n                    items:\n                      $ref: '#/components/schemas/tag'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        404:\n          $ref: '#/components/responses/404NotFound'\n        500:\n          $ref: '#/components/responses/500ServerErr'\n          \ncomponents:\n  schemas:\n    user:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Id of user\n        nick_name:\n          type: string\n          description: Nick name of user\n        gender:\n          type: string\n          description: Gender of user\n        brithday:\n          type: string\n          description: Birthday of user\n        campus_id:\n          type: integer\n          description: Campus id of user, not the name of campus\n        school_id:\n          type: integer\n          description: School id of user, not the name of school\n        grade:\n          type: string\n          description: Grade of user\n        phone:\n          type: string\n          description: Phone number of user\n        email:\n          type: string\n          description: Email of user\n    questionnaire:\n      type: object\n      description: All content of the questionnaire, in json format\n      properties:\n        quest_des:\n          type: string\n          description: Descripition for the questionnaire\n        questions:\n          type: array\n          description: All questions\n          items:\n            $ref: '#/components/schemas/question'\n    question:\n      type: object\n      description: Each question\n      properties:\n        quest_type:\n          type: string\n          description: Type of the question\n        quest_title:\n          type: string\n          description: The question\n        quest_option:\n          type: array\n          description: Options of a question\n          items:\n            type: string\n            description: Option\n    dataCollection:\n      type: object\n      description: All content of data collection, in json format\n      properties:\n        data_des:\n          type: string\n          description: Description for the data required\n        submit_way:\n          type: string\n          description: Email only, may change in future.\n    recruitment:\n      type: object\n      description: All content of recruitment\n      properties:\n        recruit_des:\n          type: string\n          description: Description for the recruitment \n        start_time:\n          type: string\n          description: Start time for the task\n        end_time:\n          type: string\n          description: End time for the task\n        location:\n          type: string\n          description: Location for the task\n        participant_info:\n          type: object\n          description: Some required information of the participant\n    task:\n      type: object\n      description: Task info\n      properties:\n        id:\n          type: string\n          description: Task id, which is given after publishing, only can be empty before publishing\n        publisher_id:\n          type: string\n          description: User id of the publisher\n        name:\n          type: string\n          description: Task name\n        brief_info:\n          type: string\n          description: Brief information of the task\n        type:\n          type: string\n          description: Task type, questionnaire is \"q\", data collection is \"d\", recruitment is \"r\"\n        contact:\n          type: string\n          description: Contact of the publisher\n        requirements:\n          type: object\n          description: The types of target people, in json format\n        tag_id:\n          type: integer\n          description: The tag id of the task\n        ddl:\n          type: string\n          description: The deadline for the task\n        status:\n          type: integer\n          description: The status of the task, 0 for \"running\", 1 for \"end\", 2 for \"stop\"\n        required_count:\n          type: integer\n          description: Total count of required tasks\n        submited_count:\n          type: integer\n          description: Total count of submited tasks\n        finished_count:\n          type: integer\n          description: Total count of finished tasks\n        reward:\n          type: number\n          description: Reward for finshing the task (one person)\n        content:\n          type: object\n          description: All content for task, in json format (see schema of task for detail), only used in /task/publishTask api and /task/getTaskDetail api\n          oneOf:\n            - $ref: '#/components/schemas/questionnaire'\n            - $ref: '#/components/schemas/dataCollection'\n            - $ref: '#/components/schemas/recruitment'\n    acceptance:\n      type: object\n      description: Information of the accepter and task\n      properties:\n        id:\n          type: string\n          description: Acceptance id\n        task_id:\n          type: string\n          description: Task id\n        accepter_id:\n          type: string\n          description: Id of user who accepted this task\n        accepter_name:\n          type: string\n          description: Name of user who accepted this task\n        status:\n          type: integer\n          description: Status of the acceptance, 0 for \"unsubmmited\", 1 for \"waitConfirm\", 2 for \"unqualified\", 3 for \"finished\"\n        answer:\n          type: object\n          description: Answers of the questionnaire, or required information of the recruitment, in json format\n          properties:\n            answer:\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    description: Question type, \"m\" for multiple-choice question, \"f\" for the filling-blank question\n                  option:\n                    type: array\n                    description: The option index\n                    items:\n                      type: integer\n                  text:\n                    type: string\n                    description: Answer for the filling-blank question\n        feedback:\n          type: string\n          description: Feedback of the task by publisher\n    advertisement:\n      type: object\n      description: Advertisement\n      properties:\n        id: \n          type: string\n          description: Advertisement id\n        link:\n          type: string\n          description: Advertisement link\n        image:\n          type: string\n          description: Image source link of advertisement\n    # preference:\n    #   type: object\n    #   description: Preference\n    #   properties:\n    #     tag_ids:\n    #       type: array\n    #       description: All tag ids\n    #       items:\n    #         type: integer\n    #         description: Tag id\n    #     user_id:\n    #       type: string\n    #       description: User id\n    school:\n      type: object\n      description: School\n      properties:\n        id: \n          type: integer\n          description: School id\n        name:\n          type: string\n          description: School name\n        type:\n          type: string\n          description: School type\n    campus:\n      type: object\n      description: Campus\n      properties:\n        id: \n          type: integer\n          description: Campus id\n        name:\n          type: string\n          description: Campus name\n    tag:\n      type: object\n      description: Tag\n      properties:\n        id: \n          type: integer\n          description: Tag id\n        name:\n          type: string\n          description: Tag name\n  responses:\n    200StatusOK:\n      description: Status OK\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              msg:\n                type: string\n    400BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              msg:\n                type: string\n                default: 'Bad Request'\n    404NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              msg:\n                type: string\n                default: 'Not Found'\n    500ServerErr:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              msg:\n                type: string\n                default: 'Internal Server Error'\n              ",
			"canonicalURL": "/github.com/swsad-dalaotelephone/docs@b852628c2e81fcee9c4893e4a2f5e5f9afcecf25/-/blob/api/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swsad-dalaotelephone/docs/blob/b852628c2e81fcee9c4893e4a2f5e5f9afcecf25/api/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}