{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/StrongKey/fido2"
		},
		"file": {
			"name": "fido-openapi.yaml",
			"size": 0,
			"path": "docs/fido-openapi.yaml",
			"byteSize": 33860,
			"content": "openapi: 3.0.0\ninfo:\n  title: FIDO2 Server API\n  version: 3.0.0\n  description: |\n    The FIDO2 Server API provides the registration and authentication web services required to manage users' FIDO2 keys.\n\n    All API calls require a cryptographic domain ID (\"did\"), a FIDO2 protocol (\"protocol\"), and the type of authentication used (\"authtype\"). \n    \n    Cryptographic domains provide a method of cryptographically separating encrypted data. Each domain uses a different set of encryption keys, a different set of credentials, and can be configured separately to have different behaviors.\n    \n    The FIDO2 protocol provides a system of standard cryptography techniques that provide strong authentication and protect the integrity of requests made to the FIDO2 server.\n    \n    The type of authentication instructs the FIDO2 protocols to handle different methods of authentication used to access the server.\n  termsOfService: https://www.strongkey.com/privacy-policy-terms-of-use/#terms-of-use\n  contact:\n    email: support@strongkey.com\n  license:\n    name: GNU LGPL 2.1+\n    url: http://www.fsf.org/licensing/licenses/lgpl.html\nservers:\n  - url: /skfs/rest \ntags:\n  - name: Registration\n    description: Register a user and their FIDO2 key using FIDO2 protocols.\n  - name: Authentication\n    description: Authenticate a user using FIDO2 protocols.\n  - name: Key Regulation\n    description: Management API for registered FIDO2 keys.\n  - name: Accessibility\n    description: Operations to verify the integrity of the FIDO2 server.\npaths:\n  /preregister:\n    post:\n      summary: Request a one time challenge for registration.\n      description: Step 1 for registering a FIDO2 key. This method creates and returns a challenge to the caller.\n      tags:\n        - Registration\n      operationId: preregister\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  required:\n                    - username\n                    - displayname\n                    - options\n                  properties:\n                    username:\n                      type: string\n                      example: johndoe\n                    displayname:\n                      type: string\n                      example: johndoe_dn\n                    options: \n                      type: string\n                      example: \"{\\\"attestation\\\":\\\"direct\\\",\\\"Residentkey\\\": \\\"req\\\",\\\"userverfication\\\": true}\"\n                    extensions:\n                      type: string\n                      example: \"{}\"\n      responses:\n        '200':\n          description: Returned a one time challenge for FIDO2 registration.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  rp:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        example: StrongKey demo application\n                      id:\n                        type: string\n                        example: strongkey.com\n                  user:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        example: johndoe\n                      id:\n                        type: string\n                        example: 2ipST--mR0l_XeKR1l-sLYR4CgjdvdhrstXaypbnawk\n                      displayName:\n                        type: string\n                        example: Initial Registration\n                  challenge:\n                    type: string\n                    example: zGGO_EfUKgk1yvOoW9Di0w\n                  pubKeyCredParams:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        type:\n                          description: Type of key\n                          type: string\n                          example: public-key\n                        alg:\n                          type: integer\n                          example: -7\n                  excludeCredentials:\n                    type: array\n                    items:\n                      type: object\n                  attestation:\n                    type: string\n                    example: direct\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /register:\n    post:\n      summary: Submit a one time signed challenge for registration.\n      description: Step 2 for registering a FIDO2 key. This API call allows the user to return the signed challenge to the server for verification.\n      tags:\n        - Registration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  required:\n                    - metadata\n                    - response\n                  properties:\n                    metadata:\n                      description: Holds metadata required by the registration route, wrapped into a string.\n                      type: string\n                      example: \"{\\\"version\\\": \\\"1.0\\\",\\\"create_location\\\": \\\"Sunnyvale, CA\\\",\\\"username\\\": \\\"johndoe\\\",\\\"origin\\\": \\\"https://demo4.strongkey.com\\\"}\"\n                    response:\n                      description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.\n                      type: string\n                      example: \"{\\\"id\\\":\\\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\\\",\\\"rawId\\\": \\\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\\\",\\\"response\\\": {\\\"attestationObject\\\": \\\"o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAKh568CoVnRo3MIwVyLbYTiXuO7FTbsKfuqin4vhpu9YAiAEWQuISPN74PyBD_tpWmjKix9gg_sQjf7xj0hO096XDGN4NWOBWQHkMIIB4DCCAYOgAwIBAgIEbCtY8jAMBggqhkjOPQQDAgUAMGQxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5TdHJvbmdBdXRoIEluYzEiMCAGA1UECxMZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEYMBYGA1UEAwwPQXR0ZXN0YXRpb25fS2V5MB4XDTE5MDcxODE3MTEyN1oXDTI5MDcxNTE3MTEyN1owZDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlN0cm9uZ0F1dGggSW5jMSIwIAYDVQQLExlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMRgwFgYDVQQDDA9BdHRlc3RhdGlvbl9LZXkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQx9IY-uvfEvZ9HaJX3yaYmOqSIYQxS3Oi3Ed7iw4zXGR5C4RaKyOQeIu1hK2QCgoq210KjwNFU3TpsqAMZLZmFoyEwHzAdBgNVHQ4EFgQUNELQ4HBDjTWzj9E0Z719E4EeLxgwDAYIKoZIzj0EAwIFAANJADBGAiEA7RbR2NCtyMQwiyGGOADy8rDHjNFPlZG8Ip9kr9iAKisCIQCi3cNAFjTL03-sk7C1lij7JQ6mO7rhfdDMfDXSjegwuWhhdXRoRGF0YVkBNPgUPcPowj_96fevjVCLWyuOXtHPc57ItRHBr0kyY4M-QQAAAAAAAAAAAAAAAAAAAAAAAAAAALDv1TjffHaHKRTJ_6HTapfASSnIs3Xk3rUyFgNOUzoC5aL6uas7uQDQt0_edIk1h53DoCoCHpFmJaMjKHlvWelbigwlFLWxgwlWRFs1WXAGlLL_Q5balEou9VJGPHNPstewZX-LivspETzci1U5L9wMptifdrENxiJQ1pFcBHUN8cLlQ_eGnKy1oqw4q98KinagDSt-vKZOxSYXtEYo_4w0KIw_9nkSc7yEee0CzjWROKUBAgMmIAEhWCDyaCL1FRBjx_tJLFlnzwTSys214ccamb3iM8ioevGOEiJYIG_S-DmdODz6_GN6nOT4nlcmu55QbWFZXu7anb-KQgdI\\\",\\\"clientDataJSON\\\": \\\"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiTENkbXlPQ2ZEUzltZDVJZkFYTzhtZyIsIm9yaWdpbiI6Imh0dHBzOi8vcWEtaW5mb3N5cy1maWRvLTIuc3Ryb25na2V5LmNvbTo4MTgxIn0\\\"},\\\"type\\\": \\\"public-key\\\"}\"\n      responses:\n        '200':\n          description: The FIDO2 key has been successfully registered.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: |\n                  {} or {\"Successfully registered key\"}\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /preauthenticate:\n    post:\n      summary: Request a one time challenge for authentication.\n      description: Step 1 for authenticating a FIDO2 key. This API call creates and returns a challenge to the caller.\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  required:\n                    - username\n                  properties:\n                    username:\n                      description: Name of the current user calling the preauthentication route\n                      type: string\n                      example: \"johndoe\"\n                    options:\n                      description: Holds options required by the preauthentication route\n                      type: string\n                      example: \"{}\"\n      responses:\n        '200':\n          description: Returned a one time challenge for FIDO2 authentication.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  Response:\n                    type: object\n                    properties:\n                      challenge:\n                        type: string\n                      allowCredentials:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            type:\n                              type: string\n                            id:\n                              type: string\n                            alg:\n                              type: integer\n                    example: |\n                      {\n                        \"challenge\": \"KA44RUt7EazLBRIN32JEeg\",\n                        \"allowCredentials\": \n                          [\n                            {\n                              \"type\": \"public-key\",\n                              \"id\": \"QQ7PNLnY\",\n                              \"alg\": -7\n                            }\n                          ]\n                      }\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /authenticate:\n    post:\n      summary: Submit a one time signed challenge for authentication.\n      description: Step 2 for authenticating a FIDO2 key. This API call allows the user to return the signed challenge to the server for verification.\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  required:\n                    - metadata\n                    - response\n                  properties:\n                    metadata:\n                      description: Holds metadata required by the registration route, wrapped into a string.\n                      type: string\n                      example: \"{\\\"version\\\": \\\"1.0\\\",\\\"last_used_location\\\": \\\"Sunnyvale, CA\\\",\\\"username\\\": \\\"johndoe\\\",\\\"origin\\\": \\\"https://demo4.strongkey.com\\\"}\"\n                    response:\n                      description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.\n                      type: string\n                      example: \"{\\\"id\\\":\\\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\\\",\\\"rawId\\\": \\\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\\\",\\\"response\\\": {\\\"attestationObject\\\": \\\"o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAKh568CoVnRo3MIwVyLbYTiXuO7FTbsKfuqin4vhpu9YAiAEWQuISPN74PyBD_tpWmjKix9gg_sQjf7xj0hO096XDGN4NWOBWQHkMIIB4DCCAYOgAwIBAgIEbCtY8jAMBggqhkjOPQQDAgUAMGQxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5TdHJvbmdBdXRoIEluYzEiMCAGA1UECxMZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEYMBYGA1UEAwwPQXR0ZXN0YXRpb25fS2V5MB4XDTE5MDcxODE3MTEyN1oXDTI5MDcxNTE3MTEyN1owZDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlN0cm9uZ0F1dGggSW5jMSIwIAYDVQQLExlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMRgwFgYDVQQDDA9BdHRlc3RhdGlvbl9LZXkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQx9IY-uvfEvZ9HaJX3yaYmOqSIYQxS3Oi3Ed7iw4zXGR5C4RaKyOQeIu1hK2QCgoq210KjwNFU3TpsqAMZLZmFoyEwHzAdBgNVHQ4EFgQUNELQ4HBDjTWzj9E0Z719E4EeLxgwDAYIKoZIzj0EAwIFAANJADBGAiEA7RbR2NCtyMQwiyGGOADy8rDHjNFPlZG8Ip9kr9iAKisCIQCi3cNAFjTL03-sk7C1lij7JQ6mO7rhfdDMfDXSjegwuWhhdXRoRGF0YVkBNPgUPcPowj_96fevjVCLWyuOXtHPc57ItRHBr0kyY4M-QQAAAAAAAAAAAAAAAAAAAAAAAAAAALDv1TjffHaHKRTJ_6HTapfASSnIs3Xk3rUyFgNOUzoC5aL6uas7uQDQt0_edIk1h53DoCoCHpFmJaMjKHlvWelbigwlFLWxgwlWRFs1WXAGlLL_Q5balEou9VJGPHNPstewZX-LivspETzci1U5L9wMptifdrENxiJQ1pFcBHUN8cLlQ_eGnKy1oqw4q98KinagDSt-vKZOxSYXtEYo_4w0KIw_9nkSc7yEee0CzjWROKUBAgMmIAEhWCDyaCL1FRBjx_tJLFlnzwTSys214ccamb3iM8ioevGOEiJYIG_S-DmdODz6_GN6nOT4nlcmu55QbWFZXu7anb-KQgdI\\\",\\\"clientDataJSON\\\": \\\"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiTENkbXlPQ2ZEUzltZDVJZkFYTzhtZyIsIm9yaWdpbiI6Imh0dHBzOi8vcWEtaW5mb3N5cy1maWRvLTIuc3Ryb25na2V5LmNvbTo4MTgxIn0\\\"},\\\"type\\\": \\\"public-key\\\"}\"\n      responses:\n        '200':\n          description: The user has been successfully authenticated using their FIDO2 key.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: |\n                    {} or {\"Successfully authenticated key\"}\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /updatekeyinfo:\n    post:\n      summary: Updates information about a given FIDO2 key.\n      description: This method changes the status of a given key stored in persistent storage. The FIDO2 protocol does not define any activation or deactivation processes. This API call just changes the registered FIDO2 authenticator to possess a new status in the persistent storage for the purpose of FIDO2 authentication. Since the user can have multiple FIDO2 authenticators, a key ID is passed to the server. This key ID can be obtained by making a *getkeysinfo* call, which will return an array of registered key metadata with each entry being mapped to a key ID. Client applications will need to cache these IDs in order to activate, deactivate, or register keys.\n      tags:\n        - Key Regulation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  properties:\n                    status:\n                      description: Current status of the FIDO2 key, whether it is Active or Inactive\n                      type: string\n                      example: \"Active\"\n                    modify_location:\n                      description: Location of the update request\n                      type: string\n                      example: \"Cupertino, CA\"\n                    displayname:\n                      description: Name of the FIDO2 key being updated\n                      type: string\n                      example: \"johndoe\"\n                    keyid:\n                      description: ID of the FIDO2 key being updated\n                      type: string\n                      example: \"1-1-johndoe-154\"\n      responses:\n        '200':\n          description: The FIDO2 key has had its status updated successfully.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: |\n                  {\n                    \"Response\": \"Successfully updated user registered security key\"\n                  }\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /getkeysinfo:\n    post:\n      summary: Returns all keys associated with a registered user.\n      description: Returns a list of all registered FIDO2 authenticators belonging to a specified user.\n      tags:\n        - Key Regulation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  properties:\n                    username:\n                      description: Name of the active user\n                      type: string\n                      example: \"johndoe\"\n      responses:\n        '200':\n          description: Returned an array of keys belonging to the specified user.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Key values\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /deregister:\n    post:\n      summary: Deregisters a registered key.\n      description: Deregisters a FIDO2 authenticator. This API call requires a username and key ID in order to point to a unique key registered to that user. The key ID can be obtained by making a call to *getkeysinfo*.\n      tags:\n        - Key Regulation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n                - payload\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n                payload:\n                  type: object\n                  properties:\n                    keyid:\n                      description: ID for the key to be removed\n                      type: string\n                      example: \"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\"\n      responses:\n        '200':\n          description: The specified FIDO2 key has been successfully deregistered.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: Key Values\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\n  /ping:\n    post:\n      summary: Verifies that the FIDO2 server is active and accepting requests.\n      tags:\n       - Accessibility\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - svcinfo\n              properties:\n                svcinfo:\n                  $ref: '#/components/schemas/svcinfo'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessResponse'\n        '400':\n          $ref: '#/components/responses/BadInput'\n        '401':\n          $ref: '#/components/responses/BadAuth'\n        '404':\n          $ref: '#/components/responses/MissingResource'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/UnusedRoute'\ncomponents:\n  schemas:\n    svcinfo:\n      description: The service credentials for the web service.\n      type: object\n      required:\n        - did\n        - protocol\n        - authtype\n      properties:\n        did:\n          description: The cryptographic domain ID that is responsible for performing API transactions.\n          type: integer\n          maxLength: 5\n          example: 1\n        protocol:\n          description: The protocol used by the server for interacting with FIDO2 keys.\n          type: string\n          example: FIDO2_0\n        authtype:\n          description: Type of authentication given, can either be a password or HMAC.\n          type: string\n          example: PASSWORD\n        svcusername:\n          description: The service credential username. *Only required for password authentication.*\n          type: string\n          example: svcfidouser\n        svcpassword:\n          description: The service credential password. *Only required for password authentication.*\n          type: string\n          format: password\n          example: Abcd1234!\n    preregisterpayload:\n      description: The payload containing information for the Preregister route.\n      type: object\n      required:\n        - username\n        - displayname\n      properties:\n        username:\n          description: The current user calling the preregister API.\n          type: string\n          example: johndoe\n        displayname:\n          description: The name of the FIDO2 key that will attempt the registry challenge.\n          type: string\n          example: johndoe_dn\n        options: \n          description: Holds options required by the preregistration route, wrapped inside of a string.\n          type: object\n          properties:\n            attestation:\n              description: The type of proof required to verify the challenge.\n              type: string\n              example: direct\n            Residentkey:\n              description: Determines whether a preregistered key is required for the challenge.\n              type: string\n              example: req\n            userverification:\n              description: Determines whether or not a user's presence is required to verify the challenge.\n              type: boolean\n              example: true\n        extensions:\n          description: Any further options that can be passed into the route.\n          type: string\n          example: \"{}\"\n    registerpayload:\n      description: The payload containing information for the Register route.\n      type: object\n      required:\n        - metadata\n        - response\n      properties:\n        metadata:\n          description: Holds metadata required by the registration route, wrapped into a string.\n          type: object\n          properties:\n            version:\n              description: Current version of the registration challenge.\n              type: string\n              example: 1.0\n            create_location:\n              description: Location of origin for the signed registration challenge.\n              type: string\n              example: Sunnyvale, CA\n            username:\n              description: Username of the account submitting the signed registration challenge.\n              type: string\n              example: johndoe\n            origin:\n              description: The location of the server that sent the initial challenge.\n              type: string\n              example: https://demo4.strongkey.com\n        response:\n          description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.\n          type: object\n          properties:\n            id:\n              description: The ID of the user attempting the registry.\n              type: string\n              example: 79U...kTg\n            rawId:\n              description: The ID of the user without any formatting (same as 'id' in normal cases).\n              type: string\n              example: 79U...kTg\n            response:\n              description: The response from the server\n              type: object\n              properties:\n                attestationObject:\n                  description: The object containing the proof that the signed challenge is permitted.\n                  type: string\n                  example: o2N...gdI\n                clientDataJSON:\n                  description: Data from the web client handling the authentication.\n                  type: string\n                  example: eyJ...In0\n            type:\n              description: The type of key used to handle the signed challenge.\n              type: string\n              example: public-key\n    preauthenticatepayload:\n      description: The payload containing information for the Preauthenticate route.\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          description: Name of the current user calling the preauthentication route\n          type: string\n          example: \"johndoe\"\n        options:\n          description: Holds options required by the preauthentication route\n          type: string\n          example: \"{}\"\n    authenticatepayload:\n      description: The payload containing information for the Preauthenticate route.\n      type: object\n      required:\n        - metadata\n        - response\n      properties:\n        metadata:\n          description: Holds metadata required by the registration route, wrapped into a string.\n          type: object\n          properties:\n            version:\n              description: Current version of the authentication challenge.\n              type: string\n              example: 1.0\n            create_location:\n              description: Location of the last attempted authentication challenge.\n              type: string\n              example: Sunnyvale, CA\n            username:\n              description: Username of the account submitting the signed authentication challenge.\n              type: string\n              example: johndoe\n            origin:\n              description: The location of the server that sent the initial challenge.\n              type: string\n              example: https://demo4.strongkey.com\n        response:\n          description: Object containing id, rawId, response (an object which holds authenticatorData, signature, userHandle, and clientDataJSON), and type, wrapped into a string.\n          type: object\n          properties:\n            id:\n              description: The ID of the user attempting the registry.\n              type: string\n              example: 79U...kTg\n            rawId:\n              description: The ID of the user without any formatting (same as 'id' in normal cases).\n              type: string\n              example: 79U...kTg\n            response:\n              description: The response from the server.\n              type: object\n              properties:\n                authenticatorData:\n                  description: Data describing the authenticator to the server.\n                  type: string\n                  example: Nc7...Q==\n                signature:\n                  description: The signature which verifies that the challenge was completed.\n                  type: string\n                  example: MEY...eoW\n                userHandle:\n                  description: (Not implemented yet).\n                  type: string\n                  example: \"\"\n                clientDataJSON:\n                  description: Data from the web client handling the authentication.\n                  type: string\n                  example: eyJ...In0\n            type:\n              description: The type of key used to fulfill the authentication request.\n              type: string\n              example: public-key\n    updatekeyinfopayload:\n      description: The payload containing information for the Update Key route.\n      type: object\n      required:\n        - keyid\n        - displayname\n        - modify_location\n        - status\n      properties:\n        status:\n          description: Current status of the FIDO2 key, whether it is Active or Inactive\n          type: string\n          example: \"Active\"\n        modify_location:\n          description: Location of the update request\n          type: string\n          example: \"Cupertino, CA\"\n        displayname:\n          description: Name of the FIDO2 key being updated\n          type: string\n          example: \"johndoe\"\n        keyid:\n          description: ID of the FIDO2 key being updated\n          type: string\n          example: \"1-1-johndoe-154\"\n    getkeysinfopayload:\n      description: The payload containing information for the Get Key route.\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          description: Name of the active user\n          type: string\n          example: \"johndoe\"\n    deregisterpayload:\n      description: The payload containing information for the Deregister route.\n      type: object\n      required:\n        - keyid\n      properties:\n        keyid:\n          description: ID for the key to be removed\n          type: string\n          example: 79U...kTg\n    Response:\n      description: Response JSON object returned by web services.\n      properties:\n        Response:\n          description: The result of the API call, typically an error message for returns that aren't 200.\n          type: string\n  responses:\n    SuccessResponse:\n      description: The request was successfullly processed by the FIDO2 server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Response'\n          example: |\n            {\n              \"Response\": \"\",\n            }\n    BadAuth:\n      description: The HMAC Authentication failed.\n    MissingResource:\n      description: The requested resource is unavailable.\n    BadInput:\n      description: There was an error in the submitted input.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Response'\n          example: |\n            {\n              \"Response\": \"\",\n            }\n    ServerError:\n      description: The server ran into an unexpected exception.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Response'\n          example: '\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003e\u003chtml xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\u003chead\u003e\u003ctitle\u003eError report\u003c/title\u003e\u003cstyle type=\"text/css\"\u003e\u003c!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}HR {color : #525D76;}--\u003e\u003c/style\u003e \u003c/head\u003e\u003cbody\u003e\u003ch1\u003eHTTP Status 500 - Internal Server Error\u003c/h1\u003e\u003chr/\u003e\u003cp\u003e\u003cb\u003etype\u003c/b\u003e Exception report\u003c/p\u003e\u003cp\u003e\u003cb\u003emessage\u003c/b\u003eInternal Server Error\u003c/p\u003e\u003cp\u003e\u003cb\u003edescription\u003c/b\u003eThe server encountered an internal error that prevented it from fulfilling this request.\u003c/p\u003e\u003chr/\u003e\u003c/body\u003e\u003c/html\u003e'\n    UnusedRoute:\n      description: Unused routes return a 501 exception with an error message.\n      content:\n        application/json:\n          schema:\n            type: string\n          example: \"can't parse JSON.  Raw result:\\n\\nnot yet implemented\"\n",
			"canonicalURL": "/github.com/StrongKey/fido2@b5cba5954491e7840320bbecd679ba920ba8bd74/-/blob/docs/fido-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/StrongKey/fido2/blob/b5cba5954491e7840320bbecd679ba920ba8bd74/docs/fido-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}