{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoadmin/service-stac"
		},
		"file": {
			"name": "tags.yaml",
			"size": 0,
			"path": "spec/transaction/tags.yaml",
			"byteSize": 5271,
			"content": "openapi: 3.0.1\ntags:\n  - name: Capabilities\n  - name: Data\n  - name: STAC\n  - name: Data Management\n    description: |\n      Metadata management requests. Theses requests are used to create, update or delete the STAC\n      metadata.\n\n      *NOTE: these requests require authentication as described in [here](#tag/Authentication).*\n  - name: Asset Upload Management\n    description: |\n      Asset file can be uploaded via the STAC API using the following requests.\n\n      *NOTE: the POST requests require authentication as described in [here](#tag/Authentication).*\n\n      ### Example\n\n      ```python\n      import os\n      import hashlib\n      from base64 import b64encode\n\n      import requests\n      import multihash\n\n      # variables\n      scheme = 'https'\n      hostname = 'data.geo.admin.ch'\n      collection = 'ch.swisstopo.pixelkarte-farbe-pk200.noscale'\n      item = 'smr200-200-4-2016'\n      asset = 'smr200-200-4-2016-2056-kgrs-10.tiff'\n      asset_path = f'collections/{collection}/items/{item}/assets/{asset}'\n      user = os.environ.get('STAC_USER', 'unknown-user')\n      password = os.environ.get('STAC_PASSWORD', 'unknown-password')\n\n      with open('smr200-200-4-2016-2056-kgrs-10.tiff', 'rb') as fd:\n        data = fd.read()\n\n      checksum_multihash = multihash.to_hex_string(multihash.encode(hashlib.sha256(data).digest(), 'sha2-256'))\n      md5 = b64encode(hashlib.md5(data).digest()).decode('utf-8')\n\n      # 1. Create a multipart upload\n      response = requests.post(\n        f\"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads\",\n        auth=(user, password),\n        json={\n          \"number_parts\": 1,\n          \"md5_parts\": [{\n            \"part_number\": 1,\n            \"md5\": md5\n          }],\n          \"checksum:multihash\": checksum_multihash\n        }\n      )\n      upload_id = response.json()['upload_id']\n\n      # 2. Upload the part using the presigned url\n      response = requests.put(response.json()['urls'][0]['url'], data=data, headers={'Content-MD5': md5})\n      etag = response.headers['ETag']\n\n      # 3. Complete the upload\n      response = requests.post(\n        f\"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads/{upload_id}/complete\",\n        auth=(user, password),\n        json={'parts': [{'etag': etag, 'part_number': 1}]}\n      )\n      ```\n\n      See https://aws.amazon.com/premiumsupport/knowledge-center/data-integrity-s3/ for other examples on how to compute the base64 MD5 of a part.\n  - name: Authentication\n    description: |\n      All write requests require authentication. There is currently three type of supported authentications:\n\n      * [Session authentication](#section/Session-authentication)\n      * [Basic authentication](#section/Basic-authentication)\n      * [Token authentication](#section/Token-authentication)\n\n      ## Session authentication\n\n      When using the browsable API the user can simply use the admin interface for logging in.\n      Once logged in, the browsable API can be used to perform write requests.\n\n      ## Basic authentication\n\n      The username and password for authentication can be added to every write request the user wants to perform.\n      Here is an example of posting an asset using curl (_username_=\"MickeyMouse\", _password_=\"I_love_Minnie_Mouse\"):\n\n      ```\n      curl --request POST \\\n        --user MickeyMouse:I_love_Minnie_Mouse \\\n        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n          \"id\": \"fancy_unique_id\",\n          \"item\": \"swisstlmregio-2020\",\n          \"title\": \"My title\",\n          \"type\": \"application/x.filegdb+zip\",\n          \"description\": \"My description\",\n          \"proj:epsg\": 2056,\n          \"checksum:multihash\": \"12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\"\n      }'\n      ```\n\n      ## Token authentication\n\n      A user specific token for authentication can be added to every write request the user wants to perform.\n      Here is an example of posting an asset using curl:\n\n      ```\n      curl --request POST \\\n        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \\\n        --header 'Authorization: Token ccecf40693bfc52ba090cd46eb7f19e723fe831f' \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n          \"id\": \"fancy_unique_id\",\n          \"item\": \"swisstlmregio-2020\",\n          \"title\": \"My title\",\n          \"type\": \"application/x.filegdb+zip\",\n          \"description\": \"My description\",\n          \"proj:epsg\": 2056,\n          \"checksum:multihash\": \"12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC\"\n      }'\n      ```\n\n      Tokens can either be generated in the admin interface or existing users can perform a POST request\n      on the get-token endpoint to request a token (also see [Request token for token authentication](#operation/getToken)).\n      Here is an example using curl:\n\n      ```\n      curl --request POST \\\n        --url https://data.geoadmin.ch/api/stac/get-token \\\n        --header 'Content-Type: application/json' \\\n        --data '{\"username\": \"MickeyMouse\", \"password\": \"I_love_Minnie_Mouse\"}'\n      ```\n",
			"canonicalURL": "/github.com/geoadmin/service-stac@e1bc3aa0b8c01eaa4993374375975142ed00edd2/-/blob/spec/transaction/tags.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/geoadmin/service-stac/blob/e1bc3aa0b8c01eaa4993374375975142ed00edd2/spec/transaction/tags.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}