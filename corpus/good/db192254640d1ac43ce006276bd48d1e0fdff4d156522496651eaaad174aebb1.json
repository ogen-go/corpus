{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openwrt/asu"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "asu/openapi.yml",
			"byteSize": 17625,
			"content": "openapi: 3.0.0\ninfo:\n  title: ASU Server API\n  description: This is a simple API\n  contact:\n    name: Paul Spooren\n    email: mail@aparcar.org\n  license:\n    name: GPL-2.0\n    url: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html\n  version: 0.5.9\nexternalDocs:\n  description: README.md\n  url: https://github.com/aparcar/asu/blob/master/README.md\nservers:\n- url: https://asu.aparcar.org\n  description: Running instance of ASU\npaths:\n  /api/v1/overview:\n    get:\n      summary: Overview of branches and versions available\n      description: |\n        This can be used by user interfaces and update clients to check for\n        latest releases. For automatic checks the static file at\n        `/json/v1/latest.json` should be used.\n      operationId: asu.api.api_v1_overview\n      responses:\n        \"200\":\n          description: Overview of current OpenWrt versions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonSchemaOverview'\n  /api/v1/build:\n    post:\n      summary: Request a custom firmware image\n      description: |\n        This API call allows to request a firmware image containing any\n        selection of packages. If the build was successfull it will respond a\n        `200` response including information on the build and created images. If\n        there were errors other status coulds will be returned, as described\n        below.\n\n        Since images take between 30 seconds and 5 minutes to be build, the\n        status `202` response will be returend while an image is being build or\n        in the build queue. Clients should poll the API every 5 seconds to if\n        the image was build or an error occured.\n\n        The `POST` request should only be done once. A valid request will result\n        in a response including a `request_hash` which can then be used for the\n        `/api/v1/build/\u003crequest_hash\u003e` API path. This way the server doens't\n        have to validate the request every time.\n      operationId: asu.api.api_v1_build_post\n      requestBody:\n        description: Inventory item to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildRequest'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ResponseSuccessfull'\n\n        \"202\":\n          $ref: '#/components/responses/ResponseActive'\n\n        \"400\":\n          $ref: '#/components/responses/ResponseError'\n\n        \"422\":\n          $ref: '#/components/responses/ResponseBadPackage'\n\n        \"500\":\n          $ref: '#/components/responses/ResponseError'\n\n  /api/v1/build/{request_hash}:\n    get:\n      summary: check status of previously triggered build\n      description: |\n        This API path should be used for polling since it does not validate the\n        request data every time but simply checks if the job exists.\n\n        Ideally clients requests status updates no more then every 5 seconds.\n      operationId: asu.api.api_v1_build_get\n      parameters:\n      - name: request_hash\n        in: path\n        description: |\n          The hashed request is responded after a successful build request at\n          `/api/v1/build`.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ResponseSuccessfull'\n\n        \"202\":\n          $ref: '#/components/responses/ResponseActive'\n\n        \"404\":\n          $ref: '#/components/responses/ResponseError'\n\n  /api/v1/revision/{version}/{target}/{subtarget}:\n    get:\n      summary: receive revision of current target\n      operationId: asu.api.api_v1_revision\n      parameters:\n      - name: version\n        in: path\n        description: Version in question\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: target\n        in: path\n        description: Target used on device\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: subtarget\n        in: path\n        description: Target used on device\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Revision found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonSchemaRevision'\n\ncomponents:\n  responses:\n    ResponseSuccessfull:\n      description: Image successfully built\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BuildResponseSuccess'\n\n    ResponseActive:\n      description: |\n        Build added to queue or currently building, please check again in 5\n        seconds.\n      headers:\n        X-Queue-Position:\n          schema:\n            type: integer\n            description: Current position in build queue\n      content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BuildResponseActive'\n\n    ResponseError:\n      description: Invalid build request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BuildResponseError'\n\n    ResponseBadPackage:\n      description: Unknown package(s) in request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BuildResponseError'\n\n  schemas:\n    BuildRequest:\n      required:\n      - profile\n      - target\n      - version\n      type: object\n      additionalProperties: false\n      properties:\n        distro:\n          type: string\n          example: openwrt\n          description: |\n            This parameter is currently optional since no other distributions\n            are supported.\n        version:\n          type: string\n          example: 19.07.8\n          description: |\n            It is recommended to always upgrade to the latest version, however\n            it is possible to request older images for testing.\n        version_code:\n          type: string\n          description: |\n            It is possible to send the expected revision. This allows to show\n            the revision within clients before the request. If the resulting\n            firmware is a different revision, the build results in an error.\n          example: r11364-ef56c85848\n        target:\n          type: string\n          example: ath79/generic\n        profile:\n          type: string\n          example: 8dev_carambola2\n        diff_packages:\n          type: boolean\n          description: |\n            This parameter determines if requested packages are seen as\n            *additional* or *absolut*. If set to `true` the packages are seen as\n            *absolute* and all default packages outside the requested packages\n            are removed.\n\n            It is possible to brick devices when requesting an incomplete list\n            with this parameter enabled since it may remove WiFi drivers.\n        packages:\n          type: array\n          example:\n          - vim\n          - tmux\n          items:\n            type: string\n          description: |\n            List of packages, either *additional* or *absolute* depending of the\n            `diff_packages` parameter.\n        packages_versions:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            vim: 8.0.1\n            bmon: 3.0.1\n          description: |\n            Instead of using the `packages` parameter it is possible to include\n            *expected* package versions. This is useful if the user interface\n            shows package upgrades before performing an image request. Once\n            approved by the user the build request will fail if any package of\n            the resulting firmware is different than requested.\n\n            It is not possible to specify what package version to request. Only\n            the latest version of a package can be requested, which can be\n            retrieved via provided package indexes.\n        filesystem:\n          type: string\n          enum:\n            - squashfs\n            - ext4\n            - ubifs\n            - jffs2\n          description: |\n            Ability to specify filesystem running on device. Attaching this\n            optional parameter will limit the ImageBuilder to only build\n            firmware with that filesystem.\n        defaults:\n          type: string\n          description: |\n            Custom shell script embedded in firmware image to be run on first\n            boot. This feature might be dropped in the future. Size is limited\n            to 10kB and can not be exceeded.\n          maxLength: 20480\n\n      example:\n        version: 19.07.8\n        target: ath79/generic\n        profile: 8dev_carambola2\n        packages:\n          - auc\n          - luci-app-attendedsysupgrade\n\n    BuildResponseError:\n      type: object\n      required:\n        - detail\n        - status\n      properties:\n        detail:\n          type: string\n          example: \"asu.build.PackageSelectionError: bmon version not as requested: 1.0 vs. 4.0-1\"\n          description: |\n            This contains a short but user readable detail of the occurring error.\n        type:\n          type: string\n          example: \"about:blank\"\n          description: \"Further information on the issue. This is currently not used\"\n        status:\n          type: integer\n          example: 500\n          description:\n            Always the same as the responding HTTP status code.\n        enqueued_at:\n          type: string\n          format: date-time\n          example: \"2021-08-15T09:59:27.754430Z\"\n          description:\n            Time and date of the build request.\n        request_hash:\n          type: string\n          example: \"5992c73895fb\"\n          description:\n            The `request_hash` is based on all parameters of a build request and\n            can be used for polling.\n\n    BuildResponseActive:\n      type: object\n      required:\n        - detail\n        - enqueued_at\n        - request_hash\n        - status\n      properties:\n        detail:\n          type: string\n          example: \"queued\"\n          description: |\n            This is currently either `queued` or `started`. Instead of relying\n            on this parameter it can be always considered *active* if the HTTP\n            status code is `202`.\n        enqueued_at:\n          type: string\n          format: date-time\n          example: \"2021-08-15T09:59:27.754430Z\"\n          description:\n            Time and date of the build request.\n        request_hash:\n          type: string\n          example: \"5992c73895fb\"\n          description:\n            The `request_hash` is based on all parameters of a build request and\n            can be used for polling.\n        status:\n          type: integer\n          example: 202\n          description:\n            Always the same as the responding HTTP status code.\n        queue_position:\n          type: integer\n          example: 2\n          description: |\n            Current position in build queue. If the response contains the queue\n            position the firmware build is queued, if it does not the firmware\n            is currently being built.\n      example:\n        detail: queued\n        enqueued_at: 2021-08-22T20:41:32.729065Z\n        queue_position: 2,\n        request_hash: f74fdcb97a09\n        status: 202\n\n    BuildResponseSuccess:\n      type: object\n      required:\n        - build_at\n        - enqueued_at\n        - id\n        - image_prefix\n        - images\n        - manifest\n        - metadata_version\n        - request_hash\n        - status\n        - supported_devices\n        - target\n        - titles\n        - version_code\n        - version_number\n      properties:\n        build_at:\n          type: string\n          format: date-time\n          example: \"2021-08-29T02:43:55.929319Z\"\n        enqueued_at:\n          type: string\n          format: date-time\n          example: \"2021-08-29T02:42:55.929319Z\"\n        id:\n          type: string\n          example: \"avm_fritzbox-4040\"\n        image_prefix:\n          type: string\n          example: \"openwrt-387e9d003d04-ipq40xx-generic-avm_fritzbox-4040\"\n        images:\n          type: array\n          items:\n            type: object\n            required:\n              - name\n              - sha256\n              - type\n            properties:\n              name:\n                type: string\n                example: \"openwrt-387e9d003d04-ipq40xx-generic-avm_fritzbox-4040-squashfs-eva.bin\"\n              sha256:\n                type: string\n                example: \"8cb0d58bf672ed442f0813a1f04ec2f5edf6e2b64c8f117cb11158e19251aa0b\"\n              type:\n                type: string\n                example: \"eva\"\n        manifest:\n          type: object\n          additionalProperties:\n            type: string\n        metadata_version:\n          type: integer\n          description: Version of the JSON file create by OpenWrt ImageBuilder\n          example: 1\n        request_hash:\n          type: string\n          example: \"5bac6cb8321f\"\n        status:\n          type: integer\n          example: 500\n        supported_devices:\n          type: array\n          items:\n            type: string\n            example: \"avm,fritzbox-4040\"\n        target:\n          type: string\n          example: \"ipq40xx/generic\"\n        titles:\n          type: array\n          items:\n            oneOf:\n              - type: object\n                required:\n                - model\n                - vendor\n                properties:\n                  vendor:\n                    type: string\n                    example: \"AVM\"\n                  model:\n                    type: string\n                    example: \"FRITZ!Box 4040\"\n                  variant:\n                    type: string\n                    example: \"v1\"\n              - type: object\n                required:\n                  - title\n                properties:\n                  title:\n                    type: string\n                    example: \"AVM FRITZ!Box 7320\"\n        version_code:\n          type: string\n          example: \"r12297-7e9c7e7b2d\"\n        version_number:\n          type: string\n          example: \"SNAPSHOT\"\n        build_cmd:\n          type: array\n          items:\n            type: string\n          description: |\n            Contains the shell command ran by the ImageBuilder. This can be\n            used locally to test builds for reproducibility.\n        imagebuilder_status:\n          type: string\n          enum:\n            - download_imagebuilder\n            - unpack_imagebuilder\n            - calculate_packages_hash\n            - building_image\n          example: \"download_imagebuilder\"\n\n    JsonSchemaBranch:\n      type: object\n      additionalProperties: False\n      properties:\n        name:\n          type: string\n          example: 19.07\n        enabled:\n          type: boolean\n        snapshot:\n          type: boolean\n        versions:\n          type: array\n          items:\n            type: string\n            example:\n              - 19.07.8\n              - 19.07.7\n              - 19.07.6\n        git_branch:\n          type: string\n          example: openwrt-19.07\n        updates:\n          type: string\n          enum: [dev, features, bugs, security]\n          example: bugs\n          description: |\n            Describes what kind of update a branch receives\n              - `dev` unstable development\n              - `features` receives new features\n              - `bugs` only bug fixes\n              - `security` only security fixes\n        release_date:\n          type: string\n          format: date\n          example: \"2021-08-15\"\n          description: |\n            Date of the latest release\n        eol:\n          type: string\n          format: date\n          example: \"2021-08-15\"\n          description:\n            Date of branch end of life\n        path:\n          type: string\n          example: \"releases/{version}\"\n        path_packages:\n          type: string\n          example: \"releases/packages-{branch}\"\n        pubkey:\n          type: string\n          example: RWS1BD5w+adc3j2Hqg9+b66CvLR7NlHbsj7wjNVj0XGt/othDgIAOJS+\n        targets:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            apm821xx/nand: powerpc_464fp\n            x86/64: x86_86\n        extra_repos:\n          type: object\n          additionalProperties:\n            type: string\n        extra_keys:\n          type: array\n          items:\n            type: string\n        repos:\n          type: array\n          items:\n            type: string\n\n    JsonSchemaOverview:\n      type: object\n      additionalProperties: False\n      required:\n        - latest\n        - branches\n        - server\n      properties:\n        latest:\n          type: array\n          items:\n            type: string\n            example:\n              - SNAPSHOT\n              - 21.02.0-rc4\n              - 19.07.7\n        branches:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/JsonSchemaBranch'\n        server:\n          type: object\n          properties:\n            version:\n              type: string\n              example: v0.6.1\n            contact:\n              type: string\n              example: mail@aparcar.org\n\n    JsonSchemaRevision:\n      type: object\n      additionalProperties: false\n      required:\n        - revision\n      properties:\n        revision:\n          type: string\n          example: r11364-ef56c85848\n",
			"canonicalURL": "/github.com/openwrt/asu@a586390ab89caedb8058c9ad69ac705633d7a96e/-/blob/asu/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openwrt/asu/blob/a586390ab89caedb8058c9ad69ac705633d7a96e/asu/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}