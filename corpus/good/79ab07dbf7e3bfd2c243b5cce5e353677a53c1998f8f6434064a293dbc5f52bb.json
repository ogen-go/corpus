{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/aws-xray-serverless-samples"
		},
		"file": {
			"name": "template.yml",
			"size": 0,
			"path": "xray-no-lambda/template.yml",
			"byteSize": 5165,
			"content": "AWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: A simple stack to showcase X-Ray integration.\n\nGlobals:\n  Api:\n    TracingEnabled: true\n\nResources:\n  ApiRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Policies:\n        - PolicyName: DynamoDBAccess\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:PutItem\n                Resource:\n                  - !Sub \"arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}\"\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - apigateway.amazonaws.com\n            Action:\n              - sts:AssumeRole\n\n  ServerlessRestApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      Name: !Ref AWS::StackName\n      StageName: Prod\n      DefinitionBody:\n        openapi: \"3.0.0\"\n        paths:\n          \"/{name}\":\n            get:\n              summary: Get an item by name\n              parameters:\n                - name: name\n                  in: path\n                  required: true\n                  type: string\n              responses:\n                \"200\":\n                  description: 200 status response\n                \"400\":\n                  description: 400 status response\n                \"500\":\n                  description: 500 status response\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: AWS\n                passthroughBehavior: NEVER\n                uri: !Sub \"arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/GetItem\"\n                credentials: !GetAtt ApiRole.Arn\n                requestTemplates:\n                  application/json:\n                    Fn::Sub: \u003e\n                      {\n                        \"TableName\": \"${Table}\",\n                        \"Key\": {\n                          \"id\": {\n                            \"S\": \"$input.params('name')\"\n                          }\n                        }\n                      }\n                responses:\n                  \"4\\\\d{2}\":\n                    statusCode: 400\n                    responseTemplates:\n                      application/json: \u003e\n                        {\n                          \"message\": $input.json('$.message')\n                        }\n                  \"5\\\\d{2}\":\n                    statusCode: 500\n                    responseTemplates:\n                      application/json: \u003e\n                        {\n                          \"message\": $input.json('$.message')\n                        }\n                  default:\n                    statusCode: 200\n                    responseTemplates:\n                      application/json: \u003e\n                        $util.parseJson($input.json('$.Item.content.S'))\n            put:\n              summary: Put an item by name\n              parameters:\n                - name: name\n                  in: path\n                  required: true\n                  type: string\n              responses:\n                \"200\":\n                  description: 200 status response\n                \"400\":\n                  description: 400 status response\n                \"500\":\n                  description: 500 status response\n              x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: AWS\n                passthroughBehavior: NEVER\n                uri: !Sub \"arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/PutItem\"\n                credentials: !GetAtt ApiRole.Arn\n                requestTemplates:\n                  application/json:\n                    Fn::Sub: \u003e\n                      {\n                        \"TableName\": \"${Table}\",\n                        \"Item\": {\n                          \"id\": {\n                            \"S\": \"$input.params('name')\"\n                          },\n                          \"content\": {\n                            \"S\": \"$util.escapeJavaScript($input.body)\"\n                          }\n                        }\n                      }\n                responses:\n                  \"4\\\\d{2}\":\n                    statusCode: 400\n                    responseTemplates:\n                      application/json: \u003e\n                        {\n                          \"message\": $input.json('$.message')\n                        }\n                  \"5\\\\d{2}\":\n                    statusCode: 500\n                    responseTemplates:\n                      application/json: \u003e\n                        {\n                          \"message\": $input.json('$.message')\n                        }\n                  default:\n                    statusCode: 200\n                    responseTemplates:\n                      application/json: \u003e\n                        {\n                          \"message\": \"Success\"\n                        }\n\n  Table:\n    Type: AWS::Serverless::SimpleTable\n\nOutputs:\n  ApiUrl:\n    Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod\"\n",
			"canonicalURL": "/github.com/aws-samples/aws-xray-serverless-samples@f87e84652a394ac2305a8ea5bd638e596ad7d858/-/blob/xray-no-lambda/template.yml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/aws-xray-serverless-samples/blob/f87e84652a394ac2305a8ea5bd638e596ad7d858/xray-no-lambda/template.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}