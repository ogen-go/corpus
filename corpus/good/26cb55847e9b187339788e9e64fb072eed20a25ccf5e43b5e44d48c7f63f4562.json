{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CodeverLand/codever"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/docs/openapi/openapi.yaml",
			"byteSize": 36708,
			"content": "openapi: 3.0.3\ninfo:\n  title: Codever API\n  description: API supporting the [www.codever.land](https://www.codever.land)\n  contact:\n    name: Adrian Matei\n    url: https://github.com/adrianmatei-me\n    email: ama@codepedia.org\n  license:\n    name: License MIT\n    url: https://github.com/codeverland/codever/LICENSE\n  version: 2.0.0\n\nservers:\n  - url: http://localhost:3000/api\n    description: Local server for development\n  - url: https://www.codever.land/api\n    description: Main (production) server\n\ntags:\n  - name: root\n    description: Used to mark the root endpoint\n  - name: version\n    description: Access to the project's version and gitSha1\n  - name: public-bookmarks\n    description: Access to public bookmarks\n  - name: personal-bookmarks\n    description: Operations performed on personal bookmarks\n  - name: user-data\n    description: Operations performed on user data\n  - name: helper\n    description: Helper endpoints/operations\n\n\npaths:\n  /:\n    get:\n      description: message with link to Swagger docs\n      tags:\n        - root\n      responses:\n        200:\n          description: message with link to Swagger docs\n          content: {}\n\n  /version:\n    get:\n      description: displays the current version of the project (from package.json) and the gitSha1\n      tags:\n        - version\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n\n  /public/bookmarks:\n    get:\n      summary: |\n        Returns list of public bookmarks filtered with query parameters. `page` and `limit` query parameters are used\n        for pagination - if missing default values are used.\n      tags:\n        - public-bookmarks\n      description: |\n        * if `q` param is present they are filtered by the query text contained in it. (takes precedence over `location`)\n        * if `location` param is present returns a list with one **public** bookmark with that URL\n        * else **defaults** to the latest added 100 public bookmarks\n\n        \u003e The list is empty if not public bookmarks returned for filter\n      parameters:\n        - $ref: \"#/components/parameters/searchTextQueryParam\"\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n        - $ref: \"#/components/parameters/locationQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n\n  /public/users/{userId}/profile:\n    get:\n      summary: returns public profile data (user profile \u0026 top public tags ) for user\n      tags:\n        - public-user-data\n      parameters:\n        - $ref: \"#/components/parameters/userIdPathParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  profile:\n                    $ref: '#/components/schemas/UserProfile'\n                  topUsedPublicTags:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TagCount'\n\n  /webpage-info/scrape:\n    get:\n      description: Returns web page info about the page scraped by `location`, `youtubeVideoId` or `stackoverflowQuestionId`\n      operationId: get-webpage-info\n      tags:\n        - helper\n      parameters:\n        - name: location\n          in: query\n          description: url of the page scraped for data - **this takes precedence over the other query params if present**\n          schema:\n            type: string\n        - name: youtubeVideoId\n          in: query\n          description: id of the youtube video - https://www.youtube.com/watch?v=**Emlc7mkZDQ4**\n          schema:\n            type: string\n        - name: stackoverflowQuestionId\n          in: query\n          description: id of the question from stackoverflow - https://stackoverflow.com/questions/**51391080**/handling-errors-in-express-async-middleware\n          schema:\n            type: string\n      responses:\n        200:\n          description: contains details about the web page, youtube video or stackoverflow question\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebpageInfo'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/bookmarks:\n    get:\n      description: |\n        Returns list of user's bookmarks - might be filtered by query text (`q` with `limit`) \u003e `location` \u003e `orderBy parameters;\n        The parameters precedence is shown via **\u003e**\n        `page` and `limit` query parameters are used for pagination - if missing default values are used.\n      operationId: get-personal-bookmarks\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: \"#/components/parameters/userIdPathParam\"\n        - $ref: \"#/components/parameters/searchTextQueryParam\"\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n        - $ref: \"#/components/parameters/locationQueryParam\"\n        - name: orderBy\n          in: query\n          description: |\n            It is considered in the abscence of `q` or `location` parameters\n            Possible values:\n              * MOST_LIKES - personal bookmarks most liked by the community\n              * LAST_CREATED - personal bookmarks last added\n              * MOST_USED - personal bookmarks the user (owner) clicked the most\n          schema:\n            type: string\n            enum: [MOST_LIKES, LAST_CREATED, MOST_USED]\n      responses:\n        200:\n          description: list of user's bookmarks\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n    post:\n      description: Create new bookmark for user\n      operationId: create-bookmark\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      requestBody:\n        description: Bookmark json data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Bookmark'\n            examples:\n              blog-article:\n                value:\n                  name: Cleaner code in an Express REST API with unified error handling â€“ CodepediaOrg\n                  location: https://www.codepedia.org/ama/cleaner-code-in-expressjs-rest-api-with-custom-error-handling\n                  language: en\n                  tags: [nodejs, error-handling, expressjs]\n                  publishedOn: 2019-12-02,\n                  sourceCodeURL: https://github.com/codeverland/codever-api\n                  description: Shows how you can make your backend ExpressJS REST API cleaner by using custom error handling middleware. Code snippets of before and after refactoring are presented to make the point\n                  descriptionHtml: \u003cp\u003eShows how you can make your backend ExpressJS REST API cleaner by using custom error handling middleware. Code snippets of before and after refactoring are presented to make the point\u003c/p\u003e\n                  userId: 4c617f2b-2bad-498b-a9c6-4e9a8c303798\n                  public: true,\n                  lastAccessedAt: 2020-02-15T20:42:19.297Z\n                  likeCount: 0\n              stackoverflow-question:\n                value:\n                  name: Create GUID / UUID in JavaScript?\n                  location: https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n                  language: en\n                  tags: [javascript, guid, uuid]\n                  publishedOn: 2008-09-19\n                  sourceCodeURL:\n                  description: UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier), according to [RFC 4122](https://www.ietf.org/rfc/rfc4122.txt), are identifiers with a certain uniqueness guarantee.\\n\\nThe best way to generate them, is to follow implementation instructions in the said RFC, use one of the many community vetted open source implementations.\\n\\nA popular Open Source tool for working with UUIDs in JavaScript is [node-uuid](https://github.com/kelektiv/node-uuid)\\n\\nNote that just randomly generating the identifiers byte by byte, or character by character, will not give you the same guarantees as a conforming implementation. Also, very important, systems working with compliant UUIDs may choose not to accept randomly generated ones, and many open source validators will actually check for a valid structure.\\n\\nAn UUID must have this format:\\n```\\nxxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx\\n```\\nWhere the M and N positions may only have certain values. At this time, the only valid values for M are 1, 2, 3, 4 and 5, so randomly generating that position would make most results unacceptable.\n                  descriptionHtml: \u003cp\u003eUUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier), according to \u003ca href=\\\"https://www.ietf.org/rfc/rfc4122.txt\\\"\u003eRFC 4122\u003c/a\u003e, are identifiers with a certain uniqueness guarantee.\u003c/p\u003e\\n\u003cp\u003eThe best way to generate them, is to follow implementation instructions in the said RFC, use one of the many community vetted open source implementations.\u003c/p\u003e\\n\u003cp\u003eA popular Open Source tool for working with UUIDs in JavaScript is \u003ca href=\\\"https://github.com/kelektiv/node-uuid\\\"\u003enode-uuid\u003c/a\u003e\u003c/p\u003e\\n\u003cp\u003eNote that just randomly generating the identifiers byte by byte, or character by character, will not give you the same guarantees as a conforming implementation. Also, very important, systems working with compliant UUIDs may choose not to accept randomly generated ones, and many open source validators will actually check for a valid structure.\u003c/p\u003e\\n\u003cp\u003eAn UUID must have this format:\u003c/p\u003e\\n\u003cpre\u003e\u003ccode\u003exxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx\\n\u003c/code\u003e\u003c/pre\u003e\\n\u003cp\u003eWhere the M and N positions may only have certain values. At this time, the only valid values for M are 1, 2, 3, 4 and 5, so randomly generating that position would make most results unacceptable.\u003c/p\u003e\n                  userId: 4c617f2b-2bad-498b-a9c6-4e9a8c303798\n                  public: true\n                  lastAccessedAt: 2020-02-15T20:59:45.447Z\n                  likeCount: 0\n                  stackoverflowQuestionId: 105034\n              youtube-video:\n                value:\n                  name: Jake Archibald In The Loop - JSConf.Asia - 35min\n                  location: https://www.youtube.com/watch?v=cCOL7MC4Pl0\n                  language: en\n                  tags: [javascript, event-loop, browser]\n                  publishedOn: 2018-02-09\n                  sourceCodeURL:\n                  description: Have you ever had a bug where things were happening in the wrong order, or particular style changes were being ignored? Ever fixed that bug by wrapping a section of code in a setTimeout? Ever found that fix to be unreliable, and played around with the timeout number until it kinda almost always worked? \\nThis talk looks at the browser's event loop, the thing that orchestrates the main thread of the browser, which includes JavaScript, events, and rendering. We'll look at the difference between tasks, microtasks, requestAnimationFrame, requestIdleCallback, and where events land. \\nHopefully you'll never have to use setTimeout hacks again!\\\"\n                  descriptionHtml: \u003cp\u003eHave you ever had a bug where things were happening in the wrong order, or particular style changes were being ignored? Ever fixed that bug by wrapping a section of code in a setTimeout? Ever found that fix to be unreliable, and played around with the timeout number until it kinda almost always worked? \\nThis talk looks at the browser's event loop, the thing that orchestrates the main thread of the browser, which includes JavaScript, events, and rendering. We'll look at the difference between tasks, microtasks, requestAnimationFrame, requestIdleCallback, and where events land. \\nHopefully you'll never have to use setTimeout hacks again!\\\"\u003c/p\u003e\n                  userId: 4c617f2b-2bad-498b-a9c6-4e9a8c303798\n                  public: true\n                  lastAccessedAt: 2020-02-15T21:12:12.670Z\n                  likeCount: 0\n                  youtubeVideoId: cCOL7MC4Pl0\n\n      responses:\n        201:\n          description: Empty response, http status is relevant\n          headers:\n            location:\n              description: resource url of the newly created bookmark\n              schema:\n                type: object\n          content: {}\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        400:\n          $ref: '#/components/responses/ValidationError'\n        409:\n          description: |\n            Conflict. It can be triggered either when trying to create a public bookmark that is already present\n            or a bookmark with the location is already present for the user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BasicErrorModel'\n      x-codegen-request-body-name: body\n\n    delete:\n      description: Batch delete personal bookmarks, given query parameters\n      operationId: delete-personal-bookmarks\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/locationQueryParam'\n        - in: query\n          name: tag\n          description: Private bookmarks with this tag will be batch deleted. It is considered in combination with the `type` param which needs to have the value `private`\n          schema:\n            type: string\n        - in: query\n          name: type\n          schema:\n            type: string\n            enum:\n              - private\n      responses:\n        204:\n          description: OK (No content) when bookmarks have been deleted\n          content: {}\n        400:\n          $ref: '#/components/responses/ValidationError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /personal/users/{userId}/bookmarks/suggested-tags:\n    get:\n      description: Returns suggested tags used in auto-completion when saving a bookmark\n      operationId: get-suggested-tags-for-user\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tags:\n                    type: array\n                    items:\n                      type: string\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/bookmarks/{bookmarkId}:\n    get:\n      description: Returns bookmark for user\n      operationId: get-bookmark-for-user-by-id\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/bookmarkIdPathParam'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bookmark'\n        400:\n          $ref: '#/components/responses/ValidationError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: internal server error, when unknown server error is catched\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BasicErrorModel'\n    put:\n      description: (full) update existing bookmark of user\n      operationId: update-bookmark\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/bookmarkIdPathParam'\n      requestBody:\n        description: Complete bookmark to be updated\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Bookmark'\n        required: true\n      responses:\n        200:\n          description: OK when operation successful and updated bookmark in body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bookmark'\n\n        400:\n          $ref: '#/components/responses/ValidationError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          description: internal server error, when unknown server error is catched\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BasicErrorModel'\n      x-codegen-request-body-name: body\n    delete:\n      description: deletes bookmark of user\n      operationId: delete-bookmark\n      tags:\n        - personal-bookmarks\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/bookmarkIdPathParam'\n      responses:\n        204:\n          description: OK (No content) when operation successful and bookmark was\n            removed\n          content: {}\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /personal/users/{userId}:\n    description: Operations that work on user data\n    post:\n      description: Creates user data\n      operationId: create-user-data\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      requestBody:\n        description: User data\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        201:\n          description: OK when operation successful and updated user data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    get:\n      description: Reads user data\n      operationId: get-user-data\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          $ref: '#/components/responses/ValidationError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      description: Updates user data\n      operationId: update-user-data\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      requestBody:\n        description: User data\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          $ref: '#/components/responses/ValidationError'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      description: delete user data\n      operationId: delete-user-data\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      responses:\n        204:\n          description: OK - No-content\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /personal/users/{userId}/history:\n    description: |\n      Returns latest bookmarks accessed, created or updated by the user\n      `page` and `limit` query parameters are used for pagination - if missing default values are used.\n    get:\n      description: Reads user data\n      operationId: get-user-data-history\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/pinned:\n    description: |\n      Returns pinned bookmarks by the user\n      `page` and `limit` query parameters are used for pagination - if missing default values are used.\n    get:\n      description: Reads user data\n      operationId: get-user-data-pinned\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/favorites:\n    description: |\n      Returns bookmarks user added to **Favorites**\n      `page` and `limit` query parameters are used for pagination - if missing default values are used.\n    get:\n      description: Reads user data\n      deprecated: true\n      operationId: get-user-data-favorites\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/feed:\n    description: |\n      Returns bookmarks to be displayed on user feed (landing page)\n      `page` and `limit` query parameters are used for pagination - if missing default values are used.\n    get:\n      description: Reads user data\n      operationId: get-user-feed-bookmarks\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/read-later:\n    description: |\n      Returns bookmarks the user added to **Read later**\n      `page` and `limit` query parameters are used for pagination - if missing default values are used.\n    get:\n      description: Reads user data\n      operationId: get-user-data-read-later\n      tags:\n        - user-data\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: \"#/components/parameters/pageQueryParam\"\n        - $ref: \"#/components/parameters/limitQueryParam\"\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/BookmarkListResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\n  /personal/users/{userId}/following/users:\n    get:\n      description: get the user profiles of then ones the `userId` is following\n      operationId: get-follewed-users\n      tags:\n        - user-following\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/UserDataProfilesResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n\n  /personal/users/{userId}/followers:\n    get:\n      description: get the user profiles of `userId`'s followers\n      operationId: get-followers\n      tags:\n        - user-following\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/UserDataProfilesResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n\n  /personal/users/{userId}/following/users/{followedUserId}:\n    description: Adds `followedUserId` to the `following` list of `userId`, and `userId` to `followers` list of `followedUserId`\n    patch:\n      operationId: add-user-to-following\n      tags:\n        - user-following\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/followedUserIdPathParam'\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/UserDataResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n  /personal/users/{userId}/unfollowing/users/{followedUserId}:\n    description: Removes `followedUserId` from the `following` list of `userId`, and `userId` from the `followers` list of `followedUserId`\n    patch:\n      operationId: remove-user-from-following\n      tags:\n        - user-following\n      parameters:\n        - $ref: '#/components/parameters/userIdPathParam'\n        - $ref: '#/components/parameters/followedUserIdPathParam'\n      responses:\n        200:\n          description: OK\n          $ref: '#/components/responses/UserDataResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          $ref: '#/components/responses/ForbiddenError'\n\ncomponents:\n  schemas:\n    Bookmark:\n      required:\n        - language\n        - location\n        - name\n        - tags\n        - userId\n      type: object\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        location:\n          type: string\n        language:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        description:\n          type: string\n        descriptionHtml:\n          type: string\n        updatedAt:\n          type: string\n          format: date-time\n        createdAt:\n          type: string\n          format: date-time\n        lastAccessedAt:\n          type: string\n          format: date-time\n        publishedOn:\n          type: string\n          format: date\n        public:\n          type: boolean\n        userId:\n          type: string\n        likeCount:\n          type: number\n        sourceCodeURL:\n          type: string\n        ownerVisitCount:\n          type: number\n        youtubeVideoId:\n          type: string\n        stackoverflowQuestionId:\n          type: string\n\n    UserProfile:\n      properties:\n        displayName:\n          type: string\n        summary:\n          type: string\n        websiteLink:\n          type: string\n        twitterLink:\n          type: string\n        githubLink:\n          type: string\n        linkedinLink:\n          type: string\n    Search:\n      required:\n        - text\n        - searchDomain\n      properties:\n        text:\n          type: string\n        lastAccessedAt:\n          type: string\n          format: date-time\n        searchDomain:\n          type: string\n          enum:\n            - public\n            - personal\n        count:\n          type: integer\n    Following:\n      properties:\n        users:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            type: string\n    User:\n      required:\n        - userId\n      properties:\n        userId:\n          type: string\n        profile:\n          $ref: '#/components/schemas/UserProfile'\n        searches:\n          type: array\n          items:\n            $ref: '#/components/schemas/Search'\n        readLater:\n          type: array\n          items:\n            type: string\n        likes:\n          type: array\n          items:\n            type: string\n        watchedTags:\n          type: array\n          items:\n            type: string\n        favorites:\n          deprecated: true\n          type: array\n          items:\n            type: string\n        history:\n          type: array\n          items:\n            type: string\n        followers:\n          type: array\n          items:\n            type: string\n        following:\n          $ref: '#/components/schemas/Following'\n\n    UserDataProfile:\n      required:\n        - userId\n      properties:\n        userId:\n          type: string\n        profile:\n          $ref: '#/components/schemas/UserProfile'\n\n    TagCount:\n      type: object\n      required:\n        - name\n        - count\n      properties:\n        name:\n          type: string\n        count:\n          type: integer\n          description: how much many times the tag has been used in the specific context\n    BasicErrorModel:\n      type: object\n      required:\n        - httpStatus\n        - message\n      properties:\n        httpStatus:\n          type: integer\n        message:\n          type: string\n        type:\n          type: string\n          description: specify error Type (e.g. 'MongoError')\n        stack:\n          type: string\n          description: the stacktrace of the error - it is filled only in \"development\" mode\n\n    ValidationErrorModel:\n      allOf:\n        - $ref: '#/components/schemas/BasicErrorModel'\n        - type: object\n          required:\n            - validationErrors\n            - httpStatus\n          properties:\n            httpStatus:\n              type: integer\n              enum: [400]\n            validationErrors:\n              type: array\n              items:\n                type: string\n    WebpageInfo:\n      type: object\n      properties:\n        title:\n          type: string\n        metaDescription:\n          type: string\n        tags:\n          description: these are avaialble for youtube videos and stackoverflow questions\n          type: array\n          items:\n            type: string\n        publishedOn:\n          type: string\n          format: date\n    Version:\n      type: object\n      required:\n        - version\n        - gitSha1\n      properties:\n        version:\n          type: string\n        gitSha1:\n          type: string\n  parameters:\n    userIdPathParam:\n      name: userId\n      in: path\n      description: keycloak user id\n      required: true\n      schema:\n        type: string\n        default: 4c617f2b-2bad-498b-a9c6-4e9a8c303798\n    followedUserIdPathParam:\n      name: followedUserId\n      in: path\n      description: the id of the user to be following\n      required: true\n      schema:\n        type: string\n    bookmarkIdPathParam:\n      name: bookmarkId\n      in: path\n      description: id of the bookmark\n      required: true\n      schema:\n        type: string\n    searchTextQueryParam:\n      name: q\n      in: query\n      description: |\n        search query (terms are separated by space). There are special filters available:\n          * `lang:iso_language_code` - e.g. `lang:en` for English, `lang:es` for Spanish and `lang:de` for German bookmarks\n          * `site:site_URL` - e.g. `site:codepedia.org` bookmarks only from website [www.codepedia.org](https://www.codepedia.org)\n          * `userId:UUID-user` - to be used only when querying **public bookmarks** submitted by the user with  `userId`\n          * `private:only` - makes sense **only** when used for querying **personal bookmarks**\n      schema:\n        type: string\n      examples:       # Multiple examples\n        german:\n          value: 'lang:de'    # Example value\n          summary: Will look only for bookmarks in German\n        site:\n          value: 'site:codepedia.org'\n          summary: Wille look only for bookmarks with the domain **codepedia.org**\n        complex:\n          value: 'exception handling [java] site:codepedia.org'\n          summary: Wille look only for bookmarks with terms \"exception\" and \"handling\" tagged with \"java\" and the domain **codepedia.org**\n        complex-private-only:\n          value: 'exception handling [java] site:wiki.my-corporation.com private:only'\n          summary: Same as above but only within **private** bookmarks\n    pageQueryParam:\n      name: page\n      in: query\n      description: |\n        Pagination query param - it is used to skip results in combination with `limit` query param\n        Defaults to **1** and in this case **no results are skipped**\n      required: false\n      schema:\n        type: integer\n        default: 1\n        format: int32\n    limitQueryParam:\n      name: limit\n      in: query\n      description: Limits the number of returned results (used in combination with queryParam)\n      required: false\n      schema:\n        type: integer\n        default: 55\n        format: int32\n    locationQueryParam:\n      name: location\n      in: query\n      description: location of the bookmark, usually an URL\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    BookmarkListResponse:\n      description: List of bookmarks\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Bookmark'\n    UserDataResponse:\n      description: User data\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n    UserDataProfilesResponse:\n      description: List of user profiles\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/UserDataProfile'\n    ForbiddenError:\n      description: Access token is missing or invalid\n    UnauthorizedError:\n      description: unauthorized (you need to have a valid token) and userId must\n        match the subject in token\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BasicErrorModel'\n    NotFoundError:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BasicErrorModel'\n    InternalServerError:\n      description: Internal server error, when unknown server error is catched\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BasicErrorModel'\n    ValidationError:\n      description: Bad request, validation errors\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ValidationErrorModel'\n\n# 2) Apply the security globally to all operations\nsecurity:\n  - bearerAuth: []         # use the same name as above\n",
			"canonicalURL": "/github.com/CodeverLand/codever@e4864f959016fb5299287c75c729efda00ffef93/-/blob/backend/docs/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/codeverland/codever/blob/e4864f959016fb5299287c75c729efda00ffef93/backend/docs/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}