{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DataBiosphere/azul"
		},
		"file": {
			"name": "portal-registration-api.yaml",
			"size": 0,
			"path": "rfc/portal-registration-api.yaml",
			"byteSize": 24410,
			"content": "# A word on the syntactic conventions used in this file. We use a quoted\n# strings for names that we define. Together with the fact that most YAML\n# editors highlight quoted strings this emphasizes the distinction between\n# meta  (OpenAPI) and problem domain (our API).\n\nopenapi: 3.0.2\ninfo:\n  title: \"Portal Registration API\"\n  version: \"0.2\"\n  description: \u003e\n\n    This is a specification of a REST API for registering third-party portals\n    with Azul, the HCA Data Browser backend service. We distinguish two main\n    concepts: portals and integrations. A _portal_ is a third-party website or\n    service to which the HCA Data Browser can direct its visitors. An\n    _integration_ is a blueprint describing when and how visitors are\n    redirected and what information is passed along. There can be multiple\n    portals and multiple integrations per portal.\n\n    Portal developers use this API to register their portal with Azul and to\n    specify how they wish to integrate their portal with the Data Browser. The\n    Data Browser uses this API to enumerate all available integrations that\n    are applicable in a particular UI context.\n\n    # Static project integration\n\n    A portal that offers visualizations for specific HCA datasets—or\n    _projects_, in HCA terminology—indexes or analyses the data in those\n    projects ahead of time and publishes the visualization results on specific\n    web pages, one page per project. It then registers with Azul using this\n    API, defining one integration for each of these pages. Each integration\n    associates the URL of the portal page with the UUID of the corresponding\n    HCA project. When the Data Browser renders a project, it queries this API\n    for integrations that match both the project and the current\n    user-interface context. The Data Browser display of a project for which\n    one or more matching portal integrations exist is then decorated with\n    links pointing to the corresponding pages in those portals.\n\n    # Manifest integration\n\n    Manifest integration is intended to be used by portals that index all of\n    the data in the HCA and that offer visualizations of subsets of that data.\n    The subset itself is determined by the visitor and is passed to the \n    portal in the form of a manifest containing references to the items in the\n    subset.\n    \n    Manifest integration is also intended to be used by portals that fetch HCA\n    data on demand at the time a visitor requests the integration. An example\n    of this type is a portal that lets the visitor initiate analysis workflows\n    using data files referenced by the manifest as inputs.\n\n    Portals of either type register with Azul and define a manifest\n    integration for specific types of biological, experimental or analytical\n    entities like samples or data files. As visitors use the Data Browser to\n    interactively select entities of these types, the Data Browser uses this\n    API to query for portals with manifest integrations matching the currently\n    selected entities and renders UI elements (buttons or links) with which\n    the visitor can initiate a transfer to the respective portal. Once a\n    visitor initiates the transfer, the Data Browser first requests Azul to\n    prepare a manifest and when that is complete, transfers the visitor to the\n    portal, passing along a URL to the prepared manifest. The manifest\n    contains references to the selected entities along with all or some of the\n    associated metadata, depending on the manifest format specified in the\n    integration. The portal processes the manifest and either prepares a\n    visualization for the entities referenced therein or initiates workflows\n    to analyse them. \n\n    # Chosing an integration type\n\n    Static project integration is the most basic means of connecting a portal\n    to the HCA Data Browser. The portal developer selects a specific HCA\n    project and associates a specific portal URL with it. When visitors view\n    that project in the Data Browser, they can click a link that takes them to\n    the portal page for that project. Static project integration makes use of\n    the `get` integration type. That type of integration can also be used for\n    other HCA entities such as samples, files or bundles but is probably most\n    useful for projects, since the set of projects is stable and relatively\n    small. While technically possible, it would not make a lot of sense to\n    provide a `get` integration for non-project entities, like individual data\n    files, simply because there could be millions of those and it seems\n    unlikely that a portal would dedicate a page for just a few of them. It\n    would also be impractical to create a large number of `get` integrations,\n    one per data file.\n\n    For non-project entities the `get_entity`, `get_entities` or\n    `get_manifest` types of integration should be used. The `get_manifest`\n    integration allows for passing a large number of entities to the portal\n    but the portal developer should account for the fact that the manifest\n    could reference entities of which the portal may not have prior knowledge.\n    \n    The `get_entity` and `get_entities` integrations provide a means for\n    negotiating (via HEAD request) the set of entities passed to the portal\n    but only allows for safely passing at most 50 entities, or 500 entities if\n    support for older user-agents is sacrificed.\n\ntags:\n  - name: \"Portals\"\n    description: \"Operations on registered portals\"\n  - name: \"Integrations\"\n    description: \"Operations on integrations with a registered portal\"\nservers:\n  - url: \"/\"\ncomponents:\n  schemas:\n    \"integration_type\":\n      type: string\n      enum:\n        - \"get\"\n        - \"get_entity\"\n        - \"get_entities\"\n        - \"get_manifest\"\n      description: \u003e\n\n        The kind of integration.\n\n        * `get` - A GET request is made to a portal endpoint but no payload\n          is sent. This integration type associates a fixed set of concrete\n          entities with a static URL at the portal. Any Data Browser page\n          listing the specified entities will include a link pointing to the\n          specified URL.\n\n        * `get_entity` - The portal endpoint is invoked using a GET request to\n          a portal URL that is parameterized with a single identifier\n          referencing an entity of the type denoted in the `entity_type`\n          property of the integration. Any Data Browser page listing entities\n          of that type will include a link/button pointing at the portal URL.\n          When a visitor clicks that link/button while only a single entity is\n          selected, the identifier of that entity will be interpolated into\n          the specified portal URL template and the user agent will be\n          redirected to resulting URL.\n\n        * `get_entities` - The portal endpoint is invoked with a GET request\n          to a portal URL that is parameterized with a list of entity\n          identifiers. All referenced entities will be of the type denoted in\n          the `entity_type` property of the integration. Any Data Browser page\n          listing entities of that type will include a link/button pointing at\n          the portal URL. When a visitor clicks that link/button, the\n          identifiers of the currently selected entities will be interpolated\n          into the specified portal URL template and the user agent will be\n          redirected to resulting URL. This integration type is subject to a\n          default limit of 50 entities, or, if the portal developer opts to\n          support only recent user agents, up to 500 entities.\n\n        * `get_manifest` - The portal endpoint is invoked with a GET request to\n          the specified portal URL parameterized with a URL to a manifest\n          listing entity identifiers and, depending on the manifest format,\n          certain associated metadata. All referenced entities will be of the\n          type denoted in the `entity_type` property of the integration. Any\n          Data Browser page listing entities of that type will include a\n          link/button pointing at the portal URL. When a visitor clicks that\n          link/button, a manifest will be generated containing the identifiers\n          of and metadata about the currently selected entities. The\n          pre-signed URL of the generated manifest URL will be interpolated\n          into the specified portal URL template and the user agent will be\n          redirected to the resulting portal URL. There is no limit on the\n          number of entities in the manifest. The pre-signed URL to the\n          generated manifest expires in one day.\n\n    \"entity_type\":\n      type: string\n      enum:\n        - \"project\"\n        - \"sample\"\n        - \"file\"\n        - \"bundle\"\n      description: \u003e\n\n        The type of the entity to which an integration applies. For the\n        `manifest` integration, this property defines the type of entity\n        represented by each row. At some point Azul will support less\n        restrictive combinations of `integration_type` and `entity_type` but at\n        present, only the combinations listed below are valid.\n\n        * `project` - use with the `integration_type` of `entities`\n\n        * `file` - use with the `integration_type` of `manifest` and\n          `manifest_type` of `full` or `compact`\n\n        * `bundle` - use with the `integration_type` of `manifest` and\n          `manifest_type` of `terra.bdbag`\n\n    \"Portal\":\n      type: object\n      required:\n        - \"portal_name\"\n        - \"portal_id\"\n      properties:\n        \"portal_id\":\n          readOnly: true\n          description: \"The unique identifier of the portal\"\n          type: string\n          format: uuid\n        \"portal_name\":\n          description: \"The name of the portal for use in UI elements like links or buttons\"\n          type: string\n          maxLength: 50\n        \"portal_icon\":\n          type: string\n          description: \"A URL to an image that can be used to symbolize the portal in a UI\"\n        \"contact_email\":\n          type: string\n          format: email\n          description: \"The email address to which questions about the portal can be directed\"\n        \"organization_name\":\n          type: string\n          description: \"A name of the organisation owning the portal\"\n        \"portal_description\":\n          type: string\n          description: \"A brief description of the portals and its capabilities\"\n    \"Integration\":\n      type: object\n      required:\n        - \"integration_id\"\n        - \"integration_type\"\n        - \"entity_type\"\n      properties:\n        \"integration_id\":\n          readOnly: true\n          description: \"The unique identifier of the integration\"\n          type: string\n          format: uuid\n        \"integration_type\":\n          $ref: \"#/components/schemas/integration_type\"\n        \"entity_type\":\n          $ref: \"#/components/schemas/entity_type\"\n        \"title\":\n          type: string\n          description: \u003e\n\n            A brief textual description of the response returned by the portal\n            when a visitor initiates this integration. The HCA Data Browser may\n            use this text when rendering a UI element related to this\n            integration.\n\n      discriminator:\n        propertyName: \"integration_type\"\n        mapping:\n          \"get\": \"#/components/schemas/GetIntegration\"\n          \"get_entity\": \"#/components/schemas/GetEntityIntegration\"\n          \"get_entities\": \"#/components/schemas/GetEntitiesIntegration\"\n          \"get_manifest\": \"#/components/schemas/GetManifestIntegration\"\n      oneOf:\n        - $ref: \"#/components/schemas/GetIntegration\"\n        - $ref: \"#/components/schemas/GetEntityIntegration\"\n        - $ref: \"#/components/schemas/GetEntitiesIntegration\"\n        - $ref: \"#/components/schemas/GetManifestIntegration\"\n\n    \"GetIntegration\":\n      type: object\n      required:\n        - \"entity_ids\"\n        - \"portal_url\"\n      properties:\n        \"entity_ids\":\n          description: \"A list of Azul entity identifiers to restrict the integration to\"\n          type: array\n          items:\n            type: string\n            format: uuid\n        \"portal_url\":\n          type: string\n          description: \u003e\n\n            The URL of the portal endpoint that will be requested when the\n            visitor initiates this integration. Note that the same URL will be\n            used for any of the entities listed in the `entity_ids` property.\n            To associate a different URL with each of many entities, multiple\n            `get` integrations need to be created. Typically, the `entity_ids`\n            property of these integrations will be a singleton list referring\n            to the respective entity.\n\n    \"GetEntityIntegration\":\n      type: object\n      required:\n        - \"portal_url_template\"\n      properties:\n        \"portal_url_template\":\n          type: string\n          description: \u003e\n\n            A template for the URL of the portal endpoint to hit when the visitor\n            initiates this integration. The template will be parsed according to\n            RFC 6570 and the first occurrence of the `entity_id` variable will\n            be substituted with the identifier of the entity selected by the\n            visitor.\n\n        \"allow_head\":\n          type: boolean\n          description: \u003e\n\n            If `true`, a client may make a HEAD request of the expanded portal\n            URL in order to determine if the portal supports the entity\n            specified in the request. The portal must quickly respond with\n            status 200 if a GET request for the same URL is expected to yield\n            200 status response as well.\n\n    \"GetEntitiesIntegration\":\n      type: object\n      required:\n        - \"portal_url_template\"\n      properties:\n        \"portal_url_template\":\n          type: string\n          description: \u003e\n\n            A template for the URL of the portal endpoint to hit when the visitor\n            initiates this integration. The template will be parsed according to\n            RFC 6570 and the first occurrence of the `entity_ids` variable will\n            be substituted with a list of identifiers of the entities selected\n            by the visitor.\n\n        \"allow_head\":\n          type: boolean\n          default: false\n          description: \u003e\n\n            If `true`, a client may use a HEAD request for the expanded portal\n            URL to determine if the portal supports the entities specified in\n            the request. The portal must quickly respond with 200 status if a\n            GET request for the same URL is expected to yield 200 status\n            response as well. \n\n            Note that the if URL references multiple entities it is up to the\n            portal to decide if a 200 code is appropriate if only some of\n            those entities are supported by the portal. \n\n            For more granular control, the portal may return a 200 response\n            that includes the `azul-include-entities` header. The header value\n            must be a comma-separated list of at least one entity ID.\n            Whitespace before and after each comma and at the beginning and\n            end of the header value is ignored. If the portal returns this\n            header, the client will only provide the specified entities when\n            it makes the subsequent GET request. \n\n            Similarly, the portal may return a 200 response that includes the\n            `azul-exclude-entities` header and on a subsequent GET request,\n            the client will only provide the entities NOT specified in that\n            header. The syntax of the header value is the same as for\n            `azul-include-entities`.\n\n            The portal must not return a response that mentions both headers.\n            Either header may occur multiple times. The values of multiple\n            occurrences of the header are concatenated as defined in\n            https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\n        \"max_entities\":\n          type: integer\n          minimum: 2\n          maximum: 500\n          default: 50\n          description: \u003e\n\n            An upper limit to the number of entities that will be interpolated\n            into the portal URL template. The default limit was chosen in\n            consideration of the length of a UUID (36) and the fact that some\n            older user agents limit the length of a URL to 2000. More recent\n            user agents allow considerably longer URLs. The maximum limit\n            accomodates that at the expense of potentially breaking older user\n            agents. Note that it is the portal developers choice as to whether\n            to extend the limit to a value that may break the integration in\n            older user agents.\n\n    \"GetManifestIntegration\":\n      type: object\n      required:\n        - \"manifest_type\"\n        - \"portal_url_template\"\n      properties:\n        \"manifest_type\":\n          type: string\n          enum:\n            - \"full\"\n            - \"compact\"\n            - \"terra.bdbag\"\n          description: \u003e\n\n            The format of the manifest. TODO flesh this out\n\n            * `full` - a full metdata TSV\n\n            * `compact` - a compact metadata TSV\n\n            * `terra.bdbag` - a BDBag in Terra format\n\n        \"portal_url_template\":\n          type: string\n          description: \u003e\n\n            A template for the URL of the portal endpoint to hit when the visitor\n            initiates this integration. The template will be parsed according to\n            RFC 6570 and the first occurrence of the `manifest_url` variable\n            will be replaced with the URL to the manifest listing the entities\n            selected by the visitor.\n\n    \"PortalWithIntegrations\":\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/Portal\"\n        - type: object\n          required:\n            - \"integrations\"\n          properties:\n            \"integrations\":\n              type: \"array\"\n              items:\n                $ref: \"#/components/schemas/Integration\"\n\npaths:\n  /portal:\n    get:\n      summary: \"List portal registrations\"\n      tags:\n        - Portals\n      responses:\n        \"200\":\n          description: \u003e\n            A list of registered portals\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Portal\"\n    post:\n      summary: Register a new portal\n      tags:\n        - Portals\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/Portal\"\n        description: \u003e\n          Portal definition\n        required: true\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/Portal\"\n        \"400\":\n          description: \"Invalid request\"\n  \"/portal/{portal_id}\":\n    parameters:\n      - name: \"portal_id\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - \"Portals\"\n      summary: \"Retrieve a portal registration\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/Portal\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal not found\"\n    put:\n      tags:\n        - Portals\n      summary: \"Update an existing portal registration\"\n      description: \"\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Portal\"\n        description: \"The updated portal definition\"\n        required: true\n      responses:\n        \"200\":\n          description: \"The updated portal definition\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Portal\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal not found\"\n    delete:\n      tags:\n        - \"Portals\"\n      summary: \"Unregister a portal\"\n      description: \"\"\n      responses:\n        \"204\":\n          description: \"Portal deleted\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal not found\"\n  \"/portal/{portal_id}/integration\":\n    parameters:\n      - name: \"portal_id\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - \"Integrations\"\n      summary: \"List integrations with a portal\"\n      description: \"\"\n      responses:\n        \"200\":\n          description: \"A list of integrations with the given portal\"\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Integration\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal not found\"\n    post:\n      tags:\n        - \"Integrations\"\n      summary: \"Create a new integration with a portal\"\n      description: \"\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Integration\"\n        description: \"Integration definition\"\n        required: true\n      responses:\n        \"200\":\n          description: \"The newly created integration definition\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Integration\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal not found\"\n  \"/portal/{portal_id}/integration/{integration_id}\":\n    parameters:\n      - name: \"portal_id\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: \"integration_id\"\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - \"Integrations\"\n      summary: \"Retrieve an integration with a portal\"\n      description: \"\"\n      responses:\n        \"200\":\n          description: \"The integration definition\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Integration\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal or integration not found\"\n    put:\n      tags:\n        - \"Integrations\"\n      summary: \"Update an integration with a portal\"\n      description: \"\"\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/Integration\"\n        description: \"The updated definition\"\n        required: true\n      responses:\n        \"200\":\n          description: \"The updated integration definition\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/Integration\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal or integration not found\"\n    delete:\n      tags:\n        - \"Integrations\"\n      summary: \"Delete an integration with a portal\"\n      description: \"\"\n      responses:\n        \"204\":\n          description: \"Integration deleted\"\n        \"400\":\n          description: \"Invalid request\"\n        \"404\":\n          description: \"Portal or integration not found\"\n  \"/integrations\":\n    get:\n      summary: \"List integrations accross portals\"\n      tags:\n        - \"Integrations\"\n      description: \"\"\n      parameters:\n        - in: query\n          name: \"entity_type\"\n          schema:\n            $ref: \"#/components/schemas/entity_type\"\n        - in: query\n          name: \"integration_type\"\n          schema:\n            $ref: \"#/components/schemas/integration_type\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PortalWithIntegrations\"\n        \"400\":\n          description: Invalid request\n",
			"canonicalURL": "/github.com/DataBiosphere/azul@97f5feceaae5f1b2230009f4faf80a3db63eecd6/-/blob/rfc/portal-registration-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/DataBiosphere/azul/blob/97f5feceaae5f1b2230009f4faf80a3db63eecd6/rfc/portal-registration-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}