{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Veridax/privapi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/adyen.com/RecurringService/25/openapi.yaml",
			"byteSize": 15944,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://pal-test.adyen.com/pal/servlet/Recurring/v25'\ninfo:\n  contact:\n    x-twitter: Adyen\n  description: 'Additional methods that allow you to manage payment details stored for recurring payments. For more information, refer to [Recurring payments](https://docs.adyen.com/developers/features/recurring-payments).'\n  title: Adyen Recurring Service\n  version: '25'\n  x-apisguru-categories:\n    - payment\n  x-logo:\n    url: 'https://twitter.com/Adyen/profile_image?size=original'\n  x-origin:\n    - converter:\n        url: 'https://github.com/lucybot/api-spec-converter'\n        version: 2.6.2\n      format: openapi\n      url: 'https://raw.githubusercontent.com/adyen/adyen-openapi/master/specs/3.0/RecurringService-V25.json'\n      version: '3.0'\n  x-preferred: true\n  x-providerName: adyen.com\n  x-serviceName: RecurringService\npaths:\n  /disable:\n    post:\n      description: |-\n        Disables stored payment details to stop charging a shopper with this particular recurring detail ID.\n\n        For more information, refer to [Disable stored details](https://docs.adyen.com/developers/features/recurring-payments/disable-stored-details).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DisableRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DisableResult'\n          description: OK - the request has succeeded.\n        '400':\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          description: Unauthorized - authentication required.\n        '403':\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          description: Internal Server Error - the server could not process the request.\n      summary: Disables stored payment details.\n      x-groupName: General\n      x-sortIndex: 2\n  /listRecurringDetails:\n    post:\n      description: |-\n        Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.\n\n        For more information, refer to [Retrieve stored details](https://docs.adyen.com/developers/features/recurring-payments/retrieve-stored-details).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RecurringDetailsRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecurringDetailsResult'\n          description: OK - the request has succeeded.\n        '400':\n          description: Bad Request - a problem reading or understanding the request.\n        '401':\n          description: Unauthorized - authentication required.\n        '403':\n          description: Forbidden - insufficient permissions to process the request.\n        '422':\n          description: Unprocessable Entity - a request validation error.\n        '500':\n          description: Internal Server Error - the server could not process the request.\n      summary: Retrieves stored payment details for a shopper.\n      x-groupName: General\n      x-sortIndex: 1\ncomponents:\n  schemas:\n    Address:\n      properties:\n        city:\n          description: The city name.\n          type: string\n        country:\n          description: A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        houseNumberOrName:\n          description: The house number or name.\n          type: string\n        postalCode:\n          description: The postal code with a maximum of 5 characters for USA and maximum of 10 characters for any other country.\n          type: string\n        stateOrProvince:\n          description: 'For USA or Canada, a valid 2-character abbreviation for the state or province respectively. For other countries any abbreviation with maximum 3 characters for the state or province.'\n          type: string\n        street:\n          description: |\n            The street name.\n            \u003e Don't append the house number to this field. Instead, pass the house number separately as `houseNumberOrName`.\n          type: string\n      required:\n        - street\n        - houseNumberOrName\n        - city\n        - country\n    BankAccount:\n      properties:\n        bankAccountNumber:\n          description: The bank account number (without separators).\n          type: string\n        bankCity:\n          description: The bank city.\n          type: string\n        bankLocationId:\n          description: The location id of the bank. The field value is `nil` in most cases.\n          type: string\n        bankName:\n          description: The name of the bank.\n          type: string\n        bic:\n          description: 'The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.'\n          type: string\n        countryCode:\n          description: |-\n            Country code where the bank is located.\n\n            A valid value is an ISO two-character country code (e.g. 'NL').\n          type: string\n        iban:\n          description: 'The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).'\n          type: string\n        ownerName:\n          description: |-\n            The name of the bank account holder.\n            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n            * χ12 is converted to ch12.\n            * üA is converted to euA.\n            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n            * John17 - allowed.\n            * J17 - allowed.\n            * 171 - not allowed.\n            * John-7 - allowed.\n            \u003e If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.\n          type: string\n        taxId:\n          description: The bank account holder's tax ID.\n          type: string\n    Card:\n      properties:\n        cvc:\n          description: |-\n            The [card verification code](https://docs.adyen.com/developers/payment-glossary#cardsecuritycodecvccvvcid) (1-20 characters). Depending on the card brand, it is known also as:\n            * CVV2/CVC2 – length: 3 digits\n            * CID – length: 4 digits\n            \u003e If you are using [Client-Side Encryption](https://docs.adyen.com/developers/ecommerce-integration), the CVC code is present in the encrypted data. You must never post the card details to the server.\n            \u003e This field must be always present in a [one-click payment request](https://docs.adyen.com/developers/features/recurring-payments).\n            \u003e When this value is returned in a response, it is always empty because it is not stored.\n          maxLength: 20\n          minLength: 1\n          type: string\n        expiryMonth:\n          description: |-\n            The card expiry month.\n            Format: 2 digits, zero-padded for single digits. For example:\n            * 03 = March\n            * 11 = November\n          maxLength: 2\n          minLength: 1\n          type: string\n        expiryYear:\n          description: |-\n            The card expiry year.\n            Format: 4 digits. For example: 2018\n          maxLength: 4\n          minLength: 4\n          type: string\n        holderName:\n          description: 'The name of the cardholder, as printed on the card.'\n          maxLength: 50\n          minLength: 1\n          type: string\n        issueNumber:\n          description: The issue number of the card (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        number:\n          description: |-\n            The card number (4-19 characters). Do not use any separators.\n            When this value is returned in a response, only the last 4 digits of the card number are returned.\n          maxLength: 19\n          minLength: 4\n          type: string\n        startMonth:\n          description: The month component of the start date (for some UK debit cards only).\n          maxLength: 2\n          minLength: 1\n          type: string\n        startYear:\n          description: The year component of the start date (for some UK debit cards only).\n          maxLength: 4\n          minLength: 4\n          type: string\n      required:\n        - number\n        - expiryMonth\n        - expiryYear\n        - holderName\n    DisableRequest:\n      properties:\n        contract:\n          description: |-\n            Specify the contract if you only want to disable a specific use.\n\n            This field can be set to one of the following values, or to their combination (comma-separated):\n            * ONECLICK\n            * RECURRING\n            * PAYOUT\n          type: string\n        merchantAccount:\n          description: Your merchant account.\n          type: string\n        recurringDetailReference:\n          description: |-\n            The ID that uniquely identifies the recurring detail reference.\n\n            If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.\n          type: string\n        shopperReference:\n          description: |-\n            The ID that uniquely identifies the shopper.\n\n            This `shopperReference` must be the same as the `shopperReference` used in the initial payment.\n          type: string\n      required:\n        - merchantAccount\n        - shopperReference\n    DisableResult:\n      properties:\n        details:\n          description: A list of one or more recurring payment details that were disabled.\n          items:\n            $ref: '#/components/schemas/RecurringDetail'\n          type: array\n        response:\n          description: 'Depending on whether a specific recurring detail was in the request, result is either [detail-successfully-disabled] or [all-details-successfully-disabled].'\n          type: string\n    ELV:\n      properties:\n        accountHolderName:\n          type: string\n        bankAccountNumber:\n          type: string\n        bankLocation:\n          type: string\n        bankLocationId:\n          type: string\n        bankName:\n          type: string\n    Name:\n      properties:\n        firstName:\n          description: A person's first name.\n          type: string\n        gender:\n          description: A person's gender (can be unknown).\n          enum:\n            - MALE\n            - FEMALE\n            - UNKNOWN\n          maxLength: 1\n          minLength: 1\n          type: string\n        infix:\n          description: 'A person name''s infix, if applicable. Maximum length: 20 characters.'\n          type: string\n        lastName:\n          description: A person's last name.\n          type: string\n      required:\n        - firstName\n        - lastName\n        - gender\n    Recurring:\n      properties:\n        contract:\n          description: |-\n            The type of recurring contract to be used.\n            Possible values:\n            * `ONECLICK` – The shopper opts to store their card details for future use. The shopper is present for the subsequent transaction, for cards the security code (CVC/CVV) is required.\n            * `RECURRING` – Payment details are stored for future use. For cards, the security code (CVC/CVV) is not required for subsequent payments. This is used for shopper not present transactions.\n            * `ONECLICK,RECURRING` – Payment details are stored for future use. This allows the use of the stored payment details regardless of whether the shopper is on your site or not.\n          enum:\n            - ONECLICK\n            - RECURRING\n            - PAYOUT\n          type: string\n        recurringDetailName:\n          description: A descriptive name for this detail.\n          type: string\n        tokenService:\n          description: The name of the token service.\n          enum:\n            - VISATOKENSERVICE\n          type: string\n    RecurringDetail:\n      properties:\n        acquirer:\n          type: string\n        acquirerAccount:\n          type: string\n        additionalData:\n          additionalProperties:\n            type: string\n          type: object\n        alias:\n          type: string\n        aliasType:\n          type: string\n        bank:\n          $ref: '#/components/schemas/BankAccount'\n        billingAddress:\n          $ref: '#/components/schemas/Address'\n        card:\n          $ref: '#/components/schemas/Card'\n        contractTypes:\n          items:\n            type: string\n          type: array\n        creationDate:\n          format: date-time\n          type: string\n        elv:\n          $ref: '#/components/schemas/ELV'\n        firstPspReference:\n          type: string\n        name:\n          description: An optional descriptive name for this recurring detail\n          type: string\n        paymentMethodVariant:\n          type: string\n        recurringDetailReference:\n          description: The reference that uniquely identifies the recurring detail\n          type: string\n        shopperName:\n          $ref: '#/components/schemas/Name'\n        socialSecurityNumber:\n          type: string\n        tokenDetails:\n          $ref: '#/components/schemas/TokenDetails'\n        variant:\n          type: string\n    RecurringDetailsRequest:\n      properties:\n        merchantAccount:\n          description: The merchant account identifier you want to process the (transaction) request with.\n          type: string\n        recurring:\n          $ref: '#/components/schemas/Recurring'\n          description: |-\n            A container for the type of a recurring contract to be retrieved.\n\n            The contract value needs to match the contract value submitted in the payment transaction used to create a recurring contract.\n            However, if `ONECLICK,RECURRING` is the original contract definition in the initial payment, then `contract` should take either `ONECLICK` or `RECURRING`, depending on whether or not you want the shopper to enter their card's security code when they finalize their purchase.\n        shopperReference:\n          description: The reference you use to uniquely identify the shopper (e.g. user ID or account ID).\n          type: string\n      required:\n        - merchantAccount\n        - shopperReference\n    RecurringDetailsResult:\n      properties:\n        creationDate:\n          description: The date when the recurring details were created.\n          format: date-time\n          type: string\n        details:\n          description: A list of one or more recurring payment details.\n          items:\n            $ref: '#/components/schemas/RecurringDetail'\n          type: array\n        invalidOneclickContracts:\n          type: boolean\n        lastKnownShopperEmail:\n          description: The most recent email for this shopper (if available).\n          type: string\n        shopperReference:\n          description: The reference you use to uniquely identify the shopper (e.g. user ID or account ID).\n          type: string\n    TokenDetails:\n      properties:\n        tokenData:\n          additionalProperties:\n            type: string\n          type: object\n        tokenDataType:\n          type: string\nx-groups:\n  - General\n",
			"canonicalURL": "/github.com/Veridax/privapi@fd528906df6bae10312f040bd4e8b8469ad3ef3f/-/blob/APIs/adyen.com/RecurringService/25/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Veridax/privapi/blob/fd528906df6bae10312f040bd4e8b8469ad3ef3f/APIs/adyen.com/RecurringService/25/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}