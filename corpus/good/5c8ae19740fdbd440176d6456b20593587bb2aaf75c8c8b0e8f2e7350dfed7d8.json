{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/splunk/splunk-cloud-sdk-python"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "splunk_sdk/action/v1beta2/openapi.yaml",
			"byteSize": 22168,
			"content": "components:\n  parameters:\n    ActionName:\n      description: The name of the action as one or more identifier strings separated\n        by periods. Each identifier string consists of lowercase letters, digits,\n        and underscores, and cannot start with a digit.\n      in: path\n      name: action_name\n      required: true\n      schema:\n        pattern: ^[_a-z][_a-z0-9]*(?:\\.[_a-z][_a-z0-9]*)*$\n        type: string\n    AuthorizationHeaderParam:\n      description: The access token, which is obtained from a known identity provider.\n      in: header\n      name: Authorization\n      required: true\n      schema:\n        pattern: ^Bearer .+\n        type: string\n    EntryName:\n      description: The name of the trigger map entry.\n      in: path\n      name: entry_name\n      required: true\n      schema:\n        pattern: ^[_a-z][_a-z0-9]*(?:\\\\.[_a-z][_a-z0-9]*)*$\n        type: string\n    StatusID:\n      description: The ID of the action status.\n      in: path\n      name: status_id\n      required: true\n      schema:\n        type: string\n    Tenant:\n      description: The tenant name.\n      example: wingdings-widgets\n      in: path\n      name: tenant\n      required: true\n      schema:\n        type: string\n    TriggerEventID:\n      description: The ID of the trigger event.\n      in: path\n      name: trigger_event_id\n      required: true\n      schema:\n        type: string\n    TriggerName:\n      description: The name of the trigger.\n      in: path\n      name: trigger_name\n      required: true\n      schema:\n        pattern: ^[_a-z][_a-z0-9]*(?:\\\\.[_a-z][_a-z0-9]*)*$\n        type: string\n  schemas:\n    Action:\n      discriminator:\n        mapping:\n          email: '#/components/schemas/EmailAction'\n          webhook: '#/components/schemas/WebhookAction'\n        propertyName: kind\n      oneOf:\n      - $ref: '#/components/schemas/EmailAction'\n      - $ref: '#/components/schemas/WebhookAction'\n    ActionImmutable:\n      properties:\n        createdAt:\n          description: The date and time this action template was created (ISO-8601\n            date/time with zone).\n          format: date-time\n          readOnly: true\n          type: string\n        createdBy:\n          description: The principal that created this action template.\n          readOnly: true\n          type: string\n        kind:\n          $ref: '#/components/schemas/ActionKind'\n        name:\n          description: The name of the action, as one or more identifier strings separated\n            by periods. Each identifier string consists of lowercase letters, digits,\n            and underscores, and cannot start with a digit.\n          pattern: ^[_a-z][_a-z0-9]*(?:\\.[_a-z][_a-z0-9]*)*$\n          type: string\n        updatedAt:\n          description: The date and time this action template was updated (ISO-8601\n            date/time with zone).\n          format: date-time\n          readOnly: true\n          type: string\n        updatedBy:\n          description: The principal that updated this action template.\n          readOnly: true\n          type: string\n      required:\n      - name\n      - kind\n      type: object\n    ActionKind:\n      enum:\n      - webhook\n      - email\n      type: string\n    ActionMutable:\n      oneOf:\n      - $ref: '#/components/schemas/EmailActionMutable'\n      - $ref: '#/components/schemas/WebhookActionMutable'\n    ActionResult:\n      properties:\n        actionName:\n          pattern: ^[_a-z][_a-z0-9]*(?:\\.[_a-z][_a-z0-9]*)*$\n          type: string\n        message:\n          type: string\n        state:\n          $ref: '#/components/schemas/StatusState'\n        statusId:\n          type: string\n      required:\n      - state\n      - statusId\n      - actionName\n      type: object\n    ActionResultEmailDetail:\n      properties:\n        emailAddress:\n          type: string\n        state:\n          enum:\n          - PENDING\n          - NOT_FOUND\n          - SUCCEEDED\n          - BOUNCED\n          - RECIPIENT_COMPLAINED\n          type: string\n    EmailAction:\n      allOf:\n      - $ref: '#/components/schemas/ActionImmutable'\n      - $ref: '#/components/schemas/EmailActionMutable'\n    EmailActionMutable:\n      properties:\n        addresses:\n          description: |\n            An array of email addresses to include as recipients. Requires a special permission set for use. Please DO NOT include actual bouncing emails in automated testing.\n          items:\n            format: email\n            type: string\n          type: array\n        body:\n          description: HTML content to send as the body of the email. You can use\n            a template in this field.\n          example: \u003chtml\u003e\u003cbody\u003eHello, this is my test email.\u003c/body\u003e\u003c/html\u003e\n          type: string\n        bodyPlainText:\n          description: Optional text to send as the text/plain part of the email.\n            If this field is not set for an email action, the Action service converts\n            the value from the body field to text and sends that as the text/plain\n            part when invoking the action. You can use a template in this field.\n          example: Hello, this is my test email.\n          type: string\n        fromName:\n          description: Optional text providing a human-friendly name for the sender.\n            Must be less than or equal to 81 characters. You can use a template in\n            this field.\n          type: string\n        members:\n          description: An array of tenant member names, whose profile email addresses\n            will be included as recipients.\n          items:\n            type: string\n          type: array\n        subject:\n          description: The subject of the email. You can use a template in this field.\n          type: string\n        title:\n          description: A human-readable title for the action. Must be less than or\n            equal to 128 characters.\n          type: string\n      type: object\n    PublicWebhookKey:\n      properties:\n        key:\n          description: A PEM-formatted, ASN.1 DER-encoded PKCS#1 key.\n          type: string\n      required:\n      - key\n      type: object\n    RawJSONPayload:\n      additionalProperties: true\n      type: object\n    ServiceError:\n      properties:\n        code:\n          type: string\n        details:\n          type: object\n        message:\n          type: string\n        moreInfo:\n          type: string\n      required:\n      - code\n      - message\n      type: object\n    StatusState:\n      enum:\n      - QUEUED\n      - RUNNING\n      - DONE\n      - FAILED\n      type: string\n    TriggerEvent:\n      properties:\n        actionMetadata:\n          properties:\n            addresses:\n              description: |\n                An array of email addresses to include as recipients. Requires a special permission set for use. Please DO NOT include actual bouncing emails in automated testing.\n              items:\n                format: email\n                type: string\n              type: array\n            members:\n              description: An array of tenant member names, whose profile email addresses\n                will be included as recipients.\n              items:\n                type: string\n              type: array\n          type: object\n        createdAt:\n          description: string-ified ISO-8601 date/time with zone.\n          readOnly: true\n          type: string\n        createdBy:\n          description: The principal that generated the trigger event.\n          readOnly: true\n          type: string\n        id:\n          description: A unique identifier for this trigger event. Generated from\n            a hash of all recursively-sorted event field values.\n          readOnly: true\n          type: string\n        kind:\n          $ref: '#/components/schemas/TriggerEventKind'\n        payload:\n          $ref: '#/components/schemas/RawJSONPayload'\n        tenant:\n          description: The tenant within which the trigger event was generated.\n          pattern: ^[_a-z][_a-z0-9]*(?:\\\\.[_a-z][_a-z0-9]*)*$\n          readOnly: true\n          type: string\n        triggerCondition:\n          description: A description of the condition that caused the trigger event.\n          type: string\n        triggerName:\n          description: The name of the trigger for which this event was created.\n          pattern: ^[_a-z][_a-z0-9]*(?:\\\\.[_a-z][_a-z0-9]*)*$\n          type: string\n        ttlSeconds:\n          default: 3600\n          description: A time to live (TTL), expressed as seconds after createdAt,\n            after which the trigger event will no longer be acted upon.\n          format: int32\n          minimum: 1\n          type: integer\n      type: object\n    TriggerEventKind:\n      default: trigger\n      enum:\n      - trigger\n      type: string\n    WebhookAction:\n      allOf:\n      - $ref: '#/components/schemas/ActionImmutable'\n      - $ref: '#/components/schemas/WebhookActionMutable'\n      required:\n      - webhookUrl\n      - webhookPayload\n    WebhookActionMutable:\n      properties:\n        title:\n          description: A human-readable title for the action. Must be less than 128\n            characters.\n          type: string\n        webhookHeaders:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          type: object\n        webhookPayload:\n          description: |\n            The (possibly) templated payload body, which is POSTed to the webhookUrl when invoked.\n          type: string\n        webhookUrl:\n          description: |\n            Only HTTPS is allowed.\n          format: uri\n          type: string\n      type: object\ninfo:\n  description: |\n    With the Action service in Splunk Cloud Services, you can receive incoming trigger events and use pre-defined action templates to turn these events into meaningful actions.\n  title: Action Service\n  version: v1beta2.12\nopenapi: 3.0.0\npaths:\n  /{tenant}/action/v1beta2/actions:\n    get:\n      operationId: listActions\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Action'\n                type: array\n          description: The action templates were returned successfully.\n        \"401\":\n          description: The user isn't authenticated.\n        \"403\":\n          description: The operation isn't authorized.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Returns the list of action templates.\n      tags:\n      - Actions\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/Tenant'\n    post:\n      operationId: createAction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Action'\n        description: The action template to create.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: The action template was created successfully.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The request isn't valid.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The action template already exists.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The provided fields aren't valid.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Creates an action template.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.create\n  /{tenant}/action/v1beta2/actions/{action_name}:\n    delete:\n      operationId: deleteAction\n      responses:\n        \"204\":\n          description: The action template was removed successfully.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The resource wasn't found.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Removes an action template.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.modify\n    get:\n      operationId: getAction\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: The action template was returned successfully.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"404\":\n          description: The resource wasn't found.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Returns a specific action template.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/ActionName'\n    patch:\n      operationId: updateAction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionMutable'\n        description: Updates to the action template.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n          description: The action was updated successfully.\n          headers:\n            Location:\n              description: The URL of the updated action.\n              schema:\n                type: string\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The request isn't valid.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The resource wasn't found.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The provided fields aren't valid.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Modifies an action template.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.modify\n    post:\n      operationId: triggerAction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TriggerEvent'\n        description: The action payload, which should include values for any templated\n          fields.\n        required: true\n      responses:\n        \"201\":\n          description: The trigger event was received successfully.\n          headers:\n            Location:\n              description: The URL of the run status, with the format \"{tenant}/action/v1beta2/actions/{action_name}/status/{status_id}\".\n                Send a GET request to this URL to check the status, which will be\n                available for 4 days.\n              schema:\n                type: string\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The request isn't valid.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The provided fields aren't valid.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Invokes an action.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.invoke\n  /{tenant}/action/v1beta2/actions/{action_name}/status/{status_id}:\n    get:\n      operationId: getActionStatus\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActionResult'\n          description: The status was returned successfully.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The resource wasn't found.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Returns the status of an action that was invoked. The status is available\n        for 4 days after the last status change.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/ActionName'\n    - $ref: '#/components/parameters/StatusID'\n  /{tenant}/action/v1beta2/actions/{action_name}/status/{status_id}/details:\n    get:\n      operationId: getActionStatusDetails\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ActionResultEmailDetail'\n                type: array\n          description: The status was returned successfully.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The user isn't authenticated.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The operation isn't authorized.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: The resource wasn't found.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Returns the status details of the invoked email action. The status\n        is available for 4 days after the last status change.\n      tags:\n      - Actions\n      x-authz-scope: action.actions.read\n    parameters:\n    - $ref: '#/components/parameters/AuthorizationHeaderParam'\n    - $ref: '#/components/parameters/Tenant'\n    - $ref: '#/components/parameters/ActionName'\n    - $ref: '#/components/parameters/StatusID'\n  /system/action/v1beta2/webhook/keys:\n    get:\n      operationId: getPublicWebhookKeys\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/PublicWebhookKey'\n                type: array\n          description: The public webhook keys were returned successfully.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n          description: An error occurred.\n      summary: Returns an array of one or two webhook keys. The first key is active.\n        The second key, if present, is expired.\n      tags:\n      - Webhook Keys\n      x-auth-required: false\n\n# Retrieved from scp-openapi commit 820564ba8a17697d087ff171b14cbad60a716ee3 path: action/v1beta2/openapi.yaml",
			"canonicalURL": "/github.com/splunk/splunk-cloud-sdk-python@d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/-/blob/splunk_sdk/action/v1beta2/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/splunk/splunk-cloud-sdk-python/blob/d8b72e17c2fcefd7e82716dfb61f9eb60799a74f/splunk_sdk/action/v1beta2/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}