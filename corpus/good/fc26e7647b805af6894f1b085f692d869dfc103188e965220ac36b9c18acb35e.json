{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/orlangure/gnomock"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger/swagger.yaml",
			"byteSize": 34747,
			"content": "openapi: 3.0.0\ninfo:\n  title: gnomock\n  description: \u003e\n    `gnomock` is an HTTP wrapper for\n    [Gnomock](https://github.com/orlangure/gnomock) integration and end-to-end\n    testing toolkit. It allows to use Gnomock outside of Go ecosystem. Not all\n    Gnomock features exist in this wrapper, but official presets, as well as\n    basic general configuration, are supported.\n  version: 1.20.0\n  contact:\n    url: https://github.com/orlangure/gnomock/\n  license:\n    name: MIT\n    url: https://github.com/orlangure/gnomock/blob/master/LICENSE\n\npaths:\n  /start/localstack:\n    post:\n      summary: Start a new Gnomock Localstack container\n      operationId: startLocalstack\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/localstack-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/mongo:\n    post:\n      summary: Start a new Gnomock MongoDB container\n      operationId: startMongo\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mongo-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/mssql:\n    post:\n      summary: Start a new Gnomock Microsoft SQL Server container\n      operationId: startMssql\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mssql-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/mysql:\n    post:\n      summary: Start a new Gnomock MySQL container\n      operationId: startMysql\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mysql-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/mariadb:\n    post:\n      summary: Start a new Gnomock MariaDB container\n      operationId: startMariadb\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mariadb-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/postgres:\n    post:\n      summary: Start a new Gnomock Postgres container\n      operationId: startPostgres\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/postgres-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/redis:\n    post:\n      summary: Start a new Gnomock Redis container\n      operationId: startRedis\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/redis-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/memcached:\n    post:\n      summary: Start a new Gnomock Memcached container\n      operationId: startMemcached\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/memcached-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/splunk:\n    post:\n      summary: Start a new Gnomock Splunk container\n      operationId: startSplunk\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/splunk-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/rabbitmq:\n    post:\n      summary: Start a new Gnomock RabbitMQ container\n      operationId: startRabbitMq\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rabbitmq-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/kafka:\n    post:\n      summary: Start a new Gnomock Kafka container\n      operationId: startKafka\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/kafka-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/elastic:\n    post:\n      summary: Start a new Gnomock Elasticsearch container\n      operationId: startElastic\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/elastic-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n  /start/kubernetes:\n    post:\n      summary: \u003e\n        Start a new Gnomock lightweight kubernetes (k3s) preset. Use\n        `host:\u003ckubeconfig-port\u003e/kubeconfig` to retrieve the kubeconfig file\n        that should be used to connect to this container.\n      operationId: startKubernetes\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/kubernetes-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/cockroachdb:\n    post:\n      summary: Start a new Gnomock CockroachDB preset.\n      operationId: startCockroachDB\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/cockroachdb-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/influxdb:\n    post:\n      summary: Start a new Gnomock InfluxDB preset.\n      operationId: startInfluxDB\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/influxdb-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n  /start/cassandra:\n    post:\n      summary: Start a new Gnomock Cassandra preset.\n      operationId: startCassandra\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/cassandra-request'\n      responses:\n        '200':\n          $ref: '#/components/responses/container-created'\n        '400':\n          $ref: '#/components/responses/invalid-configuration'\n        '500':\n          $ref: '#/components/responses/start-failed'\n      tags:\n        - presets\n\n### /start/preset\n\n  /stop:\n    post:\n      summary: Stop an existing Gnomock container\n      operationId: stop\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/stop-request'\n      responses:\n        '200':\n          description: Container stopped successfully\n        '400':\n          description: Invalid stop request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/invalid-stop-request'\n        '500':\n          description: Stop failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/stop-failed'\n      tags:\n        - presets\n\ncomponents:\n  schemas:\n    container:\n      type: object\n      properties:\n        id:\n          description: Container ID\n          type: string\n          example: f5d08dc84421\n        host:\n          description: Host of bound ports\n          type: string\n          default: localhost\n        ports:\n          $ref: '#/components/schemas/named-ports'\n      description: \u003e\n        This object is a Gnomock wrapper of a regular docker container. It uses\n        the same container ID as docker, and adds bound ports information.\n\n    named-ports:\n      type: object\n      example:\n        api:\n          protocol: tcp\n          port: 35973\n      additionalProperties:\n        type: object\n        properties:\n          protocol:\n            description: Protocol of bound port\n            type: string\n            example: tcp\n          port:\n            description: Port number on host machine\n            type: integer\n            example: 35973\n      description: \u003e\n        A map of port bindings of a Gnomock container. Human readable names are\n        used to make the values readable. `port` value is an actual port\n        exposed on the host; use this port to connect to the container.\n\n    invalid-start-request:\n      type: object\n      properties:\n        error:\n          type: string\n      description: \u003e\n        This error usually means that the request schema was invalid, or there\n        were missing/incorrect/unsupported values.\n\n    start-failed:\n      type: object\n      properties:\n        error:\n          type: string\n      description: \u003e\n        This error means that Gnomock attempted to start a new container, but\n        failed somewhere during the process. It is possible that image took too\n        long to download, or there was an issue with container configuration.\n\n    stop-failed:\n      type: object\n      properties:\n        error:\n          type: string\n      description: \u003e\n        This error means that Gnomock couldn't stop the requested container. It\n        is possible that the ID is incorrect, or that there is something wrong\n        with docker daemon.\n\n    invalid-stop-request:\n      type: object\n      properties:\n        error:\n          type: string\n      description: \u003e\n        This error means that the provided `/stop` request was invalid.\n\n    options:\n      type: object\n      properties:\n        timeout:\n          type: integer\n          format: int64\n          description: Wait timeout in nanoseconds\n          default: 300000000000\n          example: 60000000000\n        env:\n          type: array\n          description: Array of environment variables to set in the container\n          items:\n            type: string\n            example: ENV_VAR_NAME=some-value\n        debug:\n          type: boolean\n          description: Set to true to see logs inside the Gnomock container\n          default: false\n        container_name:\n          type: string\n          description: \u003e\n            Use a specific container name instead of a random one. In case a\n            container with this name already exists, it is killed and replaced\n            by a new container.\n          example: gnomock\n        privileged:\n          type: boolean\n          description: Runs a container in privileged mode.\n        cmd:\n          type: array\n          description: Command and its arguments to execute on container startup.\n          items:\n            type: string\n        disable_cleanup:\n          type: boolean\n          description: Disables auto removal of this container after tests.\n        use_local_images_first:\n          type: boolean\n          description: If possible to avoid hitting the Docker Hub pull rate limit.\n        custom_named_ports:\n          $ref: '#/components/schemas/named-ports'\n        auth:\n          type: string\n          description: \u003e\n            base64 encoded JSON string with docker access credentials. JSON\n            string should include two fields, username and password. For Docker\n            Hub, if 2FA authentication is enabled, an access token should be\n            used instead of a password.\n          example: eyJ1c2VybmFtZSI6ImZvbyIsInBhc3N3b3JkIjoiYmFyIn0K\n      description: \u003e\n        This object includes general Gnomock configuration, similar to all\n        presets. Timeout configuration is especially useful for\n        troubleshooting.\n\n    localstack-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/localstack'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Localstack and general configuration.\n\n    localstack:\n      type: object\n      properties:\n        services:\n          type: array\n          description: A list of localstack services to start\n          example:\n            - s3\n            - ses\n          items:\n            type: string\n            example: s3\n            enum:\n              - apigateway\n              - cloudformation\n              - cloudwatch\n              - logs\n              - events\n              - dynamodb\n              - dynamodbstreams\n              - ec2\n              - es\n              - firehose\n              - iam\n              - kinesis\n              - kms\n              - lambda\n              - redshift\n              - route53\n              - s3\n              - secretsmanager\n              - ses\n              - sns\n              - sqs\n              - ssm\n              - sts\n              - stepfunctions\n        s3_path:\n          type: string\n          description: \u003e\n            Path to folder to setup initial S3 state. Top level folders are\n            used as buckets; all child folders and files are uploaded as-is\n          example: /home/gnomock/project/testdata/s3\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      required:\n        - services\n      example:\n        services:\n          - s3\n      description: \u003e\n        This object describes Localstack container.\n\n    mongo-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/mongo'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes MongoDB and general configuration.\n\n    mongo:\n      type: object\n      properties:\n        data_path:\n          description: \u003e\n            Path to folder to setup initial container state. Each top level\n            folder maps to a database, every separate file under it is a\n            collection, and every line is a document in that collection.\n          type: string\n          example: /home/gnomock/project/testdata/mongo/data\n        user:\n          type: string\n          description: Username to create inside the container.\n          example: gnomock\n        password:\n          type: string\n          description: Password to set for the created user.\n          example: p@s$w0rD\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes MongoDB container.\n\n    mssql-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/mssql'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Microsoft SQL Server and general configuration.\n\n    mssql:\n      type: object\n      properties:\n        db:\n          type: string\n          description: Database name to create.\n          example: mydb\n          default: mydb\n        password:\n          type: string\n          description: Superuser password.\n          example: p@s$w0rD\n          default: Gn0m!ck~\n        queries:\n          type: array\n          description: \u003e\n            A list of queries to execute while setting up the container.\n          items:\n            type: string\n          example:\n            - create table foo(bar int)\n            - insert into foo(bar) values(1)\n        queries_files:\n          type: array\n          items:\n            type: string\n          description: SQL files to execute while setting up container state.\n          example:\n            - /home/gnomock/project/testdata/mssql/queries.sql\n        license:\n          type: boolean\n          description: Accept or decline Microsoft SQL Server license.\n          example: true\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      required:\n        - license\n      description: \u003e\n        This object describes Microsoft SQL Server container.\n\n    mysql-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/mysql'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes MySQL and general configuration.\n\n    mysql:\n      type: object\n      properties:\n        db:\n          type: string\n          description: Database name to create.\n          example: mydb\n          default: mydb\n        user:\n          type: string\n          description: User to create in the container.\n          example: gnomock\n          default: gnomock\n        password:\n          type: string\n          description: New user's password.\n          example: p@s$w0rD\n          default: gnomick\n        queries:\n          type: array\n          description: \u003e\n            A list of queries to execute while setting up the container.\n          items:\n            type: string\n          example:\n            - create table foo(bar int)\n            - insert into foo(bar) values(1)\n        queries_files:\n          type: array\n          items:\n            type: string\n          description: SQL files to execute while setting up container state.\n          example:\n            - /home/gnomock/project/testdata/mysql/queries.sql\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes MySQL container.\n\n    mariadb-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/mariadb'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes MariaDB and general configuration.\n\n    mariadb:\n      type: object\n      properties:\n        db:\n          type: string\n          description: Database name to create.\n          example: mydb\n          default: mydb\n        user:\n          type: string\n          description: User to create in the container.\n          example: gnomock\n          default: gnomock\n        password:\n          type: string\n          description: New user's password.\n          example: p@s$w0rD\n          default: gnoria\n        queries:\n          type: array\n          description: \u003e\n            A list of queries to execute while setting up the container.\n          items:\n            type: string\n          example:\n            - create table foo(bar int)\n            - insert into foo(bar) values(1)\n        queries_files:\n          type: array\n          items:\n            type: string\n          description: SQL files to execute while setting up container state.\n          example:\n            - /home/gnomock/project/testdata/mysql/queries.sql\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes MariaDB container.\n\n    postgres-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/postgres'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Postgres and general configuration.\n\n    postgres:\n      type: object\n      properties:\n        db:\n          type: string\n          description: Database name to create. By default, `postgres` is used.\n          example: mydb\n        user:\n          type: string\n          description: \u003e\n            User to create in the container. By default, `postgres` is used\n            with password `password`.\n          example: gnomock\n        password:\n          type: string\n          description: New user's password.\n          example: p@s$w0rD\n        queries:\n          type: array\n          description: \u003e\n            A list of queries to execute while setting up the container.\n          items:\n            type: string\n          example:\n            - create table foo(bar int)\n            - insert into foo(bar) values(1)\n        queries_files:\n          type: array\n          items:\n            type: string\n          description: SQL files to execute while setting up container state.\n          example:\n            - /home/gnomock/project/testdata/postgres/queries.sql\n        timezone:\n          type: string\n          description: The timezone in the container.\n          example: Europe/Paris\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes Postgres container.\n\n    redis-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/redis'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Redis and general configuration.\n\n    redis:\n      type: object\n      properties:\n        values:\n          type: object\n          description: A list of key/value pairs to create in the container.\n          example:\n            foo: bar\n            baz: 42\n            meh: 3.14\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes Redis container.\n\n    memcached-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/memcached'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Memcached and general configuration.\n\n    memcached:\n      type: object\n      properties:\n        values:\n          type: object\n          description: A list of key/value pairs to create in the container.\n          example:\n            computer: hal9000\n        byteValues:\n          type: object\n          description: A list of key/value pairs to create in the container. Values are base64 strings.\n          example:\n            foo: YmFy\n            baz: NDI=\n            meh: My4xNA==\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes Memcached container.\n\n    splunk-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/splunk'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Splunk and general configuration.\n\n    splunk:\n      type: object\n      properties:\n        values:\n          type: array\n          description: A list of events to ingest into the container.\n          items:\n            type: object\n            properties:\n              event:\n                type: string\n                example: something happened\n              index:\n                type: string\n                example: main\n              source:\n                type: string\n                example: web\n              sourcetype:\n                type: string\n                example: http\n              time:\n                type: number\n                format: double\n                description: timestamp in seconds (or milli-, micro- or nanoseconds)\n                example: 1588269752\n            required:\n              - event\n              - index\n              - source\n              - sourcetype\n              - time\n        values_file:\n          type: string\n          description: \u003e\n            File name with events to ingest into Splunk. Use JSON Lines format\n            (every event is a separate JSON object), each new event starts from\n            a new line.\n          example: /home/gnomock/project/testdata/splunk/events.jsonl\n        accept_license:\n          type: boolean\n          description: Accept or decline Splunk license.\n          example: true\n        admin_password:\n          type: string\n          description: Set a password for `admin` user.\n          example: p@s$w0rD\n        version:\n          type: string\n          description: Splunk version.\n          default: latest\n          example: 8.0.2.1\n      required:\n        - accept_license\n        - admin_password\n      description: \u003e\n        This object describes Splunk container.\n\n    rabbitmq-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/rabbitmq'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes RabbitMQ and general configuration.\n\n    rabbitmq:\n      type: object\n      properties:\n        user:\n          type: string\n          description: Set a user name\n          example: gnomock\n          default: guest\n        password:\n          type: string\n          description: Set a password for a created user\n          example: p@s$w0rD\n          default: guest\n        version:\n          type: string\n          description: RabbitMQ version.\n          default: 3.8.5-alpine\n          example: latest\n        messages:\n          type: array\n          description: A list of messages to send to RabbitMQ\n          items:\n            $ref: '#/components/schemas/rabbitmqMessage'\n        messages_files:\n          type: array\n          items:\n            type: string\n      description: \u003e\n        This object describes a RabbitMQ container.\n\n    rabbitmqMessage:\n      type: object\n      properties:\n        queue:\n          type: string\n          example: alerts\n        content_type:\n          type: string\n          example: text/plain\n        string_body:\n          type: string\n          example: high cpu\n        body:\n          type: string\n          format: byte\n\n    kafka-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/kafka'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Kafka and general configuration.\n\n    kafka:\n      type: object\n      properties:\n        messages:\n          type: array\n          description: A list of messages to send to Kafka.\n          items:\n            type: object\n            properties:\n              topic:\n                type: string\n                example: alerts\n              key:\n                type: string\n                example: cpu\n              value:\n                type: string\n                example: \"high\"\n              time:\n                type: number\n                format: double\n                description: timestamp in seconds\n                example: 1588269752\n            required:\n              - topic\n              - key\n              - value\n        messages_files:\n          type: array\n          items:\n            type: string\n        topics:\n          type: array\n          items:\n            type: string\n          description: Topic names to create in Kafka.\n          example:\n            - alerts\n            - events\n        version:\n          type: string\n          description: Kafka version.\n          default: 2.5.1-L0\n          example: latest\n      description: \u003e\n        This object describes a Kafka container.\n\n    elastic-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/elastic'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Elasticsearch and general configuration.\n\n    elastic:\n      type: object\n      properties:\n        input_files:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            A list of files to ingest into Elasticsearch. File names are used\n            as index names. Contents of the files need to be JSON objects\n            placed one after the other.\n        version:\n          type: string\n          description: Elasticsearch version.\n          default: 7.9.2\n          example: latest\n      description: \u003e\n        This object describes a Elasticsearch container.\n\n    kubernetes-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/kubernetes'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes k3s and general configuration.\n\n    kubernetes:\n      type: object\n      properties:\n        version:\n          type: string\n          description: \u003e\n            k3s version (see\n            https://hub.docker.com/repository/docker/orlangure/k3s)\n          default: latest\n          example: latest\n      description: \u003e\n        This object describes a k3s container.\n\n    cockroachdb-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/cockroachdb'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes CockroachDB and general configuration.\n\n    cockroachdb:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes CockroachDB container.\n\n    influxdb-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/influxdb'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes InfluxDB and general configuration.\n\n    influxdb:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n        username:\n          type: string\n          description: Super-user name\n          default: gnomock\n        password:\n          type: string\n          description: Super-user password\n          default: gnomock-password\n        org:\n          type: string\n          description: Organization name\n          default: gnomock-org\n        bucket:\n          type: string\n          description: Default bucket name\n          default: gnomock-bucket\n        auth_token:\n          type: string\n          description: Database authentication token\n          default: gnomock-influxdb-token\n      description: \u003e\n        This object describes InfluxDB container.\n\n    cassandra-request:\n      type: object\n      properties:\n        preset:\n          $ref: '#/components/schemas/cassandra'\n        options:\n          $ref: '#/components/schemas/options'\n      description: \u003e\n        This request includes Cassandra and general configuration.\n\n    cassandra:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Docker image tag (version)\n          default: latest\n      description: \u003e\n        This object describes Cassandra container.\n\n### preset-request\n\n    stop-request:\n      type: object\n      properties:\n        id:\n          type: string\n          example: f5d08dc84421\n      description: \u003e\n        Stop request asks Gnomock to stop a container.\n\n  responses:\n    container-created:\n      description: Container created successfully\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/container'\n    invalid-configuration:\n      description: Invalid container configuration\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/invalid-start-request'\n    start-failed:\n      description: Start failed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/start-failed'\ntags:\n  - name: presets\n    description: \u003e\n      `/start` endpoints allow to create temporary docker containers using the\n      provided configuration. Each preset has its own configuration schema.\nservers:\n  - url: http://127.0.0.1:{port}/\n    description: \u003e\n      `gnomock` runs locally in an environment with a configured docker\n      daemon.\n    variables:\n      port:\n        default: \"23042\"\n",
			"canonicalURL": "/github.com/orlangure/gnomock@8b2ac4d7381c2422f9e22ae3ce2a1b347367f04a/-/blob/swagger/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/orlangure/gnomock/blob/8b2ac4d7381c2422f9e22ae3ce2a1b347367f04a/swagger/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}