{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/api.video/1/openapi.yaml",
			"byteSize": 185058,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://ws.api.video\ninfo:\n  description: api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.\n  title: api.video\n  version: \"1\"\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://www.datocms-assets.com/26885/1588249863-favicon.png?w=57\u0026h=57\n  x-origin:\n    - format: openapi\n      url: https://docs.api.video/openapi/5f0d4679158b8d006ea6f068\n      version: \"3.0\"\n  x-providerName: api.video\npaths:\n  /account:\n    get:\n      deprecated: true\n      description: Deprecated. Authenticate and get a token, then you can use the bearer token here to retrieve details about your account.\n      operationId: GET_account\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    environment: production\n                    features:\n                      - app.dynamic_metadata\n                      - app.event_log\n                      - player.white_label\n                      - stats.player_events\n                      - transcode.mp4_support\n                    quota:\n                      quotaRemaining: 54\n                      quotaTotal: 60\n                      quotaUsed: 6\n              schema:\n                $ref: \"#/components/schemas/account\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: \"\"\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show account\n      tags:\n        - Account\n      x-client-action: get\n  \"/analytics/live-streams/{liveStreamId}\":\n    get:\n      operationId: GET_analytics-live-streams-liveStreamId\n      parameters:\n        - description: The unique identifier for the live stream you want to retrieve analytics for.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: |\n            Period must have one of the following formats: \n            - For a day : \"2018-01-01\",\n            - For a week: \"2018-W01\", \n            - For a month: \"2018-01\"\n            - For a year: \"2018\"\n            For a range period: \n            -  Date range: \"2018-01-01/2018-01-15\"\n          example: 2019-01-01\n          explode: true\n          in: query\n          name: period\n          required: false\n          schema:\n            format: period\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - client:\n                          name: Firefox\n                          type: browser\n                          version: \"61.0\"\n                        device:\n                          model: unknown\n                          type: desktop\n                          vendor: unknown\n                        location:\n                          city: Paris\n                          country: France\n                        os:\n                          name: unknown\n                          shortname: unknown\n                          version: unknown\n                        referrer:\n                          medium: unknown\n                          searchTerm: unknown\n                          source: unknown\n                          url: unknown\n                        session:\n                          endedAt: 2018-09-11T14:47:22.186+00\n                          loadedAt: 2018-09-11T13:04:37.89+00\n                          sessionId: ps4zRWVOv2If2vzKJLMr3jQo\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 1\n                      itemsTotal: 1\n                      links:\n                        - rel: self\n                          uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/raw-statistics-list-live-stream-analytics-response\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: liveStreamId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: List live stream player sessions\n      tags:\n        - Analytics\n      x-client-action: getLiveStreamAnalytics\n      x-client-paginated: true\n      x-group-parameters: true\n  \"/analytics/sessions/{sessionId}/events\":\n    get:\n      description: Useful to track and measure video's engagement.\n      operationId: GET_analytics-sessions-sessionId-events\n      parameters:\n        - description: A unique identifier you can use to reference and track a session with.\n          example: psEmFwGQUAXR2lFHj5nDOpy\n          explode: false\n          in: path\n          name: sessionId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - at: 0\n                        emittedAt: 2020-09-15T09:47:42+00:00\n                        type: ready\n                      - at: 0\n                        emittedAt: 2020-09-15T21:35:57+00:00\n                        type: play\n                      - at: 7\n                        emittedAt: 2020-09-15T21:36:05+00:00\n                        type: pause\n                      - at: 21\n                        emittedAt: 2020-09-15T21:36:19+00:00\n                        type: resume\n                      - emittedAt: 2020-09-15T21:36:19+00:00\n                        from: 7\n                        to: 21\n                        type: seek.forward\n                      - at: 30\n                        emittedAt: 2020-09-15T21:36:28+00:00\n                        type: end\n                      - at: 0\n                        emittedAt: 2020-09-15T21:36:29+00:00\n                        type: play\n                      - emittedAt: 2020-09-15T21:36:29+00:00\n                        from: 30\n                        to: 0\n                        type: seek.backward\n                      - at: 21\n                        emittedAt: 2020-09-15T21:36:29+00:00\n                        type: pause\n                      - at: 21\n                        emittedAt: 2020-09-15T21:36:30+00:00\n                        type: resume\n                      - emittedAt: 2020-09-15T21:36:30+00:00\n                        from: 0\n                        to: 21\n                        type: seek.forward\n                      - at: 20\n                        emittedAt: 2020-09-15T21:36:33+00:00\n                        type: pause\n                      - at: 20\n                        emittedAt: 2020-09-15T21:36:33+00:00\n                        type: resume\n                      - emittedAt: 2020-09-15T21:36:33+00:00\n                        from: 24\n                        to: 20\n                        type: seek.backward\n                      - at: 17\n                        emittedAt: 2020-09-15T21:36:39+00:00\n                        type: pause\n                      - at: 17\n                        emittedAt: 2020-09-15T21:36:39+00:00\n                        type: resume\n                      - emittedAt: 2020-09-15T21:36:39+00:00\n                        from: 17\n                        to: 17\n                        type: seek.forward\n                      - at: 19\n                        emittedAt: 2020-09-15T21:36:41+00:00\n                        type: pause\n                      - at: 0\n                        emittedAt: 2020-09-17T09:20:47+00:00\n                        type: ready\n                      - at: 0\n                        emittedAt: 2020-09-17T09:41:01+00:00\n                        type: ready\n                      - at: 0\n                        emittedAt: 2020-09-17T09:41:08+00:00\n                        type: ready\n                      - at: 0\n                        emittedAt: 2020-09-17T09:41:10+00:00\n                        type: play\n                      - at: 1\n                        emittedAt: 2020-09-17T09:41:12+00:00\n                        type: pause\n                      - at: 1\n                        emittedAt: 2020-09-17T09:41:13+00:00\n                        type: resume\n                      - at: 3\n                        emittedAt: 2020-09-17T09:41:15+00:00\n                        type: pause\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 25\n                      itemsTotal: 30\n                      links:\n                        - rel: self\n                          uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1\u0026pageSize=25\n                        - rel: next\n                          uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2\u0026pageSize=25\n                        - rel: last\n                          uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 2\n              schema:\n                $ref: \"#/components/schemas/raw-statistics-list-player-session-events-response\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: List player session events\n      tags:\n        - Analytics\n      x-client-action: listPlayerSessionEvents\n      x-client-paginated: true\n      x-group-parameters: true\n  \"/analytics/videos/{videoId}\":\n    get:\n      description: Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).\n      operationId: GET_analytics-videos-videoId\n      parameters:\n        - description: The unique identifier for the video you want to retrieve session information for.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: |\n            Period must have one of the following formats: \n            - For a day : 2018-01-01,\n            - For a week: 2018-W01, \n            - For a month: 2018-01\n            - For a year: 2018\n            For a range period: \n            -  Date range: 2018-01-01/2018-01-15\n          explode: true\n          in: query\n          name: period\n          required: false\n          schema:\n            format: period\n            type: string\n          style: form\n        - description: Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with.\n          example: '[{\"key\": \"Author\", \"value\": \"John Doe\"}, {\"key\": \"Format\", \"value\": \"Tutorial\"}]'\n          explode: true\n          in: query\n          name: metadata\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - client:\n                          name: Firefox\n                          type: browser\n                          version: \"67.0\"\n                        device:\n                          model: unknown\n                          type: desktop\n                          vendor: Dell\n                        location:\n                          city: Paris\n                          country: France\n                        os:\n                          name: Microsoft Windows\n                          shortname: W10\n                          version: Windows10\n                        referrer:\n                          medium: organic\n                          searchTerm: video encoding hosting and delivery\n                          source: https://google.com\n                          url: https://api.video\n                        session:\n                          endedAt: 2019-06-24T11:49:19.243+00\n                          loadedAt: 2019-06-24T11:45:01.109+00\n                          sessionId: psEmFwGQUAXR2lFHj5nDOpy\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 1\n                      itemsTotal: 1\n                      links:\n                        - rel: self\n                          uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/raw-statistics-list-sessions-response\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: List video player sessions\n      tags:\n        - Analytics\n      x-client-action: listSessions\n      x-client-paginated: true\n      x-group-parameters: true\n  /auth/api-key:\n    post:\n      description: |-\n        To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.\n        All tutorials using the [authentication endpoint](https://api.video/blog/endpoints/authenticate)\n      operationId: POST_auth-api-key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/authenticate-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    expires_in: 3600\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n                    token_type: Bearer\n              schema:\n                $ref: \"#/components/schemas/access-token\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: \"\"\n                    status: 400\n                    title: The user credentials were incorrect.\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      summary: Authenticate\n      tags:\n        - Authentication\n      x-client-action: authenticate\n      x-client-hidden: true\n  /auth/refresh:\n    post:\n      description: |\n        Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token. \n      operationId: POST_auth-refresh\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/refresh-token-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    expires_in: 3600\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n                    token_type: Bearer\n              schema:\n                $ref: \"#/components/schemas/access-token\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: \"\"\n                    status: 400\n                    title: The user credentials were incorrect.\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      summary: Refresh token\n      tags:\n        - Authentication\n      x-client-action: refresh\n      x-client-hidden: true\n  /live-streams:\n    get:\n      description: With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.\n      operationId: GET_live-streams\n      parameters:\n        - description: The unique stream key that allows you to stream videos.\n          example: 30087931-229e-42cf-b5f9-e91bcc1f7332\n          explode: true\n          in: query\n          name: streamKey\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: You can filter live streams by their name or a part of their name.\n          example: My Video\n          explode: true\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: \"Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.\"\n          example: createdAt\n          explode: true\n          in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: \"Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.\"\n          example: desc\n          explode: true\n          in: query\n          name: sortOrder\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - assets:\n                          hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                          iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                          player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                          thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n                        broadcasting: false\n                        createdAt: 2020-01-31T10:17:47+00:00\n                        liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                        name: Live Stream From the browser\n                        public: true\n                        record: true\n                        streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                        updatedAt: 2020-03-09T13:19:43+00:00\n                      - assets:\n                          hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n                          iframe: \u003ciframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                          player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\n                          thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg\n                        broadcasting: false\n                        createdAt: 2020-07-29T10:45:35+00:00\n                        liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5\n                        name: Live From New York\n                        public: true\n                        record: true\n                        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n                        updatedAt: 2020-07-29T10:45:35+00:00\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 19\n                      itemsTotal: 19\n                      links:\n                        - rel: self\n                          uri: /live-streams?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /live-streams?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /live-streams?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/live-stream-list-response\"\n          description: Success\n      security:\n        - bearerAuth: []\n      summary: List all live streams\n      tags:\n        - Live\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n    post:\n      description: |-\n        A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}\n        Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).\n      operationId: POST_live-streams\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/live-stream-create-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\n                      thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg\n                    broadcasting: false\n                    createdAt: 2020-07-29T10:45:35+00:00\n                    liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5\n                    name: Live From New York\n                    public: true\n                    record: true\n                    streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n                    updatedAt: 2020-07-29T10:45:35+00:00\n              schema:\n                $ref: \"#/components/schemas/live-stream\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: Create live stream\n      tags:\n        - Live\n      x-client-action: create\n  \"/live-streams/{liveStreamId}\":\n    delete:\n      operationId: DELETE_live-streams-liveStreamId\n      parameters:\n        - description: The unique ID for the live stream that you want to remove.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n      security:\n        - bearerAuth: []\n      summary: Delete a live stream\n      tags:\n        - Live\n      x-client-action: delete\n    get:\n      description: Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status).\n      operationId: GET_live-streams-liveStreamId\n      parameters:\n        - description: The unique ID for the live stream you want to watch.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                      thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n                    broadcasting: false\n                    createdAt: 2020-01-31T10:17:47+00:00\n                    liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                    name: Live Stream From the browser\n                    public: true\n                    record: true\n                    streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                    updatedAt: 2020-03-09T13:19:43+00:00\n              schema:\n                $ref: \"#/components/schemas/live-stream\"\n          description: Success\n      security:\n        - bearerAuth: []\n      summary: Show live stream\n      tags:\n        - Live\n      x-client-action: get\n    patch:\n      description: \"Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.\"\n      operationId: PATCH_live-streams-liveStreamId\n      parameters:\n        - description: The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/live-stream-update-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                      thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n                    broadcasting: false\n                    createdAt: 2020-01-31T10:17:47+00:00\n                    liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                    name: Live Stream From the browser\n                    public: true\n                    record: true\n                    streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                    updatedAt: 2020-03-09T13:19:43+00:00\n              schema:\n                $ref: \"#/components/schemas/live-stream\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: Update a live stream\n      tags:\n        - Live\n      x-client-action: update\n  \"/live-streams/{liveStreamId}/thumbnail\":\n    delete:\n      description: Send the unique identifier for a live stream to delete it from the system.\n      operationId: DELETE_live-streams-liveStreamId-thumbnail\n      parameters:\n        - description: \"The unique identifier for the live stream you want to delete. \"\n          example: li400mYKSgQ6xs7taUeSaEKr\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/live-stream\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: liveStreamId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a thumbnail\n      tags:\n        - Live\n      x-client-action: deleteThumbnail\n    post:\n      description: Upload an image to use as a backdrop for your livestream. Tutorials that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail).\n      operationId: POST_live-streams-liveStreamId-thumbnail\n      parameters:\n        - description: The unique ID for the live stream you want to upload.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: liveStreamId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/live-stream-thumbnail-upload-payload\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/live-stream\"\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: file\n                    status: 400\n                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.\n                    type: https://docs.api.video/docs/fileextension\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: liveStreamId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a thumbnail\n      tags:\n        - Live\n      x-client-action: uploadThumbnail\n  /players:\n    get:\n      description: |-\n        Retrieve a list of all the players you created, as well as details about each one.\n        Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).\n      operationId: GET_players\n      parameters:\n        - description: createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.\n          example: createdAt\n          explode: true\n          in: query\n          name: sortBy\n          required: false\n          schema:\n            enum:\n              - createdAt\n              - updatedAt\n            type: string\n          style: form\n        - description: \"Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.\"\n          example: asc\n          explode: true\n          in: query\n          name: sortOrder\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - backgroundBottom: rgba(94, 95, 89, 1)\n                        backgroundText: rgba(255, 255, 255, .95)\n                        backgroundTop: rgba(72, 4, 45, 1)\n                        createdAt: 2020-01-13T10:09:17+00:00\n                        enableApi: false\n                        enableControls: false\n                        forceAutoplay: false\n                        forceLoop: false\n                        hideTitle: false\n                        link: rgba(255, 0, 0, .95)\n                        linkActive: rgba(255, 0, 0, .75)\n                        linkHover: rgba(255, 255, 255, .75)\n                        playerId: pl4fgtjy4tjyKDK545DRdfg\n                        shapeAspect: flat\n                        shapeBackgroundBottom: rgba(50, 50, 50, .8)\n                        shapeBackgroundTop: rgba(50, 50, 50, .7)\n                        shapeMargin: 10\n                        shapeRadius: 3\n                        text: rgba(255, 255, 255, .95)\n                        trackBackground: rgba(0, 0, 0, 0)\n                        trackPlayed: rgba(255, 255, 255, .95)\n                        trackUnplayed: rgba(255, 255, 255, .1)\n                        updatedAt: 2020-01-13T10:09:17+00:00\n                      - backgroundBottom: rgba(94, 95, 89, 1)\n                        backgroundText: rgba(255, 255, 255, .95)\n                        backgroundTop: rgba(72, 4, 45, 1)\n                        createdAt: 2020-01-13T10:09:17+00:00\n                        enableApi: true\n                        enableControls: true\n                        forceAutoplay: true\n                        forceLoop: false\n                        hideTitle: false\n                        link: rgba(255, 0, 0, .95)\n                        linkActive: rgba(255, 0, 0, .75)\n                        linkHover: rgba(255, 255, 255, .75)\n                        playerId: pl54fgtjy4tjyKDK45DRdfg\n                        shapeAspect: flat\n                        shapeBackgroundBottom: rgba(50, 50, 50, .8)\n                        shapeBackgroundTop: rgba(50, 50, 50, .7)\n                        shapeMargin: 10\n                        shapeRadius: 3\n                        text: rgba(255, 255, 255, .95)\n                        trackBackground: rgba(0, 0, 0, 0)\n                        trackPlayed: rgba(255, 255, 255, .95)\n                        trackUnplayed: rgba(255, 255, 255, .1)\n                        updatedAt: 2020-01-13T10:09:17+00:00\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 4\n                      itemsTotal: 4\n                      links:\n                        - rel: self\n                          uri: https://ws.api.video/players?currentPage=1\n                        - rel: first\n                          uri: https://ws.api.video/players?currentPage=1\n                        - rel: last\n                          uri: https://ws.api.video/players?currentPage=1\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/players-list-response\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: page\n                    problems:\n                      - name: page\n                        range:\n                          min: 1\n                        title: This parameter is out of the allowed range of values.\n                      - name: pageSize\n                        range:\n                          max: 100\n                          min: 10\n                        title: This parameter is out of the allowed range of values.\n                    range:\n                      min: 1\n                    status: 400\n                    title: This parameter is out of the allowed range of values.\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: List all players\n      tags:\n        - Players\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n    post:\n      description: Create a player for your video, and customise it.\n      operationId: POST_players\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/playerCreationPayload\"\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    forceLoop: false\n                    hideTitle: false\n                    link: rgba(255, 0, 0, .95)\n                    linkActive: rgba(255, 0, 0, .75)\n                    linkHover: rgba(255, 255, 255, .75)\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    shapeAspect: flat\n                    shapeBackgroundBottom: rgba(50, 50, 50, .8)\n                    shapeBackgroundTop: rgba(50, 50, 50, .7)\n                    shapeRadius: 3\n                    text: rgba(255, 255, 255, .95)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    updatedAt: 2020-01-13T10:09:17+00:00\n              schema:\n                $ref: \"#/components/schemas/player\"\n          description: Created\n      security:\n        - bearerAuth: []\n      summary: Create a player\n      tags:\n        - Players\n      x-client-action: create\n  \"/players/{playerId}\":\n    delete:\n      description: Delete a player if you no longer need it. You can delete any player that you have the player ID for.\n      operationId: DELETE_players-playerId\n      parameters:\n        - description: The unique identifier for the player you want to delete.\n          example: pl45d5vFFGrfdsdsd156dGhh\n          explode: false\n          in: path\n          name: playerId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: playerId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a player\n      tags:\n        - Players\n      x-client-action: delete\n    get:\n      description: Use a player ID to retrieve details about the player and display it for viewers.\n      operationId: GET_players-playerId\n      parameters:\n        - description: \"The unique identifier for the player you want to retrieve. \"\n          example: pl45d5vFFGrfdsdsd156dGhh\n          explode: false\n          in: path\n          name: playerId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    forceLoop: false\n                    hideTitle: false\n                    link: rgba(255, 0, 0, .95)\n                    linkActive: rgba(255, 0, 0, .75)\n                    linkHover: rgba(255, 255, 255, .75)\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    shapeAspect: flat\n                    shapeBackgroundBottom: rgba(50, 50, 50, .8)\n                    shapeBackgroundTop: rgba(50, 50, 50, .7)\n                    shapeRadius: 3\n                    text: rgba(255, 255, 255, .95)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    updatedAt: 2020-01-13T11:12:14+00:00\n              schema:\n                $ref: \"#/components/schemas/player\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: playerId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show a player\n      tags:\n        - Players\n      x-client-action: get\n    patch:\n      description: \"Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.\"\n      operationId: PATCH_players-playerId\n      parameters:\n        - description: The unique identifier for the player.\n          example: pl45d5vFFGrfdsdsd156dGhh\n          explode: false\n          in: path\n          name: playerId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/playerUpdatePayload\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    forceLoop: false\n                    hideTitle: false\n                    link: rgba(255, 0, 0, .95)\n                    linkActive: rgba(255, 0, 0, .75)\n                    linkHover: rgba(255, 255, 255, .75)\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    shapeAspect: flat\n                    shapeBackgroundBottom: rgba(50, 50, 50, .8)\n                    shapeBackgroundTop: rgba(50, 50, 50, .7)\n                    shapeRadius: 3\n                    text: rgba(255, 255, 255, .95)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    updatedAt: 2020-01-13T11:12:14+00:00\n              schema:\n                $ref: \"#/components/schemas/player\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: playerId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Update a player\n      tags:\n        - Players\n      x-client-action: update\n  \"/players/{playerId}/logo\":\n    delete:\n      operationId: DELETE_players-playerId-logo\n      parameters:\n        - description: The unique identifier for the player.\n          example: pl14Db6oMJRH6SRVoOwORacK\n          explode: false\n          in: path\n          name: playerId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: playerId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete logo\n      tags:\n        - Players\n      x-client-action: deleteLogo\n    post:\n      description: The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.\n      operationId: POST_players-playerId-logo\n      parameters:\n        - description: The unique identifier for the player.\n          example: pl14Db6oMJRH6SRVoOwORacK\n          explode: false\n          in: path\n          name: playerId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/players-upload-logo-payload\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/player\"\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: file\n                    status: 400\n                    title: Only ['jpg', 'JPG', 'jpeg', 'JPEG', 'png', 'PNG'] extensions are supported.\n                    type: https://docs.api.video/docs/fileextension\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: playerId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a logo\n      tags:\n        - Players\n      x-client-action: uploadLogo\n  /upload:\n    post:\n      description: |-\n        When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=\u003ctokenId\u003e`.\n\n        Example with cURL:\n\n        ```curl\n        $ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'\n         --header 'content-type: multipart/form-data'\n         -F file=@video.mp4\n        ```\n\n        Or in an HTML form, with a little JavaScript to convert the form into JSON:\n        ```html\n        \u003c!--form for user interaction--\u003e\n        \u003cform name=\"videoUploadForm\" \u003e\n          \u003clabel for=video\u003eVideo:\u003c/label\u003e\n          \u003cinput type=file name=source/\u003e\u003cbr/\u003e\n          \u003cinput value=\"Submit\" type=\"submit\"\u003e\n        \u003c/form\u003e\n        \u003cdiv\u003e\u003c/div\u003e\n        \u003c!--JS takes the form data \n            uses FormData to turn the response into JSON.\n            then uses POST to upload the video file.\n            Update the token parameter in the url to your upload token.\n            --\u003e\n        \u003cscript\u003e\n           var form = document.forms.namedItem(\"videoUploadForm\");\t\n           form.addEventListener('submit', function(ev) {\n        \t ev.preventDefault();\n             var oOutput = document.querySelector(\"div\"),\n                 oData = new FormData(form);\n             var oReq = new XMLHttpRequest();\n        \t \n             oReq.open(\"POST\", \"https://ws.api.video/upload?token=toXXX\", true);\n             oReq.send(oData);\n        \t oReq.onload = function(oEvent) {\n               if (oReq.status ==201) {\n                 oOutput.innerHTML = \"Your video is uploaded!\u003cbr/\u003e\"  + oReq.response;\n               } else {\n                 oOutput.innerHTML = \"Error \" + oReq.status + \" occurred when trying to upload your file.\u003cbr \\/\u003e\";\n               }\n             };\n           }, false);\t\n        \u003c/script\u003e\n        ```\n\n\n        ### Dealing with large files\n\n        We have created a \u003ca href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'\u003etutorial\u003c/a\u003e to walk through the steps required.\n      operationId: POST_upload\n      parameters:\n        - description: The unique identifier for the token you want to use to upload a video.\n          example: to1tcmSFHeYY5KzyhOqVKMKb\n          explode: true\n          in: query\n          name: token\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.\n          example: \"Content-Range: bytes 200-100/5000\"\n          explode: false\n          in: header\n          name: Content-Range\n          required: false\n          schema:\n            pattern: ^bytes [0-9]*-[0-9]*\\/[0-9]*$\n            type: string\n          style: simple\n          x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/token-upload-payload\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining the string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security: []\n      summary: Upload with an upload token\n      tags:\n        - Videos - Delegated upload\n      x-client-action: upload\n      x-client-chunk-upload: true\n  /upload-tokens:\n    get:\n      description: |-\n        A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.\n        Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).\n      operationId: GET_upload-tokens\n      parameters:\n        - description: \"Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format.\"\n          example: ttl\n          explode: true\n          in: query\n          name: sortBy\n          required: false\n          schema:\n            enum:\n              - createdAt\n              - ttl\n            type: string\n          style: form\n        - description: \"Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A.\"\n          example: asc\n          explode: true\n          in: query\n          name: sortOrder\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - createdAt: 2020-12-02T10:26:46+00:00\n                        expiresAt: 2020-12-02T11:26:46+00:00\n                        token: to37YfoPDRR2pcDKa6LsUE0M\n                        ttl: 3600\n                      - createdAt: 2020-12-02T10:26:28+00:00\n                        expiresAt: null\n                        token: to1W3ZS9PdUBZWzzTEZr1B79\n                        ttl: 0\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      itemsTotal: 2\n                      links:\n                        - rel: self\n                          uri: /upload-tokens?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /upload-tokens?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /upload-tokens?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/token-list-response\"\n          description: Success\n      security:\n        - bearerAuth: []\n      summary: List all active upload tokens.\n      tags:\n        - Videos - Delegated upload\n      x-client-action: listTokens\n      x-client-paginated: true\n      x-group-parameters: true\n    post:\n      description: Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).\n      operationId: POST_upload-tokens\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/token-create-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    createdAt: 2020-12-02T10:13:19+00:00\n                    expiresAt: 2020-12-02T11:13:19+00:00\n                    token: to1tcmSFHeYY5KzyhOqVKMKb\n                    ttl: 3600\n              schema:\n                $ref: \"#/components/schemas/upload-token\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: Generate an upload token\n      tags:\n        - Videos - Delegated upload\n      x-client-action: createToken\n  \"/upload-tokens/{uploadToken}\":\n    delete:\n      description: Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.\n      operationId: DELETE_upload-tokens-uploadToken\n      parameters:\n        - description: The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.\n          example: to1tcmSFHeYY5KzyhOqVKMKb\n          explode: false\n          in: path\n          name: uploadToken\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete an upload token\n      tags:\n        - Videos - Delegated upload\n      x-client-action: deleteToken\n    get:\n      description: You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.\n      operationId: GET_upload-tokens-uploadToken\n      parameters:\n        - description: The unique identifier for the token you want information about.\n          example: to1tcmSFHeYY5KzyhOqVKMKb\n          explode: false\n          in: path\n          name: uploadToken\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    createdAt: 2020-12-02T10:13:19+00:00\n                    expiresAt: null\n                    token: to1tcmSFHeYY5KzyhOqVKMKb\n                    ttl: 0\n              schema:\n                $ref: \"#/components/schemas/upload-token\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show upload token\n      tags:\n        - Videos - Delegated upload\n      x-client-action: getToken\n  /videos:\n    get:\n      description: Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.\n      operationId: LIST-videos\n      parameters:\n        - description: The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.\n          example: My Video.mp4\n          explode: true\n          in: query\n          name: title\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.\n          example: '\"tags\": [\"captions\", \"dialogue\"]'\n          explode: true\n          in: query\n          name: tags\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n          example: '[{\"key\":\"Author\", \"value\":\"John Doe\"}, {\"key\":\"Format\", \"value\":\"Tutorial\"}]'\n          explode: true\n          in: query\n          name: metadata\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: If you described a video with a term or sentence, you can add it here to return videos containing this string.\n          example: New Zealand\n          explode: true\n          in: query\n          name: description\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          explode: true\n          in: query\n          name: liveStreamId\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: \"Allowed: publishedAt, title. You can search by the time videos were published at, or by title.\"\n          example: publishedAt\n          explode: true\n          in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: \"Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.\"\n          example: asc\n          explode: true\n          in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - assets:\n                          hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                          iframe: \u003ciframe src=\"//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                          mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                          player: https://embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                          thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                        description: An amazing video explaining the string theory\n                        metadata:\n                          - key: Author\n                            value: John Doe\n                          - key: Format\n                            value: Tutorial\n                        mp4Support: true\n                        panoramic: false\n                        playerId: pl45KFKdlddgk654dspkze\n                        public: false\n                        publishedAt: 2019-12-16T08:25:51+00:00\n                        source:\n                          uri: /videos/c188ed58-3403-46a2-b91b-44603d10b2c9/source\n                        tags:\n                          - maths\n                          - string theory\n                          - video\n                        title: Maths video\n                        updateddAt: 2019-12-16T08:48:49+00:00\n                        videoId: vi4k0jvEUuaTdRAEjQ4Prklg\n                      - assets:\n                          hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                          iframe: \u003ciframe src=\"//embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                          player: https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                          thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                        description: A description for your video.\n                        metadata:\n                          - key: Author\n                            value: John Doe\n                          - key: Science Fiction\n                            value: Cyberpunk\n                          - key: Technology\n                            value: Computers\n                        mp4Support: true\n                        panoramic: false\n                        public: false\n                        publishedAt: 2019-12-16T08:25:51+00:00\n                        source:\n                          uri: /videos/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f/source\n                        tags:\n                          - books\n                          - short stories\n                        title: Video Title\n                        updateddAt: 2019-12-16T08:48:49+00:00\n                        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n                      - assets:\n                          hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                          iframe: \u003ciframe src=\"//embed.api.video/73129412-e320-4b93-99f6-59a85e3cedcd?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                          player: https://embed.api.video/73129412-e320-4b93-99f6-59a85e3cedcd?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                          thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                        description: A brief description of the video.\n                        metadata:\n                          - key: Length\n                            value: Short\n                        mp4Support: true\n                        panoramic: false\n                        playerId: pl45KFKdlddgk654dspkze\n                        public: false\n                        publishedAt: 2019-12-16T08:25:51+00:00\n                        source:\n                          uri: /videos/73129412-e320-4b93-99f6-59a85e3cedcd/source\n                        tags:\n                          - General\n                          - Videos\n                        title: My Video Title\n                        updateddAt: 2019-12-16T08:48:49+00:00\n                        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 11\n                      itemsTotal: 11\n                      links:\n                        - rel: self\n                          uri: https://ws.api.video/videos?currentPage=1\n                        - rel: first\n                          uri: https://ws.api.video/videos?currentPage=1\n                        - rel: last\n                          uri: https://ws.api.video/videos?currentPage=1\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/videos-list-response\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: page\n                    problems:\n                      - name: page\n                        range:\n                          min: 1\n                        title: This parameter is out of the allowed range of values.\n                      - name: pageSize\n                        range:\n                          max: 100\n                          min: 10\n                        title: This parameter is out of the allowed range of values.\n                    range:\n                      min: 1\n                    status: 400\n                    title: This parameter is out of the allowed range of values.\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: List all videos\n      tags:\n        - Videos\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n    post:\n      description: |\n        To create a video, you create its container\u0026parameters first, before adding the video file (exception - when using an existing HTTP source).\n        * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos)\n        * Up to 6 responsive video streams will be created (from 240p to 4k)\n        * Mp4 encoded versions are created at the highest quality (max 1080p) by default.\n        * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload.\n        * Searchable parameters: title, description, tags and metadata\n\n         ```shell\n        $ curl https://ws.api.video/videos \\ -H 'Authorization: Bearer {access_token} \\ -d '{\"title\":\"My video\", \n             \"description\":\"so many details\",\n             \"mp4Support\":true\n        }'\n        ```  \n\n        ## add an URL to upload on creation\n        You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter:\n        ```shell\n        $ curl https://ws.api.video/videos \\\n        -H 'Authorization: Bearer {access_token} \\\n        -d '{\"source\":\"http://uri/to/video.mp4\", \"title\":\"My video\"}'\n        ```\n\n        In this case, the service will respond `202 Accepted` and ingest the video asynchronously.\n        ## Track users with Dynamic Metadata\n        Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use:\n        ``` \"metadata\":[{\"dynamicKey\": \"__dynamicKey__\"}] ```\n\n        The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have:\n        ``` \u003ciframe type=\"text/html\" src=\"https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug\" width=\"960\" height=\"320\" frameborder=\"0\" scrollling=\"no\"\u003e\u003c/iframe\u003e ```\n\n\n        This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos.\n        ### We have tutorials on:\n        * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)\n        * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)\n\n\n        * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)\n        * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)\n        * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)\n\n        * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.\n      operationId: POST-video\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/video-create-payload\"\n        description: video to create\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining the string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl4k0jvEUuaTdRAEjQ4Jfrgz\n                    public: false\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Created\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: title\n                    problems:\n                      - name: title\n                        title: This attribute is required.\n                        type: https://docs.api.video/docs/attributerequired\n                      - name: scheduledAt\n                        title: This attribute must be a ISO8601 date.\n                        type: https://docs.api.video/docs/attributeinvalid\n                      - name: tags\n                        title: This attribute must be an array.\n                        type: https://docs.api.video/docs/attributeinvalid\n                      - name: metadata\n                        title: This attribute must be an array.\n                        type: https://docs.api.video/docs/attributeinvalid\n                    status: 400\n                    title: This attribute is required.\n                    type: https://docs.api.video/docs/attributerequired\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: Create a video\n      tags:\n        - Videos\n      x-client-action: create\n  \"/videos/{videoId}\":\n    delete:\n      description: If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).\n      operationId: DELETE-video\n      parameters:\n        - description: The video ID for the video you want to delete.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a video\n      tags:\n        - Videos\n      x-client-action: delete\n    get:\n      description: This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).\n      operationId: GET-video\n      parameters:\n        - description: The unique identifier for the video you want details about.\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 2019-12-16T08:25:51+00:00\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    updateddAt: 2019-12-16T08:48:49+00:00\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n                type: object\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show a video\n      tags:\n        - Videos\n      x-client-action: get\n    patch:\n      description: \"Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).\"\n      operationId: PATCH-video\n      parameters:\n        - description: The video ID for the video you want to delete.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/video-update-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining the string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 2019-12-16T08:25:51+00:00\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    updatedAt: 2019-12-16T08:48:49+00:00\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: scheduledAt\n                    problems:\n                      - name: scheduledAt\n                        title: This attribute must be a ISO-8601 date.\n                        type: https://docs.api.video/docs/attributeinvalid\n                      - name: tags\n                        title: This attribute must be an array.\n                        type: https://docs.api.video/docs/attributeinvalid\n                      - name: metadata\n                        title: This attribute must be an array.\n                        type: https://docs.api.video/docs/attributeinvalid\n                    status: 400\n                    title: This attribute must be a ISO-8601 date.\n                    type: https://docs.api.video/docs/attributeinvalid\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Update a video\n      tags:\n        - Videos\n      x-client-action: update\n  \"/videos/{videoId}/captions\":\n    get:\n      description: Retrieve a list of available captions for the videoId you provide.\n      operationId: GET_videos-videoId-captions\n      parameters:\n        - description: The unique identifier for the video you want to retrieve a list of captions for.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - default: false\n                        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                        srclang: en\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n                      - default: false\n                        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/fr.vtt\n                        srclang: fr\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/fr\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      itemsTotal: 2\n                      links:\n                        - rel: self\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/captions-list-response\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: List video captions\n      tags:\n        - Captions\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n  \"/videos/{videoId}/captions/{language}\":\n    delete:\n      description: Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.\n      operationId: DELETE_videos-videoId-captions-language\n      parameters:\n        - description: The unique identifier for the video you want to delete a caption from.\n          example: vi4k0jvEUuaTdRAEjQ4Prklgc\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a caption\n      tags:\n        - Captions\n      x-client-action: delete\n    get:\n      description: |-\n        Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found.\n        Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).\n      operationId: GET_videos-videoId-captions-language\n      parameters:\n        - description: The unique identifier for the video you want captions for.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    default: false\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n              schema:\n                $ref: \"#/components/schemas/subtitle\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show a caption\n      tags:\n        - Captions\n      x-client-action: get\n    patch:\n      description: \"To have the captions on automatically, use this PATCH to set default: true.\"\n      operationId: PATCH_videos-videoId-captions-language\n      parameters:\n        - description: \"The unique identifier for the video you want to have automatic captions for. \"\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/captions-update-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    default: true\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n              schema:\n                $ref: \"#/components/schemas/subtitle\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: string (required)\n                    problems:\n                      - null\n                    status: integer (required)\n                    title: string (required)\n                    type: string (required)\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: irure mollit aute\n                    status: 85925135\n                    title: sunt do fugiat tempor\n                    type: Lorem sit culpa non\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Update caption\n      tags:\n        - Captions\n      x-client-action: update\n    post:\n      description: |-\n        Upload a VTT file to add captions to your video.\n         Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.\n      operationId: POST_videos-videoId-captions-language\n      parameters:\n        - description: The unique identifier for the video you want to add a caption to.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid BCP 47 language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/captions-upload-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    default: false\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n              schema:\n                $ref: \"#/components/schemas/subtitle\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a caption\n      tags:\n        - Captions\n      x-client-action: upload\n  \"/videos/{videoId}/chapters\":\n    get:\n      description: Retrieve a list of all chapters for a specified video.\n      operationId: GET_videos-videoId-chapters\n      parameters:\n        - description: The unique identifier for the video you want to retrieve a list of chapters for.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - language: fr\n                        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n                      - language: en\n                        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/en.vtt\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/en\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      itemsTotal: 2\n                      links:\n                        - rel: self\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n                        - rel: first\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n                        - rel: last\n                          uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/chapters-list-response\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: List video chapters\n      tags:\n        - Chapters\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n  \"/videos/{videoId}/chapters/{language}\":\n    delete:\n      operationId: DELETE_videos-videoId-chapters-language\n      parameters:\n        - description: \"The unique identifier for the video you want to delete a chapter from. \"\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a chapter\n      tags:\n        - Chapters\n      x-client-action: delete\n    get:\n      description: Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).\n      operationId: GET_videos-videoId-chapters-language\n      parameters:\n        - description: The unique identifier for the video you want to show a chapter for.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    language: fr\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n              schema:\n                $ref: \"#/components/schemas/chapter\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show a chapter\n      tags:\n        - Chapters\n      x-client-action: get\n    post:\n      description: Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.\n      operationId: POST_videos-videoId-chapters-language\n      parameters:\n        - description: The unique identifier for the video you want to upload a chapter for.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n          example: en\n          explode: false\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/chapters-update-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    language: fr\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n              schema:\n                $ref: \"#/components/schemas/chapter\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a chapter\n      tags:\n        - Chapters\n      x-client-action: upload\n  \"/videos/{videoId}/source\":\n    post:\n      description: |-\n        To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.\n        ```bash\n        curl https://ws.api.video/videos/{videoId}/source \\\n          -H 'Authorization: Bearer {access_token}' \\\n          -F file=@/path/to/video.mp4\n\n          ```\n        Tutorials using [video upload](https://api.video/blog/endpoints/video-upload).\n      operationId: POST_videos-videoId-source\n      parameters:\n        - description: Enter the videoId you want to use to upload your video.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.\n          example: \"Content-Range: bytes 200-100/5000\"\n          explode: false\n          in: header\n          name: Content-Range\n          required: false\n          schema:\n            pattern: ^bytes [0-9]*-[0-9]*\\/[0-9]*$\n            type: string\n          style: simple\n          x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/video-upload-payload\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining the string theory.\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n                type: object\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: file\n                    problems:\n                      - name: file\n                        title: The source of the video is already uploaded.\n                        type: https://docs.api.video/docs/filealreadyuploaded\n                      - name: video\n                        title: The video xxxx has already been uploaded.\n                        type: https://docs.api.video/docs/filealreadyuploaded\n                      - name: file\n                        title: There is no uploaded file in the request.\n                        type: https://docs.api.video/docs/filemissing\n                      - name: file\n                        title: There is more than one uploaded file in the request.\n                        type: https://docs.api.video/docs/multiplefilesuploaded\n                    status: 400\n                    title: The source of the video is already uploaded.\n                    type: https://docs.api.video/docs/filealreadyuploaded\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a video\n      tags:\n        - Videos\n      x-client-action: upload\n      x-client-chunk-upload: true\n  \"/videos/{videoId}/status\":\n    get:\n      description: This API provides upload status \u0026 encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).\n      operationId: GET-video-status\n      parameters:\n        - description: The unique identifier for the video you want the status for.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    encoding:\n                      metadata:\n                        aspectRatio: 16/9\n                        audioCodec: aac\n                        bitrate: 411.218\n                        duration: 4176\n                        framerate: 24\n                        height: 240\n                        samplerate: 48000\n                        videoCodec: h264\n                        width: 424\n                      playable: true\n                      qualities:\n                        - quality: 360p\n                          status: encoded\n                        - quality: 480p\n                          status: encoded\n                        - quality: 720p\n                          status: encoded\n                        - quality: 1080p\n                          status: encoding\n                        - quality: 2160p\n                          status: waiting\n                    ingest:\n                      filesize: 273579401\n                      receivedBytes:\n                        - from: 0\n                          to: 134217727\n                          total: 273579401\n                        - from: 134217728\n                          to: 268435455\n                          total: 273579401\n                        - from: 268435456\n                          to: 273579400\n                          total: 273579401\n                      status: uploaded\n              schema:\n                $ref: \"#/components/schemas/videostatus\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Show video status\n      tags:\n        - Videos\n      x-client-action: getVideoStatus\n  \"/videos/{videoId}/thumbnail\":\n    patch:\n      description: |-\n        Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.\n        Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).\n      operationId: PATCH_videos-videoId-thumbnail\n      parameters:\n        - description: Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.\n          example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/video-thumbnail-pick-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Pick a thumbnail\n      tags:\n        - Videos\n      x-client-action: pickThumbnail\n    post:\n      description: |-\n        The thumbnail is the poster that appears in the player window before video playback begins.\n        This endpoint allows you to upload an image for the thumbnail.\n        To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video. \n        Note: There may be a short delay before the new thumbnail is delivered to our CDN.\n        Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).\n      operationId: POST_videos-videoId-thumbnail\n      parameters:\n        - description: \"Unique identifier of the chosen video \"\n          explode: false\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n          style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/video-thumbnail-upload-payload\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    assets:\n                      hls: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/hls/manifest.m3u8\n                      iframe: \u003ciframe src=\"//embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      mp4: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n                      player: https://embed.api.video/vi4k0jvEUuaTdRAEjQ4Jfrgz?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n                      thumbnail: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n                    description: An amazing video explaining the string theory\n                    metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                    mp4Support: true\n                    panoramic: false\n                    playerId: pl45KFKdlddgk654dspkze\n                    public: false\n                    publishedAt: 2020-07-14T23:36:18.598Z\n                    scheduledAt: 2020-03-03T12:52:03.085Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    tags:\n                      - maths\n                      - string theory\n                      - video\n                    title: Maths video\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n              schema:\n                $ref: \"#/components/schemas/video\"\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: file\n                    status: 400\n                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.\n                    type: https://docs.api.video/docs/fileextension\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: videoId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Upload a thumbnail\n      tags:\n        - Videos\n      x-client-action: uploadThumbnail\n  /webhooks:\n    get:\n      description: Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.\n      operationId: LIST-webhooks\n      parameters:\n        - description: The webhook event that you wish to filter on.\n          example: video.encoding.quality.completed\n          explode: true\n          in: query\n          name: events\n          required: false\n          schema:\n            type: string\n          style: form\n        - $ref: \"#/components/parameters/currentPage\"\n        - $ref: \"#/components/parameters/pageSize\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - createdAt: 2021-01-08T14:12:18.000+00:00\n                        events:\n                          - video.encoding.quality.completed\n                        url: http://clientnotificationserver.com/notif?myquery=query\n                        webhookId: webhook_XXXXXXXXXXXXXXX\n                      - createdAt: 2021-01-12T12:12:12.000+00:00\n                        events:\n                          - video.encoding.quality.completed\n                        url: http://clientnotificationserver.com/notif?myquery=query2\n                        webhookId: webhook_XXXXXXXXXYYYYYY\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 11\n                      itemsTotal: 11\n                      links:\n                        - rel: self\n                          uri: https://ws.api.video/webhooks?currentPage=1\n                        - rel: first\n                          uri: https://ws.api.video/webhooks?currentPage=1\n                        - rel: last\n                          uri: https://ws.api.video/webhooks?currentPage=1\n                      pageSize: 25\n                      pagesTotal: 1\n              schema:\n                $ref: \"#/components/schemas/webhooks-list-response\"\n          description: Success\n      security:\n        - bearerAuth: []\n      summary: List all webhooks\n      tags:\n        - Webhooks\n      x-client-action: list\n      x-client-paginated: true\n      x-group-parameters: true\n    post:\n      description: |-\n        Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events: \n        * ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \\\"type\\\": \\\"video.encoding.quality.completed\\\", \\\"emittedAt\\\": \\\"2021-01-29T16:46:25.217+01:00\\\", \\\"videoId\\\": \\\"viXXXXXXXX\\\", \\\"encoding\\\": \\\"hls\\\", \\\"quality\\\": \\\"720p\\\"} ```. This request says that the 720p HLS encoding was completed.\n        * ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.\n        * ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.\n        * ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.\n      operationId: POST-webhooks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/webhooks-create-payload\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    createdAt: 2021-01-08T14:12:18.000+00:00\n                    events:\n                      - video.encoding.quality.completed\n                    url: http://clientnotificationserver.com/notif?myquery=query\n                    webhookId: webhook_XXXXXXXXXXXXXXX\n              schema:\n                $ref: \"#/components/schemas/webhook\"\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    events: This attribute is required.\n                    name: events\n                    problems:\n                      - name: events\n                        title: This attribute is required.\n                        type: https://docs.api.video/docs/attributerequired\n                      - name: url\n                        title: This attribute is required.\n                        type: https://docs.api.video/docs/attributerequired\n                      - name: events\n                        title: This attribute must be an array.\n                        type: https://docs.api.video/docs/attributeinvalid\n                    status: 400\n                    type: https://docs.api.video/docs/attributerequired\n              schema:\n                $ref: \"#/components/schemas/bad-request\"\n          description: Bad Request\n      security:\n        - bearerAuth: []\n      summary: Create Webhook\n      tags:\n        - Webhooks\n      x-client-action: create\n  \"/webhooks/{webhookId}\":\n    delete:\n      description: This endpoint will delete the indicated webhook.\n      operationId: DELETE-webhook\n      parameters:\n        - description: The webhook you wish to delete.\n          explode: false\n          in: path\n          name: webhookId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    name: webhookId\n                    status: 404\n                    title: The requested resource was not found.\n                    type: https://docs.api.video/docs/resourcenot_found\n              schema:\n                $ref: \"#/components/schemas/not-found\"\n          description: Not Found\n      security:\n        - bearerAuth: []\n      summary: Delete a Webhook\n      tags:\n        - Webhooks\n      x-client-action: delete\n    get:\n      description: This call provides the same JSON information provided on Webjhook creation.\n      operationId: GET-Webhook\n      parameters:\n        - description: The unique webhook you wish to retreive details on.\n          explode: false\n          in: path\n          name: webhookId\n          required: true\n          schema:\n            type: string\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    createdAt: 2021-01-08T14:12:18.000+00:00\n                    events:\n                      - video.encoding.quality.completed\n                    url: http://clientnotificationserver.com/notif?myquery=query\n                    webhookId: webhook_XXXXXXXXXXXXXXX\n              schema:\n                $ref: \"#/components/schemas/webhook\"\n          description: Success\n      security:\n        - bearerAuth: []\n      summary: Show Webhook details\n      tags:\n        - Webhooks\n      x-client-action: get\ncomponents:\n  parameters:\n    currentPage:\n      description: \"Choose the number of search results to return per page. Minimum value: 1\"\n      example: 2\n      explode: true\n      in: query\n      name: currentPage\n      required: false\n      schema:\n        default: 1\n        type: integer\n      style: form\n    pageSize:\n      description: Results per page. Allowed values 1-100, default is 25.\n      example: 30\n      explode: true\n      in: query\n      name: pageSize\n      required: false\n      schema:\n        default: 25\n        type: integer\n      style: form\n  schemas:\n    access-token:\n      example:\n        access_token: est\n        expires_in: 3600\n        refresh_token: cillum\n        token_type: qui nulla l\n      properties:\n        access_token:\n          description: The access token containing security credentials allowing you to acccess the API. The token lasts for one hour.\n          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n          type: string\n        expires_in:\n          description: Lists the time in seconds when your access token expires. It lasts for one hour.\n          type: integer\n        refresh_token:\n          description: A token you can use to get the next access token when your current access token expires.\n          example: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n          type: string\n        token_type:\n          default: bearer\n          description: The type of token you have.\n          type: string\n      title: AccessToken\n      type: object\n    account:\n      deprecated: true\n      properties:\n        environment:\n          description: Deprecated. Whether you are using your production or sandbox API key will impact what environment is displayed here, as well as stats and features information. If you use your sandbox key, the environment is \"sandbox.\" If you use your production key, the environment is \"production.\"\n          type: string\n        features:\n          description: \"Deprecated. What features are enabled for your account. Choices include: app.dynamic_metadata - the ability to dynamically tag videos to better segment and understand your audiences, app.event_log - the ability to create and retrieve a log detailing how your videos were interacted with, player.white_label - the ability to customise your player, stats.player_events - the ability to see statistics about how your player is being used, transcode.mp4_support - the ability to reformat content into mp4 using the H264 codec.\"\n          example: '[\"app.dynamic_metadata, app.event_log\"]'\n          items:\n            type: string\n          type: array\n        quota:\n          description: Deprecated\n          properties:\n            quotaRemaining:\n              description: Deprecated\n              type: number\n            quotaTotal:\n              description: Deprecated\n              type: number\n            quotaUsed:\n              description: Deprecated\n              type: number\n          type: object\n      title: Account\n      type: object\n    authenticate-payload:\n      example:\n        apiKey: 9VxMaPgsaFg7EBqmuspSzF7\n      properties:\n        apiKey:\n          description: Your account API key. You can use your sandbox API key, or you can use your production API key.\n          type: string\n      required:\n        - apiKey\n      title: apiKey\n      type: object\n    bad-request:\n      properties:\n        name:\n          type: string\n        problems:\n          items:\n            $ref: \"#/components/schemas/bad-request\"\n          type: array\n          uniqueItems: true\n        status:\n          type: integer\n        title:\n          type: string\n        type:\n          type: string\n      title: BadRequest\n      type: object\n    bytes_range:\n      properties:\n        from:\n          description: The starting point for the range of bytes for a chunk of a video.\n          example: 0\n          type: integer\n        to:\n          description: The ending point for the range of bytes for a chunk of a video.\n          example: 9999\n          type: integer\n        total:\n          description: The total number of bytes in the provided range.\n          example: 10000\n          type: integer\n      title: bytes_range\n      type: object\n    captions-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/subtitle\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: VideoCaptions\n      type: object\n    captions-update-payload:\n      properties:\n        default:\n          type: boolean\n      title: UpdateCaptionPayload\n      type: object\n    captions-upload-payload:\n      properties:\n        file:\n          description: The video text track (VTT) you want to upload.\n          example: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n          format: binary\n          type: string\n      required:\n        - file\n      type: object\n    chapter:\n      properties:\n        language:\n          type: string\n        src:\n          description: The link to your VTT file, which contains your chapters information for the video.\n          example: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n          type: string\n        uri:\n          type: string\n      title: Chapter\n      type: object\n    chapters-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/chapter\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: VideoChapters\n      type: object\n    chapters-update-payload:\n      properties:\n        file:\n          description: The VTT file describing the chapters you want to upload.\n          format: binary\n          type: string\n      required:\n        - file\n      title: UpdateChapterPayload\n      type: object\n    link:\n      properties:\n        rel:\n          type: string\n        uri:\n          type: string\n      type: object\n    live-stream:\n      properties:\n        assets:\n          $ref: \"#/components/schemas/live_stream_assets\"\n        broadcasting:\n          description: Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.\n          example: true\n          type: boolean\n        liveStreamId:\n          description: The unique identifier for the live stream. Live stream IDs begin with \"li.\"\n          example: li400mYKSgQ6xs7taUeSaEKr\n          type: string\n        name:\n          description: The name of your live stream.\n          example: My Live Stream\n          type: string\n        playerId:\n          description: The unique identifier for the player.\n          example: pl45d5vFFGrfdsdsd156dGhh\n          type: string\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.\n          example: true\n          type: boolean\n        record:\n          description: Whether you are recording or not.\n          example: true\n          type: boolean\n        streamKey:\n          description: The unique, private stream key that you use to begin streaming.\n          example: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n          type: string\n      title: LiveStream\n      type: object\n    live-stream-create-payload:\n      example:\n        name: Test live\n        playerId: pl4f4ferf5erfr5zed4fsdd\n        record: true\n      properties:\n        name:\n          description: Add a name for your live stream here.\n          example: My Live Stream Video\n          type: string\n        playerId:\n          description: The unique identifier for the player.\n          example: pl4f4ferf5erfr5zed4fsdd\n          type: string\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.\n          type: boolean\n        record:\n          default: false\n          description: Whether you are recording or not. True for record, false for not record.\n          example: true\n          type: boolean\n      required:\n        - name\n      title: liveStreamCreationPayload\n      type: object\n    live-stream-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/live-stream\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      required:\n        - data\n        - pagination\n      title: LiveStreams\n      type: object\n    live-stream-session:\n      properties:\n        client:\n          $ref: \"#/components/schemas/live_stream_session_client\"\n        device:\n          $ref: \"#/components/schemas/live_stream_session_device\"\n        location:\n          $ref: \"#/components/schemas/live_stream_session_location\"\n        os:\n          $ref: \"#/components/schemas/video_session_os\"\n        referrer:\n          $ref: \"#/components/schemas/live_stream_session_referrer\"\n        session:\n          $ref: \"#/components/schemas/live_stream_session_session\"\n      title: Live Stream Session\n      type: object\n    live-stream-thumbnail-upload-payload:\n      properties:\n        file:\n          description: The image to be added as a thumbnail.\n          format: binary\n          type: string\n      required:\n        - file\n      type: object\n    live-stream-update-payload:\n      properties:\n        name:\n          description: The name you want to use for your live stream.\n          example: My Live Stream Video\n          type: string\n        playerId:\n          description: The unique ID for the player associated with a live stream that you want to update.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.\n          type: boolean\n        record:\n          description: Use this to indicate whether you want the recording on or off. On is true, off is false.\n          example: true\n          type: boolean\n      title: LiveStreamUpdatePayload\n      type: object\n    live_stream_assets:\n      properties:\n        hls:\n          description: The http live streaming (HLS) link for your live video stream.\n          example: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n          format: uri\n          type: string\n        iframe:\n          description: The embed code for the iframe containing your live video stream.\n          example: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\" width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n          type: string\n        player:\n          description: A link to the video player that is playing your live stream.\n          example: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n          format: uri\n          type: string\n        thumbnail:\n          description: A link to the thumbnail for your video.\n          example: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n          format: uri\n          type: string\n      type: object\n    live_stream_session_client:\n      description: What kind of browser the viewer is using for the live stream session.\n      properties:\n        name:\n          description: The name of the browser used to view the live stream session.\n          example: Firefox\n          type: string\n        type:\n          description: The type of client used to view the live stream session.\n          example: browser\n          type: string\n        version:\n          description: The version of the browser used to view the live stream session.\n          example: \"67.0\"\n          type: string\n      type: object\n    live_stream_session_device:\n      description: What type of device the user is on when in the live stream session.\n      properties:\n        model:\n          description: The specific model of the device, if known.\n          example: unknown\n          type: string\n        type:\n          description: What the type is like desktop, laptop, mobile.\n          example: desktop\n          type: string\n        vendor:\n          description: If known, what the brand of the device is, like Apple, Dell, etc.\n          example: Dell\n          type: string\n      type: object\n    live_stream_session_location:\n      description: The location of the viewer of the live stream.\n      properties:\n        city:\n          description: The city of the viewer of the live stream.\n          example: Paris\n          type: string\n        country:\n          description: The country of the viewer of the live stream.\n          example: France\n          type: string\n      type: object\n    live_stream_session_referrer:\n      properties:\n        medium:\n          description: The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.\n          example: organic\n          type: string\n        searchTerm:\n          description: What term they searched for that led them to the live stream.\n          example: video stream\n          type: string\n        source:\n          description: Where the viewer came from to see the live stream (usually where they searched from).\n          example: https://google.com\n          type: string\n        url:\n          description: The website the viewer of the live stream was referred to in order to view the live stream.\n          example: https://api.video\n          type: string\n      type: object\n    live_stream_session_session:\n      properties:\n        endedAt:\n          description: When the session ended, with the date and time presented in ISO-8601 format.\n          example: 2019-06-24T12:45:01.109+00\n          format: date-time\n          type: string\n        loadedAt:\n          description: When the session started, with the date and time presented in ISO-8601 format.\n          example: 2019-06-24T11:45:01.109+00\n          format: date-time\n          type: string\n        sessionId:\n          description: A unique identifier for your session. You can use this to track what happens during a specific session.\n          type: string\n      type: object\n    metadata:\n      properties:\n        key:\n          description: The constant that defines the data set.\n          example: Color\n          type: string\n        value:\n          description: A variable which belongs to the data set.\n          example: Green\n          type: string\n      title: metadata\n      type: object\n      x-client-all-args-constructor: true\n    not-found:\n      properties:\n        name:\n          type: string\n        status:\n          type: integer\n        title:\n          type: string\n        type:\n          type: string\n      title: NotFound\n      type: object\n    pagination:\n      example:\n        currentPage: 3\n        currentPageItems: 20\n        itemsTotal: 123\n        links:\n          first:\n            rel: first\n            uri: /videos/search?currentPage=1\u0026pageSize=20\n          last:\n            rel: last\n            uri: /videos/search?currentPage=6\u0026pageSize=20\n          next:\n            rel: next\n            uri: /videos/search?currentPage=4\u0026pageSize=20\n          previous:\n            rel: previous\n            uri: /videos/search?currentPage=2\u0026pageSize=20\n        pageSize: 20\n        pagesTotal: 7\n      properties:\n        currentPage:\n          description: The current page index.\n          readOnly: true\n          type: integer\n        currentPageItems:\n          description: The number of items on the current page.\n          readOnly: true\n          type: integer\n        itemsTotal:\n          description: Total number of items that exist.\n          readOnly: true\n          type: integer\n        links:\n          items:\n            $ref: \"#/components/schemas/pagination_link\"\n          type: array\n        pageSize:\n          description: Maximum number of item per page.\n          readOnly: true\n          type: integer\n        pagesTotal:\n          description: Number of items listed in the current page.\n          readOnly: true\n          type: integer\n      required:\n        - links\n      title: Pagination\n      type: object\n    pagination_link:\n      properties:\n        rel:\n          pattern: ^self$\n          type: string\n        uri:\n          format: uri\n          type: string\n      title: PaginationLink\n      type: object\n    player:\n      allOf:\n        - $ref: \"#/components/schemas/playerinput\"\n        - properties:\n            assets:\n              properties:\n                link:\n                  description: The path to the file containing your logo.\n                  example: path/to/my/logo/mylogo.jpg\n                  type: string\n                logo:\n                  description: The name of the file containing the logo you want to use.\n                  example: mylogo.jpg\n                  type: string\n              type: object\n            createdAt:\n              description: When the player was created, presented in ISO-8601 format.\n              example: 2020-01-31T10:17:47+00:00\n              format: date-time\n              type: string\n            linkActive:\n              description: Deprecated\n              type: string\n            playerId:\n              example: pl45KFKdlddgk654dspkze\n              type: string\n            shapeAspect:\n              description: Deprecated\n              type: string\n            shapeBackgroundBottom:\n              description: Deprecated\n              type: string\n            shapeBackgroundTop:\n              description: Deprecated\n              type: string\n            shapeMargin:\n              description: Deprecated\n              type: integer\n            shapeRadius:\n              description: Deprecated\n              type: integer\n            updatedAt:\n              description: When the player was last updated, presented in ISO-8601 format.\n              example: 2020-01-31T10:18:47+00:00\n              format: date-time\n              type: string\n          type: object\n      title: Player\n    player-session-event:\n      properties:\n        at:\n          type: integer\n        emittedAt:\n          description: When an event occurred, presented in ISO-8601 format.\n          example: 2019-06-24T11:45:01.109+00\n          format: date-time\n          type: string\n        from:\n          type: integer\n        to:\n          type: integer\n        type:\n          description: \"Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end\"\n          example: play\n          type: string\n      title: Player Session Event\n      type: object\n    playerCreationPayload:\n      allOf:\n        - $ref: \"#/components/schemas/playerinput\"\n    playerUpdatePayload:\n      allOf:\n        - $ref: \"#/components/schemas/playerinput\"\n    playerinput:\n      example:\n        assets:\n          link: https://api.video\n          logo: https://cdn.api.video/player/pl14Db6oMJRH6SRVoOwORacK/logo.png\n        backgroundBottom: rgba(94, 95, 89, 1)\n        backgroundText: rgba(255, 255, 255, .95)\n        backgroundTop: rgba(72, 4, 45, 1)\n        enableApi: true\n        enableControls: true\n        forceAutoplay: false\n        forceLoop: false\n        hideTitle: false\n        language: en\n        link: rgba(255, 0, 0, .95)\n        linkActive: rgba(255, 0, 0, .75)\n        linkHover: rgba(255, 255, 255, .75)\n        shapeAspect: flat\n        shapeBackgroundBottom: rgba(50, 50, 50, .8)\n        shapeBackgroundTop: rgba(50, 50, 50, .7)\n        shapeMargin: 10\n        shapeRadius: 3\n        text: rgba(255, 255, 255, .95)\n        trackBackground: rgba(0, 0, 0, 0)\n        trackPlayed: rgba(255, 255, 255, .95)\n        trackUnplayed: rgba(255, 255, 255, .1)\n      properties:\n        backgroundBottom:\n          description: \"RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\"\n          type: string\n        backgroundText:\n          description: \"RGBA color for title text. Default: rgba(255, 255, 255, 1)\"\n          type: string\n        backgroundTop:\n          description: \"RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)\"\n          type: string\n        enableApi:\n          default: true\n          description: \"enable/disable player SDK access. Default: true\"\n          type: boolean\n        enableControls:\n          default: true\n          description: \"enable/disable player controls. Default: true\"\n          type: boolean\n        forceAutoplay:\n          default: false\n          description: \"enable/disable player autoplay. Default: false\"\n          type: boolean\n        forceLoop:\n          default: false\n          description: \"enable/disable looping. Default: false\"\n          type: boolean\n        hideTitle:\n          default: false\n          description: \"enable/disable title. Default: false\"\n          type: boolean\n        link:\n          description: \"RGBA color for all controls. Default: rgba(255, 255, 255, 1)\"\n          type: string\n        linkHover:\n          description: \"RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)\"\n          type: string\n        text:\n          description: \"RGBA color for timer text. Default: rgba(255, 255, 255, 1)\"\n          type: string\n        trackBackground:\n          description: \"RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)\"\n          type: string\n        trackPlayed:\n          description: \"RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)\"\n          type: string\n        trackUnplayed:\n          description: \"RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)\"\n          type: string\n      title: PlayerInput\n      type: object\n    players-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/player\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: Players\n      type: object\n    players-upload-logo-payload:\n      properties:\n        file:\n          description: The name of the file you want to use for your logo.\n          example: mylogo.jpg\n          format: binary\n          type: string\n        link:\n          description: The path to the file you want to upload and use as a logo.\n          example: path/to/my/logo/mylogo.jpg\n          format: string\n          type: string\n      required:\n        - file\n        - link\n      type: object\n    quality:\n      properties:\n        quality:\n          description: The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.\n          enum:\n            - 240p\n            - 360p\n            - 480p\n            - 720p\n            - 1080p\n            - 2160p\n          example: 720p\n          type: string\n        status:\n          description: The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.\n          enum:\n            - waiting\n            - encoding\n            - encoded\n            - failed\n          type: string\n      title: quality\n      type: object\n    raw-statistics-list-live-stream-analytics-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/live-stream-session\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: LiveStreamSessions\n      type: object\n    raw-statistics-list-player-session-events-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/player-session-event\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: PlayerSessionEvents\n      type: object\n    raw-statistics-list-sessions-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/video-session\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: VideoSessions\n      type: object\n    refresh-token-payload:\n      example:\n        refreshToken: def502005346d9cc2bd79a7793ab5bdabfefcaabfbb8c253f14733f1262077e1a3f38c4751d6d20f590c3784e531a82adc11f05fc1949aa46d5575aaa99cb84b9334ba66ac773576b5d7a418937ae337de62811d086dd42ad1164b12f87d67be6ffea18f2d50be9b95697b21c4d3c4372849bdb2287259cb80541570e913691a08b2fa33c85885930de15cebea627fc09f0255562ab3d39d87d4ff8fc02b00e252afcd480421dec7de9d1411176bcf669c527762e22294b453bc9ea06e9fa8ba5b873feb2ee14ce0a6a6ddd4b78c580631e210e9b9387265dc2bec9478a66a09dcdce1c40d2f856689e9d81742c9628a0b87b359e0b218ea1f07427eef89f999e47af89792f598e05847bd008fddc32ee63f4a601ffb4cd2ad08977f1c854ec358238322c918f05aa5a41f8a171dee497218408abc8283473f6112aeed7310815416a0fa36c63667e0ed014fa40b8992891bf58bae400d901c01450101c88f4978938ad138adc19cfe5698d60fd82cb27c586f6a8f70f4393c7c9e579df8739d46d249fb76d7\n      properties:\n        refreshToken:\n          description: |\n            The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.\n          type: string\n      required:\n        - refreshToken\n      title: refreshToken\n      type: object\n    subtitle:\n      properties:\n        default:\n          default: false\n          description: Whether you will have subtitles or not. True for yes you will have subtitles, false for no you will not have subtitles.\n          example: false\n          type: boolean\n        src:\n          type: string\n        srclang:\n          type: string\n        uri:\n          type: string\n      title: Subtitle\n      type: object\n    token-create-payload:\n      example:\n        ttl: 3600\n      properties:\n        ttl:\n          default: 0\n          description: Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration.\n          maximum: 2147483647\n          minimum: 0\n          type: integer\n      title: tokenCreationPayload\n      type: object\n    token-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/upload-token\"\n          title: uploadToken\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      required:\n        - data\n        - pagination\n      title: uploadTokens\n      type: object\n    token-upload-payload:\n      properties:\n        file:\n          description: The path to the video you want to upload.\n          example: path/to/video/video.mp4\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n        videoId:\n          description: The video id returned by the first call to this endpoint in a large video upload scenario.\n          type: string\n          x-client-copy-from-response: true\n          x-client-ignore: true\n      required:\n        - file\n      type: object\n    upload-token:\n      properties:\n        createdAt:\n          description: When the token was created, displayed in ISO-8601 format.\n          example: 2019-12-16T08:25:51+00:00\n          format: date-time\n          type: string\n        expiresAt:\n          description: When the token expires, displayed in ISO-8601 format.\n          example: 2019-12-16T09:25:51+00:00\n          format: date-time\n          type: string\n        token:\n          description: The unique identifier for the token you will use to authenticate an upload.\n          example: to1tcmSFHeYY5KzyhOqVKMKb\n          type: string\n        ttl:\n          description: Time-to-live - how long the upload token is valid for.\n          maximum: 2147483647\n          minimum: 0\n          type: integer\n      title: UploadToken\n      type: object\n    video:\n      example:\n        actions:\n          - video_delete\n          - video_download\n          - video_update\n        description: An amazing video explaining the string theory\n        metadata:\n          - key: Author\n            value: John Doe\n          - key: Format\n            value: Tutorial\n        publishedAt: 4665-07-14T23:36:18.598Z\n        scheduledAt: 4251-03-03T12:52:03.085Z\n        tags:\n          - maths\n          - string theory\n          - video\n        title: Maths video\n        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n      properties:\n        assets:\n          $ref: \"#/components/schemas/videoAssets\"\n        description:\n          description: |\n            A description for the video content.\n          example: An amazing video explaining string theory.\n          type: string\n        metadata:\n          description: |\n            Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n          example: '[{\"key\":\"Author\", \"value\":\"John Doe\"}, {\"key\":\"Format\", \"value\":\"Tutorial\"}]'\n          items:\n            $ref: \"#/components/schemas/metadata\"\n          type: array\n        mp4Support:\n          description: |\n            This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.\n          example: true\n          type: boolean\n        panoramic:\n          description: |\n            Defines if video is panoramic.\n          example: false\n          type: boolean\n        playerId:\n          description: |\n            The id of the player that will be applied on the video.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        public:\n          description: |\n            Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: false\n          type: boolean\n        publishedAt:\n          description: The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:25:51+00:00\n          type: string\n        source:\n          $ref: \"#/components/schemas/videoSource\"\n        tags:\n          description: |\n            One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces. \n          example: '\"tags\": [\"maths\", \"string theory\", \"video\"]'\n          items: {}\n          type: array\n        title:\n          description: |\n            The title of the video content.\n          example: Maths video\n          type: string\n        updatedAt:\n          description: The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:25:51+00:10\n          format: date-time\n          type: string\n        videoId:\n          description: The unique identifier of the video object.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          type: string\n      title: video\n      type: object\n    video-create-payload:\n      example:\n        description: An amazing video explaining string theory.\n        metadata:\n          - key: Author\n            value: John Doe\n          - key: Format\n            value: Tutorial\n        mp4Support: true\n        panoramic: false\n        playerId: pl45KFKdlddgk654dspkze\n        public: false\n        tags:\n          - maths\n          - string theory\n          - video\n        title: Maths video\n      properties:\n        description:\n          description: A brief description of your video.\n          example: A video about string theory.\n          type: string\n        metadata:\n          description: A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).\n          example: '[{\"key\": \"Author\", \"value\": \"John Doe\"}]'\n          items:\n            $ref: \"#/components/schemas/metadata\"\n          type: array\n        mp4Support:\n          default: true\n          description: Enables mp4 version in addition to streamed version.\n          example: true\n          type: boolean\n        panoramic:\n          default: false\n          description: Indicates if your video is a 360/immersive video.\n          example: false\n          type: boolean\n        playerId:\n          description: The unique identification number for your video player.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        public:\n          default: true\n          description: Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: true\n          type: boolean\n        publishedAt:\n          description: The API uses ISO-8601 format for time, and includes 3 places for milliseconds.\n          example: 2020-07-14T23:36:18.598Z\n          format: date-time\n          type: string\n        source:\n          description: If you add a video already on the web, this is where you enter the url for the video.\n          example: https://www.myvideo.url.com/video.mp4\n          type: string\n        tags:\n          description: A list of tags you want to use to describe your video.\n          example: '[\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        title:\n          description: The title of your new video.\n          example: Maths video\n          type: string\n      required:\n        - title\n      title: videoCreationPayload\n      type: object\n    video-session:\n      example:\n        client:\n          name: Firefox\n          type: browser\n          version: \"67.0\"\n        device:\n          model: unknown\n          type: desktop\n          vendor: Dell\n        location:\n          city: Paris\n          country: France\n        os:\n          name: Microsoft Windows\n          shortname: W10\n          version: Windows10\n        referrer:\n          medium: organic\n          searchTerm: video encoding hosting and delivery\n          source: https://google.com\n          url: https://api.video\n        session:\n          endedAt: 2019-06-24T11:49:19.243+00\n          loadedAt: 2019-06-24T11:45:01.109+00\n          sessionId: psEmFwGQUAXR2lFHj5nDOpy\n      properties:\n        client:\n          $ref: \"#/components/schemas/video_session_client\"\n        device:\n          $ref: \"#/components/schemas/video_session_device\"\n        location:\n          $ref: \"#/components/schemas/video_session_location\"\n        os:\n          $ref: \"#/components/schemas/video_session_os\"\n        referrer:\n          $ref: \"#/components/schemas/video_session_referrer\"\n        session:\n          $ref: \"#/components/schemas/video_session_session\"\n      title: Video Session\n      type: object\n    video-thumbnail-pick-payload:\n      example:\n        timecode: 00:00:00.000\n      properties:\n        timecode:\n          description: |-\n            Frame in video to be used as a placeholder before the video plays. \n            Example: '\"00:01:00.000\" for 1 minute into the video.'\n            Valid Patterns: \n            \"hh:mm:ss.ms\"\n            \"hh:mm:ss:frameNumber\"\n            \"124\" (integer value is reported as seconds) \n            If selection is out of range, \"00:00:00.00\" will be chosen.\n          pattern: 00:00:00.00\n          type: string\n      required:\n        - timecode\n      title: pickThumbnailPayload\n      type: object\n    video-thumbnail-upload-payload:\n      properties:\n        file:\n          description: The image to be added as a thumbnail.\n          format: binary\n          type: string\n      required:\n        - file\n      type: object\n    video-update-payload:\n      example:\n        description: An amazing video explaining the string theory\n        metadata:\n          - key: Author\n            value: John Doe\n          - key: Format\n            value: Tutorial\n        mp4Support: true\n        panoramic: false\n        playerId: pl45KFKdlddgk654dspkze\n        public: false\n        tags:\n          - maths\n          - string theory\n          - video\n        title: String theory\n      properties:\n        description:\n          description: A brief description of the video.\n          example: A film about good books.\n          type: string\n        metadata:\n          description: A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n          items:\n            $ref: \"#/components/schemas/metadata\"\n          type: array\n        mp4Support:\n          description: Whether the player supports the mp4 format.\n          example: true\n          type: boolean\n        panoramic:\n          description: Whether the video is a 360 degree or immersive video.\n          example: false\n          type: boolean\n        playerId:\n          description: The unique ID for the player you want to associate with your video.\n          example: pl4k0jvEUuaTdRAEjQ4Jfrgz\n          type: string\n        public:\n          description: Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: true\n          type: boolean\n        tags:\n          description: A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.\n          example: '[\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        title:\n          description: The title you want to use for your video.\n          type: string\n      title: videoUpdatePayload\n      type: object\n    video-upload-payload:\n      properties:\n        file:\n          description: The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \"/videos\" endpoint and add the \"source\" parameter when you create a new video.\n          example: \"@/path/to/video.mp4\"\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n      required:\n        - file\n      type: object\n    videoAssets:\n      description: Collection of details about the video object that you can use to work with the video object.\n      properties:\n        hls:\n          description: This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.\n          format: uri\n          type: string\n        iframe:\n          description: Code to use video from a third party website\n          example: \u003ciframe src=\"//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n          type: string\n        mp4:\n          description: Available only if mp4Support is enabled. Raw mp4 url.\n          example: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n          format: uri\n          type: string\n        player:\n          description: Raw url of the player.\n          example: https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n          format: uri\n          type: string\n        thumbnail:\n          description: Poster of the video.\n          example: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n          format: uri\n          type: string\n      type: object\n    videoSource:\n      description: Source information about the video.\n      properties:\n        liveStream:\n          $ref: \"#/components/schemas/video_source_live_stream\"\n        type:\n          type: string\n        uri:\n          description: The URL where the video is stored.\n          example: /videos/vi4k0jvEUuaTdRAEjQ4Prklg/source\n          type: string\n      type: object\n    video_session_client:\n      description: What kind of browser the viewer is using for the video session.\n      properties:\n        name:\n          description: The name of the browser used to view the video session.\n          example: Firefox\n          type: string\n        type:\n          description: The type of client used to view the video session.\n          example: browser\n          type: string\n        version:\n          description: The version of the browser used to view the video session.\n          example: \"67.0\"\n          type: string\n      type: object\n    video_session_device:\n      description: What type of device the user is on when in the video session.\n      properties:\n        model:\n          description: The specific model of the device, if known.\n          example: unknown\n          type: string\n        type:\n          description: What the type is like desktop, laptop, mobile.\n          example: desktop\n          type: string\n        vendor:\n          description: If known, what the brand of the device is, like Apple, Dell, etc.\n          example: Dell\n          type: string\n      type: object\n    video_session_location:\n      description: The location of the viewer.\n      properties:\n        city:\n          description: The city of the viewer.\n          example: Paris\n          type: string\n        country:\n          description: The country of the viewer.\n          example: France\n          type: string\n      type: object\n    video_session_os:\n      description: The operating system the viewer is on.\n      properties:\n        name:\n          description: The name of the operating system.\n          example: Microsoft Windows\n          type: string\n        shortname:\n          description: The nickname for the operating system, often representing the version.\n          example: W10\n          type: string\n        version:\n          description: The version of the operating system.\n          example: Windows 10\n          type: string\n      type: object\n    video_session_referrer:\n      properties:\n        medium:\n          description: How they arrived at the site, for example organic or paid. Organic meaning they found it themselves and paid meaning they followed a link from an advertisement.\n          example: organic\n          type: string\n        searchTerm:\n          description: The search term they typed to arrive at the video session.\n          type: string\n        source:\n          description: The source the referrer came from to the video session. For example if they searched through google to find the stream.\n          example: https://google.com\n          type: string\n        url:\n          description: The link the viewer used to reach the video session.\n          example: https://api.video\n          type: string\n      type: object\n    video_session_session:\n      properties:\n        endedAt:\n          description: When the video session ended, presented in ISO-8601 format.\n          example: 2019-06-24T12:45:01.109+00\n          format: date-time\n          type: string\n        loadedAt:\n          description: When the video session started, presented in ISO-8601 format.\n          example: 2019-06-24T11:45:01.109+00\n          format: date-time\n          type: string\n        sessionId:\n          description: The unique identifier for the session that you can use to track what happens during it.\n          example: psEmFwGQUAXR2lFHj5nDOpy\n          type: string\n      type: object\n    video_source_live_stream:\n      description: This appears if the video is from a Live Record.\n      properties:\n        links:\n          items:\n            $ref: \"#/components/schemas/video_source_live_stream_link\"\n          type: array\n        liveStreamId:\n          description: The unique identifier for the live stream.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          type: string\n      type: object\n    video_source_live_stream_link:\n      properties:\n        rel:\n          type: string\n        uri:\n          type: string\n      type: object\n    videos-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/video\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      required:\n        - data\n        - pagination\n      title: Videos\n      type: object\n    videostatus:\n      example:\n        encoding:\n          metadata:\n            aspectRatio: 16/9\n            audioCodec: aac\n            bitrate: 411.218\n            duration: 4176\n            framerate: 24\n            height: 240\n            samplerate: 48000\n            videoCodec: h264\n            width: 424\n          playable: true\n          qualities:\n            - quality: 240p\n              status: encoded\n            - quality: 360p\n              status: encoded\n            - quality: 480p\n              status: encoded\n            - quality: 720p\n              status: encoded\n            - quality: 1080p\n              status: encoding\n            - quality: 2160p\n              status: waiting\n        ingest:\n          filesize: 273579401\n          receivedBytes:\n            - from: 0\n              to: 134217727\n              total: 273579401\n            - from: 134217728\n              to: 268435455\n              total: 273579401\n            - from: 268435456\n              to: 273579400\n              total: 273579401\n          status: uploaded\n      properties:\n        encoding:\n          $ref: \"#/components/schemas/videostatus_encoding\"\n        ingest:\n          $ref: \"#/components/schemas/videostatus_ingest\"\n      title: VideoStatus\n      type: object\n    videostatus_encoding:\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/videostatus_encoding_metadata\"\n        playable:\n          description: Whether the video is playable or not.\n          example: true\n          type: boolean\n        qualities:\n          description: Available qualities the video can be viewed in.\n          items:\n            $ref: \"#/components/schemas/quality\"\n          type: array\n      type: object\n    videostatus_encoding_metadata:\n      properties:\n        aspectRatio:\n          type: string\n        audioCodec:\n          description: The method used to compress and decompress digital audio for your video.\n          type: string\n        bitrate:\n          description: The number of bits processed per second.\n          type: number\n        duration:\n          description: The length of the video.\n          type: integer\n        framerate:\n          description: The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).\n          example: 60\n          type: integer\n        height:\n          description: The height of the video in pixels.\n          type: integer\n        samplerate:\n          description: How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.\n          example: 48000\n          type: integer\n        videoCodec:\n          description: \"The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. \"\n          type: string\n        width:\n          description: The width of the video in pixels.\n          type: integer\n      type: object\n    videostatus_ingest:\n      description: Details about the capturing, transferring, and storing of your video for use immediately or in the future.\n      properties:\n        filesize:\n          description: The size of your file in bytes.\n          example: 200000\n          type: integer\n        receivedBytes:\n          description: The total number of bytes received, listed for each chunk of the upload.\n          items:\n            $ref: \"#/components/schemas/bytes_range\"\n          type: array\n        status:\n          description: There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.\n          enum:\n            - missing\n            - uploading\n            - uploaded\n          example: uploaded\n          type: string\n      type: object\n    webhook:\n      properties:\n        createdAt:\n          description: When an webhook was created, presented in ISO-8601 format.\n          example: 2019-06-24T11:45:01.109+00\n          format: date-time\n          type: string\n        events:\n          description: A list of events that will trigger the webhook.\n          example: '[\"video.encoding.quality.completed\"]'\n          items:\n            type: string\n          type: array\n        url:\n          description: URL of the webhook\n          example: http://clientnotificationserver.com/notif?myquery=query\n          type: string\n        webhookId:\n          description: Unique identifier of the webhook\n          example: webhook_XXXXXXXXXXXXXXX\n          type: string\n      title: Webhook\n      type: object\n    webhooks-create-payload:\n      example:\n        events:\n          - video.encoding.quality.completed\n        url: http://clientnotificationserver.com/notif?myquery=query\n      properties:\n        events:\n          description: |-\n            A list of the webhooks that you are subscribing to. There are Currently four webhook options:\n            * ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \\\"type\\\": \\\"video.encoding.quality.completed\\\", \\\"emittedAt\\\": \\\"2021-01-29T16:46:25.217+01:00\\\", \\\"videoId\\\": \\\"viXXXXXXXX\\\", \\\"encoding\\\": \\\"hls\\\", \\\"quality\\\": \\\"720p\\\"} ```. This request says that the 720p HLS encoding was completed.\n            * ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.\n            * ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.\n            * ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.\n          example: video.encoding.quality.completed\n          items:\n            type: string\n          type: array\n        url:\n          description: The the url to which HTTP notifications are sent. It could be any http or https URL.\n          example: https://example.com/webhooks\n          type: string\n      required:\n        - events\n        - url\n      type: object\n    webhooks-list-response:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/webhook\"\n          type: array\n        pagination:\n          $ref: \"#/components/schemas/pagination\"\n      title: Webhooks\n      type: object\n  securitySchemes:\n    bearerAuth:\n      scheme: bearer\n      type: http\nx-client-base-paths:\n  production: https://ws.api.video\n  sandbox: https://sandbox.api.video\nx-explorer-enabled: true\nx-proxy-enabled: true\nx-samples-enabled: true\nx-samples-languages:\n  - curl\n  - node\n  - ruby\n  - javascript\n  - python\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/api.video/1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/api.video/1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}