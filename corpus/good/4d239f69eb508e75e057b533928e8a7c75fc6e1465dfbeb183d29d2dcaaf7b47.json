{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/handshake-org/hs-rosetta"
		},
		"file": {
			"name": "rosetta_spec_1_3_1.json",
			"size": 0,
			"path": "test/data/rosetta_spec_1_3_1.json",
			"byteSize": 45199,
			"content": "{\n \"openapi\":\"3.0.2\",\n \"info\": {\n   \"version\":\"1.3.1\",\n   \"title\":\"Rosetta\",\n   \"description\":\"A Standard for Blockchain Interaction\",\n   \"license\": {\n     \"name\":\"Apache 2.0\",\n     \"url\":\"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n \"paths\": {\n   \"/network/list\": {\n     \"post\": {\n       \"summary\":\"Get List of Available Networks\",\n       \"description\":\"This endpoint returns a list of NetworkIdentifiers that the Rosetta server can handle.\",\n       \"operationId\":\"networkList\",\n       \"tags\": [\n         \"Network\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/MetadataRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/NetworkListResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/network/status\": {\n     \"post\": {\n       \"summary\":\"Get Network Status\",\n       \"description\":\"This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.\",\n       \"operationId\":\"networkStatus\",\n       \"tags\": [\n         \"Network\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/NetworkRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/NetworkStatusResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/network/options\": {\n     \"post\": {\n       \"summary\":\"Get Network Options\",\n       \"description\":\"This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here.  Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.\",\n       \"operationId\":\"networkOptions\",\n       \"tags\": [\n         \"Network\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/NetworkRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/NetworkOptionsResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/block\": {\n     \"post\": {\n       \"summary\":\"Get a Block\",\n       \"description\":\"Get a block by its Block Identifier. If transactions are returned in the same call to the node as fetching the block, the response should include these transactions in the Block object. If not, an array of Transaction Identifiers should be returned so /block/transaction fetches can be done to get all transaction information.\",\n       \"operationId\":\"block\",\n       \"tags\": [\n         \"Block\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/BlockRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/BlockResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/block/transaction\": {\n     \"post\": {\n       \"summary\":\"Get a Block Transaction\",\n       \"description\":\"Get a transaction in a block by its Transaction Identifier. This endpoint should only be used when querying a node for a block does not return all transactions contained within it.  All transactions returned by this endpoint must be appended to any transactions returned by the /block method by consumers of this data. Fetching a transaction by hash is considered an Explorer Method (which is classified under the Future Work section).  Calling this endpoint requires reference to a BlockIdentifier because transaction parsing can change depending on which block contains the transaction. For example, in Bitcoin it is necessary to know which block contains a transaction to determine the destination of fee payments. Without specifying a block identifier, the node would have to infer which block to use (which could change during a re-org).  Implementations that require fetching previous transactions to populate the response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache within the Rosetta server in the /data directory (on a path that does not conflict with the node).\",\n       \"operationId\":\"blockTransaction\",\n       \"tags\": [\n         \"Block\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/BlockTransactionRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/BlockTransactionResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/mempool\": {\n     \"post\": {\n       \"summary\":\"Get All Mempool Transactions\",\n       \"description\":\"Get all Transaction Identifiers in the mempool\",\n       \"operationId\":\"mempool\",\n       \"tags\": [\n         \"Mempool\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/MempoolRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/MempoolResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/mempool/transaction\": {\n     \"post\": {\n       \"summary\":\"Get a Mempool Transaction\",\n       \"description\":\"Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block.  Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.\",\n       \"operationId\":\"mempoolTransaction\",\n       \"tags\": [\n         \"Mempool\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/MempoolTransactionRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/MempoolTransactionResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/account/balance\": {\n     \"post\": {\n       \"summary\":\"Get an Account Balance\",\n       \"description\":\"Get an array of all Account Balances for an Account Identifier and the Block Identifier at which the balance lookup was performed.  Some consumers of account balance data need to know at which block the balance was calculated to reconcile account balance changes.  To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique Account Identifiers.  If the client supports it, passing nil AccountIdentifier metadata to the request should fetch all balances (if applicable).  It is also possible to perform a historical balance lookup (if the server supports it) by passing in an optional BlockIdentifier.\",\n       \"operationId\":\"accountBalance\",\n       \"tags\": [\n         \"Account\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/AccountBalanceRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/AccountBalanceResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/construction/metadata\": {\n     \"post\": {\n       \"summary\":\"Get Transaction Construction Metadata\",\n       \"description\":\"Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. It is up to the client to correctly populate the options object with any network-specific details to ensure the correct metadata is retrieved.  It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in the SDK). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.  In a future version of the spec, we plan to pass an array of Rosetta Operations to specify which metadata should be received and to create a transaction in an accompanying SDK. This will help to insulate the client from chain-specific details that are currently required here.\",\n       \"operationId\":\"constructionMetadata\",\n       \"tags\": [\n         \"Construction\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/ConstructionMetadataRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/ConstructionMetadataResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n   \"/construction/submit\": {\n     \"post\": {\n       \"summary\":\"Submit a Signed Transaction\",\n       \"description\":\"Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool.  The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.\",\n       \"operationId\":\"constructionSubmit\",\n       \"tags\": [\n         \"Construction\"\n        ],\n       \"requestBody\": {\n         \"required\": true,\n         \"content\": {\n           \"application/json\": {\n             \"schema\": {\n               \"$ref\":\"#/components/schemas/ConstructionSubmitRequest\"\n              }\n            }\n          }\n        },\n       \"responses\": {\n         \"200\": {\n           \"description\":\"Expected response to a valid request\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/ConstructionSubmitResponse\"\n                }\n              }\n            }\n          },\n         \"default\": {\n           \"description\":\"unexpected error\",\n           \"content\": {\n             \"application/json\": {\n               \"schema\": {\n                 \"$ref\":\"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n \"components\": {\n   \"schemas\": {\n     \"NetworkIdentifier\": {\n       \"description\":\"The network_identifier specifies which network a particular object is associated with.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"blockchain\",\n         \"network\"\n        ],\n       \"properties\": {\n         \"blockchain\": {\n           \"type\":\"string\",\n           \"example\":\"bitcoin\"\n          },\n         \"network\": {\n           \"description\":\"If a blockchain has a specific chain-id or network identifier, it should go in this field. It is up to the client to determine which network-specific identifier is mainnet or testnet.\",\n           \"type\":\"string\",\n           \"example\":\"mainnet\"\n          },\n         \"sub_network_identifier\": {\n           \"$ref\":\"#/components/schemas/SubNetworkIdentifier\"\n          }\n        }\n      },\n     \"SubNetworkIdentifier\": {\n       \"description\":\"In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network\"\n        ],\n       \"properties\": {\n         \"network\": {\n           \"type\":\"string\",\n           \"example\":\"shard 1\"\n          },\n         \"metadata\": {\n           \"type\":\"object\",\n           \"example\": {\n             \"producer\":\"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n            }\n          }\n        }\n      },\n     \"BlockIdentifier\": {\n       \"description\":\"The block_identifier uniquely identifies a block in a particular network.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"index\",\n         \"hash\"\n        ],\n       \"properties\": {\n         \"index\": {\n           \"description\":\"This is also known as the block height.\",\n           \"type\":\"integer\",\n           \"format\":\"int64\",\n           \"example\": 1123941\n          },\n         \"hash\": {\n           \"type\":\"string\",\n           \"example\":\"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\"\n          }\n        }\n      },\n     \"PartialBlockIdentifier\": {\n       \"type\":\"object\",\n       \"description\":\"When fetching data by BlockIdentifier, it may be possible to only specify the index or hash. If neither property is specified, it is assumed that the client is making a request at the current block.\",\n       \"properties\": {\n         \"index\": {\n           \"type\":\"integer\",\n           \"format\":\"int64\",\n           \"example\": 1123941\n          },\n         \"hash\": {\n           \"type\":\"string\",\n           \"example\":\"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\"\n          }\n        }\n      },\n     \"TransactionIdentifier\": {\n       \"description\":\"The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"hash\"\n        ],\n       \"properties\": {\n         \"hash\": {\n           \"description\":\"Any transactions that are attributable only to a block (ex: a block event) should use the hash of the block as the identifier.\",\n           \"type\":\"string\",\n           \"example\":\"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\"\n          }\n        }\n      },\n     \"OperationIdentifier\": {\n       \"description\":\"The operation_identifier uniquely identifies an operation within a transaction.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"index\"\n        ],\n       \"properties\": {\n         \"index\": {\n           \"description\":\"The operation index is used to ensure each operation has a unique identifier within a transaction.  To clarify, there may not be any notion of an operation index in the blockchain being described.\",\n           \"type\":\"integer\",\n           \"format\":\"int64\",\n           \"minimum\": 0,\n           \"example\": 1\n          },\n         \"network_index\": {\n           \"description\":\"Some blockchains specify an operation index that is essential for client use. For example, Bitcoin uses a network_index to identify which UTXO was used in a transaction.  network_index should not be populated if there is no notion of an operation index in a blockchain (typically most account-based blockchains).\",\n           \"type\":\"integer\",\n           \"format\":\"int64\",\n           \"minimum\": 0,\n           \"example\": 0\n          }\n        }\n      },\n     \"AccountIdentifier\": {\n       \"description\":\"The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated).\",\n       \"type\":\"object\",\n       \"required\": [\n         \"address\"\n        ],\n       \"properties\": {\n         \"address\": {\n           \"description\":\"The address may be a cryptographic public key (or some encoding of it) or a provided username.\",\n           \"type\":\"string\",\n           \"example\":\"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\"\n          },\n         \"sub_account\": {\n           \"$ref\":\"#/components/schemas/SubAccountIdentifier\"\n          },\n         \"metadata\": {\n           \"description\":\"Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata.\",\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"SubAccountIdentifier\": {\n       \"description\":\"An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"address\"\n        ],\n       \"properties\": {\n         \"address\": {\n           \"description\":\"The SubAccount address may be a cryptographic value or some other identifier (ex: bonded) that uniquely specifies a SubAccount.\",\n           \"type\":\"string\",\n           \"example\":\"0x6b175474e89094c44da98b954eedeac495271d0f\"\n          },\n         \"metadata\": {\n           \"description\":\"If the SubAccount address is not sufficient to uniquely specify a SubAccount, any other identifying information can be stored here.  It is important to note that two SubAccounts with identical addresses but differing metadata will not be considered equal by clients.\",\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"Block\": {\n       \"description\":\"Blocks contain an array of Transactions that occurred at a particular BlockIdentifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"block_identifier\",\n         \"parent_block_identifier\",\n         \"timestamp\",\n         \"transactions\"\n        ],\n       \"properties\": {\n         \"block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"parent_block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"timestamp\": {\n           \"$ref\":\"#/components/schemas/Timestamp\"\n          },\n         \"transactions\": {\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/Transaction\"\n            }\n          },\n         \"metadata\": {\n           \"type\":\"object\",\n           \"example\": {\n             \"transactions_root\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n             \"difficulty\":\"123891724987128947\"\n            }\n          }\n        }\n      },\n     \"Transaction\": {\n       \"description\":\"Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"transaction_identifier\",\n         \"operations\"\n        ],\n       \"properties\": {\n         \"transaction_identifier\": {\n           \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n          },\n         \"operations\": {\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/Operation\"\n            }\n          },\n         \"metadata\": {\n           \"description\":\"Transactions that are related to other transactions (like a cross-shard transactioin) should include the tranaction_identifier of these transactions in the metadata.\",\n           \"type\":\"object\",\n           \"example\": {\n             \"size\": 12378,\n             \"lockTime\": 1582272577\n            }\n          }\n        }\n      },\n     \"Operation\": {\n       \"description\":\"Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"operation_identifier\",\n         \"type\",\n         \"status\"\n        ],\n       \"properties\": {\n         \"operation_identifier\": {\n           \"$ref\":\"#/components/schemas/OperationIdentifier\"\n          },\n         \"related_operations\": {\n           \"description\":\"Restrict referenced related_operations to identifier indexes \u003c the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations.  Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.\",\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/OperationIdentifier\"\n            },\n           \"example\": [\n              {\n               \"index\": 0,\n               \"operation_identifier\": {\n                 \"index\": 0\n                }\n              }\n            ]\n          },\n         \"type\": {\n           \"description\":\"The network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetowrkStatus. This can be very useful to downstream consumers that parse all block data.\",\n           \"type\":\"string\",\n           \"example\":\"Transfer\"\n          },\n         \"status\": {\n           \"description\":\"The network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply.  Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation.\",\n           \"type\":\"string\",\n           \"example\":\"Reverted\"\n          },\n         \"account\": {\n           \"$ref\":\"#/components/schemas/AccountIdentifier\"\n          },\n         \"amount\": {\n           \"$ref\":\"#/components/schemas/Amount\"\n          },\n         \"metadata\": {\n           \"type\":\"object\",\n           \"example\": {\n             \"asm\":\"304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\",\n             \"hex\":\"48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\"\n            }\n          }\n        }\n      },\n     \"Amount\": {\n       \"description\":\"Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"value\",\n         \"currency\"\n        ],\n       \"properties\": {\n         \"value\": {\n           \"description\":\"Value of the transaction in atomic units represented as an arbitrary-sized signed integer.  For example, 1 BTC would be represented by a value of 100000000.\",\n           \"type\":\"string\",\n           \"example\":\"1238089899992\"\n          },\n         \"currency\": {\n           \"$ref\":\"#/components/schemas/Currency\"\n          },\n         \"metadata\": {\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"Currency\": {\n       \"description\":\"Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).\",\n       \"type\":\"object\",\n       \"required\": [\n         \"symbol\",\n         \"decimals\"\n        ],\n       \"properties\": {\n         \"symbol\": {\n           \"description\":\"Canonical symbol associated with a currency.\",\n           \"type\":\"string\",\n           \"example\":\"BTC\"\n          },\n         \"decimals\": {\n           \"description\":\"Number of decimal places in the standard unit representation of the amount.  For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.\",\n           \"type\":\"integer\",\n           \"format\":\"int32\",\n           \"minimum\": 0,\n           \"example\": 8\n          },\n         \"metadata\": {\n           \"description\":\"Any additional information related to the currency itself.  For example, it would be useful to populate this object with the contract address of an ERC-20 token.\",\n           \"type\":\"object\",\n           \"example\": {\n             \"Issuer\":\"Satoshi\"\n            }\n          }\n        }\n      },\n     \"Peer\": {\n       \"description\":\"A Peer is a representation of a node's peer.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"peer_id\"\n        ],\n       \"properties\": {\n         \"peer_id\": {\n           \"type\":\"string\",\n           \"example\":\"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n          },\n         \"metadata\": {\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"Version\": {\n       \"description\":\"The Version object is utilized to inform the client of the versions of different components of the Rosetta implementation.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"rosetta_version\",\n         \"node_version\"\n        ],\n       \"properties\": {\n         \"rosetta_version\": {\n           \"description\":\"The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.\",\n           \"type\":\"string\",\n           \"example\":\"1.2.5\"\n          },\n         \"node_version\": {\n           \"description\":\"The node_version is the canonical version of the node runtime. This can help clients manage deployments.\",\n           \"type\":\"string\",\n           \"example\":\"1.0.2\"\n          },\n         \"middleware_version\": {\n           \"description\":\"When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.\",\n           \"type\":\"string\",\n           \"example\":\"0.2.7\"\n          },\n         \"metadata\": {\n           \"description\":\"Any other information that may be useful about versioning of dependent services should be returned here.\",\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"Allow\": {\n       \"description\":\"Allow specifies supported Operation status, Operation types, and all possible error statuses. This Allow object is used by clients to validate the correctness of a Rosetta Server implementation. It is expected that these clients will error if they receive some response that contains any of the above information that is not specified here.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"operation_statuses\",\n         \"operation_types\",\n         \"errors\"\n        ],\n       \"properties\": {\n         \"operation_statuses\": {\n           \"description\":\"All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.\",\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/OperationStatus\"\n            }\n          },\n         \"operation_types\": {\n           \"description\":\"All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.\",\n           \"type\":\"array\",\n           \"items\": {\n             \"type\":\"string\",\n             \"example\":\"TRANSFER\"\n            }\n          },\n         \"errors\": {\n           \"description\":\"All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.\",\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/Error\"\n            }\n          }\n        }\n      },\n     \"OperationStatus\": {\n       \"description\":\"OperationStatus is utilized to indicate which Operation status are considered successful.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"status\",\n         \"successful\"\n        ],\n       \"properties\": {\n         \"status\": {\n           \"description\":\"The status is the network-specific status of the operation.\",\n           \"type\":\"string\"\n          },\n         \"successful\": {\n           \"description\":\"An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee.  To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account.\",\n           \"type\":\"boolean\"\n          }\n        },\n       \"example\": {\n         \"status\":\"SUCCESS\",\n         \"successful\": true\n        }\n      },\n     \"Timestamp\": {\n       \"description\":\"The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.\",\n       \"type\":\"integer\",\n       \"format\":\"int64\",\n       \"minimum\": 0,\n       \"example\": 1582833600000\n      },\n     \"AccountBalanceRequest\": {\n       \"description\":\"An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"account_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"account_identifier\": {\n           \"$ref\":\"#/components/schemas/AccountIdentifier\"\n          },\n         \"block_identifier\": {\n           \"$ref\":\"#/components/schemas/PartialBlockIdentifier\"\n          }\n        }\n      },\n     \"AccountBalanceResponse\": {\n       \"description\":\"An AccountBalanceResponse is returned on the /account/balance endpoint. If an account has a balance for each AccountIdentifier describing it (ex: an ERC-20 token balance on a few smart contracts), an account balance request must be made with each AccountIdentifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"block_identifier\",\n         \"balances\"\n        ],\n       \"properties\": {\n         \"block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"balances\": {\n           \"type\":\"array\",\n           \"description\":\"A single account may have a balance in multiple currencies.\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/Amount\"\n            }\n          },\n         \"metadata\": {\n           \"description\":\"Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.\",\n           \"type\":\"object\",\n           \"example\": {\n             \"sequence_number\": 23\n            }\n          }\n        }\n      },\n     \"BlockRequest\": {\n       \"description\":\"A BlockRequest is utilized to make a block request on the /block endpoint.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"block_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"block_identifier\": {\n           \"$ref\":\"#/components/schemas/PartialBlockIdentifier\"\n          }\n        }\n      },\n     \"BlockResponse\": {\n       \"description\":\"A BlockResponse includes a fully-populated block or a partially-populated block with a list of other transactions to fetch (other_transactions).\",\n       \"type\":\"object\",\n       \"required\": [\n         \"block\"\n        ],\n       \"properties\": {\n         \"block\": {\n           \"$ref\":\"#/components/schemas/Block\"\n          },\n         \"other_transactions\": {\n           \"description\":\"Some blockchains may require additional transactions to be fetched that weren't returned in the block response (ex: block only returns transaction hashes). For blockchains with a lot of transactions in each block, this can be very useful as consumers can concurrently fetch all transactions returned.\",\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n            }\n          }\n        }\n      },\n     \"BlockTransactionRequest\": {\n       \"description\":\"A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"block_identifier\",\n         \"transaction_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"transaction_identifier\": {\n           \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n          }\n        }\n      },\n     \"BlockTransactionResponse\": {\n       \"description\":\"A BlockTransactionResponse contains information about a block transaction.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"transaction\"\n        ],\n       \"properties\": {\n         \"transaction\": {\n           \"$ref\":\"#/components/schemas/Transaction\"\n          }\n        }\n      },\n     \"MempoolRequest\": {\n       \"description\":\"A MempoolRequest is utilized to retrieve all transaction identifiers in the mempool for a particular network_identifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          }\n        }\n      },\n     \"MempoolResponse\": {\n       \"description\":\"A MempoolResponse contains all transaction identifiers in the mempool for a particular network_identifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"transaction_identifiers\"\n        ],\n       \"properties\": {\n         \"transaction_identifiers\": {\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n            }\n          }\n        }\n      },\n     \"MempoolTransactionRequest\": {\n       \"description\":\"A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"transaction_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"transaction_identifier\": {\n           \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n          }\n        }\n      },\n     \"MempoolTransactionResponse\": {\n       \"description\":\"A MempoolTransactionResponse contains an estimate of a mempool transaction. It may not be possible to know the full impact of a transaction in the mempool (ex: fee paid).\",\n       \"type\":\"object\",\n       \"required\": [\n         \"transaction\"\n        ],\n       \"properties\": {\n         \"transaction\": {\n           \"$ref\":\"#/components/schemas/Transaction\"\n          },\n         \"metadata\": {\n           \"type\":\"object\",\n           \"example\": {\n             \"descendant_fees\": 123923,\n             \"ancestor_count\": 2\n            }\n          }\n        }\n      },\n     \"MetadataRequest\": {\n       \"description\":\"A MetadataRequest is utilized in any request where the only argument is optional metadata.\",\n       \"type\":\"object\",\n       \"properties\": {\n         \"metadata\": {\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"NetworkListResponse\": {\n       \"description\":\"A NetworkListResponse contains all NetworkIdentifiers that the node can serve information for.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifiers\"\n        ],\n       \"properties\": {\n         \"network_identifiers\": {\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n            }\n          }\n        }\n      },\n     \"NetworkRequest\": {\n       \"description\":\"A NetworkRequest is utilized to retrieve some data specific exclusively to a NetworkIdentifier.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"metadata\": {\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"NetworkStatusResponse\": {\n       \"description\":\"NetworkStatusResponse contains basic information about the node's view of a blockchain network.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"current_block_identifier\",\n         \"current_block_timestamp\",\n         \"genesis_block_identifier\",\n         \"peers\"\n        ],\n       \"properties\": {\n         \"current_block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"current_block_timestamp\": {\n           \"$ref\":\"#/components/schemas/Timestamp\"\n          },\n         \"genesis_block_identifier\": {\n           \"$ref\":\"#/components/schemas/BlockIdentifier\"\n          },\n         \"peers\": {\n           \"type\":\"array\",\n           \"items\": {\n             \"$ref\":\"#/components/schemas/Peer\"\n            }\n          }\n        }\n      },\n     \"NetworkOptionsResponse\": {\n       \"description\":\"NetworkOptionsResponse contains information about the versioning of the node and the allowed operation statuses, operation types, and errors.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"version\",\n         \"allow\"\n        ],\n       \"properties\": {\n         \"version\": {\n           \"$ref\":\"#/components/schemas/Version\"\n          },\n         \"allow\": {\n           \"$ref\":\"#/components/schemas/Allow\"\n          }\n        }\n      },\n     \"ConstructionMetadataRequest\": {\n       \"description\":\"A ConstructionMetadataRequest is utilized to get information required to construct a transaction. The Options object used to specify which metadata to return is left purposely unstructured to allow flexibility for implementers.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"options\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"options\": {\n           \"description\":\"Some blockchains require different metadata for different types of transaction construction (ex: delegation versus a transfer). Instead of requiring a blockchain node to return all possible types of metadata for construction (which may require multiple node fetches), the client can populate an options object to limit the metadata returned to only the subset required.\",\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"ConstructionMetadataResponse\": {\n       \"description\":\"The ConstructionMetadataResponse returns network-specific metadata used for transaction construction. It is likely that the client will not inspect this metadata before passing it to a client SDK that uses it for construction.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"metadata\"\n        ],\n       \"properties\": {\n         \"metadata\": {\n           \"type\":\"object\",\n           \"example\": {\n             \"account_sequence\": 23,\n             \"recent_block_hash\":\"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n            }\n          }\n        }\n      },\n     \"ConstructionSubmitRequest\": {\n       \"description\":\"The transaction submission request includes a signed transaction.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"network_identifier\",\n         \"signed_transaction\"\n        ],\n       \"properties\": {\n         \"network_identifier\": {\n           \"$ref\":\"#/components/schemas/NetworkIdentifier\"\n          },\n         \"signed_transaction\": {\n           \"type\":\"string\"\n          }\n        }\n      },\n     \"ConstructionSubmitResponse\": {\n       \"description\":\"A TransactionSubmitResponse contains the transaction_identifier of a submitted transaction that was accepted into the mempool.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"transaction_identifier\"\n        ],\n       \"properties\": {\n         \"transaction_identifier\": {\n           \"$ref\":\"#/components/schemas/TransactionIdentifier\"\n          },\n         \"metadata\": {\n           \"type\":\"object\"\n          }\n        }\n      },\n     \"Error\": {\n       \"description\":\"Instead of utilizing HTTP status codes to describe node errors (which often do not have a good analog), rich errors are returned using this object.\",\n       \"type\":\"object\",\n       \"required\": [\n         \"code\",\n         \"message\",\n         \"retriable\"\n        ],\n       \"properties\": {\n         \"code\": {\n           \"description\":\"Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code.\",\n           \"type\":\"integer\",\n           \"format\":\"int32\",\n           \"minimum\": 0\n          },\n         \"message\": {\n           \"description\":\"Message is a network-specific error message.\",\n           \"type\":\"string\"\n          },\n         \"retriable\": {\n           \"description\":\"An error is retriable if the same request may succeed if submitted again.\",\n           \"type\":\"boolean\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/handshake-org/hs-rosetta@849bc5aef68de9fbc67d059bd91798c37b412e14/-/blob/test/data/rosetta_spec_1_3_1.json",
			"externalURLs": [
				{
					"url": "https://github.com/handshake-org/hs-rosetta/blob/849bc5aef68de9fbc67d059bd91798c37b412e14/test/data/rosetta_spec_1_3_1.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}