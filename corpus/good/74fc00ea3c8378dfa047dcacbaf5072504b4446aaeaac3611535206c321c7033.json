{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ConversationalComponents/docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 6390,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n# Added by API Auto Mocking Plugin\n  - description: Coco conversational components\n    url: https://marketplace.conversationalcomponents.com/api\ninfo:\n  description: Coco API to allow simple integration of conversational components into chatbots\n  version: \"0.0.2\"\n  title: Coco Conversational Components\n  contact:\n    name: Chen Buskilla\n    email: chen@a-i.com\n    \npaths:\n  '/exchange/{componentId}/{sessionId}':\n    post:\n      tags:\n        - runtime\n      summary: A single exchange with a component\n      operationId: exchange\n      description: |-\n        Perform a single exchange with a component.\n        * user_input is optional and means the component should initiate the flow. if user_input is included the component may respond to that.\n        * context is optional and flows on each turn from the calling bot to the component in both directions to pass gathered information\n      parameters:\n        - name: componentId\n          in: path\n          description: Component ID as generated at CocoApp\n          required: true\n          schema:\n            type: string\n        - name: sessionId\n          in: path\n          description: Sessions ID a random string consistent across the user session\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful exchange\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExchangeResponse'\n        '400':\n          description: bad url paramters\n        '422':\n          description: missing component variables\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExchangeBody'\n        description: contains user_input and context with variables relevant to function of the component\n  \n  '/config/{blueprintId}':\n    parameters:\n      - name: blueprintId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      description: Get a blueprint config - the default config of a component\n      tags: \n      - publish\n      responses:\n       200:\n        description: \"success\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigBody'\n    post:\n      description: Publish a component customization based on a blueprint\n      tags: \n      - publish\n      responses:\n        200:\n          description: \"success\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  component_id:\n                    type: string\n          \n  '/listen/{sessionId}':\n    post:\n      tags:\n        - marketplace\n      parameters: \n        - name: sessionId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"sucess\"\ncomponents:\n  schemas:\n    ExchangeBody:\n      type: object\n      properties:\n        user_input:\n          type: string\n          example: hi\n        context:\n          $ref: '#/components/schemas/ContextBody'\n    ExchangeResponse:\n      type: object\n      properties:\n        response:\n          type: string\n          example: hi\n        updated_context:\n          $ref: '#/components/schemas/ContextBody'\n        component_done:\n          type: boolean\n          description: the component is done and control should go back to calling bot\n        component_failed:\n          type: boolean\n          example: false\n          description: component failed to achieve the goal and control should go back to calling bot\n        out_of_context:\n          type: boolean\n          example: false\n          description: this input is out of context for the component and should be handled by calling bot and then return to component to finish\n        live_agent:\n          type: boolean\n          example: false\n          description: control should go to a live agent\n        confidence:\n          type: number\n          example: 0.5\n          description: component confidence in the response\n\n    ContextBody:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        userInfo:\n          $ref: '#/components/schemas/UserInfo'\n        userBillingAddress:\n          $ref: '#/components/schemas/Address'\n        userShippingAddress:\n          $ref: '#/components/schemas/Address'\n        userHomeAddress:\n          $ref: '#/components/schemas/Address'\n        userCurrentLocation:\n          $ref: '#/components/schemas/Address'\n    User:\n      type: object\n      description: The bot user primary info\n      properties:\n        firstName:\n          type: string\n          example: john\n        lastName:\n          type: string\n          example: smith\n        title:\n          type: string\n          example: mr\n    UserInfo:\n      type: object\n      description: Additonal info about the bot user\n      properties:\n        email:\n          type: string\n          example: john@smith.com\n        profession:\n          type: string\n          example: engineer\n        gender:\n          type: string\n        age:\n          type: integer\n        birthday:\n          type: string\n          description: https://en.wikipedia.org/wiki/ISO_8601\n    Address:\n      type: object\n      description: A generic address object\n      properties:\n        country:\n          type: string\n        city:\n          type: string\n        street:\n          type: string\n        zipcode:\n          type: string\n    ConfigBody:\n      type: object\n      required: \n        - blueprint_id\n      properties:\n        blueprint_id:\n          type: string\n        bot_name:\n          type: string\n        personality:\n          type: string\n        action_config:\n          $ref: '#/components/schemas/ActionConfig'\n        qa_config:\n          $ref: '#/components/schemas/QAConfig'\n        quiz_survey_config:\n          $ref: '#/components/schemas/QuizSurveyConfig'\n    ActionConfig:\n      type: object\n      example: \n        greet: [\"hi, {user.firstName}\", \"hello, {user.firstName}\"]\n      additionalProperties:\n        type: array\n        items:\n          type: string\n    QAConfig:\n      type: object\n    QuizSurveyConfig:\n      type: object",
			"canonicalURL": "/github.com/ConversationalComponents/docs@b43614d3ccf47cb7bed06493484d9e51d680a6fb/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ConversationalComponents/docs/blob/b43614d3ccf47cb7bed06493484d9e51d680a6fb/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}