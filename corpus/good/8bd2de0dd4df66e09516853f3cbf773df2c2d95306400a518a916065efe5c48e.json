{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "opto22.com-pac-R1.0a-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/opto22.com-pac-R1.0a-swagger.yaml",
			"byteSize": 85081,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: developer@opto22.com\n    name: Opto 22\n    url: http://developer.opto22.com\n    x-twitter: opto22\n  description: \u003e\n    #### Revised: 6/15/2018\n\n\n    ### Overview\n\n    This API provides secure access to a SNAP-PAC-R or -S series controller's variable and I/O tags. Confidentiality for API transactions is provided by HTTPS. Authentication uses HTTP Basic Authentication with an API key. An API key ID is submitted in the Basic Authentication userid field and API key value in the password field.\n\n\n    **For more information visit:** [developer.opto22.com](http://developer.opto22.com)\n\n\n    ### Examples\n\n\n    **Read an array** of all the integer32 variables defined in the PAC's strategy.\n\n    For example, on your SNAP-PAC-R or -S series controller at IP address 1.2.3.4, you would use the URL: \n\n\n    ```\n\n    https://1.2.3.4/api/v1/device/strategy/vars/int32s\n\n    ```\n\n    and provide appropriate authentication. The GET response will be a JSON array of name-value \n\n    pairs such as: \n\n    ```json\n\n    [ { \"nMyVeryFavoriteNumber\": 22 },\n      { \"nWidgetsProducedToday\": 22222 },\n      { \"DELAY_LOOP_TIME_IN_MSECS\"  : 200 } ]\n    ```\n\n    **Read the engineering units** (EU) of an analog input point configured in the PAC's strategy.\n\n    For an analog input (I/O point) named aiTemperatureInDegreesF, use \n\n\n    `https://1.2.3.4/api/v1/device/strategy/ios/analogInputs/aiTemperatureInDegreesF/eu`\n\n\n    The GET response will be a single JSON name-value pair such as:\n\n    ```json\n\n    { \"value\": 72.22 }\n\n    ```    \n\n\n    ### Note on packet sizes:\n\n    When doing POSTs or GETs, the JSON payload in the body should not exceed 3k (3072 bytes).\n  title: PAC Control\n  version: R1.0a\n  x-apisguru-categories:\n    - iot\n  x-logo:\n    url: https://twitter.com/opto22/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: http://developer.opto22.com/static/generated/pac-rest-api/pac-rest-api.snap-pac.yaml\n      version: \"2.0\"\n  x-providerName: opto22.com\n  x-serviceName: pac\ntags:\n  - description: Everything available through this RESTful API related to the PAC and its\n      strategy\n    name: all\n  - description: PAC's type, firmware version, mac addresses, and uptime\n    name: device\n  - description: Information about the currently loaded strategy\n    name: strategy\n  - description: I/O points in the strategy\n    name: ios\n  - description: Numeric and string tables in the strategy\n    name: tables\n  - description: Numeric and string variables in the strategy\n    name: vars\npaths:\n  /device:\n    get:\n      description: Returns controller's type; firmware version; both mac addresses; and\n        uptime in seconds\n      operationId: readDeviceDetails\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ControllerResponse\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - device\n  /device/strategy:\n    get:\n      description: Returns the name, date, time, and CRC of the strategy currently in the\n        controller, and the number of charts currently running. Empty strings\n        and a 0 will be returned when there is no strategy.\n      operationId: readStrategyDetails\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StrategyResponse\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - strategy\n  /device/strategy/ios/analogInputs:\n    get:\n      description: Returns the name and engineering units (EU) for all analog input points\n        in the strategy\n      operationId: readAnalogInputs\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FloatVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  \"/device/strategy/ios/analogInputs/{ioName}/eu\":\n    get:\n      description: Reads the value in engineering units (EU) of the specified analog input\n      operationId: readAnalogInputEu\n      parameters:\n        - description: Name of the analog input point to read\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  /device/strategy/ios/analogOutputs:\n    get:\n      description: Returns the name and engineering units (EU) for all analog output points\n        in the strategy\n      operationId: readAnalogOutputs\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FloatVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  \"/device/strategy/ios/analogOutputs/{ioName}/eu\":\n    get:\n      description: Reads the value in engineering units (EU) of the specified analog output\n      operationId: readAnalogOutputEu\n      parameters:\n        - description: Name of analog output point to read\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n    post:\n      description: Sets the value of the specified analog output point\n      operationId: writeAnalogOutputEu\n      parameters:\n        - description: Name of the analog output point to write\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FloatValueObject\"\n        description: Value to write\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  /device/strategy/ios/digitalInputs:\n    get:\n      description: Returns the name and state (true = on, false = off) of all digital input\n        points in the strategy. If there is no strategy in the controller, or\n        the strategy includes no digital inputs, the returned array will be\n        empty.\n      operationId: readDigitalInputs\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/DigitalPointStateVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  \"/device/strategy/ios/digitalInputs/{ioName}/state\":\n    get:\n      description: Returns the specified digital input point's state (true = on, false =\n        off)\n      operationId: readDigitalInputState\n      parameters:\n        - description: Name of the digital input point to read\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DigitalPointStateObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  /device/strategy/ios/digitalOutputs:\n    get:\n      description: Returns the name and state (true = on, false = off) of all digital\n        output points in the strategy\n      operationId: readDigitalOutputs\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/DigitalPointStateVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  \"/device/strategy/ios/digitalOutputs/{ioName}/state\":\n    get:\n      description: Returns the specified digital output point's state (true = on, false =\n        off)\n      operationId: readDigitalOutputState\n      parameters:\n        - description: Name of the digit output point to read\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DigitalPointStateObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n    post:\n      description: Sets the value of the specified digital output point\n      operationId: writeDigitalOutputState\n      parameters:\n        - description: Name of the digital output point to write\n          in: path\n          name: ioName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DigitalPointStateObject\"\n        description: Value to write\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - ios\n  /device/strategy/tables/floats:\n    get:\n      description: Returns an array of the name and length of all the float tables in the\n        strategy\n      operationId: readFloatTables\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/TableDef\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/floats/{tableName}\":\n    get:\n      description: \u003e\n        Read table elements\n\n        #### Examples ####\n\n        * Read all elements in a table named ftable: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable\n\n        * Read elements 5 and up in a table named ftable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=5\n\n        * Read 3 consecutive elements in a table named ftable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10\u0026numElements=3\n      operationId: readFloatTable\n      parameters:\n        - description: Name of float table to read; starting index and number of elements\n            may be specified (defaults to all elements)\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to read (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Number of elements to read (default is number of elements in the\n            table minus startIndex)\n          in: query\n          name: numElements\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  description: Value of the float variable\n                  format: float\n                  type: number\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: \u003e\n        Write table elements\n\n        #### Examples ####\n\n        * Write the values (1.5, 2.4, 3.5) to 3 consecutive elements in a table named ftable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/floats/ftable?startIndex=10  with body of the POST request set to [ 1.5, 2.4, 3.5 ]\n      operationId: writeFloatTable\n      parameters:\n        - description: Name of float table to write; starting index may be specified\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to write (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                description: Value of the float variable\n                format: float\n                type: number\n              type: array\n        description: Array of element values to write starting at startIndex\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/floats/{tableName}/{index}\":\n    get:\n      description: Read specified table element\n      operationId: readFloatTableElement\n      parameters:\n        - description: Name of float table to read\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to read\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: Write specified table element\n      operationId: writeFloatTableElement\n      parameters:\n        - description: Name of float table to write\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to write\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FloatValueObject\"\n        description: Element to write starting at index\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  /device/strategy/tables/int32s:\n    get:\n      description: Returns an array of the name and length of all the integer32 tables in\n        the strategy\n      operationId: readInt32Tables\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/TableDef\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int32s/{tableName}\":\n    get:\n      description: \u003e\n        \"Read a range of table elements from the specified integer32 table\"\n         #### Examples ####\n         * Read all elements in a table named itable: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable\n         * Read elements 5 and up in a table named itable starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=5\n         * Read 3 consecutive elements in a table named itable starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10\u0026numElements=3\n      operationId: readInt32Table\n      parameters:\n        - description: Name of integer32 table to read; starting index and number of\n            elements may be specified (defaults to all elements)\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to read (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Number of elements to read (default is number of elements in the\n            table minus startIndex)\n          in: query\n          name: numElements\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  description: Value of the integer32 variable\n                  format: int32\n                  type: integer\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: \u003e\n        \"Write a range of table elements\"\n\n        #### Examples ####\n\n        * Write the values (1, 2, 3) to 3 consecutive elements in a table named itable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int32s/itable?startIndex=10  with body of the POST request set to [ 1, 2, 3 ]      \n      operationId: writeInt32Table\n      parameters:\n        - description: Name of integer32 table to write; starting index may be specified\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to write (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                description: Value of the integer32 variable\n                format: int32\n                type: integer\n              type: array\n        description: Array of element values to write starting at startIndex; if the list\n          of elements is too long to fit in the specified table, extra elements\n          will be ignored\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int32s/{tableName}/{index}\":\n    get:\n      description: Read specified integer32 table element\n      operationId: readInt32TableElement\n      parameters:\n        - description: Name of the integer32 table to read\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to read\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int32ValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: Write specified integer32 table element\n      operationId: writeInt32TableElement\n      parameters:\n        - description: Name of the integer32 table to write\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to write\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int32ValueObject\"\n        description: Element to write at index specified\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  /device/strategy/tables/int64s:\n    get:\n      description: Returns an array of the name and length of all the integer64 tables in\n        the strategy\n      operationId: readInt64Tables\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/TableDef\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int64s/{tableName}\":\n    get:\n      description: \u003e\n        \"Read a range of table elements from the specified integer64 table\"\n         #### Examples ####\n         * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table\n         * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=5\n         * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10\u0026numElements=3\n      operationId: readInt64Table\n      parameters:\n        - description: Name of the integer64 table to read; starting index and number of\n            elements may be specified (defaults to all elements)\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to read (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Number of elements to read (default is number of elements in the\n            table minus startIndex)\n          in: query\n          name: numElements\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  description: Value of the integer64 variable\n                  format: int64\n                  type: integer\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: \u003e\n        \"Write a range of table elements\"\n\n        #### Examples ####\n\n        * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table?startIndex=10  with body of the POST request set to [ 1, 2, 3 ]\n      operationId: writeInt64Table\n      parameters:\n        - description: Name of integer64 table to write; starting index may be specified\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to write; default is 0\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                description: Value of the integer64 variable\n                format: int64\n                type: integer\n              type: array\n        description: Array of element values to write starting at startIndex; if the array\n          of elements is too long  to fit in the specified table, extra elements\n          will be ignored\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int64s/{tableName}/_string\":\n    get:\n      description: \u003e\n        \"Read a range of table elements from the specified integer64 table\"\n         #### Examples ####\n         * Read all elements in a table named i64table: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string\n         * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=5\n         * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10\u0026numElements=3\n      operationId: readInt64TableAsString\n      parameters:\n        - description: Name of the integer64 table to read; starting index and number of\n            elements may be specified (defaults to all elements)\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to read (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Number of elements to read (default is number of elements in the\n            table minus startIndex)\n          in: query\n          name: numElements\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  description: Value of the integer64 variable expressed as a decimal\n                    string. E.g. \"34359738367\"\n                  type: string\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: \u003e\n        \"Write a range of table elements\"\n\n        #### Examples ####\n\n        * Write the values (1, 2, 3) to 3 consecutive elements in a table named i64table starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/int64s/i64table/_string?startIndex=10  with body of the POST request set to [ \"1\", \"2\", \"3\" ]\n      operationId: writeInt64TableAsString\n      parameters:\n        - description: Name of integer64 table to write; starting index may be specified\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to write; default is 0.\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                description: Value of the integer64 variable expressed as a decimal string.\n                  E.g. \"34359738367\"\n                type: string\n              type: array\n        description: Array of element values to write starting at startIndex; if the array\n          of elements is too long  to fit in the specified table, extra elements\n          will be ignored\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int64s/{tableName}/{index}\":\n    get:\n      description: Read specified integer64 table element\n      operationId: readInt64TableElement\n      parameters:\n        - description: Name of integer64 table to read\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to read\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int64ValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: Write specified integer64 table element\n      operationId: writeInt64TableElement\n      parameters:\n        - description: Name of the integer64 table to write\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to write\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int64ValueObject\"\n        description: Element to write starting at index specified\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/int64s/{tableName}/{index}/_string\":\n    get:\n      description: Read specified integer64 table element as string\n      operationId: readInt64TableElementAsString\n      parameters:\n        - description: Name of integer64 table to read\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to read\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int64StringValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: Write specified integer64 table element as string\n      operationId: writeInt64TableElementAsString\n      parameters:\n        - description: Name of the integer64 table to write\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to write\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int64StringValueObject\"\n        description: Element to write starting at index specified\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  /device/strategy/tables/strings:\n    get:\n      description: Returns an array of the name and length of all the string tables in the\n        strategy\n      operationId: readStringTables\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/TableDef\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/strings/{tableName}\":\n    get:\n      description: \u003e\n        \"Read a range of table elements from the specified string table\"\n         #### Examples ####\n         * Read all elements in a table named strTable: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable\n         * Read elements 5 and up in a table named i64table starting with index 5: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=5\n         * Read 3 consecutive elements in a table named i64table starting with the element at index 10: https://1.2.3.4/api/v1/device/strategy/tables/strings/strTable?startIndex=10\u0026numElements=3\n      operationId: readStringTable\n      parameters:\n        - description: Name of string table to read; starting index and number of elements\n            may be specified (defaults to all elements)\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to read (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Number of elements to read (default is number of elements in the\n            table minus startIndex)\n          in: query\n          name: numElements\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  description: The value of a string; string width (max length) for each\n                    string table is defined in the strategy\n                  maxLength: 1024\n                  type: string\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: \u003e\n        \"Write a range of table elements\"\n\n        #### Examples ####\n\n        * Write the values (\"first\", \"second\", \"third\") to 3 consecutive elements in a table named strTable starting with the element at index 10:POST to https://1.2.3.4/api/v1/device/strategy/tables/strings/strtable?startIndex=10  with body of the POST request set to [ \"first\", \"second\", \"third\" ]\n      operationId: writeStringTable\n      parameters:\n        - description: Name of string table to write; starting index may be specified\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of first element to write (default is 0)\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                description: The value of a string; string width (max length) for each\n                  string variable is defined in the strategy\n                maxLength: 1024\n                type: string\n              type: array\n        description: Array of element values to write starting at startIndex; if an element\n          value is longer than the string width, the string will be truncated to\n          fit\n        required: true\n      responses:\n        \"200\":\n          description: OK - but check details for any error messages\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse200OKish\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  \"/device/strategy/tables/strings/{tableName}/{index}\":\n    get:\n      description: Read specified table element\n      operationId: readStringTableElement\n      parameters:\n        - description: Name of string table to read\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to read\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StringValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n    post:\n      description: Write specified table element\n      operationId: writeStringTableElement\n      parameters:\n        - description: Name of string table to write\n          in: path\n          name: tableName\n          required: true\n          schema:\n            type: string\n        - description: Index of element to write\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringValueObject\"\n        description: Element to write starting at index\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - tables\n  /device/strategy/vars/downTimers:\n    get:\n      description: Returns the name and current value of all down timers in the strategy\n      operationId: readDownTimerVars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FloatVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/downTimers/{downTimerName}/value\":\n    get:\n      description: Returns current value of the specified down timer\n      operationId: readDownTimerValue\n      parameters:\n        - description: Name of the down timer variable to read\n          in: path\n          name: downTimerName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/floats:\n    get:\n      description: Returns the name and value of all (single-precision) float variables in\n        the strategy\n      operationId: readFloatVars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FloatVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/floats/{floatName}\":\n    get:\n      description: Returns value of the specified float variable\n      operationId: readFloatVar\n      parameters:\n        - description: Name of float variable to read\n          in: path\n          name: floatName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n    post:\n      description: Sets the value of a float variable\n      operationId: writeFloatVar\n      parameters:\n        - description: Name of the float variable to write\n          in: path\n          name: floatName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FloatValueObject\"\n        description: Value to write to the float variable\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/int32s:\n    get:\n      description: Returns the name and value of all integer32 variables in the strategy\n      operationId: readInt32Vars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Int32Var\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/int32s/{int32Name}\":\n    get:\n      description: Returns value of the specified integer32 variable\n      operationId: readInt32Var\n      parameters:\n        - description: Name of integer32 variable to read\n          in: path\n          name: int32Name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int32ValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n    post:\n      description: Sets the value of an integer32 variable\n      operationId: writeInt32Var\n      parameters:\n        - description: Name of integer32 variable to write\n          in: path\n          name: int32Name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int32ValueObject\"\n        description: Value to write to the integer32 variable\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/int64s:\n    get:\n      description: Returns the name and value of all integer64 variables in the strategy\n      operationId: readInt64Vars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Int64Var\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/int64s/_string:\n    get:\n      description: Returns the name and value as a string of all integer64 variables in the\n        strategy\n      operationId: readInt64VarsAsStrings\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Int64VarAsString\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/int64s/{int64Name}\":\n    get:\n      description: Returns value of the specified integer64 variable\n      operationId: readInt64Var\n      parameters:\n        - description: Name of integer64 variable to read\n          in: path\n          name: int64Name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int64ValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n    post:\n      description: Sets the value of an integer64 variable\n      operationId: writeInt64Var\n      parameters:\n        - description: Name of integer64 variable to write\n          in: path\n          name: int64Name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int64ValueObject\"\n        description: Value to write to the integer64 variable\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/int64s/{int64Name}/_string\":\n    get:\n      description: Returns value of the specified integer64 variable as a string\n      operationId: readInt64VarAsString\n      parameters:\n        - description: Name of integer64 variable to read\n          in: path\n          name: int64Name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Int64StringValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n    post:\n      description: Sets the value of an integer64 variable as a string\n      operationId: writeInt64VarAsString\n      parameters:\n        - description: Name of integer64 variable to write\n          in: path\n          name: int64Name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Int64StringValueObject\"\n        description: Value to write to the integer64 variable\n        required: true\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/strings:\n    get:\n      description: Returns the name and value of all string variables in the strategy\n      operationId: readStringVars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/StringVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/strings/{stringName}\":\n    get:\n      description: Returns value of the specified string\n      operationId: readStringVar\n      parameters:\n        - description: Name of string variable to read\n          in: path\n          name: stringName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StringValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n    post:\n      description: Sets the value of a string variable\n      operationId: writeStringVar\n      parameters:\n        - description: Name of string variable to write\n          in: path\n          name: stringName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringValueObject\"\n        description: String to write. If the value is longer than the string width, the\n          string will be truncated to fit.\n        required: true\n      responses:\n        \"200\":\n          description: OK - but check details for any error messages\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse200OKish\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  /device/strategy/vars/upTimers:\n    get:\n      description: Returns the name and current value of all up timers in the strategy\n      operationId: readUpTimerVars\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FloatVar\"\n                type: array\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\n  \"/device/strategy/vars/upTimers/{upTimerName}/value\":\n    get:\n      description: Returns current value of the specified up timer\n      operationId: readUpTimerValue\n      parameters:\n        - description: Name of the up timer variable to read\n          in: path\n          name: upTimerName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FloatValueObject\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse400BadAdminOrValue\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse401BadKeyForBasicAuth\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse404NotFound\"\n      security:\n        - basicAuth: []\n      tags:\n        - all\n        - vars\nservers:\n  - url: https://developer.opto22.com/api/v1\ncomponents:\n  securitySchemes:\n    basicAuth:\n      description: HTTP Basic Authentication over HTTPS\n      type: http\n      scheme: basic\n  schemas:\n    ControllerResponse:\n      properties:\n        controllerType:\n          type: string\n        firmwareDate:\n          type: string\n        firmwareTime:\n          type: string\n        firmwareVersion:\n          type: string\n        mac1:\n          type: string\n        mac2:\n          type: string\n        upTimeSeconds:\n          format: int32\n          type: integer\n      type: object\n    DigitalPointStateObject:\n      properties:\n        value:\n          description: State of a digital point (true = on, false = off)\n          type: boolean\n      type: object\n    DigitalPointStateVar:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: State of a digital point (true = on, false = off)\n          type: boolean\n      type: object\n    ErrorResponse200OKish:\n      properties:\n        errorCode:\n          description: \"Details: ** -23 ** The string you passed is longer than the width\n            of PAC Control string variable or table element you are writing to.\"\n          format: int32\n          type: integer\n        message:\n          type: string\n      required:\n        - errorCode\n        - message\n      type: object\n    ErrorResponse400BadAdminOrValue:\n      properties:\n        errorCode:\n          description: \"Details: ** -1 ** Invalid or no strategy. Use PAC Control to\n            download strategy logic. ** -3 ** Buffer overrun or invalid length.\n            The number or range of table indicies you specified exceeds elements\n            in the PAC Control table. ** -8 ** Invalid data. Check format of\n            data written. Compare to what's read for the same endpoint. ** -12\n            ** You've passed a table index that is less than zero or greater\n            than the length of the table minus 1. ** -13 ** The value you passed\n            to write is outside of the valid range for the PAC Control data type\n            you're writing to. For example, if you specified the value\n            999999999999999 for an integer32 (since integer32 data types must be\n            in the range: -2147483648 to 2147483647). ** -17 or -20 ** The\n            controller is busy with another task, for example, downloading a new\n            strategy. Try again later. ** -36 ** Endpoint is not defined. **\n            -109 ** Attempting to write without write permissions. Check\n            /admin/keys settings. ** -13019 ** Invalid endpoint. Check syntax of\n            the URL (e.g. did you use 'ev' instead of 'eu'). ** 400 ** Before\n            using the API on this device, you must first change the default user\n            name and password via the URL /admin/keys. Use the default User\n            Name: 'admin' and Password: 'password' to log ininitially.\"\n          format: int32\n          type: integer\n        message:\n          type: string\n      required:\n        - errorCode\n        - message\n      type: object\n    ErrorResponse401BadKeyForBasicAuth:\n      properties:\n        errorCode:\n          description: \"Details: ** -104 ** Invalid key ID/value in HTTP header. Before\n            using the API on this device, you must create at least one key\n            ID/value via the URL /admin/keys. Then use one of those in your HTTP\n            header for Basic Authentication.\"\n          format: int32\n          type: integer\n        message:\n          type: string\n      required:\n        - errorCode\n        - message\n      type: object\n    ErrorResponse404NotFound:\n      properties:\n        errorCode:\n          description: \"Details: ** -29 ** The tag (variable, table, timer, I/O point,\n            etc.) you requested exists on the controller but does not match the\n            data type for this endpoint.  ** -28 ** The tag (variable, table,\n            timer, I/O point, etc.) does not currently exist on the controller.\n            Check the tag name and the controller's status. ** 404 ** Endpoint\n            does not exist. Check URL.\"\n          format: int32\n          type: integer\n        message:\n          type: string\n      required:\n        - errorCode\n        - message\n      type: object\n    FloatValueObject:\n      properties:\n        value:\n          description: Value of the float variable\n          format: float\n          type: number\n      type: object\n    FloatVar:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: Value of the float variable\n          format: float\n          type: number\n      type: object\n    Int32ValueObject:\n      properties:\n        value:\n          description: Value of the integer32 variable\n          format: int32\n          type: integer\n      type: object\n    Int32Var:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: Value of the integer32 variable\n          format: int32\n          type: integer\n      type: object\n    Int64StringValueObject:\n      properties:\n        value:\n          description: Value of the integer64 variable expressed as decimal string, e.g.\n            \"34359738367\"\n          type: string\n      type: object\n    Int64ValueObject:\n      properties:\n        value:\n          description: Value of the integer64 variable\n          format: int64\n          type: integer\n      type: object\n    Int64Var:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: Value of the integer64 variable\n          format: int64\n          type: integer\n      type: object\n    Int64VarAsString:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: Value of the integer64 variable expressed as a decimal string, E.g.\n            \"34359738367\"\n          type: string\n      type: object\n    StrategyResponse:\n      properties:\n        crc:\n          type: string\n        date:\n          type: string\n        runningCharts:\n          format: int32\n          type: integer\n        strategyName:\n          type: string\n        time:\n          type: string\n      type: object\n    StringValueObject:\n      properties:\n        value:\n          description: The value of a string; string width (max length) for each string\n            variable is defined in the strategy\n          maxLength: 1024\n          type: string\n      type: object\n    StringVar:\n      properties:\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n        value:\n          description: The value of a string; string width (max length) for each string\n            variable is defined in the strategy\n          maxLength: 1024\n          type: string\n      type: object\n    TableDef:\n      properties:\n        length:\n          description: Number of elements contained in this table\n          format: int32\n          type: integer\n        name:\n          description: Name of the tag (strategy variable, i/o point, etc.)\n          maxLength: 50\n          type: string\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/opto22.com-pac-R1.0a-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/opto22.com-pac-R1.0a-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}