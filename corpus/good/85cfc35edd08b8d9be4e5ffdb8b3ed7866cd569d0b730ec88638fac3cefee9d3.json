{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/the-commons-project/commontrust-api"
		},
		"file": {
			"name": "issuer.yml",
			"size": 0,
			"path": "ctn-issuer/issuer.yml",
			"byteSize": 5016,
			"content": "openapi: 3.0.0\ninfo:\n  title: ctn-issuer\n  description: CommonTrust Network Registry API\n  version: 1.0.0\n  contact:\n    email: cloudops@thecommonsproject.org\n  license:\n    name: MIT\n    url: 'https://mit-license.org/'\n\nservers:\n  - description: Replace api_base_url with server base URL\n    url: ${api_endpoint_url}\n\npaths:\n  /issuer:\n    options:\n      summary: CORS support\n      description: |\n        Enable CORS by returning correct headers\n      tags:\n      - CORS\n      responses:\n        200:\n          description: Default response for CORS method\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n            Access-Control-Allow-Methods:\n              schema:\n                type: string\n            Access-Control-Allow-Headers:\n              schema:\n                type: string\n          content: {}\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Api-Key'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: |\n                {}\n    get:\n      summary: returns issuer\n      operationId: findIssuer\n      description: |\n        By passing in the Issuer URL, you can retrieve the Issuer object\n      parameters:\n        - in: query\n          name: identifier\n          description: issuer URL\n          required: true\n          schema:\n            type: string\n            example: https://spec.smarthealth.cards/examples/issuer\n        - in: query\n          name: system\n          description: smarthealthcard or other system\n          required: true\n          schema:\n            type: string\n            enum: [smarthealthcard]\n      responses:\n        '200':\n          description: Issuer object found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Issuer'\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: string\n            Access-Control-Allow-Methods:\n              schema:\n                type: string\n            Access-Control-Allow-Headers:\n              schema:\n                type: string\n        '400':\n          description: Invalid parameters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedError\"\n        '404':\n          description: Issuer not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '429':\n          description: Gateway error\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-amazon-apigateway-integration:\n        type: aws_proxy\n        uri: |\n          arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ctn-issuer-lookup:live/invocations\n        httpMethod: POST\n        contentHandling: CONVERT_TO_TEXT\n        passthroughBehavior: when_no_match\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Api-Key'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: |\n                {}\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      name: x-api-key\n      in: header\n  schemas:\n    Issuer:\n      type: object\n      required:\n        - id\n        - name\n        - environment\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        name:\n          type: string\n          example: Kenney Laboratories\n        environment:\n          type: string\n          enum: [PROD, NONPROD]\n          example: PROD\n    Error:\n      type: object\n      properties:\n        error_message:\n          type: string\n      required:\n        - error_message\n  responses:\n    UnauthorizedError:\n      description: API key is missing or invalid\n      headers:\n        WWW_Authenticate:\n          schema:\n            type: string\n\nsecurity:\n  - ApiKeyAuth: []\n",
			"canonicalURL": "/github.com/the-commons-project/commontrust-api@8fe952bc798fcc95bce7f584f9d73f3459bee478/-/blob/ctn-issuer/issuer.yml",
			"externalURLs": [
				{
					"url": "https://github.com/the-commons-project/commontrust-api/blob/8fe952bc798fcc95bce7f584f9d73f3459bee478/ctn-issuer/issuer.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}