{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eBay/NautilusTelemetry"
		},
		"file": {
			"name": "logs_service.yaml",
			"size": 0,
			"path": "Sources/NautilusTelemetry/Exporters/OTLP-JSON/Logs/logs_service.yaml",
			"byteSize": 10783,
			"content": "openapi: 3.0.1\ninfo:\n  title: opentelemetry/proto/collector/logs/v1/logs_service.proto\n  version: version not set\nservers:\n- url: /\npaths:\n  /v1/logs:\n    post:\n      tags:\n      - LogsService\n      summary: |-\n        For performance reasons, it is recommended to keep this RPC\n        alive for the entire life of the application.\n      operationId: LogsService_Export\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/v1ExportLogsServiceRequest'\n        required: true\n      responses:\n        '200':\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1ExportLogsServiceResponse'\n        '429':\n          description: Too Many Requests\n        default:\n          description: An unexpected error response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/runtimeError'\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    protobufAny:\n      type: object\n      properties:\n        type_url:\n          type: string\n        value:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          format: byte\n    runtimeError:\n      type: object\n      properties:\n        error:\n          type: string\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/protobufAny'\n    v1AnyValue:\n      type: object\n      properties:\n        string_value:\n          type: string\n        bool_value:\n          type: boolean\n        int_value:\n          type: string\n          format: int64\n        double_value:\n          type: number\n          format: double\n        array_value:\n          $ref: '#/components/schemas/v1ArrayValue'\n        kvlist_value:\n          $ref: '#/components/schemas/v1KeyValueList'\n        bytes_value:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          format: byte\n      description: |-\n        AnyValue is used to represent any type of attribute value. AnyValue may contain a\n        primitive value such as a string or integer or it may contain an arbitrary nested\n        object containing arrays, key-value lists and primitives.\n    v1ArrayValue:\n      type: object\n      properties:\n        values:\n          type: array\n          description: Array of values. The array may be empty (contain 0 elements).\n          items:\n            $ref: '#/components/schemas/v1AnyValue'\n      description: |-\n        ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\n        since oneof in AnyValue does not allow repeated fields.\n    v1ExportLogsServiceRequest:\n      type: object\n      properties:\n        resource_logs:\n          type: array\n          description: |-\n            An array of ResourceLogs.\n            For data coming from a single resource this array will typically contain one\n            element. Intermediary nodes (such as OpenTelemetry Collector) that receive\n            data from multiple origins typically batch the data before forwarding further and\n            in that case this array will contain multiple elements.\n          items:\n            $ref: '#/components/schemas/v1ResourceLogs'\n    v1ExportLogsServiceResponse:\n      type: object\n    v1InstrumentationLibrary:\n      type: object\n      properties:\n        name:\n          type: string\n          description: An empty instrumentation library name means the name is unknown.\n        version:\n          type: string\n      description: |-\n        InstrumentationLibrary is a message representing the instrumentation library information\n        such as the fully qualified name and version.\n    v1InstrumentationLibraryLogs:\n      type: object\n      properties:\n        instrumentation_library:\n          $ref: '#/components/schemas/v1InstrumentationLibrary'\n        logs:\n          type: array\n          description: A list of log records.\n          items:\n            $ref: '#/components/schemas/v1LogRecord'\n        schema_url:\n          type: string\n          description: This schema_url applies to all logs in the \"logs\" field.\n      description: A collection of Logs produced by an InstrumentationLibrary.\n    v1KeyValue:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          $ref: '#/components/schemas/v1AnyValue'\n      description: |-\n        KeyValue is a key-value pair that is used to store Span attributes, Link\n        attributes, etc.\n    v1KeyValueList:\n      type: object\n      properties:\n        values:\n          type: array\n          description: |-\n            A collection of key/value pairs of key-value pairs. The list may be empty (may\n            contain 0 elements).\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n      description: |-\n        KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\n        since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\n        a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\n        avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\n        are semantically equivalent.\n    v1LogRecord:\n      title: |-\n        A log record according to OpenTelemetry Log Data Model:\n        https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md\n      type: object\n      properties:\n        time_unix_nano:\n          type: string\n          description: |-\n            time_unix_nano is the time when the event occurred.\n            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n            Value of 0 indicates unknown or missing timestamp.\n          format: uint64\n        severity_number:\n          $ref: '#/components/schemas/v1SeverityNumber'\n        severity_text:\n          type: string\n          description: |-\n            The severity text (also known as log level). The original string representation as\n            it is known at the source. [Optional].\n        name:\n          type: string\n          description: |-\n            Short event identifier that does not contain varying parts. Name describes\n            what happened (e.g. \"ProcessStarted\"). Recommended to be no longer than 50\n            characters. Not guaranteed to be unique in any way. [Optional].\n        body:\n          $ref: '#/components/schemas/v1AnyValue'\n        attributes:\n          type: array\n          description: Additional attributes that describe the specific event occurrence.\n            [Optional].\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          format: int64\n        flags:\n          type: integer\n          description: |-\n            Flags, a bit field. 8 least significant bits are the trace flags as\n            defined in W3C Trace Context specification. 24 most significant bits are reserved\n            and must be set to 0. Readers must not assume that 24 most significant bits\n            will be zero and must correctly mask the bits when reading 8-bit trace flag (use\n            flags \u0026 TRACE_FLAGS_MASK). [Optional].\n          format: int64\n        trace_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            A unique identifier for a trace. All logs from the same trace share\n            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\n            is considered invalid. Can be set for logs that are part of request processing\n            and have an assigned trace id. [Optional].\n          format: byte\n        span_id:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: |-\n            A unique identifier for a span within a trace, assigned when the span\n            is created. The ID is an 8-byte array. An ID with all zeroes is considered\n            invalid. Can be set for logs that are part of a particular processing span.\n            If span_id is present trace_id SHOULD be also present. [Optional].\n          format: byte\n    v1Resource:\n      type: object\n      properties:\n        attributes:\n          type: array\n          description: Set of labels that describe the resource.\n          items:\n            $ref: '#/components/schemas/v1KeyValue'\n        dropped_attributes_count:\n          type: integer\n          description: |-\n            dropped_attributes_count is the number of dropped attributes. If the value is 0, then\n            no attributes were dropped.\n          format: int64\n      description: Resource information.\n    v1ResourceLogs:\n      type: object\n      properties:\n        resource:\n          $ref: '#/components/schemas/v1Resource'\n        instrumentation_library_logs:\n          type: array\n          description: A list of InstrumentationLibraryLogs that originate from a\n            resource.\n          items:\n            $ref: '#/components/schemas/v1InstrumentationLibraryLogs'\n        schema_url:\n          type: string\n          description: |-\n            This schema_url applies to the data in the \"resource\" field. It does not apply\n            to the data in the \"instrumentation_library_logs\" field which have their own\n            schema_url field.\n      description: A collection of InstrumentationLibraryLogs from a Resource.\n    v1SeverityNumber:\n      type: string\n      description: |-\n        Possible values for LogRecord.SeverityNumber.\n\n         - SEVERITY_NUMBER_UNSPECIFIED: UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.\n      default: SEVERITY_NUMBER_UNSPECIFIED\n      enum:\n      - SEVERITY_NUMBER_UNSPECIFIED\n      - SEVERITY_NUMBER_TRACE\n      - SEVERITY_NUMBER_TRACE2\n      - SEVERITY_NUMBER_TRACE3\n      - SEVERITY_NUMBER_TRACE4\n      - SEVERITY_NUMBER_DEBUG\n      - SEVERITY_NUMBER_DEBUG2\n      - SEVERITY_NUMBER_DEBUG3\n      - SEVERITY_NUMBER_DEBUG4\n      - SEVERITY_NUMBER_INFO\n      - SEVERITY_NUMBER_INFO2\n      - SEVERITY_NUMBER_INFO3\n      - SEVERITY_NUMBER_INFO4\n      - SEVERITY_NUMBER_WARN\n      - SEVERITY_NUMBER_WARN2\n      - SEVERITY_NUMBER_WARN3\n      - SEVERITY_NUMBER_WARN4\n      - SEVERITY_NUMBER_ERROR\n      - SEVERITY_NUMBER_ERROR2\n      - SEVERITY_NUMBER_ERROR3\n      - SEVERITY_NUMBER_ERROR4\n      - SEVERITY_NUMBER_FATAL\n      - SEVERITY_NUMBER_FATAL2\n      - SEVERITY_NUMBER_FATAL3\n      - SEVERITY_NUMBER_FATAL4\n",
			"canonicalURL": "/github.com/eBay/NautilusTelemetry@57ba0a217286b32de6758b44c5603afd31240116/-/blob/Sources/NautilusTelemetry/Exporters/OTLP-JSON/Logs/logs_service.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eBay/NautilusTelemetry/blob/57ba0a217286b32de6758b44c5603afd31240116/Sources/NautilusTelemetry/Exporters/OTLP-JSON/Logs/logs_service.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}