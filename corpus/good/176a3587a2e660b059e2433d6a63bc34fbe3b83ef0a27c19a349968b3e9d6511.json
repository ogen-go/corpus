{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ITISFoundation/osparc-simcore"
		},
		"file": {
			"name": "upload-v0.0.1.yaml",
			"size": 0,
			"path": "api/specs/webserver/upload-v0.0.1.yaml",
			"byteSize": 6688,
			"content": "openapi: 3.0.2\nservers: []\n\ninfo:\n  description: OSparc Upload API\n  version: \"0.0.1\"\n  title: OSparc Upload REST API\n  contact:\n    name: Tobias Oetiker\n    email: tobi@itis.swiss\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\n\ntags:\n  - name: multi-part upload\n    description: |\n      The REST API is modeled after the S3 multi part upload service\n      which makes this very simple to implement on the server side\n      especially if you have an S3 like [minio.io](https://www.minio.io/).\n\npaths:\n  /upload/start:\n    post:\n      tags:\n        - upload\n      summary: start an upload\n      operationId: uploadStart\n      description: Start or resume an upload\n      requestBody:\n        description: the properties of the File Object\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name: big-date.bin\n                size: 1000000000000\n                lastModified: 15294862961234\n              required:\n                - name\n                - size\n                - lastModified\n              properties:\n                name:\n                  type: string\n                  description: file name\n                size:\n                  type: integer\n                  format: int64\n                  description: file size in bytes\n                lastModified:\n                  type: integer\n                  format: int64\n                  description: last file modification in milliseconds since 1970-01-01\n\n      responses:\n        '200':\n          description: |\n            Meta information about the upload. If a pending upload has matched\n            the information given in the fileMetaData the response will contain\n            information about the already uploaded chunks of data.\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  uploadId: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD...\n                  partsPresent:\n                    - partNumber: 1\n                      size: 1024\n                      eTag: 7778aef83f66abc1fa1e8477f296d394\n                    - partNumber: 3\n                      size: 1024\n                      eTag: 8234979234987eafff384\n                required:\n                  - uploadId\n                  - partsPresent\n                properties:\n                  uploadId:\n                    type: string\n                  partsPresent:\n                    type: array\n                    minItems: 0\n                    items:\n                      type: object\n                      properties:\n                        partNumber:\n                          type: integer\n                          format: int64\n                        size:\n                          type: integer\n                          format: int64\n                        eTag:\n                          type: string\n                      required:\n                        - partNumber\n                        - size\n                        - eTag\n        '405':\n          description: Request was not formed as expected\n  /upload/part:\n    post:\n      tags:\n        - upload\n      summary: upload a data block\n      operationId: uploadPart\n      description: Upload a block of data\n      parameters:\n        - name: X-Upload-Id\n          in: header\n          required: true\n          description: which upload does this belong to\n          example: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD\n          schema:\n            type: string\n        - name: X-Upload-Part-Number\n          in: header\n          required: true\n          description: which part of the upload is this ?\n          example: 22\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: a raw block of data ... not encoded\n        # example: big-bad-binary-data\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: confirmation for the successful part upload\n\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - eTag\n                  - size\n                properties:\n                  eTag:\n                    description: Entity Tag of the part just uploaded\n                    type: string\n                  size:\n                    type: integer\n                    format: int64\n                example:\n                  eTag: 7e10e7d25dc4581d89b9285be5f384fd\n                  size: 9388854884884884\n        '404':\n          description: No Such Upload\n  /upload/complete:\n    post:\n      tags:\n        - upload\n      summary: complete upload process\n      operationId: uploadComplete\n      description: Complete upload process\n      requestBody:\n        description: a list of uploaded parts to be assembled into a file\n        content:\n          application/json:\n            schema:\n              type: array\n              # minItems: 1\n              example:\n                - partNumber: 1\n                  eTag: 7e10e7d25dc4581d89b9285be5f384fd\n                - partNumber: 2\n                  eTag: 1c10d25dc4581d89b9285be5f334fec5\n              items:\n                type: object\n                properties:\n                  partNumber:\n                    type: integer\n                    format: int64\n                  eTag:\n                    type: string\n                required:\n                  - partNumber\n                  - eTag\n      responses:\n          '201':\n            description: new file has been created\n            headers:\n              ETag:\n                description: Entity Tag of the newly created file\n                schema:\n                  type: string\n                  example: 1c10d25dc4581d89b9285be5f334fec5\n          '404':\n            description: No Such Upload\n  /upload/abort:\n    post:\n      tags:\n        - upload\n      summary: abort the pending upload\n      operationId: uploadAbort\n      description: Abort a pending multi part upload\n      requestBody:\n        description: cancel a pending upload\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                uploadId: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD\n              required:\n                - uploadId\n              properties:\n                uploadId:\n                  type: string\n      responses:\n        '200':\n          description: upload canceled\n        '404':\n          description: upload does not exist\n",
			"canonicalURL": "/github.com/ITISFoundation/osparc-simcore@226c16254c8fab772aa97ba14cbb1eff90b7e25b/-/blob/api/specs/webserver/upload-v0.0.1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ITISFoundation/osparc-simcore/blob/226c16254c8fab772aa97ba14cbb1eff90b7e25b/api/specs/webserver/upload-v0.0.1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}