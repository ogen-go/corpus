{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MetaCell/cloud-harness"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "libraries/api/openapi.yaml",
			"byteSize": 18117,
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: cloudharness\n  version: 1.0.0\ncomponents:\n  schemas:\n    AutoArtifactSpec:\n      description: \"\"\n      required:\n      - auto\n      type: object\n      properties:\n        auto:\n          description: \"When true, enables automatic template\"\n          type: boolean\n        name:\n          description: \"\"\n          type: string\n    UriRoleMappingConfig:\n      description: \"Defines the application Gatekeeper configuration, if enabled (i.e.\\\n        \\ `secured: true`.\"\n      required:\n      - roles\n      - uri\n      type: object\n      properties:\n        uri:\n          $ref: '#/components/schemas/PathSpecifier'\n          description: Path to secure\n        roles:\n          description: Roles allowed to access the present uri\n          type: array\n          items:\n            type: string\n    ServiceAutoArtifactConfig:\n      description: \"\"\n      type: object\n      allOf:\n      - type: object\n        properties:\n          port:\n            description: Service port\n            type: integer\n      - $ref: '#/components/schemas/AutoArtifactSpec'\n    DeploymentAutoArtifactConfig:\n      description: \"\"\n      type: object\n      allOf:\n      - type: object\n      - $ref: '#/components/schemas/AutoArtifactSpec'\n      properties:\n        port:\n          description: Deployment port\n        replicas:\n          description: Number of replicas\n          type: integer\n        image:\n          description: |-\n            Image name to use in the deployment. Leave it blank to set from the application's\n            Docker file\n          pattern: \"(?:[a-z]+/)?([a-z]+)(?::[0-9]+)?\"\n          type: string\n        resources:\n          description: Deployment resources\n    ApplicationDependenciesConfig:\n      description: \"\"\n      type: object\n      properties:\n        hard:\n          description: Hard dependencies indicate that the application may not start\n            without these other applications.\n          type: array\n          items:\n            type: string\n        soft:\n          description: Soft dependencies indicate that the application will work partially\n            without these other applications.\n          type: array\n          items:\n            type: string\n        build:\n          description: Hard dependencies indicate that the application Docker image\n            build requires these base/common images\n          type: array\n          items:\n            type: string\n    DeploymentResourcesConf:\n      description: \"\"\n      type: object\n      properties:\n        requests:\n          $ref: '#/components/schemas/CpuMemoryConfig'\n          description: \"\"\n        limits:\n          $ref: '#/components/schemas/CpuMemoryConfig'\n          description: \"\"\n    CpuMemoryConfig:\n      description: \"\"\n      type: object\n      properties:\n        cpu:\n          description: \"\"\n          type: string\n        memory:\n          description: \"\"\n          type: string\n    FileResourcesConfig:\n      description: \"\"\n      required:\n      - name\n      - src\n      - dst\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Filename'\n          description: \"\"\n        src:\n          $ref: '#/components/schemas/Filename'\n          description: \"\"\n        dst:\n          description: \"\"\n          type: string\n    ApplicationProbe:\n      description: \"\"\n      required:\n      - path\n      type: object\n      properties:\n        path:\n          $ref: '#/components/schemas/URL'\n          description: \"\"\n        periodSeconds:\n          description: \"\"\n          type: number\n        failureThreshold:\n          description: \"\"\n          type: number\n        initialDelaySeconds:\n          description: \"\"\n          type: number\n    URL:\n      description: \"\"\n      type: string\n    ApplicationConfig:\n      description: \"\"\n      required:\n      - harness\n      type: object\n      properties:\n        harness:\n          $ref: '#/components/schemas/ApplicationHarnessConfig'\n          description: \"\"\n      additionalProperties: true\n    HarnessMainConfig:\n      description: \"\"\n      required:\n      - local\n      - secured_gatekeepers\n      - domain\n      - namespace\n      - mainapp\n      - apps\n      type: object\n      properties:\n        local:\n          description: \"If set to true, local DNS mapping is added to pods.\"\n          type: boolean\n        secured_gatekeepers:\n          description: Enables/disables Gatekeepers on secured applications. Set to\n            false for testing/development\n          type: boolean\n        domain:\n          description: The root domain\n          type: string\n          example: The root domain.\n        namespace:\n          description: The K8s namespace.\n          type: string\n        mainapp:\n          description: Defines the app to map to the root domain\n          type: string\n        registry:\n          $ref: '#/components/schemas/RegistryConfig'\n          description: \"\"\n        tag:\n          description: Docker tag used to push/pull the built images.\n          type: string\n        apps:\n          $ref: '#/components/schemas/ApplicationsConfigsMap'\n          description: \"\"\n        env:\n          description: Environmental variables added to all pods\n          type: array\n          items:\n            $ref: '#/components/schemas/NameValue'\n        privenv:\n          $ref: '#/components/schemas/NameValue'\n          description: Private environmental variables added to all pods\n        backup:\n          $ref: '#/components/schemas/BackupConfig'\n          description: \"\"\n        name:\n          description: Base name\n          type: string\n        task-images:\n          $ref: '#/components/schemas/SimpleMap'\n          description: \"\"\n    RegistryConfig:\n      description: \"\"\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/URL'\n          description: The docker registry where built images are pushed\n        secret:\n          description: Optional secret used for pulling from docker registry.\n          type: string\n    SimpleMap:\n      description: \"\"\n      type: object\n      additionalProperties:\n        type: string\n    FreeObject:\n      description: \"\"\n      type: object\n      additionalProperties: true\n    DatabaseDeploymentConfig:\n      description: \"\"\n      type: object\n      allOf:\n      - type: object\n        properties:\n          type:\n            description: |-\n              Define the database type.\n\n              One of (mongo, postgres, neo4j, sqlite3)\n            pattern: ^(mongo|postgres|neo4j|sqlite3)$\n            type: string\n            example: '\"neo4j\"'\n          size:\n            description: Specify database disk size\n            type: string\n            example: 1Gi\n          user:\n            description: database username\n            type: string\n          pass:\n            format: password\n            description: Database password\n            type: string\n          image_ref:\n            description: Used for referencing images from the build\n            type: string\n            example: 'image_ref: myownpgimage'\n          mongo:\n            $ref: '#/components/schemas/FreeObject'\n            description: Mongo db specific configuration\n          postgres:\n            $ref: '#/components/schemas/FreeObject'\n            description: Postgres database specific configuration\n          neo4j:\n            description: Neo4j database specific configuration\n          resources:\n            $ref: '#/components/schemas/DeploymentResourcesConf'\n            description: Database deployment resources\n      - $ref: '#/components/schemas/AutoArtifactSpec'\n    ApplicationsConfigsMap:\n      description: \"\"\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/ApplicationConfig'\n    NameValue:\n      description: \"\"\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          description: \"\"\n          type: string\n        value:\n          description: \"\"\n          type: string\n    IngressConfig:\n      description: \"\"\n      type: object\n      allOf:\n      - type: object\n        properties:\n          ssl_redirect:\n            description: \"\"\n            type: boolean\n          letsencrypt:\n            description: \"\"\n            type: object\n            properties:\n              email:\n                type: string\n      - $ref: '#/components/schemas/AutoArtifactSpec'\n    BackupConfig:\n      description: \"\"\n      required:\n      - dir\n      - resources\n      type: object\n      properties:\n        active:\n          description: \"\"\n          type: boolean\n        keep_days:\n          description: \"\"\n          type: integer\n        keep_weeks:\n          description: \"\"\n          type: integer\n        keep_months:\n          description: \"\"\n          type: integer\n        schedule:\n          description: Cron expression\n          pattern: \"/(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every\\\n            \\ (\\\\d+(ns|us|Âµs|ms|s|m|h))+)|((((\\\\d+,)+\\\\d+|(\\\\d+(\\\\/|-)\\\\d+)|\\\\d+|\\\\\\\n            *) ?){5,7})/\"\n          type: string\n        suffix:\n          description: The file suffix added to backup files\n        volumesize:\n          description: The volume size for backups (all backups share the same volume)\n          type: string\n        dir:\n          $ref: '#/components/schemas/Filename'\n          description: \"Target directory of backups, the mount point of the persistent\\\n            \\ volume.\"\n        resources:\n          $ref: '#/components/schemas/DeploymentResourcesConf'\n          description: \"\"\n    UserGroup:\n      type: object\n      properties:\n        access:\n          type: object\n          additionalProperties: true\n        attributes:\n          $ref: '#/components/schemas/SimpleMap'\n          additionalProperties: true\n        clientRoles:\n          type: object\n          additionalProperties: true\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n        realmRoles:\n          type: array\n          items:\n            type: string\n        subGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserGroup'\n    UserCredential:\n      type: object\n      properties:\n        createdDate:\n          format: int64\n          type: integer\n        credentialData:\n          type: string\n        id:\n          type: string\n        priority:\n          format: int32\n          type: integer\n        secretData:\n          type: string\n        temporary:\n          type: boolean\n        type:\n          type: string\n        userLabel:\n          type: string\n        value:\n          type: string\n    User:\n      type: object\n      properties:\n        access:\n          type: object\n          additionalProperties: true\n        attributes:\n          type: object\n          additionalProperties: true\n        clientRoles:\n          type: object\n          additionalProperties: true\n        createdTimestamp:\n          format: int64\n          type: integer\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserCredential'\n        disableableCredentialTypes:\n          type: array\n          items:\n            type: string\n        email:\n          type: string\n        emailVerified:\n          type: boolean\n        enabled:\n          type: boolean\n        federationLink:\n          type: string\n        firstName:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n        id:\n          type: string\n        lastName:\n          type: string\n        realmRoles:\n          type: array\n          items:\n            type: string\n        requiredActions:\n          type: array\n          items:\n            type: string\n        serviceAccountClientId:\n          type: string\n        username:\n          type: string\n        additionalProperties: {}\n    Filename:\n      description: \"\"\n      pattern: \"^[^\u003c\u003e:;,?*|]+$\"\n      type: string\n    PathSpecifier:\n      description: \"\"\n      pattern: \"^[^\u003c\u003e:;,?|]+$\"\n      type: string\n    CDCEvent:\n      description: |-\n        A message sent to the orchestration queue.\n        Applications can listen to these events to react to data change events happening\n        on other applications.\n      required:\n      - message_type\n      - operation\n      - uid\n      - meta\n      type: object\n      properties:\n        operation:\n          description: the operation on the object e.g. create / update / delete\n          enum:\n          - create\n          - update\n          - delete\n          - other\n          type: string\n        uid:\n          description: the unique identifier attribute of the object\n          type: string\n        message_type:\n          description: the type of the message (relates to the object type) e.g. jobs\n          type: string\n        resource:\n          $ref: '#/components/schemas/FreeObject'\n          description: The target object\n        meta:\n          $ref: '#/components/schemas/CDCEventMeta'\n          description: \"\"\n    CDCEventMeta:\n      description: \"\"\n      required:\n      - app_name\n      type: object\n      properties:\n        app_name:\n          description: The name of the application/microservice sending the message\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n          description: \"\"\n        args:\n          description: the caller function arguments\n          type: array\n          items:\n            $ref: '#/components/schemas/FreeObject'\n        kwargs:\n          description: the caller function keyword arguments\n        description:\n          description: General description -- for human consumption\n          type: string\n    ApplicationHarnessConfig:\n      description: \"\"\n      type: object\n      properties:\n        deployment:\n          $ref: '#/components/schemas/DeploymentAutoArtifactConfig'\n          description: Defines reference deployment parameters. Values maps to k8s\n            spec\n        service:\n          $ref: '#/components/schemas/ServiceAutoArtifactConfig'\n          description: Defines automatic service parameters.\n        subdomain:\n          description: \"If specified, an ingress will be created at [subdomain].[.Values.domain]\"\n          type: string\n        aliases:\n          description: \"If specified, an ingress will be created at [alias].[.Values.domain]\\\n            \\ for each alias\"\n          type: array\n          items:\n            type: string\n        domain:\n          description: \"If specified, an ingress will be created at [domain]\"\n          type: string\n        dependencies:\n          $ref: '#/components/schemas/ApplicationDependenciesConfig'\n          description: Application dependencies are used to define what is required\n            in the deployment when --include (-i) is used. Specify application names\n            in the list.\n        secured:\n          description: \"When true, the application is shielded with a getekeeper\"\n          type: boolean\n        uri_role_mapping:\n          description: \"Map uri/roles to secure with the Gatekeeper (if `secured:\\\n            \\ true`)\"\n          type: array\n          items:\n            $ref: '#/components/schemas/UriRoleMappingConfig'\n        secrets:\n          $ref: '#/components/schemas/SimpleMap'\n          description: |-\n            Define secrets will be mounted in the deployment\n\n            Define as\n\n            ```yaml\n            secrets:\n                secret_name: 'value'\n\n            ```\n\n            Values if left empty are randomly generated\n        use_services:\n          description: \"Specify which services this application uses in the frontend\\\n            \\ to create proxy ingresses. e.g. \\n```\\n- name: samples\\n```\"\n          type: array\n          items:\n            type: string\n        database:\n          $ref: '#/components/schemas/DatabaseDeploymentConfig'\n          description: \"\"\n        resources:\n          description: |-\n            Application file resources. Maps from deploy/resources folder and mounts as\n            configmaps\n          type: array\n          items:\n            $ref: '#/components/schemas/FileResourcesConfig'\n        readinessProbe:\n          $ref: '#/components/schemas/ApplicationProbe'\n          description: \"\"\n        startupProbe:\n          $ref: '#/components/schemas/ApplicationProbe'\n          description: \"\"\n        livenessProbe:\n          $ref: '#/components/schemas/ApplicationProbe'\n          description: \"\"\n        sourceRoot:\n          $ref: '#/components/schemas/Filename'\n          description: \"\"\n        name:\n          description: \"\"\n          type: string\n        jupyterhub:\n          $ref: '#/components/schemas/JupyterHubConfig'\n          description: \"\"\n      additionalProperties: true\n    JupyterHubConfig:\n      description: \"\"\n      type: object\n      properties:\n        args:\n          description: arguments passed to the container\n          type: array\n          items:\n            type: string\n        extraConfig:\n          $ref: '#/components/schemas/SimpleMap'\n          description: allows you to add Python snippets to the jupyterhub_config.py\n            file\n        spawnerExtraConfig:\n          $ref: '#/components/schemas/FreeObject'\n          description: allows you to add values to the spawner object without the\n            need of creating a new hook\n        applicationHook:\n          description: \"change the hook function (advanced)\\n\\nSpecify the Python\\\n            \\ name of the function (full module path, the module must be \\ninstalled\\\n            \\ in the Docker image)\"\n          example: my_lib.change_pod_manifest\n      additionalProperties: true\n    UserRole:\n      type: object\n      properties:\n        attributes:\n          type: object\n          additionalProperties: true\n        clientRole:\n          type: boolean\n        composite:\n          type: boolean\n        containerId:\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n      additionalProperties: true\n",
			"canonicalURL": "/github.com/MetaCell/cloud-harness@1677e55fe23347e0162ef6f34cc1416f62841f8c/-/blob/libraries/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MetaCell/cloud-harness/blob/1677e55fe23347e0162ef6f34cc1416f62841f8c/libraries/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}