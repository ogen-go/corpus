{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/carrot2/carrot2"
		},
		"file": {
			"name": "dcs.yaml",
			"size": 0,
			"path": "dcs/contexts/service/src/main/webapp/openapi/dcs.yaml",
			"byteSize": 11582,
			"content": "# Edit with https://editor.swagger.io/\nopenapi: 3.0.0\n\ninfo:\n  title: Carrot2 REST API\n  version: '${project.version}'\n  description: |\n    Carrot2 Clustering API service documentation and descriptor (in OpenAPI 3.0 format).\n\n    Note that there are many tools that parse the OpenAPI descriptor file and can produce\n    interactive environment to play with the service, without any need for coding. Examples\n    include:\n\n    * https://editor.swagger.io/\n    * https://mrin9.github.io/RapiDoc/\n    * https://github.com/Redocly/redoc\n\n  contact:\n    name: Carrot2\n    url: 'https://carrot2.org'\n  license:\n    name: Apache 2.0\n\ntags:\n  - name: Clustering\n    description: |\n      The clustering service provides a very basic, stateless API essentially composed of a single\n      endpoint. Please refer to full Carrot2 documentation for more detailed instructions on the use\n      of parameters, templates and other details.\n\n  - name: Configuration\n    description: |\n      Informational services returning available algorithms, preset configuration\n      templates and language components.\n\nx-tagGroups:\n  - name: Service Endpoints\n    tags:\n      - Clustering\n      - Configuration\n\nservers:\n  - url: 'http://localhost:{port}/service'\n    description: \"Typical localhost deployment at a given port\"\n    variables:\n      port:\n        description: \"Deployment port (default 8080)\"\n        default: \"8080\"\n  - url: '/service'\n    description: \"Relative service link\"\n\npaths:\n  /cluster:\n    post:\n      operationId: Cluster\n      summary: Cluster documents\n      description: \u003e-\n        This method accepts a set of documents consisting of text fields, clusters\n        these documents and returns them back to the caller.\n      tags:\n        - Clustering\n      requestBody:\n        description: \u003e-\n          The input request, including algorithm specification, parameters\n          and documents (document fields) to be clustered. The body of the\n          request is parsed after the template (if any) is applied so each\n          request may modify just the parameters it needs.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClusterRequest'\n            examples:\n              \"Lingo algorithm, English\":\n                value: {\n                  \"language\": \"English\",\n                  \"algorithm\": \"Lingo\",\n                  \"parameters\": {\n                    \"preprocessing\": {\n                      \"phraseDfThreshold\": 1,\n                      \"wordDfThreshold\": 1\n                    }\n                  },\n                  \"documents\": [\n                  { \"field\": \"foo bar\" },\n                  { \"field\": \"bar\" },\n                  { \"field\": \"baz\" }\n                  ]\n                }\n              \"STC algorithm, English\":\n                value: {\n                  \"language\": \"English\",\n                  \"algorithm\": \"STC\",\n                  \"parameters\": {\n                    \"minBaseClusterScore\": 1\n                  },\n                  \"documents\": [\n                  { \"field\": \"foo bar\" },\n                  { \"field\": \"bar\" },\n                  { \"field\": \"baz\" }\n                  ]\n                }\n              \"Invalid request/ response example (language missing)\":\n                value: {\n                  \"language\": \"Klingon\",\n                  \"algorithm\": \"STC\",\n                  \"documents\": [\n                  ]\n                }\n      responses:\n        '200':\n          description: \u003e-\n            Returns clustered documents. The returned identifiers of documents\n            reflect their input order (0-based). The returned set of clusters\n            may be empty.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterResponse'\n              examples:\n                Typical response:\n                  value: {\n                    \"clusters\": [\n                    {\n                      \"labels\": [\"ABC\"],\n                      \"documents\": [0, 2, 4],\n                      \"clusters\": [],\n                      \"score\": 120.2\n                    },\n                    {\n                      \"labels\": [\"Foo\", \"Bar\"],\n                      \"documents\": [1, 5],\n                      \"clusters\": [],\n                      \"score\": 20\n                    },\n                    ]\n                  }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/UnhandledError'\n      parameters:\n        - $ref: '#/components/parameters/IndentParam'\n        - in: query\n          name: template\n          allowEmptyValue: false\n          description: \u003e-\n            Optional name of one of the preconfigured parameter templates to\n            use for clustering.\n          schema:\n            type: string\n\n  /list:\n    get:\n      operationId: List\n      summary: List service configuration\n      description: \u003e-\n        This method can be used to inspect the list of available algorithms, their\n        supported languages and preconfigured request templates available for the\n        clustering service.\n      tags:\n        - Configuration\n      responses:\n        '200':\n          description: Valid successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListResponse'\n              examples:\n                Typical valid response:\n                  value: {\n                    \"algorithms\": {\n                      \"Bisecting K-Means\": [ \"English\", \"French\" ],\n                      \"Lingo\": [ \"English\", \"French\" ],\n                      \"STC\": [ \"English\", \"French\" ]\n                    },\n                    \"templates\": {\n                      \"frontend-default\": {\n                        \"algorithm\" : \"English\",\n                        \"language\" : \"Lingo\"\n                      },\n                      \"stc\": {\n                        \"algorithm\": \"STC\"\n                      }\n                    }\n                  }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/UnhandledError'\n      parameters:\n        - $ref: '#/components/parameters/IndentParam'\n\ncomponents:\n  parameters:\n    IndentParam:\n      in: query\n      name: indent\n      allowEmptyValue: true\n      description: 'Make the returned JSON more human friendly (add indents).'\n      schema:\n        type: boolean\n\n  schemas:\n    ClusterRequest:\n      description: Request to the /cluster endpoint.\n      type: object\n      properties:\n        language:\n          description: \u003e-\n            An identifier of the language to be used for clustering (as returned\n            from the /list endpoint).\n          type: string\n        algorithm:\n          description: \u003e-\n            An identifier of the algorithm to be used for clustering (as\n            returned from the /list endpoint).\n          type: string\n        parameters:\n          description: \u003e-\n            A map of algorithm parameters to override. The content of this map\n            will depend on the available tuning attributes.\n          type: object\n          additionalProperties: true\n          example:\n            param1: \"...\"\n            param2: \"...\"\n        documents:\n          description: \u003e-\n            An array of documents to be clustered (each a collection of fields).\n          type: array\n          items:\n            $ref: '#/components/schemas/Document'\n          example:\n            - field1: \"doc. 1, some value\"\n            - field1: \"doc. 2, some value\"\n            - field1: \"doc. 3, some value\"\n              field2: \"doc. 3, different field's value\"\n\n    ClusterResponse:\n      description: Response from the /cluster endpoint.\n      type: object\n      properties:\n        clusters:\n          description: A list of clusters (can be empty).\n          type: array\n          items:\n            $ref: '#/components/schemas/Cluster'\n\n    ListResponse:\n      description: Response from the /list endpoint.\n      type: object\n      properties:\n        algorithms:\n          description: \u003e-\n            A map of algorithms and languages associated\n            with each algorithm.\n          example: {\n            \"algorithms\": {\n              \"Lingo\": [\"English\", \"French\"]\n            }\n          }\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        templates:\n          description: \u003e-\n            A map of named request templates and their template body content.\n          example: {\n            \"templates\": {\n              \"template-name\": {\n                \"algorithm\": \"foo\",\n                \"language\": \"bar\"\n              }\n            }\n          }\n          type: object\n          additionalProperties:\n            type: object\n      required:\n        - algorithms\n        - templates\n\n    Document:\n      description: An input document for clustering.\n      type: object\n      additionalProperties:\n        type: string\n      example: {\n        \"field1\": \"value1\",\n        \"field2\": \"value2\",\n        \"field3\": [\"multiple-entry field value 1\", \"value 2\"]\n      }\n\n    Cluster:\n      type: object\n      properties:\n        labels:\n          description: \u003e-\n            One or more string labels associated with this cluster.\n          type: array\n          minItems: 1\n          items:\n            type: string\n        documents:\n          description: \u003e-\n            One or more documents associated with this cluster. Documents are\n            referenced by their sequential number as they appeared on input.\n          type: array\n          items:\n            type: integer\n        score:\n          description: \u003e-\n            Numeric score associated with this cluster.\n          type: number\n        clusters:\n          description: \u003e-\n            An array of nested clusters (possibly empty).\n          type: array\n          items:\n            $ref: '#/components/schemas/Cluster'\n          example: []\n\n    ErrorResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \"Problem type (enum).\"\n          enum:\n            - BAD_REQUEST\n            - LICENSING\n            - UNHANDLED_ERROR\n        message:\n          type: string\n          description: \"Problem description.\"\n        exception:\n          type: string\n          description: \"Exception class.\"\n        stacktrace:\n          type: string\n          description: \"Exception stack trace.\"\n      required:\n        - type\n        - message\n  responses:\n    BadRequest:\n      description: \"A response to invalid or incomplete request\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n          examples:\n            example:\n              value: {\n                \"type\": \"BAD_REQUEST\",\n                \"message\": \"Could not parse request body.\",\n                \"exception\": \"com.fasterxml.jackson.databind.exc.MismatchedInputException\",\n                \"stacktrace\": \"...\"\n              }\n    UnhandledError:\n      description: \"An unhandled internal server error\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n          examples:\n            example:\n              value: {\n                \"type\": \"UNHANDLED_ERROR\",\n                \"message\": \"Oops.\",\n                \"exception\": \"\",\n                \"stacktrace\": \"...\"\n              }\n",
			"canonicalURL": "/github.com/carrot2/carrot2@bc9e065833c19256b92e5e3cae6a4178bf97c616/-/blob/dcs/contexts/service/src/main/webapp/openapi/dcs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/carrot2/carrot2/blob/bc9e065833c19256b92e5e3cae6a4178bf97c616/dcs/contexts/service/src/main/webapp/openapi/dcs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}