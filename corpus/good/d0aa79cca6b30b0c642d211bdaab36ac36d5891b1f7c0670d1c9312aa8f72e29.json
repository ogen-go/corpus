{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/xendit/hackerrank-backend-test"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 6873,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: 'hackerank-backend-test Swagger Docs'\n  description: 'Hackerrank backend test'\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: 'https://localhost:80'\n  - description: Local development\n    url: 'http://localhost:3000'\npaths:\n  /:\n    get:\n      tags:\n        - root\n      operationId: getRoot\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Root'\n  /healthcheck/liveness:\n    get:\n      tags:\n        - healthcheck\n      operationId: getLiveness\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Healthcheck'\n  /healthcheck/readiness:\n    get:\n      tags:\n        - healthcheck\n      operationId: getReadiness\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Healthcheck'\n  /error/{error_code}:\n    get:\n      tags:\n        - error\n        - example\n      operationId: getErrorExample\n      parameters:\n        - name: error_code\n          in: path\n          description: Error HTTP code\n          required: true\n          schema:\n            type: string\n            enum: ['200', '400', '403', '422', '500']\n      responses:\n        200:\n          description: default response, instruction to use this endpoint\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n        400:\n          description: example error 400 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400Response'\n        403:\n          description: example error 403 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error403Response'\n        404:\n          description: example error 404 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404Response'\n        422:\n          description: example error 422 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error422Response'\n        500:\n          description: example error 500 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500Response'\n\ncomponents:\n  schemas:\n    Healthcheck:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          type: string\n          example: 'OK'\n    Root:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          example: 'OK'\n    User:\n      type: object\n      required:\n        - id\n        - firstName\n        - lastName\n        - address\n        - isActive\n      properties:\n        id:\n          type: number\n          example: 11\n        firstName:\n          type: string\n          example: 'Carl'\n        lastName:\n          type: string\n          example: 'Sagan'\n        address:\n          type: string\n          example: 'Cosmos'\n        isActive:\n          type: boolean\n          example: true\n    UserRequest:\n      type: object\n      required:\n        - firstName\n        - lastName\n        - address\n        - isActive\n      properties:\n        firstName:\n          type: string\n          example: 'Carl'\n        lastName:\n          type: string\n          example: 'Sagan'\n        address:\n          type: string\n          example: 'Cosmos'\n        isActive:\n          type: boolean\n          example: true\n\n    UserUpdateRequest:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: 'Carl'\n        lastName:\n          type: string\n          example: 'Sagan'\n        address:\n          type: string\n          example: 'Cosmos'\n        isActive:\n          type: boolean\n          example: true\n\n    Error400Response:\n      type: object\n      required:\n        - error_code\n        - message\n      properties:\n        error_code:\n          type: string\n          enum:\n            - API_VALIDATION_ERROR\n            - CREDIT_CARD_DATA_ERROR\n            - INVALID_JSON_FORMAT\n        message:\n          type: string\n        errors:\n          $ref: '#/components/schemas/ArrayOfErrors'\n    Error403Response:\n      type: object\n      required:\n        - error_code\n        - message\n      properties:\n        error_code:\n          type: string\n          enum:\n            - REQUEST_FORBIDDEN_ERROR\n        message:\n          type: string\n        errors:\n          $ref: '#/components/schemas/ArrayOfErrors'\n    Error404Response:\n      type: object\n      required:\n        - error_code\n        - message\n      properties:\n        error_code:\n          type: string\n          enum:\n            - USER_NOT_FOUND\n            - CREDIT_CARD_CHARGE_NOT_FOUND_ERROR\n        message:\n          type: string\n        errors:\n          $ref: '#/components/schemas/ArrayOfErrors'\n    Error422Response:\n      type: object\n      required:\n        - error_code\n        - message\n      properties:\n        error_code:\n          type: string\n          enum:\n            - GENERATE_CHECKOUT_URL_ERROR\n            - DUPLICATE_PAYMENT_ERROR\n        message:\n          type: string\n        errors:\n          $ref: '#/components/schemas/ArrayOfErrors'\n    Error500Response:\n      type: object\n      required:\n        - error_code\n        - message\n      properties:\n        error_code:\n          type: string\n          enum:\n            - INTERNAL_SERVER_ERROR\n        message:\n          type: string\n        errors:\n          $ref: '#/components/schemas/ArrayOfErrors'\n    ArrayOfErrors:\n      nullable: true\n      type: array\n      items:\n        oneOf:\n          - type: string\n          - type: object\n  parameters:\n    clientVersion:\n      in: header\n      name: client-version\n      description: The requester's client version used to access this service\n      schema:\n        type: string\n        example: 'v1.0.0'\n      required: true\n    teamName:\n      in: header\n      name: team-name\n      description: The requester's team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading=h.msfrxiz473dv)\n      schema:\n        type: string\n        example: disbursement\n      required: true\n    serviceName:\n      in: header\n      name: service-name\n      description: The requester's service name\n      schema:\n        type: string\n        example: disbursement-service\n      required: true\n",
			"canonicalURL": "/github.com/xendit/hackerrank-backend-test@674466018df016f6af9dc23c978d9d6a6f210212/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/xendit/hackerrank-backend-test/blob/674466018df016f6af9dc23c978d9d6a6f210212/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}