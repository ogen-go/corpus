{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/codesearch.debian.net/1.4.0/openapi.yaml",
			"byteSize": 7335,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://codesearch.debian.net/api/v1\ninfo:\n  contact:\n    email: stapelberg@debian.org\n  description: OpenAPI for https://codesearch.debian.net/\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Debian Code Search\n  version: 1.4.0\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://codesearch.debian.net/openapi.yaml\n      version: \"3.0\"\n  x-providerName: codesearch.debian.net\nexternalDocs:\n  description: Get a Debian Code Search API key\n  url: https://codesearch.debian.net/apikeys/\ntags:\n  - description: Code Search\n    name: search\npaths:\n  /search:\n    get:\n      description: |-\n        Performs a search through the full Debian Code Search corpus, blocking until all results are available (might take a few seconds depending on the search query).\n\n        Search results are ordered by their ranking (best results come first).\n      operationId: search\n      parameters:\n        - description: The search query, for example `who knows...` (literal) or `who knows\\.\\.\\.` (regular expression). See https://codesearch.debian.net/faq for more details about which keywords are supported. The regular expression flavor is RE2, see https://github.com/google/re2/blob/master/doc/syntax.txt\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: Whether the query is to be interpreted as a literal (`literal`) instead of as an RE2 regular expression (`regexp`). Literal searches are faster and do not require escaping special characters, regular expression searches are more powerful.\n          in: query\n          name: match_mode\n          schema:\n            default: regexp\n            enum:\n              - literal\n              - regexp\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SearchResult\"\n                type: array\n          description: All search results\n        \"403\":\n          content: {}\n          description: The x-dcs-apikey header was either not set at all, or contained an invalid (no longer valid?) API key. Please see https://codesearch.debian.net/apikeys/ for obtaining a key.\n      security:\n        - api_key: []\n      summary: Searches through source code\n      tags:\n        - search\n  /searchperpackage:\n    get:\n      description: \"The search results are currently sorted arbitrarily, but we intend to sort them by ranking eventually: https://github.com/Debian/dcs/blob/51338e934eb7ee18d00c5c18531c0790a83cb698/cmd/dcs-web/querymanager.go#L719\"\n      operationId: searchperpackage\n      parameters:\n        - description: The search query, for example `who knows...` (literal) or `who knows\\.\\.\\.` (regular expression). See https://codesearch.debian.net/faq for more details about which keywords are supported. The regular expression flavor is RE2, see https://github.com/google/re2/blob/master/doc/syntax.txt\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: Whether the query is to be interpreted as a literal (`literal`) instead of as an RE2 regular expression (`regexp`). Literal searches are faster and do not require escaping special characters, regular expression searches are more powerful.\n          in: query\n          name: match_mode\n          schema:\n            default: regexp\n            enum:\n              - literal\n              - regexp\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PackageSearchResult\"\n                type: array\n          description: All search results\n        \"403\":\n          content: {}\n          description: The x-dcs-apikey header was either not set at all, or contained an invalid (no longer valid?) API key. Please see https://codesearch.debian.net/apikeys/ for obtaining a key.\n      security:\n        - api_key: []\n      summary: Like /search, but aggregates per package\n      tags:\n        - search\ncomponents:\n  parameters:\n    matchModeParam:\n      description: Whether the query is to be interpreted as a literal (`literal`) instead of as an RE2 regular expression (`regexp`). Literal searches are faster and do not require escaping special characters, regular expression searches are more powerful.\n      in: query\n      name: match_mode\n      schema:\n        default: regexp\n        enum:\n          - literal\n          - regexp\n        type: string\n    queryParam:\n      description: The search query, for example `who knows...` (literal) or `who knows\\.\\.\\.` (regular expression). See https://codesearch.debian.net/faq for more details about which keywords are supported. The regular expression flavor is RE2, see https://github.com/google/re2/blob/master/doc/syntax.txt\n      in: query\n      name: query\n      required: true\n      schema:\n        type: string\n  schemas:\n    PackageSearchResult:\n      properties:\n        package:\n          description: The Debian source package for which up to 2 search results have been aggregated in `results`.\n          example: i3-wm_4.18-1\n          type: string\n        results:\n          items:\n            $ref: \"#/components/schemas/SearchResult\"\n          type: array\n      required:\n        - package\n        - results\n      type: object\n    SearchResult:\n      description: A search result matching the specified query. You can use sources.debian.org to view the file contents. See https://github.com/Debian/dcs/blob/master/cmd/dcs-web/show/show.go for how to construct a sources.debian.org URL from a search result.\n      properties:\n        context:\n          description: The full line containing the search result.\n          example: '        i3Font cursor_font = load_font(\"cursor\", false);'\n          type: string\n        context_after:\n          description: Up to 2 full lines after the search result (see `context`).\n          example:\n            - \"        xcb_create_glyph_cursor(\"\n            - \"            xcb_connection,\"\n          items:\n            type: string\n          type: array\n        context_before:\n          description: Up to 2 full lines before the search result (see `context`).\n          example:\n            - \"    } else {\"\n            - \"        cursor = xcb_generate_id(xcb_connection);\"\n          items:\n            type: string\n          type: array\n        line:\n          description: Line number containing the search result.\n          example: 1313\n          format: uint32\n          type: integer\n        package:\n          description: The Debian source package containing this search result, including the full Debian version number.\n          example: i3-wm_4.18-1\n          type: string\n        path:\n          description: Path to the file containing the this search result, starting with `package`.\n          example: i3bar/src/xcb.c\n          type: string\n      required:\n        - context\n        - line\n        - package\n        - path\n      type: object\n  securitySchemes:\n    api_key:\n      in: header\n      name: x-dcs-apikey\n      type: apiKey\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/codesearch.debian.net/1.4.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/codesearch.debian.net/1.4.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}