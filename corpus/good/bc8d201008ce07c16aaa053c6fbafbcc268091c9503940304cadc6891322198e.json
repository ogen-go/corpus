{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Poly-Haven/Public-API"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 20482,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: Poly Haven API\n  version: \"1.0.0\"\n  description: Provides endpoints for getting lists of assets, categories, and information about individual assets on polyhaven.com. The API is hosted at https://api.polyhaven.com\n  license:\n    name: AGPL\n    url: https://github.com/Poly-Haven/Public-API/blob/master/LICENSE\n  contact:\n    name: Poly Haven\n    url: https://api.polyhaven.com\n    email: info@polyhaven.com\nservers:\n  - url: https://api.polyhaven.com\ntags:\n  - name: assets\n    description: Endpoints for interacting with assets.\npaths:\n  /types:\n    get:\n      summary: List of asset types available.\n      description: \"We currently publish three types of assets: `hdris`, `textures` and `models`. This endpoint simply returns an array of those types.\"\n      tags:\n        - assets\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Array of asset types\n                example: [\"hdris\", \"textures\", \"models\"]\n  /assets:\n    get:\n      summary: A list of assets, including their individual metadata.\n      description: To filter the returned data, some **optional arguments** can by provided in the request URL (e.g. `/assets?t=hdris\u0026c=outdoor`)\n      tags:\n        - assets\n      parameters:\n        - name: type\n          in: query\n          description: Filter to assets of a particular type. Can be `hdris`/`textures`/`models`/`all`.\n          schema:\n            type: string\n          example: textures\n        - name: categories\n          in: query\n          description: A comma-separated list of categories to filter by. Only assets that match all categories specified will be included. Use the `/categories` endpoint to get a list of available categories.\n          schema:\n            type: string\n          example: brick\n        - name: author\n          in: query\n          description: Filter to assets by a specific author.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/assets\"\n        \"400\":\n          description: Bad request, e.g. unsupported asset type\n  /info/{id}:\n    get:\n      summary: Information about an individual asset specified by its unique ID.\n      tags:\n        - assets\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The unique ID/slug of the asset\n          schema:\n            type: string\n          example: abandoned_factory_canteen_01\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/hdri\"\n                  - $ref: \"#/components/schemas/texture\"\n                  - $ref: \"#/components/schemas/model\"\n        \"400\":\n          description: Bad request, e.g. missing {id}\n        \"404\":\n          description: No asset found with that ID\n  /files/{id}:\n    get:\n      summary: File list for a specific asset.\n      description: Many files are available for each asset, most of which are available in different resolutions and file formats. This endpoint provides a tree containing all the available files organized by resolution and file type.\n      tags:\n        - assets\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The unique ID/slug of the asset\n          schema:\n            type: string\n          example: ceramic_vase_03\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/hdriFiles\"\n                  - $ref: \"#/components/schemas/textureFiles\"\n                  - $ref: \"#/components/schemas/modelFiles\"\n        \"400\":\n          description: Bad request, e.g. missing {id}\n        \"404\":\n          description: No asset found with that ID\n  /author/{id}:\n    get:\n      summary: Information about a specific author.\n      description: Returns some data about the requested author, such as their name (which may be different from the ID), links, email (if available), etc.\n      tags:\n        - assets\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The unique ID of the author\n          schema:\n            type: string\n          example: Andreas Mischok\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/author\"\n        \"400\":\n          description: Bad request, e.g. missing {id}\n        \"404\":\n          description: No author found with that ID\n  /categories/{type}:\n    get:\n      summary: A list of available categories.\n      description: The list of categories also show the number of assets inside them. If `all` is passed as the {type}, then rather than returning categories, it simply returns a list of the asset types instead, with their asset counts.\n      tags:\n        - assets\n      parameters:\n        - name: type\n          in: path\n          required: true\n          description: \"One of the supported asset types: `hdris`, `textures`, or `models`.\"\n          schema:\n            type: string\n            example: hdris\n        - name: in\n          in: query\n          description: A comma separated list of categories - only returns categories with assets that are also in these categories. The value of each key is then also only counting assets that are in both the categories specified and the key. If this is not specified, then an `all` \"category\" is also returned, with the count of all assets of the specified type.\n          schema:\n            type: string\n            example: night,clear\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  $category:\n                    type: integer\n                    description: Count of assets in this category.\n              example:\n                all: 512\n                natural light: 434\n                outdoor: 377\n                urban: 272\n                nature: 265\n                low contrast: 188\n                high contrast: 182\n                morning-afternoon: 181\n                partly cloudy: 171\n                medium contrast: 141\n                indoor: 140\n                skies: 130\n                clear: 117\n                sunrise-sunset: 114\n                midday: 103\n                artificial light: 103\n                overcast: 76\n                night: 31\n                studio: 18\n        \"400\":\n          description: Bad request, e.g. missing or unsupported {type}\n\ncomponents:\n  schemas:\n    assets:\n      type: object\n      properties:\n        assetID:\n          type: object\n          description: Asset data, see schema for `asset`.\n      example:\n        aerial_asphalt_01:\n          name: Aerial Asphalt 01\n          type: 1\n          date_published: 1597061145\n          download_count: 33151\n          authors:\n            Rob Tuytel: All\n          categories:\n            - asphalt\n            - outdoor\n            - floor\n            - road\n            - man made\n          tags:\n            - road\n            - flat\n            - cracked\n          dimensions:\n            - 30000\n            - 30000\n        aerial_beach_01:\n          name: Aerial Beach 01\n          type: 1\n          date_published: 1601489165\n          download_count: 33556\n          authors:\n            Rob Tuytel: All\n          categories:\n            - terrain\n            - sand\n            - outdoor\n            - natural\n          tags:\n            - beach\n            - wavy\n            - costal\n            - ocean\n            - seaside\n          dimensions:\n            - 30000\n            - 30000\n    asset:\n      type: object\n      description: All asset types include this data.\n      properties:\n        name:\n          type: string\n          description: The human-readable/display name.\n          example: Horse Statue 01\n        type:\n          type: integer\n          description: The asset type. HDRIs = 0, textures = 1, models =2.\n          example: 2\n        date_published:\n          type: integer\n          description: The epoch timestamp in seconds of when this asset was published.\n          example: 1634860800\n        download_count:\n          type: integer\n          description: The number of times this asset was downloaded. Useful for sorting by popularity.\n          example: 12345\n        authors:\n          type: object\n          description: Who created this asset, and what they did.\n          properties:\n            $authorID:\n              type: string\n              description: Credit\n          example:\n            Rico Cilliers: All\n        donated:\n          nullable: true\n          type: boolean\n          description: Whether or not this asset was donated free of charge to us.\n          example: false\n        categories:\n          type: array\n          description: A string array of categories that this asset belongs to.\n          example:\n            - props\n            - decorative\n        tags:\n          type: array\n          description: A string array of tags for this asset to help with search matches.\n          example:\n            - decorative\n            - horse\n            - statue\n            - figurine\n            - porcelain\n            - animal\n            - sculpture\n            - white\n            - fancy\n    hdri:\n      type: object\n      description: HDRI data, extends `asset` schema.\n      properties:\n        name:\n          type: string\n          description: The human-readable/display name.\n          example: Abandoned Factory Canteen 01\n        type:\n          type: integer\n          description: The asset type, for HDRIs this is 0.\n          example: 0\n        date_published:\n          type: integer\n          description: The epoch timestamp in seconds of when this asset was published.\n          example: 1600725600\n        download_count:\n          type: integer\n          description: The number of times this asset was downloaded. Useful for sorting by popularity.\n          example: 12345\n        authors:\n          type: object\n          description: Who created this asset, and what they did.\n          properties:\n            $authorID:\n              type: string\n              description: Credit\n          example:\n            Sergej Majboroda: All\n        donated:\n          nullable: true\n          type: boolean\n          description: Whether or not this asset was donated free of charge to us.\n          example: false\n        categories:\n          type: array\n          description: A string array of categories that this asset belongs to.\n          example:\n            - indoor\n            - urban\n            - low contrast\n            - natural light\n        tags:\n          type: array\n          description: A string array of tags for this asset to help with search matches.\n          example:\n            - hall\n            - abandoned\n            - fluorescent\n            - industrial\n            - backplates\n        whitebalance:\n          nullable: true\n          type: integer\n          description: The whitebalance in Kelvin that this HDRI and any included backplates were shot at. May not be present for all assets.\n          example: 5450\n        backplates:\n          nullable: true\n          type: boolean\n          description: Whether there are backplates available for this HDRI.\n          example: true\n        evs_cap:\n          type: integer\n          description: The number of exposure brackets captured when shooting this HDRI. I.e. the difference between the brightest and darkest shots, an indication of dynamic range.\n          example: 15\n        coords:\n          nullable: true\n          type: array\n          description: Decimal lat/lon GPS coordinates.\n          example: [50.995194, 35.105417]\n        date_taken:\n          type: integer\n          deprecated: true\n          description: Legacy (untrustworthy) epoch timestamp of when this HDRI was taken. Timezone issues caused this data to be generally unused and inaccurate. May be solved in future but don't depend on it!\n          example: 1591789620\n    texture:\n      type: object\n      description: Texture data, extends `asset` schema.\n      properties:\n        name:\n          type: string\n          description: The human-readable/display name.\n          example: Brick Floor 003\n        type:\n          type: integer\n          description: The asset type, for textures this is 1.\n          example: 1\n        date_published:\n          type: integer\n          description: The epoch timestamp in seconds of when this asset was published.\n          example: 1618385199\n        download_count:\n          type: integer\n          description: The number of times this asset was downloaded. Useful for sorting by popularity.\n          example: 12345\n        authors:\n          type: object\n          description: Who created this asset, and what they did.\n          properties:\n            $authorID:\n              type: string\n              description: Credit\n          example:\n            Dimitrios Savva: Photography\n            Rob Tuytel: Processing\n        donated:\n          nullable: true\n          type: boolean\n          description: Whether or not this asset was donated free of charge to us.\n          example: false\n        categories:\n          type: array\n          description: A string array of categories that this asset belongs to.\n          example:\n            - floor\n            - brick\n            - man made\n            - outdoor\n            - indoor\n            - clean\n            - wall\n        tags:\n          type: array\n          description: A string array of tags for this asset to help with search matches.\n          example:\n            - brown\n            - floor\n            - pavement\n        dimensions:\n          type: array\n          description: An array with the dimensions of this asset on each axis in millimeters.\n          example: [2000, 2000]\n    model:\n      type: object\n      description: Model data, extends `asset` schema.\n      properties:\n        name:\n          type: string\n          description: The human-readable/display name.\n          example: Horse Statue 01\n        type:\n          type: integer\n          description: The asset type, for models this is 2.\n          example: 2\n        date_published:\n          type: integer\n          description: The epoch timestamp in seconds of when this asset was published.\n          example: 1634860800\n        download_count:\n          type: integer\n          description: The number of times this asset was downloaded. Useful for sorting by popularity.\n          example: 12345\n        authors:\n          type: object\n          description: Who created this asset, and what they did.\n          properties:\n            $authorID:\n              type: string\n              description: Credit\n          example:\n            Rico Cilliers: All\n        donated:\n          nullable: true\n          type: boolean\n          description: Whether or not this asset was donated free of charge to us.\n          example: false\n        categories:\n          type: array\n          description: A string array of categories that this asset belongs to.\n          example:\n            - props\n            - decorative\n        tags:\n          type: array\n          description: A string array of tags for this asset to help with search matches.\n          example:\n            - decorative\n            - horse\n            - statue\n            - figurine\n            - porcelain\n            - animal\n            - sculpture\n            - white\n            - fancy\n    hdriFiles:\n      type: object\n      properties:\n        hdri:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                $format:\n                  $ref: \"#/components/schemas/file\"\n        backplates:\n          nullable: true\n          type: object\n          properties:\n            $image:\n              type: object\n              properties:\n                $format:\n                  $ref: \"#/components/schemas/file\"\n        colorchart:\n          $ref: \"#/components/schemas/optionalFile\"\n        tonemapped:\n          $ref: \"#/components/schemas/optionalFile\"\n    textureFiles:\n      type: object\n      properties:\n        blend:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                blend:\n                  $ref: \"#/components/schemas/fileWithIncludes\"\n        gltf:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                gltf:\n                  $ref: \"#/components/schemas/fileWithIncludes\"\n        $map:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                $format:\n                  $ref: \"#/components/schemas/file\"\n    modelFiles:\n      type: object\n      properties:\n        blend:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                blend:\n                  $ref: \"#/components/schemas/fileWithIncludes\"\n        gltf:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                gltf:\n                  $ref: \"#/components/schemas/fileWithIncludes\"\n        fbx:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                fbx:\n                  $ref: \"#/components/schemas/fileWithIncludes\"\n        $map:\n          type: object\n          properties:\n            $resolution:\n              type: object\n              properties:\n                $format:\n                  $ref: \"#/components/schemas/file\"\n    file:\n      type: object\n      properties:\n        url:\n          type: string\n          description: Direct URL to download this file.\n        md5:\n          type: string\n          description: MD5 checksum for verifying file integrity.\n        size:\n          type: integer\n          description: Size of the file in bytes.\n    optionalFile:\n      type: object\n      properties:\n        url:\n          type: string\n          description: Direct URL to download this file.\n        md5:\n          type: string\n          description: MD5 checksum for verifying file integrity.\n        size:\n          type: integer\n          description: Size of the file in bytes.\n    fileWithIncludes:\n      type: object\n      properties:\n        url:\n          type: string\n          description: Direct URL to download this file.\n        md5:\n          type: string\n          description: MD5 checksum for verifying file integrity.\n        size:\n          type: integer\n          description: Size of the file in bytes.\n        include:\n          type: object\n          description: A list of files that this file depends on and should be included when downloaded, typically textures that the model/texture uses.\n          properties:\n            $path:\n              $ref: \"#/components/schemas/file\"\n    author:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The author's full name, which may be different from the ID.\n          example: Jorge Camacho\n        link:\n          nullable: true\n          type: string\n          description: The author's preferred link to their portfolio.\n          example: https://www.artstation.com/jorgeandrespinedac\n        email:\n          nullable: true\n          type: string\n          description: Email address of the author.\n          example: foo@bar.com\n        donate:\n          nullable: true\n          type: string\n          description: Donation info of this author. May be a link to a donation page, or an email prefixed with `paypal:` to indicate a PayPal address.\n          example: paypal:foo@bar.com\n",
			"canonicalURL": "/github.com/Poly-Haven/Public-API@da95dffc2917ebcad258b19744a7d083373869b3/-/blob/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Poly-Haven/Public-API/blob/da95dffc2917ebcad258b19744a7d083373869b3/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}