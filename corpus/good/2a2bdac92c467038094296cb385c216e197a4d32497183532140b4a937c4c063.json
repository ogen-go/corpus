{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JustynDuthler/Slot-Me-In"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/api/openapi.yaml",
			"byteSize": 35902,
			"content": "#\n# SlotMeIn Backend\n#\n\nopenapi: \"3.0.3\"\n\ninfo:\n  description: API for SlotMeIn, a business timeslot reservation web app\n  version: 0.1.0\n  title: SlotMeIn API\n\nservers:\n  - url: http://localhost:3010/api\n\npaths:\n  /test/get_token:\n    get:\n      description: Gets a test token\n\n      responses:\n        200:\n          description: a jwt is being sent\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n  /test/get_business_token:\n    get:\n      description: Gets a business test token\n      responses:\n        200:\n          description: a jwt is being sent\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n  /test/test_token:\n    post:\n      description: Test API to check token sending\n      security:\n        - bearerAuth: []\n      responses:\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        200:\n          description: Accepted JWT\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthTestSchema\"\n  /test/get_token_type:\n    get:\n      description: Returns whether token is a business or user token\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: User Type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthTestSchema\"\n        401:\n          description: Token is missing or expired\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /users/getUserEvents:\n    get:\n      description: Gets events a user has signed up for based on JWT\n      tags:\n        - users\n      security:\n        - bearerAuth: []\n      responses:\n        403:\n          description: Wrong user type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        200:\n          description: Sending user events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n\n  /users/getUser:\n    get:\n      description: Gets user information\n      tags:\n        - users\n      security:\n        - bearerAuth: []\n      responses:\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Wrong user type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        200:\n          description: Sending user info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n\n  /users/signup:\n    post:\n      description: Creates a new user account\n      tags:\n        - users\n      requestBody:\n        description: User details to set for user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewAccount\"\n      responses:\n        201:\n          description: Successfully created user account\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n        400:\n          description: Unexpected property in account details\n        409:\n          description: Account with given email already exists\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /users/login:\n    post:\n      description: Validate user account credentials during login\n      tags:\n        - users\n      requestBody:\n        description: Account credentials to login with\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserLogin\"\n      responses:\n        200:\n          description: Successful login\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n        400:\n          description: Email and password must be specified\n        401:\n          description: Incorrect password\n        404:\n          description: User account with given email not found\n\n  /users/removeUserAttending:\n    delete:\n      description: remove a user from the given event\n      tags:\n        - users\n      requestBody:\n        description: eventid\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserEvent'\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Successful delete\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /users/{userid}/events:\n    get:\n      description: Retrieves all events that a user has signed up for\n      tags:\n        - users\n      parameters:\n        - name: userid\n          in: path\n          description: ID of user to retrieve events from\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully retrieved events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n        404:\n          description: User with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /businesses/signup:\n    post:\n      description: Creates a new business account\n      tags:\n        - businesses\n      requestBody:\n        description: Business details to set for account\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewAccount\"\n      responses:\n        201:\n          description: Successfully created business account\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n        400:\n          description: Unexpected property in account details\n        409:\n          description: Account with given email already exists\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /businesses/login:\n    post:\n      description: Validate business account credentials during login\n      tags:\n        - businesses\n      requestBody:\n        description: Account credentials to login with\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserLogin\"\n      responses:\n        200:\n          description: Successful login\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserToken\"\n        400:\n          description: Email and password must be specified\n        401:\n          description: Incorrect password\n        404:\n          description: Business account with given email not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /businesses/getBusiness:\n    get:\n      description: Gets business information\n      tags:\n        - businesses\n      security:\n        - bearerAuth: []\n      responses:\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Wrong user type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        200:\n          description: Sending business info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Business'\n\n\n  /businesses/getBusinessEvents:\n    get:\n      description: Gets events a business has created based on JWT\n      tags:\n        - businesses\n      security:\n        - bearerAuth: []\n      responses:\n        403:\n          description: Wrong user type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        200:\n          description: Sending business events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n  /businesses/{businessid}/events:\n    get:\n      description: Retrieves all events that a business has created\n      tags:\n        - businesses\n      parameters:\n        - name: businessid\n          in: path\n          description: ID of business to retrieve events from\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully retrieved events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n        404:\n          description: Business with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /businesses/checkBusinessID:\n    get:\n      description: get the business info\n      tags:\n        - businesses\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Given ID is a business ID\n        401:\n          description: Token is missing or expired\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        403:\n          description: Given ID is not a business ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /businesses/{businessid}:\n    get:\n      description: Retrieves business information associated with a specified businessID\n      tags:\n        - businesses\n      parameters:\n        - name: businessid\n          in: path\n          description: ID of business to get\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully retrieved business info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Business\"\n        404:\n          description: Business with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /businesses:\n    get:\n      description: Retrieves business information for all businesses\n      tags:\n        - businesses\n      responses:\n        200:\n          description: Successfully retrieved businesses\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BusinessList\"\n        404:\n          description: Businesses not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /businesses/uploadProfileImage:\n    post:\n      description: Upload a business profile pictures\n      tags:\n        - businesses\n      requestBody:\n        description: binary image database\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                Image:\n                  type: string\n                  format: binary\n      security:\n        - bearerAuth: []\n      responses:\n        201:\n          description: successfully uploaded profile image\n        400:\n          description: wrong file type\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: cannot save image\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n  /businesses/getProfileImage:\n    get:\n      description: get a business profile picture\n      tags:\n        - businesses\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: successfully retrieved profile image\n          content:\n            application/json:\n              schema:\n                type: string\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: cannot read image from server\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /businesses/{businessid}/getProfileImage:\n    get:\n      description: get a business profile picture for individual event page\n      tags:\n        - businesses\n      parameters:\n        - name: businessid\n          in: path\n          description: ID of business to retrieve events from\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: successfully retrieved profile image\n          content:\n            application/json:\n              schema:\n                type: string\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: cannot read image from server\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /events:\n    post:\n      description: Create a new event\n      tags:\n        - events\n      requestBody:\n        description: Event details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Event\"\n      security:\n        - bearerAuth: []\n      responses:\n        201:\n          description: Successfully created event, returns event with generated event ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        400:\n          description: Unexpected property in event details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      description: Get a list of events\n      tags:\n        - events\n      parameters:\n        - name: start\n          in: query\n          schema:\n            type: string\n            format: date-time\n          description: Get only events starting after a given timestamp (optional)\n        - name: end\n          in: query\n          schema:\n            type: string\n            format: date-time\n          description: Get only events ending before a given timestamp (optional)\n        - name: search\n          in: query\n          schema:\n            type: string\n          description: Search events by text (optional)\n        - name: category\n          in: query\n          schema:\n            type: string\n          description: Search events by category (optional)\n        - name: membersonly\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as membersonly (optional)\n        - name: over18\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as 18+ (optional)\n        - name: over21\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as 21+ (optional)\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Successfully retrieved events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /events/{eventid}:\n    get:\n      description: Retrieves a single event associated with a specified eventID\n      tags:\n        - events\n      parameters:\n        - name: eventid\n          in: path\n          description: ID of event to get\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully retrieved event\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        404:\n          description: Event with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      description: Deletes an event associated with an eventID\n      tags:\n        - events\n      parameters:\n        - name: eventid\n          in: path\n          description: ID of event to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: deleteAll\n          in: query\n          description: For a repeating event, delete all other instances of this event\n          required: false\n          schema:\n            type: boolean\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Successfully deleted event\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        404:\n          description: Event with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /events/{eventid}/signup:\n    put:\n      description: Signup for event associated with specified eventID\n      tags:\n        - events\n      parameters:\n        - name: eventid\n          in: path\n          description: ID of event to signup for\n          required: true\n          schema:\n            type: string\n            format: uuid\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Successfully signed up for event\n        403:\n          description: User does not meet event restrictions\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        404:\n          description: Event ID does not exist\n        409:\n          description: User already signed up for this event\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /events/publicEvents:\n    get:\n      description: Returns an array of public events\n      tags:\n        - events\n      responses:\n        200:\n          description: Successfully returned events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventList'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /events/publicAndMemberEvents/{useremail}:\n    get:\n      description: Returns an array of upcoming public and member events\n      tags:\n        - events\n      parameters:\n        - name: useremail\n          in: path\n          description: Email of member to retrieve events for\n          required: true\n          schema:\n            type: string\n            format: email\n        - name: all\n          in: query\n          description: Return all events, including past events (default false)\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Successfully returned events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventList'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /events/search/{useremail}:\n    get:\n      description: Returns an array of public and member events\n      tags:\n        - events\n      parameters:\n        - name: useremail\n          in: path\n          description: Email of member to retrieve events for\n          required: true\n          schema:\n            type: string\n            format: email\n        - name: start\n          in: query\n          schema:\n            type: string\n            format: date-time\n          description: Get only events starting after a given timestamp (optional)\n        - name: end\n          in: query\n          schema:\n            type: string\n            format: date-time\n          description: Get only events ending before a given timestamp (optional)\n        - name: search\n          in: query\n          schema:\n            type: string\n          description: Search events by text (optional)\n        - name: category\n          in: query\n          schema:\n            type: string\n          description: Search events by category (optional)\n        - name: membersonly\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as membersonly (optional)\n        - name: over18\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as 18+ (optional)\n        - name: over21\n          in: query\n          schema:\n            type: boolean\n          description: Get events marked as 21+ (optional)\n      responses:\n        200:\n          description: Successfully returned events\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventList'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /events/categories:\n    get:\n      description: Returns an array of all the possible categories\n      tags:\n        - events\n      responses:\n        200:\n          description: successfully retrieved categories\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoryList'\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /attendees/{eventid}:\n    get:\n      description: Retrieves number of attendees for an event\n      tags:\n        - attendees\n      parameters:\n        - name: eventid\n          in: path\n          description: ID of event to get\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Successfully retrieved attendees\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AttendeesList\"\n        404:\n          description: Event with specified ID not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /members/getMembers:\n    get:\n      description: gets the members of a business\n      tags:\n        - members\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: Successfully retrieved members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MemberList\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        409:\n          description: no members exist\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /members/insertMembers:\n    post:\n      description: adds member emails to members table\n      tags:\n        - members\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: array of member emails\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailList\"\n      responses:\n        200:\n          description: Successfully inserted emails\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MemberList\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        403:\n          description: Authorization Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        500:\n          description: cannot insert into database\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /members/deleteMember:\n    delete:\n      description: Deletes a single member from the member list\n      tags:\n        - members\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Email string\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n      responses:\n        200:\n          description: Email successfully removed from member table\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Members\"\n\n  /members/getRestrictedEvents/{useremail}:\n    get:\n      description: Retrieves all events for businesses a member is a part of\n      tags:\n        - members\n      parameters:\n        - name: useremail\n          in: path\n          description: Email of member to retrieve events for\n          required: true\n          schema:\n            type: string\n            format: email\n      responses:\n        200:\n          description: Successfully retrieved events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventList\"\n        404:\n          description: User email not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /members/getMemberBusinesses/{useremail}:\n    get:\n      description: Retrieves all businesses a member is a part of\n      tags:\n        - members\n      parameters:\n        - name: useremail\n          in: path\n          description: Email of member to retrieve businesses for\n          required: true\n          schema:\n            type: string\n            format: email\n      responses:\n        200:\n          description: Successfully retrieved businesses\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BusinessList\"\n        404:\n          description: User email not found\n        default:\n          description: Unexpected Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n\n\n\n\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n  # 1) Define the security scheme type (HTTP bearer)\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n\n  schemas:\n    AuthTestSchema:\n      type: object\n      properties:\n        auth:\n          type: string\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n\n    NewAccount:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          format: password\n        birthdate:\n          type: string\n          format: date-time\n        phonenumber:\n          type: string\n          pattern: '^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$'\n          example: \"123-456-7890\"\n        description:\n          type: string\n      required:\n        - name\n        - email\n        - password\n\n    UserLogin:\n      type: object\n      maxProperties: 2\n      additionalProperties: false\n      properties:\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          format: password\n      required:\n        - email\n        - password\n    User:\n      type: object\n      additionalProperties: false\n      properties:\n        userid:\n          type: string\n          format: uuid\n        username:\n          type: string\n        useremail:\n          type: string\n          format: email\n        birthdate:\n          type: string\n          format: date-time\n      required:\n        - userid\n        - username\n        - useremail\n        - birthdate\n    UserList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/User\"\n    Business:\n      type: object\n      maxProperties: 5\n      additionalProperties: false\n      properties:\n        businessid:\n          type: string\n          format: uuid\n        businessname:\n          type: string\n        email:\n          type: string\n          format: email\n        phonenumber:\n          type: string\n          pattern: '^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$'\n          example: \"123-456-7890\"\n        description:\n          type: string\n      required:\n        - businessid\n        - businessname\n        - email\n    BusinessList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Business\"\n    UserToken:\n      type: object\n      maxProperties: 1\n      additionalProperties: false\n      properties:\n        auth_token:\n          type: string\n      required:\n        - auth_token\n    UserEvent:\n      type: object\n      maxProperties: 1\n      additionalProperties: false\n      properties:\n        eventid:\n          type: string\n          format: uuid\n      required:\n        - eventid\n    Event:\n      type: object\n      additionalProperties: false\n      properties:\n        eventid:\n          type: string\n          format: uuid\n        businessid:\n          type: string\n          format: uuid\n        eventname:\n          type: string\n        description:\n          type: string\n        starttime:\n          type: string\n          format: date-time\n        endtime:\n          type: string\n          format: date-time\n        attendees:\n          type: integer\n        capacity:\n          type: integer\n        repeat:\n          type: boolean\n        repeattype:\n          type: string\n          maxLength: 1\n        repeatdays:\n          $ref: \"#/components/schemas/RepeatDays\"\n        repeatstart:\n          type: string\n          format: date-time\n        repeatend:\n          type: string\n          format: date-time\n        repeatid:\n          nullable: true\n          type: string\n          format: uuid\n        businessname:\n          type: string\n        membersonly:\n          type: boolean\n        over18:\n          type: boolean\n        over21:\n          type: boolean\n        category:\n          type: string\n          nullable: true\n      required:\n        - eventname\n        - starttime\n        - endtime\n        - capacity\n    EventList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Event\"\n    CategoryList:\n      type: array\n      items:\n        type: object\n        additionalProperties: false\n        properties:\n          category:\n            type: string\n    RepeatDays:\n      type: object\n      additionalProperties: false\n      properties:\n        sunday:\n          type: boolean\n        monday:\n          type: boolean\n        tuesday:\n          type: boolean\n        wednesday:\n          type: boolean\n        thursday:\n          type: boolean\n        friday:\n          type: boolean\n        saturday:\n          type: boolean\n\n    Attendees:\n      type: object\n      additionalProperties: false\n      properties:\n        eventid:\n          type: string\n          format: uuid\n        userid:\n          type: string\n          format: uuid\n\n    AttendeesList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Attendees\"\n    Emails:\n      type: string\n      format: email\n    EmailList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Emails\"\n    Members:\n      type: object\n      additionalProperties: false\n      properties:\n        username:\n          type: string\n          nullable: true\n        email:\n          type: string\n          format: email\n        userid:\n          type: string\n          nullable: true\n          format: uuid\n        birthdate:\n          type: string\n          format: date-time\n    MemberList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Members\"\n",
			"canonicalURL": "/github.com/JustynDuthler/Slot-Me-In@89efd71a4dcf46a5a697e6295d7c5f3595b03955/-/blob/backend/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JustynDuthler/Slot-Me-In/blob/89efd71a4dcf46a5a697e6295d7c5f3595b03955/backend/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}