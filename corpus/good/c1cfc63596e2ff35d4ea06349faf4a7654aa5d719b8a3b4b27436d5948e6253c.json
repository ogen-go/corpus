{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CartoDB/cartodb"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "doc/developer-center/import-api/reference/swagger.yaml",
			"byteSize": 38400,
			"content": "openapi: 3.0.0\ninfo:\n  title: Import API\n  description: \u003e\n    # Introduction\n\n    The CARTO Import API allows you to upload files to a CARTO account, \n    check on their current upload status, as well as delete and list importing \n    processes on a given account. This API consists of several HTTP requests targeted \n    at a set of CARTO endpoints that deal with the conversion and import of the sent files. \n    CARTO tables can be classified as Standard Tables or Sync Tables. Additionally, \n    the ArcGIS Server™ Connector enables you to import ArcGIS™ layers into your datasets.\n\n    # Authorization\n\n    In order to access Maps API you must provide an API key. The CARTO\n    Authorization guide explains how these keys are sent (TLDR: _HTTP basic\n    auth_ or _query string param_ with the API key token). Depending on the\n    permissions granted to the provided API key, the request will be authorized\n    or not.\n  version: 0.0.1\n  contact:\n    name: Have you found an error? Github issues\n    url: 'https://github.com/CartoDB/Windshaft-cartodb/issues'\nservers:\n  - url: 'https://{user}.{domain}/api'\n    description: Production server (uses live data)\n    variables:\n      domain:\n        default: carto.com\n        description: 'If on premise, change it to your domain'\n      user:\n        default: username\n        description: Your username\ntags:\n  - name: Standard Tables\n    description: Store data you upload from files creating tables at CARTO\n    externalDocs:\n      url: 'http://doc.carto.com/pet-operations.htm'\n  - name: CARTO Map Visualizations\n    description: Download a map, and the connected dataset, as a .carto file\n    externalDocs:\n      url: 'http://doc.carto.com/pet-operations.htm'\n  - name: Sync Tables\n    description: Store data from a remote file and refresh their contents during periodic intervals\n    externalDocs:\n      url: 'http://doc.carto.com/pet-operations.htm'\npaths:\n  '/v1/imports':\n    post:\n      summary: Create import\n      description: |\n        Upload File\n      tags:\n        - Standard Tables\n      operationId: createImport\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateImport'\n            examples:\n              url:\n                $ref: '#/components/examples/CreateImportUrl'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestResponse'\n              example:\n                item_queue_id: 9906bce0-f1a3-4b07-be71-818f4bfd7673\n                success: true\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -v -F file=@/path/to/local/file \"https://{account}\n            .carto.com/api/v1/imports/?api_key={account API Key}\"\n    get:\n      summary: List current import processes\n      description: Lists the import identifiers of the files that are being imported in the targeted CARTO account\n      tags:\n        - Standard Tables\n      operationId: getImports\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  imports:\n                    type: array\n                    description: A list of unique alphanumeric identifiers referencing the import processes in the targeted CARTO account\n                    items:\n                      type: string\n                  success:\n                    type: boolean\n                    description: A boolean value indicating if the request was successful\n              example:\n                imports:\n                  - \"1234abcd-1234-1a2b-3c4d-4321dcba5678\"\n                success: true\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v \"https://{account}.carto.com/api/v1/imports/?api_key={account API Key}\"\n  '/v1/imports/{import_id}':\n    get:\n      parameters:\n        - in: path\n          name: import_id\n          description: A unique alphanumeric element that identifies the import process to be retrieved. It is the `item_queue_id` element returned after running the upload request successfully.\n          schema:\n            type: string\n          required: true\n      summary: Check import status\n      description: |\n        Returns the Import's status and its associated metadata.\n      tags:\n        - Standard Tables\n      operationId: getImportStatus\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportStatusResponse'\n              example:\n                id: 029a6053-b2fb-43dd-baa6-805d679c404f\n                user_id: ca8c5ace-d573-450b-8a43-6c7eafadd80e\n                table_id: null\n                data_type: url\n                table_name: null\n                state: failure\n                error_code: 1002\n                queue_id: 029a6053-b2fb-43dd-baa6-805d679c404f\n                tables_created_count: null\n                synchronization_id: null\n                type_guessing: true\n                quoted_fields_guessing: true\n                content_guessing: false\n                create_visualization: false\n                visualization_id: null\n                user_defined_limits: '{twitter_credits_limit:0}'\n                get_error_text:\n                  title: Unsupported/Unrecognized file type\n                  what_about: 'Should we support this filetype? Let us know in our \u003ca href=''mailto:support@carto.com''\u003esupport email\u003c/a\u003e!'\n                  source: user\n                display_name: shapefile_streets.cpg\n                success: false\n                warnings: null\n                is_raster: false\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v \"https://{account}.carto.com/api/v1/imports/{import_id}?api_key={account API Key}\n  '/v3/visualization_exports':\n    post:\n      summary: Export as .carto file\n      description: |\n        The Export map option enables you to download a map, \n        and the connected dataset, as a .carto file. This .carto\n        file includes the dataset and visualization definition,\n        which contains any SQL queries, CartoCSS, basemaps,\n        attributions, metadata, and styling that was applied to a\n        map. This is useful for downloading complete CARTO\n        visualizations that you can share or import.\n\n        Note: The Import API export visualization command only works for maps created from `Your maps` dashboard.\n      tags:\n        - CARTO Map Visualizations\n      operationId: exportCarto\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExportCarto'\n            example:\n              visualization_id: 'ace62506-brc8-6570-2p91-8vf3af3ftc44'\n                \n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportCartoResponse'\n              example:\n                id: 'b94c26f3-fa16-4f13-b672-45ebbd5a9c95'\n                visualization_id: 'ace62506-brc8-6570-2p91-8vf3af3ftc44'\n                user_id: '42b78090-6a11-475a-8060-0a90322752af2b'\n                state: 'pending'\n                url: null\n                created_at: '2016-05-05T09:36:09+00:00'\n                updated_at: '2016-05-05T09:36:09+00:00'\n                \n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -v -H 'Content-Type: application/json' https://{username}.carto.com/api/v3/visualization_exports\\?api_key\\={api_key} -X POST --data '{\"visualization_id\":\"9a0f4384-afe3-412a-8b09-136b7d9a4013\"}'\n  '/v3/visualization_exports/{visualization_export_id}':\n    get:\n      parameters:\n        - in: path\n          name: visualization_export_id\n          description: A unique alphanumeric element that identifies the export process to be retrieved. It is the `id` element returned after running the export request successfully.\n          schema:\n            type: string\n          required: true\n      summary: Check .carto export status\n      description: |\n        After making the POST request to create the export, it is expected that the request will take some time. You must poll the server by making a GET request, until state becomes complete. Once completed, the response status changes to `complete` and displays the upload url location of the .carto visualization file\n      tags:\n        - CARTO Map Visualizations\n      operationId: getExportStatus\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportCartoResponse'\n              example:\n                id: 'b94c26f3-fa16-4f13-b672-45ebbd5a9c95'\n                visualization_id: 'ace62506-brc8-6570-2p91-8vf3af3ftc44'\n                user_id: '42b78090-6a11-475a-8060-0a90322752af2b'\n                state: 'complete'\n                url: '/uploads/6a2b6fbd86e2c750160a/ace62506-brc8-6570-2p91-8vf3af3ftc44.carto'\n                created_at: '2016-05-05T09:36:09+00:00'\n                updated_at: '2016-05-05T09:36:13+00:00'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v \"https://{account}.carto.com/api/v3/visualization_exports/{visualization_export_id}?api_key={account API Key}\n  '/v1/synchronizations':\n    get:\n      summary: List current sync tables\n      description: List current sync tables\n      tags:\n        - Sync Tables\n      operationId: getSyncTables\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListSyncTablesResponse'\n              example:\n                synchronizations:\n                - id: 246dae5e-5302-1ae5-af51-0e85ad047bba\n                  name: barrios_5\n                  interval: 2592000\n                  url: https://common-data.carto.com/api/v2/sql?q=select+*+from+%22barrios%22\u0026format=shp\u0026filename=barrios\n                  state: success\n                  created_at: '2015-09-04T12:40:37+00:00'\n                  updated_at: '2016-02-01T12:45:07+00:00'\n                  run_at: '2016-03-02T12:45:07+00:00'\n                  retried_times: 0\n                  log_id: 2d9b4a52-1daa-429b-b425-6ad561609cb1\n                  error_code: null\n                  error_message: null\n                  ran_at: '2016-02-01T12:45:07+00:00'\n                  modified_at: '2015-04-22T12:17:50+00:00'\n                  etag: null\n                  checksum: null\n                  user_id: cf8a5cce-d573-4a0b-8c43-6caeaf1dd80e\n                  service_name: null\n                  service_item_id: https://common-data.carto.com/api/v2/sql?q=select+*+from+%22barrios%22\u0026format=shp\u0026filename=barrios\n                  type_guessing: true\n                  quoted_fields_guessing: true\n                  content_guessing: true\n                  visualization_id: 2954fa60-5a02-11e5-888a-0e5e07bb5d8a\n                  from_external_source: false\n                total_entries: 1\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v \"https://{username}.carto.com/api/v1/synchronizations/?api_key={account API Key}\"\n    post:\n      summary: Sync a file from a URL\n      description: |\n        Desc\n      tags:\n        - Sync Tables\n      operationId: syncTable\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSyncTablesPayload'\n            example:\n              url: 'https://public.url.to.file/sample_file'\n              interval: 3600\n                \n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateSyncTablesResponse'\n              example:\n                  data_import:\n                    endpoint: \"/api/v1/imports\"\n                    item_queue_id: 1234abcd-1234-1a2b-3c4d-4321dcba5678\n                  id: abcd1234-a5b6-c7d8-1a2b-efgh5678abcd\n                  name: null\n                  interval: 3600\n                  url: https://public.url.to.file/sample_file\n                  state: created\n                  user_id: aaaabbbb-1234-5678-dcba-abcd1234efgh\n                  created_at: '2014-08-05T13:39:15+00:00'\n                  updated_at: '2014-08-05T13:39:15+00:00'\n                  run_at: '2014-08-05T14:39:15+00:00'\n                  ran_at: '2014-08-05T13:39:15+00:00'\n                  modified_at: null\n                  etag: null\n                  checksum: ''\n                  log_id: 06fafab8-3502-11e4-9514-0e230854a1cb\n                  error_code: null\n                  error_message: null\n                  retried_times: 0\n                  service_name: null\n                  service_item_id: null\n                  type_guessing: true\n                  quoted_fields_guessing: true\n                  content_guessing: false\n                  visualization_id: null\n                  from_external_source: false\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -v -H \"Content-Type: application/json\" -d '{\"url\":\"https://public.url.to.file/sample_file\", \"interval\":\"3600\"}' \"https://{username}.carto.com/api/v1/synchronizations/?api_key={account API Key}\"\n  '/v1/synchronizations/{import_id}':\n    delete:\n      summary: Remove sync feature from table\n      description: A sync table can be converted to a standard dataset (a dataset that never gets synced)\n      tags:\n        - Sync Tables\n      operationId: removeSyncTables\n      parameters:\n        - in: path\n          name: import_id\n          description: The unique alphanumeric identifier of the target sync dataset\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: No content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v -X \"DELETE\" https://{username}.carto.com/api/v1/synchronizations/{import_id}?api_key={account API Key}\"\n  '/v1/synchronizations/{import_id}/sync_now':\n    get:\n      summary: Check whether a sync table is syncing or not\n      description: A large synced table may take some time to get fully synced. In the meantime, it could be useful to check whether it finished refreshing its contents\n      tags:\n        - Sync Tables\n      operationId: checkSyncTables\n      parameters:\n        - in: path\n          name: import_id\n          description: The unique alphanumeric identifier of the target sync dataset\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  state:\n                    type: string\n                    enum:\n                      - created\n                      - queued\n                      - syncing\n                      - success\n                      - failure\n                    title: State\n                    description: A string value indicating the status of the synchronization\n              example:\n                  state: syncing\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -v -X \"GET\" \"https://{username}.carto.com/api/v1/synchronizations/{import_id}/sync_now?api_key={account API Key}\"\n    put:\n      summary: Force a synchronization action on a sync table\n      description: |\n        Sync tables have their contents synchronized with the source file in periodic time intervals as specified by the user during the creation process. However, a dataset can be synchronized at an arbitrary moment in time if desired. Note: Forcing a synchronization can only be performed when the last synchronization attempt occurred at least 900 seconds (15 minutes) before.\n      tags:\n        - Sync Tables\n      operationId: forceSyncTable\n      parameters:\n        - in: path\n          name: import_id\n          description: The unique alphanumeric identifier of the target sync dataset\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  enqueued:\n                    type: boolean\n                    title: Enqueued\n                    description: A boolean value indicating whether the request has been successfully appended to the processing queue\n                  synchronization_id  :\n                    type: string\n                    title: Synchronization ID\n                    description: A unique alphanumeric identifier referring to the queue element just added\n              example:\n                enqueued: false\n                synchronization_id: \"1234abcd-aaaa-2222-4444-dcba4321a1b2\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -v -X \"PUT\" \"https://{username}.carto.com/api/v1/synchronizations/\u003cimport_id\u003e/sync_now?api_key={account API Key}\" -H \"Content-Length:0\"\ncomponents:\n  schemas:\n    CreateImport:\n      type: object\n      properties:\n        file:\n          $ref: '#/components/schemas/File'\n        url:\n          $ref: '#/components/schemas/Url'\n        type_guessing:\n          type: boolean\n          default: true\n          title: Type guessing\n          description:   If set to `false` disables field type guessing (for Excel and CSVs)\n        quoted_fields_guessing:\n          type: boolean\n          default: false\n          title: Quoted fields guessing\n          description:   If set to `false` disables type guessing of CSV fields that come inside double quotes\n        content_guessing:\n          type: boolean\n          default: false\n          title: Content guessing\n          description:   Set to `true` to enable content guessing and automatic geocoding based on results. Currently, this only implements geocoding of countries, cities and IP addresses\n        create_vis:\n          type: boolean\n          default: false\n          title: Create Vis\n          description:   Set to `true` to flag the import so that when it finishes, it creates a Map automatically after importing the Dataset\n        collision_strategy:\n          type: string\n          enum:\n            - skip\n            - overwrite\n          title: Collision strategy\n          description: \u003e \n            Determines the behavior when importing a dataset \n            that has the same name as an existing table. By default,\n            it is imported and renamed with a sequential number\n            (*mytable*, *mytable_1*…).\n            \n            - `skip`: the table with the\n            matching name will not be imported.\n            \n            - `overwrite`: it will replace\n            the table with the matching name, but only if the new\n            dataset table includes the same columns and data types as\n            the original table. The new table can also include\n            additional columns, but not fewer than the original table. \n        privacy:\n          type: string\n          enum:\n            - public\n            - private\n            - link\n          title: Collision strategy\n          description: \u003e \n              Used to set the privacy settings of the table or\n              tables resulting from the import.\n              If `create_vis` is set to true, the resulting\n              visualization privacy settings will also be \n              determined by this parameter. \n              \n              `privacy` can be set to:\n            \n              - `public`: The resulting table or visualization can be viewed by anyone\n              \n              - `private`: The resulting table or visualization can only be viewed by the uploader\n              \n              - `link`: The resulting table or visualization can only be viewed through a private link shared by the uploader\n        table_name:\n          type: string\n          title: Table name\n          description:   Used to duplicate one of your existing tables. **Do not mix with File/URL imports**\n        sql:\n          type: string\n          title: SQL\n          description:   Used to create a new table from a SQL query applied to one of your tables. **Do not mix with File/URL imports**\n    File:\n      type: string\n      title: file\n      description: When importing local files, you need to perform a POST with a file \n    Url:\n      type: string\n      title: url\n      description: When importing remote files, the full URL to the publicly accessible file\n    RequestResponse:\n      type: object\n      properties:\n        item_queue_id:\n          type: string\n          description: A unique alphanumeric identifier referencing the import process in the targeted account\n        success:\n          type: boolean\n          description: A boolean value indicating whether the import process was started or not.\n    ImportStatusResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          title: ID\n          description: A unique identifier for the import process. It is the same as the `import_id` provided in the request\n        user_id:\n          type: string\n          title: User ID\n          description: A unique alphanumeric element that identifies the CARTO account user in the internal database\n        table_id:\n          type: string\n          title: Table ID\n          description:   A unique alphanumeric element that identifies the created table in the internal CARTO database\n        data_type:\n          type: string\n          enum:\n            - file\n            - url\n            - external_table\n            - query\n            - table\n            - datasource\n          title: Data type\n          description: This element identifies the service type used to import the file\n        table_name:\n          type: string\n          title: Table name\n          description: The final name of the created table in the targeted CARTO account. It usually has the same name as the uploaded file, unless there already exists a table with the same name (in this case, an integer number is appended to the table name)\n        status:\n          type: string\n          enum:\n            - enqueued\n            - pending\n            - uploading\n            - unpacking\n            - importing\n            - guessing\n            - complete\n            - failure   \n          title: State\n          description: A string value indicating the current state of the importing process\n        error_code:\n          type: number\n          title: Error code\n          description: A number corresponding to the error code in case of failure during the import process, that is, when the `success` item has a `false` value\n        queue_id:\n          type: string\n          title: Queue ID\n          description:  A unique identifier for the import process in the importing queue. It is the same as the `import_id` provided in the request\n        tables_created_count:\n          type: number\n          title: Tables created counter\n          description: The number of tables that the import process generated. For multi-file uploads, this value can be greater than one\n          nullable: true\n        synchronization_id:\n          type: string\n          title: Synchronization ID\n          description: This element has a `null` value when the import is not configured as a Sync Table\n          nullable: true\n        type_guessing:\n          type: boolean\n          title: Type guessing\n          description: A boolean indicating whether field type guessing (for Excel and CSVs) is enabled or not\n        quoted_fields_guessing:\n          type: boolean\n          title: Quoted fields guessing\n          description: A boolean indicating whether type guessing of CSV fields inside double quotes is enabled for the data import\n        content_guessing:\n          type: boolean\n          title: Content guessing\n          description: A boolean indicating whether content guessing and automatic geocoding is enabled for the data import\n        create_visualization:\n          type: boolean\n          title: Create visualization\n          description:   A boolean indicating whether the import process will create a map automatically or not. Its value corresponds to the import option `create_vis` chosen by the user\n        visualization_id:\n          type: string\n          title: Visualization ID\n          description: A unique identifier for the map created in the import process. Only applies if `created_visualization` is set to `true`\n          nullable: true\n        get_error_text:\n          type: string\n          title: Get error text\n          description: This element contains an error description to be outputted in case of a failure during the import process. It contains the error title and description, its source (`user` or `cartodb`), and troubleshooting details\n        display_name:\n          type: string\n          title: Display name\n          description: Similar to `table_name`. For `url` uploads, it shows the name of the file. Otherwise, it shows the `import_id`\n        success:\n          type: boolean\n          title: Success\n          description: A boolean value indicating whether the import process succeeded\n        warnings:\n          type: string\n          title: Warnings\n          description: A text field containing warning messages related to the import process, if applicable of the file. Otherwise, it shows the `import_id`\n          nullable: true\n        is_raster:\n          type: boolean\n          title: Is raster\n          description: A boolean value indicating whether the imported table contains raster data or not\n    ExportCarto:\n      type: object\n      properties:\n        visualization_id:\n          type: string\n          title: Visualization ID\n          description: A unique identifier for the map created in the export process. Only applies if `created_visualization` is set to `true` when the map was created. \n    ExportCartoResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          title: ID\n          description: A unique identifier for the export process. It is the same as the _export id_ provided in the request\n        visualization_id:\n          type: string\n          title: Visualization ID\n          description: A unique identifier for the map created in the export process. Only applies if `created_visualization` is set to `true` when the map was created\n        user_id:\n          type: string\n          title: User ID\n          description: A unique alphanumeric element that identifies the CARTO account user in the internal database\n        state:\n          type: string\n          enum:\n            - enqueued\n            - pending\n            - uploading\n            - unpacking\n            - importing\n            - guessing\n            - complete\n            - failure \n          title: State\n          description: A string value indicating the current state of the export process\n        url:\n          type: string\n          title: URL\n          description: The **public** URL address where the file to be exported is located\n          nullable: true\n        created_at:\n          type: string\n          format: date-time\n          title: Created at\n          description: The date time at which the visualization was created in the CARTO database\n        updated_at:\n          type: string\n          format: date-time\n          title: Updated at\n          description: The date time at which the visualization had its contents modified\n    SyncTablesResponseItem:\n      type: object\n      properties:\n        id:\n          type: string\n          title: ID\n          description: A unique alphanumeric identifier of the synced table\n        name:\n          type: string\n          title: Name\n          description: The actual name of the created sync table\n        interval:\n          type: integer\n          title: Interval\n          description: An integer value representing the number of seconds between synchronizations of the table contents\n        url:\n          type: string\n          title: URL\n          description: The **public** URL address where the file to be synchronized is located\n          nullable: true\n        state:\n          type: string\n          enum:\n            - created\n            - queued\n            - syncing\n            - success\n            - failure\n          title: State\n          description: A string value indicating the current state of the synchronized dataset\n        created_at:\n          type: string\n          format: date-time\n          title: Created at\n          description: The date time at which the table was created in the CARTO database\n        updated_at:\n          type: string\n          format: date-time\n          title: Updated at\n          description: The date time at which the table had its contents modified\n        run_at:\n          type: string\n          format: date-time\n          title: Run at\n          description: The date time at which the table **will** get its contents synched with the source file\n        retried_times:\n          type: integer\n          title: Retried times\n          description: An integer value indicating the number of attempts that were performed to sync the table\n        log_id:\n          type: string\n          title: Log ID\n          description: A unique alphanumeric identifier to locate the log traces of the given table\n        error_code:\n          type: integer\n          title: Error code\n          description: An integer value representing a unique error identifier\n          nullable: true\n        error_message:\n          type: string\n          title: Error message\n          description: A string value indicating the message related to the _error_code_ element\n          nullable: true\n        ran_at:\n          type: string\n          format: date-time\n          title: Ran at\n          description: The date time at which the table **had** its contents synched with the source file\n        modified_at:\n          type: string\n          format: date-time\n          title: Modified at\n          description: The date time at which the table was manually modified, if applicable\n        etag:\n          type: string\n          title: ETAG\n          description: HTTP entity tag of the source file\n          nullable: true\n        checksum:\n          type: string\n          title: Checksum\n          description: See **etag**\n          nullable: true\n        user_id:\n          type: string\n          title: User ID\n          description: A unique alphanumeric element that identifies the CARTO account user in the internal database\n        service_name:\n          type: string\n          enum:\n            - gdrive\n            - dropbox\n          title: State\n          description: |\n            A string with the name of the datasource used to import the file\n            It can have any of the following values: \n            - **gdrive** - Google Drive\n            - **dropbox** - Dropbox\n            - `null` - URL imports\n          nullable: true\n        service_item_id:\n          type: string\n          title: Service item ID\n          description: A unique identifier used by CARTO to reference the sync table and its related datasource service\n        type_guessing:\n          type: boolean\n          title: Type guessing\n          description:   If set to `false` disables field type guessing (for Excel and CSVs)\n        quoted_fields_guessing:\n          type: boolean\n          title: Quoted fields guessing\n          description:   If set to `false` disables type guessing of CSV fields that come inside double quotes\n        content_guessing:\n          type: boolean\n          title: Content guessing\n          description:   Set to `true` to enable content guessing and automatic geocoding based on results. Currently, this only implements geocoding of countries, cities and IP addresses\n        visualization_id:\n          type: string\n          title: Visualization ID\n          description: A unique identifier for the map created in the import process. Only applies if created_visualization is set to `true`\n        from_external_source:\n          type: boolean\n          title: From external source\n          description: A boolean indicating whether the Sync Table is connected to an external source, generally the CARTO Data library\n    ListSyncTablesResponse:\n      type: object\n      properties:\n        syncronizations:\n          type: array\n          items:\n            $ref: '#/components/schemas/SyncTablesResponseItem'\n        total_entries:\n          type: integer\n          title: Total entries\n          description: Number of items contained in the response array\n    CreateSyncTablesPayload:\n      type: object\n      properties:\n        url:\n          type: string\n          title: URL\n          description: The **public** URL address where the file to be imported is located\n        interval:\n          type: integer\n          title: Interval\n          minimum: 900\n          description: 'The number of seconds for the synchronization period. Note: Sync interval must be at least 900 (15 minutes)'\n        type_guessing:\n          type: boolean\n          title: Type guessing\n          default: true\n          description:   If set to `false` disables field type guessing (for Excel and CSVs)\n        quoted_fields_guessing:\n          type: boolean\n          title: Quoted fields guessing\n          default: true\n          description:   If set to `false` disables type guessing of CSV fields that come inside double quotes\n        content_guessing:\n          type: boolean\n          title: Content guessing\n          default: false\n          description:  Set to `true` to enable content guessing and automatic geocoding based on results. Currently, this only implements geocoding of countries, cities and IP addresses\n    CreateSyncTablesResponse:\n      allOf:\n        - type: object\n          properties:\n            data_import:\n              type: object\n              properties:\n                endpoint:\n                  type: string\n                  title: Endpoint\n                  description: This item refers to the internal CARTO controller code responsible for performing the import\n                item_queue_id:\n                  type: string\n                  title: Item queue ID\n                  description: A unique alphanumeric identifier that refers to the import process. It can be used to retrieve data related to the created table\n        - $ref: '#/components/schemas/SyncTablesResponseItem'\n          \n  securitySchemes:\n    ApiKeyHTTPBasicAuth:\n      type: http\n      scheme: basic\n    ApiKeyQueryParam:\n      type: apiKey\n      in: header\n      name: api_key\n  examples:\n    CreateImportUrl:\n      value:\n        url: https://remotehost.url/path/to/remotefile\n      summary: Import from URL\n    RequestResponseSuccess:\n      value:\n        item_queue_id: 9906bce0-f1a3-4b07-be71-818f4bfd7673\n        success: true\n      summary: A success response  \n  responses:\n    NotFound:\n      description: The specified resource was not found\n    Unauthorized:\n      description: Unauthorized. No authentication provided.\n    Forbidden:\n      description: Forbidden. The API key does not authorize this request.\n    BadInput:\n      description: Request's parameters error\n",
			"canonicalURL": "/github.com/CartoDB/cartodb@64bc263488a45fc66565aadfcb051af60121f98d/-/blob/doc/developer-center/import-api/reference/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CartoDB/cartodb/blob/64bc263488a45fc66565aadfcb051af60121f98d/doc/developer-center/import-api/reference/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}