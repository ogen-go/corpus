{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/file360/openapi.yml",
			"byteSize": 135932,
			"content": "openapi: 3.0.1\ninfo:\n  title: File360 Web REST API\n  description: \u003e\n    This is a generated connector from [file360](https://developer.opentext.com/apis/ebc5860f-3e04-4d1b-a8be-b2683738c701/File360) OpenAPI Specification.\n    \n    An API that allows interaction with File360 Web client.\n\n    The File360 Web client, a world class user experience powered by Angular/CSS, is built upon a set of RESTful APIs. The power of the web application is available to our customers and partners with the RESTful APIs which power every bit of the web application.\n\n    Please see https://file360demo.otxlab.com/File360Web/test/api for examples and test harness.\n  termsOfService: https://www.opentext.com/about/copyright-information\n  contact:\n    name: Opentext Support\n    url: http://support.opentext.com\n    email: support@opentext.com\n  version: \"1.0\"\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n    \n    Create an [OpenText account](https://login.opentext.com/register) and obtain an API key.\n  x-ballerina-display:\n    label: file360\n    iconPath: \"icon.png\"\ntags:\n- name: applications\n  description: Applications\n- name: authentication\n  description: Authentication, logon, and logoff\n- name: document\n  description: Document\n- name: documents\n  description: Documents\n- name: errorfolders\n  description: Error folders\n- name: folder\n  description: Folder\n- name: folders\n  description: Folders\n- name: infrastructure\n  description: General - logging, server status ...\n- name: route\n  description: Routing\n- name: template\n  description: Template - Data entry and retrieval\n- name: templates\n  description: Templates - Data entry and retrieval\n- name: usersgroups\n  description: Users/Groups\n- name: usersgroupsadmin\n  description: Users/Groups Administration. These APIs require User/Group functional\n    administration permission for the authenticated user.\n- name: workflow\n  description: Workflow\npaths:\n  /v1/applications:\n    get:\n      tags:\n      - applications\n      summary: Get a listing of archives and applications.\n      description: Get a listing of archives and applications with the required access\n        types. Access types for the applications are defined via the application administration\n        tool.\n      operationId: Applications\n      parameters:\n      - name: accesstype\n        in: query\n        description: 'Access Type, an OR''ed set of the following : No Access = 0,\n          Retrieval Access = 1, Export Access = 2, Entry Access = 4, Import Access\n          = 8, Update Access = 16, Delete Access = 32, Super Access (includes all\n          above) = 65535'\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Applications archive pair array listing\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ArchiveApplications'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/auth:\n    post:\n      tags:\n      - authentication\n      summary: Logs on a user with the given credentials defined in the Authentication\n        object.\n      description: Logs on a user with the given credentials.\n      operationId: LogOn\n      requestBody:\n        description: Authentication information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Authentication'\n        required: true\n      responses:\n        200:\n          description: Logged on user object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: auth\n    delete:\n      tags:\n      - authentication\n      summary: Logs off the current user.\n      description: Logs off the current user. Logging off will release any associated\n        resources and licenses.\n      operationId: LogOff\n      responses:\n        200:\n          description: Logged off.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/oauth:\n    get:\n      tags:\n      - authentication\n      summary: Authenticates a user via OTDS, using the state and code, and logs that\n        user onto File360.\n      description: Authenticates a user via OTDS and logs that user onto File360.\n      operationId: LogonOAuth\n      parameters:\n      - name: code\n        in: query\n        description: OAuth code provided by OTDS via the Authorization code grant\n          type\n        required: true\n        schema:\n          type: string\n      - name: state\n        in: query\n        description: Authorization specific state value\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Logged on user object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document:\n    delete:\n      tags:\n      - document\n      summary: Destroy the index data and the files for a document.\n      description: 'Destroy the index data and the files for an document or just the\n        previous versions. '\n      operationId: DestroyDocument\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: 'Version id '\n        required: true\n        schema:\n          type: integer\n      - name: allversions\n        in: query\n        description: Destroy all versions\n        required: true\n        schema:\n          type: boolean\n      - name: priorversions\n        in: query\n        description: Destroy versions prior to the version listed in the version id\n          parameter\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: Destroy document result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceDocumentResult'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/devices:\n    get:\n      tags:\n      - document\n      summary: Get a list of devices for a document.\n      description: Get a list of devices, caches, stores, Keyfile, Content Server\n        etc., for a document.\n      operationId: GetDocumentDevices\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: versionId\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Available devices for a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableDevices'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/files:\n    get:\n      tags:\n      - document\n      summary: Get the file information for the document.\n      description: Get collection of file information for a document.  This includes\n        display name, file extensions, source URL and thumbnail URL.\n      operationId: GetDocumentFileInfo\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: versionId\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Files for the version of the document.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileInfo'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/index:\n    get:\n      tags:\n      - document\n      summary: Get the index data for a document.\n      description: Get the index information for a document.\n      operationId: FetchDocumentIndex\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      - name: suffix\n        in: query\n        description: Suffix\n        required: true\n        schema:\n          type: integer\n      - name: keyfileDocId\n        in: query\n        description: Keyfile public document id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: An array with the index data for the document.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FetchDocumentIndexReturn'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    put:\n      tags:\n      - document\n      summary: Update the index data for a document.\n      description: Update the index data for a document.\n      operationId: UpdateDocumentIndex\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      - name: suffix\n        in: query\n        description: Suffix\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Data entry template with modified data entry fields\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataEntryTemplate'\n        required: true\n      responses:\n        200:\n          description: An identifier for the newly created document.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: template\n    post:\n      tags:\n      - document\n      summary: Create a document.\n      description: Create a document.\n      operationId: CreateDocument\n      parameters:\n      - name: indexDataId\n        in: query\n        description: Folder document index id used when uploading document files.\n          Set to 0 if using a list of files in CreateDocumentInfo.\n        required: true\n        schema:\n          type: integer\n      - name: action\n        in: query\n        description: 'One of the following indexing action : IndexFirstSuffix = 1,\n          Index = 2, Modify = 4'\n        required: true\n        schema:\n          type: integer\n          default: 2\n          enum:\n          - 1\n          - 2\n          - 4\n      requestBody:\n        description: List of files and index information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDocumentinfo'\n        required: true\n      responses:\n        200:\n          description: Indexed document and folder data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexedDocument'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: files\n    delete:\n      tags:\n      - document\n      summary: Delete a document.\n      description: Delete a document. Marks the document as unsearchable for all users.\n      operationId: DeleteDocument\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      - name: suffix\n        in: query\n        description: Suffix\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Delete document results.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteDocumentResult'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/keywords:\n    get:\n      tags:\n      - document\n      summary: Get the keywords associated with a document.\n      description: Get the keywords associated with a document.\n      operationId: GetKeywords\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Keywords for a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Keywords'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    post:\n      tags:\n      - document\n      summary: Put new keywords in a document.\n      description: Puts new keywords in a document, replaces the existing keywords.\n        To remove all keywords, set keywords data to empty.\n      operationId: PutKeywords\n      requestBody:\n        description: New Keywords data.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Keywords'\n        required: true\n      responses:\n        200:\n          description: Keywords for a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Keywords'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: Keywords\n  /v1/document/legalhold:\n    get:\n      tags:\n      - document\n      summary: Get the legal hold status for a document.\n      description: Get the legal hold status for a document.\n      operationId: GetLegalHold\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Legal hold status for a document. The legal hold status object\n            will be empty if the document is not on legal hold.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LegalHoldStatus'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    post:\n      tags:\n      - document\n      summary: Set the legal hold data for a document.\n      description: Set the legal hold data for a document. Also provides ability to\n        change the expiration date and the reason.\n      operationId: SetLegalHold\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: Version\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: New legal hold status data.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LegalHoldStatus'\n        required: true\n      responses:\n        200:\n          description: Document identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceDocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: legalHoldStatus\n    delete:\n      tags:\n      - document\n      summary: Removes a document from legal hold .\n      description: Removes a document legal from hold.\n      operationId: RemoveLegalHold\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Document identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceDocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/remarks:\n    get:\n      tags:\n      - document\n      summary: Get the remarks associated with a document.\n      description: Get the remarks associated with a document.\n      operationId: GetRemarks\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: suffix\n        in: query\n        description: Suffix id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Remarks for a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Remark'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    post:\n      tags:\n      - document\n      summary: Put new remarks in a document.\n      description: Put new remarks in a document. This will append to existing remarks.\n      operationId: PutRemarks\n      requestBody:\n        description: New remark data.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Remark'\n        required: true\n      responses:\n        200:\n          description: Remarks for a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Remark'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: remark\n  /v1/document/suffix:\n    post:\n      tags:\n      - document\n      summary: Create a suffix for a document.\n      description: Create a suffix for a document. Adds a new record in the database\n        for the document.\n      operationId: CreateSuffix\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      - name: version\n        in: query\n        description: Version id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Data entry template.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataEntryTemplate'\n        required: true\n      responses:\n        200:\n          description: Identifier for the new suffix entry.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: template\n  /v1/document/unlock:\n    delete:\n      tags:\n      - document\n      summary: Unlock a document.\n      description: Unlock a document. If not an administrator, can only unlock those\n        documents locked to logged on user.\n      operationId: Unlock\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Identifier of unlocked document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceDocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/document/version:\n    post:\n      tags:\n      - document\n      summary: Create a new version for a document.\n      description: Create a new version for a document.\n      operationId: CreateVersion\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id of the document\n        required: true\n        schema:\n          type: integer\n      - name: versionLabel\n        in: query\n        description: New version label\n        required: true\n        schema:\n          type: string\n      - name: deviceId\n        in: query\n        description: Id of device where version is to be created.  Use document/devices\n          to get a list of available devices for user.\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Collection of file identifiers\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/DocumentCreateVersionFile'\n        required: true\n      responses:\n        200:\n          description: New document version identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceDocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: files\n  /v1/document/versions:\n    get:\n      tags:\n      - document\n      summary: Get a list of versions for a document.\n      description: Get a list of versions for a document.\n      operationId: GetVersions\n      parameters:\n      - name: masterId\n        in: query\n        description: Master id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Versions for a document.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceDocumentIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/documents/index:\n    put:\n      tags:\n      - documents\n      summary: Update document index data.\n      description: Update index data for a document or a collection of documents.\n      operationId: UpdateDocumentIndexes\n      requestBody:\n        description: Index data change message\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentIdentifierIndexDataChangeMessage'\n        required: true\n      responses:\n        200:\n          description: Changed documents results.\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: updateDetails\n  /v1/errorfolders:\n    get:\n      tags:\n      - errorfolders\n      summary: Get a list of error folders for user.\n      description: Get a list of error folders for user.\n      operationId: GetIndexErrorFolders\n      responses:\n        200:\n          description: A collection of error folders.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFoldersMessage'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/folder:\n    put:\n      tags:\n      - folder\n      summary: Update properties of an index folder.\n      description: Update properties or take action on an index folder.\n      operationId: UpdateFolder\n      parameters:\n      - name: action\n        in: query\n        description: 'Actions to perform on the folder : SendFolderToApplication =\n          1, SendFolderToUser = 3, SendFolderToGroup = 4, RenameFolder = 5, ReleaseFolder\n          = 6, CloseFolder = 10'\n        required: true\n        schema:\n          type: integer\n          default: 1\n          enum:\n          - 1\n          - 3\n          - 4\n          - 5\n          - 6\n          - 10\n      requestBody:\n        description: Folder and data to update.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexFolder'\n        required: true\n      responses:\n        200:\n          description: Updated index folder.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolder'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: folder\n    delete:\n      tags:\n      - folder\n      summary: Delete an indexing folder.\n      description: Delete an indexing folder.\n      operationId: DeleteFolder\n      parameters:\n      - name: folderId\n        in: query\n        description: Folder id.\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Index folder deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolder'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/folder/document:\n    get:\n      tags:\n      - folder\n      summary: Get the document information from a folder.\n      description: Get the document information from a folder.\n      operationId: GetIndexFolderDocs\n      parameters:\n      - name: folderId\n        in: query\n        description: Id of folder from which to get the document\n        required: true\n        schema:\n          type: integer\n      - name: id\n        in: query\n        description: When viewing a specific document, use IndexDataId; when using\n          prevDoc or nextDoc use DocumentId; when opening folder for indexing, use\n          0 to return first document in the folder\n        required: true\n        schema:\n          type: integer\n      - name: prevDoc\n        in: query\n        description: Move to the document previous from the index id parameter value\n        required: true\n        schema:\n          type: integer\n      - name: nextDoc\n        in: query\n        description: Move to the next document from the index id parameter value\n        required: true\n        schema:\n          type: integer\n      - name: isFolderShared\n        in: query\n        description: Is this index folder shared with other users or groups\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: Index folder document viewer information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolderDocumentViewer'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    post:\n      tags:\n      - folder\n      summary: Create a user folder document.\n      description: Create a user folder document.\n      operationId: CreateUserFolderDocument\n      parameters:\n      - name: sessionName\n        in: query\n        description: 'Document folder name used to identify the directory where the\n          files were uploaded. tThe folder name will be combined with the user''s\n          temorary File360 Server path. Like : ''C:/Users/{username}/AppData/Local/Temp/File360Server/Documents/Upload/my-folder-files''.\n          These folders must resolve to a path within the user''s File360 Server temporary\n          folder.'\n        required: true\n        schema:\n          type: string\n      - name: archiveId\n        in: query\n        description: With applicationId, archive id is used to find or created the\n          user folder to place document\n        required: true\n        schema:\n          type: integer\n      - name: applicationId\n        in: query\n        description: With archiveId, application id is used to find or created the\n          user folder to place document\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: The destination folder, and the document created as part of\n            a collection of documents\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolderDocuments'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    delete:\n      tags:\n      - folder\n      summary: Delete a document in the user folder.\n      description: Delete a document in the user folder.\n      operationId: DeleteFolderDocument\n      parameters:\n      - name: indexDataId\n        in: query\n        description: The index id of the document in the folder.  Returned as part\n          of the IndexFolderDocuments object.\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Deleted index folder document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolderDocument'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/folder/document/compid:\n    post:\n      tags:\n      - folder\n      summary: Get a Brava composition id for a list of folder document files.\n      description: Get a Brava composition id for a list of folder document files.\n      operationId: GetIndexFolderDocCompID\n      requestBody:\n        description: List of files in the folder document.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IndexFolderDocumentFiles'\n        required: true\n      responses:\n        200:\n          description: Brava composition id for a list of folder document files.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolderDocumentViewer'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: docfiles\n  /v1/folder/document/files:\n    get:\n      tags:\n      - folder\n      summary: Get a list of files in a document.\n      description: Get a list of files in a document.\n      operationId: GetIndexFolderDocFiles\n      parameters:\n      - name: indexId\n        in: query\n        description: Document index id\n        required: true\n        schema:\n          type: integer\n      - name: isFolderShared\n        in: query\n        description: Is this folder shared between users or groups\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Folder document files.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileInfo'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/folder/documents:\n    get:\n      tags:\n      - folder\n      summary: Get a list of documents in a folder.\n      description: Get a list of documents in a folder.\n      operationId: GetIndexFolderDocuments\n      parameters:\n      - name: folderId\n        in: query\n        description: Folder id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A collection of index folder documents.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFolderDocuments'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/folders:\n    get:\n      tags:\n      - folders\n      summary: Get a list of data entry folders.\n      description: Get a list of data entry folders.\n      operationId: GetIndexFolders\n      responses:\n        200:\n          description: A collection of data entry folders.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexFoldersMessage'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/log:\n    post:\n      tags:\n      - infrastructure\n      summary: Log a client message to the Web Server debug log.\n      description: Log a client message to the Web Server debug log. (See KB710808\n        for details on how to enable web client logging)\n      operationId: Log\n      requestBody:\n        description: Log message information.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LogMessage'\n        required: true\n      responses:\n        200:\n          description: Message logged.\n          content: {}\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: logData\n  /v1/status:\n    get:\n      tags:\n      - infrastructure\n      summary: Get the status of the RESTAPI server.\n      description: Get the status of the RESTAPI server\n      operationId: Status\n      responses:\n        200:\n          description: Status returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerStatus'\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/route:\n    post:\n      tags:\n      - route\n      summary: Route documents to a user or group.\n      description: Route documents to users or groups.\n      operationId: RouteDocuments\n      parameters:\n      - name: title\n        in: query\n        description: Routing message title\n        required: true\n        schema:\n          type: string\n      - name: comment\n        in: query\n        description: Routing message comment\n        schema:\n          type: string\n      - name: templateId\n        in: query\n        description: Retrieval template id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Routing details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoutingDetails'\n        required: true\n      responses:\n        200:\n          description: Identifier for the Route just created.\n          content:\n            application/json:\n              schema:\n                type: integer\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: routingDetails\n  /v1/template/dataentry:\n    get:\n      tags:\n      - template\n      summary: Get a data entry template.\n      description: Get a data entry template.\n      operationId: GetDataEntryTemplate\n      parameters:\n      - name: id\n        in: query\n        description: Template id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Data entry template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataEntryTemplate'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/template/dataentry/callback:\n    post:\n      tags:\n      - template\n      summary: Run a data entry template callback.\n      operationId: RunCallbackDataEntry\n      parameters:\n      - name: callbackHandleId\n        in: query\n        description: Callback handle id\n        required: true\n        schema:\n          type: integer\n      - name: fieldId\n        in: query\n        description: Field id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Data entry template object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataEntryTemplate'\n        required: true\n      responses:\n        200:\n          description: Call back result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CallbackResult'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: body\n  /v1/template/retrieval:\n    get:\n      tags:\n      - template\n      summary: Get a retrieval template.\n      description: Get a retrieval template.\n      operationId: GetRetrievalTemplate\n      parameters:\n      - name: id\n        in: query\n        description: Template id\n        required: true\n        schema:\n          type: integer\n      - name: applicationid\n        in: query\n        description: Application id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Retrieval template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetrievalTemplate'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/template/retrieval/callback:\n    post:\n      tags:\n      - template\n      summary: Run a retrieval template callback.\n      operationId: RunCallbackRetrieval\n      parameters:\n      - name: callbackHandleId\n        in: query\n        description: Callback handle id\n        required: true\n        schema:\n          type: integer\n      - name: fieldId\n        in: query\n        description: Field id\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Retrieval template\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RetrievalTemplate'\n        required: true\n      responses:\n        200:\n          description: Call back result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CallbackResult'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: searchTemplate\n  /v1/template/retrieval/documents:\n    post:\n      tags:\n      - documents\n      summary: Search for a list of documents.\n      description: Search for a list of documents using the criteria filled into the\n        input fields in the retrieval template.\n      operationId: PerformRetrieval\n      requestBody:\n        description: Retrieval template filled in with search criteria\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RetrievalTemplate'\n        required: true\n      responses:\n        200:\n          description: Hit list.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Hits'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: searchTemplate\n  /v1/template/retrieval/layout:\n    put:\n      tags:\n      - template\n      summary: Update retrieval template layout for user.\n      description: Update retrieval template layout for user.\n      operationId: SavePersonalRetrievalTemplate\n      requestBody:\n        description: Retrieval template\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RetrievalTemplate'\n        required: true\n      responses:\n        200:\n          description: Retrieval template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetrievalTemplate'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: template\n    delete:\n      tags:\n      - template\n      summary: Delete retrieval template layout for user.\n      description: Delete the retrieval template layout for logged on user.\n      operationId: RemovePersonalRetrievalTemplate\n      parameters:\n      - name: templateId\n        in: query\n        description: Template id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Retrieval template.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetrievalTemplate'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/templates/dataentry:\n    get:\n      tags:\n      - templates\n      summary: Data entry templates listing.\n      description: Get a list of data entry templates.\n      operationId: dataentrytemplates\n      responses:\n        200:\n          description: A collection of data entry templates.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataEntryTemplatesList'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/templates/retrieval:\n    get:\n      tags:\n      - templates\n      summary: Retrieval templates listing.\n      description: Get a list of retrieval templates.\n      operationId: retrievaltemplates\n      responses:\n        200:\n          description: A collection of retrieval templates.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetrievalTemplatesList'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/users:\n    get:\n      tags:\n      - usersgroups\n      summary: Get a list of users.\n      description: Get a list of the users defined in user administration.\n      operationId: Users\n      responses:\n        200:\n          description: A collection of user identifiers.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserIdentifier'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/groups:\n    get:\n      tags:\n      - usersgroups\n      summary: Get a list of groups.\n      description: Get the list of user groups.\n      operationId: Groups\n      responses:\n        200:\n          description: A collection of groups.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupIdentifier'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/users:\n    get:\n      tags:\n      - usersgroupsadmin\n      summary: Get a list of all users.\n      description: Get the list of users.\n      operationId: AdminUsers\n      responses:\n        200:\n          description: A collection of users.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/user:\n    get:\n      tags:\n      - usersgroupsadmin\n      summary: Get a user.\n      description: Get a user.\n      operationId: GetUser\n      parameters:\n      - name: userId\n        in: query\n        description: User id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    delete:\n      tags:\n      - usersgroupsadmin\n      summary: Delete a user.\n      description: Delete a user.\n      operationId: DeleteUser\n      parameters:\n      - name: userId\n        in: query\n        description: User id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Deleted user id.\n          content:\n            application/json:\n              schema:\n                type: integer\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/groups:\n    get:\n      tags:\n      - usersgroupsadmin\n      summary: Get a list of groups.\n      description: Get the list of groups.\n      operationId: AdminGroups\n      responses:\n        200:\n          description: A collection of groups.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/group:\n    get:\n      tags:\n      - usersgroupsadmin\n      summary: Get a group.\n      description: Get a group.\n      operationId: GetGroup\n      parameters:\n      - name: groupId\n        in: query\n        description: Group id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A group to administer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    put:\n      tags:\n      - usersgroupsadmin\n      summary: Update a group.\n      description: Edit a group.\n      operationId: EditGroup\n      requestBody:\n        description: Group updates\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: true\n      responses:\n        200:\n          description: Updated group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: group\n    post:\n      tags:\n      - usersgroupsadmin\n      summary: Create a group.\n      description: Create a group.\n      operationId: CreateGroup\n      requestBody:\n        description: Group identifier\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupIdentifier'\n        required: true\n      responses:\n        200:\n          description: Group identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupIdentifier'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: group\n    delete:\n      tags:\n      - usersgroupsadmin\n      summary: Delete a group.\n      description: Delete a group.\n      operationId: DeleteGroup\n      parameters:\n      - name: groupId\n        in: query\n        description: Group id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Deleted group id.\n          content:\n            application/json:\n              schema:\n                type: integer\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/group/members:\n    get:\n      tags:\n      - usersgroupsadmin\n      summary: Get a the list of users for a group.\n      description: Get a the list of users for a group.\n      operationId: AdminGroupMembers\n      parameters:\n      - name: groupId\n        in: query\n        description: Group id\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A group with user information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/admin/document-security-level:\n    put:\n      tags:\n      - usersgroupsadmin\n      summary: Edit a document security level.\n      description: Edit a document security level.\n      operationId: UpdateDocumentLevelSecurity\n      parameters:\n      - name: level\n        in: query\n        description: Security level\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: Document security level\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentLevelSecurity'\n        required: true\n      responses:\n        200:\n          description: Updated document security level.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentLevelSecurity'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: securityLevel\n  /v1/workflow/workitem:\n    get:\n      tags:\n      - workflow\n      summary: Get a workitem.\n      description: Get a workitem.\n      operationId: RetrieveWorkitem\n      parameters:\n      - name: workitemId\n        in: query\n        description: Workitem id\n        required: true\n        schema:\n          type: string\n      - name: type\n        in: query\n        description: Workitem type\n        required: true\n        schema:\n          type: integer\n      - name: workstep\n        in: query\n        description: Workstep name\n        required: true\n        schema:\n          type: string\n      - name: workset\n        in: query\n        description: Workset name\n        required: true\n        schema:\n          type: string\n      - name: workflowId\n        in: query\n        description: Workflow id\n        required: true\n        schema:\n          type: integer\n      - name: timestamp\n        in: query\n        description: Workitem timestamp\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: A workitem.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workitem'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n    put:\n      tags:\n      - workflow\n      summary: Make changes to a workitem.\n      description: Update the workitem.  This WILL NOT send the workitem onto the\n        next workstep.  Use the POST call to send it on.\n      operationId: SaveWorkitem\n      requestBody:\n        description: Workitem\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Workitem'\n        required: true\n      responses:\n        200:\n          description: An updated workitem.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workitem'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: workitem\n    post:\n      tags:\n      - workflow\n      summary: Send the changes for the workitem.\n      description: Send the workitem onto the next default workstep in the workflow.\n        This WILL NOT update the workitem.  Use the PUT call to update.\n      operationId: SendWorkitem\n      requestBody:\n        description: Workitem\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Workitem'\n        required: true\n      responses:\n        200:\n          description: An updated workitem.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workitem'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n      x-codegen-request-body-name: workitem\n  /v1/workflow/workitem/history:\n    get:\n      tags:\n      - workflow\n      summary: Get the history for a workitem.\n      description: Get the history for a workitem.\n      operationId: GetHistory\n      parameters:\n      - name: workitemId\n        in: query\n        description: Workitem id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The workitem history.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workitem'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/workitems:\n    get:\n      tags:\n      - workflow\n      summary: Get a list of workitems.\n      description: Get a list of workitems for a particular workset.\n      operationId: Workitems\n      parameters:\n      - name: workflowId\n        in: query\n        description: Workflow id\n        required: true\n        schema:\n          type: integer\n      - name: worksetName\n        in: query\n        description: Workset name\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: A collection of workitems.\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/workitems/backlog:\n    get:\n      tags:\n      - workflow\n      summary: Get a count of workflow items awaiting initiation.\n      description: Get a count of workflow items awaiting initiation.\n      operationId: GetCountOfWorkflowBacklog\n      responses:\n        200:\n          description: Count of workitems awaiting initiation.\n          content:\n            application/json:\n              schema:\n                type: integer\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/worklist:\n    get:\n      tags:\n      - workflow\n      summary: Get a list of workitems on the currently logged on users worklist.\n      description: Get a list of workitems on the currently logged on users worklist.\n      operationId: Worklist\n      responses:\n        200:\n          description: A collection of workitems.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workitems'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/worklist/form:\n    get:\n      tags:\n      - workflow\n      summary: Get the workflow form.\n      description: Get the workflow form.\n      operationId: GetForm\n      parameters:\n      - name: className\n        in: query\n        description: Class name\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The workflow form for the class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkitemForm'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/worklist/workitem:\n    delete:\n      tags:\n      - workflow\n      summary: Remove a workitem from the current users worklist.\n      description: Remove a workitem from the current users worklist.\n      operationId: RemoveWorkitemFromWorklist\n      parameters:\n      - name: workitemId\n        in: query\n        description: Workitem id\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The workitem id that was removed.\n          content:\n            application/json:\n              schema:\n                type: string\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\n  /v1/workflow/worksets:\n    get:\n      tags:\n      - workflow\n      summary: Get a list of worksets.\n      description: Get a list of worksets.\n      operationId: Worksets\n      responses:\n        200:\n          description: A collection of worksets.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Worksets'\n        400:\n          description: Bad request - invalid parameters.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Permission denied.\n          content: {}\n        500:\n          description: Internal server error. Check server log.\n          content: {}\ncomponents:\n  schemas:\n    Application:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Application id\n        Name:\n          type: string\n          description: Application name\n      description: Application.\n    ApplicationArchiveAccess:\n      type: object\n      properties:\n        ApplicationArchiveAccess:\n          type: array\n          description: Application archive access.\n          items:\n            $ref: '#/components/schemas/ApplicationArchiveAccessItem'\n      description: A collection of application archive pair and their access rights\n        items.\n    ApplicationArchiveAccessItem:\n      type: object\n      properties:\n        Key:\n          $ref: '#/components/schemas/ApplicationArchivePair'\n        Value:\n          type: integer\n          description: 'An OR''ed set of access types : NoAccess = 0, RetrievalAccess\n            = 1, ExportAccess = 2, EntryAccess = 4, ImportAccess = 8, UpdateAccess\n            = 16, DeleteAccess = 32, SuperAccess = 65535'\n      description: An application archive pair and their access rights item\n    ApplicationArchivePair:\n      type: object\n      properties:\n        ApplicationId:\n          type: integer\n          description: Application id\n        ApplicationName:\n          type: string\n          description: Application name\n        ArchiveId:\n          type: integer\n          description: Archive id\n        ArchiveName:\n          type: string\n          description: Archive name\n      description: Application archive pair.\n    ApplicationIdentifier:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Application id\n        Name:\n          type: string\n          description: Application name\n      description: Application identifier.\n    Archive:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Archive id\n        Name:\n          type: string\n          description: Archive name\n      description: Archive.\n    ArchiveApplications:\n      type: object\n      properties:\n        Applications:\n          type: array\n          description: Application.\n          items:\n            $ref: '#/components/schemas/Application'\n        Archive:\n          $ref: '#/components/schemas/Archive'\n      description: Applications associated with an archive with the selected access\n        type.\n    Authentication:\n      required:\n      - culture\n      - name\n      - password\n      type: object\n      properties:\n        culture:\n          type: string\n          description: 'Users culture string : ''en-us'''\n        key:\n          type: string\n          description: Application key\n        name:\n          type: string\n          description: User name\n        password:\n          type: string\n          description: Password\n      description: Authentication information.\n    AvailableDevices:\n      type: object\n      properties:\n        Applications:\n          type: array\n          description: Collection of applications associated with device types\n          items:\n            $ref: '#/components/schemas/ApplicationIdentifier'\n        CacheDevices:\n          type: array\n          description: Collection of cache devices\n          items:\n            $ref: '#/components/schemas/Cache'\n        ContentServerDevices:\n          type: array\n          description: Collection of Content Server devices\n          items:\n            $ref: '#/components/schemas/ContentServer'\n        DefaultDevice:\n          $ref: '#/components/schemas/DeviceIdentifier'\n        Devices:\n          type: array\n          description: Collection of available devices\n          items:\n            $ref: '#/components/schemas/DeviceIdentifier'\n        KeyfileDevices:\n          type: array\n          description: Collection of Keyfile devices\n          items:\n            $ref: '#/components/schemas/Keyfile'\n        MicrofilmDevices:\n          type: array\n          description: Collection of microfilm devices\n          items:\n            $ref: '#/components/schemas/Microfilm'\n        StoreDevices:\n          type: array\n          description: Collection of store devices\n          items:\n            $ref: '#/components/schemas/CdromJukebox'\n        Volumes:\n          type: array\n          description: Collection of Volumes\n          items:\n            $ref: '#/components/schemas/Volume'\n      description: Available devices\n    Cache:\n      allOf:\n      - $ref: '#/components/schemas/Device'\n      - type: object\n        properties:\n          ActivateAfterStore:\n            type: string\n            description: Activate cache after storing\n          ActualSize:\n            type: integer\n            description: Actual size of the cache\n          ActualSizeInBytes:\n            type: integer\n            description: Actual size of the cache in bytes\n          ApplicationIdentifier:\n            $ref: '#/components/schemas/ApplicationIdentifier'\n          Applications:\n            type: array\n            description: Collection of applications associated with this device\n            items:\n              $ref: '#/components/schemas/ApplicationIdentifier'\n          CheckForBestPractices:\n            type: boolean\n            description: Check that device employs the best practices\n          ClearAfterStore:\n            type: string\n            description: Clear cache after storing\n          DeviceIdentifier:\n            $ref: '#/components/schemas/DeviceIdentifier'\n          DocumentCount:\n            type: integer\n            description: Count of documents in the cache\n          EnableAutoRun:\n            type: boolean\n            description: Enable auto run\n          ExportIndexDataToStore:\n            type: boolean\n            description: Export index data to store\n          ExportProgramsToStore:\n            type: boolean\n            description: Export programs to store\n          LastDocumentId:\n            type: integer\n            description: Id of last document added to cache\n          LastReset:\n            type: string\n            description: Last time the cache we reset\n          MaximumSizeInBytes:\n            type: integer\n            description: Maximum size of the cache in bytes\n          PathIdentifier:\n            $ref: '#/components/schemas/PathIdentifier'\n          State:\n            type: integer\n            description: 'Cache state - one of the following : None = 0, Active =\n              1, Locked = 2, Full = 3, WritePrepared = 4, Prepared = 5, Checked =\n              6, Preparing = 7, Checking = 8, Migrating = 9, Migrated = 10'\n          StatusReport:\n            $ref: '#/components/schemas/OperationStatus'\n          StoreDeviceId:\n            type: integer\n            description: Id of Store device was stored to\n          StoreLabel:\n            type: string\n            description: Label of store cache has been stored to\n          StoredVolume:\n            $ref: '#/components/schemas/Volume'\n          UnassignedApplications:\n            type: array\n            description: Collection of unassigned applications\n            items:\n              $ref: '#/components/schemas/ApplicationIdentifier'\n          VolumeId:\n            type: integer\n            description: Volume id\n          WorkstationIdentifier:\n            $ref: '#/components/schemas/Workstation'\n        description: Cache device\n    CallbackExternalColumn:\n      type: object\n      properties:\n        CopyToTarget:\n          type: boolean\n        Name:\n          type: string\n        TargetFieldId:\n          type: integer\n      description: Callback external column.\n    CallbackHandle:\n      type: object\n      properties:\n        ExternalHandlerLibrary:\n          type: string\n          description: External handler library\n        ExternalHandlerMethod:\n          type: string\n          description: External handler method\n        ExternalHandlerNamespace:\n          type: string\n          description: External handler name space\n        ExternalHandlerParameters:\n          type: string\n          description: External handler parameters\n        HandleId:\n          type: integer\n          description: Callback handle id\n        Label:\n          type: string\n          description: Callback label\n        SourceId:\n          type: integer\n          description: Source id\n        TypeCallback:\n          type: integer\n          description: Callback type. 0 = None, 1100 = Template entry,3101 = Field\n            entry,3999 = Field entry static file,5001 = Field exit verification,5002\n            = Field exit min/max,5998 = Field exit existence check,5999 = Field exit\n            static file,9999 = User exit\n        TypeUserExit:\n          type: integer\n          description: User exit type. 0 = None, 1 = Callback usage, 2 = Mask, 3 =\n            Lookup\n      description: Callback handle.\n    CallbackResult:\n      type: object\n      properties:\n        Columns:\n          type: array\n          description: Callback external columns.\n          items:\n            $ref: '#/components/schemas/CallbackExternalColumn'\n        EntryTemplate:\n          $ref: '#/components/schemas/DataEntryTemplate'\n        Handle:\n          $ref: '#/components/schemas/CallbackHandle'\n        Rows:\n          type: array\n          description: Collection of callback results returned.\n          items:\n            $ref: '#/components/schemas/CallbackResultRows'\n        SearchTemplate:\n          $ref: '#/components/schemas/RetrievalTemplate'\n      description: Callback result.\n    CallbackResultRows:\n      type: object\n      properties:\n        Row:\n          type: array\n          items:\n            type: object\n            properties: {}\n      description: Callback result.\n    CdromJukebox:\n      allOf:\n      - $ref: '#/components/schemas/Device'\n      - type: object\n        properties:\n          CacheDevices:\n            type: array\n            description: Cache device\n            items:\n              $ref: '#/components/schemas/Cache'\n          CheckForBestPractices:\n            type: boolean\n            description: Check that device employs the best practices\n          DeviceIdentifier:\n            $ref: '#/components/schemas/DeviceIdentifier'\n          IsReadOnly:\n            type: boolean\n            description: Is this CD read only\n          MostRecentLabel:\n            type: string\n            description: Most recent label\n          PathIdentifier:\n            $ref: '#/components/schemas/PathIdentifier'\n          StatusReport:\n            $ref: '#/components/schemas/OperationStatus'\n          WorkstationIdentifier:\n            $ref: '#/components/schemas/Workstation'\n        description: CDRom jukebox device.\n    ContentServer:\n      allOf:\n      - $ref: '#/components/schemas/Device'\n      - type: object\n        properties:\n          ApplicationPassword:\n            type: string\n            description: Application password\n          ApplicationUserName:\n            type: string\n            description: Application user name\n          AuthenticationPassword:\n            type: string\n            description: Authentication password\n          AuthenticationServerAddress:\n            type: string\n            description: Authentication server address\n          AuthenticationUserName:\n            type: string\n            description: Authentication user name\n          CheckForBestPractices:\n            type: boolean\n            description: Check that device employs the best practices\n          ContentServerAddress:\n            type: string\n            description: Content server address\n          DeviceIdentifier:\n            $ref: '#/components/schemas/DeviceIdentifier'\n          EncryptedApplicationPassword:\n            type: string\n            description: Encrypted application password\n          EnterpriseLibraryServerAddress:\n            type: string\n            description: Enterprise library server address\n          PathIdentifier:\n            $ref: '#/components/schemas/PathIdentifier'\n          RootFolderItemId:\n            type: string\n            description: Root folder item id\n          StatusReport:\n            $ref: '#/components/schemas/OperationStatus'\n          WebsiteAddress:\n            type: string\n            description: Web site address\n          WorkstationIdentifier:\n            $ref: '#/components/schemas/Workstation'\n        description: Content server device.\n    CreateDocumentinfo:\n      required:\n      - dataEntryTemplate\n      - indexFolderDocumentFiles\n      type: object\n      properties:\n        dataEntryTemplate:\n          $ref: '#/components/schemas/DataEntryTemplate'\n        indexFolderDocumentFiles:\n          type: array\n          description: 'An array of relative document file paths. Which are expected\n            to resolve to paths within the File360 Web Server''s directory. Like :\n            ''/documents/uploads/1.tif''. This will resolve to ''{WebServerInstallDir}/documents/uploads/1.tif''.\n            No escape characters are accepted.'\n          items:\n            $ref: '#/components/schemas/IndexFolderDocumentFile'\n      description: Create document information.\n    DataEntryInputField:\n      type: object\n      properties:\n        LookupTable:\n          $ref: '#/components/schemas/LookupTable'\n        DisplayType:\n          type: string\n          description: Display type. Edit = 'E', MaskEdit = '\u003cmask value\u003e', Lookup\n            = 'L,\u003cnum\u003e'\n          default: E\n          enum:\n          - E\n          - \u003cmask value\u003e\n          - L,\u003cnum\u003e\n        EntryCallback:\n          $ref: '#/components/schemas/CallbackHandle'\n        ExitCallback:\n          $ref: '#/components/schemas/CallbackHandle'\n        FieldType:\n          type: integer\n          description: Field type. None = 0, Currency = 11, Date = 9, DateTime = 8,\n            Double = 5, Float = 4, LongInteger = 3, String = 6, Time = 10\n        Hint:\n          type: string\n          description: Field hint\n        Id:\n          type: integer\n          description: Field id\n        IsDuplicate:\n          type: boolean\n          description: Should the field be duplicated on data entry\n        Label:\n          type: string\n          description: Field label\n        Length:\n          type: integer\n          description: Field data max length\n        MappingNumber:\n          type: integer\n          description: Mapping number\n        Mask:\n          type: string\n          description: Field mask\n        MaskPlaceholder:\n          type: string\n          description: Field mask placeholder\n        MaskStorage:\n          type: integer\n          description: Mask storage. UserData = 0, Literals = 1, Spaces = 2, IncludePlaceholders\n            = 3, IncludeLiteralsAndPlaceholders = 4, IncludeLiterals = 5\n        Name:\n          type: string\n          description: Field name\n        Precision:\n          type: integer\n          description: Field precision\n        Required:\n          type: boolean\n          description: Is the field required\n        Value:\n          type: string\n          description: Field value\n      description: Data entry input field.\n    DataEntryInputFieldItem:\n      type: object\n      properties:\n        Key:\n          type: string\n          description: Field Id\n        Value:\n          $ref: '#/components/schemas/DataEntryInputField'\n      description: 'Data entry key-value pair : Field id - DataEntryTemplateField'\n    DataEntryTemplate:\n      allOf:\n      - $ref: '#/components/schemas/DataEntryTemplateIdentifier'\n      - type: object\n        properties:\n          ApplicationId:\n            type: integer\n            description: Application id\n          ApplicationName:\n            type: string\n            description: Application name\n          ArchiveId:\n            type: integer\n            description: Archive id\n          ArchiveName:\n            type: string\n            description: Archive name\n          AvailableDevices:\n            type: array\n            description: Available devices\n            items:\n              $ref: '#/components/schemas/DeviceIdentifier'\n          CanDataEnter:\n            type: boolean\n            description: Can data enter\n          CanUpdate:\n            type: boolean\n            description: Can update\n          EntryCallback:\n            $ref: '#/components/schemas/CallbackHandle'\n          ExitCallback:\n            $ref: '#/components/schemas/CallbackHandle'\n          InputFields:\n            type: array\n            description: Collection of field ids and input field objects\n            items:\n              $ref: '#/components/schemas/DataEntryInputFieldItem'\n          SelectedDevice:\n            $ref: '#/components/schemas/DeviceIdentifier'\n        description: Data entry template.\n    DataEntryTemplateDescription:\n      type: object\n      properties:\n        ApplicationId:\n          type: integer\n          description: Application id\n        ApplicationName:\n          type: string\n          description: Application name\n        ArchiveId:\n          type: integer\n          description: Archive id\n        ArchiveName:\n          type: string\n          description: Archive name\n        Id:\n          type: integer\n          description: Template id\n        Name:\n          type: string\n          description: Template name\n      description: Data entry template description.\n    DataEntryTemplateIdentifier:\n      required:\n      - Id\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Entry template id\n        Name:\n          type: string\n          description: Entry template name\n      description: Data entry template identifier.\n      discriminator:\n        propertyName: Id\n    DataEntryTemplatesList:\n      type: object\n      properties:\n        DataEntryTemplates:\n          type: array\n          description: Data entry templates\n          items:\n            $ref: '#/components/schemas/DataEntryTemplateDescription'\n      description: A collection of data entry templates.\n    DeleteDocumentResult:\n      type: object\n      properties:\n        Document:\n          $ref: '#/components/schemas/DocumentIdentifier'\n        ErrorMessage:\n          type: string\n          description: Error message\n      description: Del document results.\n    Device:\n      type: object\n      properties:\n        CheckForBestPractices:\n          type: boolean\n          description: Check that device employs the best practices\n        DeviceIdentifier:\n          $ref: '#/components/schemas/DeviceIdentifier'\n        PathIdentifier:\n          $ref: '#/components/schemas/PathIdentifier'\n        StatusReport:\n          $ref: '#/components/schemas/OperationStatus'\n        WorkstationIdentifier:\n          $ref: '#/components/schemas/Workstation'\n      description: Device\n    DeviceIdentifier:\n      type: object\n      properties:\n        DeviceType:\n          type: integer\n          description: Device type. 0 = None,1 = Cache,2 = Keyfile,3 = MicrofilmIdw,4\n            = MicrofilmImt,5 = MicrofilmIms,6 = MicrofilmI7300,7 = LocalCdrom,8 =\n            LocalCdWriter,9 = RemoteCdrom,10 = RemoteCdWriter,11 = CdromJukebox,12\n            = CdromJukeboxWriter,13 = CacheServer,14 = DocServer,15 = Offline,16 =\n            AutoCache,17 = Scanner,18 = Volume,19 = ContentServer\n        Id:\n          type: integer\n          description: Device id\n        Name:\n          type: string\n          description: Device name\n      description: Device identifier.\n    DocumentCreateVersionFile:\n      required:\n      - fileNumber\n      - filePath\n      type: object\n      properties:\n        fileNumber:\n          type: integer\n          description: File number\n        filePath:\n          type: string\n          description: File path\n      description: Document file for create new version.\n    DocumentFormatIcon:\n      type: object\n      properties:\n        Icon:\n          $ref: '#/components/schemas/Icon'\n        TotalResults:\n          type: integer\n          description: Tiff = 1, Ascii = 2, Bitmap = 3, Word = 4, Excel = 5, Powerpoint\n            = 6, Windoc = 7, Unknown = 8, Exe = 9, LockedByCurrentUser = 100, Keywords\n            = 101, Remarks = 102, LockedByOtherUser = 103, VersionsExist = 104, Expired\n            = 105, Annotations = 106\n      description: Document format icon.\n    DocumentIdentifier:\n      allOf:\n      - $ref: '#/components/schemas/SourceDocumentIdentifier'\n      - required:\n        - Suffix\n        type: object\n        properties:\n          Suffix:\n            type: integer\n            description: Document suffix id\n        description: Document identifier.\n    DocumentIdentifierIndexDataChangeMessage:\n      required:\n      - Documents\n      - EntryTemplate\n      type: object\n      properties:\n        Documents:\n          type: array\n          description: Collection of document identifiers, one or more, to change\n            index data\n          items:\n            $ref: '#/components/schemas/DocumentIdentifier'\n        EntryTemplate:\n          $ref: '#/components/schemas/DataEntryTemplate'\n      description: Collection of document identifiers to change and associated change\n        data.\n    DocumentLevelSecurity:\n      type: object\n      properties:\n        Level:\n          type: integer\n          description: Security level\n        Description:\n          type: string\n          description: Level description\n        Selected:\n          type: boolean\n          description: Level selected\n      description: Document level security\n    DocumentPageItem:\n      type: object\n      properties:\n        Key:\n          type: integer\n          description: Page number\n        Value:\n          type: string\n          description: Path to page\n      description: Document page Key-value pair - page number - path to page\n    FetchDocumentIndexReturn:\n      type: object\n      properties:\n        Key:\n          type: integer\n          description: fieldId\n        Value:\n          type: string\n          description: String data\n      description: 'Fetch document index key-value return : Field id - string data'\n    Field:\n      type: object\n      properties:\n        Alignment:\n          type: integer\n          description: 'Alignment - one of the following : Left = 0, Right = 1, Center\n            = 2'\n        Display:\n          type: integer\n          description: 'Display type - one of the following : Edit = 0, MaskEdit =\n            1, Lookup = 2'\n        DisplayType:\n          type: string\n          description: Display type. Edit = 'E', MaskEdit = '\u003cmask value\u003e', Lookup\n            = 'L,\u003cnum\u003e'\n          default: E\n          enum:\n          - E\n          - \u003cmask value\u003e\n          - L,\u003cnum\u003e\n        FieldType:\n          type: integer\n          description: 'Field data type - one of the following : None = 0, Currency\n            = 11, Date = 9, DateTime = 8, Double = 5, Float = 4, LongInteger = 3,\n            String = 6, Time = 10'\n        FillCharacter:\n          type: string\n        Hint:\n          type: string\n        Length:\n          type: integer\n        Mask:\n          type: string\n        MaskFormat:\n          type: integer\n          description: 'Mask format - one of the following : None = 0, Standard =\n            1, DateAndTime = 2, Numeric = 3'\n        MaskPlaceholder:\n          type: string\n        MaskStorage:\n          type: integer\n          description: 'Mask storage type - one of the following : UserData = 0, Literals\n            = 1 (Obsolete), Spaces = 2(Obsolete), IncludePlaceholders = 3, IncludeLiteralsAndPlaceholders\n            = 4, IncludeLiterals = 5'\n        Name:\n          type: string\n        Precision:\n          type: integer\n      description: Field.\n      discriminator:\n        propertyName: type\n    FieldCoordinates:\n      type: object\n      properties:\n        Bottom:\n          type: integer\n        Height:\n          type: integer\n        Left:\n          type: integer\n        Right:\n          type: integer\n        Top:\n          type: integer\n        Width:\n          type: integer\n      description: Field coordinates.\n    FieldIdentifier:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Field id\n        Name:\n          type: string\n          description: Field name\n      description: Field identifier\n      discriminator:\n        propertyName: Id\n    FileInfo:\n      type: object\n      properties:\n        displayName:\n          type: string\n          description: Thumbnail display name\n        fileExtension:\n          type: string\n          description: Source file extension\n        fileNumber:\n          type: integer\n          description: File number\n        sourceFileURL:\n          type: string\n          description: Source file URL\n        thumbnailURL:\n          type: string\n          description: Thumbnail URL\n      description: Document file information.\n    FolderDocumentAndIndex:\n      type: object\n      properties:\n        document:\n          $ref: '#/components/schemas/IndexFolderDocument'\n        index:\n          type: integer\n          description: Document index\n      description: Folder document index and its associated index folder document\n    Group:\n      allOf:\n      - $ref: '#/components/schemas/GroupIdentifier'\n      - type: object\n        properties:\n          ActiveDirectoryLDAPPath:\n            type: string\n            description: Active directory LDAP path\n          Created:\n            type: string\n            description: Date created.\n            format: date\n          Modified:\n            type: string\n            description: Date modified.\n            format: date\n          ReservedLicenseCount:\n            type: integer\n            description: Reserved license count.\n          UserCount:\n            type: integer\n            description: User count.\n          Members:\n            type: array\n            description: Members. (This collection will only be populated by the GET\n              'group/members' API call)\n            items:\n              $ref: '#/components/schemas/User'\n          FunctionalSecurity:\n            type: array\n            description: A collection of functional security items.\n            items:\n              $ref: '#/components/schemas/FunctionalSecurityItem'\n          ApplicationFieldAccess:\n            type: array\n            description: Collection of application field access items.\n            items:\n              $ref: '#/components/schemas/ApplicationFieldAccessItem'\n          DataEntryTemplateAccess:\n            type: array\n            description: Collection of data entry template access items.\n            items:\n              $ref: '#/components/schemas/DataEntryTemplateAccessItem'\n          RetrievalTemplateAccess:\n            type: array\n            description: Collection of retrieval template access items.\n            items:\n              $ref: '#/components/schemas/RetrievalTemplateAccessItem'\n          SourceDocumentSecurityAccess:\n            type: array\n            description: Source document security access.\n            items:\n              $ref: '#/components/schemas/SourceDocumentSecurityAccessItem'\n          IndexDocumentSecurityAccess:\n            type: array\n            description: Index document security access.\n            items:\n              $ref: '#/components/schemas/IndexDocumentSecurityAccessItem'\n        description: Group.\n    SourceDocumentSecurityAccessItem:\n      type: object\n      properties:\n        Key:\n          type: integer\n          description: Security level\n        Value:\n          type: boolean\n          description: Security level access\n      description: Source document security access item.\n    IndexDocumentSecurityAccessItem:\n      type: object\n      properties:\n        Key:\n          type: integer\n          description: Security level\n        Value:\n          type: boolean\n          description: Security level access\n      description: Index document security access item.\n    DataEntryTemplateAccessItem:\n      type: object\n      properties:\n        Key:\n          $ref: '#/components/schemas/DataEntryTemplate'\n        Value:\n          type: boolean\n          description: Access enabled for data entry template.\n      description: Data entry template access item.\n    RetrievalTemplateAccessItem:\n      type: object\n      properties:\n        Key:\n          $ref: '#/components/schemas/RetrievalTemplate'\n        Value:\n          type: boolean\n          description: Access enabled for retrieval template.\n      description: Retrieval template access item.\n    ApplicationFieldAccessItem:\n      type: object\n      properties:\n        Key:\n          $ref: '#/components/schemas/ApplicationField'\n        Value:\n          type: boolean\n          description: Application filed access item enabled.\n      description: Application field access item.\n    ApplicationField:\n      allOf:\n      - $ref: '#/components/schemas/Field'\n      - type: object\n        properties:\n          Application:\n            $ref: '#/components/schemas/ApplicationIdentifier'\n          Label:\n            type: string\n            description: Field label.\n          IsRequired:\n            type: boolean\n            description: Is field required.\n          UsageType:\n            type: integer\n            description: 'Usage type - one of the following : None = 0, CallbackUsage\n              = 1, Mask = 2, Lookup = 3'\n        description: Functional security item.\n    FunctionalSecurityItem:\n      type: object\n      properties:\n        Key:\n          $ref: '#/components/schemas/PermissionItemDescriptionItem'\n        Value:\n          type: boolean\n          description: Permission item enabled.\n      description: Functional security item.\n    PermissionItemDescriptionItem:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Permission name.\n        Description:\n          type: string\n          description: Permission description.\n        IndexInDatabase:\n          type: integer\n          description: Database index id.\n        Category:\n          type: integer\n          description: 'Category type - one of the following : Administration = 0,\n            DataEntry = 1, Document = 2, Global = 3, Mail = 4, Remarks = 5, Retrieval\n            = 6, SpecialAPI = 7'\n        PermissionItem:\n          $ref: '#/components/schemas/PermissionItem'\n      description: Permission item description.\n    GroupIdentifier:\n      type: object\n      properties:\n        ApplicationArchiveAccess:\n          $ref: '#/components/schemas/ApplicationArchiveAccess'\n        Id:\n          type: integer\n          description: Group id\n        Name:\n          type: string\n          description: Group name\n      description: Group identifier.\n    Hit:\n      type: object\n      properties:\n        AnnotationCount:\n          type: integer\n        ApplicationId:\n          type: integer\n        ArchiveId:\n          type: integer\n        CanDataEnter:\n          type: boolean\n        CanDelete:\n          type: boolean\n        CanExport:\n          type: boolean\n        CanUpdate:\n          type: boolean\n        ContentServerId:\n          type: string\n        ContentServerWebsiteAddress:\n          type: string\n        DateTimeLocked:\n          type: string\n          format: date\n        Description:\n          type: string\n        DescriptionFieldId:\n          type: integer\n        Editor:\n          type: string\n        Expires:\n          type: string\n          format: date\n        Fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/HitListFieldKeyValuePair'\n        FileFormat:\n          type: integer\n        IsKeywordsEnabled:\n          type: boolean\n        KeywordData:\n          type: string\n        Keywords:\n          type: boolean\n        LegalHoldExpires:\n          type: string\n          format: date\n        LegalHoldReason:\n          type: string\n        LegalHoldUserId:\n          type: integer\n        LockType:\n          type: integer\n          description: 'Lock reserve type - one of the following : NotReserved = 0,\n            Reserved = 1, ReservedByCurrentUser = 2, LegalHold = 3, RecordsManagement\n            = 4'\n        MasterId:\n          type: integer\n        MediumType:\n          type: integer\n          description: 'Document medium type - of the following : Unknown = 0, Cache\n            = 1, Microfilm = 2, Ascii = 3, Hybrid = 4'\n        ModifyDateTime:\n          type: string\n          format: date\n        Remarks:\n          type: boolean\n        Suffix:\n          type: integer\n        Version:\n          type: integer\n      description: Retrieval hit.\n    HitListFieldKeyValuePair:\n      type: object\n      properties:\n        Key:\n          type: integer\n          description: Field id\n        Value:\n          $ref: '#/components/schemas/Field'\n      description: Hit list field key value pair.\n    Hits:\n      type: object\n      properties:\n        DocumentFormatIcons:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentFormatIcon'\n        HitItems:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hit'\n        HitlistId:\n          type: integer\n        LookupTables:\n          type: array\n          description: Look up tables.\n          items:\n            $ref: '#/components/schemas/LookupTable'\n        MoreHits:\n          type: boolean\n        RetrievalTemplate:\n          $ref: '#/components/schemas/RetrievalTemplate'\n        SearchUri:\n          type: string\n        StatusIcons:\n          type: array\n          items:\n            type: object\n        TotalResults:\n          type: integer\n        WebServerUri:\n          type: string\n      description: A collection of hits.\n    Icon:\n      type: object\n      properties:\n        Description:\n          type: string\n        Icon:\n          type: object\n          properties: {}\n          description: Byte array for icon.\n        Identifier:\n          type: integer\n          description: Tiff = 1, Ascii = 2, Bitmap = 3, Word = 4, Excel = 5, Powerpoint\n            = 6, Windoc = 7, Unknown = 8, Exe = 9, LockedByCurrentUser = 100, Keywords\n            = 101, Remarks = 102, LockedByOtherUser = 103, VersionsExist = 104, Expired\n            = 105, Annotations = 106\n      description: Icon\n    IndexFolder:\n      type: object\n      properties:\n        ApplicationId:\n          type: integer\n          description: Id of the assigned application for the folder\n        ApplicationName:\n          type: string\n          description: Name of the assigned application for the folder\n        ArchiveId:\n          type: integer\n          description: Id of the assigned archive for the folder\n        ArchiveName:\n          type: string\n          description: Name of the assigned archive for the folder\n        AssignedToGroupId:\n          type: integer\n          description: Id of group assigned to the folder\n        AssignedToName:\n          type: string\n          description: Name of group or user assigned to the folder\n        AssignedToUserId:\n          type: integer\n          description: Id of user assigned to the folder\n        Count:\n          type: integer\n          description: Number of documents in the folder\n        Created:\n          type: string\n          description: Date the folder was created\n        DistinctApplicationArchives:\n          type: array\n          description: Application archive listing\n          items:\n            $ref: '#/components/schemas/ApplicationArchivePair'\n        Id:\n          type: integer\n          description: Folder id\n        IsError:\n          type: boolean\n          description: Is this an error folder?\n        Name:\n          type: string\n          description: Folder name\n        TypeOfFolder:\n          type: integer\n          description: Folder types - None = 0, DataEntry = 1, Retrieval = 2, Personal\n            = 3, MailDataEntry = 4, Mail = 5, RequestProcessor = 6, ASCII = 7, AsciiDataEntry\n            = 8, Export = 9, Scanner = 10, AsciiDatabaseEngine = 11, MailRequestProcessor\n            = 12, EmailRequestProcessor = 13, AsciiMailDataEntry = 14\n        UsedBy:\n          type: string\n          description: Name of user that is currently using the folder\n        UsedById:\n          type: integer\n          description: Id of user currently using the folder\n      description: Index folder\n    IndexFolderDocument:\n      type: object\n      properties:\n        ApplicationId:\n          type: integer\n          description: Application id\n        ApplicationName:\n          type: string\n          description: Application name\n        ArchiveId:\n          type: integer\n          description: Archive id\n        ArchiveName:\n          type: string\n          description: Archive name\n        Count:\n          type: integer\n          description: File count\n        Created:\n          type: string\n          description: Date document created\n        FolderId:\n          type: integer\n          description: Folder id\n        Id:\n          type: integer\n          description: Folder document id\n        IndexDataId:\n          type: integer\n          description: Document id\n        Name:\n          type: string\n          description: Document name\n        UsedBy:\n          type: string\n          description: Name of user currently using the document\n        UsedById:\n          type: integer\n          description: Id of user currently using the document\n      description: Index folder document.\n    IndexFolderDocumentData:\n      type: object\n      properties:\n        FolderDocument:\n          $ref: '#/components/schemas/IndexFolderDocument'\n        FolderId:\n          type: integer\n          description: Folder id\n        IndexData:\n          type: array\n          description: Indexing string data array\n          items:\n            type: string\n        IsFolderShared:\n          type: boolean\n          description: Is the folder shared between users and groups\n        ParentFolder:\n          $ref: '#/components/schemas/IndexFolder'\n        PathsToDocumentPages:\n          type: array\n          description: Paths to indexed document pages (files)\n          items:\n            $ref: '#/components/schemas/DocumentPageItem'\n        RelativeDocumentNumber:\n          type: integer\n          description: Number of document relative to folder\n        Template:\n          $ref: '#/components/schemas/DataEntryTemplate'\n      description: Indexing folder document data\n    IndexFolderDocumentFile:\n      required:\n      - filePath\n      type: object\n      properties:\n        filePath:\n          type: string\n          description: File path\n      description: Index folder document file.\n    IndexFolderDocumentFiles:\n      required:\n      - files\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexFolderDocumentFile'\n      description: Collection of index folder document file relative paths, one file\n        required\n    IndexFolderDocumentViewer:\n      type: object\n      properties:\n        IndexFolderDocumentdata:\n          $ref: '#/components/schemas/IndexFolderDocumentData'\n        IndexViewerURL:\n          type: string\n          description: Index viewer URL\n      description: Folder document associated viewer information\n    IndexFolderDocuments:\n      type: object\n      properties:\n        Documents:\n          type: array\n          description: List of documents in the folder (GET) or the last document\n            created in the folder (POST)\n          items:\n            $ref: '#/components/schemas/FolderDocumentAndIndex'\n        Folder:\n          $ref: '#/components/schemas/IndexFolder'\n        FolderId:\n          type: integer\n          description: Folder id\n      description: Collection of index folder documents\n    IndexFoldersMessage:\n      type: object\n      properties:\n        BatchErrorCount:\n          type: integer\n          description: Batch error count\n        IndexFolders:\n          type: array\n          description: Index-able folders\n          items:\n            $ref: '#/components/schemas/IndexFolder'\n        UnknownBatchErrorState:\n          type: boolean\n          description: Is the batch in an unknown error state?\n      description: Index-able error folders\n    IndexedDocument:\n      type: object\n      properties:\n        Action:\n          type: integer\n          description: Index action\n        ApplicationId:\n          type: integer\n          description: Application id\n        ArchiveId:\n          type: integer\n          description: Archive id\n        Document:\n          $ref: '#/components/schemas/SourceDocumentIdentifier'\n        FolderData:\n          $ref: '#/components/schemas/IndexFolderDocument'\n        NextFolderData:\n          $ref: '#/components/schemas/IndexFolderDocument'\n      description: Index document.\n    Keyfile:\n      allOf:\n      - $ref: '#/components/schemas/Device'\n      - type: object\n        properties:\n          CheckForBestPractices:\n            type: boolean\n            description: Check that device employs the best practices\n          DeviceIdentifier:\n            $ref: '#/components/schemas/DeviceIdentifier'\n          PathIdentifier:\n            $ref: '#/components/schemas/PathIdentifier'\n          StatusReport:\n            $ref: '#/components/schemas/OperationStatus'\n          WorkstationIdentifier:\n            $ref: '#/components/schemas/Workstation'\n        description: Keyfile device.\n    Keywords:\n      type: object\n      properties:\n        KeywordData:\n          type: string\n          description: Keyword data\n        SourceDocumentIdentifier:\n          $ref: '#/components/schemas/SourceDocumentIdentifier'\n      description: Keywords.\n    LegalHoldStatus:\n      type: object\n      properties:\n        HasHoldEntry:\n          type: boolean\n          description: Has a legal hold entry\n        HoldReason:\n          type: string\n          description: The reason for the hold\n        HoldCreated:\n          type: string\n          description: Date the legal hold was placed\n        HoldExpires:\n          type: string\n          description: Date the legal hold expires - INTERNAL ONLY\n        HoldExpiresDate:\n          type: string\n          description: 'Date the legal hold expires - Microsoft JSON date format -\n            format : ''2012-03-19T07:22Z'''\n        HoldUserCreated:\n          $ref: '#/components/schemas/UserIdentifier'\n      description: Legal hold status.\n    LogMessage:\n      required:\n      - Message\n      - UserName\n      type: object\n      properties:\n        Message:\n          type: string\n          description: Log message\n        UserName:\n          type: string\n          description: User name\n      description: Log message information.\n    LookupTable:\n      type: object\n      properties:\n        FieldId:\n          type: integer\n          description: Field id\n        LookUpTableEntries:\n          type: array\n          description: Look up table entries for field\n          items:\n            $ref: '#/components/schemas/LookupTableEntryItem'\n      description: Look up table\n    LookupTableEntryItem:\n      type: object\n      properties:\n        Key:\n          type: string\n          description: List Key\n        Value:\n          type: string\n          description: List Value\n      description: Lookup table entry field key value pair\n    Microfilm:\n      allOf:\n      - $ref: '#/components/schemas/Device'\n      - type: object\n        description: Microfilm device.\n    OperationStatus:\n      type: object\n      properties:\n        CanCancel:\n          type: boolean\n          description: Can the operation be canceled\n        Count:\n          type: integer\n          description: Operation count\n        StatusMessage:\n          type: string\n          description: Operation status message\n        Total:\n          type: integer\n          description: Operation total\n      description: Device operation status.\n    PathIdentifier:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Path id\n        Path:\n          type: string\n          description: Path\n      description: device path identifier.\n    PermissionItem:\n      type: object\n      properties:\n        PermissionItem:\n          type: integer\n          description: Permission\n      description: Permission item.\n    Remark:\n      type: object\n      properties:\n        Content:\n          type: string\n          description: Remark content\n        DocumentIdentifier:\n          $ref: '#/components/schemas/DocumentIdentifier'\n      description: Remark.\n    RetrievalTemplate:\n      allOf:\n      - $ref: '#/components/schemas/RetrievalTemplateIdentifier'\n      - type: object\n        properties:\n          AppendResults:\n            type: boolean\n            description: Append next search result to existing results\n          ContentServerSearchAddress:\n            type: string\n            description: Content server URL search address\n          DeleteOption:\n            type: integer\n            description: 'Items inclusion option. NonDeleted = 0: Include only non\n              deleted items, Deleted = 1: include only deleted items, DeletedAndNonDeleted\n              = 2: include both deleted and non-deleted items'\n          IncludeExpiredDocuments:\n            type: boolean\n            description: Include expired documents in hit list\n          InputFields:\n            type: array\n            description: Collection of field ids and input field objects\n            items:\n              $ref: '#/components/schemas/RetrievalTemplateInputFieldItem'\n          IsPersonalTemplate:\n            type: boolean\n            description: Is this a personal template\n          MaxHits:\n            maximum: 5E+4\n            minimum: 1\n            type: integer\n            description: Maximum number of hits to return.  Max 50000\n            format: int32\n            default: 100\n          OnlyLegalHoldDocuments:\n            type: boolean\n            description: Include only documents on legal hold in hit list\n          OutputFields:\n            type: array\n            description: Collection of field ids and output field objects\n            items:\n              $ref: '#/components/schemas/RetrievalTemplateOutputFieldItem'\n          GroupDescriptions:\n            type: array\n            description: Collection of the names of associated groups.\n            items:\n              type: string\n        description: Retrieval template.\n    RetrievalTemplateDescription:\n      type: object\n      properties:\n        ApplicationId:\n          type: integer\n          description: Application id\n        ApplicationName:\n          type: string\n          description: Application name\n        FriendlyName:\n          type: string\n          description: Template friendly name\n        Id:\n          type: integer\n          description: Template id\n        Name:\n          type: string\n          description: Template name\n      description: A retrieval template description.\n    RetrievalTemplateIdentifier:\n      required:\n      - Id\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Template id\n        Name:\n          type: string\n          description: Template name\n      description: Retrieval template identifier.\n      discriminator:\n        propertyName: Id\n    RetrievalTemplateInputField:\n      allOf:\n      - $ref: '#/components/schemas/Field'\n      - type: object\n        properties:\n          CanCompare:\n            type: boolean\n          ChangeCallback:\n            $ref: '#/components/schemas/CallbackHandle'\n          CompareOperator:\n            type: integer\n            description: 'Compare operator type - one of the following : Equal = 1,\n              NotEqual = 2, GreaterThan = 3, LessThan = 4, GreaterThanOrEqualTo =\n              5, LessThanOrEqualTo = 6, Between = 7'\n          ComparePosition1:\n            $ref: '#/components/schemas/FieldCoordinates'\n          ComparePosition2:\n            $ref: '#/components/schemas/FieldCoordinates'\n          Conjunction:\n            type: integer\n            description: 'Conjunction type - one of the following : None = 0, And\n              = 1, Or = 2'\n          ConjunctionPosition:\n            $ref: '#/components/schemas/FieldCoordinates'\n          EntryCallback:\n            $ref: '#/components/schemas/CallbackHandle'\n          ExitCallback:\n            $ref: '#/components/schemas/CallbackHandle'\n          Field1Position:\n            $ref: '#/components/schemas/FieldCoordinates'\n          Field2Position:\n            $ref: '#/components/schemas/FieldCoordinates'\n          Label:\n            type: string\n          LabelPosition:\n            $ref: '#/components/schemas/FieldCoordinates'\n          LeftParenthesis:\n            type: boolean\n          LeftParenthesisPosition:\n            $ref: '#/components/schemas/FieldCoordinates'\n          LookupTable:\n            type: array\n            description: Look up table.\n            items:\n              type: integer\n          Required:\n            type: boolean\n          RightParenthesis:\n            type: boolean\n          RightParenthesisPosition:\n            $ref: '#/components/schemas/FieldCoordinates'\n          Value1:\n            type: object\n            properties: {}\n          Value2:\n            type: object\n            properties: {}\n        description: Retrieval template input field.\n    RetrievalTemplateInputFieldItem:\n      type: object\n      properties:\n        Key:\n          type: string\n          description: Field Id\n        Value:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetrievalTemplateInputField'\n      description: Retrieval template input field id and object.\n    RetrievalTemplateOutputField:\n      allOf:\n      - $ref: '#/components/schemas/FieldIdentifier'\n      - type: object\n        properties:\n          CanSort:\n            type: boolean\n          CharacterLength:\n            type: integer\n          DisplayType:\n            type: string\n            description: Display type. Edit = 'E', MaskEdit = '\u003cmask value\u003e', Lookup\n              = 'L,\u003cnum\u003e'\n            default: E\n            enum:\n            - E\n            - \u003cmask value\u003e\n            - L,\u003cnum\u003e\n          FieldType:\n            type: integer\n            description: 'Field data type - one of the following : None = 0, Currency\n              = 11, Date = 9, DateTime = 8, Double = 5, Float = 4, LongInteger = 3,\n              String = 6, Time = 10'\n          IncludeInOutput:\n            type: boolean\n          IsSystemField:\n            type: boolean\n          Label:\n            type: string\n          Mask:\n            type: string\n          OutputFieldWidth:\n            type: number\n          OutputOrder:\n            type: integer\n          Precision:\n            type: integer\n          SortOrder:\n            type: integer\n          SortType:\n            type: integer\n            description: 'Sort type - one of the following : Ascending = 0, Descending\n              = 1, NoSort = 2'\n        description: Retrieval template output field.\n    RetrievalTemplateOutputFieldItem:\n      type: object\n      properties:\n        Key:\n          type: string\n          description: Field Id\n        Value:\n          type: array\n          items:\n            $ref: '#/components/schemas/RetrievalTemplateOutputField'\n      description: Retrieval template output field id and object.\n    RetrievalTemplatesList:\n      type: object\n      properties:\n        RetrievalTemplates:\n          type: array\n          description: Retrieval template descriptions\n          items:\n            $ref: '#/components/schemas/RetrievalTemplateDescription'\n      description: A collection of retrieval template descriptions.\n    RoutingDetails:\n      type: object\n      properties:\n        documents:\n          type: array\n          description: Collection of document identifiers to route.\n          items:\n            $ref: '#/components/schemas/DocumentIdentifier'\n        groups:\n          type: array\n          description: Collection of group identifiers to route to.\n          items:\n            type: integer\n        users:\n          type: array\n          description: Collection of user identifiers to route to.\n          items:\n            type: integer\n      description: Routing details.\n    Setting:\n      type: object\n      properties:\n        Category:\n          type: string\n          description: Setting category name\n        Name:\n          type: string\n          description: Setting name\n        Value:\n          type: object\n          properties: {}\n          description: Setting value\n      description: User setting.\n    SourceDocumentIdentifier:\n      required:\n      - MasterId\n      - Version\n      type: object\n      properties:\n        MasterId:\n          type: integer\n          description: Master id\n        Version:\n          type: integer\n          description: Version id\n        VersionCreated:\n          type: string\n          description: Date version was created\n        VersionCreatorId:\n          type: integer\n          description: Version creator user id\n        VersionCreatorName:\n          type: string\n          description: Version creator name\n        VersionLabel:\n          type: string\n          description: Version label\n      description: Source document identifier.\n    SourceDocumentResult:\n      type: object\n      properties:\n        ErrorMessage:\n          type: string\n          description: Document action error message\n        SourceDocument:\n          $ref: '#/components/schemas/SourceDocumentIdentifier'\n      description: Source document result.\n    ServerStatus:\n      type: object\n      properties:\n        ProductName:\n          type: string\n          description: Product name.\n        ProductVersion:\n          type: string\n          description: Product version.\n      description: Web server status information.\n    User:\n      allOf:\n      - $ref: '#/components/schemas/UserIdentifier'\n      - type: object\n        properties:\n          Annotation:\n            type: string\n            description: Annotation note defined for user, see User/Group administration\n          ActiveDirectoryUser:\n            type: boolean\n            description: The user created manually (false) or was auto-provisioned\n              via OTDS or Active Directory (true)\n          DatabaseSerialNumber:\n            type: integer\n            description: System Key serial number\n          DaysBeforePasswordChangeRequired:\n            type: integer\n            description: Days before password expires\n          DisallowedIndexingExtensions:\n            type: array\n            description: Collection of disallowed file extensions\n            items:\n              type: string\n          EndDate:\n            type: string\n            description: End date for user access\n          File360WebserverUrl:\n            type: string\n            description: Web server URL\n          FirstName:\n            type: string\n            description: The user's first name\n          GroupSeats:\n            type: integer\n            description: Licenses reserved\n          InvalidLogonAttemptsAllowed:\n            type: integer\n            description: The number of invalid log on attempts allowed\n          IsActivated:\n            type: boolean\n            description: Countersign for the system has been applied\n          IsAdministrator:\n            type: boolean\n            description: Is the user an administrator, see Administrator setting in\n              User/Group administration\n          IsAutoRunDefault:\n            type: boolean\n            description: Is auto run default, see Autorun setting in System Configuration\n          IsDemo:\n            type: boolean\n            description: Is this a demo system\n          IsRecordsManager:\n            type: boolean\n            description: Is the user a records manager, see Records Manager setting\n              in User/Group administration\n          IsServerVerboseLoggingEnabled:\n            type: boolean\n            description: Is verbose logging enabled\n          LastName:\n            type: string\n            description: The user's last name\n          Locked:\n            type: boolean\n            description: Is user locked out\n          OpenExternalExtensions:\n            type: string\n            description: Semi-colon separated list of file extensions to open externally\n          PasswordLastChanged:\n            type: string\n            description: Date last time password was changed\n          Permissions:\n            type: array\n            description: Collection of permissions\n            items:\n              $ref: '#/components/schemas/PermissionItem'\n          ProgramId:\n            type: integer\n            description: Program id\n          SecurityLevelsGranted:\n            type: array\n            description: Collection of security levels granted\n            items:\n              type: integer\n          Settings:\n            type: array\n            description: Collection of user settings\n            items:\n              $ref: '#/components/schemas/Setting'\n          StartDate:\n            type: string\n            description: Start date for user accessed\n          UniqueId:\n            type: string\n            description: Users unique identifier\n          WarnSystemKeyToExpireMessage:\n            type: string\n            description: System key to expire message.  If this value is set then\n              'Display license expiration warning' checkbox is set.\n          WebViewerOption:\n            type: integer\n            description: 'Web viewer options - one of the following : PDF = 0, Brava\n              = 1'\n          WorkstationId:\n            type: integer\n            description: Workspace id for client logon\n        description: File360 user\n    UserIdentifier:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: User id\n        Name:\n          type: string\n          description: User name\n      description: User identifier.\n    Volume:\n      type: object\n      properties:\n        DeviceIdentifier:\n          $ref: '#/components/schemas/DeviceIdentifier'\n        Id:\n          type: integer\n          description: Volume id\n        Label:\n          type: string\n          description: Volume label\n        ShouldMoveFilesToTarget:\n          type: boolean\n          description: Should move files to target\n        Slot:\n          type: integer\n          description: Volume slot\n        TargetDeviceIdentifier:\n          $ref: '#/components/schemas/DeviceIdentifier'\n    Workitem:\n      type: object\n      properties:\n        CanModifyDocumentIndex:\n          type: boolean\n          description: Can modify document index\n        ClassName:\n          type: string\n          description: Workitem class name\n        DataEntryTemplateId:\n          type: integer\n          description: Data entry template id\n        FormFields:\n          type: array\n          description: Workitem form field.\n          items:\n            $ref: '#/components/schemas/WorkitemFormField'\n        History:\n          type: array\n          description: Workitem history.\n          items:\n            $ref: '#/components/schemas/WorkitemHistory'\n        Id:\n          type: string\n          description: Workitem id\n        InboxFields:\n          type: array\n          description: Workitem form inbox fields.\n          items:\n            $ref: '#/components/schemas/WorkitemFormInboxField'\n        IsInProgress:\n          type: boolean\n          description: Is workitem in progress\n        IsModified:\n          type: boolean\n          description: Has workitem been modified\n        IsReserved:\n          type: boolean\n          description: Is workitem reserved\n        Name:\n          type: string\n          description: Workitem name\n        SendToDefault:\n          type: boolean\n          description: Send to default workset\n        SourceDocument:\n          $ref: '#/components/schemas/DocumentIdentifier'\n        Type:\n          type: integer\n          description: Workitem type\n        WorkflowId:\n          type: integer\n          description: Workflow id\n        WorkflowName:\n          type: string\n          description: Workflow name\n        WorksetName:\n          type: string\n          description: Workset name\n        WorkstepEntryTime:\n          type: string\n          description: Time workitem entered the workstep\n        WorkstepName:\n          type: string\n          description: Workstep name\n      description: Workitem.\n    WorkitemForm:\n      type: object\n      properties:\n        Fields:\n          type: array\n          description: Workitem form fields.\n          items:\n            $ref: '#/components/schemas/WorkitemFormField'\n        Name:\n          type: string\n          description: Workitem form name\n      description: Work item form.\n    WorkitemFormField:\n      type: object\n      properties:\n        FieldDataType:\n          type: integer\n          description: 'Field data type - one of the following : None = 0, Currency\n            = 11, Date = 9, DateTime = 8, Double = 5, Float = 4, LongInteger = 3,\n            String = 6, Time = 10'\n        Hint:\n          type: string\n          description: Workitem form field label\n        Id:\n          type: integer\n          description: Workitem form field id\n        IsMemo:\n          type: boolean\n          description: Is the Workitem form field a memo field\n        IsReadOnly:\n          type: boolean\n          description: Is the Workitem form field read only\n        IsRequired:\n          type: boolean\n          description: Is the Workitem form field required\n        Label:\n          type: string\n          description: Workitem form field label\n        Length:\n          type: integer\n          description: Workitem form field length\n        Name:\n          type: string\n          description: Workitem form field name\n        OptionList:\n          type: array\n          description: Possible display options of the field.\n          items:\n            type: string\n        Value:\n          type: string\n          description: Workitem form field value\n        ValueList:\n          type: array\n          description: A collection of values for the form field.\n          items:\n            type: string\n      description: Workitem form field.\n    WorkitemFormInboxField:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Inbox field name\n        Value:\n          type: string\n          description: Inbox field value\n      description: Workitem form field.\n    WorkitemHistory:\n      type: object\n      properties:\n        DestinationWorkstepName:\n          type: string\n          description: Destination workstep name\n        ErrorCode:\n          type: integer\n          description: Error code\n        HasError:\n          type: boolean\n          description: Has an error\n        ResourceName:\n          type: string\n          description: Resource name\n        SourceWorkstepName:\n          type: string\n          description: Source workstep name\n        WorkflowName:\n          type: string\n          description: Workflow Name\n        WorkstepEntryTime:\n          type: string\n          description: Workstep entry time\n      description: Workitem history.\n    Workitems:\n      type: object\n      properties:\n        InboxFields:\n          type: array\n          description: Inbox fields.\n          items:\n            $ref: '#/components/schemas/WorkitemFormField'\n        WorkitemList:\n          type: array\n          description: Workitem list.\n          items:\n            $ref: '#/components/schemas/Workitem'\n      description: Workitems.\n    Workset:\n      type: object\n      properties:\n        Count:\n          type: integer\n          description: Workitem count\n        WorkflowId:\n          type: integer\n          description: Workflow id\n        WorkflowName:\n          type: string\n          description: Workflow name\n        WorksetName:\n          type: string\n          description: Workset name\n      description: Workset.\n    Worksets:\n      type: object\n      properties:\n        WorkitemList:\n          type: array\n          description: Workset list.\n          items:\n            $ref: '#/components/schemas/Workset'\n      description: Worksets.\n    Workstation:\n      type: object\n      properties:\n        Domain:\n          type: string\n          description: Workstation domain name\n        Id:\n          type: integer\n          description: Workstation id\n        Name:\n          type: string\n          description: Workstation name\n      description: Workstation definition.\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/file360/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/file360/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}