{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openkfw/Oscar"
		},
		"file": {
			"name": "apiSchema.yml",
			"size": 0,
			"path": "api/src/openapi/apiSchema.yml",
			"byteSize": 14082,
			"content": "openapi: 3.0.0\ninfo:\n  title: Oscar\n  description: Oscar application REST API'\n  version: 0.0.1\n\npaths:\n  /api/attributes:\n    get:\n      summary: Gets attributes with values\n      parameters:\n        - name: dateStart\n          in: query\n          required: false\n          description: Parameter for data filtering. Updated date of returned data is greater than or equal to dateStart.\n          schema:\n            type: string\n          example: 2020-06-07T00:00:00.000Z\n        - name: dateEnd\n          in: query\n          required: false\n          description: Parameter for data filtering. Updated date of the returned data is less than or equal to dateEnd.\n          schema:\n            type: string\n          example: 2020-06-07T00:00:00.000Z\n        - name: featureId\n          in: query\n          required: false\n          description: Parameter for data filtering. Allow filtering data just for a specific feature(for example provinces).\n          schema:\n            type: array\n            items:\n              type: string\n            example: Bali\n        - name: attributeId\n          in: query\n          required: false\n          description: Parameter for data filtering. The identifier of the attribute we would like to get.\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"A1_recovery rate (%)\"\n        - name: attributeIdCategory\n          in: query\n          required: false\n          description: Parameter for data filtering. Category of attributes.\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"dailyCovid19Cases\"\n        - name: offset\n          in: query\n          required: false\n          description: Parameter for data filtering. The number of the starting record.\n          schema:\n            type: string\n          example: 2\n        - name: limit\n          in: query\n          required: false\n          description: Parameter for data filtering. Maximum number of rows returned.\n          schema:\n            type: string\n          example: 20\n        - name: latestValues\n          in: query\n          required: false\n          description: Parameter for data filtering. Return only items with latest values.\n          schema:\n            type: boolean\n          example: true\n      responses:\n        \"200\":\n          description: Successful response\n          headers:\n            X-Total-Count:\n              schema:\n                type: integer\n              description: Total count of data in the database matching the search criteria.\n\n  /attributes/{attributeId}/availableDates:\n    get:\n      summary: Gets available dates for attributeId\n      parameters:\n        - name: attributeId\n          in: path\n          required: true\n          description: Parameter for data filtering. The identifier of the attribute for which we want to get available dates.\n          schema:\n            type: string\n            example: \"A1_recovery rate (%)\"\n      responses:\n        \"200\":\n          description: Successful response\n\n  /attributes/{attributeId}/uniqueFeatures:\n    get:\n      summary: Get featureIds of values for this attributeId\n      parameters:\n        - name: attributeId\n          in: path\n          required: true\n          description: Parameter for data filtering. The identifier of the attribute for which we want to get unique featureId\n          schema:\n            type: string\n            example: \"Population on admin2 level\"\n      responses:\n        \"200\":\n          description: Successful response\n\n  /api/pointAttributes:\n    get:\n      summary: Getting data with single point coordinates\n      parameters:\n        - in: query\n          name: attributeId\n          schema:\n            type: string\n          description: attributeId\n          required: true\n        - name: dateStart\n          in: query\n          required: false\n          description: Parameter for data filtering. Updated date of returned data is greater than or equal to dateStart.\n          schema:\n            type: string\n          example: 2020-06-07\n        - name: dateEnd\n          in: query\n          required: false\n          description: Parameter for data filtering. Updated date of the returned data is less than or equal to dateEnd.\n          schema:\n            type: string\n          example: 2020-06-07\n        - name: lastDate\n          in: query\n          required: false\n          description: Parameter for data filtering. Return only items with last values.\n          schema:\n            type: boolean\n          example: true\n        - in: query\n          name: bottomLeft\n          schema:\n            type: string\n            pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$\n          description: Bottom left corner of selected area to fetch features from\n          required: true\n        - in: query\n          name: topRight\n          schema:\n            type: string\n            pattern: ^-?[0-9]+.[0-9]+,-?[0-9]+.[0-9]+$\n          description: Top right corner of selected area to fetch features from\n          required: true\n        - in: query\n          name: proj\n          schema:\n            type: string\n          description: Projection for coordinates values.\n      responses:\n        200:\n          description: Successful response\n\n  /api/pointAttributes/{attributeId}/unique/{property}:\n    get:\n      summary: Unique values for property\n      description: Get list of all unique values for given property on attributes\n      parameters:\n        - in: path\n          name: attributeId\n          schema:\n            type: string\n          description: attributeId\n          required: true\n        - in: path\n          name: property\n          schema:\n            type: string\n          description: property on attribute\n          required: true\n      responses:\n        \"200\":\n          description: Successful response\n\n  /api/staticLayers:\n    get:\n      summary: Gets static layers data\n      description: Gets static layers data for display in openlayers map\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/StaticLayer\"\n\n  /api/uploads/geojsons/{fileName}:\n    get:\n      summary: Get geojson file from storage\n      parameters:\n        - name: fileName\n          in: path\n          required: true\n          description: Name of geojson file\n          schema:\n            type: string\n            example: provinces.geojson\n      responses:\n        200:\n          description: Successful response\n\n  /api/config:\n    get:\n      summary: Getting country configuration\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Country configuration\n                properties:\n                  map:\n                    type: object\n                    description: Map configuration\n                    properties:\n                      x:\n                        type: number\n                        description: Longitude\n                      y:\n                        type: number\n                        description: Latitude\n                      zoom:\n                        type: number\n                        description: Zoom level\n                  tabs:\n                    type: object\n                    description: Tabs configuration\n                    properties:\n                      PublicTab:\n                        type: object\n                        description: Public tab\n                        $ref: \"#/components/schemas/TabCofiguration\"\n                      ExecutiveTab2:\n                        type: object\n                        description: Executive tab 2\n                        $ref: \"#/components/schemas/TabCofiguration\"\n                      OverviewTab:\n                        type: object\n                        description: Overview tab\n                        $ref: \"#/components/schemas/TabCofiguration\"\n                      AnalystTab:\n                        type: object\n                        description: Analyst tab\n                        $ref: \"#/components/schemas/TabCofiguration\"\n                      ExecutiveTab:\n                        type: object\n                        description: Executive tab\n                        $ref: \"#/components/schemas/TabCofiguration\"\n\n  /api/authorization:\n    get:\n      summary: User authorization\n      responses:\n        202:\n          description: Successful response\n\ncomponents:\n  schemas:\n    StaticLayer:\n      type: object\n      description: Static layer with data\n      properties:\n        referenceId:\n          type: string\n          description: Unique id of the layer\n        geoReferenceId:\n          type: string\n          description: Unique id of geographical data for the map layer.\n        layerType:\n          type: string\n          description: Layer type\n          enum: [regions, points, geometry, group]\n        category:\n          type: string\n          enum: [\"Baseline data\", \"Health facilities\", \"Covid-19\"]\n        title:\n          type: string\n          description: Static layer title\n        style:\n          $ref: \"#/components/schemas/StaticLayerStyle\"\n        legend:\n          $ref: \"#/components/schemas/StaticLayerLegend\"\n        geoDataUrl:\n          type: string\n          description: Url to geodata source\n        layers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/StaticLayerObject\"\n          description: Array with layers for 'group' layerType\n      required:\n        - layerType\n        - title\n\n    StaticLayerObject:\n      type: object\n      description: Static layer with data\n      properties:\n        geoReferenceId:\n          type: string\n          description: Unique id of geographical data for the map layer.\n        layerType:\n          type: string\n          description: Layer type\n          enum: [regions, points, geometry]\n        title:\n          type: string\n          description: Static layer title\n        style:\n          $ref: \"#/components/schemas/StaticLayerStyle\"\n        legend:\n          $ref: \"#/components/schemas/StaticLayerLegend\"\n        geoDataUrl:\n          type: string\n          description: Url to geodata source\n        description:\n          type: string\n          description: Description of layer\n        sourceWebsite:\n          type: string\n          description: link to source website\n        sourceOrganisation:\n          type: string\n          description: source organisation\n        updateDate:\n          type: string\n          description: \"date of update\"\n        updateFrequency:\n          type: string\n          description: how often is update performed\n        unit:\n          type: string\n          description: unit of measurement\n        reliabilityScore:\n          type: string\n          description: \"score of reliability\"\n        dataRetrievalDescription:\n          type: string\n          description: description of data retrieval\n        dataCalculationDescription:\n          type: string\n          description: description of data calculation\n      required:\n        - layerType\n        - title\n\n    StaticLayerStyle:\n      type: object\n      description: Static layer style\n      properties:\n        fillColor:\n          type: string\n          description: Filled color\n        min:\n          type: number\n          description: Minimum\n        max:\n          type: number\n          description: Maximum\n        strokeColor:\n          type: string\n          description: Stroke color\n        customStyleFunctionName:\n          type: string\n          description: Custom style function name\n\n    StaticLayerLegend:\n      type: object\n      description: map legend for the layer\n      properties:\n        type:\n          type: string\n          description: Type of legend data\n          enum: [\"color\", \"colormap\"]\n        color:\n          type: string\n          description: Color or colormap represented by following description\n        description:\n          type: string\n          description: Description explaining the color/colormap in map layer\n        min:\n          type: number\n          description: Minimal value, used with colormap\n        max:\n          type: number\n          description: Maximal value, used with colormap\n\n    StaticLayerDescription:\n      type: object\n      description: Description of attribute and it's value for display\n      properties:\n        descriptionText:\n          type: string\n          description: Template to use for description of value.\n          example: \"This attribute has value {{property in feature or from attributes}} in units.\"\n        featureText:\n          type: string\n          description: Template for geo locating this attribute.\n          example: \"In province {{province}}\"\n        noDataMessage:\n          type: string\n          description: Text for case that no data are available for specific geographical area\n          example: No data in province available\n\n    TabCofiguration:\n      type: object\n      description: Tab configuration\n      properties:\n        index:\n          type: integer\n          description: Tab index.\n        attributeIds:\n          type: array\n          description: Array of attributeIds used in tab.\n        admin1LocalName:\n          type: string\n          description: Country's local name for admin1 level unit\n        admin1:\n          type: array\n          description: List of country's admin1 level units\n        data:\n          type: object\n          description: Dashboard data, which are not stored in the database\n          properties:\n            path:\n              type: string\n              description: Path to the data source\n            attributes:\n              type: object\n              description: Key/attribute transformation between dashboard and data source\n",
			"canonicalURL": "/github.com/openkfw/Oscar@00d841a7fa0f95908c6991dda5ce8b41ae1a8776/-/blob/api/src/openapi/apiSchema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openkfw/Oscar/blob/00d841a7fa0f95908c6991dda5ce8b41ae1a8776/api/src/openapi/apiSchema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}