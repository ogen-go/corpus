{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/staex-mcc/mcc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "swagger/openapi.yaml",
			"byteSize": 14639,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  description: \"This specification documents the MCC API\"\n  version: \"1.0.0\"\n  title: \"MCC API Specification\"\n\nservers:\n  - url: \"http://localhost:8080\"\n\ntags:\n  - name: \"service\"\n    description: \"Managing services\"\n  - name: \"value\"\n    description: \"DHT services\"\n  - name: \"node information\"\n    description: \"Node concerning information\"\n\npaths:\n  \"/service/{name}\":\n    get:\n      tags:\n        - \"service\"\n      summary: \"List service endpoints\"\n      description: \"Returns a list of all endpoints registered for the given service name.\"\n      parameters:\n        - name: name\n          in: path\n          description: \"Service name\"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      endpoints:\n                        type: array\n                        items:\n                          type: string\n                        example: [\"tcp:287481102267c5c39418d77be9c82978565ad317:1\", \"udp:287481102267c5c39418d77be9c82978565ad317:2\"]\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    put:\n      tags:\n        - \"service\"\n      summary: \"Add a service endpoint\"\n      description: |\n        Registers a new endpoint for the given service name.\n        \u003cbr/\u003e\n\n        The `address` parameter should be a valid URI and contain a scheme (tcp, udp or http) and a hostname with a port.\n        \u003cbr\u003e\n\n        The `ttl` parameter is an expiration time in minutes. Put 0 if the service does not expire. If the service already exists,\n        the existing endpoint is returned and its expiration period is extended.\n\n      parameters:\n        - name: name\n          in: path\n          description: \"Service name\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  type: string\n                  example: \"tcp://127.0.0.1:5000\"\n                ttl:\n                  type: integer\n                  example: 60\n      responses:\n        \"200\":\n          description: \"Endpoint has been successfully registered\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  endpoint:\n                    type: string\n                    example: \"http:287481102267c5c39418d77be9c82978565ad317:1\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    delete:\n      tags:\n        - \"service\"\n      summary: \"Unregister a service\"\n      description: \"Removes endpoints for the given service from the current node.\"\n      parameters:\n        - name: name\n          in: path\n          description: \"Service name\"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"The service has been successfully removed\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/listen\":\n    post:\n      tags:\n        - \"service\"\n      summary: \"Open new port to communicate to a service\"\n      description: |\n        MCC will listen to a specific address and forward traffic to the appropriate service instance.\n        The service could be defined by setting either 'service' or 'endpoint' field (but not both).\n        \u003cbr/\u003e\n\n        If the 'service' field is set, MCC works like a load balancer and forwards each new connection to any of the available service instances.\n        If the 'endpoint' is set then all traffic is routed to it.\n        \u003cbr/\u003e\n\n        The 'address' parameter must specify the protocol, for example 'tcp://127.0.0.1:5000' or 'udp://127.0.0.1:5000'.\n        The protocol must match the protocol of available endpoints i.e. it's not possible to forward tcp traffic to a udp endpoint and vice versa.\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                service:\n                  type: string\n                  example: \"svcName\"\n                endpoint:\n                  type: string\n                  example: \"tcp:287481102267c5c39418d77be9c82978565ad317:1\"\n                address:\n                  type: string\n                  example: \"tcp://127.0.0.1:3000\"\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    delete:\n      tags:\n        - \"service\"\n      summary: \"Stop listening on a port\"\n      description: \"MCC will stop listening on a specific address. If MCC wasn't listening on that address before, it will return an error.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  type: string\n                  example: tcp://127.0.0.1:3000\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    get:\n      tags:\n        - \"service\"\n      summary: \"Get port listeners\"\n      description: \"Get a list of all currently active port listeners.\"\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: \"object\"\n                    properties:\n                      listeners:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            service:\n                              type: string\n                              example: \"svcName\"\n                            endpoint:\n                              type: string\n                              example: \"tcp:287481102267c5c39418d77be9c82978565ad317:1\"\n                            address:\n                              type: string\n                              example: \"tcp://127.0.0.1:3000\"\n\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/value/{key}\":\n    get:\n      tags:\n        - \"value\"\n      summary: \"List values by key\"\n      description: |\n        Returns a list of all values associated with the given key.\n        \u003cbr\u003e\n\n        Data could be provided as a multipart payload or as a JSON object.\n        Please provide an approproate \"Accept\" header to control it: \"multipart/mixed\" or \"application/json\".\n        \u003cbr\u003e\n\n        Also note that a JSON representation works correctly only for string data. For binary data please use multipart option.\n\n      parameters:\n        - name: key\n          in: path\n          description: \"Key\"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      values:\n                        type: array\n                        items:\n                          type: string\n                        example: [\"value1\", \"value2\"]\n            multipart/mixed:\n              schema:\n                type: string\n                format: binary\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/value\":\n    post:\n      tags:\n        - \"value\"\n      summary: \"Post a new value\"\n      description: |\n        Posts a new value for the given key with an optional expiration time in minutes. If the key already has values then the value is appended to the list.\n        \u003cbr\u003e\n\n        It supports two types of data transfer: as \"multipart/form-data\" and as a JSON object.\n        The first one is preferable as it is more effective and less resource consuming.\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                  example: \"key\"\n                value:\n                  type: string\n                  example: \"value\"\n                expiration:\n                  type: number\n                  example: 24\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                key:\n                  type: string\n                  example: \"key\"\n                value:\n                  type: string\n                  format: binary\n                expiration:\n                  type: number\n                  example: 24\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/routing\":\n    get:\n      tags:\n        - \"node information\"\n      summary: \"Show the routing table\"\n      description: \"Retrieves the nodes stored in the routing table.\"\n      responses:\n        \"200\":\n          description: \"Request completed successfully\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      nodes:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/NodeInfo\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/me\":\n    get:\n      tags:\n        - \"node information\"\n      summary: \"Get the mcc node brief info\"\n      description: \"Retrieves the mcc node ID\"\n      responses:\n        \"200\":\n          description: \"Success id returning\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"282181102267c5c39418d77be9c82978565ad317\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/health\":\n    get:\n      tags:\n        - node information\n      summary: \"Show health status\"\n      description: \"Checks whether the node is connected to another nodes.\"\n      responses:\n        \"200\":\n          description: \"The node is healthy\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthResponse\"\n        \"503\":\n          description: \"The node has some connection problems\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthResponse\"\n        \"500\":\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n\n  \"/ws\":\n    get:\n      tags:\n        - websocket\n      summary: \"Establish a websocket connection\"\n      description: \"The endpoint for establishing a websocket connection. Please use an appropriate library for checking it out.\"\n      responses:\n        101:\n          description: \"Websoket connection has been established\"\n\ncomponents:\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            code:\n              type: integer\n              example: 500\n            message:\n              type: string\n              example: \"Error description\"\n\n    NodeInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        distance:\n          type: integer\n        address:\n          type: string\n        reachability:\n          type: string\n        lastSeen:\n          type: string\n\n    HealthResponse:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            ready:\n              type: boolean\n            time:\n              type: string",
			"canonicalURL": "/github.com/staex-mcc/mcc@b578757113168869e2e00d48f863aa82fac5b3b6/-/blob/swagger/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/staex-mcc/mcc/blob/b578757113168869e2e00d48f863aa82fac5b3b6/swagger/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}