{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rracanicci/express-tsboilerplate"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "src/api-docs/api.yml",
			"byteSize": 4367,
			"content": "openapi: \"3.0.3\"\n\ninfo:\n title: Express Typescript Boilerplate\n description: Example REST API\n version: 0.0.1\n\nservers:\n  - url: http://localhost:3000\n    description: Local development server\n\npaths:\n  /api/users:\n    get:\n      tags:\n        - Users\n      summary: Get users\n      description: Returns a list of users\n      parameters:\n        - $ref: '#/components/parameters/IdFilter'\n        - $ref: '#/components/parameters/NameFilter'\n      responses:\n        '200':\n          description: A JSON array of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserFullShema'\n        '404':\n          description: No user found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSchema'\n        '500':\n          description: Something went wrong\n\n    post:\n      tags:\n        - Users\n      summary: Create user\n      description: Create a new user\n      requestBody:\n        $ref: '#/components/requestBodies/UserBody'\n      responses:\n        '201':\n          description: The created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFullShema'\n        '409':\n          description: User already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSchema'\n        '500':\n          description: Something went wrong\n\n  /api/users/{id}:\n    put:\n      tags:\n        - Users\n      summary: Update user\n      description: Update and/or create a new user\n      parameters:\n        - $ref: '#/components/parameters/IdPath'\n      requestBody:\n        $ref: '#/components/requestBodies/UserBody'\n      responses:\n        '200':\n          description: The updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFullShema'\n        '201':\n          description: The created user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFullShema'\n        '409':\n          description: User already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSchema'\n        '500':\n          description: Something went wrong\n\n    delete:\n      tags:\n        - Users\n      summary: Delete user\n      description: Delete an existing user\n      parameters:\n        - $ref: '#/components/parameters/IdPath'\n      responses:\n        '200':\n          description: The deleted user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFullShema'\n        '404':\n          description: No user found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSchema'\n        '500':\n          description: Something went wrong\n\ncomponents:\n  schemas:\n    UserFullShema:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: User ID\n        name:\n          type: string\n          description: User Name\n      example:   # Sample object\n        id: 10\n        name: 'Rodrigo'\n    ErrorSchema:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Error message\n\n  parameters:\n    IdFilter:\n      in: query\n      required: false\n      name: id\n      description: User ID filter\n      schema:\n        type: integer\n        example: 1\n    NameFilter:\n      in: query\n      required: false\n      name: name\n      description: User name filter\n      schema:\n        type: string\n        example: rodrigo\n    IdPath:\n      in: path\n      required: true\n      name: id\n      description: User ID\n      schema:\n        type: integer\n        example: 1\n\n  requestBodies:\n    UserBody:\n      description: A JSON object containing user information\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                description: User Name\n            example:   # Sample object\n              name: 'Rodrigo'",
			"canonicalURL": "/github.com/rracanicci/express-tsboilerplate@3dce54d6e54b9378f592ab3614c28d879b01e837/-/blob/src/api-docs/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/rracanicci/express-tsboilerplate/blob/3dce54d6e54b9378f592ab3614c28d879b01e837/src/api-docs/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}