{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/F0rzend/SimpleGoWebserver"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 8599,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: Simple GoLang web server\n  description: It is a simple web server written in the Go programming language.\n    The project uses DDD and CQRS architecture.\n  contact:\n    name: Konstantin (Forzend)\n    url: https://t.me/F0rzend\n  license:\n    name: MIT\n    url: https://mit-license.org/\n  version: 0.1.0\n\nservers:\n  - url: 'http://localhost:8080'\n    description: Local debug server\n\ntags:\n  - name: Users\n    description: Users management\n\n  - name: Finances\n    description: Finances management\n\npaths:\n  /users:\n    post:\n      tags:\n        - Users\n      summary: User sign up\n      description: Create new user\n      operationId: createUser\n      requestBody:\n        description: User registration data\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: F0rzend\n                username:\n                  type: string\n                  example: forzend\n                email:\n                  type: string\n                  format: email\n                  example: some@gmail.com\n        required: true\n\n      responses:\n        204:\n          description: Location of created user\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n                example: /users/1\n        400:\n          description: Validation error\n        409:\n          description: User already exists\n        500:\n          description: Error on server side\n\n  /users/{id}:\n    get:\n      tags:\n        - Users\n      summary: Get user by id\n      description: Get registered user\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: integer\n            format: uint64\n      responses:\n        200:\n          description: Current user object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: User not found\n        500:\n          description: Error on server side\n\n    put:\n      tags:\n        - Users\n      summary: Change the name or the email of a user\n      description: Change the name or the email of a user\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: integer\n            format: uint64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: F0rzend\n                email:\n                  type: string\n                  format: email\n                  example: some@gmail.com\n        required: true\n\n      responses:\n        204:\n          description: Location to get updated user in the response header\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n                example: /users/1\n        400:\n          description: Validation error\n        404:\n          description: User to update not found\n\n  /users/{id}/usd:\n    post:\n      tags:\n        - Finances\n      summary: Deposit or withdraw US dollars\n      description: A user cannot withdraw more usd than in possession\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: integer\n            format: uint64\n      requestBody:\n        description: User USD deposit\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum:\n                    - deposit\n                    - withdraw\n                  example: deposit\n                amount:\n                  type: number\n                  format: float64\n                  example: 40.05\n        required: true\n\n      responses:\n        204:\n          description: Location to get updated user\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n                example: /users/1\n        400:\n          description: Validation error\n        404:\n          description: User not found\n\n  /users/{id}/bitcoin:\n    post:\n      tags:\n        - Finances\n      summary: Buy or sell Bitcoins\n      description: A user cannot withdraw bitcoins, only convert them to or from usd\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: integer\n            format: uint64\n      requestBody:\n        description: Action and amount to buy or sell\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  type: string\n                  enum:\n                    - buy\n                    - sell\n                  example: buy\n                amount:\n                  type: number\n                  format: float64\n                  example: 0.05\n        required: true\n\n      responses:\n        204:\n          description: Location to get updated user\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n                example: /users/1\n\n        400:\n          description: Validation error\n\n        404:\n          description: User not found\n\n  /users/{id}/balance:\n    get:\n      tags:\n        - Finances\n      summary: Get user balance\n      description: user balance is amount in usd + amount of bitcoins converted to usd\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: integer\n            format: uint64\n      responses:\n        200:\n          description: Total user's balance\n          content:\n            application/json:\n              schema:\n                type: number\n                format: float64\n                example: 120.05\n        404:\n          description: User not found\n        500:\n          description: Error on server side\n\n  /bitcoin:\n    get:\n      tags:\n        - Finances\n      summary: Get current bitcoin price\n      description: Get current bitcoin price in USD\n      responses:\n        200:\n          description: Current bitcoin price and last updating date\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Bitcoin'\n\n    put:\n      tags:\n        - Finances\n      summary: Change the bitcoin price\n      description: Set new bitcoin price in USD\n      requestBody:\n        description: New bitcoin price\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                price:\n                  type: number\n                  format: float64\n                  example: 100.00\n      responses:\n        204:\n          description: Location to get updated bitcoin price\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n                example: /bitcoin\n        400:\n          description: Validation error\n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: uint64\n          example: 1\n\n        name:\n          type: string\n          example: Forzend\n\n        username:\n          type: string\n          example: forzend\n\n        email:\n          type: string\n          format: email\n          example: some@gmail.com\n\n        bitcoin_amount:\n          type: number\n          example: 0.0\n\n        usd_balance:\n          type: number\n          example: 0.0\n\n        created_at:\n          type: string\n          format: date-time\n          example: 2020-01-01T00:00:00Z\n\n        updated_at:\n          type: string\n          format: date-time\n          example: 2020-01-01T00:00:00Z\n\n    Bitcoin:\n      type: object\n      properties:\n        price:\n          type: number\n          format: float\n          example: 100.00\n        updated_at:\n          type: string\n          format: date-time\n          example: 2020-01-01T00:00:00Z\n\nexternalDocs:\n  description: Github repository of the project\n  url: https://github.com/F0rzend/SimpleGoWebserver\n",
			"canonicalURL": "/github.com/F0rzend/SimpleGoWebserver@49c68a4f8c3a14383cebbe8125ecc6ebc108f2eb/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/F0rzend/SimpleGoWebserver/blob/49c68a4f8c3a14383cebbe8125ecc6ebc108f2eb/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}