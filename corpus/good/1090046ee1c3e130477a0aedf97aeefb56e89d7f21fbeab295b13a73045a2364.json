{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cloudevents/spec"
		},
		"file": {
			"name": "schemaregistry.yaml",
			"size": 0,
			"path": "schemaregistry/schemaregistry.yaml",
			"byteSize": 8849,
			"content": "openapi: 3.0.0\ninfo:\n  title: Cloud Native Data Schema Registry\n  version: \"0.2\"\npaths:\n  /schema:\n    get:\n      description: 'Direct access to a particular schema document providing its Schema Version URI'\n      operationId: getSchemaVersionByURI\n      parameters:\n          - in: query\n            name: uri\n            required: true\n            schema:\n              type: string\n            description: 'Schema version URI (requires percent-encoding).'\n      responses:\n        '200':\n          $ref: '#/components/responses/SchemaBytePayloadResponse'\n        '404':\n          description: 'Specified schema not found'\n  /schemagroups:\n    get:\n      summary: 'Get list of schema groups'\n      description: 'Get all schema groups in namespace.'\n      operationId: getGroups\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \n                  type: string\n      tags:\n      -  'groups'\n  /schemagroups/{group-id}:\n    parameters:\n      - name: group-id\n        in: path\n        description: schema group\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get schema group\n      description: Get schema group description in registry namespace.\n      operationId: getGroup\n      responses:\n        '200': \n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaGroup'\n        '404':\n          description: Specified group not found\n      tags:\n      - 'groups'\n    put:\n      summary: Create schema group\n      description: Create schema group with specified format in registry namespace.\n      operationId: createGroup \n      requestBody:\n        description: schema group description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemaGroup'\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n        '409':\n          description: Schema group already exists\n      tags:\n      -  'groups'\n    delete:\n      summary: Delete schema group\n      description: Delete schema group in schema registry namespace.\n      operationId: deleteGroup\n      responses:\n        '204':\n          description: OK no content\n        '404':\n          description: Specified group not found\n      tags:\n      -  'groups'\n  /schemagroups/{group-id}/schemas:\n    parameters:\n    - name: group-id\n      in: path\n      description: schema group\n      required: true\n      schema:\n        type: string\n    get:\n      tags:\n      - 'groups'\n      summary: List schemas for group id\n      description: Returns schema by group id.\n      operationId: getSchemasByGroup\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \n                  type: string\n        '404':\n          description: Group not found\n    delete:\n      tags:\n      - 'groups'\n      summary: Deletes all schemas in group\n      description: Deletes all schemas under specified group id.\n      operationId: deleteSchemasByGroup\n      responses:\n        '204':\n          description: OK no content\n        '404':\n          description: Group not found\n  /schemagroups/{group-id}/schemas/{schema-id}:\n    parameters:\n      - name: group-id\n        in: path\n        description: schema group\n        required: true\n        schema:\n          type: string\n      - name: schema-id\n        in: path\n        description: schema id\n        required: true\n        schema:\n          type: string\n    post: \n      summary: Register schema\n      description: \u003e\n        Register schema.\n        If schema of specified name does not exist in specified group, schema is created at version 1.\n        If schema of specified name exists already in specified group, schema is created at latest version + 1.\n        If schema with identical content already exists, existing schema's ID is returned. \n      operationId: createSchema\n      requestBody:\n        description: schema content\n        required: true\n        content:\n          application/json;format=avro:\n            schema:\n              $ref: '#/components/schemas/SchemaBytePayload'\n      responses:\n        '200':\n          $ref: '#/components/responses/SchemaIdResponse'\n        '400': \n          description: Invalid request\n      tags:\n        - 'registration'\n    get:\n      summary: Get latest version of schema\n      description: Get latest version of schema. \n      operationId: getLatestSchema\n      responses: \n        '200':\n          $ref: '#/components/responses/SchemaBytePayloadResponse'\n      tags:\n        - 'schemas'\n    delete:\n      summary: Delete schema\n      operationId: deleteSchema\n      responses:\n        '204':\n          description: OK no content\n        '404':\n          description: Matching schema not found\n      tags:\n        - 'schemas'\n  /schemagroups/{group-id}/schemas/{schema-id}/versions:\n    parameters:\n      - name: group-id\n        in: path\n        description: schema group\n        required: true\n        schema:\n          type: string\n      - name: schema-id\n        in: path\n        description: schema id\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get list of versions\n      description: Get list of versions for specified schema\n      operationId: getSchemaVersions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json;format=avro:\n              schema:\n                type: array\n                items: \n                  type: integer\n      tags:\n        - 'versions'\n  /schemagroups/{group-id}/schemas/{schema-id}/versions/{version-number}:\n    parameters:\n      - name: group-id\n        in: path\n        description: schema group\n        required: true\n        schema:\n          type: string\n      - name: schema-id\n        in: path\n        description: schema id\n        required: true\n        schema:\n          type: string\n      - name: version-number\n        in: path\n        description: version number\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get specified version of schema\n      operationId: getSchemaVersion\n      responses:\n        '200':\n          $ref: '#/components/responses/SchemaBytePayloadResponse'\n        '404':\n          description: Specified schema not found\n      tags:\n        - 'versions'\n    delete:\n      summary: Delete specified version of schema\n      operationId: deleteSchemaVersion\n      responses:\n        '204':\n          description: OK no content\n      tags:\n        - 'versions'\n\ncomponents: \n  schemas:\n    SchemaId:\n      type: object\n      properties:\n        id:\n          type: string\n    SchemaBytePayload:\n      type: string\n    SchemaGroup:\n      type: object\n      properties:\n        id:\n          type: string\n        description:\n          type: string\n        createdtimeutc:\n          type: string\n          format: date-time\n        updatedtimeutc:\n          type: string\n          format: date-time\n        format:\n          type: string\n        groupProperties:\n          type: object\n          additionalProperties:\n            type: string\n  responses:\n    SchemaIdResponse:\n      description: OK\n      headers:\n        Location:\n          schema:\n            type: string\n        Schema-Id:\n          schema:\n            type: string\n            format: uuid\n          description: unique schema identifier\n        Schema-Id-Location: \n          schema:\n            type: string\n            format: url\n          description: location of schema resource\n        Schema-Version:\n          schema:\n            type: integer\n          description: version of returned schema\n      content:\n        application/json;format=avro:\n          schema:\n            $ref: '#/components/schemas/SchemaId'\n        application/json;format=protobuf:\n          schema:\n            $ref: '#/components/schemas/SchemaId'\n    SchemaBytePayloadResponse:\n      description: OK\n      headers: \n        Location:\n          schema:\n            type: string\n        Schema-Id:\n          schema:\n            type: string\n          description: schema identifier\n        Schema-Id-Location: \n          schema:\n            type: string\n            format: url\n          description: location of schema resource\n        Schema-Version:\n          schema:\n            type: integer\n          description: version of returned schema\n      content:\n        application/json;format=avro:\n          schema:\n            $ref: '#/components/schemas/SchemaBytePayload'",
			"canonicalURL": "/github.com/cloudevents/spec@9b3a3c94497bdc2c4437a52b2e353c8c4b9003cb/-/blob/schemaregistry/schemaregistry.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cloudevents/spec/blob/9b3a3c94497bdc2c4437a52b2e353c8c4b9003cb/schemaregistry/schemaregistry.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}