{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jbogarin/go-cisco-webex-teams"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 31542,
			"content": "openapi: 3.0.0\ninfo:\n  title: Webex Teams API\n  description: \"Hey there! Thanks for checking out Cisco Webex for Developers. If you've used Cisco Webex Meetings or Cisco Webex Teams (formerly Cisco Spark) you know how easy it is to meet and collaborate with your team members and customers.\\r\\n\\r\\nThe Webex for Developers program opens up the power behind the Webex platform to anyone seeking to extend the Webex experience.\\r\\n\\r\\nWebex Meetings is a powerful conferencing solution that lets you connect with anyone, anywhere, in real time. By combining video, audio and content sharing, Webex Meetings creates an effective conferencing environment, leading to more productive meetings and increased productivity. Developer information for Webex Meetings will soon be available on this site. In the meantime, to get started with developing for Webex Meetings, please see the Getting Started guides over on Cisco DevNet. Keep reading for information about Webex Teams.\\r\\n\\r\\nWebex Teams makes staying in sync with your teammates and customers easy.\\r\\nConversations in Webex Teams take place in virtual meeting rooms. Some rooms live for a few hours while others become permanent fixtures of your team's workflow with titles like Daily Standup or Build Status. Webex Teams allows conversations to flow seamlessly between messages, video calls, and real-time whiteboarding sessions. No other solution brings together so many facets of collaboration into a single unified platform.\\r\\n\\r\\nhttps://developer.webex.com/getting-started.html\"\n  contact: {}\n  version: \"1.0\"\nservers:\n  - url: \"https://webexapis.com/v1/\"\n    variables: {}\npaths:\n  \"/adminAudit/events\":\n    get:\n      tags:\n        - Admin Audit Events\n      summary: List Admin Audit Events\n      description: |\n        List admin audit events in your organization. Several query parameters are available to filter the response.\n      operationId: ListAdminAuditEvents\n      parameters:\n        - name: orgId\n          in: query\n          required: true\n          description: List events in this organization, by ID\n          schema:\n            type: string\n        - name: from\n          in: query\n          required: true\n          description: List events which occurred after a specific date and tim\n          schema:\n            type: string\n        - name: to\n          in: query\n          required: true\n          description: List events which occurred before a specific date and time\n          schema:\n            type: string\n        - name: actorId\n          in: query\n          required: false\n          description: List events performed by this person, by ID\n          schema:\n            type: string\n        - name: max\n          in: query\n          required: false\n          description: |\n            Limit the maximum number of events in the response. The maximum value is 200\n            Default: 100\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          required: false\n          description: |\n            Offset from the first result that you want to fetch.\n            Default: 0\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuditEvents\"\n  \"/events\":\n    get:\n      tags:\n        - Events\n      summary: List Events\n      description: | \n        List events in your organization. Several query parameters are available to filter the response.\n        Long result sets will be split into pages.\n      operationId: ListEvents\n      parameters:\n        - name: resource\n          in: query\n          required: false\n          description: \"List events with a specific resource type. Possible values: messages, memberships, tabs, rooms, attachmentActions\"\n          schema:\n            type: string\n        - name: type\n          in: query\n          required: false\n          description: \"List events with a specific event type. Possible values: created, updated, deleted\"\n          schema:\n            type: string\n        - name: actorId\n          in: query\n          required: false\n          description: List events performed by this person, by ID.\n          schema:\n            type: string\n        - name: from\n          in: query\n          required: false\n          description: List events which occurred after a specific date and time.\n          schema:\n            type: string\n        - name: to\n          in: query\n          required: false\n          description: List events which occurred before a specific date and time. If unspecified or set to a time in the future, lists events up to the present.\n          schema:\n            type: string\n        - name: max\n          in: query\n          required: false\n          description: |\n            Limit the maximum number of events in the response. The maximum value is 200\n            Default: 100\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Events\"\n  \"/events/{eventId}\":\n    get:\n      tags:\n        - Events\n      summary: Get Event Details\n      description: | \n        Shows details for an event, by event ID.\n        Specify the event ID in the eventId parameter in the URI.\n      operationId: GetEvent\n      parameters:\n        - name: eventId\n          in: path\n          required: true\n          description: The unique identifier for the event.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n  \"/memberships\":\n    get:\n      tags:\n        - Memberships\n      summary: List memberships\n      description: |\n        Lists all room memberships. By default, lists memberships for rooms to which the authenticated user belongs.\n        Use query parameters to filter the response.\n        Use roomId to list memberships for a room, by ID.\n        Use either personId or personEmail to filter the results.\n      operationId: ListMemberships\n      parameters:\n        - name: roomId\n          in: query\n          description: List memberships associated with a room, by ID.\n          required: false\n          schema:\n            type: string\n        - name: personId\n          in: query\n          description: |\n            List memberships associated with a person, by ID. \n            The roomId parameter is required when using this parameter.\n          required: false\n          schema:\n            type: string\n        - name: personEmail\n          in: query\n          description: |\n            List memberships associated with a person, by email address. \n            The roomId parameter is required when using this parameter.\n          required: false\n          schema:\n            type: string\n        - name: max\n          in: query\n          description: |\n            Limit the maximum number of memberships in the response.\n            Default: 100\n          required: false\n          schema:\n            type: integer\n            default: 100\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Memberships\"\n          headers: {}\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n    post:\n      tags:\n        - Memberships\n      summary: Create a membership\n      description: |\n        Add someone to a room by Person ID or email address; optionally making them a moderator.\n      operationId: CreateMembership\n      parameters: []\n      requestBody:\n        description: \"Body Parameters\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateMembershipRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: \"Successful request with body content.\"\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Membership\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n  \"/memberships/{membershipId}\":\n    get:\n      tags:\n        - Memberships\n      summary: Get Membership Details\n      description: |\n        Get details for a membership by ID.\n        Specify the membership ID in the membershipId URI parameter.\n      operationId: GetMembership\n      parameters:\n        - name: membershipId\n          in: path\n          description: The unique identifier for the membership.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Membership\"\n          headers: {}\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n    put:\n      tags:\n        - Memberships\n      summary: Update a Membership\n      description: |\n        Updates properties for a membership by ID.\n        Specify the membership ID in the membershipId URI parameter.\n      operationId: UpdateMembership\n      parameters:\n        - name: membershipId\n          in: path\n          description: The unique identifier for the membership.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: \"Body Parameters\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateMembershipRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: \"Successful request with body content.\"\n          headers: {}\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Membership\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n    delete:\n      tags:\n        - Memberships\n      summary: Delete a Membership\n      description: |\n        Deletes a membership by ID.\n        Specify the membership ID in the membershipId URI parameter.\n        The membership for the last moderator of a Team's General space may not be deleted; promote another user to team moderator first.\n      operationId: DeleteMembership\n      parameters:\n        - name: membershipId\n          in: path\n          description: The unique identifier for the membership.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"Successful request without body content.\"\n          headers: {}\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n  \"/licenses\":\n    get:\n      tags:\n        - Licenses\n      summary: List Licenses\n      description: |\n        List all licenses for a given organization. If no orgId is specified, the default is the organization of the authenticated user.\n        Response properties that are not applicable to the license will not be present in the response.\n      operationId: ListLicenses\n      parameters:\n        - name: orgId\n          in: query\n          description: List licenses for this organization.\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Licenses\"\n          headers: {}\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\n  \"/licenses/{licenseId}\":\n    get:\n      tags:\n        - Licenses\n      summary: Get License Details\n      description: |\n        Shows details for a license, by ID.\n        Specify the license ID in the licenseId parameter in the URI.\n        Response properties that are not applicable to the license will not be present in the response.\n      operationId: GetLicense\n      parameters:\n        - name: licenseId\n          in: path\n          description: The unique identifier for the license.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful request with body content.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/License\"\n          headers: {}\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      deprecated: false\ncomponents:\n  schemas:\n    AuditEvents:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          description: items\n          items:\n            type: object\n            properties:\n              created:\n                type: string\n                format: date-time\n                description: The date and time the event took place.\n              actorOrgId:\n                type: string\n                description: The orgId of the person who made the change.\n              id:\n                type: string\n                description: A unique identifier for the event.\n              actorId:\n                type: string\n                description: The personId of the person who made the change.\n              data:\n                type: object\n                description: data\n                properties:\n                  actorOrgName:\n                    type: string\n                    description: The display name of the organization.\n                  targetName:\n                    type: string\n                    description: The name of the resource being acted upon.\n                  eventDescription:\n                    type: string\n                    description: A description for the event.\n                  actorName:\n                    type: string\n                    description: The name of the person who performed the action.\n                  actorEmail:\n                    type: string\n                    description: The email of the person who performed the action.\n                  adminRoles:\n                    type: array\n                    description: Admin roles for the person.\n                    items:\n                      type: string\n                  trackingId:\n                    type: string\n                    description: A tracking identifier for the event.\n                  targetType:\n                    type: string\n                    description: The type of resource changed by the event.\n                  targetId:\n                    type: string\n                    description: The identifier for the resource changed by the event.\n                  eventCategory:\n                    type: string\n                    description: The category of resource changed by the event.\n                  actorUserAgent:\n                    type: string\n                    description: The browser user agent of the person who performed the action.\n                  actorIp:\n                    type: string\n                    description: The IP address of the person who performed the action.\n                  targetOrgId:\n                    type: string\n                    description: The orgId of the organization.\n                  actionText:\n                    type: string\n                    description: A more detailed description of the change made by the person.\n                  targetOrgName:\n                    type: string\n                    description: The name of the organization being acted upon.\n    Event:\n      type: object\n      required:\n        - id\n        - resource\n        - appId\n        - actorId\n        - orgId\n        - created\n        - actorOrgId\n        - data\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the event.\n        resource:\n          type: string\n          description: The type of resource in the event.\n        appId:\n          type: string\n          description: The ID of the application for the event.\n        actorId:\n          type: string\n          description: The personId of the person who made the change.\n        orgId:\n          type: string\n          description: The ID of the organization for the event.\n        created:\n          type: string\n          format: date-time\n          description: The date and time of the event.\n        actorOrgId:\n          type: string\n          description: The orgId of the person who made the change.\n        data:\n          type: object\n          description: data\n          required:\n            - id\n            - roomId\n            - roomType\n            - text\n            - personId\n            - personEmail\n            - created\n          properties:\n            id:\n              type: string\n              description: Action ID.\n            roomId:\n              type: string\n              description: Room ID where the event happened.\n            roomType:\n              type: string\n              description: Room type where the event happened.\n            text:\n              type: string\n              description: Text related to the event, in the case of a message.\n            personId:\n              type: string\n              description: Person ID of the user who triggered the event.\n            personEmail:\n              type: string\n              description: Person Email of the user who triggered the event.\n            created:\n              type: string\n              format: date-time\n              description: The date and time of the event.\n    Events:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Event\"\n    Membership:\n      type: object\n      required:\n        - id\n        - roomId\n        - personId\n        - personEmail\n        - personDisplayName\n        - personOrgId\n        - isModerator\n        - isRoomHidden\n        - roomType\n        - isMonitor\n        - created\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the membership.\n        roomId:\n          type: string\n          description: The room ID.\n        personId:\n          type: string\n          description: The person ID\n        personEmail:\n          type: string\n          description: The email address of the person\n        personDisplayName:\n          type: string\n          description: The display name of the person\n        personOrgId:\n          type: string\n          description: The organization ID of the person\n        isModerator:\n          type: boolean\n          description: Whether or not the participant is a room moderator.\n        isRoomHidden:\n          type: boolean\n          description: Whether or not the room is hidden in the Webex Teams clients\n        roomType:\n          type: string\n          description: |\n            The type of room the membership is associated with:\n              direct -\u003e 1:1 room\n              group -\u003e group room\n          enum:\n            - direct\n            - group\n        isMonitor:\n          type: boolean\n          description: Whether or not the participant is a monitoring bot (deprecated).\n        created:\n          type: string\n          format: date-time\n          description: The date and time when the membership was created\n    Memberships:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Membership\"\n    CreateMembershipRequest:\n      type: object\n      required:\n        - roomId\n      properties:\n        roomId:\n          type: string\n          description: The room ID\n        personId:\n          type: string\n          description: The person ID\n        personEmail:\n          type: string\n          description: The email address of the person\n        isModerator:\n          type: boolean\n          description: Whether or not the participant is a room moderator\n    UpdateMembershipRequest:\n      type: object\n      required:\n        - isModerator\n        - isRoomHidden\n      properties:\n        isRoomHidden:\n          type: boolean\n          description: Whether or not the room is hidden in the Webex Teams clients\n        isModerator:\n          type: boolean\n          description: Whether or not the participant is a room moderator\n    License:\n      type: object\n      required:\n        - id\n        - name\n        - totalUnits\n        - consumedUnits\n        - subscriptionId\n        - siteUrl\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the license\n        name:\n          type: string\n          description: Name of the licensed feature\n        totalUnits:\n          type: integer\n          description: Total number of license units allocated\n        consumedUnits:\n          type: integer\n          description: Total number of license units consumed\n        subscriptionId:\n          type: string\n          description: The subscription ID associated with this license. This ID is used in other systems, such as Webex Control Hub.\n        siteUrl:\n          type: string\n          description: The Webex Meetings site associated with this license\n        siteType:\n          type: string\n          description: |\n            The type of site associated with this license.\n            Control Hub managed site: the site is managed by Webex Control Hub\n            Linked site: the site is a linked site\n            Site Admin managed site: the site is managed by Site Administration\n          enum:\n            - Control Hub managed site\n            - Linked site\n            - Site Admin managed site\n    Licenses:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/License\"\n    Error:\n      type: object\n      required:\n        - message\n        - errors\n        - trackingId\n      properties:\n        message:\n          type: string\n          description: Error message\n        errors:\n          type: object\n          description: API Error\n          required:\n            - description\n          properties:\n            description:\n              type: string\n              description: Error description\n        trackingId:\n          type: string\n          description: Error tracking ID\n  securitySchemes:\n    httpBearer:\n      type: http\n      scheme: bearer\nsecurity:\n  - httpBearer: []\ntags:\n  - name: Admin Audit Events\n    description: \"Admin Audit Events are available to full administrators for certain events performed in Webex Control Hub.\"\n  - name: Attachment Actions\n    description: \"Users create attachment actions by interacting with message attachments such as clicking on a submit button in a card.\"\n  - name: Call Controls\n    description: \"Call Control APIs in support of Webex Calling. All GET commands require the spark:calls_read scope while all other commands require the spark:calls_write scope.\"\n  - name: Device Configurations\n    description: \"The Device Configurations API allows developers to view and modify configurations on Webex Rooms devices, as well as other devices that use the configuration service.\"\n  - name: Devices\n    description: \"Devices represent cloud-registered Webex RoomOS devices, as well as actively-connected Webex soft clients on mobile or desktop. Devices may be associated with Places.\"\n  - name: Events\n    description: \"Events are generated when actions take place within Webex Teams, such as when someone creates or deletes a message. Compliance Officers may use the Events API to retrieve events for all users within an organization.\"\n  - name: Hybrid Clusters\n    description: \"Hybrid Clusters are groups of hosts, and the connectors these hosts contain, that are managed as a unit. All the connectors of a single type in a cluster share the same configuration.\"\n  - name: Hybrid Connectors\n    description: \"Hybrid Connectors are pieces of software that run on-premise and provide a link between the Cisco Webex Cloud and on-premise resources.\"\n  - name: Licenses\n    description: \"An allowance for features and services that are provided to users on a Webex Teams services subscription. Cisco and its partners manage the amount of licenses provided to administrators and users. This license resource can be accessed only by an admin.\"\n  - name: Locations\n    description: \"Locations are used to organize Webex Calling (BroadCloud) features within physical locations. Webex Control Hub may be used to define new locations.\"\n  - name: Meeting Invitees\n    description: \"This API manages invitees' relationships to a meeting.\"\n  - name: Meeting Preferences\n    description: \"This API manages a user's meeting preferences, including Personal Meeting Room settings, video and audio settings, meeting scheduling options, and site settings.\"\n  - name: Meetings\n    description: \"Meetings are virtual conferences where users can collaborate in real time using audio, video, content sharing, chat, online whiteboards, and more to collaborate.\"\n  - name: Memberships\n    description: \"Memberships represent a person's relationship to a room. Use this API to list members of any room that you're in or create memberships to invite someone to a room. Memberships can also be updated to make someone a moderator or deleted to remove them from the room.\\r\\n\\r\\nJust like in the Webex Teams app, you must be a member of the room in order to list its memberships or invite people.\\r\\n\\r\\nhttps://developer.webex.com/resource-memberships.html\"\n  - name: Messages\n    description: \"Messages are how we communicate in a room. In Webex Teams, each message is displayed on its own line along with a timestamp and sender information. Use this API to list, create, and delete messages.\\r\\n\\r\\nMessage can contain plain text, rich text, and a file attachment.\\r\\n\\r\\nJust like in the Webex Teams app, you must be a member of the room in order to target it with this API.\\r\\n\\r\\nhttps://developer.webex.com/resource-messages.html\"\n  - name: Organizations\n    description: \"A set of people in Webex Teams. Organizations may manage other organizations or be managed themselves. This organizations resource can be accessed only by an admin.\"\n  - name: People\n    description: \"People are registered users of Webex Teams. Searching and viewing People requires an auth token with a scope of spark:people_read. Viewing the list of all People in your Organization requires an administrator auth token with spark-admin:people_read scope. Adding, updating, and removing People requires an administrator auth token with the spark-admin:people_write scope.\\r\\n\\r\\nTo learn more about managing people in a room see the Memberships API. For information about how to allocate Hybrid Services licenses to people, see the Managing Hybrid Services guide.\\r\\n\\r\\nhttps://developer.webex.com/resource-people.html\"\n  - name: Places\n    description: \"Places represent where people work, such as conference rooms, meeting spaces, lobbies, and lunch rooms. Devices may be associated with places.\"\n  - name: Recordings\n    description: \"Recordings are meeting content captured in a meeting or files uploaded via the upload page for your Webex site.\"\n  - name: Resource Group Memberships\n    description: 'Resource Group Memberships represent a person''s relationship to a Resource Group for a particular Hybrid Services license. Users assigned a new license will be automatically placed in a \"default\" Resource Group. Use this API to list memberships for all people in an organization or update memberships to use a different Resource Group.'\n  - name: Resource Groups\n    description: \"Resource Groups are collections of on-premise clusters which provide Hybrid Services to a particular subset of people in an organization. If a person has a Hybrid Services license associated with their account, they will be associated with a resource group to use specific on-premise clusters for that service.\"\n  - name: Roles\n    description: \"A persona for an authenticated user, corresponding to a set of privileges within an organization. This roles resource can be accessed only by an admin.\"\n  - name: Rooms\n    description: \"Rooms are virtual meeting places where people post messages and collaborate to get work done. This API is used to manage the rooms themselves. Rooms are created and deleted with this API. You can also update a room to change its title, for example.\\r\\n\\r\\nTo create a team room, specify the a teamId in POST payload. Note that once a room is added to a team, it cannot be moved. To learn more about managing teams, see the Teams API.\\r\\n\\r\\nTo manage people in a room see the Memberships API.\\r\\n\\r\\nTo post content see the Messages API.\\r\\n\\r\\nhttps://developer.webex.com/resource-rooms.html\"\n  - name: Team Memberships\n    description: \"Team Memberships represent a person's relationship to a team. Use this API to list members of any team that you're in or create memberships to invite someone to a team. Team memberships can also be updated to make someone a moderator or deleted to remove them from the team.\\r\\n\\r\\nJust like in the Webex Teams app, you must be a member of the team in order to list its memberships or invite people..\\r\\n\\r\\nhttps://developer.webex.com/resource-team-memberships.html\"\n  - name: Teams\n    description: \"Teams are groups of people with a set of rooms that are visible to all members of that team. This API is used to manage the teams themselves. Teams are created and deleted with this API. You can also update a team to change its name, for example.\\r\\n\\r\\nTo manage people in a team see the Team Memberships API.\\r\\n\\r\\nTo manage team rooms see the Rooms API.\\r\\n\\r\\nhttps://developer.webex.com/resource-teams.html\"\n  - name: Webhooks\n    description: \"Webhooks allow your app to be notified via HTTP when a specific event occurs in Webex Teams. For example, your app can register a webhook to be notified when a new message is posted into a specific room.\\r\\n\\r\\nEvents trigger in near real-time allowing your app and backend IT systems to stay in sync with new content and room activity.\\r\\n\\r\\nCheck the Webhooks Guide and our blog regularly for announcements of additional webhook resources and event types.\\r\\n\\r\\nhttps://developer.webex.com/resource-webhooks.html\"\n",
			"canonicalURL": "/github.com/jbogarin/go-cisco-webex-teams@b2d7f7b157c75acf1ba5e4950f8332d2090394ef/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jbogarin/go-cisco-webex-teams/blob/b2d7f7b157c75acf1ba5e4950f8332d2090394ef/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}