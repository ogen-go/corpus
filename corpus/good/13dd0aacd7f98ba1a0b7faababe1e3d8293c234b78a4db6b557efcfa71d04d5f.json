{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/optimizely/agent"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi-spec/openapi.yaml",
			"byteSize": 21839,
			"content": "openapi: 3.0.0\ninfo:\n  title: Optimizely Agent API\n  description: Optimizely Agent is a stand-alone, open-source microservice that provides major benefits over using Optimizely SDKs in certain use cases. Its REST API offers consolidated and simplified endpoints for accessing all the functionality of Optimizely Full Stack SDKs. Use this API the control experiments (such as a feature tests). For more info, see https://docs.developers.optimizely.com/full-stack/docs/optimizely-agent. \n  termsOfService: http://optimizely.com/terms/\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.12.0\nsecurity:\n  - SdkKeyAuth: []\n  - TokenAuth: []\npaths:\n  /v1/config:\n    get:\n      summary: Return the Optimizely config for the given environment\n      operationId: getConfig\n      description: Return all available experiment and features definitions for this environment.\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                description: Optimizely Configuration\n                $ref: '#/components/schemas/OptimizelyConfig'\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /v1/datafile:\n    get:\n      summary: \u003e-\n        Return the datafile for the given environment. If you need strict consistency, you can pass the datafile to other Optimizely instances. \n        so that all initialize from exactly the same datafile version (rather than each fetching the datafile separately from the Optimizely CDN).  \n      operationId: getDatafile\n      description: Returns the json datafile for the given environment.\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                description: Optimizely Datafile\n                type: object\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /v1/decide:\n    parameters:\n      - $ref: '#/components/parameters/decideKeysParam'\n    post:\n      summary: Decide makes feature decisions for the selected query parameters.\n      operationId: decide\n      description: \u003e-\n        Returns decision results for flag keys for a user.\n        The result for a single key is returned as an\n        OptimizelyDecision object whereas the result for multiple keys is returned as an array of OptimizelyDecision objects. If no flag key is\n        provided, decision is made for all flag keys. OptimizelyDecision object\n        contains all data required to deliver the flag rule.\n      requestBody:\n        $ref: '#/components/requestBodies/DecideContext'\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/OptimizelyDecision'\n                  - $ref: '#/components/schemas/OptimizelyDecision'\n        '400':\n          description: Missing required parameters\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /v1/lookup:\n    post:\n      summary: Lookup returns saved user profile.\n      operationId: lookup\n      description: \u003e-\n        Returns the saved user profile for a user.\n      requestBody:\n        $ref: '#/components/requestBodies/LookupContext'\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProfile'\n        '400':\n          description: Missing required parameters\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          description: User Profile Service not found\n  /v1/save:\n    post:\n      summary: Save saves user profile.\n      operationId: save\n      description: \u003e-\n        Saves user profile for a user.\n      requestBody:\n        $ref: '#/components/requestBodies/SaveContext'\n      responses:\n        '200':\n          description: Valid response, Profile saved.\n        '400':\n          description: Missing required parameters\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          description: User Profile Service not found\n  /v1/track:\n    parameters:\n      - $ref: '#/components/parameters/eventKeyParam'\n    post:\n      summary: Track event for the given user.\n      operationId: trackEvent\n      description: Send event and user details to Optimizely analytics backend, so you can see metrics for an experiment. You can view metrics either on your Results page or as a data export.\n      responses:\n        '200':\n          description: Valid response, event received\n        '400':\n          description: Missing required parameters\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      requestBody:\n        $ref: '#/components/requestBodies/TrackContext'\n  /v1/activate:\n    parameters:\n      - $ref: '#/components/parameters/featureKeyParam'\n      - $ref: '#/components/parameters/experimentKeyParam'\n      - $ref: '#/components/parameters/disableTrackingParam'\n      - $ref: '#/components/parameters/typeParam'\n      - $ref: '#/components/parameters/enabledParam'\n    post:\n      summary: Activate selected features and experiments for the given user.\n      operationId: activate\n      description: Returns Optimizely's decision about which features and experiments a given user is exposed to. Optionally sends an impression event to the Optimizely analytics backend for any decision made for an experiment. This endpoint consolidates key functionality from the Full Stack SDKs into one convenient call.\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Decision'\n        '400':\n          description: Bad request, invalid parameters\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      requestBody:\n        $ref: '#/components/requestBodies/ActivateContext'\n  /v1/override:\n    post:\n      summary: Override an experiment decision for a user\n      operationId: override\n      description: For debugging or testing. Overrides an experiment and variation decision for a given user, in local memory only. Do not use this endpoint for production overrides.\n      responses:\n        '200':\n          description: Valid response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Override'\n        '400':\n          description: Invalid payload\n        '401':\n          description: Unauthorized, invalid JWT\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      requestBody:\n        $ref: '#/components/requestBodies/OverrideContext'\n  /oauth/token:\n    post:\n      summary: Get JWT token to authenticate all requests.\n      operationId: getToken\n      description: Generates valid JWT token for grant_type, client_id, and client_secret, using the values you pass in the request body.  Configure expiration time and SDK keys (to which the token grants access) in Optimizely config. \n      responses:\n        '200':\n          description: Generates a valid token\n        '401':\n          description: Unauthorized, invalid values for parameter(s)\n          $ref: '#/components/responses/UnauthorizedToken'\n      requestBody:\n        $ref: '#/components/requestBodies/TokenContext'\n  /v1/batch:\n    post:\n      summary: Batch multiple API endpoints into one request.\n      description:  |\n                      You can use the Batch endpoint to do things like   \n                      1. Make activate decisions for a batch of users in a short timeframe for testing purposes\n                      2. Gather responses from a bunch of activate calls into one response for comparison or analysis\n      responses:  \n\n        '200':\n          $ref: '#/components/responses/BatchResponse'\n        '400':\n          description: Bad request, invalid parameters.\n        '422':\n          description: Unprocessable Entity, too many operations\n      requestBody:\n        $ref: '#/components/requestBodies/BatchContext'\n\ncomponents:\n  parameters:\n    disableTrackingParam:\n      in: query\n      name: disableTracking\n      required: false\n      description: Setting to true will disable impression tracking for experiments.\n      schema:\n        type: boolean\n    enabledParam:\n      in: query\n      name: enabled\n      required: false\n      description: Filter the activation response to return only enabled descisions.\n      schema:\n        type: boolean\n    eventKeyParam:\n      in: query\n      name: eventKey\n      required: true\n      description: Key of the event we're tracking\n      schema:\n        type: string\n    decideKeysParam:\n      in: query\n      name: keys\n      required: false\n      description: Flag keys for decision\n      schema:\n        type: string\n    experimentKeyParam:\n      in: query\n      name: experimentKey\n      description: Key for the Optimizely Experiment\n      schema:\n        type: array\n        items:\n          type: string\n    featureKeyParam:\n      in: query\n      name: featureKey\n      description: Key for the Optimizely Feature\n      schema:\n        type: array\n        items:\n          type: string\n    typeParam:\n      in: query\n      name: type\n      required: false\n      description: Limit the decisions to either experiment or features\n      schema:\n        type: string\n        enum:\n          - feature\n          - experiment\n  requestBodies:\n    ActivateContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ActivateContext'\n    OverrideContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/OverrideContext'\n    TrackContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TrackContext'\n    LookupContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LookupContext'\n    SaveContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SaveContext'\n    DecideContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DecideContext'\n    TokenContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TokenContext'\n    BatchContext:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BatchContext'           \n  responses:\n    Forbidden:\n      description: You do not have necessary permissions for the resource\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    UnauthorizedToken:\n      description: Unable to match credentials\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TokenError'\n    BatchResponse:\n      description: responses for each endpoint called in the batch request\n      content:\n        application/json:\n         schema:\n          $ref: '#/components/schemas/BatchResponse'    \n  schemas:\n    Error:\n      properties:\n        error:\n          type: string\n    TokenError:\n      properties:\n        error:\n          type: string\n        error_description:\n          type: string\n    OptimizelyExperiment:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        audiences:\n          type: string\n        variationsMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyVariation'\n      required:\n        - id\n        - key\n    OptimizelyAttribute:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n    OptimizelyAudience:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        conditions:\n          type: string\n    OptimizelyEvent:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        experimentIds:\n          type: array\n          items:\n            type: string\n    OptimizelyFeature:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        experimentRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/OptimizelyExperiment'\n        deliveryRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/OptimizelyExperiment'\n        variablesMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyVariable'\n        experimentsMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyExperiment'\n      required:\n        - id\n        - key\n    UserProfile:\n      properties:\n        experimentBucketMap:\n          type: object\n          properties:\n            your_experiment_id:\n              type: object\n              properties:\n                variation_id:\n                  type: string\n        userId:\n          type: string\n    Decision:\n      properties:\n        featureKey:\n          type: string\n        experimentKey:\n          type: string\n        variationKey:\n          type: string\n        type:\n          type: string\n          enum:\n            - feature\n            - experiment\n            - ''\n        enabled:\n          type: boolean\n        variables:\n          type: object\n          additionalProperties: true\n        error:\n          type: string\n    OptimizelyDecision:\n      properties:\n        variables:\n          type: object\n        variationKey:\n          type: string\n        enabled:\n          type: boolean\n        ruleKey:\n          type: string\n        flagKey:\n          type: string\n        userContext:\n          type: object\n          properties:\n            userId:\n              type: string\n            attributes:\n              type: object\n              additionalProperties: true\n          required:\n            - userId\n        reasons:\n          type: array\n          items:\n            type: string\n      required:\n        - ruleKey\n        - flagKey\n        - userContext\n    ActivateContext:\n      properties:\n        userId:\n          type: string\n        userAttributes:\n          type: object\n          additionalProperties: true\n    Override:\n      properties:\n        userId:\n          type: string\n        experimentKey:\n          type: string\n        variationKey:\n          type: string\n        prevVariationKey:\n          type: string\n        messages:\n          type: array\n          items:\n            type: string\n    OverrideContext:\n        type: object\n        properties:\n          userId:\n            type: string\n          experimentKey:\n            type: string\n          variationKey:\n            type: string\n    OptimizelyConfig:\n      properties:\n        environmentKey:\n          type: string\n        sdkKey:\n          type: string\n        revision:\n          type: string\n        experimentsMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyExperiment'\n        featuresMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyFeature'\n        attributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/OptimizelyAttribute'\n        audiences:\n          type: array\n          items:\n            $ref: '#/components/schemas/OptimizelyAudience'\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/OptimizelyEvent'\n    TrackContext:\n      properties:\n        eventTags:\n          type: object\n          additionalProperties: true\n        userId:\n          type: string\n        userAttributes:\n          type: object\n          additionalProperties: true\n    LookupContext:\n      properties:\n        userId:\n          type: string\n      required:\n        - userId\n    SaveContext:\n      $ref: '#/components/schemas/UserProfile'\n    DecideContext:\n      properties:\n        decideOptions:\n          type: array\n          items:\n            type: string\n            enum:\n              - DISABLE_DECISION_EVENT\n              - ENABLED_FLAGS_ONLY\n              - IGNORE_USER_PROFILE_SERVICE\n              - EXCLUDE_VARIABLES\n              - INCLUDE_REASONS\n        userId:\n          type: string\n        userAttributes:\n          type: object\n          additionalProperties: true\n        forcedDecisions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ForcedDecision'\n      required:\n        - userId\n    ForcedDecision:\n      properties:\n        flagKey:\n          type: string\n        ruleKey:\n          type: string\n        variationKey:\n          type: string\n      required:\n        - flagKey\n        - variationKey\n    OptimizelyVariation:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        featureEnabled:\n          type: boolean\n        variablesMap:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OptimizelyVariable'\n      required:\n        - id\n        - key\n    OptimizelyVariable:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        type:\n          type: string\n        value:\n          type: string\n      required:\n        - id\n        - key\n    TokenContext:\n      properties:\n        grant_type:\n          type: string\n        client_id:\n          type: string\n        client_secret:\n          type: string\n    BatchContext:\n      properties:\n        operations:\n          description: Array of requests to Agent endpoints, batched into one request\n          type: array\n          items:\n            $ref: '#/components/schemas/BatchOperation'\n      required:\n        - operations\n\n    BatchOperation:\n      properties:\n        method:\n          description: The REST request method\n          type: string\n          enum:\n            - GET\n            - POST\n        url:\n          description: The base and endpoint components of the API request's path\n          type: string\n        operationID: \n          description: Index of the request in the batch  \n          type: string\n        body:\n          description: The body for the request as JSON\n          type: object\n        parameters:\n          description: The parameters for the request as JSON\n          type: object\n        headers:\n          description: The headers for the request as JSON\n          type: object\n      example:   \n        method: \"POST\"\n        url: \"/v1/activate\"\n        operationID: 1\n        body: {\"userId\": \"user1\"}\n        parameters: {\n          \"type\": \"feature\",\n          \"experimentKey\": \"ab_test_experiment\"}\n        headers: {\n          \"X-Optimizely-SDK-Key\": \"\u003csdk_key\u003e\",\n          \"Content-Type\": \"application/json\"}  \n\n    BatchResponse:\n      properties:\n        startedAt:\n          type: string\n        endedAt:\n          type: string \n        errorCount:\n          type: integer\n        response:\n          type: array\n          items:\n            $ref: '#/components/schemas/BatchResponseItem'  \n\n    BatchResponseItem:\n      properties:\n        status:\n          type: integer\n          enum:\n            - 200 \n            - 400\n        requestID:\n          type: string\n        operationID:\n          type: string\n        method:\n          type: string\n          enum:\n            - GET\n            - POST\n        url:\n          type: string\n        body:\n          oneOf:\n            - type: array\n              items:\n                type: object\n            - type: object\n        startedAt:\n          type: string\n        endedAt:\n          type: string\n\n      example: \n        status: 200\n        requestID: \"abee6bdf-6d14-4fac-8357-769f5fd07e7c\"\n        operationID: \"1\"\n        method: POST\n        url: \"/v1/activate\"\n        body:  [\n        {\n          \"enabled\": true,\n          \"experimentKey\": \"new_feature_test\",\n          \"featureKey\": \"new_feature\",\n          \"type\": \"feature\",\n          \"userId\": \"user1\",\n          \"variables\": {\n            \"bool_var\": true,\n            \"double_var\": 5.6,\n            \"int_var\": 1,\n          },\n          \"variationKey\": \"variation_2\"\n        },\n\n        {\n          \"enabled\": false,\n          \"experimentKey\": \"flag_test_2\",\n          \"featureKey\": \"test_feature\",\n          \"type\": \"feature\",\n          \"userId\": \"user1\",\n          \"variables\": {\n            \"double\": 0,\n            \"json_key\": {}\n          },\n          \"variationKey\": \"\"\n        }\n        ]\n\n        startedAt: \"2020-09-10T10:50:37.466121-07:00\"\n        endedAt: \"2020-09-10T10:50:37.466192-07:00\"\n\n  securitySchemes:\n     SdkKeyAuth:\n       in: header\n       name: X-Optimizely-SDK-Key\n       type: apiKey\n     TokenAuth:\n       type: http\n       scheme: bearer\n       bearerFormat: JWT\n",
			"canonicalURL": "/github.com/optimizely/agent@7e885db026f332166e04f985378170fd31737b71/-/blob/api/openapi-spec/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/optimizely/agent/blob/7e885db026f332166e04f985378170fd31737b71/api/openapi-spec/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}