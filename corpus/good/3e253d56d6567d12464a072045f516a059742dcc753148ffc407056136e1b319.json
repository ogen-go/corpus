{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uwblueprint/community-fridge-kw"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "backend/typescript/swagger.yml",
			"byteSize": 16934,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  version: 1.0.0\r\n  title: UW Blueprint Starter Code TypeScript API\r\n  description: An API for the TypeScript Backend of Starter Code\r\n\r\n\r\n# Authentication \r\ncomponents:\r\n  securitySchemes:\r\n    bearerAuth:            # arbitrary name for the security scheme\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\r\n  schemas:\r\n    PasswordLogin:\r\n      type: object\r\n      required:\r\n        - email, password\r\n      properties:\r\n        email:\r\n          type: string\r\n        password:\r\n          type: string\r\n\r\npaths:\r\n  /entities:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Entity\r\n      description: Returns a list of entities\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of entities\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  required:\r\n                      - intField, stringField, boolField, enumField, stringArrayField\r\n                  properties:\r\n                    intField:\r\n                      type: integer\r\n                    stringField:\r\n                      type: string\r\n                    stringArrayField:\r\n                      type: array\r\n                      items:\r\n                        type: string\r\n                    enumField:\r\n                      type: string\r\n                      enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                    boolField:\r\n                      type: boolean\r\n                    fileName:\r\n                      type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Entity\r\n      description: Create a new entity\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                body:\r\n                  type: string\r\n                file:\r\n                  type: string\r\n                  format: binary\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new entity\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - intField, stringField, boolField, enumField, stringArrayField\r\n                properties:\r\n                  intField:\r\n                    type: integer\r\n                  stringField:\r\n                    type: string\r\n                  stringArrayField:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                  enumField:\r\n                    type: string\r\n                    enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                  boolField:\r\n                    type: boolean\r\n                  fileName:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n  \r\n  \r\n  /entities/{id}:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Returns an entity based on its ID\r\n      responses:\r\n        '200':\r\n          description: Successfully returns entity based on ID\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - intField, stringField, boolField, enumField, stringArrayField\r\n                properties:\r\n                  intField:\r\n                    type: integer\r\n                  stringField:\r\n                    type: string\r\n                  stringArrayField:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                  enumField:\r\n                    type: string\r\n                    enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                  boolField:\r\n                    type: boolean\r\n                  fileName:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid ID\r\n\r\n\r\n    put:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Edit an entity based on its ID\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                body:\r\n                  type: string\r\n                file:\r\n                  type: string\r\n                  format: binary\r\n      responses:\r\n        '200':\r\n          description: Successfully edited entity based on ID\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Delete an entity based on its ID\r\n      responses:\r\n        '204':\r\n          description: Successfully deleted entity based on ID\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid ID\r\n\r\n  /entities/files/{fileName}:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: fileName\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: The name of the file (UUID) associated with an entity\r\n      tags:\r\n        - Entity\r\n      description: Returns a signed URL to the file associated with an entity\r\n      responses:\r\n        '200':\r\n          description: Successfully returns the signed URL of the file\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - fileURL\r\n                properties:\r\n                  fileURL:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid fileName\r\n\r\n  /auth/login:\r\n    post:\r\n      tags:\r\n        - Auth\r\n      description: Login user. Supply either both email and password.\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              oneOf:\r\n                - $ref: '#/components/schemas/PasswordLogin'\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  role:\r\n                    type: string\r\n                  phoneNumber:\r\n                    type: string\r\n        '500':\r\n          description: Invalid request\r\n  \r\n  /auth/register:\r\n    post:\r\n      tags:\r\n        - Auth\r\n      description: Register a new user\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - email, password, firstName, lastName\r\n              properties:\r\n                email:\r\n                  type: string\r\n                password:\r\n                  type: string\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  role:\r\n                    type: string\r\n                  phoneNumber:\r\n                    type: string\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /auth/refresh:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Auth\r\n      description: Refresh auth credentials\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n                  \r\n                \r\n  /auth/logout/{userid}:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: userid\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n      tags:\r\n        - Auth\r\n      description: Logout as user\r\n      responses:\r\n        '204':\r\n          description: Revokes all of the specified user's refresh tokens\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /auth/resetPassword/{email}:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: email\r\n          required: true\r\n          schema:\r\n            type: string\r\n      tags:\r\n        - Auth\r\n      description: Triggers password reset for user with specified email (reset link will be emailed)\r\n      responses:\r\n        '204':\r\n          description: Successfully sent password reset email\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /users:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: query\r\n          name: userId\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n        - in: query\r\n          name: email\r\n          schema:\r\n            type: string\r\n          description: The user's email\r\n      tags:\r\n        - User\r\n      description: Get all users, optionally filter by a userId or email query parameter to retrieve a single user\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of users, or a user filtered by id or email\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  required:\r\n                      - id, firstName, lastName, email, role, phoneNumber\r\n                  properties:\r\n                    id:\r\n                      type: string\r\n                    firstName:\r\n                      type: string\r\n                    lastName:\r\n                      type: string\r\n                    email:\r\n                      type: string\r\n                    role:\r\n                      type: string\r\n                    phoneNumber:\r\n                      type: string\r\n        '400':\r\n          description: Cannot query by both user and email\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - User\r\n      description: Create new user\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - firstName, lastName, role, email, phoneNumber\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                role:\r\n                  type: string\r\n                  enum: [\"User\", \"Admin\", \"Volunteer\", \"Donor\"]\r\n                email:\r\n                  type: string\r\n                phoneNumber:\r\n                  type: string\r\n\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new user\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                    - id, firstName, lastName, email, role, phoneNumber\r\n                properties:\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  role:\r\n                    type: string\r\n                  phoneNumber:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n          \r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: query\r\n          name: userId\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n        - in: query\r\n          name: email\r\n          schema:\r\n            type: string\r\n          description: The user's email\r\n      tags:\r\n        - User\r\n      description: Deletes a user by userId or email, specified through a query parameter\r\n      responses:\r\n        '204':\r\n          description: Succesfully deleted user\r\n        '400':\r\n          description: Cannot query by both userId and email, invalid userId or email, userId or email is not a string, userId or email not supplied\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n                \r\n  /users/{userId}:\r\n    put:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: userId\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n      tags:\r\n        - User\r\n      description: Update the user with the specified userId\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - firstName, lastName, role, email, phoneNumber\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                role:\r\n                  type: string\r\n                  enum: [\"User\", \"Admin\"]\r\n                email:\r\n                  type: string\r\n                phoneNumber:\r\n                  type: string\r\n      responses:\r\n        '200':\r\n          description: Successfully updated user\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                    - id, firstName, lastName, email, role, phoneNumber\r\n                properties:\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  role:\r\n                    type: string\r\n                  phoneNumber:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n",
			"canonicalURL": "/github.com/uwblueprint/community-fridge-kw@68dab0ebaafbc1b23193c84a7e7d3ae589bd9f7f/-/blob/backend/typescript/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/uwblueprint/community-fridge-kw/blob/68dab0ebaafbc1b23193c84a7e7d3ae589bd9f7f/backend/typescript/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}