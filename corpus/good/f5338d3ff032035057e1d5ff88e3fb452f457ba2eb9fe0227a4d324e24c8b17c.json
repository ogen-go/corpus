{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "maif.local-otoroshi-1.1.2-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/maif.local-otoroshi-1.1.2-swagger.yaml",
			"byteSize": 107521,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: oss@maif.fr\n    name: Otoroshi Team\n  description: Admin API of the Otoroshi reverse proxy\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Otoroshi Admin\n  version: 1.1.2\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://maif.github.io/otoroshi/assets/images/svg/otoroshi_logo.svg\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/MAIF/otoroshi/master/docs/manual/code/swagger.json\n      version: \"2.0\"\n  x-providerName: maif.local\n  x-serviceName: otoroshi\nexternalDocs:\n  description: Find out more about Otoroshi\n  url: https://maif.github.io/otoroshi/\ntags:\n  - description: Everything about Otoroshi global configuration\n    name: configuration\n  - description: Everything about Otoroshi import/export\n    name: import\n  - description: Everything about Otoroshi entities templates\n    name: templates\n  - description: Everything about Otoroshi Environments\n    name: environments\n  - description: Everything about Otoroshi service groups\n    name: groups\n  - description: Everything about Otoroshi api keys\n    name: apikeys\n  - description: Everything about Otoroshi service descriptors\n    name: services\n  - description: Everything about Otoroshi stats\n    name: stats\npaths:\n  /api/apikeys:\n    get:\n      deprecated: false\n      description: Get all api keys\n      operationId: allApiKeys\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys\n      tags:\n        - apikeys\n  /api/globalconfig:\n    get:\n      deprecated: false\n      description: Get the full configuration of Otoroshi\n      operationId: globalConfig\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the full configuration of Otoroshi\n      tags:\n        - configuration\n    patch:\n      deprecated: false\n      description: Update the global configuration with a diff\n      operationId: patchGlobalConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n        description: The updated global config as patch\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update the global configuration with a diff\n      tags:\n        - configuration\n    put:\n      deprecated: false\n      description: Update the global configuration\n      operationId: putGlobalConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GlobalConfig\"\n        description: The updated global config\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update the global configuration\n      tags:\n        - configuration\n  /api/groups:\n    get:\n      deprecated: false\n      description: Get all service groups\n      operationId: allServiceGroups\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Group\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all service groups\n      tags:\n        - groups\n    post:\n      deprecated: false\n      description: Create a new service group\n      operationId: createGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n        description: The service group to create\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new service group\n      tags:\n        - groups\n  \"/api/groups/{groupId}/apikeys\":\n    get:\n      deprecated: false\n      description: Get all api keys for the group of a service\n      operationId: apiKeysFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys for the group of a service\n      tags:\n        - apikeys\n    post:\n      deprecated: false\n      description: Create a new api key for a group\n      operationId: createApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ApiKey2\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new api key for a group\n      tags:\n        - apikeys\n  \"/api/groups/{groupId}/apikeys/{clientId}\":\n    delete:\n      deprecated: false\n      description: Delete an api key for a specified service group\n      operationId: deleteApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get an api key for a specified service group\n      operationId: apiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get an api key\n      tags:\n        - apikeys\n    patch:\n      deprecated: false\n      description: Update an api key for a specified service descriptor with a diff\n      operationId: patchApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Patch\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key with a diff\n      tags:\n        - apikeys\n    put:\n      deprecated: false\n      description: Update an api key for a specified service group\n      operationId: updateApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ApiKey\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key\n      tags:\n        - apikeys\n  \"/api/groups/{groupId}/apikeys/{clientId}/quotas\":\n    delete:\n      deprecated: false\n      description: Reset the quota state of an api key\n      operationId: resetApiKeyFromGroupQuotas\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Reset the quota state of an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get the quota state of an api key\n      operationId: apiKeyFromGroupQuotas\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the quota state of an api key\n      tags:\n        - apikeys\n  \"/api/groups/{serviceGroupId}\":\n    delete:\n      deprecated: false\n      description: Delete a service group\n      operationId: deleteGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service group\n      tags:\n        - groups\n    get:\n      deprecated: false\n      description: Get a service group\n      operationId: serviceGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service group\n      tags:\n        - groups\n    patch:\n      deprecated: false\n      description: Update a service group with a diff\n      operationId: patchGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n        description: The patch for the service group\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service group with a diff\n      tags:\n        - groups\n    put:\n      deprecated: false\n      description: Update a service group\n      operationId: updateGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n        description: The updated service group\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service group\n      tags:\n        - groups\n  \"/api/groups/{serviceGroupId}/services\":\n    get:\n      deprecated: false\n      description: Get all services descriptor for a group\n      operationId: serviceGroupServices\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services descriptor for a group\n      tags:\n        - services\n  /api/import:\n    post:\n      deprecated: false\n      description: Import the full state of Otoroshi as a file\n      operationId: fullImportFromFile\n      requestBody:\n        $ref: \"#/components/requestBodies/ImportExport\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Import the full state of Otoroshi as a file\n      tags:\n        - import\n  /api/live:\n    get:\n      deprecated: false\n      description: Get global otoroshi stats\n      operationId: globalLiveStats\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get global otoroshi stats\n      tags:\n        - stats\n  \"/api/live/{id}\":\n    get:\n      deprecated: false\n      description: Get live feed of global otoroshi stats (global) or for a service {id}\n      operationId: serviceLiveStats\n      parameters:\n        - description: The service id or global for otoroshi stats\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n            text/event-stream:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get live feed of otoroshi stats\n      tags:\n        - stats\n  /api/otoroshi.json:\n    get:\n      deprecated: false\n      description: Export the full state of Otoroshi\n      operationId: fullExport\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportExport\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Export the full state of Otoroshi\n      tags:\n        - import\n    post:\n      deprecated: false\n      description: Import the full state of Otoroshi\n      operationId: fullImport\n      requestBody:\n        $ref: \"#/components/requestBodies/ImportExport\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Import the full state of Otoroshi\n      tags:\n        - import\n  /api/services:\n    get:\n      deprecated: false\n      description: Get all services\n      operationId: allServices\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Service\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Create a new service descriptor\n      operationId: createService\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n        description: The service descriptor to create\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor\n      operationId: deleteService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor\n      operationId: service\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor\n      tags:\n        - services\n    patch:\n      deprecated: false\n      description: Update a service descriptor with a diff\n      operationId: patchService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n        description: The patch for the service\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor with a diff\n      tags:\n        - services\n    put:\n      deprecated: false\n      description: Update a service descriptor\n      operationId: updateService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n        description: The updated service descriptor\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}/apikeys\":\n    get:\n      deprecated: false\n      description: Get all api keys for the group of a service\n      operationId: apiKeys\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys for the group of a service\n      tags:\n        - apikeys\n    post:\n      deprecated: false\n      description: Create a new api key for a service\n      operationId: createApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ApiKey2\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new api key for a service\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}\":\n    delete:\n      deprecated: false\n      description: Delete an api key for a specified service descriptor\n      operationId: deleteApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get an api key for a specified service descriptor\n      operationId: apiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get an api key\n      tags:\n        - apikeys\n    patch:\n      deprecated: false\n      description: Update an api key for a specified service descriptor with a diff\n      operationId: patchApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Patch\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key with a diff\n      tags:\n        - apikeys\n    put:\n      deprecated: false\n      description: Update an api key for a specified service descriptor\n      operationId: updateApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ApiKey\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}/group\":\n    get:\n      deprecated: false\n      description: Get the group of an api key\n      operationId: apiKeyGroup\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the group of an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}/quotas\":\n    delete:\n      deprecated: false\n      description: Reset the quota state of an api key\n      operationId: resetApiKeyQuotas\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Reset the quota state of an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get the quota state of an api key\n      operationId: apiKeyQuotas\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the quota state of an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/targets\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor target\n      operationId: serviceDeleteTarget\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor target\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor targets\n      operationId: serviceTargets\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor targets\n      tags:\n        - services\n    patch:\n      deprecated: false\n      description: Update a service descriptor targets\n      operationId: updateServiceTargets\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n        description: The patch for the service targets\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor targets\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Add a target to a service descriptor\n      operationId: serviceAddTarget\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Target\"\n        description: The updated service descriptor\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Add a target to a service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}/template\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor error template\n      operationId: deleteServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor error template\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor error template\n      operationId: serviceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor error template\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Update a service descriptor targets\n      operationId: createServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ErrorTemplate\"\n        description: The patch for the service error template\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a service descriptor error template\n      tags:\n        - services\n    put:\n      deprecated: false\n      description: Update an error template to a service descriptor\n      operationId: updateServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ErrorTemplate\"\n        description: The updated service descriptor template\n        required: true\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an error template to a service descriptor\n      tags:\n        - services\n  /health:\n    get:\n      deprecated: false\n      description: Import the full state of Otoroshi as a file\n      operationId: health\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OtoroshiHealth\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"404\":\n          description: Resource not found or does not exist\n      summary: Return current Otoroshi health\n      tags:\n        - health\n  /lines:\n    get:\n      deprecated: false\n      description: Get all environments provided by the current Otoroshi instance\n      operationId: allLines\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all environments\n      tags:\n        - environments\n  \"/lines/{line}/services\":\n    get:\n      deprecated: false\n      description: Get all services for an environment provided by the current Otoroshi\n        instance\n      operationId: servicesForALine\n      parameters:\n        - description: The environment where to find services\n          in: path\n          name: line\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Service\"\n                type: array\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services for an environment\n      tags:\n        - environments\n  /new/apikey:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi Api Key. The generated entity is not\n        persisted\n      operationId: initiateApiKey\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi Api Key\n      tags:\n        - templates\n  /new/group:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi service group. The generated entity is not\n        persisted\n      operationId: initiateServiceGroup\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi service group\n      tags:\n        - templates\n  /new/service:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi service descriptor. The generated entity\n        is not persisted\n      operationId: initiateService\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an\n            issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with\n            'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use\n            basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi service descriptor\n      tags:\n        - templates\nservers:\n  - url: http://maif.local/api\ncomponents:\n  requestBodies:\n    ImportExport:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ImportExport\"\n      description: The full export\n      required: true\n    ApiKey:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ApiKey\"\n      description: The updated api key\n      required: true\n    ApiKey2:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ApiKey\"\n      description: The api key to create\n      required: true\n    Patch:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Patch\"\n      description: The patch for the api key\n      required: true\n  securitySchemes:\n    otoroshi_auth:\n      type: http\n      scheme: basic\n  schemas:\n    ApiKey:\n      description: An Otoroshi Api Key. An Api Key is defined for a group of services to\n        allow usage of the same Api Key for multiple services.\n      properties:\n        authorizedGroup:\n          description: The group id on which the key is authorized\n          example: a string value\n          type: string\n        clientId:\n          description: The unique id of the Api Key. Usually 16 random alpha numerical\n            characters, but can be anything\n          example: a string value\n          type: string\n        clientName:\n          description: The name of the api key, for humans ;-)\n          example: a string value\n          type: string\n        clientSecret:\n          description: The secret of the Api Key. Usually 64 random alpha numerical\n            characters, but can be anything\n          example: a string value\n          type: string\n        dailyQuota:\n          description: Authorized number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        enabled:\n          description: Whether or not the key is enabled. If disabled, resources won't be\n            available to calls using this key\n          example: true\n          type: boolean\n        metadata:\n          additionalProperties:\n            type: string\n          description: Bunch of metadata for the key\n          example:\n            key: value\n          type: object\n        monthlyQuota:\n          description: Authorized number of calls per month\n          example: 123\n          format: int64\n          type: integer\n        throttlingQuota:\n          description: Authorized number of calls per second, measured on 10 seconds\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - clientId\n        - clientSecret\n        - clientName\n        - authorizedGroup\n        - enabled\n      type: object\n    Auth0Config:\n      description: Configuration for Auth0 domain\n      properties:\n        callbackUrl:\n          description: Auth0 callback URL\n          example: a string value\n          type: string\n        clientId:\n          description: Auth0 client id\n          example: a string value\n          type: string\n        clientSecret:\n          description: Auth0 client secret\n          example: a string value\n          type: string\n        domain:\n          description: Auth0 domain\n          example: a string value\n          type: string\n      required:\n        - clientId\n        - clientSecret\n        - domain\n        - callbackUrl\n      type: object\n    Canary:\n      description: The configuration of the canary mode for a service descriptor\n      properties:\n        enabled:\n          description: Use canary mode for this service\n          example: true\n          type: boolean\n        root:\n          description: Otoroshi will append this root to any target choosen. If the\n            specified root is '/api/foo', then a request to https://yyyyyyy/bar\n            will actually hit https://xxxxxxxxx/api/foo/bar\n          example: a string value\n          type: string\n        targets:\n          description: The list of target that Otoroshi will proxy and expose through the\n            subdomain defined before. Otoroshi will do round-robin load\n            balancing between all those targets with circuit breaker mecanism to\n            avoid cascading failures\n          items:\n            $ref: \"#/components/schemas/Target\"\n          type: array\n        traffic:\n          description: Ratio of traffic that will be sent to canary targets.\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - enabled\n        - traffic\n        - targets\n        - root\n      type: object\n    CleverSettings:\n      description: Configuration for CleverCloud client\n      properties:\n        consumerKey:\n          description: CleverCloud consumer key\n          example: a string value\n          type: string\n        consumerSecret:\n          description: CleverCloud consumer token\n          example: a string value\n          type: string\n        orgaId:\n          description: CleverCloud organization id\n          example: a string value\n          type: string\n        secret:\n          description: CleverCloud oauth secret\n          example: a string value\n          type: string\n        token:\n          description: CleverCloud oauth token\n          example: a string value\n          type: string\n      required:\n        - consumerKey\n        - consumerSecret\n        - token\n        - secret\n        - orgaId\n      type: object\n    ClientConfig:\n      description: The configuration of the circuit breaker for a service descriptor\n      properties:\n        backoffFactor:\n          description: Specify the factor to multiply the delay for each retry\n          example: 123123\n          format: int32\n          type: integer\n        callTimeout:\n          description: Specify how long each call should last at most in milliseconds\n          example: 123123\n          format: int32\n          type: integer\n        globalTimeout:\n          description: Specify how long the global call (with retries) should last at most\n            in milliseconds\n          example: 123123\n          format: int32\n          type: integer\n        maxErrors:\n          description: Specify how many errors can pass before opening the circuit breaker\n          example: 123123\n          format: int32\n          type: integer\n        retries:\n          description: Specify how many times the client will try to fetch the result of\n            the request after an error before giving up.\n          example: 123123\n          format: int32\n          type: integer\n        retryInitialDelay:\n          description: Specify the delay between two retries. Each retry, the delay is\n            multiplied by the backoff factor\n          example: 123123\n          format: int32\n          type: integer\n        sampleInterval:\n          description: Specify the sliding window time for the circuit breaker in\n            milliseconds, after this time, error count will be reseted\n          example: 123123\n          format: int32\n          type: integer\n        useCircuitBreaker:\n          description: Use a circuit breaker to avoid cascading failure when calling chains\n            of services. Highly recommended !\n          example: true\n          type: boolean\n      required:\n        - useCircuitBreaker\n        - retries\n        - maxErrors\n        - retryInitialDelay\n        - backoffFactor\n        - callTimeout\n        - globalTimeout\n        - sampleInterval\n      type: object\n    Deleted:\n      properties:\n        deleted:\n          example: true\n          type: boolean\n      required:\n        - deleted\n      type: object\n    Done:\n      properties:\n        done:\n          example: true\n          type: boolean\n      required:\n        - done\n      type: object\n    Environment:\n      description: The name of the environment for service descriptors\n      example: prod\n      type: string\n    ErrorTemplate:\n      description: Error templates for a service descriptor\n      properties:\n        messages:\n          additionalProperties:\n            type: string\n          description: Map for custom messages\n          example:\n            key: value\n          type: object\n        serviceId:\n          description: The Id of the service for which the error template is enabled\n          example: a string value\n          type: string\n        template40x:\n          description: The html template for 40x errors\n          example: a string value\n          type: string\n        template50x:\n          description: The html template for 50x errors\n          example: a string value\n          type: string\n        templateBuild:\n          description: The html template for build page\n          example: a string value\n          type: string\n        templateMaintenance:\n          description: The html template for maintenance page\n          example: a string value\n          type: string\n      required:\n        - serviceId\n        - template40x\n        - template50x\n        - templateBuild\n        - templateMaintenance\n        - messages\n      type: object\n    ExposedApi:\n      description: The Open API configuration for your service (if one)\n      properties:\n        exposeApi:\n          description: Whether or not the current service expose an API with an Open API\n            descriptor\n          example: true\n          type: boolean\n        openApiDescriptorUrl:\n          description: The URL of the Open API descriptor\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - exposeApi\n      type: object\n    GlobalConfig:\n      description: The global config object of Otoroshi, used to customize settings of the\n        current Otoroshi instance\n      properties:\n        alertsEmails:\n          description: Email addresses that will receive all Otoroshi alert events\n          items:\n            example: admin@otoroshi.io\n            format: email\n            type: string\n          type: array\n        alertsWebhooks:\n          description: Webhook that will receive all Otoroshi alert events\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n          type: array\n        analyticsEventsUrl:\n          description: The URL to get analytics events from\n          example: http://www.google.com\n          format: uri\n          type: string\n        analyticsWebhooks:\n          description: Webhook that will receive all internal Otoroshi events\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n          type: array\n        apiReadOnly:\n          description: If enabled, Admin API won't be able to write/update/delete entities\n          example: true\n          type: boolean\n        autoLinkToDefaultGroup:\n          description: If not defined, every new service descriptor will be added to the\n            default group\n          example: true\n          type: boolean\n        backofficeAuth0Config:\n          $ref: \"#/components/schemas/Auth0Config\"\n        cleverSettings:\n          $ref: \"#/components/schemas/CleverSettings\"\n        endlessIpAddresses:\n          description: IP addresses for which any request to Otoroshi will respond with 128\n            Gb of zeros\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n        ipFiltering:\n          $ref: \"#/components/schemas/IpFiltering\"\n        limitConcurrentRequests:\n          description: If enabled, Otoroshi will reject new request if too much at the same\n            time\n          example: true\n          type: boolean\n        lines:\n          description: Possibles lines for Otoroshi\n          items:\n            example: a string value\n            type: string\n          type: array\n        mailGunSettings:\n          $ref: \"#/components/schemas/MailgunSettings\"\n        maxConcurrentRequests:\n          description: The number of authorized request processed at the same time\n          example: 123\n          format: int64\n          type: integer\n        maxHttp10ResponseSize:\n          description: The max size in bytes of an HTTP 1.0 response\n          example: 123\n          format: int64\n          type: integer\n        maxLogsSize:\n          description: Number of events kept locally\n          example: 123123\n          format: int32\n          type: integer\n        middleFingers:\n          description: Use middle finger emoji as a response character for endless HTTP\n            responses\n          example: true\n          type: boolean\n        perIpThrottlingQuota:\n          description: Authorized number of calls per second globally per IP address,\n            measured on 10 seconds\n          example: 123\n          format: int64\n          type: integer\n        privateAppsAuth0Config:\n          $ref: \"#/components/schemas/Auth0Config\"\n        streamEntityOnly:\n          description: HTTP will be streamed only. Doesn't work with old browsers\n          example: true\n          type: boolean\n        throttlingQuota:\n          description: Authorized number of calls per second globally, measured on 10\n            seconds\n          example: 123\n          format: int64\n          type: integer\n        u2fLoginOnly:\n          description: If enabled, login to backoffice through Auth0 will be disabled\n          example: true\n          type: boolean\n        useCircuitBreakers:\n          description: If enabled, services will be authorized to use circuit breakers\n          example: true\n          type: boolean\n      required:\n        - streamEntityOnly\n        - autoLinkToDefaultGroup\n        - limitConcurrentRequests\n        - maxConcurrentRequests\n        - useCircuitBreakers\n        - apiReadOnly\n        - u2fLoginOnly\n        - ipFiltering\n        - throttlingQuota\n        - perIpThrottlingQuota\n        - analyticsEventsUrl\n        - analyticsWebhooks\n        - alertsWebhooks\n        - alertsEmails\n        - endlessIpAddresses\n      type: object\n    Group:\n      description: An Otoroshi service group is just a group of service descriptor. It is\n        useful to be able to define Api Keys for the whole group\n      properties:\n        description:\n          description: The descriptoin of the group\n          example: a string value\n          type: string\n        id:\n          description: The unique id of the group. Usually 64 random alpha numerical\n            characters, but can be anything\n          example: a string value\n          type: string\n        name:\n          description: The name of the group\n          example: a string value\n          type: string\n      required:\n        - id\n        - name\n      type: object\n    HealthCheck:\n      description: The configuration for checking health of a service. Otoroshi will\n        perform GET call on the URL to check if the service is still alive\n      properties:\n        enabled:\n          description: Whether or not healthcheck is enabled on the current service\n            descriptor\n          example: true\n          type: boolean\n        url:\n          description: The URL to check\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - enabled\n      type: object\n    ImportExport:\n      description: The structure that can be imported to or exported from Otoroshi. It\n        represent the memory state of Otoroshi\n      properties:\n        admins:\n          description: Current U2F admin at the time of export\n          items:\n            description: Administrator using FIDO U2F device to access Otoroshi\n            properties:\n              createdAt:\n                description: The creation date of the user\n                example: 123\n                format: int64\n                type: integer\n              label:\n                description: The label for the user\n                example: a string value\n                type: string\n              password:\n                description: The hashed password of the user\n                example: a string value\n                type: string\n              registration:\n                additionalProperties:\n                  type: string\n                description: The U2F registration slug\n                example:\n                  key: value\n                type: object\n              username:\n                description: The email address of the user\n                example: a string value\n                type: string\n            required:\n              - username\n              - label\n              - password\n              - createdAt\n              - registration\n            type: object\n          type: array\n        apiKeys:\n          description: Current apik keys at the time of export\n          items:\n            description: An Otoroshi Api Key. An Api Key is defined for a group of services\n              to allow usage of the same Api Key for multiple services.\n            properties:\n              authorizedGroup:\n                description: The group id on which the key is authorized\n                example: a string value\n                type: string\n              clientId:\n                description: The unique id of the Api Key. Usually 16 random alpha\n                  numerical characters, but can be anything\n                example: a string value\n                type: string\n              clientName:\n                description: The name of the api key, for humans ;-)\n                example: a string value\n                type: string\n              clientSecret:\n                description: The secret of the Api Key. Usually 64 random alpha numerical\n                  characters, but can be anything\n                example: a string value\n                type: string\n              dailyQuota:\n                description: Authorized number of calls per day\n                example: 123\n                format: int64\n                type: integer\n              enabled:\n                description: Whether or not the key is enabled. If disabled, resources\n                  won't be available to calls using this key\n                example: true\n                type: boolean\n              metadata:\n                additionalProperties:\n                  type: string\n                description: Bunch of metadata for the key\n                example:\n                  key: value\n                type: object\n              monthlyQuota:\n                description: Authorized number of calls per month\n                example: 123\n                format: int64\n                type: integer\n              throttlingQuota:\n                description: Authorized number of calls per second, measured on 10 seconds\n                example: 123\n                format: int64\n                type: integer\n            required:\n              - clientId\n              - clientSecret\n              - clientName\n              - authorizedGroup\n              - enabled\n            type: object\n          type: array\n        appConfig:\n          additionalProperties:\n            type: string\n          description: Current env variables at the time of export\n          example:\n            key: value\n          type: object\n        config:\n          $ref: \"#/components/schemas/GlobalConfig\"\n        date:\n          example: 2017-07-21T17:32:28Z\n          format: date-time\n          type: string\n        dateRaw:\n          example: 123\n          format: int64\n          type: integer\n        errorTemplates:\n          description: Current error templates at the time of export\n          items:\n            description: Error templates for a service descriptor\n            properties:\n              messages:\n                additionalProperties:\n                  type: string\n                description: Map for custom messages\n                example:\n                  key: value\n                type: object\n              serviceId:\n                description: The Id of the service for which the error template is enabled\n                example: a string value\n                type: string\n              template40x:\n                description: The html template for 40x errors\n                example: a string value\n                type: string\n              template50x:\n                description: The html template for 50x errors\n                example: a string value\n                type: string\n              templateBuild:\n                description: The html template for build page\n                example: a string value\n                type: string\n              templateMaintenance:\n                description: The html template for maintenance page\n                example: a string value\n                type: string\n            required:\n              - serviceId\n              - template40x\n              - template50x\n              - templateBuild\n              - templateMaintenance\n              - messages\n            type: object\n          type: array\n        label:\n          example: a string value\n          type: string\n        serviceDescriptors:\n          description: Current service descriptors at the time of export\n          items:\n            description: An otoroshi service descriptor. Represent a forward HTTP call on a\n              domain to another location with some optional api management\n              mecanism\n            properties:\n              Canary:\n                $ref: \"#/components/schemas/Canary\"\n              additionalHeaders:\n                additionalProperties:\n                  type: string\n                description: Specify headers that will be added to each client request.\n                  Useful to add authentication\n                example:\n                  key: value\n                type: object\n              api:\n                $ref: \"#/components/schemas/ExposedApi\"\n              buildMode:\n                description: Display a construction page when a user try to use the service\n                example: true\n                type: boolean\n              clientConfig:\n                $ref: \"#/components/schemas/ClientConfig\"\n              domain:\n                description: The domain on which the service is available.\n                example: a string value\n                type: string\n              enabled:\n                description: Activate or deactivate your service. Once disabled, users will\n                  get an error page saying the service does not exist\n                example: true\n                type: boolean\n              enforceSecureCommunication:\n                description: When enabled, Otoroshi will try to exchange headers with\n                  downstream service to ensure no one else can use the service\n                  from outside\n                example: true\n                type: boolean\n              env:\n                description: The line on which the service is available. Based on that\n                  value, the name of the line will be appended to the subdomain.\n                  For line prod, nothing will be appended. For example, if the\n                  subdomain is 'foo' and line is 'preprod', then the exposed\n                  service will be available at 'foo.preprod.mydomain'\n                example: a string value\n                type: string\n              forceHttps:\n                description: Will force redirection to https:// if not present\n                example: true\n                type: boolean\n              groupId:\n                description: Each service descriptor is attached to a group. A group can\n                  have one or more services. Each API key is linked to a group\n                  and allow access to every service in the group\n                example: a string value\n                type: string\n              healthCheck:\n                $ref: \"#/components/schemas/HealthCheck\"\n              id:\n                description: A unique random string to identify your service\n                example: 110e8400-e29b-11d4-a716-446655440000\n                format: uuid\n                type: string\n              ipFiltering:\n                $ref: \"#/components/schemas/IpFiltering\"\n              localHost:\n                description: The host used localy, mainly localhost:xxxx\n                example: a string value\n                type: string\n              localScheme:\n                description: The scheme used localy, mainly http\n                example: a string value\n                type: string\n              maintenanceMode:\n                description: Display a maintainance page when a user try to use the service\n                example: true\n                type: boolean\n              matchingHeaders:\n                additionalProperties:\n                  type: string\n                description: Specify headers that MUST be present on client request to\n                  route it. Useful to implement versioning\n                example:\n                  key: value\n                type: object\n              matchingRoot:\n                description: The root path on which the service is available\n                example: a string value\n                type: string\n              metadata:\n                additionalProperties:\n                  type: string\n                description: Just a bunch of random properties\n                example:\n                  key: value\n                type: object\n              name:\n                description: The name of your service. Only for debug and human readability\n                  purposes\n                example: a string value\n                type: string\n              privateApp:\n                description: When enabled, user will be allowed to use the service (UI)\n                  only if they are registered users of the private apps domain\n                example: true\n                type: boolean\n              privatePatterns:\n                description: If you define a public pattern that is a little bit too much,\n                  you can make some of public URL private again\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              publicPatterns:\n                description: By default, every services are private only and you'll need an\n                  API key to access it. However, if you want to expose a public\n                  UI, you can define one or more public patterns (regex) to\n                  allow access to anybody. For example if you want to allow\n                  anybody on any URL, just use '/.*'\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              redirectToLocal:\n                description: If you work locally with Otoroshi, you may want to use that\n                  feature to redirect one particuliar service to a local host.\n                  For example, you can relocate https://foo.preprod.bar.com to\n                  http://localhost:8080 to make some tests\n                example: true\n                type: boolean\n              root:\n                description: Otoroshi will append this root to any target choosen. If the\n                  specified root is '/api/foo', then a request to\n                  https://yyyyyyy/bar will actually hit\n                  https://xxxxxxxxx/api/foo/bar\n                example: a string value\n                type: string\n              secComExcludedPatterns:\n                description: URI patterns excluded from secured communications\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              sendOtoroshiHeadersBack:\n                description: When enabled, Otoroshi will send headers to consumer like\n                  request id, client latency, overhead, etc ...\n                example: true\n                type: boolean\n              statsdConfig:\n                $ref: \"#/components/schemas/StatsdConfig\"\n              subdomain:\n                description: The subdomain on which the service is available\n                example: a string value\n                type: string\n              targets:\n                description: The list of target that Otoroshi will proxy and expose through\n                  the subdomain defined before. Otoroshi will do round-robin\n                  load balancing between all those targets with circuit breaker\n                  mecanism to avoid cascading failures\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n            required:\n              - id\n              - groupId\n              - name\n              - env\n              - domain\n              - subdomain\n              - targets\n              - root\n              - enabled\n              - privateApp\n              - forceHttps\n              - maintenanceMode\n              - buildMode\n              - enforceSecureCommunication\n            type: object\n          type: array\n        serviceGroups:\n          description: Current service groups at the time of export\n          items:\n            description: An Otoroshi service group is just a group of service descriptor.\n              It is useful to be able to define Api Keys for the whole group\n            properties:\n              description:\n                description: The descriptoin of the group\n                example: a string value\n                type: string\n              id:\n                description: The unique id of the group. Usually 64 random alpha numerical\n                  characters, but can be anything\n                example: a string value\n                type: string\n              name:\n                description: The name of the group\n                example: a string value\n                type: string\n            required:\n              - id\n              - name\n            type: object\n          type: array\n        simpleAdmins:\n          description: Current simple admins at the time of export\n          items:\n            description: Administrator using just login/password tuple to access Otoroshi\n            properties:\n              createdAt:\n                description: The creation date of the user\n                example: 123\n                format: int64\n                type: integer\n              label:\n                description: The label for the user\n                example: a string value\n                type: string\n              password:\n                description: The hashed password of the user\n                example: a string value\n                type: string\n              username:\n                description: The email address of the user\n                example: a string value\n                type: string\n            required:\n              - username\n              - label\n              - password\n              - createdAt\n            type: object\n          type: array\n        stats:\n          $ref: \"#/components/schemas/ImportExportStats\"\n      required:\n        - label\n        - dateRaw\n        - date\n        - stats\n        - config\n        - admins\n        - simpleAdmins\n        - serviceGroups\n        - apiKeys\n        - serviceDescriptors\n        - errorTemplates\n      type: object\n    ImportExportStats:\n      description: Global stats for the current Otoroshi instances\n      properties:\n        calls:\n          description: Number of calls to Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataIn:\n          description: The amount of data sent to Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataOut:\n          description: The amount of data sent from Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - calls\n        - dataIn\n        - dataOut\n      type: object\n    IpFiltering:\n      description: The filtering configuration block for a service of globally.\n      properties:\n        blacklist:\n          description: Blacklisted IP addresses\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n        whitelist:\n          description: Whitelisted IP addresses\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n      required:\n        - whitelist\n        - blacklist\n      type: object\n    MailgunSettings:\n      description: Configuration for mailgun api client\n      properties:\n        apiKey:\n          description: Mailgun Api Key\n          example: a string value\n          type: string\n        domain:\n          description: Mailgun domain\n          example: a string value\n          type: string\n      required:\n        - apiKey\n        - domain\n      type: object\n    OtoroshiHealth:\n      description: The structure that represent current Otoroshi health\n      properties:\n        datastore:\n          enum:\n            - healthy\n            - unhealthy\n            - unreachable\n          type: string\n        otoroshi:\n          enum:\n            - healthy\n            - unhealthy\n            - down\n          type: string\n      required:\n        - otoroshi\n        - datastore\n      type: object\n    Patch:\n      description: \"A set of changes described in JSON Patch format: http://jsonpatch.com/\n        (RFC 6902)\"\n      items:\n        properties:\n          op:\n            enum:\n              - add\n              - replace\n              - remove\n              - copy\n              - test\n            type: string\n          path:\n            example: a string value\n            type: string\n          value: {}\n        required:\n          - op\n          - path\n        type: object\n      type: array\n    Quotas:\n      description: Quotas state for an api key on a service group\n      properties:\n        authorizedCallsPerDay:\n          description: The number of authorized calls per day\n          example: 123\n          format: int64\n          type: integer\n        authorizedCallsPerMonth:\n          description: The number of authorized calls per month\n          example: 123\n          format: int64\n          type: integer\n        authorizedCallsPerSec:\n          description: The number of authorized calls per second\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerDay:\n          description: The current number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerMonth:\n          description: The current number of calls per month\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerSec:\n          description: The current number of calls per second\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerDay:\n          description: The remaining number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerMonth:\n          description: The number of authorized calls per month\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerSec:\n          description: The remaining number of calls per second\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - authorizedCallsPerSec\n        - currentCallsPerSec\n        - remainingCallsPerSec\n        - authorizedCallsPerDay\n        - currentCallsPerDay\n        - remainingCallsPerDay\n        - authorizedCallsPerMonth\n        - currentCallsPerMonth\n        - remainingCallsPerMonth\n      type: object\n    Service:\n      description: An otoroshi service descriptor. Represent a forward HTTP call on a\n        domain to another location with some optional api management mecanism\n      properties:\n        Canary:\n          $ref: \"#/components/schemas/Canary\"\n        additionalHeaders:\n          additionalProperties:\n            type: string\n          description: Specify headers that will be added to each client request. Useful to\n            add authentication\n          example:\n            key: value\n          type: object\n        api:\n          $ref: \"#/components/schemas/ExposedApi\"\n        buildMode:\n          description: Display a construction page when a user try to use the service\n          example: true\n          type: boolean\n        clientConfig:\n          $ref: \"#/components/schemas/ClientConfig\"\n        domain:\n          description: The domain on which the service is available.\n          example: a string value\n          type: string\n        enabled:\n          description: Activate or deactivate your service. Once disabled, users will get\n            an error page saying the service does not exist\n          example: true\n          type: boolean\n        enforceSecureCommunication:\n          description: When enabled, Otoroshi will try to exchange headers with downstream\n            service to ensure no one else can use the service from outside\n          example: true\n          type: boolean\n        env:\n          description: The line on which the service is available. Based on that value, the\n            name of the line will be appended to the subdomain. For line prod,\n            nothing will be appended. For example, if the subdomain is 'foo' and\n            line is 'preprod', then the exposed service will be available at\n            'foo.preprod.mydomain'\n          example: a string value\n          type: string\n        forceHttps:\n          description: Will force redirection to https:// if not present\n          example: true\n          type: boolean\n        groupId:\n          description: Each service descriptor is attached to a group. A group can have one\n            or more services. Each API key is linked to a group and allow access\n            to every service in the group\n          example: a string value\n          type: string\n        healthCheck:\n          $ref: \"#/components/schemas/HealthCheck\"\n        id:\n          description: A unique random string to identify your service\n          example: 110e8400-e29b-11d4-a716-446655440000\n          format: uuid\n          type: string\n        ipFiltering:\n          $ref: \"#/components/schemas/IpFiltering\"\n        localHost:\n          description: The host used localy, mainly localhost:xxxx\n          example: a string value\n          type: string\n        localScheme:\n          description: The scheme used localy, mainly http\n          example: a string value\n          type: string\n        maintenanceMode:\n          description: Display a maintainance page when a user try to use the service\n          example: true\n          type: boolean\n        matchingHeaders:\n          additionalProperties:\n            type: string\n          description: Specify headers that MUST be present on client request to route it.\n            Useful to implement versioning\n          example:\n            key: value\n          type: object\n        matchingRoot:\n          description: The root path on which the service is available\n          example: a string value\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          description: Just a bunch of random properties\n          example:\n            key: value\n          type: object\n        name:\n          description: The name of your service. Only for debug and human readability\n            purposes\n          example: a string value\n          type: string\n        privateApp:\n          description: When enabled, user will be allowed to use the service (UI) only if\n            they are registered users of the private apps domain\n          example: true\n          type: boolean\n        privatePatterns:\n          description: If you define a public pattern that is a little bit too much, you\n            can make some of public URL private again\n          items:\n            example: a string value\n            type: string\n          type: array\n        publicPatterns:\n          description: By default, every services are private only and you'll need an API\n            key to access it. However, if you want to expose a public UI, you\n            can define one or more public patterns (regex) to allow access to\n            anybody. For example if you want to allow anybody on any URL, just\n            use '/.*'\n          items:\n            example: a string value\n            type: string\n          type: array\n        redirectToLocal:\n          description: If you work locally with Otoroshi, you may want to use that feature\n            to redirect one particuliar service to a local host. For example,\n            you can relocate https://foo.preprod.bar.com to\n            http://localhost:8080 to make some tests\n          example: true\n          type: boolean\n        root:\n          description: Otoroshi will append this root to any target choosen. If the\n            specified root is '/api/foo', then a request to https://yyyyyyy/bar\n            will actually hit https://xxxxxxxxx/api/foo/bar\n          example: a string value\n          type: string\n        secComExcludedPatterns:\n          description: URI patterns excluded from secured communications\n          items:\n            example: a string value\n            type: string\n          type: array\n        sendOtoroshiHeadersBack:\n          description: When enabled, Otoroshi will send headers to consumer like request\n            id, client latency, overhead, etc ...\n          example: true\n          type: boolean\n        statsdConfig:\n          $ref: \"#/components/schemas/StatsdConfig\"\n        subdomain:\n          description: The subdomain on which the service is available\n          example: a string value\n          type: string\n        targets:\n          description: The list of target that Otoroshi will proxy and expose through the\n            subdomain defined before. Otoroshi will do round-robin load\n            balancing between all those targets with circuit breaker mecanism to\n            avoid cascading failures\n          items:\n            $ref: \"#/components/schemas/Target\"\n          type: array\n      required:\n        - id\n        - groupId\n        - name\n        - env\n        - domain\n        - subdomain\n        - targets\n        - root\n        - enabled\n        - privateApp\n        - forceHttps\n        - maintenanceMode\n        - buildMode\n        - enforceSecureCommunication\n      type: object\n    SimpleAdmin:\n      description: Administrator using just login/password tuple to access Otoroshi\n      properties:\n        createdAt:\n          description: The creation date of the user\n          example: 123\n          format: int64\n          type: integer\n        label:\n          description: The label for the user\n          example: a string value\n          type: string\n        password:\n          description: The hashed password of the user\n          example: a string value\n          type: string\n        username:\n          description: The email address of the user\n          example: a string value\n          type: string\n      required:\n        - username\n        - label\n        - password\n        - createdAt\n      type: object\n    Stats:\n      description: Live stats for a service or globally\n      properties:\n        calls:\n          description: Number of calls on the specified service or globally\n          example: 123\n          format: int64\n          type: integer\n        concurrentHandledRequests:\n          description: The number of concurrent request currently\n          example: 123\n          format: int64\n          type: integer\n        dataIn:\n          description: The amount of data sent to the specified service or Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataInRate:\n          description: The rate of data sent to the specified service or Otoroshi globally\n          example: 42.2\n          format: double\n          type: integer\n        dataOut:\n          description: The amount of data sent from the specified service or Otoroshi\n            globally\n          example: 123\n          format: int64\n          type: integer\n        dataOutRate:\n          description: The rate of data sent from the specified service or Otoroshi globally\n          example: 42.2\n          format: double\n          type: integer\n        duration:\n          description: The average duration for a call\n          example: 42.2\n          format: double\n          type: integer\n        overhead:\n          description: The average overhead time induced by Otoroshi for each call\n          example: 42.2\n          format: double\n          type: integer\n        rate:\n          description: The rate of data sent from and to the specified service or Otoroshi\n            globally\n          example: 42.2\n          format: double\n          type: integer\n      required:\n        - calls\n        - dataIn\n        - dataOut\n        - rate\n        - duration\n        - overhead\n        - dataInRate\n        - dataOutRate\n        - concurrentHandledRequests\n      type: object\n    StatsdConfig:\n      description: The configuration for statsd metrics push\n      properties:\n        datadog:\n          description: Datadog agent\n          example: true\n          type: boolean\n        host:\n          description: The host of the StatsD agent\n          example: a string value\n          type: string\n        port:\n          description: The port of the StatsD agent\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - host\n        - port\n        - datadog\n      type: object\n    Target:\n      description: A Target is where an HTTP call will be forwarded in the end from a\n        service domain\n      properties:\n        host:\n          description: The host on which the HTTP call will be forwarded. Can be a domain\n            name, or an IP address. Can also have a port\n          example: www.google.com\n          format: hostname\n          type: string\n        scheme:\n          description: The protocol used for communication. Can be http or https\n          example: a string value\n          type: string\n      required:\n        - host\n        - scheme\n      type: object\n    U2FAdmin:\n      description: Administrator using FIDO U2F device to access Otoroshi\n      properties:\n        createdAt:\n          description: The creation date of the user\n          example: 123\n          format: int64\n          type: integer\n        label:\n          description: The label for the user\n          example: a string value\n          type: string\n        password:\n          description: The hashed password of the user\n          example: a string value\n          type: string\n        registration:\n          additionalProperties:\n            type: string\n          description: The U2F registration slug\n          example:\n            key: value\n          type: object\n        username:\n          description: The email address of the user\n          example: a string value\n          type: string\n      required:\n        - username\n        - label\n        - password\n        - createdAt\n        - registration\n      type: object\n    Webhook:\n      description: A callback URL where events are posted\n      properties:\n        headers:\n          additionalProperties:\n            type: string\n          description: Headers to authorize the call or whatever\n          example:\n            key: value\n          type: object\n        url:\n          description: The URL where events are posted\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - url\n        - headers\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/maif.local-otoroshi-1.1.2-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/maif.local-otoroshi-1.1.2-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}