{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MEF-GIT/MEF-LSO-Sonata-SDK"
		},
		"file": {
			"name": "troubleTicketManagement.api.yaml",
			"size": 0,
			"path": "productApi/troubleTicket/troubleTicketManagement.api.yaml",
			"byteSize": 108932,
			"content": "openapi: 3.0.1\ninfo:\n  description: |\n    **This file forms part of MEF W124**\n\n    This API implements Business Requirements described in MEF W113\n\n    **This specification represents MEF work in progress and is subject to\n    change.** \n\n    It allows the Buyer to create, retrieve, and update Trouble Tickets as well\n    as receive notifications about Incidents' and Trouble Tickets' updates.\n    This allows managing issues and situations that are not part of normal\n    operations of the Product provided by the Seller.\n\n    List of supported use cases:\n    - Create Ticket\n    - Retrieve Ticket List\n    - Retrieve Ticket by Ticket Identifier\n    - Patch Ticket by Ticket Identifier\n    - Cancel Ticket by Ticket Identifier\n    - Respond to Ticket Clearance Notification\n    - Retrieve Workorder by Workorder Identifier\n    - Retrieve Incident List\n    - Retrieve Incident by Incident Identifier\n    - Register for Event Notifications\n\n    Copyright 2021 MEF Forum and its contributors\n\n    This file includes content based on the TM Forum Trouble Ticket API (TMF621\n    v4.0.0) available at https://github.com/tmforum-apis/TMF621_TroubleTicket,\n    which is licensed by the TM Forum under the Apache License version 2.0.\n    Such content has been modified by the MEF Forum and its contributors.\n  title: Trouble Ticket Management\n  version: 2.0.0-RC\nservers:\n  - url: 'https://{serverBase}/mefApi/sonata/troubleTicket/v2/'\n    variables:\n      serverBase:\n        default: mef.net\n        description: The base of Seller's URL.\ntags:\n  - name: troubleTicket\n  - name: troubleTicket operations\n  - name: incident\n  - name: workOrder\n  - name: events subscription\npaths:\n  /troubleTicket:\n    get:\n      description: \u003e\n        The Buyer requests a list of Trouble Tickets from the Seller based on a\n        set of specified filter criteria. The Seller returns a summarized list\n        of Trouble Tickets.\n      operationId: listTroubleTicket\n      parameters:\n        - description: \u003e-\n            ID given by the consumer and only understandable by him (to\n            facilitate his searches afterward)\n          in: query\n          name: externalId\n          schema:\n            type: string\n        - description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Ticket should be resolved as evaluated\n            by the Buyer. The Priority is used by the Seller to determine the\n            order in which Tickets get resolved across Buyers.\n          in: query\n          name: priority\n          schema:\n            enum:\n              - low\n              - medium\n              - high\n              - critical\n            type: string\n        - description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Ticket should be resolved after\n            evaluation by the Seller of the impact of the Issue on the Buyer.\n          in: query\n          name: sellerPriority\n          schema:\n            enum:\n              - low\n              - medium\n              - high\n              - critical\n            type: string\n        - description: \u003e-\n            The severity or impact (ITIL) of the Ticket as evaluated by the\n            Buyer.\n          in: query\n          name: severity\n          schema:\n            enum:\n              - minor\n              - moderate\n              - significant\n              - extensive\n            type: string\n        - description: \u003e-\n            The severity or impact (ITIL) of the Ticket on the Buyer as\n            evaluated by the Seller.\n          in: query\n          name: sellerSeverity\n          schema:\n            enum:\n              - minor\n              - moderate\n              - significant\n              - extensive\n            type: string\n        - description:\n            The presumed cause of the Trouble Ticket as evaluated by the Buyer.\n          in: query\n          name: ticketType\n          schema:\n            enum:\n              - assistance\n              - information\n              - installation\n              - maintenance\n            type: string\n        - description: The current status of the Trouble Ticket\n          in: query\n          name: status\n          schema:\n            enum:\n              - acknowledged\n              - assessingCancellation\n              - cancelled\n              - closed\n              - inProgress\n              - pending\n              - resolved\n              - reopened\n            type: string\n        - description: \u003e-\n            ID of a related entity that this ticket is related to and is\n            present in the `relatedEntity` list\n          in: query\n          name: relatedEntityId\n          schema:\n            type: string\n        - description: \u003e-\n            Type of a related entity that this ticket is related to and is\n            present in the `relatedEntity` list\n          in: query\n          name: relatedEntityType\n          schema:\n            default: Product\n            type: string\n        - description:\n            The date on which the Trouble Ticket was created - greater than\n          in: query\n          name: creationDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description:\n            The date on which the Trouble Ticket was created - lower than\n          in: query\n          name: creationDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date provided by the Seller to indicate when the Ticket is\n            expected to be resolved - greater than\n          in: query\n          name: expectedResolutionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date provided by the Seller to indicate when the Ticket is\n            expected to be resolved - lower than\n          in: query\n          name: expectedResolutionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date the Ticket status was set to resolved by the Seller -\n            greater than\n          in: query\n          name: resolutionDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date the Ticket status was set to resolved by the Seller -\n            lower than\n          in: query\n          name: resolutionDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description:\n            Requested index for start of resources to be provided in response\n          in: query\n          name: offset\n          schema:\n            type: integer\n        - description: Requested number of resources to be provided in response\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/TroubleTicket_Find'\n                type: array\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching records. E.g. if there are 50\n                matching records in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of records included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: List or found Trouble Ticket objects\n      tags:\n        - troubleTicket\n    post:\n      description: \u003e-\n        A request initiated by the Buyer to create a Ticket in the Seller's\n        system to report an Issue experienced by the Buyer\n      operationId: createTroubleTicket\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/TroubleTicket_Create'\n        description: The TroubleTicket to be created\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/TroubleTicket'\n          description:\n            'Created  (https://tools.ietf.org/html/rfc7231#section-6.3.2)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Creates a TroubleTicket\n      tags:\n        - troubleTicket\n      x-codegen-request-body-name: troubleTicket\n  '/troubleTicket/{id}':\n    get:\n      description: \u003e-\n        The Buyer requests detailed information about a single Ticket based on\n        a Ticket Identifier.\n      operationId: retrieveTroubleTicket\n      parameters:\n        - description: Identifier of the TroubleTicket\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/TroubleTicket'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Retrieves a TroubleTicket by ID\n      tags:\n        - troubleTicket\n    patch:\n      description: \u003e-\n        A request by the Buyer to patch a Ticket created by the Buyer in the\n        Seller's system.\n      operationId: patchTroubleTicket\n      parameters:\n        - description: Identifier of the TroubleTicket\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/TroubleTicket_Update'\n        description: The TroubleTicket to be updated\n        required: true\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/TroubleTicket'\n          description: Updated\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '409':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error409'\n          description: Not Found\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Updates partially a TroubleTicket\n      tags:\n        - troubleTicket\n      x-codegen-request-body-name: troubleTicket\n  '/troubleTicket/{id}/cancel':\n    post:\n      description: This operation sends a cancellation request.\n      operationId: cancelTroubleTicket\n      parameters:\n        - description: Identifier of the TroubleTicket\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity\n             represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Cancelled\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Cancels a Trouble Ticket\n      tags:\n        - troubleTicket operations\n  '/troubleTicket/{id}/close':\n    post:\n      description:\n        This operation allows the Buyer to respond to Trouble Ticket\n        Clearance Notification by Closing it\n      operationId: closeTroubleTicket\n      parameters:\n        - description: Identifier of the TroubleTicket\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity\n             represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Closed\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Closes a Trouble Ticket\n      tags:\n        - troubleTicket operations\n  '/troubleTicket/{id}/reopen':\n    post:\n      description:\n        The operation allows the Buyer to respond to Trouble Ticket Clearance\n        Notification by reopening it\n      operationId: reopenTroubleTicket\n      parameters:\n        - description: Identifier of the TroubleTicket\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity\n             represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/Reason'\n        description:\n          Unstructured comment describing the reason the Buyer doesn't agree on\n          the resolution and needs the Trouble Ticket to be reopened. If the\n          Buyer wants this Closure Rejection Reason to be included in the\n          Trouble Ticket Notes for historical reasons, the Buyer needs to patch\n          the Trouble Ticket.\n        required: true\n      responses:\n        '204':\n          description: Reopened\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '422':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Error422'\n                type: array\n          description:\n            Unprocessable entity due to the business validation problems\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Reopens a Trouble Ticket\n      tags:\n        - troubleTicket operations\n      x-codegen-request-body-name: reason\n  /incident:\n    get:\n      description: \u003e\n        The Buyer requests a list of Incidents from the Seller based on a set\n        of specified filter criteria. The Seller returns a summarized list of\n        Incidents.\n      operationId: listIncident\n      parameters:\n        - description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Incident should be resolved after\n            evaluation by the Seller of the impact of the Incident.\n          in: query\n          name: priority\n          schema:\n            enum:\n              - low\n              - medium\n              - high\n              - critical\n            type: string\n        - description: \u003e-\n            The severity or impact (ITIL) of the Incident as evaluated by the\n            Seller.\n          in: query\n          name: severity\n          schema:\n            enum:\n              - minor\n              - moderate\n              - significant\n              - extensive\n            type: string\n        - description:\n            The presumed cause of the Incident as evaluated by the Seller.\n          in: query\n          name: incidentType\n          schema:\n            enum:\n              - degraded\n              - down\n              - intermittent\n              - maintenance\n            type: string\n        - description: The current status of the Incident\n          in: query\n          name: status\n          schema:\n            enum:\n              - closed\n              - created\n              - inProgress\n            type: string\n        - description: \u003e-\n            ID of a related entity that this Incident is related to and is\n            present in the `relatedEntity` list\n          in: query\n          name: relatedEntityId\n          schema:\n            type: string\n        - description: \u003e-\n            Type of a related entity that this Incident is related to and is\n            present in the `relatedEntity` list\n          in: query\n          name: relatedEntityType\n          schema:\n            default: Product\n            type: string\n        - description:\n            The date on which the Incident was created - greater than\n          in: query\n          name: creationDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description:\n            The date on which the Trouble Ticket was created - lower than\n          in: query\n          name: creationDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description:\n            The date when the Incident was first identified, for example via\n            error logs - greater than\n          in: query\n          name: issueStartDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description:\n            The date when the Incident was first identified, for example via\n            error logs - lower than\n          in: query\n          name: issueStartDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date provided by the Seller to indicate when the Incident is\n            expected to be closed - greater than\n          in: query\n          name: expectedClosedDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date provided by the Seller to indicate when the Incident is\n            expected to be closed - lower than\n          in: query\n          name: expectedClosedDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date the Incident status was set to closed by the Seller -\n            greater than\n          in: query\n          name: closedDate.gt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The date the Incident status was set to closed by the Seller -\n            lower than\n          in: query\n          name: closedDate.lt\n          schema:\n            format: date-time\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n        - description:\n            Requested index for start of resources to be provided in response\n          in: query\n          name: offset\n          schema:\n            type: integer\n        - description: Requested number of resources to be provided in response\n          in: query\n          name: limit\n          schema:\n            format: int32\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Incident_Find'\n                type: array\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n          headers:\n            X-Pagination-Throttled:\n              description: \u003e\n                Used to indicate that result page was throttled to maximum\n                possible size  and there are additional results that can be\n                fetched\n              schema:\n                type: boolean\n            X-Total-Count:\n              description: \u003e\n                The total number of matching records. E.g. if there are 50\n                matching records in total, but the request has offset=10 and\n                limit=10, then the X-Total-Count is 50.\n              schema:\n                type: integer\n            X-Result-Count:\n              description: The number of records included in the response\n              schema:\n                type: integer\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: \u003e-\n            Method not implemented. Used in case Seller is not supporting\n            Notification mechanism\n      summary: List or found Incident objects\n      tags:\n        - incident\n  '/incident/{id}':\n    get:\n      description: \u003e-\n        The Buyer requests detailed information about a single Incident based\n        on a Incident Identifier.\n      operationId: retrieveIncident\n      parameters:\n        - description: Identifier of the Incident\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Incident'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n        '501':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error501'\n          description: \u003e-\n            Method not implemented. Used in case Seller is not supporting\n            Notification mechanism\n      summary: Retrieves ac Incident by ID\n      tags:\n        - incident\n  '/workOrder/{id}':\n    get:\n      description: \u003e-\n        The Buyer requests detailed information about a single WorkOrder based\n        on a WorkOrder Identifier.\n      operationId: retrieveWorkOrder\n      parameters:\n        - description: Identifier of the WorkOrder\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/WorkOrder'\n          description:\n            'OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Retrieves a WorkOrder by ID\n      tags:\n        - workOrder\n  /hub:\n    post:\n      description: The Buyer requests to subscribe to Ticket Notifications.\n      operationId: registerListener\n      parameters:\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json;charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/EventSubscriptionInput'\n        description:\n          Data containing the callback endpoint to deliver the information\n        required: true\n      responses:\n        '201':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/EventSubscription'\n          description:\n            'Subscribed  (https://tools.ietf.org/html/rfc7231#section-6.3.2)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad Request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: \u003e-\n        Allows the Buyer to register to Trouble Ticket state change\n        notifications\n      tags:\n        - events subscription\n      x-codegen-request-body-name: data\n  '/hub/{id}':\n    delete:\n      description: The Buyer requests to unsubscribe from Ticket Notifications\n      operationId: unregisterListener\n      parameters:\n        - description: The id of the EventSubscription\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the a\n            Buyer. MUST be specified in the request only when the requester\n            represents more than one Buyer.\n          in: query\n          name: buyerId\n          schema:\n            type: string\n        - description: \u003e-\n            The unique identifier of the organization that is acting as the\n            Seller. MUST be specified in the request only when responding\n            entity represents more than one Seller.\n          in: query\n          name: sellerId\n          schema:\n            type: string\n      responses:\n        '204':\n          description:\n            'Deleted (https://tools.ietf.org/html/rfc7231#section-6.3.5)'\n        '400':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error400'\n          description: Bad request\n        '401':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error401'\n          description: Unauthorized\n        '403':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error403'\n          description: Forbidden\n        '404':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error404'\n          description: Not Found\n        '500':\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Error500'\n          description: Internal Server Error\n      summary: Unregister a listener\n      tags:\n        - events subscription\ncomponents:\n  schemas:\n    AppointmentRef:\n      description: \u003e\n        A reference to an Appointment resource available through Appointment\n        API.\n      properties:\n        href:\n          description: \u003e\n            Hyperlink to the referenced Appointment. Hyperlink MAY be used by\n            the Seller in responses. Hyperlink MUST be ignored by the Seller in\n            case it is provided by the Buyer in a request\n          type: string\n        id:\n          description: Identifier of the referenced Appointment.\n          type: string\n      required:\n        - id\n      type: object\n    AttachmentValue:\n      description: \u003e-\n        Complements the description of an element (for instance a product)\n        through video, pictures...\n      properties:\n        attachmentId:\n          description: \u003e-\n            locally unique identifier to distinguish items from the Attachment\n            list.\n          type: string\n        author:\n          description: Author of the Attachment\n          type: string\n        content:\n          description: \u003e-\n            The actual contents of the attachment object, if embedded, encoded\n            as base64. Either url or (content and mimeType) attributes MUST be\n            provided during creation.\n          type: string\n        creationDate:\n          description: The date the Attachment was added.\n          format: date-time\n          type: string\n        description:\n          description:\n            A narrative text describing the content of the attachment\n          type: string\n        mimeType:\n          description: \u003e-\n            Attachment mime type such as extension file for video, picture and\n            document\n          type: string\n        name:\n          description: The name of the attachment\n          type: string\n        size:\n          $ref: '#/components/schemas/MEFByteSize'\n          description: The size of the attachment.\n        source:\n          $ref: '#/components/schemas/MEFBuyerSellerType'\n          description:\n            Indicates if the attachment was added by the Buyer or the Seller.\n        url:\n          description:\n            URL where the attachment is located. Either url or (content and\n            mimeType) attributes MUST be provided during creation.\n          type: string\n      type: object\n      required:\n        - author\n        - name\n        - source\n    DataSizeUnit:\n      description: The unit of measure in the data size.\n      enum:\n        - BYTES\n        - KBYTES\n        - MBYTES\n        - GBYTES\n        - TBYTES\n        - PBYTES\n        - EBYTES\n        - ZBYTES\n        - YBYTES\n      type: string\n    Error:\n      description: \u003e\n        Standard Class used to describe API response error\n\n        Not intended to be use directly only via specialization which defines a\n        code\n      properties:\n        message:\n          description: \u003e-\n            Text that provides mode details and corrective actions related to\n            the error. This can be shown to a client user.\n          type: string\n        reason:\n          description: \u003e-\n            Text that explains the reason for error. This can be shown to a\n            client user.\n          maxLength: 255\n          type: string\n        referenceError:\n          description: URL pointing to documentation describing the error\n          format: uri\n          type: string\n      required:\n        - reason\n      type: object\n    Error400:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error400Code'\n              description: \u003e-\n                One of the following error codes:\n\n                - missingQueryParameter: The URI is missing a required\n                query-string parameter\n\n                - missingQueryValue: The URI is missing a required query-string\n                parameter value\n\n                - invalidQuery: The query section of the URI is invalid.\n\n                - invalidBody: The request has an invalid body\n          required:\n            - code\n          type: object\n      description:\n        Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)\n    Error400Code:\n      description: \u003e-\n        One of the following error codes:\n\n        - missingQueryParameter: The URI is missing a required query-string\n        parameter\n\n        - missingQueryValue: The URI is missing a required query-string\n        parameter value\n\n        - invalidQuery: The query section of the URI is invalid.\n\n        - invalidBody: The request has an invalid body\n      enum:\n        - missingQueryParameter\n        - missingQueryValue\n        - invalidQuery\n        - invalidBody\n      type: string\n    Error401:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error401Code'\n              description: \u003e-\n                One of the following error codes:\n\n                - missingCredentials: No credentials provided.\n\n                - invalidCredentials: Provided credentials are invalid or\n                expired\n          required:\n            - code\n          type: object\n      description:\n        Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)\n    Error401Code:\n      description: |-\n        One of the following error codes:\n        - missingCredentials: No credentials provided.\n        - invalidCredentials: Provided credentials are invalid or expired\n      enum:\n        - missingCredentials\n        - invalidCredentials\n      type: string\n    Error403:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error403Code'\n              description: |-\n                This code indicates that the server understood\n                the request but refuses to authorize it because\n                of one of the following error codes:\n                - accessDenied: Access denied\n                - forbiddenRequester: Forbidden requester\n                - tooManyUsers: Too many users\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Forbidden. This code indicates that the server understood the request\n        but refuses to authorize it.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.3)\n    Error403Code:\n      description: |-\n        This code indicates that the server understood\n        the request but refuses to authorize it because\n        of one of the following error codes:\n        - accessDenied: Access denied\n        - forbiddenRequester: Forbidden requester\n        - tooManyUsers: Too many users\n      enum:\n        - accessDenied\n        - forbiddenRequester\n        - tooManyUsers\n      type: string\n    Error404:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - notFound: A current representation for the target resource\n                not found\n              enum:\n                - notFound\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Resource for the requested path not found.\n        (https://tools.ietf.org/html/rfc7231#section-6.5.4)\n    Error409:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - conflict: The client has provided a value whose semantics are\n                not appropriate for the property.\n              enum:\n                - conflict\n              type: string\n          required:\n            - code\n          type: object\n      description:\n        Conflict (https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.8)\n    Error422:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              $ref: '#/components/schemas/Error422Code'\n              description: |\n                One of the following error codes:\n                  - missingProperty: The property the Seller has expected is not present in the payload\n                  - invalidValue: The property has an incorrect value\n                  - invalidFormat: The property value does not comply with the expected value format\n                  - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n                  - unexpectedProperty: Additional property, not expected by the Seller has been provided\n                  - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n                  - otherIssue: Other problem was identified (detailed information provided in a reason)\n            propertyPath:\n              description: \u003e\n                A pointer to a particular property of the payload that caused\n                the validation issue. It is highly recommended that this\n                property should be used.\n\n                Defined using JavaScript Object Notation (JSON) Pointer\n                (https://tools.ietf.org/html/rfc6901).\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Unprocessable entity due to a business validation problem.\n        (https://tools.ietf.org/html/rfc4918#section-11.2)\n    Error422Code:\n      description: |\n        One of the following error codes:\n          - missingProperty: The property the Seller has expected is not present in the payload\n          - invalidValue: The property has an incorrect value\n          - invalidFormat: The property value does not comply with the expected value format\n          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system\n          - unexpectedProperty: Additional property, not expected by the Seller has been provided\n          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.\n          - otherIssue: Other problem was identified (detailed information provided in a reason)\n      enum:\n        - missingProperty\n        - invalidValue\n        - invalidFormat\n        - referenceNotFound\n        - unexpectedProperty\n        - tooManyRecords\n        - otherIssue\n      type: string\n    Error500:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: \u003e-\n                The following error code:\n\n                - internalError: Internal server error - the server encountered\n                an unexpected condition that prevented it from fulfilling the\n                request.\n              enum:\n                - internalError\n              type: string\n          required:\n            - code\n          type: object\n      description: \u003e-\n        Internal Server Error.\n        (https://tools.ietf.org/html/rfc7231#section-6.6.1)\n    Error501:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - properties:\n            code:\n              description: |-\n                The following error code::\n                - notImplemented: Method not supported by the server\n              enum:\n                - notImplemented\n              type: string\n          required:\n            - code\n          type: object\n      description:\n        'Not Implemented. (https://tools.ietf.org/html/rfc7231#section-6.6.2)'\n    EventSubscription:\n      description: \u003e-\n        Sets the communication endpoint address the service instance must use\n        to deliver notification information\n      properties:\n        callback:\n          description: \u003e-\n            The value provided by the Buyer in `EventSubscriptionInput` during\n            notification registration\n          type: string\n        id:\n          description: \u003e-\n            An identifier of the event subscription assigned by the Seller when\n            a resource is created.\n          type: string\n        query:\n          description: \u003e-\n            This attribute is used to define notification registration\n            constraints.\n          type: string\n      required:\n        - callback\n        - id\n      type: object\n    EventSubscriptionInput:\n      description: This class is used to register for Notifications.\n      properties:\n        callback:\n          description: \u003e-\n            This callback value must be set to *host* property from Buyer\n            Notification API (troubleTicketNotification.api.yaml). This\n            property is appended with the base path and notification resource\n            path specified in that API to construct an URL to which\n            notification is sent. E.g. for \"callback\":\n            \"http://buyer.com/listenerEndpoint\", the state change event\n            notification will be sent to:\n            `http://buyer.com/listenerEndpoint/mefApi/sonata/troubleTicketNotification/v2/listener/troubleTicketStatusChangeEvent`\n          type: string\n        query:\n          description: \u003e-\n            This attribute is used to define to which type of events to\n            register to. Example: \"query\":\"eventType =\n            troubleTicketStatusChangeEvent\". To subscribe for more than one\n            event type, put the values separated by comma:\n            `eventType=troubleTicketStatusChangeEvent,troubleTicketResolvedEvent`.\n            The possible values are enumerated by the 'TroubleTicketEventType'\n            in troubleTicketNotification.api.yaml. An empty query is treated as\n            specifying no filters - ending in  subscription for all event\n            types.\n          type: string\n      required:\n        - callback\n      type: object\n    FieldedAddress:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            city:\n              description: The city that the address is in\n              type: string\n            country:\n              description: Country that the address is in\n              type: string\n            geographicSubAddress:\n              $ref: '#/components/schemas/GeographicSubAddress'\n              description:\n                Additional fields used to specify an address, as detailed as\n                possible.\n            locality:\n              description: The locality that the address is in\n              type: string\n            postcode:\n              description: \u003e-\n                Descriptor for a postal delivery area, used to speed and\n                simplify the delivery of mail (also known as zip code)\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in a US urban property address\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n            streetName:\n              description: Name of the street or other street type\n              type: string\n            streetNr:\n              description: \u003e-\n                Number identifying a specific property on a public street. It\n                may be combined with streetNrLast for ranged addresses. MEF 79\n                defines it as required however as in certain countries it is\n                not used we make it optional in API.\n              type: string\n            streetNrLast:\n              description:\n                Last number in a range of street numbers allocated to a\n                property\n              type: string\n            streetNrLastSuffix:\n              description: Last street number suffix for a ranged address\n              type: string\n            streetNrSuffix:\n              description: The first street number suffix\n              type: string\n            streetSuffix:\n              description: A modifier denoting a relative direction\n              type: string\n            streetType:\n              description: \u003e-\n                The type of street (e.g., alley, avenue, boulevard, brae,\n                crescent, drive, highway, lane, terrace, parade, place, tarn,\n                way, wharf)\n              type: string\n          required:\n            - city\n            - country\n            - streetName\n          type: object\n      description: \u003e-\n        A type of Address that has a discrete field and value for each type of\n        boundary or identifier down to the lowest level of detail. For example\n        \"street number\" is one field, \"street name\" is another field, etc.\n        Reference: MEF 79 (Sn 8.9.2)\n    FormattedAddress:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            addrLine1:\n              description: The first address line in a formatted address\n              type: string\n            addrLine2:\n              description: The second address line in a formatted address\n              type: string\n            city:\n              description: The city that the address is in\n              type: string\n            country:\n              description: Country that the address is in\n              type: string\n            locality:\n              description: \u003e-\n                An area of defined or undefined boundaries within a local\n                authority or other legislatively defined area, usually rural or\n                semi-rural in nature\n              type: string\n            postcode:\n              description: \u003e-\n                Descriptor for a postal delivery area, used to speed and\n                simplify the delivery of mail (also known as ZIP code)\n              type: string\n            postcodeExtension:\n              description: \u003e-\n                An extension of a postal code. E.g. the part following the dash\n                in an US urban property address\n              type: string\n            stateOrProvince:\n              description: The State or Province that the address is in\n              type: string\n          required:\n            - addrLine1\n            - city\n            - country\n          type: object\n      description: \u003e-\n        A type of Address that has discrete fields for each type of boundary or\n        identifier with the exception of street and more specific location\n        details, which are combined into a maximum of two strings based on\n        local postal addressing conventions. Reference: MEF 79 (Sn 8.9.3)\n    GeographicAddressLabel:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            externalReferenceId:\n              description: A reference to an address by id\n              type: string\n            externalReferenceType:\n              description: \u003e-\n                Uniquely identifies the authority that specifies the addresses\n                reference and/or its type (if the authority specifies more than\n                one type of address). The value(s) to be used are to be agreed\n                during the onboarding. For North American providers this would\n                normally be CLLI (Common Language Location Identifier) code.\n              type: string\n          required:\n            - externalReferenceId\n            - externalReferenceType\n          type: object\n      description: \u003e-\n        A unique identifier controlled by a generally accepted independent\n        administrative authority that specifies a fixed geographical location. \n\n        Reference: MEF 79 (Sn 8.9.4)\n    GeographicAddressRef:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            href:\n              description: \u003e\n                Hyperlink to the referenced GeographicAddress. Hyperlink MAY be\n                used by the Seller in responses. Hyperlink MUST be ignored by\n                the Seller in case it is provided by the Buyer in a request\n              type: string\n            id:\n              description: \u003e-\n                Identifier of the referenced Geographic Address. This\n                identifier is assigned during a successful address validation\n                request (Geographic Address Validation API)\n              type: string\n          required:\n            - id\n          type: object\n      description: \u003e\n        A reference to a Geographic Address resource available through Address\n        Validation API.\n    GeographicSiteRef:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            href:\n              description: \u003e\n                Hyperlink to the referenced GeographicSite. Hyperlink MAY be\n                used by the Seller in responses. Hyperlink MUST be ignored by\n                the Seller in case it is provided by the Buyer in a request\n              type: string\n            id:\n              description: Identifier of the referenced Geographic Site.\n              type: string\n          required:\n            - id\n          type: object\n      description: \u003e\n        A reference to a Geographic Site resource available through Service\n        Site API\n    GeographicSubAddress:\n      description:\n        Additional fields used to specify an address, as detailed as possible.\n      properties:\n        buildingName:\n          description: \u003e\n            Allows for identification of places that require building name  as\n            part of addressing information\n          type: string\n        id:\n          description: Unique Identifier of the subAddress\n          type: string\n        levelNumber:\n          description:\n            Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2\n          type: string\n        levelType:\n          description: Describes level types within a building\n          type: string\n        privateStreetName:\n          description: \u003e-\n            \"Private streets internal to a property (e.g. a university) may\n            have internal names that are not recorded by the land title office\n          type: string\n        privateStreetNumber:\n          description: Private streets numbers internal to a private street\n          type: string\n        subUnit:\n          description: \u003e-\n            Representation of a MEFSubUnit It is used for describing subunit\n            within a subaddress  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          items:\n            $ref: '#/components/schemas/MEFSubUnit'\n          type: array\n      type: object\n    Incident:\n      description: \u003e\n        An Incident is a record of an issue that is not part of normal\n        operation in the Seller's network that has a possible negative impact\n        on the operability of the network on one or more Buyers.\n      properties:\n        attachment:\n          description: \u003e-\n            Attachments to the Ticket, such as a file, screenshot, or embedded\n            content. Attachments may be added but may not be modified or\n            deleted (for historical reasons).\n          items:\n            $ref: '#/components/schemas/AttachmentValue'\n          type: array\n        closedDate:\n          description:\n            The date the Incident status was set to closed by the Seller\n          format: date-time\n          type: string\n        creationDate:\n          description: The date on which the Incident was created\n          format: date-time\n          type: string\n        description:\n          description: Description of the Incident\n          type: string\n        expectedClosedDate:\n          description: \u003e-\n            The date provided by the Seller to indicate when the Incident is\n            expected to be closed.\n          format: date-time\n          type: string\n        href:\n          description: Hyperlink, a reference to the Incident entity\n          type: string\n        id:\n          description:\n            Unique (within the Seller domain) identifier for the Incident.\n          type: string\n        incidentType:\n          $ref: '#/components/schemas/IncidentType'\n          description:\n            The presumed cause of the Incident as evaluated by the Seller.\n        issueStartDate:\n          description: \u003e-\n            The date when the Incident was first identified, for example via\n            error logs.\n          format: date-time\n          type: string\n        note:\n          description: \u003e-\n            A set of unstructured comments or information associated to the\n            Incident. Notes may be added but may not be modified or deleted\n            (for historical reasons).\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        priority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Incident should be resolved after\n            evaluation by the Seller of the impact of the Incident.\n        relatedContactInformation:\n          description: \u003e-\n            Party playing a role in this Incident.\n\n            The 'role' is to specify the type of contact as specified in MEF\n            113:\n\n            Incident Contact ('role=incidentContact') - REQUIRED to be set by\n            the Seller\n\n            Incident Technical Contact ('role=incidentTechnicalContact')\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n        relatedEntity:\n          description: \u003e-\n            An entity that is related to the Incident such as a service, a\n            product, etc. The entity which the Incident is associated with.\n          items:\n            $ref: '#/components/schemas/RelatedEntity'\n          minItems: 1\n          type: array\n        relatedIssue:\n          description: \u003e-\n            A list of Related Issue relationships. Represents relationships to\n            other Trouble Tickets and Incidents.\n          items:\n            $ref: '#/components/schemas/IssueRelationship'\n          type: array\n        severity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity or impact (ITIL) of the Incident as evaluated by the\n            Seller.\n        status:\n          $ref: '#/components/schemas/IncidentStatusType'\n          description: The current status of the Incident\n        statusChange:\n          description: \u003e-\n            The status change history that is associated to the Incident.\n            Populated by the Seller.\n          items:\n            $ref: '#/components/schemas/IncidentStatusChange'\n          type: array\n      required:\n        - id\n        - creationDate\n        - status\n        - description\n        - priority\n        - relatedContactInformation\n        - relatedEntity\n        - severity\n        - incidentType\n      type: object\n    IncidentStatusChange:\n      description: \u003e-\n        Holds the status notification reasons and associated date the status\n        changed, populated by the server\n      properties:\n        changeDate:\n          description: The date and time the status changed.\n          format: date-time\n          type: string\n        changeReason:\n          description: The reason why the status changed.\n          type: string\n        status:\n          $ref: '#/components/schemas/IncidentStatusType'\n          description: Reached state\n      type: object\n    IncidentStatusType:\n      description: |\n        Possible values for the status of the Incident\n\n        | status       | MEF 113 name | Description                                                                                 |\n        | ------------ | ------------ | ------------------------------------------------------------------------------------------- |\n        | `closed`     | CLOSED       | The Situation described in the Incident was closed by the Seller. This is a terminal state. |\n        | `created`    | CREATED      | A new Incident has been created and allocated a unique `id`.                                |\n        | `inProgress` | IN_PROGRESS  | The Incident is in the process of being handled by the Seller.                              |\n      enum:\n        - closed\n        - created\n        - inProgress\n      type: string\n    IncidentType:\n      description: \u003e\n        Possible values for the type of the Incident:\n\n        - maintenance: Any scheduled or non-scheduled maintenance related\n        Incident.\n\n        - degraded: When the Product is impacted and not meeting the Product\n        specifications.\n\n        - intermittent: When the Product is not operational as intended on an\n        intermittent basis\n\n        - down: When the Product is non-operational.\n      enum:\n        - degraded\n        - down\n        - intermittent\n        - maintenance\n      type: string\n    Incident_Find:\n      description: \u003e\n        This class represents a single list item for the response of\n        `listIncident` operation.\n      properties:\n        closedDate:\n          description:\n            The date the Incident status was set to closed by the Seller\n          format: date-time\n          type: string\n        creationDate:\n          description: The date on which the Incident was created\n          format: date-time\n          type: string\n        description:\n          description: Description of the Incident\n          type: string\n        expectedClosedDate:\n          description: \u003e-\n            The date provided by the Seller to indicate when the Incident is\n            expected to be closed.\n          format: date-time\n          type: string\n        href:\n          description: Hyperlink, a reference to the Incident entity\n          type: string\n        id:\n          description:\n            Unique (within the Seller domain) identifier for the Incident.\n          type: string\n        incidentType:\n          $ref: '#/components/schemas/IncidentType'\n          description:\n            The presumed cause of the Incident as evaluated by the Seller.\n        issueStartDate:\n          description: \u003e-\n            The date when the Incident was first identified, for example via\n            error logs.\n          format: date-time\n          type: string\n        priority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Incident should be resolved after\n            evaluation by the Seller of the impact of the Incident.\n        relatedEntity:\n          description: \u003e-\n            An entity that is related to the Incident such as a service, a\n            product, etc. The entity which the Incident is associated with.\n          items:\n            $ref: '#/components/schemas/RelatedEntity'\n          minItems: 1\n          type: array\n        severity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity or impact (ITIL) of the Incident as evaluated by the\n            Seller.\n        status:\n          $ref: '#/components/schemas/IncidentStatusType'\n          description: The current status of the Incident\n      required:\n        - id\n        - creationDate\n        - status\n        - description\n        - priority\n        - relatedEntity\n        - severity\n        - incidentType\n      type: object\n    MEFBuyerSellerType:\n      description: An enumeration with buyer and seller values.\n      enum:\n        - buyer\n        - seller\n      type: string\n    MEFByteSize:\n      description: A size represented by value and Byte units\n      properties:\n        amount:\n          default: 1\n          description: Numeric value in a given unit\n          format: float\n          type: number\n        units:\n          $ref: '#/components/schemas/DataSizeUnit'\n          description: Byte Unit\n      type: object\n    MEFGeographicPoint:\n      allOf:\n        - $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n        - properties:\n            spatialRef:\n              description: \u003e-\n                The spatial reference system used to determine the coordinates\n                (e.g. \"WGS84\"). The system used and the value of this field are\n                to be agreed upon during the onboarding process.\n              type: string\n            x:\n              description: \u003e-\n                The latitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            'y':\n              description: \u003e-\n                The longitude expressed in the format specified by the\n                `spacialRef`\n              type: string\n            z:\n              description: \u003e-\n                The elevation expressed in the format specified by the\n                `spacialRef`\n              type: string\n          required:\n            - spatialRef\n            - x\n            - 'y'\n          type: object\n      description: \u003e\n        A MEFGeographicPoint defines a geographic point through coordinates.\n        Reference: MEF 79 (Sn 8.9.5)\n    MEFObservedImpactType:\n      description: \u003e-\n        An enumeration of the possible values of impact observed by the Buyer.\n\n        - degraded: When the Product is impacted and not meeting the Product\n        specifications.\n\n        - intermittent: When the Product is not operational as intended on an\n        intermittent basis.\n\n        - down: When the Product is non-operational.\n      enum:\n        - degraded\n        - intermittent\n        - down\n      type: string\n    MEFSubUnit:\n      description: Allows for sub unit identification\n      properties:\n        subUnitNumber:\n          description: \u003e-\n            The discriminator used for the subunit, often just a simple number\n            but may also be a range.\n          type: string\n        subUnitType:\n          description: \u003e-\n            The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\n            UNIT, WHARF.\n          type: string\n      required:\n        - subUnitNumber\n        - subUnitType\n      type: object\n    Note:\n      description: \u003e-\n        Extra information about a given entity. Only useful in processes\n        involving human interaction. Not applicable for an automated process.\n      properties:\n        author:\n          description: Author of the note\n          type: string\n        date:\n          description: Date of the note\n          format: date-time\n          type: string\n        id:\n          description: \u003e-\n            Identifier of the note within its containing entity (may or may not\n            be globally unique, depending on provider implementation)\n          type: string\n        source:\n          $ref: '#/components/schemas/MEFBuyerSellerType'\n          description: Indicates if this Note was added by the Buyer or Seller.\n        text:\n          description: Text of the note\n          type: string\n      required:\n        - author\n        - date\n        - id\n        - source\n        - text\n      type: object\n    Reason:\n      description: An object to convey a reason for the operation.\n      properties:\n        reason:\n          description: A text description of why given operation was requested.\n          type: string\n      required:\n        - reason\n      type: object\n    RelatedContactInformation:\n      description: \u003e-\n        Contact data for a person or organization that is involved in a given\n        context. It is specified by the Seller (e.g. Seller Contact\n        Information) or by the Buyer.\n      properties:\n        emailAddress:\n          description: Email address\n          type: string\n        name:\n          description: Name of the contact\n          type: string\n        number:\n          description: Phone number\n          type: string\n        numberExtension:\n          description: Phone number extension\n          type: string\n        organization:\n          description: The organization or company that the contact belongs to\n          type: string\n        postalAddress:\n          $ref: '#/components/schemas/FieldedAddress'\n          description: \u003e-\n            Identifies the postal address of the person or office to be\n            contacted.\n        role:\n          description: A role the party plays in a given context.\n          type: string\n      required:\n        - emailAddress\n        - name\n        - number\n        - role\n      type: object\n    RelatedEntity:\n      description: \u003e-\n        A reference to an entity, where the type of the entity is not known in\n        advance.\n      properties:\n        '@referredType':\n          default: Product\n          description: \u003e-\n            The actual type of the target instance when needed for\n            disambiguation.\n          type: string\n        href:\n          description: Reference of the related entity.\n          type: string\n        id:\n          description: Unique identifier of a related entity.\n          type: string\n        role:\n          description: The role of an entity.\n          type: string\n      required:\n        - '@referredType'\n        - id\n        - role\n      type: object\n    IssueRelationship:\n      description:\n        Represents relationships to other Trouble Tickets and Incidents\n      properties:\n        '@referredType':\n          description: \u003e-\n            The actual type of the target instance when needed for\n            disambiguation (Incident or TroubleTicket)\n          type: string\n        creationDate:\n          description: The date the Relationship was created\n          format: date-time\n          type: string\n        description:\n          description: A description of the reason for the Relationship\n          type: string\n        href:\n          description: Reference of the Trouble Ticket or Incident\n          type: string\n        id:\n          description: \u003e-\n            Unique identifier of the referenced Issue (Trouble Ticket od\n            Incident)\n          type: string\n        relationshipType:\n          description: \u003e-\n            Type of the Trouble Ticket relationship can be blocks, depends on,\n            duplicates, causes, etc...\n          type: string\n        source:\n          $ref: '#/components/schemas/MEFBuyerSellerType'\n          description:\n            Indicates if this Related Issue was added by the Buyer or the\n            Seller.\n      type: object\n      required:\n        - '@referredType'\n        - id\n        - creationDate\n        - description\n        - relationshipType\n        - source\n    RelatedPlaceRefOrValue:\n      description:\n        Defines the Place (Address or Site) by reference or by value.\n      discriminator:\n        mapping:\n          FieldedAddress: '#/components/schemas/FieldedAddress'\n          FormattedAddress: '#/components/schemas/FormattedAddress'\n          GeographicAddressLabel: '#/components/schemas/GeographicAddressLabel'\n          GeographicAddressRef: '#/components/schemas/GeographicAddressRef'\n          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'\n          MEFGeographicPoint: '#/components/schemas/MEFGeographicPoint'\n        propertyName: '@type'\n      properties:\n        '@schemaLocation':\n          description: \u003e-\n            A URI to a JSON-Schema file that defines additional attributes and\n            relationships. May be used to define additional related place\n            types. Usage of this attribute must be agreed upon between Buyer\n            and Seller.\n          format: uri\n          type: string\n        '@type':\n          description: \u003e\n            This field is used as a discriminator and is used between different\n            place representations. This type might discriminate for additional\n            related place as defined in '@schemaLocation'.\n          type: string\n        role:\n          description: Role of this place\n          type: string\n      required:\n        - '@type'\n        - role\n      type: object\n    TroubleTicket:\n      allOf:\n        - $ref: '#/components/schemas/TroubleTicket_Common'\n        - description: \u003e-\n            A Trouble Ticket is a record of an issue that is created, tracked,\n            and managed by a Trouble Ticket management system\n          properties:\n            creationDate:\n              description: The date on which the Trouble Ticket was created\n              format: date-time\n              type: string\n            expectedResolutionDate:\n              description: \u003e-\n                The date provided by the Seller to indicate when the Ticket is\n                expected to be resolved\n              format: date-time\n              type: string\n            href:\n              description: Hyperlink, a reference to the Trouble Ticket entity\n              type: string\n            id:\n              description: \u003e-\n                Unique (within the Seller Ticket domain) identifier for the\n                Ticket.\n              type: string\n            resolutionDate:\n              description:\n                The date the Ticket status was set to resolved by the Seller\n              format: date-time\n              type: string\n            sellerPriority:\n              $ref: '#/components/schemas/TroubleTicketPriorityType'\n              description: \u003e-\n                The priority (ITIL) is based on the assessment of the impact\n                and urgency of how quickly the Ticket should be resolved after\n                evaluation by the Seller of the impact of the Issue on the\n                Buyer.\n            sellerSeverity:\n              $ref: '#/components/schemas/TroubleTicketSeverityType'\n              description: \u003e-\n                The severity or impact (ITIL) of the Ticket on the Buyer as\n                evaluated by the Seller.\n            status:\n              $ref: '#/components/schemas/TroubleTicketStatusType'\n              description: The current status of the Trouble Ticket\n            statusChange:\n              description: \u003e-\n                The status change history that is associated to the ticket.\n                Populated by the Seller.\n              items:\n                $ref: '#/components/schemas/TroubleTicketStatusChange'\n              type: array\n            workOrder:\n              description: \u003e-\n                A reference to a set of WorkOrders to be performed under the\n                responsibility of Seller technician(s) to resolve the Ticket.\n              items:\n                $ref: '#/components/schemas/WorkOrderRef'\n              type: array\n          required:\n            - creationDate\n            - id\n            - sellerPriority\n            - sellerSeverity\n            - status\n          type: object\n    TroubleTicketPriorityType:\n      description: Possible values for the priority of the Trouble Ticket\n      enum:\n        - low\n        - medium\n        - high\n        - critical\n      type: string\n    TroubleTicketSeverityType:\n      description: Possible values for the severity of the Trouble Ticket\n      enum:\n        - minor\n        - moderate\n        - significant\n        - extensive\n      type: string\n    TroubleTicketStatusChange:\n      description: \u003e-\n        Holds the status notification reasons and associated date the status\n        changed, populated by the server\n      properties:\n        changeDate:\n          description: The date and time the status changed.\n          format: date-time\n          type: string\n        changeReason:\n          description: The reason why the status changed.\n          type: string\n        status:\n          $ref: '#/components/schemas/TroubleTicketStatusType'\n          description: Reached state\n      type: object\n    TroubleTicketStatusType:\n      description: |\n        Possible values for the status of the Trouble Ticket\n\n        | status                  | MEF 113 name           | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n        | ----------------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n        | `acknowledged`          | ACKNOWLEDGED           | A request to create a Ticket was received and accepted by the Seller. The Ticket has been validated and created by the Seller and allocated a unique `id`.                                                                                                                                                                                                                                                                                                                                                                |\n        | `assessingCancellation` | ASSESSING_CANCELLATION | A request has been made by the Buyer to cancel the Ticket and is being assessed by the Seller to determine whether to just close the Ticket, or may also choose to resolve the Issue to prevent similar Create Ticket requests from other Buyers. If the Seller chooses to resolve the Issue, the Seller might create an Incident or an internal Ticket for the Issue, but that is outside the scope of this document. After the Seller has completed the assessment, the Seller updates the Ticket State to `cancelled`. |\n        | `cancelled`             | CANCELLED              | The Ticket has been successfully cancelled by the Buyer. This is a terminal state.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n        | `closed`                | CLOSED                 | The Buyer that created the Ticket has confirmed that the Issue they reported is no longer observed, or the pre-defined time frame (agreed upon between Buyer and Seller) for confirming that the Issue has been resolved has passed without a response by the Buyer. This is a terminal state.                                                                                                                                                                                                                            |\n        | `inProgress`            | IN_PROGRESS            | The Ticket is in the process of being handled and investigated for resolution by the Seller.                                                                                                                                                                                                                                                                                                                                                                                                                              |\n        | `pending`               | PENDING                | The Seller is waiting on additional information in order to continue the handling of the Ticket. This may result in the clock being stopped for the service level agreement until the Buyer has responded to the request.                                                                                                                                                                                                                                                                                                 |\n        | `resolved`              | RESOLVED               | The Buyer's Issue described in the Ticket was resolved by the Seller. The Seller is now waiting for the Buyer to confirm that the Issue they reported is no longer observed.                                                                                                                                                                                                                                                                                                                                              |\n        | `reopened`              | REOPENED               | The Buyer has confirmed that the Issue described in the Ticket has not been resolved satisfactorily and rejected the Seller's request to close the Ticket. The Ticket has been reopened and is waiting to continue being handled and investigated for resolution by the Seller.                                                                                                                                                                                                                                           |\n      enum:\n        - acknowledged\n        - assessingCancellation\n        - cancelled\n        - closed\n        - inProgress\n        - pending\n        - resolved\n        - reopened\n      type: string\n    TroubleTicketType:\n      description: \u003e\n        Possible values for the type of the Trouble Ticket:\n\n        - assistance: Requesting help for a situation (not a failure) requiring\n        attention that is not categorized.\n\n        - information: Buyer is requesting information on the Issue\n\n        - installation: Related to installation issue. Provisioning is\n        complete, but Product is not operational.\n\n        - maintenance: Any scheduled or non-scheduled maintenance related\n        Issue.\n      enum:\n        - assistance\n        - information\n        - installation\n        - maintenance\n      type: string\n    TroubleTicket_Common:\n      description: \u003e\n        A Trouble Ticket is a record of an issue that is created, tracked, and\n        managed by a Trouble Ticket management system Skipped properties:\n        id,href\n      properties:\n        attachment:\n          description: \u003e-\n            Attachments to the Ticket, such as a file, screenshot or embedded\n            content. Attachments may be added but may not be modified or\n            deleted (for historical reasons).\n          items:\n            $ref: '#/components/schemas/AttachmentValue'\n          type: array\n        description:\n          description:\n            Summarized description of the Issue the Buyer is experiencing.\n          type: string\n        externalId:\n          description: \u003e-\n            Identifier provided by the Buyer to allow the Buyer to use as a\n            search attribute in Retrieve Ticket List.\n          type: string\n        issueStartDate:\n          description: \u003e-\n            The date indicating when the Buyer first observed the Issue, to\n            provide the Seller with additional insight.\n          format: date-time\n          type: string\n        note:\n          description: \u003e-\n            The note(s) that are associated to the ticket. Notes may be added\n            but may not be modified or deleted (for historical reasons).\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        observedImpact:\n          $ref: '#/components/schemas/MEFObservedImpactType'\n          description: The type of impact observed by the Buyer.\n        priority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority of the Trouble Ticket and how quickly the issue should\n            be resolved. Example: Critical, High, Medium, Low. The value is set\n            by the ticket management system considering the severity, ticket\n            type etc...\n        relatedContactInformation:\n          description: \u003e-\n            Party playing a role for this Trouble Ticket.\n\n            The 'role' is to specify the type of contact as specified in MEF\n            113:\n\n            Reporter Contact ('role=reporterContact') - REQUIRED in the request\n\n            Buyer Technical Contacts ('role=buyerTechnicalContact') \n\n            Seller Ticket Contact ('role=sellerTicketContact') \n\n            Seller Technical Contact ('role=sellerTechnicalContact')\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n        relatedEntity:\n          description: \u003e-\n            An entity that is related to the ticket such as a bill, a product,\n            etc. The entity against which the ticket is associated.\n          items:\n            $ref: '#/components/schemas/RelatedEntity'\n          minItems: 1\n          type: array\n        relatedIssue:\n          description: \u003e-\n            A list of Related Issue relationships. Represents relationships to\n            other Trouble Tickets and Incidents.\n          items:\n            $ref: '#/components/schemas/IssueRelationship'\n          type: array\n        severity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity or impact (ITIL) of the Trouble Ticket as evaluated by\n            the Buyer.\n        ticketType:\n          $ref: '#/components/schemas/TroubleTicketType'\n          description:\n            The presumed cause of the Trouble Ticket as evaluated by the Buyer.\n      required:\n        - description\n        - observedImpact\n        - priority\n        - relatedContactInformation\n        - relatedEntity\n        - severity\n        - ticketType\n      type: object\n    TroubleTicket_Create:\n      allOf:\n        - $ref: '#/components/schemas/TroubleTicket_Common'\n        - type: object\n      description: \u003e-\n        A Trouble Ticket is a record of an issue that is created, tracked, and\n        managed by a Trouble Ticket management system The modeling pattern\n        introduces the `Common` supertype to aggregate attributes that are\n        common to both `TroubleTicket` and `TroubleTicket_Create`. It this case\n        the Create type has a subset of attributes of the response type and\n        does not introduce any new, thus the `Create` type has an empty\n        definition.\n    TroubleTicket_Find:\n      description: \u003e\n        This class represents a single list item for the response of\n        `listTroubleTicket` operation.\n      properties:\n        creationDate:\n          description: The date on which the Trouble Ticket was created\n          format: date-time\n          type: string\n        description:\n          description: Description of the trouble or issue\n          type: string\n        expectedResolutionDate:\n          description: \u003e-\n            The date provided by the Seller to indicate when the Ticket is\n            expected to be resolved\n          format: date-time\n          type: string\n        externalId:\n          description: Additional identifier coming from an external system\n          type: string\n        id:\n          description: Unique identifier of the Trouble Ticket\n          type: string\n        priority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Ticket should be resolved as evaluated\n            by the Buy-er.   The Priority is used by the Seller to determine\n            the order in which Tickets get resolved across Buyers.\n        relatedEntity:\n          description: \u003e-\n            An entity that is related to the ticket such as a bill, a product,\n            etc. The entity against which the ticket is associated.\n          items:\n            $ref: '#/components/schemas/RelatedEntity'\n          minItems: 1\n          type: array\n        resolutionDate:\n          description:\n            The date the Ticket status was set to resolved by the Seller\n          format: date-time\n          type: string\n        sellerPriority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority (ITIL) is based on the assessment of the impact and\n            urgency of how quickly the Ticket should be resolved after\n            evaluation by the Seller of the impact of the Issue on the Buyer.\n        sellerSeverity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity or impact (ITIL) of the Ticket on the Buyer as\n            evaluated by the Seller.\n        severity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity or impact (ITIL) of the Ticket as evaluated by the\n            Buyer.\n        status:\n          $ref: '#/components/schemas/TroubleTicketStatusType'\n          description: The current status of the Trouble Ticket\n        ticketType:\n          $ref: '#/components/schemas/TroubleTicketType'\n          description:\n            The presumed cause of the Trouble Ticket as evaluated by the Buyer.\n      required:\n        - creationDate\n        - description\n        - expectedResolutionDate\n        - externalId\n        - id\n        - priority\n        - relatedEntity\n        - resolutionDate\n        - sellerPriority\n        - sellerSeverity\n        - severity\n        - status\n        - ticketType\n      type: object\n    TroubleTicket_Update:\n      description: \u003e-\n        A Trouble Ticket is a record of an issue that is created, tracked, and\n        managed by a Trouble Ticket management system\n      properties:\n        attachment:\n          description: \u003e-\n            Attachments to the Ticket, such as a file, screen shot or embedded\n            content.\n          items:\n            $ref: '#/components/schemas/AttachmentValue'\n          type: array\n        externalId:\n          description: Additional identifier coming from an external system\n          type: string\n        issueStartDate:\n          description: \u003e-\n            The date indicating when the Buyer first observed the Issue, to\n            provide the Seller with additional insight.\n          format: date-time\n          type: string\n        note:\n          description: The note(s) that are associated to the ticket.\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        priority:\n          $ref: '#/components/schemas/TroubleTicketPriorityType'\n          description: \u003e-\n            The priority of the Trouble Ticket and how quickly the issue should\n            be resolved. Example: Critical, High, Medium, Low. The value is set\n            by the ticket management system considering the severity, ticket\n            type etc...\n        relatedContactInformation:\n          description: \u003e-\n            Party playing a role for this quote. If `instantSyncQuote=false` \n\n            then the Buyer MUST specify Buyer Contact Information\n            ('role=buyerContactInformation') \n\n            and the Seller MUST specify Seller Contact Information\n            ('role=sellerContactInformation')\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          type: array\n        relatedIssue:\n          description: \u003e-\n            A list of Related Issue relationships. Represents relationships to\n            other Trouble Tickets and Incidents.\n          items:\n            $ref: '#/components/schemas/IssueRelationship'\n          type: array\n        severity:\n          $ref: '#/components/schemas/TroubleTicketSeverityType'\n          description: \u003e-\n            The severity of the issue. Indicate the implication of the issue on\n            the expected functionality e.g. of a system, application, service\n            etc...\n      type: object\n    WorkOrder:\n      description: \u003e\n        A set of tasks to be scheduled and performed under the responsibility\n        of a Seller Technician(s)\n      properties:\n        appointmentRequired:\n          description: \u003e-\n            The Seller requires the Buyer to schedule an Appointment. If set to\n            true, the Seller is Requesting the Buyer to schedule an\n            Appointment.\n          type: boolean\n        appointment:\n          description: \u003e-\n            A reference to a set of Appointments for the WorkOrder. A WorkOrder\n            may contain only one open Appointment at a time (e.g. with state of\n            'scheduled').\n          items:\n            $ref: '#/components/schemas/AppointmentRef'\n          type: array\n        href:\n          description: Hyperlink, a reference to the WorkOrder entity\n          type: string\n        id:\n          description:\n            Unique (within the Seller domain) identifier for the WorkOrder.\n          type: string\n        note:\n          description: \u003e-\n            A set of unstructured comments or information associated to the\n            WorkOrder\n          items:\n            $ref: '#/components/schemas/Note'\n          type: array\n        place:\n          description: \u003e-\n            The location where the WorkOrder Tasks are to be performed. If an\n            appointment is needed, this will also be the location where the\n            Appointment takes place and includes the site contact which the\n            Seller technician may need to get access to the Buyer's site during\n            the Appointment. This could be an end-user, security personnel or\n            any authorized person\n          items:\n            $ref: '#/components/schemas/RelatedPlaceRefOrValue'\n          type: array\n        relatedContactInformation:\n          description: \u003e-\n            Party playing a role for this WorkOrder.\n\n            The 'role' is to specify the type of contact as specified in MEF\n            113:\n\n            Technical Contact ('role=technicalContact') - REQUIRED to be set by\n            the Seller. The Seller technical contact responsible for the\n            WorkOrder.\n\n            Technician ('role=technician') - The Seller technician assigned to\n            the WorkOrder and responsible for performing a set of tasks. In\n            certain instances this could be a Buyer technician that works on\n            behalf of the Seller.\n          items:\n            $ref: '#/components/schemas/RelatedContactInformation'\n          minItems: 1\n          type: array\n        relatedEntity:\n          description: \u003e-\n            An entity that is related to the WorkOrder such as a service, a\n            product, etc. The entity which the WorkOrder is associated with.\n          items:\n            $ref: '#/components/schemas/RelatedEntity'\n          minItems: 1\n          type: array\n        state:\n          $ref: '#/components/schemas/WorkOrderStateType'\n          description: The current status of the WorkOrder\n        task:\n          description: \u003e-\n            A set of tasks to be performed under the responsibility of the\n            Technician to fulfil the WorkOrder. Each item is a description of a\n            specific task to be performed under the responsibility of the\n            Technician.\n          items:\n            type: string\n          minItems: 1\n          type: array\n      required:\n        - appointmentRequired\n        - id\n        - relatedContactInformation\n        - relatedEntity\n        - state\n        - tasks\n      type: object\n    WorkOrderRef:\n      description: |\n        A reference to an WorkOrder resource.\n      properties:\n        href:\n          description: |\n            Hyperlink to the referenced WorkOrder.\n          type: string\n        id:\n          description: Identifier of the referenced WorkOrder.\n          type: string\n      required:\n        - id\n      type: object\n    WorkOrderStateType:\n      description: |\n        Possible values for the status of the WorkOrder\n\n        | state              | MEF 113 name        | Description                                                                                                                                                                                                                                                     |\n        | ------------------ | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n        | `completed`        | COMPLETED           | The Seller Technician responsible for the Workorder has successfully completed all the assigned Tasks.                                                                                                                                                          |\n        | `cancelled`        | CANCELLED           | The WorkOrder has been cancelled by the Seller or due to the Buyer requesting to cancel the Ticket.                                                                                                                                                             |\n        | `inProgress`       | IN_PROGRESS         | The Seller Technician responsible for the Workorder has been assigned and started one or more of the assigned Tasks.                                                                                                                                            |\n        | `open`             | OPEN                | A WorkOrder was initiated by the Seller to be assigned to a Technician responsible for resolving the Ticket.                                                                                                                                                    |\n        | `planned`          | PLANNED             | The WorkOrder has been given an execution date for resolving one or more Tasks.                                                                                                                                                                                 |\n        | `unableToComplete` | UNABLE_TO_COMPLETE  | The Seller Technician responsible for the Workorder was unable to complete one or more of the assigned Tasks, because additional skills or information is required. Additional tasks are required to resolve the Ticket and a new Workorder needs to be opened. |\n      enum:\n        - cancelled\n        - completed\n        - inProgress\n        - open\n        - planned\n        - unableToComplete\n      type: string\n\n",
			"canonicalURL": "/github.com/MEF-GIT/MEF-LSO-Sonata-SDK@c99d5bce21fc77e2ecfba6f8d6b2111361380b86/-/blob/productApi/troubleTicket/troubleTicketManagement.api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MEF-GIT/MEF-LSO-Sonata-SDK/blob/c99d5bce21fc77e2ecfba6f8d6b2111361380b86/productApi/troubleTicket/troubleTicketManagement.api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}