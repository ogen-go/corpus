{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ic3software/mccs-alpha-api"
		},
		"file": {
			"name": "openapi-user.yaml",
			"size": 0,
			"path": "openapi-user.yaml",
			"byteSize": 67573,
			"content": "openapi: 3.0.0\ninfo:\n  title: MCCS Alpha User API\n  description: |\n    ## Introduction\n\n    The MCCS Alpha User API v1 exposes all of the end user functionality currently available in the [alpha version of the MCCS API](https://github.com/ic3network/mccs-alpha-api).\n\n    By providing an API, developers who want to create their own front-end user interface for MCCS will have significant flexibility to implement it in whatever way they choose. This means developers can present MCCS in any language, setup their own signup flow, optimize it for whatever devices their users prefer, develop a mobile app, integrate other services such as chat, etc.\n\n    Importantly, an API enables developers to integrate MCCS functionality directly into their own apps (e.g., import transfer data into an accounting application, instruct mutual credit transfers from an e-wallet application, interact with MCCS data via a chat bot, etc.).\n\n    ## Background\n\n    To understand how the MCCS Alpha API works, please read the following design documents:\n\n    - [MCCS Alpha Data Model](https://github.com/ic3network/mccs/blob/master/alpha-data-model.md)\n    - [MCCS Alpha Functionality](https://github.com/ic3network/mccs/blob/master/alpha-functionality.md)\n\n    ## Test Server\n\n    These API docs assume you are running the API server on your local machine using Docker \u0026 Docker Compose. See the [How to Start](https://github.com/ic3network/mccs-alpha-api#how-to-start) instructions in the project's GitHub repo for more details.\n\n    ## License\n  license:\n    name: MIT License\n    url: https://github.com/ic3network/mccs-alpha-api/blob/dev/LICENSE\n  version: '1'\nservers:\n  - url: http://localhost:8080/api/v1\ntags:\n  - name: Manage Account\n    description: Create and manage a user and its linked entity\n  - name: Find Entities\n    description: Search and filter entities\n  - name: Transfer Credits\n    description: Initiate and authorize mutual credit transfers\n  - name: Review Transfer Activity\n    description: View pending and completed mutual credit transfers\npaths:\n  /signup:\n    post:\n      tags:\n        - Manage Account\n      summary: Create a new account - a user resource and associated entity resource\n      description: |\n        Individual users can create an account in MCCS by providing an email address, creating a password and adding some other details about themselves and their \"business\". A \"business\" need not be a formally established business; it could simply be a list of their skills that they are willing to offer to other participants in the network, or another type of entity such as an association, not-for-profit, NGO, etc.\n\n        We use the term **entity** to generically identify businesses, non-profits, NGOs, sole proprietorships, limited companies, etc.\n\n        The `POST /signup` API call creates a user resource and an entity (e.g., a business) resource and links the two together. The user resource references its associated entity, and the entity resource references its associated user. These two related resources make up what is referred to as an account.\n\n        An account can be created with only a unique email address and a password, enabling a new user to get started quickly. The `userID` and `entityID` are returned in the response body, along with a [JSON Web Token](https://jwt.io) to authorize the user of the account for further API calls related to the user and entity resources just created.\n        \n        All other details (entity name, user first/last names, goods/services offered or wanted, etc.) are optional and can be added later. The decision about customer data requirements for signup can be determined by developers implementing a front end to the API, since they will be working with the organizations implementing MCCS. If other information is collected during the initial registration process, these extra details can be passed immediately in this `POST /signup` API endpoint or later using the `PATCH /user` and/or `PATCH /user/entities/{entityID}` API endpoints.\n        \n        The current (v1) implementation of the API has a one-to-one relationship between the user and the entity. This will be changed to a many-to-many relationship in a future implementation.\n      requestBody:\n        description: Signup request body\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n              - $ref: '#/components/schemas/SignupRequiredFields'\n              - $ref: '#/components/schemas/SignupAllFields'\n            examples:\n              requiredFields:\n                value:\n                  userEmail: jdoe@dev.null\n                  password: 1TrulySecurePassword!!\n              allFields:\n                value:\n                  userEmail: jdoe@dev.null\n                  password: 1TrulySecurePassword!!\n                  firstName: Jane\n                  lastName: Doe\n                  userPhone: \"+442010203040\"\n                  entityEmail: nwcltd@dev.null\n                  entityName: New World Consulting Limited\n                  incType: ltd\n                  companyNumber: A12345\n                  entityPhone: \"+442090807060\"\n                  website: https://neworco.null\n                  declaredTurnover: 20000\n                  description: \"We show you how good things can be and what you need to do to make them happen.\"\n                  address: \"123 Yellow Brick Road\"\n                  city: \"London\"\n                  region: \"Greater London\"\n                  postalCode: \"UK1 2ENG\"\n                  country: \"England\"\n                  showTagsMatchedSinceLastLogin: true\n                  receiveDailyMatchNotificationEmail: true\n                  offers:\n                    - consulting\n                    - system-design\n                  wants:\n                    - it-services\n                    - accounting\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      userID:\n                        type: string\n                      entityID:\n                        type: string\n                      token: \n                        type: string\n              example:\n                data:\n                  userID: \"5eec78f4a880b7c235f66e80\"\n                  entityID: \"5eec78f4a880b7c235f66e7c\"\n                  token: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTI2NDIxNjQsInVzZXJJRCI6IjVlZWM3OGY0YTg4MGI3YzIzNWY2NmU4MCIsImFkbWluIjpmYWxzZX0.WhPMfV9S-xgOHcuMT_K-fBhR_K6MpXiJ15GYn4Jz7im1dvhwnV2bEnwuWeFUockl45StxguvIOA5qJ-_3xA14CuP0wJbZa3hVH4jnYXonHlCyHDB8w67RLN9IMFGnSEshhh4D3RjQVpEpBm7jLhQcHKOSQIqUU_RfPkiNxpUkDI6t1RW_-rhY4UsTTuxnC5SOeajzOgiDFM4NwJfjebys8xDGTqYoi4dpCJZEtD_U_X9BuEOovRRJo0TY6m76XxUB9J5U_Hfjm7k_A3aLv3WgDScRv_k-LSsOvviGk1A2ct0nQ2RaVY1udA-76rv1xbvSd26Xds2XtrPb_SzUL-J8A\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /login:\n    post:\n      tags:\n        - Manage Account\n      summary: Login and receive an authorization token\n      description: |\n        A user will need to authenticate with an email/password combination which, if successful, will result in a JSON Web Token (JWT) being passed to the user to use with each API request that requires authorization.\n\n        The JWT will expire after 24 hours, or as soon as the user calls the `/logout` API.\n      requestBody:\n        $ref: '#/components/requestBodies/loginUser'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      token:\n                        type: string\n              example:\n                data:\n                  token: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTI5ODU0MzcsInVzZXJJRCI6IjVlZjFiNWQ5NTA2ODQ3ZWE5MTRkYjA2NiIsImFkbWluIjpmYWxzZX0.E3YJWpUN0h2LS3IfE2niYclTnhKUGXDay7SR_VeVzaq4a_lZPs2w4yxFUWbbeAcPeMgtcd3bEoX6PtDhW3hjJ8XVbqmkJQRmh3uw5ULfgzkIzrQw3twaG8TO6ARM4UvKJWz2Wqb6czd5SesJmM2htIuY3DBJ_u4r9x3hshM5_0kHalfEZtQvae0KrJ2_eBjPmFOdON62QungzStkjTKTfqsvystwFSdfOwAltg0Nri1Z6q-E9AZMTnAxzKNqjp4Ja3hX1IoZXPiV8F0-yl1PhrKI_YzP57pOt84T72_WK3z1_hofHAOwby5-2qvtoKWSmxqzKsIYUYeG89W7h4TvBQ\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/ServerError'\n  /logout:\n    post:\n      tags:\n        - Manage Account\n      summary: Logout and expire the authorization token\n      description: Logging out will immediately expire the JWT currently associated to the user's account.\n      responses:\n        200:\n          description: OK\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /password-reset:\n    post:\n      tags:\n        - Manage Account\n      summary: Request a password reset token\n      description: When a password is lost by the user, a new one can be requested by providing the email address associated with the user's account. A password reset token will then be sent to that email address.\n      requestBody:\n        $ref: '#/components/requestBodies/resetPassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /password-reset/{token}:\n    post:\n      tags:\n        - Manage Account\n      summary: Reset a password\n      description: The new password can be set by providing it along with the password reset token that was received at the user's email address.\n      parameters:\n        - $ref: '#/components/parameters/token'\n      requestBody:\n        $ref: '#/components/requestBodies/updatePassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /password-change:\n    post:\n      tags:\n        - Manage Account\n      summary: Change the password\n      description: A logged-in user can change the password by sending the new password along with the JWT.\n      requestBody:\n        $ref: '#/components/requestBodies/updatePassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /user:\n    get:\n      tags:\n        - Manage Account\n      summary: View a user's own details\n      description: Logged-in users can request their details as recorded in the MCCS database.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n              example:\n                data:\n                  id: 5eec78f4a880b7c235f66e80\n                  email: jdoe@dev.null\n                  firstName: Jane\n                  lastName: Doe\n                  telephone: \"+442010203040\"\n                  lastLoginIP: 192.168.12.34\n                  lastLoginDate: \"2020-06-19T23:59:59.999Z\"\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    patch:\n      tags:\n        - Manage Account\n      summary: Modify a user's own details\n      description: |\n        Users can change their details in MCCS' database, except for the `email` field which can only be changed by an administrator.\n        \n        The `id`, `lastLoginIP` and `lastLoginDate` fields are system-generated and therefore are not changeable by either users or administrators.\n      requestBody:\n        $ref: '#/components/requestBodies/updateUser'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n              example:\n                data:\n                  id: 5eec78f4a880b7c235f66e80\n                  email: jdoe@dev.null\n                  firstName: Jane K.\n                  lastName: Doer\n                  telephone: \"+442012345678\"\n                  lastLoginIP: 192.168.12.34\n                  lastLoginDate: \"2020-06-19T23:59:59.999Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /user/entities:\n    get:\n      tags:\n        - Manage Account\n      summary: View an entity's details\n      description: Users can request the details of their linked entity as recorded in the MCCS database.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n              example:\n                data: \n                  - id: 5eec78f4a880b7c235f66e7c\n                    accountNumber: \"6838115832533278\"\n                    name: New World Consulting Limited\n                    email: nwcltd@dev.null\n                    telephone: \"+442090807060\"\n                    incType: ltd\n                    companyNumber: A12345\n                    website: https://neworco.null\n                    declaredTurnover: 20000\n                    description: \"We show you how good things can be and what you need to do to make them happen.\"\n                    address: \"123 Yellow Brick Road\"\n                    city: \"London\"\n                    region: \"Greater London\"\n                    postalCode: \"UK1 2ENG\"\n                    country: \"England\"\n                    status: \"pending\"\n                    showTagsMatchedSinceLastLogin: true\n                    receiveDailyMatchNotificationEmail: true\n                    offers:\n                      - consulting\n                      - system-design\n                    wants:\n                      - it-services\n                      - accounting\n                    categories:\n                      - consulting\n                    balance: 0\n                    maxPositiveBalance: 500\n                    maxNegativeBalance: 0\n                    pendingTransfers:\n                      - id: 1dimEdDxOJYjDeaP6HEy4cIhLdD\n                        transfer: in\n                        isInitiator: false\n                        accountNumber: \"5211115451222517\"\n                        entityName: \"Hipster Brews\"\n                        amount: 157.80\n                        description: \"Payment of inv. 1234\"\n                        status: transferInitiated\n                        dateProposed: \"2020-06-23T12:42:57.786628Z\"\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /user/entities/{entityID}:\n    patch:\n      tags:\n        - Manage Account\n      summary: Modify an entity's details\n      description: |\n        Users can change their entity's details in the MCCS database, except for the `status` field which can only be changed by an administrator. The `id` and `accountNumber` fields are system-generated and therefore are not changeable by either users or administrators.\n\n        Changes to the `offers` and `wants` array fields must include all relevant tags because they will overwrite the arrays already stored in the database.\n\n        The `email` for an entity is separate from the linked user's email, although the user email address is set for the entity's email as well when the account is first created, but only if an entity email is not specified when creating an account at the `POST /signup` endpoint. The entity email, which receives notifications, can be changed by the user.\n      parameters:\n        - $ref: '#/components/parameters/entityID'\n      requestBody:\n        $ref: '#/components/requestBodies/updateEntity'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Entity'\n              example:\n                data:\n                  id: 5eec78f4a880b7c235f66e7c\n                  accountNumber: \"6838115832533278\"\n                  name: New World Pizza PLC\n                  email: nwpplc@dev.null\n                  telephone: \"+442098765432\"\n                  incType: plc\n                  companyNumber: B67890\n                  website: https://nwpizza.null\n                  declaredTurnover: 10000\n                  description: \"We show you how good things can taste and where you need to go to eat them!\"\n                  address: \"456 Yellow Brick Road\"\n                  city: \"London\"\n                  region: \"Greater London\"\n                  postalCode: \"UK1 2ENG\"\n                  country: \"England\"\n                  status: \"pending\"\n                  showTagsMatchedSinceLastLogin: false\n                  receiveDailyMatchNotificationEmail: false\n                  offers:\n                    - pizza\n                    - wine\n                  wants:\n                    - flour\n                    - mozarella\n                    - tomato\n                  categories:\n                    - consulting\n                  balance: 0\n                  maxPositiveBalance: 500\n                  maxNegativeBalance: 0\n                  pendingTransfers:\n                    - id: 1dimEdDxOJYjDeaP6HEy4cIhLdD\n                      transfer: in\n                      isInitiator: false\n                      accountNumber: \"5211115451222517\"\n                      entityName: \"Hipster Brews\"\n                      amount: 157.80\n                      description: \"Payment of inv. 1234\"\n                      status: transferInitiated\n                      dateProposed: \"2020-06-23T12:42:57.786628Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /categories:\n    get:\n      tags:\n        - Find Entities\n      summary: Get a full or partial list of entity categories\n      description: |\n        The directory of entities is split up into categories that are manually assigned to each entity by an administrator. The entire list or just a subset of it by first letter(s) (`prefix`) and/or partial match (`fragment`) can be requested.\n        \n        Searching for prefix \"t\" or \"tr\" returns all categories that begin with \"t\" or \"tr\" (e.g., \"Teas\" \u0026 \"Transport\" for \"t\", or only \"Transport\" for \"tr\").\n        \n        Searching for fragment \"tr\" returns all categories that have  \"tr\" anywhere in their name, including the beginning (e.g., \"Transport\" \u0026 \"Carpentry\").\n      parameters:\n        - name: prefix\n          in: query\n          schema:\n            type: string\n          description: first letter of a category\n          example:\n            c\n        - name: fragment\n          in: query\n          schema:\n            type: string\n          description: partial match of word/characters\n          example:\n            sport\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Category'\n                    example:\n                      data:\n                        id: 5e86ee4ec3a20c3113aa9e2d\n                        name: a-new-category\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples: \n                fullList:\n                  value:\n                    data:\n                      - id: 5ef1b5ccd35791b2dc384425\n                        name: agriculture\n                      - id: 5ef1b5ccd35791b2dc384426\n                        name: cafes\n                      - id: 5ef1b5ccd35791b2dc384427\n                        name: cleaning-services\n                      - id: 5ef1b5ccd35791b2dc384428\n                        name: professional-services\n                      - id: 5ef1b5ccd35791b2dc384429\n                        name: restaurant\n                      - id: 5ef1b5ccd35791b2dc384430\n                        name: restaurant-supplies\n                      - id: 5ef1b5ccd35791b2dc384431\n                        name: sports-equipment\n                      - id: 5ef1b5ccd35791b2dc384432\n                        name: transport\n                    meta:\n                      numberOfResults: 8\n                      totalPages: 1\n                withPrefixC:\n                  value:\n                    data:\n                      - id: 5ef1b5ccd35791b2dc384426\n                        name: cafes\n                      - id: 5ef1b5ccd35791b2dc384427\n                        name: cleaning-services\n                    meta:\n                      numberOfResults: 2\n                      totalPages: 1\n                withFragmentSport:\n                  value:\n                    data:\n                      - id: 5ef1b5ccd35791b2dc384431\n                        name: sports-equipment\n                      - id: 5ef1b5ccd35791b2dc384432\n                        name: transport\n                    meta:\n                      numberOfResults: 2\n                      totalPages: 1\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /tags:\n    get:\n      tags:\n        - Find Entities\n      summary: Get a full or partial list of tags used for offers and wants\n      description: |\n        Tags are words or short phrases that describe the goods or services an entity can provide (`offers`) to other entities or needs (`wants`) from other entities, in order to facilitate trades with them. For example, a Chinese restaurant might use offer tags such as \"restaurant\", \"chinese\", \"take-out\", \"dim-sum\", \"delivery\" to describe its service.\n        \n        Up to 10 offer tags and 10 want tags can be specified per entity. A list of tags that are fuzzy, partial or exact matches to the input (`fragment`) provided can be requested. If no fragment is provided all tags are returned.\n      parameters:\n        - name: fragment\n          in: query\n          schema:\n            type: string\n          description: partial match of word/characters\n          example:\n            be\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Tag'\n                    example:\n                      data:\n                        id: 5e86ee4ec3a20c3113aa9ccb5\n                        name: a-new-tag\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples: \n                fullList:\n                  value:\n                    data:\n                      - id: 5ef1b5ccd35791b2dc384410\n                        name: art-supplies\n                      - id: 5ef1b5ccd35791b2dc384411\n                        name: catering\n                      - id: 5ef1b5ccd35791b2dc384412\n                        name: computer-repair\n                      - id: 5ef1b5ccd35791b2dc384413\n                        name: dog-sitting\n                      - id: 5ef1b5ccd35791b2dc384414\n                        name: micro-brewed-beer\n                      - id: 5ef1b5ccd35791b2dc384415\n                        name: organic-vegetables\n                      - id: 5ef1b5ccd35791b2dc384416\n                        name: piano-tuning\n                      - id: 5ef1b5ccd35791b2dc384417\n                        name: pizza\n                      - id: 5ef1b5ccd35791b2dc384418\n                        name: van-rental\n                      - id: 5ef1b5ccd35791b2dc384419\n                        name: well-being\n                    meta:\n                      numberOfResults: 10\n                      totalPages: 1\n                withFragmentBe:\n                  value:\n                    data:\n                      - id: 5ef1b5ccd35791b2dc384414\n                        name: micro-brewed-beer\n                      - id: 5ef1b5ccd35791b2dc384419\n                        name: well-being\n                    meta:\n                      numberOfResults: 2\n                      totalPages: 1\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /entities:\n    get:\n      tags:\n        - Find Entities\n      summary: Get a list of entities\n      description: |\n        Entities can be searched based on (1) their offers and wants tags, (2) the category they are listed under, (3) the date the offers and wants tags were added to their profile, (4) their entity name, and/or (5) an entity's selection of favorites.\n      \n        If the request does not contain a JWT along with a `querying_entity_id` specified, the search for favorites functionality will not work (e.g., all results will show the `isFavorite` flag as false).\n\n        If a `querying_entity_id` is specified and both the requesting entity and the entity returned in the search are `tradingAccepted` status, the email address of the searched entity will also be included.\n      parameters:\n        - $ref: '#/components/parameters/offers'\n        - $ref: '#/components/parameters/wants'\n        - $ref: '#/components/parameters/category'\n        - $ref: '#/components/parameters/taggedSince'\n        - $ref: '#/components/parameters/entityName'\n        - $ref: '#/components/parameters/favoritesOnly'\n        - $ref: '#/components/parameters/queryingEntityID'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples:\n                withoutAuth:\n                  value:\n                    data:\n                      - id: 5eec78f4a880b7c235f66e7c\n                        accountNumber: \"6838115832533278\"\n                        name: New World Pizza PLC\n                        telephone: \"+442098765432\"\n                        incType: plc\n                        companyNumber: B67890\n                        website: https://nwpizza.null\n                        declaredTurnover: 10000\n                        description: \"We show you how good things can taste and where you need to go to eat them!\"\n                        address: \"456 Yellow Brick Road\"\n                        city: \"London\"\n                        region: \"Greater London\"\n                        postalCode: \"UK1 2ENG\"\n                        country: \"England\"\n                        status: \"pending\"\n                        showTagsMatchedSinceLastLogin: false\n                        receiveDailyMatchNotificationEmail: false\n                        offers:\n                          - pizza\n                          - wine\n                        wants:\n                          - flour\n                          - mozarella\n                          - tomato\n                        categories:\n                          - restaurant\n                        isFavorite: false\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n                withAuth:\n                  value:\n                    data:\n                      - id: 5eec78f4a880b7c235f66e7c\n                        accountNumber: \"6838115832533278\"\n                        name: New World Pizza PLC\n                        telephone: \"+442098765432\"\n                        incType: plc\n                        companyNumber: B67890\n                        website: https://nwpizza.null\n                        declaredTurnover: 10000\n                        description: \"We show you how good things can taste and where you need to go to eat them!\"\n                        address: \"456 Yellow Brick Road\"\n                        city: \"London\"\n                        region: \"Greater London\"\n                        postalCode: \"UK1 2ENG\"\n                        country: \"England\"\n                        status: \"pending\"\n                        showTagsMatchedSinceLastLogin: false\n                        receiveDailyMatchNotificationEmail: false\n                        offers:\n                          - pizza\n                          - wine\n                        wants:\n                          - flour\n                          - mozarella\n                          - tomato\n                        categories:\n                          - restaurant\n                        isFavorite: true\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n                withAuthTradingAccepted:\n                  value:\n                    data:\n                      - id: 5eec78f4a880b7c235f66e7c\n                        accountNumber: \"6838115832533278\"\n                        name: New World Pizza PLC\n                        email: nwpplc@dev.null\n                        telephone: \"+442098765432\"\n                        incType: plc\n                        companyNumber: B67890\n                        website: https://nwpizza.null\n                        declaredTurnover: 10000\n                        description: \"We show you how good things can taste and where you need to go to eat them!\"\n                        address: \"456 Yellow Brick Road\"\n                        city: \"London\"\n                        region: \"Greater London\"\n                        postalCode: \"UK1 2ENG\"\n                        country: \"England\"\n                        status: \"pending\"\n                        showTagsMatchedSinceLastLogin: false\n                        receiveDailyMatchNotificationEmail: false\n                        offers:\n                          - pizza\n                          - wine\n                        wants:\n                          - flour\n                          - mozarella\n                          - tomato\n                        categories:\n                          - restaurant\n                        isFavorite: true\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        # Allow optional Authorizations: https://github.com/OAI/OpenAPI-Specification/issues/14\n        - {}\n        - jwt: []\n  /entities/{entityID}:\n    get:\n      tags:\n        - Find Entities\n      summary: Get a single entity\n      description: Returns a single entity's details using its ID. Requests can be made without a JWT from an authenticated user (see `GET /entities` above for more information).\n      parameters:\n        - $ref: '#/components/parameters/entityID'\n        - $ref: '#/components/parameters/queryingEntityID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Entity'\n              examples:\n                withoutAuth:\n                  value:\n                    data: \n                      id: 5eec78f4a880b7c235f66e7c\n                      accountNumber: \"6838115832533278\"\n                      name: New World Pizza PLC\n                      telephone: \"+442098765432\"\n                      incType: plc\n                      companyNumber: B67890\n                      website: https://nwpizza.null\n                      declaredTurnover: 10000\n                      description: \"We show you how good things can taste and where you need to go to eat them!\"\n                      address: \"456 Yellow Brick Road\"\n                      city: \"London\"\n                      region: \"Greater London\"\n                      postalCode: \"UK1 2ENG\"\n                      country: \"England\"\n                      status: \"pending\"\n                      showTagsMatchedSinceLastLogin: false\n                      receiveDailyMatchNotificationEmail: false\n                      offers:\n                        - pizza\n                        - wine\n                      wants:\n                        - flour\n                        - mozarella\n                        - tomato\n                      categories:\n                        - restaurant\n                      isFavorite: false\n                withAuth:\n                  value:\n                    data: \n                      id: 5eec78f4a880b7c235f66e7c\n                      accountNumber: \"6838115832533278\"\n                      name: New World Pizza PLC\n                      telephone: \"+442098765432\"\n                      incType: plc\n                      companyNumber: B67890\n                      website: https://nwpizza.null\n                      declaredTurnover: 10000\n                      description: \"We show you how good things can taste and where you need to go to eat them!\"\n                      address: \"456 Yellow Brick Road\"\n                      city: \"London\"\n                      region: \"Greater London\"\n                      postalCode: \"UK1 2ENG\"\n                      country: \"England\"\n                      status: \"pending\"\n                      showTagsMatchedSinceLastLogin: false\n                      receiveDailyMatchNotificationEmail: false\n                      offers:\n                        - pizza\n                        - wine\n                      wants:\n                        - flour\n                        - mozarella\n                        - tomato\n                      categories:\n                        - restaurant\n                      isFavorite: true\n                withAuthTradingAccepted:\n                  value:\n                    data: \n                      id: 5eec78f4a880b7c235f66e7c\n                      accountNumber: \"6838115832533278\"\n                      name: New World Pizza PLC\n                      email: nwpplc@dev.null\n                      telephone: \"+442098765432\"\n                      incType: plc\n                      companyNumber: B67890\n                      website: https://nwpizza.null\n                      declaredTurnover: 10000\n                      description: \"We show you how good things can taste and where you need to go to eat them!\"\n                      address: \"456 Yellow Brick Road\"\n                      city: \"London\"\n                      region: \"Greater London\"\n                      postalCode: \"UK1 2ENG\"\n                      country: \"England\"\n                      status: \"pending\"\n                      showTagsMatchedSinceLastLogin: false\n                      receiveDailyMatchNotificationEmail: false\n                      offers:\n                        - pizza\n                        - wine\n                      wants:\n                        - flour\n                        - mozarella\n                        - tomato\n                      categories:\n                        - restaurant\n                      isFavorite: true\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        # Allow optional Authorizations: https://github.com/OAI/OpenAPI-Specification/issues/14\n        - {}\n        - jwt: []\n  /favorites:\n    post:\n      tags:\n        - Find Entities\n      summary: Create and manage a list of favorite entities\n      description: A user can toggle any entity as a favorite, which makes it easy to retrieve using the `favorites_only` search parameter described above (see `GET /entities`).\n      requestBody:\n        $ref: '#/components/requestBodies/setFavorite'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /send-email:\n    post:\n      tags:\n        - Find Entities\n      summary: Send a message to an entity\n      description: |\n        A user can send a message by email to an entity without seeing the email address of the receiving entity. This enables the receiving entity to keep its email private until the entity operator decides to reply to the sender and continue the conversation by email.\n\n        Entities with status `accepted`, `tradingPending`, `tradingAccepted` and `tradingRejected` can send an email to other entities with these same 4 statuses.\n\n        Entities with status `pending` or `rejected` cannot send an email to any other entity. They also cannot receive emails because there is no way to find their ID since they do not show up in search results because of their `pending`/`rejected` status.\n      requestBody:\n        $ref: '#/components/requestBodies/sendEmail'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /transfers:\n    post:\n      tags:\n        - Transfer Credits\n      summary: Initiate a transfer\n      description: |\n        A user can initiate a transfer out of or into the account of its entity, which must then be approved or rejected by the user operating the receiving entity, whose account will be credited or debited accordingly. Both entities must have `tradingAccepted` status in order to set up a transfer between them.\n\n        If the `transfer` parameter is set to `out`, the initiator will create a transfer that will debit funds from the initiator's entity's account. If `transfer` is `in`, the initiator will create a transfer that results in funds being credited to the initiator's entity's account. Either way, the transfer must be approved by the receiver (see `PATCH /transfers/{transferID}`) in order for the inbound or outbound transfer to move to or from the receiver's entity's account.\n      requestBody:\n        $ref: '#/components/requestBodies/initiateTransfer'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TransferInitiated'\n              example:\n                id: 1ZceiVuQyGqeUYlC6UIKgEnaBkD\n                from: \"7132460355005184\"\n                to: \"0382855564717143\"\n                amount: 177.5\n                description: Payment of your invoice number 12345\n                status: transferInitiated\n                dateProposed: \"2020-05-05T14:09:17.446965528Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    get:\n      tags:\n        - Review Transfer Activity\n      summary: Get a list of transfers\n      description: |\n        A user can request a list of mutual credit transfers for the account of the entity. Transfers can be filtered by `status` (`all`, `initiated`, `completed` or `cancelled`).\n\n        The `querying_entity_id` is the ID of the entity whose account the information is being requested for. The user requesting must be associated with that entity or no information will be returned.\n      parameters:\n        - $ref: '#/components/parameters/transferStatus'\n        - $ref: '#/components/parameters/queryingEntityIDRequired'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TransferView'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples:\n                completed:\n                  value:\n                    data:\n                      - id: 1UZ7G7qJrIlwpVK9iSPXgx0A2xN\n                        transfer: out\n                        isInitiator: true\n                        accountNumber: \"1234567887654321\"\n                        entityName: Rhynyx\n                        amount: 1.1,\n                        description: Payment of invoice number 12345\n                        status: transferCompleted\n                        dateProposed: \"2019-12-25T12:12:12.123Z\"\n                        dateCompleted: \"2019-12-26T13:13:13.456Z\"\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n                initiated:\n                  value:\n                    data:\n                      - id: 1UZ7G7qJrIlwpVK9iSPXgx0A2xN\n                        transfer: out\n                        isInitiator: true\n                        accountNumber: \"1234567887654321\"\n                        entityName: Rhynyx\n                        amount: 1.2,\n                        description: Payment of invoice number 12345\n                        status: transferInitiated\n                        dateProposed: \"2019-12-25T12:11:11.456Z\"\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n                cancelled:\n                  value:\n                    data:\n                      - id: 1UZ7G7qJrIlwpVK9iSPXgx0A2xN\n                        transfer: out\n                        isInitiator: true\n                        accountNumber: \"1234567887654321\"\n                        entityName: Rhynyx\n                        amount: 1.3,\n                        description: Payment of invoice number 12345\n                        status: transferCancelled\n                        cancellationReason: Wrong amount, I will send a corrected request\n                        dateProposed: \"2019-12-25T12:11:11.456Z\"\n                    meta:\n                      numberOfResults: 1\n                      totalPages: 1\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /transfers/{transferID}:\n    patch:\n      tags:\n        - Transfer Credits\n      summary: Confirm or cancel a transfer\n      description: |\n        The receiver can either `accept` or `reject` the transfer by specifying it in the action parameter.\n\n        The initiator of the transfer can `cancel` the transfer before the receiver has accepted or rejected it.\n\n        If a transfer is rejected or cancelled, a `cancellationReason` can be provided so that the other party understands why the initiator or receiver cancelled or rejected the transfer.      \n      parameters:\n        - $ref: '#/components/parameters/transferID'\n      requestBody:\n        $ref: '#/components/requestBodies/confirmOrCancelTransfer'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TransferView'\n              examples:\n                acceptResponse:\n                  value:\n                    id: \"1UZ7G7qJrIlwpVK9iSPXgx0A2xN\"\n                    transfer: out\n                    isInitiator: true\n                    accountNumber: \"1234567887654321\"\n                    entityName: Rhynyx\n                    amount: 1.1,\n                    description: Payment of invoice number 12345\n                    status: transferCompleted\n                    dateProposed: \"2019-12-25T12:12:12.123Z\"\n                    dateCompleted: \"2019-12-26T13:13:13.456Z\"\n                rejectResponse:\n                  value:\n                    id: \"1UZ7G7qJrIlwpVK9iSPXgx0A2xN\"\n                    transfer: out\n                    isInitiator: true\n                    accountNumber: \"1234567887654321\"\n                    entityName: Rhynyx\n                    amount: 1.1,\n                    description: Payment of invoice number 12345\n                    status: transferCancelled\n                    cancellationReason: some reason for rejecting\n                    dateProposed: \"2019-12-25T12:12:12.123Z\"\n                cancelResponse:\n                  value:\n                    id: \"1UZ7G7qJrIlwpVK9iSPXgx0A2xN\"\n                    transfer: out\n                    isInitiator: true\n                    accountNumber: \"1234567887654321\"\n                    entityName: Rhynyx\n                    amount: 1.1,\n                    description: Payment of invoice number 12345\n                    status: transferCancelled\n                    cancellationReason: some reason for cancelling\n                    dateProposed: \"2019-12-25T12:12:12.123Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /balance:\n    get:\n      tags:\n        - Review Transfer Activity\n      summary: Get the account balance\n      description: The current balance for the account of the entity is returned from this request. Currently there is only one credit unit (\"currency\") implemented in MCCS, but multiple units may be supported in the future.\n      parameters:\n        - $ref: '#/components/parameters/queryingEntityIDRequired'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Balance'\n              example:\n                data:\n                  - unit: ocn-uk\n                    balance: -1.23\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/Forbidden'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\ncomponents:\n  schemas:\n    SignupRequiredFields:\n      type: object\n      title: SignupRequiredFields\n      required:\n        - userEmail\n        - password\n      properties:\n        userEmail:\n          type: string\n        password:\n          type: string\n    SignupAllFields:\n      type: object\n      title: SignupAllFields\n      required:\n        - userEmail\n        - password\n      properties:\n        userEmail:\n          type: string\n        password:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        userPhone:\n          type: string\n        entityEmail:\n          type: string\n        entityName:\n          type: string\n        incType:\n          type: string\n          enum:\n            - plc\n            - ltd\n            - guar\n            - unltd\n            - llp\n            - cic\n            - ips\n            - sole\n        companyNumber:\n          type: string\n        entityPhone:\n          type: string\n        website:\n          type: string\n        declaredTurnover:\n          type: integer\n        description:\n          type: string\n        address:\n          type: string\n        city:\n          type: string\n        region:\n          type: string\n        postalCode:\n          type: string\n        country:\n          type: string\n        showTagsMatchedSinceLastLogin:\n          type: boolean\n        receiveDailyMatchNotificationEmail:\n          type: boolean\n        offers:\n          type: array\n          items:\n            type: string\n        wants:\n          type: array\n          items:\n            type: string\n    User:\n      type: object\n      title: User\n      description: An individual and unique user of MCCS\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        telephone:\n          type: string\n        lastLoginDate:\n          type: string\n        lastLoginIP:\n          type: string\n    Entity:\n      type: object\n      title: Entity\n      description: An entity object representing a business, non-profit, etc.\n      properties:\n        id:\n          type: string\n        accountNumber:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        telephone:\n          type: string\n        incType:\n          type: string\n        companyNumber:\n          type: string\n        website:\n          type: string\n        declaredTurnover:\n          type: integer\n        description:\n          type: string\n        address:\n          type: string\n        city:\n          type: string\n        region:\n          type: string\n        postalCode:\n          type: string\n        country:\n          type: string\n        status:\n          type: string\n          enum:\n            - pending\n            - accepted\n            - rejected\n            - tradingPending\n            - tradingAccepted\n            - tradingRejected\n        showTagsMatchedSinceLastLogin:\n          type: boolean\n        receiveDailyMatchNotificationEmail:\n          type: boolean\n        offers:\n          type: array\n          items:\n            type: string\n        wants:\n          type: array\n          items:\n            type: string\n        categories:\n          type: array\n          items:\n            type: string\n        isFavorite:\n          type: boolean\n        balance:\n          type: number\n        maxPositiveBalance:\n          type: integer\n        maxNegativeBalance:\n          type: integer\n        pendingTransfers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransferView'\n    Category:\n      type: object\n      title: Category\n      description: A category object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    Tag:\n      type: object\n      title: Tag\n      description: A tag object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    TransferInitiated:\n      type: object\n      title: TransferInitiated\n      description: An object, shown only to the initiator of a transfer immediately after creation, representing the confirmation of an initiated transfer of mutual credits from one entity's account to another\n      properties:\n        id:\n          type: string\n        from:\n          type: string\n        to:\n          type: string\n        amount:\n          type: number\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - transferInitiated\n        dateProposed:\n          type: string\n    TransferView:\n      type: object\n      title: TransferView\n      description: An object representing an initiated/completed/cancelled transfer of mutuals credits from one entity to another\n      properties:\n        id:\n          type: string\n        transfer:\n          type: string\n          enum:\n            - in\n            - out\n        isInitiator:\n          type: boolean\n        accountNumber:\n          type: string\n        entityName:\n          type: string\n        amount:\n          type: number\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - transferInitiated\n            - transferCompleted\n            - transferCancelled\n        cancellationReason:\n          type: string\n        dateProposed:\n          type: string\n        dateCompleted:\n          type: string\n    Balance:\n      type: object\n      title: Balance\n      description: The total amount of mutual credits recorded for the entity based on its transfer activity\n      properties:\n        unit:\n          type: string\n        balance:\n          type: number\n    Error:\n      type: object\n      title: Error\n      description: An error object\n      properties:\n        message:\n          type: string\n    Meta:\n      type: object\n      properties:\n        numberOfResults:\n          type: integer\n        totalPages:\n          type: integer\n  parameters:\n    token:\n      name: token\n      description: The password reset token.\n      in: path\n      required: true\n      schema:\n        type: string\n    offers:\n      name: offers\n      description: A list of goods/services offered by an entity\n      in: query\n      schema:\n          type: string\n      example: pizza,pasta\n    wants:\n      name: wants\n      description: A list of good/services wanted by an entity\n      in: query\n      schema:\n          type: string\n      example: vegetables\n    category:\n      name: category\n      description: A list of entities by category can be retrieved in the search functionality\n      in: query\n      schema:\n        type: string\n        example: restaurant\n    taggedSince:\n      name: tagged_since\n      description: Get a list of entities that have had specified offers or wants tags added since a specific date and time\n      in: query\n      schema:\n        type: string\n        example: \"2019-12-25T12:12:12.001Z\"\n    entityName:\n      name: name\n      description: A full or partial name of an entity can be searched\n      in: query\n      schema:\n        type: string\n        example: Alice's Restau\n    favoritesOnly:\n      name: favorites_only\n      description: Show Favorites Only\n      in: query\n      schema:\n        type: boolean\n        default: false\n    queryingEntityID:\n      name: querying_entity_id\n      description: The entity ID to which the filter is applied (requires user to be logged in)\n      in: query\n      schema:\n        type: string\n        example: 5e561916ca06e1c8596eee9e\n    queryingEntityIDRequired:\n      name: querying_entity_id\n      description: The entity ID to which the account is linked\n      in: query\n      required: true\n      schema:\n        type: string\n        example: 5e561916ca06e1c8596eee9e\n    entityID:\n      name: entityID\n      description: The unique entity ID\n      in: path\n      required: true\n      schema:\n        type: string\n        example: 5eec78f4a880b7c235f66e7c\n    transferID:\n      name: transferID\n      description: The unique transfer ID\n      in: path\n      required: true\n      schema:\n        type: string\n        example: 1UZ7G7qJrIlwpVK9iSPXgx0A2xN\n    transferStatus:\n      name: status\n      description: The status of the transfer\n      in: query\n      required: true\n      schema:\n        type: string\n        enum:\n          - all\n          - initiated\n          - completed\n          - cancelled\n    page:\n      name: page\n      description: The page number\n      in: query\n      schema:\n          type: integer\n          default: 1\n    pageSize:\n      name: page_size\n      description: The number of results per page\n      in: query\n      schema:\n        type: integer\n        default: 10\n        minimum: 1\n        maximum: 100\n  requestBodies:\n    loginUser:\n      description: A JSON object containing an email address and a password\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n              - password\n            properties:\n              email:\n                type: string\n              password:\n                type: string\n          example:\n            email: jdoe@dev.null\n            password: 1TrulySecurePassword!!\n    resetPassword:\n      description: A JSON object containing an email address\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n            properties:\n              email:\n                type: string\n          example:\n            email: jdoe@dev.null\n    updatePassword:\n      description: A JSON object containing a password\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - password\n            properties:\n              password:\n                type: string\n          example:\n            password: 1EvenM00rTrulySecurePassword!@?!\n    updateUser:\n      description: The user fields a user wants to update\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              firstName:\n                type: string\n              lastName:\n                type: string\n              telephone:\n                type: string\n          example:\n            firstName: Jane K.\n            lastName: Doer\n            telephone: \"+442012345678\"\n    updateEntity:\n      description: The entity fields a user wants to update\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              email:\n                type: string\n              telephone:\n                type: string\n              incType:\n                type: string\n              companyNumber:\n                type: string\n              website:\n                type: string\n              declaredTurnover:\n                type: integer\n              description:\n                type: string\n              address:\n                type: string\n              city:\n                type: string\n              region:\n                type: string\n              postalCode:\n                type: string\n              country:\n                type: string\n              showTagsMatchedSinceLastLogin:\n                type: boolean\n              receiveDailyMatchNotificationEmail:\n                type: boolean\n              offers:\n                type: array\n                items:\n                  type: string\n              wants:\n                type: array\n                items:\n                  type: string\n          example:\n            name: New World Pizza PLC\n            email: nwpplc@dev.null\n            telephone: \"+442098765432\"\n            incType: plc\n            companyNumber: B67890\n            website: https://nwpizza.null\n            declaredTurnover: 10000\n            description: \"We show you how good things can taste and where you need to go to eat them!\"\n            address: \"456 Yellow Brick Road\"\n            city: \"London\"\n            region: \"Greater London\"\n            postalCode: \"UK1 2ENG\"\n            country: \"England\"\n            showTagsMatchedSinceLastLogin: false\n            receiveDailyMatchNotificationEmail: false\n            offers:\n              - pizza\n              - wine\n            wants:\n              - flour\n              - mozarella\n              - tomato\n    setFavorite:\n      description: Set or unset a favorite entity\n      required: true\n      content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - addToEntityID\n                - favoriteEntityID\n                -  isFavorite\n              properties:\n                addToEntityID: \n                  type: string\n                favoriteEntityID: \n                  type: string\n                isFavorite:\n                  type: boolean\n            example:\n              addToEntityID: 5de8dea0bdb7911205c0a6d7\n              favoriteEntityID: 5e53e2e34b7e2bd4030e72ce\n              isFavorite: true\n    sendEmail:\n      description: Send an email to an entity\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - senderEntityID\n              - receiverEntityID\n              - body\n            properties:\n              senderEntityID:\n                type: string\n              receiverEntityID:\n                type: string\n              body:\n                type: string\n          example:\n            senderEntityID: 5de8dea0bdb7911205c0a6d7\n            receiverEntityID: 5de8dea0bdb7911205c48d42\n            body: This is the email message body.\n    initiateTransfer:\n      description: Initiate a transfer to/from entity's account from/to another entity\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              transfer:\n                type: string\n                enum:\n                  - in\n                  - out\n              initiator:\n                type: string\n              receiver:\n                type: string\n              amount:\n                type: number\n              description:\n                type: string\n          example:\n            transfer: out\n            initiator: \"7132460355005184\"\n            receiver: \"1234567887654321\"\n            amount: 1.1\n            description: Payment of invoice number 12345\n    confirmOrCancelTransfer:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - action\n            properties:\n              action:\n                type: string\n                enum:\n                  - accept\n                  - reject\n                  - cancel\n              cancellationReason:\n                type: string\n          examples:\n            accept:\n              value:\n                action: accept\n            reject:\n              value:\n                action: reject\n                cancellationReason: some reason for rejecting\n            cancel:\n              value:\n                action: cancel\n                cancellationReason: some reason for cancelling\n  responses:\n    BadRequest:\n      description: The request is missing a required parameter.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: \u003cnamed\u003e parameter is missing.\n    Unauthorized:\n      description: There was an issue with the authentication data for the request.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Could not authenticate you.\n    Forbidden:\n      description: User does not have permission to access the resource.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Permission denied.\n    TooManyRequests:\n      description: The request limit for this resource has been reached for the current rate limit window.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Rate limit exceeded.\n    ServerError:\n      description: An unknown internal error occurred.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Internal server error triggered.\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/ic3software/mccs-alpha-api@88ee3970265a5d411db649b62f6fbe1fcb681bda/-/blob/openapi-user.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ic3software/mccs-alpha-api/blob/88ee3970265a5d411db649b62f6fbe1fcb681bda/openapi-user.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}