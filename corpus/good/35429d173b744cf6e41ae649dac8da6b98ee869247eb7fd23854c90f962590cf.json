{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ChielTimmermans/go-hexagonal-web-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 6738,
			"content": "openapi: 3.0.0\ninfo:\n  title: qrlink\n  description: API documentation for qrlink\n  version: 0.1.0\nservers:\n  - url: https://api.qrlink.nl\n    description: Production server\n  - url: https://api.qa.qrlink.nl\n    description: Internal staging server for quality assurance\n  - url: https://api.dev.qrlink.nl\n    description: Internal development server for testing\n  - url: http://localhost:10100\n    description: Local development server for testing\n  - url: http://localhost:10101\n    description: Local mock server for testing\n\ncomponents:\n  schemas:\n    Language:\n      type: string\n      description: Language\n      example: NLD\n      enum:\n        - NLD\n        - ENG\n\n    Country:\n      type: object\n      properties:\n        id:\n          type: string\n          x-faker: address.countryCode\n          description: \"Country ID in the following format: [ISO 3166-1 Alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1). **XX** country code contains International leagues like 'Europa League' and 'Champions league'. These leagues can't be bind to countries so this will be grouped under 'XX'\"\n          example: NL\n          readOnly: true\n        text:\n          type: string\n          x-faker: address.country\n          description: Country text\n          example: Netherlands\n          readOnly: true\n\n    ErrorCode:\n      type: string\n      description: \u003e\n        Application specific error code:\n         * `account_not_found` - Account not found, this account could not be found.\n         * `coin_balance_insufficient` - Insufficient coin balance, this account does not have sufficient coin balance to buy this item.\n      enum:\n        - \"account_not_found\"\n        - \"insufficient_coins\"\n\n    HTTPStatusCode:\n      type: string\n      description: \u003e\n        HTTP status code:\n         * `200` - OK, the request has succeeded.\n         * `201` - Created, the request has been fulfilled and resulted in a new resource being created. \n         * `204` - No Content, The server has fulfilled the request but does not need to return an entity-body, for example when a DELETE request is executed there is no content to return.\n         * `304` - Not Modified, the resource has not been modified since last requested.\n         * `400` - Bad Request, the request was unacceptable, often due to missing a required parameter.\n         * `401` - Unauthorized, no valid API key provided.\n         * `403` - Forbidden, the API key doesn't have permissions to perform the request.\n         * `404` - Not Found, the requested resource doesn't exist.\n         * `409` - Conflict, the request conflicts with another request.\n         * `413` - Request Entity Too Large, the server refuses to handle this request because it is too large.\n         * `429` - Too Many Requests, too many requests hit the API too quickly. \n         * `500` - Internal Server Error, something went wrong on seat manager's end.\n         * `502` - Bad Gateway, the server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.\n         * `503` - Service Unavailable, the server is currently unable to handle the request due to a temporary overloading or maintenance of the server.\n         * `504` - Gateway Timeout, the server, while acting as a gateway or proxy, did not receive a timely response from the upstream server.\n      example: \"404\"\n      enum:\n        - \"200\"\n        - \"201\"\n        - \"204\"\n        - \"304\"\n        - \"400\"\n        - \"401\"\n        - \"403\"\n        - \"404\"\n        - \"409\"\n        - \"413\"\n        - \"429\"\n        - \"500\"\n        - \"502\"\n        - \"503\"\n        - \"504\"\n\n    Error:\n      type: object\n      description: When a server encounters multiple problems for a single request, the most generally applicable HTTP error code SHOULD be used in the response. For instance, 400 Bad Request might be appropriate for multiple 4xx errors or 500 Internal Server Error might be appropriate for multiple 5xx errors.\n      properties:\n        code:\n          $ref: \"#/components/schemas/ErrorCode\"\n        title:\n          type: string\n          description: A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.\n          example: \"Account not found\"\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence, can be localized.\n          example: \"This account could not be found.\"\n        source:\n          type: object\n          properties:\n            pointer:\n              type: string\n              description: A JSON Pointer to the associated entity in the request document\n              example: \"/data/account/username\"\n            parameter:\n              type: string\n              description: A string indicating which URI query parameter caused the error\n              example: \"filter\"\n\n    Customer:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n          x-faker: random.number\n          description: ID of customer\n          example: 1523\n          readOnly: true\n        name:\n          type: string\n          pattern: \"^[a-zA-Z0-9-_]+$\"\n          x-faker: internet.companyName\n          description: Name of customer\n          example: AceWorks\n          readOnly: false\n        phone_number:\n          type: string\n          x-faker: phone.phoneNumber\n          description: Phone number of customer\n          example: contact@aceworks.nl\n          readOnly: false\n        default_link:\n          type: string\n          x-faker: internet.url\n          description: default link of customer\n          example: https://google.nl\n          readOnly: false\n        primary_color:\n          type: string\n          x-faker: internet.color\n          description: Primary color of customer\n          example: \\#FFFFFF\n        secondary_color:\n          type: string\n          x-faker: internet.color\n          description: Primary color of customer\n          example: \\#FFFFFF\n        tertairy_color:\n          type: string\n          x-faker: internet.color\n          description: Primary color of customer\n          example: \\#FFFFFF\n        created_at:\n          type: string\n          format: date-time\n          description: Date of creation of customer\n          example: 2020-02-03 13:35:07\n        updated_at:\n          type: string\n          format: date-time\n          description: Date of last update of customer\n          example: 2020-02-03 13:35:07\n        deleted_at:\n          type: string\n          format: date-time\n          description: Date of deletion of customer\n          example: 2020-02-03 13:35:07\n",
			"canonicalURL": "/github.com/ChielTimmermans/go-hexagonal-web-server@bdad71b721247f18b1f9fdc73b6582bd0f035fb9/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ChielTimmermans/go-hexagonal-web-server/blob/bdad71b721247f18b1f9fdc73b6582bd0f035fb9/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}