{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Pixboost/transformimgs"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 6657,
			"content": "openapi: 3.0.0\ninfo:\n  title: Image CDN API for Web\n  description: |\n    The main purpose of the API is to help Web Developers to serve\n    images in the best possible way to the users meaning balance between\n    quality and speed.\n    \n    The API could be easily integrated with \u003cimg\u003e or \u003cpicture\u003e tags.\n\n    Use API key \"MjUyMTM3OTQyNw__\" to try out API with any images from pixabay.com.\n  version: 2.2.0\nservers:\n  - url: https://pixboost.com/api/2\ncomponents:\n  securitySchemes:\n    ApiKey:\n      type: apiKey\n      in: query\n      name: auth\n  parameters:\n    imgUrl:\n      description: |\n        Url of the original image including schema.\n        Note that query parameters need to be properly encoded\n      in: path\n      name: imgUrl\n      required: true\n      schema:\n        type: string\n      examples:\n        simple:\n          value: https://cdn.pixabay.com/photo/2014/11/16/23/39/superhero-534120_960_720.jpg\n        with-query-param:\n          value: https://cdn.pixabay.com/photo/2014/11/16/23/39/superhero-534120_960_720.jpg%3Fv%3D123\n          description: will fetch https://cdn.pixabay.com/photo/2014/11/16/23/39/superhero-534120_960_720.jpg?v=123\n    save-data:\n      description: \u003e\n         Sets an optional behaviour when Save-Data header is \"on\".\n         When passing \"off\" value the result image won't use extra\n         compression when data saver mode is on.\n         When passing \"hide\" value the result image will be an empty 1x1 image.\n         When absent the API will use reduced quality for result images.\n      required: true\n      in: query\n      name: save-data\n      schema:\n        type: string\n        enum: [ \"off\", hide ]\n    dppx:\n      description: \u003e\n        Number of dots per pixel defines the ratio between device and CSS pixels.\n        The query parameter is a hint that enables extra optimisations for high\n        density screens. The format is a float number that's the same format as window.devicePixelRatio.\n      required: true\n      in: query\n      name: dppx\n      schema:\n        type: number\n        format: float\n        default: 1\n      examples:\n       desktop:\n         value: 1\n         summary: Most desktop monitors\n       iphonese:\n         value: 2\n         summary: IPhone SE\n       galaxy51:\n         value: 2.625\n         summary: Samsung Galaxy A51\n       galaxy8:\n         value: 4\n         summary: Samsung Galaxy S8\n\nsecurity:\n  - ApiKey: []\n\npaths:\n  /img/{imgUrl}/optimise:\n    get:\n      summary: Optimises a source image  \n      description: |\n        Optimises an image and returns it in the next-gen format supported \n        by the browser. The API knows about supported formats through the \"Accept\"\n        header.\n      operationId: optimiseImage\n      tags:\n        - images\n      parameters:\n        - $ref: \"#/components/parameters/imgUrl\"\n        - $ref: \"#/components/parameters/dppx\"\n        - $ref: \"#/components/parameters/save-data\"\n      responses: \n        200:\n          description: An optimised image\n          content: \n            \"image/*\":\n              schema: \n                type: string\n                format: binary\n            \"image/avif\":\n              schema:\n                type: string\n                format: binary\n            \"image/webp\":\n              schema:\n                type: string\n                format: binary\n  /img/{imgUrl}/resize:\n    get:\n      summary: Resizes a source image\n      description: |\n        Resizes a source image to the specific size, but will always respect\n        aspect ratio. Will apply similar to /optimise optimisations.\n        \n        Use /fit to resize to the exact given size with ignoring aspect ratio.\n      operationId: resizeImage\n      tags:\n        - images\n      parameters:\n        - $ref: \"#/components/parameters/imgUrl\"\n        - $ref: \"#/components/parameters/dppx\"\n        - $ref: \"#/components/parameters/save-data\"\n        - name: size\n          required: true\n          in: query\n          description: |\n            Size of the result image. Should be in the format 'width'x'height', e.g. 200x300\n            Only width or height could be passed, e.g 200, x300.\n          schema:\n            type: string\n          examples:\n           width-and-height:\n             value: 200x300\n           only-width:\n             value: 200\n           only-height:\n             value: x300\n      responses: \n        200:\n          description: A resized image\n          content:\n            \"image/*\":\n              schema:\n                type: string\n                format: binary\n            \"image/avif\":\n              schema:\n                type: string\n                format: binary\n            \"image/webp\":\n              schema:\n                type: string\n                format: binary\n  /img/{imgUrl}/fit:\n    get:\n      summary: Resizes a source image\n      description: |\n        Resizes a source image to the exact specific size and ignoring aspect ratio.\n        aspect ratio. Will apply similar to /optimise optimisations.\n\n        Use /resize to resize and preserve aspect ratio.\n      operationId: fitImage\n      tags:\n        - images\n      parameters:\n        - $ref: \"#/components/parameters/imgUrl\"\n        - $ref: \"#/components/parameters/dppx\"\n        - $ref: \"#/components/parameters/save-data\"\n        - name: size\n          required: true\n          in: query\n          description: |\n            size of the image in the response. Should be in the format 'width'x'height', e.g. 200x300\n          schema:\n            type: string\n            pattern: \\d{1,4}x\\d{1,4}\n          examples:\n           size:\n             value: 200x300\n      responses:\n        200:\n          description: A resized image\n          content:\n            \"image/*\":\n              schema:\n                type: string\n                format: binary\n            \"image/avif\":\n              schema:\n                type: string\n                format: binary\n            \"image/webp\":\n              schema:\n                type: string\n                format: binary\n  /img/{imgUrl}/asis:\n    get:\n      summary: Respond with original image without any modifications\n      description: |\n        This could be useful when your Image API is behind CDN, so any /asis requests\n        will be cached there. The Content-Type preserved from the original.\n      operationId: asisImage\n      tags:\n        - images\n      parameters:\n        - $ref: \"#/components/parameters/imgUrl\"\n      responses:\n        200:\n          description: The source image loaded from imgUrl\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: binary",
			"canonicalURL": "/github.com/Pixboost/transformimgs@2bcf4bf1b2fe62e1c4b86f3a3a5100027f79a308/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Pixboost/transformimgs/blob/2bcf4bf1b2fe62e1c4b86f3a3a5100027f79a308/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}