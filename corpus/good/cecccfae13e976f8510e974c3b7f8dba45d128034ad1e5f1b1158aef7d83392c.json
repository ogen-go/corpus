{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uc-cdis/peregrine"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "openapis/swagger.yaml",
			"byteSize": 5584,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://example.domain/'\ninfo:\n  title: Peregrine OpenAPI Specification\n  version: 0.1.0\n  description: \u003e-\n    GraphQL search microservice for CDIS Gen 3 data commons. Code is available\n    on [GitHub](https://github.com/uc-cdis/peregrine).\n  termsOfService: 'http://cdis.uchicago.edu/terms/'\n  contact:\n    email: cdis@uchicago.edu\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: graphql\n    description: GraphQL Queries\n  - name: system\n    description: System endpoints\npaths:\n  /datasets:\n    get:\n      tags:\n        - datasets\n      summary: Get counts for nodes for each project\n      parameters:\n        - in: query\n          name: nodes\n          description: comma delimited nodes to get counts for\n          schema:\n            type: string\n      responses:\n        '200':\n          description: node counts for each project\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {project__A: {case: 0, aliquot: 1}, project_B: {case: 2, aliquot: 3}}\n        '401':\n          description: unauthorized request\n        '400':\n          description: invalid request\n  /datasets/projects:\n    get:\n      tags:\n        - datasets\n      summary: Get high level information for all projects\n      responses:\n        '200':\n          description: high level information for all projects\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  projects:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Project'\n                example: {projects: [{name: project_A, code: A_code, dbgap_accession_number: 123}]}\n        '401':\n          description: unauthorized request\n        '400':\n          description: invalid request\n\n  /graphql:\n    post:\n      tags:\n        - graphql\n      summary: Perform a GraphQL Query\n      description: \u003e-\n        Perform a graphql query over the data commons given a query, variables,\n        and name.\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QueryOutputRef'\n        '400':\n          description: Invalid input\n        '403':\n          description: Invalid authorization token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryInputInfo'\n        description: The GraphQL query and parameters\n        required: true\n  /getschema:\n    get:\n      tags:\n        - graphql\n      summary: Returns the data dictionary schema json\n      description: \u003e-\n        The data dictionary for the data commons is internally converted from\n        yaml files to json. This endpoint returns the json schema for the\n        dictionary for use in generating queries.\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaOutputRef'\n  /_version:\n    get:\n      tags:\n        - system\n      summary: Returns the version of Peregrine\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionOutputRef'\n  /_status:\n    get:\n      tags:\n        - system\n      summary: Returns if Peregrine is healthy or not\n      description: \u003e-\n        Health check endpoint which checks if Peregrine can connect to its\n        backing PostgreSQL datastore or not.\n      responses:\n        '200':\n          description: Healthy\n        default:\n          description: Unhealthy\ncomponents:\n  schemas:\n    Project:\n      type: object\n      properties:\n        name:\n          type: string\n        code:\n          type: string\n        dbgap_accession_number:\n          type: string\n        description:\n          type: string\n        image_url:\n          type: string\n    QueryInputInfo:\n      type: object\n      properties:\n        query:\n          type: string\n          description: the text of the GraphQL query\n        variables:\n          type: string\n          description: variables for the GraphQL query\n        operationName:\n          type: string\n          description: the name of the operation\n      example:\n        query: '{ project {project_id} }'\n        operationName: null\n        variables: null\n    QueryOutputRef:\n      type: object\n      properties:\n        data:\n          type: object\n          description: the results of the GraphQL query\n    SchemaOutputRef:\n      type: object\n      properties:\n        data:\n          type: object\n          description: the json schema for the data dictionary\n    VersionOutputRef:\n      type: object\n      properties:\n        commit:\n          type: string\n          description: the current git commit hash for this version\n        version:\n          type: string\n          description: the current git tag version\n        dictionary:\n          type: object\n          description: the version information for the data dictionary\n          properties:\n            commit:\n              type: string\n              description: the current git commit hash for the dictionary\n            version:\n              type: string\n              description: the current git tag version for the dictionary\n",
			"canonicalURL": "/github.com/uc-cdis/peregrine@8f99fbb230edbfc8f6ed8f5d96fb4519ac12248b/-/blob/openapis/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/uc-cdis/peregrine/blob/8f99fbb230edbfc8f6ed8f5d96fb4519ac12248b/openapis/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}