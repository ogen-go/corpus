{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/higherkindness/compendium"
		},
		"file": {
			"name": "compendium.yaml",
			"size": 0,
			"path": "src/main/resources/compendium.yaml",
			"byteSize": 6832,
			"content": "openapi: 3.0.0\ninfo:\n  description: Compendium is a service for schema storage, conversion, version management,\n    and client generation. It supports a RESTful interface for storing and\n    serving schemas like Avro, Protobuf, OpenAPI, and Mu.\n  version: 0.0.1\n  title: Compendium\n  contact:\n    email: contact@higherkindness.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: '{protocol}://{host}:{port}'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n      host:\n        default: localhost\n      port:\n        default: \"8080\"\ntags:\n  - name: health\n    description: health ping\n  - name: protocol\n    description: Operations on protocols\n    externalDocs:\n      description: Learn more\n      url: https://github.com/higherkindness/compendium\npaths:\n  \"/health\":\n    get:\n      servers:\n        - url: '{protocol}://{host}:{port}'\n          description: Override base path for health response endpoint\n          variables:\n            protocol:\n              default: http\n            host:\n              default: localhost\n            port:\n              default: \"8080\"\n      tags:\n        - health\n      summary: health response endpoint\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthResponse\"\n          description: Service is healthy\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"500\":\n          description: Internal server error\n  \"/v0/protocol/{protocolId}\":\n    post:\n      tags:\n        - protocol\n      summary: store a protocol\n      parameters:\n        - name: protocolId\n          in: path\n          required: true\n          description: the id of the protocol - can be a string of any alphanumeric\n            character, dash (-), or period (.) with a length less than or equal to 255\n            characters\n          schema:\n            $ref: \"#/components/schemas/ProtocolId\"\n        - name: idlName\n          in: query\n          required: true\n          description: the name of the type of protocol being saved\n          schema:\n            $ref: \"#/components/schemas/IdlName\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Protocol\"\n        description: the protocol to be saved\n        required: true\n      responses:\n        \"201\":\n          description: successfully saved the protocol\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n              description: location of the uploaded protocol\n          content:\n            application/json:\n              schema:\n                description: an integer representing the protocol version\n                type: integer\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: The protocol was not found\n        \"500\":\n          description: Internal server error\n    get:\n      tags:\n        - protocol\n      summary: get a stored protocol by id\n      parameters:\n        - name: protocolId\n          in: path\n          required: true\n          description: the id of the protocol\n          schema:\n            $ref: \"#/components/schemas/ProtocolId\"\n        - name: version\n          in: query\n          required: false\n          description: the version number of the requested protocol\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Protocol\"\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: The protocol was not found for the requested id\n        \"500\":\n          description: Internal server error\n  \"/v0/protocol/{protocolId}/transformation\":\n    get:\n      tags:\n        - protocol\n      summary: get a protocol by id and transform it into a different format\n      parameters:\n        - name: protocolId\n          in: path\n          required: true\n          description: the id of the protocol\n          schema:\n            $ref: \"#/components/schemas/ProtocolId\"\n        - name: target\n          in: query\n          required: true\n          description: the desired target protocol type of the transformation\n          schema:\n            $ref: \"#/components/schemas/IdlNameTarget\"\n        - name: version\n          in: query\n          required: false\n          description: the version number of the requested protocol\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        \"200\":\n          description: successful transformation from one stored protocol to another\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullProtocol\"\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: The protocol was not found for the requested id\n        \"500\":\n          description: Internal server error\ncomponents:\n  schemas:\n    HealthResponse:\n      type: object\n      required:\n        - status\n        - serviceId\n        - version\n      properties:\n        status:\n          type: string\n          description: the status representing the health of the build\n        serviceId:\n          type: string\n          description: the name of the library artifact\n        version:\n          type: string\n          description: the library artifact version\n    IdlName:\n      type: string\n      description: the names of the set of protocols supported to upload to compendium\n      enum:\n        - avro\n        - protobuf\n    IdlNameTarget:\n      type: string\n      description: the names of the set of protocols supported in compendium to be target\n      enum:\n        - mu\n    Protocol:\n      type: object\n      required:\n        - raw\n      properties:\n        raw:\n          type: string\n          description: the raw representation of a protocol\n    ProtocolId:\n      type: string\n      maxLength: 255\n      pattern: ^[\\w-\\.]+$\n    ProtocolMetadata:\n      type: object\n      required:\n        - id\n        - idlName\n        - version\n      properties:\n        id:\n          $ref: \"#/components/schemas/ProtocolId\"\n        idlName:\n          $ref: \"#/components/schemas/IdlName\"\n        version:\n          type: integer\n          minimum: 1\n    FullProtocol:\n      type: object\n      required:\n        - protocol\n        - protocolMetadata\n      properties:\n        protocol:\n          $ref: \"#/components/schemas/Protocol\"\n        protcolMetadata:\n          $ref: \"#/components/schemas/ProtocolMetadata\"\n",
			"canonicalURL": "/github.com/higherkindness/compendium@f457ad9d5ce8400744df9aad26e5bfa9c7617f7e/-/blob/src/main/resources/compendium.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/higherkindness/compendium/blob/f457ad9d5ce8400744df9aad26e5bfa9c7617f7e/src/main/resources/compendium.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}