{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/farmy-ai/covid-fighters"
		},
		"file": {
			"name": "swaggerV3.yml",
			"size": 0,
			"path": "swaggerV3.yml",
			"byteSize": 14455,
			"content": "openapi: 3.0.1\ninfo:\n  title: Covid19 fighter API\n  description: Covid19 fighter API description and specs\n  version: 0.0.0\n  x-logo:\n    url: icon.png\n    backgroundColor: '#FFFFFF'\n    altText: Covid19 fighter Ai logo\nservers:\n  - url: 'http://localhost:4200/api'\nsecurity:\n  - bearerAuth: []\npaths:\n  /submissions:\n    get:\n      description: The Submissions details api allows to visualize the details in list view\n      operationId: details of Submissions\n      parameters:\n        - in: query\n          name: disease_type\n          schema:\n            type: string\n          description: Disease Type\n        - in: query\n          name: data_type\n          schema:\n            type: string\n          description: Data type\n        - in: query\n          name: affiliation\n          schema:\n            type: string\n          description: Affiliation\n        - in: query\n          name: created_at\n          schema:\n            type: string\n          description: Creation date\n        - in: query\n          name: sortBy\n          schema:\n            type: string\n          description: Sort field\n        - in: query\n          name: orderBy\n          schema:\n            type: string\n          description: Order desc or asc\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: Submision per page\n        - in: query\n          name: skip\n          schema:\n            type: integer\n          description: start index\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Submission'\n  /submissions/list:\n    get:\n      description: The List Submissions api allows to visualize the details in list view\n      operationId: List of Submissions\n      parameters:\n        - in: query\n          name: disease_type\n          schema:\n            type: string\n          description: Disease Type\n        - in: query\n          name: data_type\n          schema:\n            type: string\n          description: Data type\n        - in: query\n          name: affiliation\n          schema:\n            type: string\n          description: Affiliation\n        - in: query\n          name: created_at\n          schema:\n            type: string\n          description: Creation date\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n\n  /submissions/download:\n    get:\n      description: The List Submissions api allows to visualize the details in list view\n      operationId: download a List of Submissions\n      parameters:\n        - in: query\n          name: disease_type\n          schema:\n            type: string\n          description: Disease Type\n        - in: query\n          name: data_type\n          schema:\n            type: string\n          description: Data type\n        - in: query\n          name: affiliation\n          schema:\n            type: string\n          description: Affiliation\n        - in: query\n          name: created_at\n          schema:\n            type: string\n          description: Creation date\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n  /submissions/stat:\n    get:\n      description: The Submissions Statistics\n      operationId: Statistics Submissions\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n  /submissions/mine:\n    get:\n      description: My Submissions api allows to visualize the details in list view\n      operationId: My Submissions\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Submission'\n    \n  /submission:\n    post:\n      description: The Create Submission api\n      operationId: Create Submission\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - data_type\n                - disease_type\n                - affiliation\n                - files\n              type: object\n              properties:\n                data_type:\n                  type: string\n                disease_type:\n                  type: string\n                description:\n                  type: string\n                affiliation:\n                  type: string\n                annotation:\n                  type: object\n                  properties: {}\n                tags:\n                  type: array\n                  items:\n                    type: string\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n        required: true\n      responses:\n        '201':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n  '/submission/{id}':\n    get:\n      description: The Get Submission Details api allows to visualize the details\n      operationId: Get Submission Details\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Submission'\n    put:\n      description: updateSubmission api\n      operationId: Update Submission\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Submission'\n        required: true\n      responses:\n        '200':\n          description: ''\n          content: {}\n  /login:\n    post:\n      description: login user and Generate User Token api d\n      operationId: login User\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - password\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n  /users:\n    get:\n      description: The User List api allows to visualize the details in list view\n      operationId: List of Users\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /user:\n    get:\n      description: The connected User api allows to visualize the connected user details\n      operationId: Connected Users\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    post:\n      description: Register user and send confirmation email.\n      operationId: Register User\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n  '/user/{id}':\n    get:\n      description: The Get User Details api allows to visualize the details\n      operationId: Get User Data\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Submission'\n    put:\n      description: Modify user data\n      operationId: Modify user\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n  '/confirmation/{token}':\n    get:\n      description: confirmation link\n      parameters:\n        - name: token\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: string\n  /resetpasswrd:\n    post:\n      description: reset forgeten password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n              \n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: string\n  /storepasswrd:\n    post:\n      description: Store new password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: string\n                token:\n                  type: string\n                password:\n                  type: string\n              \n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: string\n  /tags:\n    get:\n      description: Get all tags\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /affiliations:\n    get:\n      description: Get all affiliations\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /predict:\n    post:\n      description: Store new password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tags:\n                  type: array\n                  items:\n                    type: string\n                file:\n                  type: string\n                  format: binary\n                id_user:\n                  type: string\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                  message:\n                    type: string\n                  Data:\n                    $ref: '#/components/schemas/Prediction'\n                  \ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Submission:\n      required:\n        - affiliation\n        - data_type\n        - description\n        - disease_type\n      type: object\n      properties:\n        id:\n          title: _id\n          type: integer\n          readOnly: true\n        data_type:\n          title: Data Type\n          type: string\n        disease_type:\n          title: Disease Yype\n          type: string\n        description:\n          title: Description\n          type: string\n        createdAt:\n          title: Created timestamp\n          type: number\n        updatedAt:\n          title: Updated timestamp\n          type: number\n        affiliation:\n          title: Data Affiliation\n          type: string\n        upload_name:\n          title: Upload Filename\n          type: string\n        annotation:\n          title: image Annotation\n          type: object\n          properties: {}\n        s3_path:\n          title: Image path in AWS S3\n          type: string\n        tags:\n          title: Data hashtags\n          type: array\n          items:\n            type: string\n        id_user:\n            title: User Identifier\n            type: string\n    User:\n      required:\n        - email\n        - username\n      type: object\n      properties:\n        email:\n          title: Email\n          type: string\n          format: email\n        username:\n          title: username\n          type: string\n        role:\n          title: role\n          type: string\n        first_name:\n          title: First name\n          type: string\n        last_name:\n          title: Last name\n          type: string\n        affiliation:\n          title: Data Affiliation\n          type: string\n    Prediction:\n      type: object\n      properties:\n        id:\n          title: _id\n          type: integer\n          readOnly: true\n        predicted_class:\n          title: Predicted Class\n          type: string\n        upload_name:\n          title: Upload Filename\n          type: string\n        prediction_array:\n          title: Prediction Array\n          type: object\n          properties: {}\n        s3_path:\n          title: Image path in AWS S3\n          type: string\n        tags:\n          title: Data hashtags\n          type: array\n          items:\n            type: string\n        id_user:\n            title: User Identifier\n            type: string\n        createdAt:\n          title: Created timestamp\n          type: number\n",
			"canonicalURL": "/github.com/farmy-ai/covid-fighters@fc1b99cdd9baa536c781c95c45ffad2307e4ac42/-/blob/swaggerV3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/farmy-ai/covid-fighters/blob/fc1b99cdd9baa536c781c95c45ffad2307e4ac42/swaggerV3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}