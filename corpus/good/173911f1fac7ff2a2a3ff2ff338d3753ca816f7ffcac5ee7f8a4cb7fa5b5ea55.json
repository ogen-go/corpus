{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "departureboard.io-2.0-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/departureboard.io-2.0-openapi.yaml",
			"byteSize": 24589,
			"content": "openapi: 3.0.0\nservers:\n  - description: Production Server (uses live data)\n    url: https://api.departureboard.io/api/v2.0\ninfo:\n  contact:\n    x-twitter: departure_board\n  description: The departureboard.io API is a high performance API, written in Golang, that\n    provides two main functions. A REST API interface to the legacy National\n    Rail SOAP API, giving developers the ability to pull live information on\n    departures, arrivals, and services from National Rail, without having to use\n    the legacy SOAP API, and a REST API interface for additional National Rail\n    information, giving developers the ability to pull a range of information\n    about the Rail Network, via a REST API interface. This is not an offering\n    that National Rail currently provide, and is custom developed. Data is\n    sourced from periodically updated XML documents, parsed, and provided for\n    consumption via the departureboard.io API.\n  title: departureboard.io\n  version: \"2.0\"\n  x-apisguru-categories:\n    - transport\n  x-logo:\n    url: https://twitter.com/departure_board/profile_image?size=original\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: openapi\n      url: https://api.departureboard.io/openapi.json\n      version: \"3.0\"\n  x-providerName: departureboard.io\npaths:\n  \"/getArrivalsAndDeparturesByCRS/{CRS}\":\n    get:\n      operationId: getArrivalsAndDeparturesByCRS\n      parameters:\n        - description: The CRS (Computer Reservation System) for the Station you wish to\n            get departure and arrival information for, e.g. KGX for London Kings\n            Cross.\n          explode: false\n          in: path\n          name: CRS\n          required: true\n          schema:\n            maxLength: 3\n            minLength: 3\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The number of arriving and departing services to return. This is a\n            maximum value, less may be returned if there is not a sufficient\n            amount of services arriving to or departing from this station within\n            the time window specified.\n          explode: true\n          in: query\n          name: numServices\n          required: false\n          schema:\n            default: 10\n            type: integer\n          style: form\n        - description: The time window in minutes to offset the arrival and departure\n            information by. For example, a value of 20 will not show services\n            arriving to or departing from the station within the next 20\n            minutes.\n          explode: true\n          in: query\n          name: timeOffset\n          required: false\n          schema:\n            default: 0\n            maximum: 119\n            minimum: -239\n            type: integer\n          style: form\n        - description: The time window in minutes to offset the arrival and departure\n            information by. For example, a value of 20 will not show services\n            arriving to or departing from the selected station within the next\n            20 minutes.\n          explode: true\n          in: query\n          name: timeWindow\n          required: false\n          schema:\n            default: 120\n            minimum: 0\n            type: integer\n          style: form\n        - description: Should the response contain information on the calling points for\n            each service? If set to false, calling points will not be returned.\n          explode: true\n          in: query\n          name: serviceDetails\n          required: false\n          schema:\n            default: true\n            type: boolean\n          style: form\n        - description: The CRS (Computer Reservation System) code to filter the results by.\n            When setting this you must also set the filterType parameter. For\n            example, performing a lookup for PAD (London Paddington) and setting\n            filterStation to RED (Reading) and filterType to from, will only\n            show services arriving to London Paddington that stopped at Reading.\n            Setting a filter for getArrivalsAndDeparturesByCRS is similar to\n            performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the\n            appropriate filterStation parameter. However using the\n            getArrivalsAndDeparturesByCRS endpoint shows more details for each\n            of the returned services.\n          explode: true\n          in: query\n          name: filterStation\n          required: false\n          schema:\n            type: string\n          style: form\n        - description: Determines if the filterStation parameter should be applied for\n            services arriving to, or leaving from the selected station. Required\n            if filterStation is set.\n          explode: true\n          in: query\n          name: filterType\n          required: false\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: getArrivalsAndDeparturesByCRS is used to get a list of services arriving\n        to and departing from a UK train station by the CRS (Computer\n        Reservation System) code. This will typically return a list of train\n        services, but will also return any replacement bus or ferry services\n        that are in place.\n      tags:\n        - Departures \u0026 Arrivals\n  \"/getArrivalsByCRS/{CRS}\":\n    get:\n      operationId: getArrivalsByCRS\n      parameters:\n        - description: The CRS (Computer Reservation System) for the Station you wish to\n            get arrival information for, e.g. KGX for London Kings Cross.\n          explode: false\n          in: path\n          name: CRS\n          required: true\n          schema:\n            maxLength: 3\n            minLength: 3\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The number of arriving train services to return. This is a maximum\n            value, less may be returned if there is not a sufficient amount of\n            services running to this station within the time window specified.\n          explode: true\n          in: query\n          name: numServices\n          required: false\n          schema:\n            default: 10\n            type: integer\n          style: form\n        - description: The time window in minutes to offset the arrival information by. For\n            example, a value of 20 will not show services arriving within the\n            next 20 minutes.\n          explode: true\n          in: query\n          name: timeOffset\n          required: false\n          schema:\n            default: 0\n            maximum: 119\n            minimum: -239\n            type: integer\n          style: form\n        - description: The time window to show train services for in minutes. For example,\n            a value of 60 will show services arriving to the station in the next\n            60 minutes.\n          explode: true\n          in: query\n          name: timeWindow\n          required: false\n          schema:\n            default: 120\n            minimum: 0\n            type: integer\n          style: form\n        - description: Should the response contain information on the calling points for\n            each service? If set to false, calling points will not be returned.\n          explode: true\n          in: query\n          name: serviceDetails\n          required: false\n          schema:\n            default: true\n            type: boolean\n          style: form\n        - description: The CRS (Computer Reservation System) code to filter the results by.\n            For example, performing a lookup for PAD (London Paddington) and\n            setting filterStation to RED (Reading), will only show services\n            arriving to Paddington that stopped at Reading.\n          explode: true\n          in: query\n          name: filterStation\n          required: false\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: getArrivalsByCRS is used to get a list of services arriving to a UK\n        train station by the CRS (Computer Reservation System) code. This will\n        typically return a list of train services, but will also return any\n        replacement bus or ferry services that are in place.\n      tags:\n        - Departures \u0026 Arrivals\n  \"/getDeparturesByCRS/{CRS}\":\n    get:\n      operationId: getDeparturesByCRS\n      parameters:\n        - description: The CRS (Computer Reservation System) for the station you wish to\n            get departure information for, e.g. KGX for London Kings Cross.\n          explode: false\n          in: path\n          name: CRS\n          required: true\n          schema:\n            maxLength: 3\n            minLength: 3\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The number of departing services to return. This is a maximum value,\n            less may be returned if there is not a sufficient amount of services\n            running from the selected station within the time window specified.\n          explode: true\n          in: query\n          name: numServices\n          required: false\n          schema:\n            default: 10\n            type: integer\n          style: form\n        - description: The time window in minutes to offset the departure information by.\n            For example, a value of 20 will not show services departing within\n            the next 20 minutes.\n          explode: true\n          in: query\n          name: timeOffset\n          required: false\n          schema:\n            default: 0\n            maximum: 119\n            minimum: -239\n            type: integer\n          style: form\n        - description: The time window to show services for in minutes. For example, a\n            value of 60 will show services departing the station in the next 60\n            minutes.\n          explode: true\n          in: query\n          name: timeWindow\n          required: false\n          schema:\n            default: 120\n            minimum: 0\n            type: integer\n          style: form\n        - description: Should the response contain information on the calling points for\n            each service? If set to false, calling points will not be returned.\n          explode: true\n          in: query\n          name: serviceDetails\n          required: false\n          schema:\n            default: true\n            type: boolean\n          style: form\n        - description: The CRS (Computer Reservation System) code to filter the results by.\n            For example, performing a lookup for PAD (London Paddington) and\n            setting filterStation to RED (Reading), will only show services\n            departing from Paddington that stop at Reading.\n          explode: true\n          in: query\n          name: filterStation\n          required: false\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: getDeparturesByCRS is used to get a list of services departing from a UK\n        train station by the CRS (Computer Reservation System) code. This will\n        typically return a list of train services, but will also return any\n        replacement bus or ferry services that are in place.\n      tags:\n        - Departures \u0026 Arrivals\n  \"/getFastestDeparturesByCRS/{CRS}\":\n    get:\n      operationId: getFastestDeparturesByCRS\n      parameters:\n        - description: The CRS (Computer Reservation System) for the station you wish to\n            get departure information for, e.g. KGX for London Kings Cross.\n          explode: false\n          in: path\n          name: CRS\n          required: true\n          schema:\n            maxLength: 3\n            minLength: 3\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The CRS (Computer Reservation System) codes to show the fastest\n            departing services to. Up to 20 destination stations can be\n            specified. These should be split by a comma, for example\n            HAY,EAL,PAD.\n          explode: true\n          in: query\n          name: filterList\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The time window in minutes to offset the departure information by.\n            For example, a value of 20 will show the fastest services departing\n            after 20 minutes.\n          explode: true\n          in: query\n          name: timeOffset\n          required: false\n          schema:\n            default: 0\n            maximum: 119\n            minimum: -239\n            type: integer\n          style: form\n        - description: The time window to show train services for in minutes. For example,\n            a value of 60 will show the fastest services departing the station\n            in the next 60 minutes.\n          explode: true\n          in: query\n          name: timeWindow\n          required: false\n          schema:\n            default: 120\n            minimum: 0\n            type: integer\n          style: form\n        - description: Should the response contain information on the calling points for\n            each service? If set to false, calling points will not be returned.\n          explode: true\n          in: query\n          name: serviceDetails\n          required: false\n          schema:\n            default: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: getFastestDeparturesByCRS is used to get the fastest next service\n        running between two stations. Multiple destinations can be specified.\n        This will typically return a single train service, but will also return\n        a replacement bus or ferry service if in place.\n      tags:\n        - Fastest and Next Departures\n  \"/getNextDeparturesByCRS/{CRS}\":\n    get:\n      operationId: getNextDeparturesByCRS\n      parameters:\n        - description: The CRS (Computer Reservation System) for the station you wish to\n            get departure information for, e.g. KGX for London Kings Cross.\n          explode: false\n          in: path\n          name: CRS\n          required: true\n          schema:\n            maxLength: 3\n            minLength: 3\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The CRS (Computer Reservation System) codes to show departing\n            services to. Up to 20 destination stations can be specified. These\n            should be split by a comma, for example HAY,EAL,PAD.\n          explode: true\n          in: query\n          name: filterList\n          required: true\n          schema:\n            type: string\n          style: form\n        - description: The time window in minutes to offset the arrival and departure\n            information by. For example, a value of 20 will not show services\n            arriving to or departing from the station within the next 20\n            minutes.\n          explode: true\n          in: query\n          name: timeOffset\n          required: false\n          schema:\n            default: 0\n            maximum: 119\n            minimum: -239\n            type: integer\n          style: form\n        - description: The time window in minutes to offset the arrival and departure\n            information by. For example, a value of 20 will not show services\n            arriving to or departing from the selected station within the next\n            20 minutes.\n          explode: true\n          in: query\n          name: timeWindow\n          required: false\n          schema:\n            default: 120\n            minimum: 0\n            type: integer\n          style: form\n        - description: Should the response contain information on the calling points for\n            each service? If set to false, calling points will not be returned.\n          explode: true\n          in: query\n          name: serviceDetails\n          required: false\n          schema:\n            default: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: getNextDeparturesByCRS is used to get the next service running between\n        two stations. Multiple destinations can be specified. This will\n        typically return a single train service, but will also return a\n        replacement bus or ferry service if in place. This will return the next\n        departures for each of the filterList stations specified. It may not\n        return the fastest next service. To get the fastest next service use the\n        getFastestDeparturesByCRS endpoint.\n      tags:\n        - Fastest and Next Departures\n  \"/getServiceDetailsByID/{serviceID}\":\n    get:\n      operationId: getServiceDetailsByID\n      parameters:\n        - description: The Service ID for the Train Service you wish to look up in the URL\n            Safe format. For example \"qsec4O8LW7k8ITcOt_ir4Q--\".\n          explode: false\n          in: path\n          name: serviceID\n          required: true\n          schema:\n            type: string\n          style: simple\n        - description: The National Rail OpenLDBWS API Key to use for looking up service\n            information. You must register with National Rail to obtain this\n            key.\n          explode: true\n          in: query\n          name: apiKey\n          required: true\n          schema:\n            type: string\n          style: form\n      responses:\n        \"200\":\n          description: OK -- The API request was successful, and returned a response.\n        \"400\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"401\":\n          description: Bad Request -- Your request is invalid. See the error message for\n            more information.\n        \"405\":\n          description: Method Not Allowed -- You tried to call the API endpoint with an\n            invalid method.\n        \"429\":\n          description: Too Many Requests -- You have exceeded the rate limit. Get in touch\n            to arrange an exception, or slow down.\n        \"500\":\n          description: Internal Server Error -- We had a problem with our server. Try again\n            later.\n      summary: 'getServiceDetailsByID is used to get information on a service, by the\n        Service ID. This will typically return a train service, but will also\n        return a bus and ferry services. The Service ID must be provided in the\n        serviceIDUrlSafe format that is provided in the response for Arrival and\n        Departure Boards. If required, these can be manually converted\n        replacing: \"=\" with \"/\" and \"/\" with \"_\". For example, a National Rail\n        Service ID of qsec4O8LW7k8ITcOt/ir4Q== becomes qsec4O8LW7k8ITcOt_ir4Q--.\n        However, you should be using the value provided in the Arrival and\n        Departure Board responses. A service ID is specific to a station, and\n        can only be looked up for a short time after a train/bus/ferry arrives\n        at, or departs from a station. This is a National Rail limitation.'\n      tags:\n        - Service Information\ncomponents: {}\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/departureboard.io-2.0-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/departureboard.io-2.0-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}