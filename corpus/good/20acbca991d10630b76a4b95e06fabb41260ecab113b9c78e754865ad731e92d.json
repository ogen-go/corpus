{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zadam/trilium"
		},
		"file": {
			"name": "etapi.openapi.yaml",
			"size": 0,
			"path": "src/etapi/etapi.openapi.yaml",
			"byteSize": 26393,
			"content": "openapi: \"3.0.3\"\ninfo:\n  version: 1.0.0\n  title: ETAPI\n  description: External Trilium API\n  contact:\n    name: zadam\n    email: zadam.apps@gmail.com\n    url: https://github.com/zadam/trilium\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:37740/etapi\n  - url: http://localhost:8080/etapi\nsecurity:\n  - EtapiTokenAuth: []\npaths:\n  /create-note:\n    post:\n      description: Create a note and place it into the note tree\n      operationId: createNote\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateNoteDef'\n      responses:\n        '201':\n          description: note created\n          content:\n            application/json:\n              schema:\n                properties:\n                  note:\n                    $ref: '#/components/schemas/Note'\n                    description: Created note\n                  branch:\n                    $ref: '#/components/schemas/Branch'\n                    description: Created branch\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notes:\n    get:\n      description: Search notes\n      operationId: searchNotes\n      parameters:\n        - name: search\n          in: query\n          required: true\n          description: search query string as described in https://github.com/zadam/trilium/wiki/Search\n          schema:\n            type: string\n          examples:\n            fulltext:\n              summary: Fulltext search for keywords (not exact match)\n              value: 'towers tolkien'\n            fulltextExactMatch:\n              summary: Fulltext search for exact match (notice the double quotes)\n              value: '\"Two Towers\"'\n            fulltextWithLabel:\n              summary: Fulltext search for keyword AND matching label\n              value: 'towers #book'\n        - name: fastSearch\n          in: query\n          required: false\n          description: enable fast search (fulltext doesn't look into content)\n          schema:\n            type: boolean\n            default: false\n        - name: includeArchivedNotes\n          in: query\n          required: false\n          description: search by default ignores archived notes. Set to 'true' to includes archived notes into search results.\n          schema:\n            type: boolean\n            default: false\n        - name: ancestorNoteId\n          in: query\n          required: false\n          description: search only in a subtree identified by the subtree noteId. By default whole tree is searched.\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: ancestorDepth\n          in: query\n          required: false\n          description: define how deep in the tree should the notes be searched\n          schema:\n            type: string\n          examples:\n            directChildren:\n              summary: depth of exactly 1 (direct children) to the ancestor (root if not set)\n              value: eq1\n            grandGrandChildren:\n              summary: depth of exactly 3 to the ancestor (root if not set)\n              value: eq3\n            lessThan4:\n              summary: depth less than 4 (so 1, 2, 3) to the ancestor (root if not set)\n              value: lt4\n            greaterThan2:\n              summary: depth greater than 2 (so 3, 4, 5, 6...) to the ancestor (root if not set)\n              value: gt4\n        - name: orderBy\n          in: query\n          required: false\n          description: name of the property/label to order search results by\n          schema:\n            type: string\n          example:\n            - title\n            - '#publicationDate'\n            - isProtected\n            - isArchived\n            - dateCreated\n            - dateModified\n            - utcDateCreated\n            - utcDateModified\n            - parentCount\n            - childrenCount\n            - attributeCount\n            - labelCount\n            - ownedLabelCount\n            - relationCount\n            - ownedRelationCount\n            - relationCountIncludingLinks\n            - ownedRelationCountIncludingLinks\n            - targetRelationCount\n            - targetRelationCountIncludingLinks\n            - contentSize\n            - noteSize\n            - revisionCount\n        - name: orderDirection\n          in: query\n          required: false\n          description: order direction, ascending or descending\n          schema:\n            type: string\n            default: asc\n            enum:\n              - asc\n              - desc\n        - name: limit\n          in: query\n          required: false\n          description: limit the number of results you want to receive\n          schema:\n            type: integer\n          example: 10\n        - name: debug\n          in: query\n          required: false\n          description: set to true to get debug information in the response (search query parsing)\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: search response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /notes/{noteId}:\n    parameters:\n      - name: noteId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/EntityId'\n    get:\n      description: Returns a note identified by its ID\n      operationId: getNoteById\n      responses:\n        '200':\n          description: note response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      description: patch a note identified by the noteId with changes in the body\n      operationId: patchNoteById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Note'\n      responses:\n        '200':\n          description: note updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      description: deletes a single note based on the noteId supplied\n      operationId: deleteNoteById\n      responses:\n        '204':\n          description: note deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /branches/{branchId}:\n    parameters:\n      - name: branchId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/EntityId'\n    get:\n      description: Returns a branch identified by its ID\n      operationId: getBranchById\n      responses:\n        '200':\n          description: branch response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      description: \u003e\n        Create a branch (clone a note to a different location in the tree).\n        In case there is a branch between parent note and child note already, \n        then this will update the existing branch with prefix, notePosition and isExpanded.\n      operationId: postBranch\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Branch'\n      responses:\n        '200':\n          description: branch updated (branch between parent note and child note already existed)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n        '201':\n          description: branch created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      description: patch a branch identified by the branchId with changes in the body\n      operationId: patchBranchById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Branch'\n      responses:\n        '200':\n          description: branch updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      description: \u003e\n        deletes a branch based on the branchId supplied. If this is the last branch of the (child) note, \n        then the note is deleted as well.\n      operationId: deleteBranchById\n      responses:\n        '204':\n          description: branch deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /attributes/{attributeId}:\n    parameters:\n      - name: attributeId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/EntityId'\n    get:\n      description: Returns an attribute identified by its ID\n      operationId: getAttributeById\n      responses:\n        '200':\n          description: attribute response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attribute'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      description: create an attribute for a given note\n      operationId: postAttribute\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attribute'\n      responses:\n        '201':\n          description: attribute created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attribute'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      description: patch a attribute identified by the attributeId with changes in the body\n      operationId: patchAttributeById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attribute'\n      responses:\n        '200':\n          description: attribute updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attribute'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      description: deletes a attribute based on the attributeId supplied.\n      operationId: deleteAttributeById\n      responses:\n        '204':\n          description: attribute deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /refresh-note-ordering/{parentNoteId}:\n    parameters:\n      - name: parentNoteId\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/EntityId'\n    post:\n      description: \u003e \n        notePositions in branches are not automatically pushed to connected clients and need a specific instruction. \n        If you want your changes to be in effect immediately, call this service after setting branches' notePosition. \n        Note that you need to supply \"parentNoteId\" of branch(es) with changed positions.\n      operationId: postRefreshNoteOrdering\n      responses:\n        '204':\n          description: note ordering will be asynchronously updated in all connected clients\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /inbox/{date}:\n    get:\n      description: \u003e \n        returns an \"inbox\" note, into which note can be created. Date will be used depending on whether the inbox\n        is a fixed note (identified with #inbox label) or a day note in a journal.\n      operationId: getInboxNote\n      parameters:\n        - name: date\n          in: path\n          required: true\n          schema:\n            type: string\n            format: date\n          example: 2022-02-22\n      responses:\n        '200':\n          description: inbox note\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /calendar/days/{date}:\n    get:\n      description: returns a day note for a given date. Gets created if doesn't exist.\n      operationId: getDayNote\n      parameters:\n        - name: date\n          in: path\n          required: true\n          schema:\n            type: string\n            format: date\n          example: 2022-02-22\n      responses:\n        '200':\n          description: day note\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /calendar/weeks/{date}:\n    get:\n      description: returns a week note for a given date. Gets created if doesn't exist.\n      operationId: getWeekNote\n      parameters:\n        - name: date\n          in: path\n          required: true\n          schema:\n            type: string\n            format: date\n          example: 2022-02-22\n      responses:\n        '200':\n          description: week note\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /calendar/months/{month}:\n    get:\n      description: returns a week note for a given date. Gets created if doesn't exist.\n      operationId: getMonthNote\n      parameters:\n        - name: month\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: '[0-9]{4}-[0-9]{2}'\n          example: 2022-02\n      responses:\n        '200':\n          description: month note\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /calendar/years/{year}:\n    get:\n      description: returns a week note for a given date. Gets created if doesn't exist.\n      operationId: getYearNote\n      parameters:\n        - name: year\n          in: path\n          required: true\n          schema:\n            type: string\n            pattern: '[0-9]{4}-[0-9]{2}'\n          example: 2022-02\n      responses:\n        '200':\n          description: year note\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /auth/login:\n    post:\n      description: get an ETAPI token based on password for further use with ETAPI\n      operationId: login\n      security: [] # no token based auth for login endpoint\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                password:\n                  type: string\n                  description: user's password used to e.g. login to Trilium server and/or protect notes\n      responses:\n        '201':\n          description: auth token\n          content:\n            application/json:\n              schema:\n                properties:\n                  authToken:\n                    type: string\n                    example: Bc4bFn0Ffiok_4NpbVCDnFz7B2WU+pdhW8B5Ne3DiR5wXrEyqdjgRIsk=\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /auth/logout:\n    post:\n      description: logout (delete/deactivate) an ETAPI token\n      operationId: logout\n      responses:\n        '204':\n          description: logout successful\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /app-info:\n    get:\n      description: returns information about the running Trilium instance\n      operationId: getAppInfo\n      responses:\n        '200':\n          description: app info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppInfo'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    EtapiTokenAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n  schemas:\n    CreateNoteDef:\n      type: object\n      required:\n        - parentNoteId\n        - title\n        - type\n        - content\n      properties:\n        parentNoteId:\n          $ref: '#/components/schemas/EntityId'\n          description: Note ID of the parent note in the tree\n        title:\n          type: string\n        type:\n          type: string\n          enum:\n            - text\n            - code\n            - file\n            - image\n            - search\n            - book\n            - relation-map\n            - render\n        mime:\n          type: string\n          description: this needs to be specified only for note types 'code', 'file', 'image'.\n          example: application/json\n        content:\n          type: string\n        notePosition:\n          type: integer\n          description: \u003e \n            Position of the note in the parent. Normal ordering is 10, 20, 30 ... \n            So if you want to create a note on the first position, use e.g. 5, for second position 15, for last e.g. 1000000\n        prefix:\n          type: string\n          description: \u003e\n            Prefix is branch (placement) specific title prefix for the note. \n            Let's say you have your note placed into two different places in the tree, \n            but you want to change the title a bit in one of the placements. For this you can use prefix.\n        isExpanded:\n          type: boolean\n          description: true if this note (as a folder) should appear expanded\n        noteId:\n          $ref: '#/components/schemas/EntityId'\n          description: DON'T specify unless you want to force a specific noteId\n        branchId:\n          $ref: '#/components/schemas/EntityId'\n          description: DON'T specify unless you want to force a specific branchId\n    Note:\n      type: object\n      properties:\n        noteId:\n          $ref: '#/components/schemas/EntityId'\n          readOnly: true\n        title:\n          type: string\n        type:\n          type: string\n          enum: [text, code, render, file, image, search, relation-map, book, note-map, mermaid]\n        mime:\n          type: string\n        isProtected:\n          type: boolean\n          readOnly: true\n        attributes:\n          $ref: '#/components/schemas/AttributeList'\n          readOnly: true\n        parentNoteIds:\n          $ref: '#/components/schemas/EntityIdList'\n          readOnly: true\n        childNoteIds:\n          $ref: '#/components/schemas/EntityIdList'\n          readOnly: true\n        parentBranchIds:\n          $ref: '#/components/schemas/EntityIdList'\n          readOnly: true\n        childBranchIds:\n          $ref: '#/components/schemas/EntityIdList'\n          readOnly: true\n        dateCreated:\n          $ref: '#/components/schemas/LocalDateTime'\n          readOnly: true\n        dateModified:\n          $ref: '#/components/schemas/LocalDateTime'\n          readOnly: true\n        utcDateCreated:\n          $ref: '#/components/schemas/UtcDateTime'\n          readOnly: true\n        utcDateModified:\n          $ref: '#/components/schemas/UtcDateTime'\n          readOnly: true\n    Branch:\n      type: object\n      description: Branch places the note into the tree, it represents the relationship between a parent note and child note\n      required:\n        - noteId\n        - parentNoteId\n      properties:\n        branchId:\n          $ref: '#/components/schemas/EntityId'\n        noteId:\n          $ref: '#/components/schemas/EntityId'\n          readOnly: true\n          description: identifies the child note\n        parentNoteId:\n          $ref: '#/components/schemas/EntityId'\n          readOnly: true\n          description: identifies the parent note\n        prefix:\n          type: string\n        notePosition:\n          type: integer\n          format: int32\n        isExpanded:\n          type: boolean\n        utcDateModified:\n          $ref: '#/components/schemas/UtcDateTime'\n          readOnly: true\n    Attribute:\n      type: object\n      description: Attribute (Label, Relation) is a key-value record attached to a note.\n      required:\n        - noteId\n      properties:\n        attributeId:\n          $ref: '#/components/schemas/EntityId'\n        noteId:\n          $ref: '#/components/schemas/EntityId'\n          readOnly: true\n          description: identifies the child note\n        type:\n          type: string\n          enum: [label, relation]\n        name:\n          type: string\n          pattern: '^[\\p{L}\\p{N}_:]+'\n          example: shareCss\n        value:\n          type: string\n        position:\n          type: integer\n          format: int32\n        isInheritable:\n          type: boolean\n        utcDateModified:\n          $ref: '#/components/schemas/UtcDateTime'\n          readOnly: true\n    AttributeList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Attribute'\n    SearchResponse:\n      type: object\n      required:\n        - results\n      properties:\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/Note'\n        debugInfo:\n          type: object\n          description: debugging info on parsing the search query enabled with \u0026debug=true parameter\n    EntityId:\n      type: string\n      pattern: '[a-zA-Z0-9]{4,32}'\n      example: evnnmvHTCgIn\n    EntityIdList:\n      type: array\n      items:\n        $ref: '#/components/schemas/EntityId'\n    LocalDateTime:\n      type: string\n      pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}\\+[0-9]{4}'\n      example: 2021-12-31 20:18:11.939+0100\n    UtcDateTime:\n      type: string\n      pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z'\n      example: 2021-12-31 19:18:11.939Z\n    AppInfo:\n      type: object\n      required:\n        - statu\n        - code\n        - message\n      properties:\n        appVersion:\n          type: string\n          description: Trilium version\n          example: 0.50.2\n        dbVersion:\n          type: integer\n          format: int32\n          description: DB version\n          example: 194\n        syncVersion:\n          type: integer\n          format: int32\n          description: Sync protocol version\n          example: 25\n        buildDate:\n          type: string\n          format: date-time\n          description: build date\n          example: 2022-02-09T22:52:36+01:00\n        buildRevision:\n          type: string\n          description: git build revision\n          example: 23daaa2387a0655685377f0a541d154aeec2aae8\n        dataDirectory:\n          type: string\n          description: data directory where Trilium stores files\n          example: /home/user/data\n        clipperProtocolVersion:\n          type: string\n          description: version of the supported Trilium Web Clipper protocol\n          example: 1.0\n        utcDateTime:\n          type: string\n          description: current UTC date time\n          example: 2022-03-07T21:54:25.277Z\n    Error:\n      type: object\n      required:\n        - status\n        - code\n        - message\n      properties:\n        status:\n          type: integer\n          format: int32\n          description: HTTP status, identical to the one given in HTTP response\n          example: 400\n        code:\n          type: string\n          description: stable string constant\n          example: NOTE_IS_PROTECTED\n        message:\n          type: string\n          description: Human readable error, potentially with more details,\n          example: Note 'evnnmvHTCgIn' is protected and cannot be modified through ETAPI\n",
			"canonicalURL": "/github.com/zadam/trilium@2e1bef2df76f0d4748e53ad37f79d7d1ef5d656e/-/blob/src/etapi/etapi.openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zadam/trilium/blob/2e1bef2df76f0d4748e53ad37f79d7d1ef5d656e/src/etapi/etapi.openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}