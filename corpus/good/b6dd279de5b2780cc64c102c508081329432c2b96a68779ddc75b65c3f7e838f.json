{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws/amazon-genomics-cli"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "packages/wes_adapter/rest_api/openapi/openapi.yaml",
			"byteSize": 26752,
			"content": "openapi: 3.0.1\ninfo:\n  title: Workflow Execution Service\n  version: 1.0.0\nservers:\n- url: /ga4gh/wes/v1\npaths:\n  /runs:\n    get:\n      description: This list should be provided in a stable ordering. (The actual\n        ordering is implementation dependent.) When paging through the list, the client\n        should not make assumptions about live updates, but should assume the contents\n        of the list reflect the workflow list at the moment that the first page is\n        requested.  To monitor a specific workflow run, use GetRunStatus or GetRunLog.\n      operationId: list_runs\n      parameters:\n      - description: OPTIONAL The preferred number of workflow runs to return in a\n          page. If not provided, the implementation should use a default page size.\n          The implementation must not return more items than `page_size`, but it may\n          return fewer.  Clients should not assume that if fewer than `page_size`\n          items are returned that all items have been returned.  The availability\n          of additional pages is indicated by the value of `next_page_token` in the\n          response.\n        in: query\n        name: page_size\n        schema:\n          format: int64\n          type: integer\n      - description: OPTIONAL Token to use to indicate where to start getting results.\n          If unspecified, return the first page of results.\n        in: query\n        name: page_token\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunListResponse'\n          description: \"\"\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is malformed.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: List the workflow runs.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\n    post:\n      description: |-\n        This endpoint creates a new workflow run and returns a `RunId` to monitor its progress.\n\n        The `workflow_attachment` array may be used to upload files that are required to execute the workflow, including the primary workflow, tools imported by the workflow, other files referenced by the workflow, or files which are part of the input.  The implementation should stage these files to a temporary directory and execute the workflow from there. These parts must have a Content-Disposition header with a \"filename\" provided for each part.  Filenames may include subdirectories, but must not include references to parent directories with '..' -- implementations should guard against maliciously constructed filenames.\n\n        The `workflow_url` is either an absolute URL to a workflow file that is accessible by the WES endpoint, or a relative URL corresponding to one of the files attached using `workflow_attachment`.\n\n        The `workflow_params` JSON object specifies input parameters, such as input files.  The exact format of the JSON object depends on the conventions of the workflow language being used.  Input files should either be absolute URLs, or relative URLs corresponding to files uploaded using `workflow_attachment`.  The WES endpoint must understand and be able to access URLs supplied in the input.  This is implementation specific.\n\n        The `workflow_type` is the type of workflow language and must be \"CWL\" or \"WDL\" currently (or another alternative  supported by this WES instance).\n\n        The `workflow_type_version` is the version of the workflow language submitted and must be one supported by this WES instance.\n\n        See the `RunRequest` documentation for details about other fields.\n      operationId: run_workflow\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                workflow_params:\n                  format: application/json\n                  type: string\n                workflow_type:\n                  type: string\n                workflow_type_version:\n                  type: string\n                tags:\n                  format: application/json\n                  type: string\n                workflow_engine_parameters:\n                  format: application/json\n                  type: string\n                workflow_url:\n                  type: string\n                workflow_attachment:\n                  items:\n                    format: binary\n                    type: string\n                  type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunId'\n          description: \"\"\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is malformed.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: Run a workflow.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\n  /runs/{run_id}:\n    get:\n      description: This endpoint provides detailed information about a given workflow\n        run. The returned result has information about the outputs produced by this\n        workflow (if available), a log object which allows the stderr and stdout to\n        be retrieved, a log array so stderr/stdout for individual tasks can be retrieved,\n        and the overall state of the workflow run (e.g. RUNNING, see the State section).\n      operationId: get_run_log\n      parameters:\n      - in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunLog'\n          description: \"\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requested workflow run not found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: Get detailed info about a workflow run.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\n  /runs/{run_id}/cancel:\n    post:\n      operationId: cancel_run\n      parameters:\n      - in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunId'\n          description: \"\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requested workflow run wasn't found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: Cancel a running workflow.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\n  /runs/{run_id}/status:\n    get:\n      description: This provides an abbreviated (and likely fast depending on implementation)\n        status of the running workflow, returning a simple result with the  overall\n        state of the workflow run (e.g. RUNNING, see the State section).\n      operationId: get_run_status\n      parameters:\n      - in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunStatus'\n          description: \"\"\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requested workflow run wasn't found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: Get quick status info about a workflow run.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\n  /service-info:\n    get:\n      description: May include information related (but not limited to) the workflow\n        descriptor formats, versions supported, the WES API versions supported, and\n        information about general service availability.\n      operationId: get_service_info\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceInfo'\n          description: \"\"\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is malformed.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The request is unauthorized.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: The requester is not authorized to perform this action.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: An unexpected error occurred.\n      summary: Get information about Workflow Execution Service.\n      tags:\n      - WorkflowExecutionService\n      x-swagger-router-controller: ga4gh.wes.server\n      x-openapi-router-controller: rest_api.controllers.workflow_execution_service_controller\ncomponents:\n  schemas:\n    DefaultWorkflowEngineParameter:\n      description: A message that allows one to describe default parameters for a\n        workflow engine.\n      example:\n        name: name\n        default_value: default_value\n        type: type\n      properties:\n        name:\n          description: The name of the parameter\n          type: string\n        type:\n          description: Describes the type of the parameter, e.g. float.\n          type: string\n        default_value:\n          description: The stringified version of the default parameter. e.g. \"2.45\".\n          type: string\n      type: object\n    Log:\n      description: Log and other info\n      example:\n        start_time: start_time\n        stdout: stdout\n        name: name\n        end_time: end_time\n        exit_code: 0\n        cmd:\n        - cmd\n        - cmd\n        stderr: stderr\n      properties:\n        name:\n          description: The task or workflow name\n          type: string\n        cmd:\n          description: The command line that was executed\n          items:\n            type: string\n          type: array\n        start_time:\n          description: When the command started executing, in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"\n          type: string\n        end_time:\n          description: When the command stopped executing (completed, failed, or cancelled),\n            in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"\n          type: string\n        stdout:\n          description: A URL to retrieve standard output logs of the workflow run\n            or task.  This URL may change between status requests, or may not be available\n            until the task or workflow has finished execution.  Should be available\n            using the same credentials used to access the WES endpoint.\n          type: string\n        stderr:\n          description: A URL to retrieve standard error logs of the workflow run or\n            task.  This URL may change between status requests, or may not be available\n            until the task or workflow has finished execution.  Should be available\n            using the same credentials used to access the WES endpoint.\n          type: string\n        exit_code:\n          description: Exit code of the program\n          format: int32\n          type: integer\n      type: object\n    ServiceInfo:\n      description: A message containing useful information about the running service,\n        including supported versions and default settings.\n      example:\n        system_state_counts:\n          key: 0\n        supported_wes_versions:\n        - supported_wes_versions\n        - supported_wes_versions\n        supported_filesystem_protocols:\n        - supported_filesystem_protocols\n        - supported_filesystem_protocols\n        auth_instructions_url: auth_instructions_url\n        workflow_engine_versions:\n          key: workflow_engine_versions\n        contact_info_url: contact_info_url\n        workflow_type_versions:\n          key:\n            workflow_type_version:\n            - workflow_type_version\n            - workflow_type_version\n        default_workflow_engine_parameters:\n        - name: name\n          default_value: default_value\n          type: type\n        - name: name\n          default_value: default_value\n          type: type\n        tags:\n          key: tags\n      properties:\n        workflow_type_versions:\n          additionalProperties:\n            $ref: '#/components/schemas/WorkflowTypeVersion'\n          description: A map with keys as the workflow format type name (currently\n            only CWL and WDL are used although a service may support others) and value\n            is a workflow_type_version object which simply contains an array of one\n            or more version strings\n          type: object\n        supported_wes_versions:\n          description: The version(s) of the WES schema supported by this service\n          items:\n            type: string\n          type: array\n        supported_filesystem_protocols:\n          description: The filesystem protocols supported by this service, currently\n            these may include common protocols using the terms 'http', 'https', 'sftp',\n            's3', 'gs', 'file', or 'synapse', but others  are possible and the terms\n            beyond these core protocols are currently not fixed.   This section reports\n            those protocols (either common or not) supported by this WES service.\n          items:\n            type: string\n          type: array\n        workflow_engine_versions:\n          additionalProperties:\n            type: string\n          description: The engine(s) used by this WES service, key is engine name\n            (e.g. Cromwell) and value is version\n          type: object\n        default_workflow_engine_parameters:\n          description: Each workflow engine can present additional parameters that\n            can be sent to the workflow engine. This message will list the default\n            values, and their types for each workflow engine.\n          items:\n            $ref: '#/components/schemas/DefaultWorkflowEngineParameter'\n          type: array\n        system_state_counts:\n          additionalProperties:\n            format: int64\n            type: integer\n          description: The system statistics, key is the statistic, value is the count\n            of runs in that state. See the State enum for the possible keys.\n          type: object\n        auth_instructions_url:\n          description: 'A web page URL with human-readable instructions on how to\n            get an authorization token for use with a specific WES endpoint.          '\n          type: string\n        contact_info_url:\n          description: An email address URL (mailto:) or web page URL with contact\n            information for the operator of a specific WES endpoint.  Users of the\n            endpoint should use this to report problems or security vulnerabilities.\n          type: string\n        tags:\n          additionalProperties:\n            type: string\n          description: A key-value map of arbitrary, extended metadata outside the\n            scope of the above but useful to report back\n          type: object\n      type: object\n    State:\n      default: UNKNOWN\n      description: \"- UNKNOWN: The state of the task is unknown. This provides a safe\\\n        \\ default for messages where this field is missing, for example, so that a\\\n        \\ missing field does not accidentally imply that the state is QUEUED.\\n\\n\\n\\\n        \\ - QUEUED: The task is queued.\\n\\n\\n- INITIALIZING: The task has been assigned\\\n        \\ to a worker and is currently preparing to run. For example, the worker may\\\n        \\ be turning on, downloading input files, etc.\\n\\n- RUNNING: The task is running.\\\n        \\ Input files are downloaded and the first Executor has been started.\\n\\n\\\n        - PAUSED: The task is paused. An implementation may have the ability to pause\\\n        \\ a task, but this is not required.\\n\\n\\n - COMPLETE: The task has completed\\\n        \\ running. Executors have exited without error\\nand output files have been\\\n        \\ successfully uploaded.\\n\\n\\n - EXECUTOR_ERROR: The task encountered an error\\\n        \\ in one of the Executor processes. Generally,\\nthis means that an Executor\\\n        \\ exited with a non-zero exit code.\\n\\n\\n - SYSTEM_ERROR: The task was stopped\\\n        \\ due to a system error, but not from an Executor,\\nfor example an upload\\\n        \\ failed due to network issues, the worker's ran out of disk space, etc.\\n\\\n        \\n\\n - CANCELED: The task was canceled by the user.\\n\\n\\n  - CANCELING: The\\\n        \\ task was canceled by the user, and is in the process of stopping.       \"\n      enum:\n      - UNKNOWN\n      - QUEUED\n      - INITIALIZING\n      - RUNNING\n      - PAUSED\n      - COMPLETE\n      - EXECUTOR_ERROR\n      - SYSTEM_ERROR\n      - CANCELED\n      - CANCELING\n      type: string\n    RunListResponse:\n      description: The service will return a RunListResponse when receiving a successful\n        RunListRequest.\n      example:\n        next_page_token: next_page_token\n        runs:\n        - run_id: run_id\n        - run_id: run_id\n      properties:\n        runs:\n          description: A list of workflow runs that the service has executed or is\n            executing. The list is filtered to only include runs that the caller has\n            permission to see.\n          items:\n            $ref: '#/components/schemas/RunStatus'\n          type: array\n        next_page_token:\n          description: A token which may be supplied as `page_token` in workflow run\n            list request to get the next page of results.  An empty string indicates\n            there are no more items to return.\n          type: string\n      type: object\n    RunLog:\n      example:\n        outputs: '{}'\n        request:\n          workflow_engine_parameters:\n            key: workflow_engine_parameters\n          workflow_url: workflow_url\n          workflow_params: '{}'\n          workflow_type: workflow_type\n          workflow_type_version: workflow_type_version\n          tags:\n            key: tags\n        run_id: run_id\n        run_log:\n          start_time: start_time\n          stdout: stdout\n          name: name\n          end_time: end_time\n          exit_code: 0\n          cmd:\n          - cmd\n          - cmd\n          stderr: stderr\n        task_logs:\n        - start_time: start_time\n          stdout: stdout\n          name: name\n          end_time: end_time\n          exit_code: 0\n          cmd:\n          - cmd\n          - cmd\n          stderr: stderr\n        - start_time: start_time\n          stdout: stdout\n          name: name\n          end_time: end_time\n          exit_code: 0\n          cmd:\n          - cmd\n          - cmd\n          stderr: stderr\n      properties:\n        run_id:\n          description: workflow run ID\n          type: string\n        request:\n          $ref: '#/components/schemas/RunRequest'\n        state:\n          $ref: '#/components/schemas/State'\n        run_log:\n          $ref: '#/components/schemas/Log'\n        task_logs:\n          description: The logs, and other key info like timing and exit code, for\n            each step in the workflow run.\n          items:\n            $ref: '#/components/schemas/Log'\n          type: array\n        outputs:\n          description: The outputs from the workflow run.\n          properties: {}\n          type: object\n      type: object\n    RunRequest:\n      description: |-\n        To execute a workflow, send a run request including all the details needed to begin downloading\n        and executing a given workflow.\n      example:\n        workflow_engine_parameters:\n          key: workflow_engine_parameters\n        workflow_url: workflow_url\n        workflow_params: '{}'\n        workflow_type: workflow_type\n        workflow_type_version: workflow_type_version\n        tags:\n          key: tags\n      properties:\n        workflow_params:\n          description: |-\n            REQUIRED\n            The workflow run parameterizations (JSON encoded), including input and output file locations\n          properties: {}\n          type: object\n        workflow_type:\n          description: |-\n            REQUIRED\n            The workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)\n          type: string\n        workflow_type_version:\n          description: |-\n            REQUIRED\n            The workflow descriptor type version, must be one supported by this WES instance\n          type: string\n        tags:\n          additionalProperties:\n            type: string\n          description: |-\n            OPTIONAL\n            A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request\n          type: object\n        workflow_engine_parameters:\n          additionalProperties:\n            type: string\n          description: |-\n            OPTIONAL\n            Additional parameters can be sent to the workflow engine using this field. Default values for these parameters can be obtained using the ServiceInfo endpoint.\n          type: object\n        workflow_url:\n          description: |-\n            REQUIRED\n            The workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.\n          type: string\n      type: object\n    RunId:\n      example:\n        run_id: run_id\n      properties:\n        run_id:\n          description: workflow run ID\n          type: string\n      type: object\n    RunStatus:\n      description: Small description of a workflow run, returned by server during\n        listing\n      example:\n        run_id: run_id\n      properties:\n        run_id:\n          type: string\n        state:\n          $ref: '#/components/schemas/State'\n      required:\n      - run_id\n      type: object\n    WorkflowTypeVersion:\n      description: Available workflow types supported by a given instance of the service.\n      example:\n        workflow_type_version:\n        - workflow_type_version\n        - workflow_type_version\n      properties:\n        workflow_type_version:\n          description: an array of one or more acceptable types for the `workflow_type`\n          items:\n            type: string\n          type: array\n      type: object\n    ErrorResponse:\n      description: An object that can optionally include information about the error.\n      properties:\n        msg:\n          description: A detailed error message.\n          type: string\n        status_code:\n          description: The integer representing the HTTP status code (e.g. 200, 404).\n          type: integer\n      type: object\n",
			"canonicalURL": "/github.com/aws/amazon-genomics-cli@82c1a7dbe862ff494118c9f14762e63ffb7c843d/-/blob/packages/wes_adapter/rest_api/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws/amazon-genomics-cli/blob/82c1a7dbe862ff494118c9f14762e63ffb7c843d/packages/wes_adapter/rest_api/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}