{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ic3software/mccs-alpha-api"
		},
		"file": {
			"name": "openapi-admin.yaml",
			"size": 0,
			"path": "openapi-admin.yaml",
			"byteSize": 63794,
			"content": "openapi: 3.0.0\ninfo:\n  title: MCCS Alpha Admin API\n  description: |\n    ## Introduction \n\n    The MCCS Alpha Admin API v1 exposes all of the admin user functionality currently available in the [alpha version of the MCCS API](https://github.com/ic3network/mccs-alpha-api).\n\n    By providing an API, developers who want to create their own front-end user interface for MCCS will have significant flexibility to implement it in whatever way they choose. This means developers can present MCCS in any language, setup their own signup flow, optimize it for whatever devices their users prefer, develop a mobile app, integrate other services such as chat, etc.\n\n    Importantly, an API enables developers to integrate MCCS functionality directly into their own apps (e.g., import transfer data into an accounting application, instruct mutual credit transfers from an e-wallet application, interact with MCCS data via a chat bot, etc.).\n\n    ## Background\n\n    To understand how the MCCS Alpha API works, please read the following design documents:\n\n    - [MCCS Alpha Data Model](https://github.com/ic3network/mccs/blob/master/alpha-data-model.md)\n    - [MCCS Alpha Functionality](https://github.com/ic3network/mccs/blob/master/alpha-functionality.md)\n\n    ## Test Server\n\n    These API docs assume you are running the API server on your local machine using Docker \u0026 Docker Compose. See the [How to Start](https://github.com/ic3network/mccs-alpha-api#how-to-start) instructions in the project's GitHub repo for more details.\n\n    ## License\n  license:\n    name: MIT License\n    url: https://github.com/ic3network/mccs-alpha-api/blob/dev/LICENSE\n  version: '1'\nservers:\n  - url: http://localhost:8080/api/v1\ntags:\n  - name: Manage Account\n    description: Manage an admin's account\n  - name: Manage Categories and Tags\n    description: Manage the list of categories and user-generated tags\n  - name: Manage Users\n    description: View, search and manage user details\n  - name: Manage Entities\n    description: View, search and manage entity details, set credit limits, etc.\n  - name: Manage Transfers\n    description: View entity-to-entity mutual credit transfers and create transfers on behalf of entities\n  - name: Review Logs\n    description: View and search user and admin activity logs\npaths:\n  /admin/login:\n    post:\n      tags:\n        - Manage Account\n      summary: Login and receive an authorization token\n      description: |\n        An admin will need to authenticate with an email/password combination which, if successful, will result in a JSON Web Token (JWT) being passed to the admin to use with all subsequent Admin API requests.\n\n        The JWT will expire after 24 hours, or as soon as the admin successfully calls the `/admin/logout` endpoint.\n      requestBody:\n        $ref: '#/components/requestBodies/emailAndPassword'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      token:\n                        type: string\n                      lastLoginDate:\n                        type: string\n                      lastLoginIP:\n                        type: string\n              example:\n                data:\n                  token: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTI5ODU2MTMsInVzZXJJRCI6IjVlZjFiNWQ5NTA2ODQ3ZWE5MTRkYjA2NiIsImFkbWluIjpmYWxzZX0.qut7qdW-qvlh_aerQm_lriOHUr2fnfVgkDRUpkA_rzIvsgwzJCSdGSIrxIEPnpMs7O15xdWk98wAwuh6gkaQ5UvqCCrk-LiPN03ev-I-XiN51xezQWPPwoouKmA2LQQ6wm4hpmxIAjdj_XPB8Qh-3C9TELHRl54rzvesrpmAALJZm8He14D2U6jdn7ZkW9LjdCB2o3zbn8VQQm8BDH4OR7po7gBpgZJJ1gkkoJoSZELYlgAyGDvq6xYoxMmTgDbRJGP311RxSXW_Kr9uSI4LJkaITOALstBsjMp6Mzs-cEOm8lUkmpPYd5N0x9mffrv3srTqDTmr43u7n3mXkRT5Qg\"\n                  lastLoginDate: \"2020-04-02T07:34:13.559Z\"\n                  lastLoginIP: \"192.168.1.1\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/ServerError'\n  /admin/logout:\n    post:\n      tags:\n        - Manage Account\n      summary: Logout and expire the authorization token\n      description: Logging out will immediately expire the JWT currently associated with the admin's account.\n      responses:\n        200:\n          description: OK\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500:\n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/password-reset:\n    post:\n      tags:\n        - Manage Account\n      summary: Request a password reset token\n      description: When a password is lost by the admin, a new one can be requested by providing the email address associated with the admin's account. A password reset token will then be sent to that email address.\n      requestBody:\n        $ref: '#/components/requestBodies/resetPassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /admin/password-reset/{token}:\n    post:\n      tags:\n        - Manage Account\n      summary: Reset a password\n      description: The new password can be set by providing it along with the password reset token that was received at the admin's email address.\n      parameters:\n        - $ref: '#/components/parameters/token'\n      requestBody:\n        $ref: '#/components/requestBodies/updatePassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /admin/password-change:\n    post:\n      tags:\n        - Manage Account\n      summary: Change the password\n      description: A logged-in admin can change the password by sending the new password along with the JWT.\n      requestBody:\n        $ref: '#/components/requestBodies/updatePassword'\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/categories:\n    # get:\n      # See `GET /categories` in the MCCS Alpha User API v1\n    post:\n      tags:\n        - Manage Categories and Tags\n      summary: Add a new category\n      description: |\n        An admin can add new categories to organize entities into a curated list.\n\n        New categories can be created by an admin simply by posting the new name to this endpoint.\n\n        Category names are sanitized, meaning that whitespace is trimmed, numbers and special characters are removed, and spaces are converted into dashes. For example, `\"  ! ! ! A 1 Unique Category ! ! !  \"` is converted into `\"a-unique-category\"`.\n      requestBody:\n        $ref: '#/components/requestBodies/manageCategory'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Category'\n              example:\n                data:\n                  id: 5e86ee4ec3a20c3113aa9e2d\n                  name: a-new-category\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/categories/{categoryID}:\n    patch:\n      tags:\n        - Manage Categories and Tags\n      summary: Change name of category\n      description: |\n        A category name can be changed by specifying its ID along with the new name. As with newly-created categories, the changed name will also be sanitized (e.g., `\"   THE  Changed   CATEGORY!  \"` becomes `\"the-changed-category\"`).\n\n        All entity records with the previous category name will be updated automatically to reflect the new category name.\n      parameters:\n        - $ref: '#/components/parameters/categoryID'\n      requestBody:\n        $ref: '#/components/requestBodies/manageCategory'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Category'\n              example:\n                data:\n                  id: 5e86e93963ee31617463d739\n                  name: a-changed-category\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    delete:\n      tags:\n        - Manage Categories and Tags\n      summary: Delete category\n      description: An admin can remove a category. All entity records with the removed category will reflect the removal of that category.\n      parameters:\n        - $ref: '#/components/parameters/categoryID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Category'\n              example:\n                data:\n                  id: 5e86e93963ee31617463d739\n                  name: the-removed-category\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/tags:\n    # get:\n      # See `GET /tags` in the MCCS Alpha User API v1\n    post:\n      tags:\n        - Manage Categories and Tags\n      summary: Add a new tag\n      description: |\n        An admin can add new tags to apply to the offers and wants arrays of entities. New tags can be created by posting the new name to this endpoint.\n\n        Tag names are sanitized, meaning that whitespace is trimmed, numbers and special characters are removed, and spaces are converted into dashes. For example, `\"  ! ! ! A 1 Unique Tag ! ! !  \"` is converted into `\"a-unique-tag\"`.\n      requestBody:\n        $ref: '#/components/requestBodies/manageTag'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Tag'\n              example:\n                data:\n                  id: 5e86ee4ec3a20c3113ab6ad2\n                  name: a-new-tag\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/tags/{tagID}:\n    patch:\n      tags:\n        - Manage Categories and Tags\n      summary: Change name of tag\n      description: |\n        A tag name can be changed by specifying its ID along with the new name. As with newly-created tag, the changed name will also be sanitized (e.g., `\"   THE  Changed   TAG!  \"` becomes `\"the-changed-tag\"`).\n\n        All entity records with the previous tag name will be updated automatically to reflect the new tag name.\n      parameters:\n        - $ref: '#/components/parameters/tagID'\n      requestBody:\n        $ref: '#/components/requestBodies/manageTag'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Tag'\n              example:\n                data:\n                  id: 5e86e93963ee316174643a3c\n                  name: a-changed-tag\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    delete:\n      tags:\n        - Manage Categories and Tags\n      summary: Delete tag\n      description: An admin can remove a tag. All entity records with the removed tag will reflect the removal of that tag.\n      parameters:\n        - $ref: '#/components/parameters/tagID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Tag'\n              example:\n                data:\n                  id: 5e86e93963ee316174643a2f\n                  name: the-removed-tag\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/users:\n    get:\n      tags:\n        - Manage Users\n      summary: Search and view users\n      description: Admins can search and view users and their details.\n      parameters:\n        - $ref: '#/components/parameters/lastName'\n        - $ref: '#/components/parameters/userEmail'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserWithEntity'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              example:\n                data:\n                  - id: 5ef06ff63f540b3aaf04a9e0\n                    email: jdoe@dev.null\n                    firstName: Jane K.\n                    lastName: Doer\n                    telephone: \"+442012345678\"\n                    lastLoginIP: \"192.168.1.1\"\n                    lastLoginDate: \"2020-06-21T12:11:09Z\"\n                    entities:\n                    - id: 5ed7641d5a5135e226005aa8\n                      accountNumber: \"7337657615120777\"\n                      name: New World Pizza PLC\n                      email: nwpizza@dev.null\n                      telephone: \"+442098765432\"\n                      incType: plc\n                      companyNumber: B67890\n                      website: https://nwpizza.null\n                      declaredTurnover: 10000\n                      description: \"We show you how good things can taste and where you need to go to eat them!\"\n                      address: 456 Yellow Brick Road\n                      city: London\n                      region: Greater London\n                      postalCode: UK1 2ENG\n                      country: England\n                      status: tradingAccepted\n                      offers:\n                        - craft-beers\n                        - beer\n                        - pizza\n                      wants:\n                        - organic-flour\n                        - organic-vegetables\n                      categories:\n                        - brewery\n                        - restaurant\n                      showTagsMatchedSinceLastLogin: true\n                      receiveDailyMatchNotificationEmail: true\n                meta:\n                  numberOfResults: 1\n                  totalPages: 1\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/users/{userID}:\n    get:\n      tags:\n        - Manage Users\n      summary: View a user\n      description: Admins can view a specific user and its details.\n      parameters:\n        - $ref: '#/components/parameters/userID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserWithEntity'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa9\n                  email: jdoe@dev.null\n                  firstName: Jane K.\n                  lastName: Doer\n                  telephone: \"+442012345678\"\n                  lastLoginIP: \"192.168.1.1\"\n                  lastLoginDate: \"2020-06-21T12:11:09Z\"\n                  entities:\n                  - id: 5ed7641d5a5135e226005aa8\n                    accountNumber: \"7337657615120777\"\n                    name: New World Pizza PLC\n                    email: nwpizza@dev.null\n                    telephone: \"+442098765432\"\n                    incType: plc\n                    companyNumber: B67890\n                    website: https://nwpizza.null\n                    declaredTurnover: 10000\n                    description: \"We show you how good things can taste and where you need to go to eat them!\"\n                    address: 456 Yellow Brick Road\n                    city: London\n                    region: Greater London\n                    postalCode: UK1 2ENG\n                    country: England\n                    status: tradingAccepted\n                    offers:\n                      - pizza\n                      - wine\n                    wants:\n                      - flour\n                      - tomato\n                      - mozzarella\n                    categories:\n                      - restaurant\n                    showTagsMatchedSinceLastLogin: true\n                    receiveDailyMatchNotificationEmail: true\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    patch:\n      tags:\n        - Manage Users\n      summary: Update a user\n      description: Admins can update a specific user's details.\n      parameters:\n        - $ref: '#/components/parameters/userID'\n      requestBody:\n        $ref: '#/components/requestBodies/updateUser'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserWithEntity'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa9\n                  email: jdoe@dev.null\n                  firstName: Jane K.\n                  lastName: Doer\n                  telephone: \"+442012345678\"\n                  lastLoginIP: \"192.168.1.1\"\n                  lastLoginDate: \"2020-06-21T12:11:09Z\"\n                  entities:\n                  - id: 5ed7641d5a5135e226005aa8\n                    accountNumber: \"7337657615120777\"\n                    name: New World Pizza PLC\n                    email: nwpizza@dev.null\n                    telephone: \"+442098765432\"\n                    incType: plc\n                    companyNumber: B67890\n                    website: https://nwpizza.null\n                    declaredTurnover: 10000\n                    description: \"We show you how good things can taste and where you need to go to eat them!\"\n                    address: 456 Yellow Brick Road\n                    city: London\n                    region: Greater London\n                    postalCode: UK1 2ENG\n                    country: England\n                    status: tradingAccepted\n                    offers:\n                      - pizza\n                      - wine\n                    wants:\n                      - flour\n                      - tomato\n                      - mozzarella\n                    categories:\n                      - restaurant\n                    showTagsMatchedSinceLastLogin: true\n                    receiveDailyMatchNotificationEmail: true\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    delete:\n      tags:\n        - Manage Users\n      summary: Delete a user\n      description: Admins can delete a user.\n      parameters:\n        - $ref: '#/components/parameters/userID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/User'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa9\n                  email: jdoe@dev.null\n                  firstName: Jane K.\n                  lastName: Doer\n                  telephone: \"+442012345678\"\n                  lastLoginIP: \"192.168.1.1\"\n                  lastLoginDate: \"2020-06-21T12:11:09Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/entities:\n    get:\n      tags:\n        - Manage Entities\n      summary: Search and view entities\n      description: Admins can search and view entities and their details.\n      parameters:\n        - $ref: '#/components/parameters/offers'\n        - $ref: '#/components/parameters/wants'\n        - $ref: '#/components/parameters/taggedSince'\n        - $ref: '#/components/parameters/category'\n        - $ref: '#/components/parameters/entityName'\n        - $ref: '#/components/parameters/entityEmail'\n        - $ref: '#/components/parameters/accountNumber'\n        - $ref: '#/components/parameters/status'\n        - $ref: '#/components/parameters/city'\n        - $ref: '#/components/parameters/region'\n        - $ref: '#/components/parameters/country'\n        - $ref: '#/components/parameters/balance'\n        - $ref: '#/components/parameters/maxPosBal'\n        - $ref: '#/components/parameters/maxNegBal'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/EntityWithUser'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              example:\n                data:\n                  - id: 5ed7641d5a5135e226005aa8\n                    accountNumber: \"7337657615120777\"\n                    name: New World Pizza PLC\n                    email: nwpizza@dev.null\n                    telephone: \"+442098765432\"\n                    incType: plc\n                    companyNumber: B67890\n                    website: https://nwpizza.null\n                    declaredTurnover: 10000\n                    description: \"We show you how good things can taste and where you need to go to eat them!\"\n                    address: 456 Yellow Brick Road\n                    city: London\n                    region: Greater London\n                    postalCode: UK1 2ENG\n                    country: England\n                    status: tradingAccepted\n                    offers:\n                      - pizza\n                      - wine\n                    wants:\n                      - flour\n                      - tomato\n                      - mozzarella\n                    categories:\n                      - restaurant\n                    showTagsMatchedSinceLastLogin: true\n                    receiveDailyMatchNotificationEmail: true\n                    balance: 0\n                    maxPositiveBalance: 20\n                    maxNegativeBalance: 10\n                    users:\n                        - id: 5ed7641d5a5135e226005aa9\n                          email: jdoe@dev.null\n                          firstName: Jane K.\n                          lastName: Doer\n                          telephone: \"+442012345678\"\n                          lastLoginIP: \"192.168.1.1\"\n                          lastLoginDate: \"2020-06-21T12:11:09Z\"\n                meta:\n                    numberOfResults: 1\n                    totalPages: 1\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/entities/{entityID}:\n    get:\n      tags:\n        - Manage Entities\n      summary: View an entity\n      description: Admins can view a specific entity and its details.\n      parameters:\n        - $ref: '#/components/parameters/entityID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/EntityWithUser'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa8\n                  accountNumber: \"7337657615120777\"\n                  name: New World Pizza PLC\n                  email: nwpizza@dev.null\n                  telephone: \"+442098765432\"\n                  incType: plc\n                  companyNumber: B67890\n                  website: https://nwpizza.null\n                  declaredTurnover: 10000\n                  description: \"We show you how good things can taste and where you need to go to eat them!\"\n                  address: 456 Yellow Brick Road\n                  city: London\n                  region: Greater London\n                  postalCode: UK1 2ENG\n                  country: England\n                  status: tradingAccepted\n                  offers:\n                    - pizza\n                    - wine\n                  wants:\n                    - flour\n                    - tomato\n                    - mozzarella\n                  categories:\n                    - restaurant\n                  showTagsMatchedSinceLastLogin: true\n                  receiveDailyMatchNotificationEmail: true\n                  balance: 0\n                  maxPositiveBalance: 20\n                  maxNegativeBalance: 10\n                  pendingTransfers: []\n                  users:\n                      - id: 5ed7641d5a5135e226005aa9\n                        email: jdoe@dev.null\n                        firstName: Jane K.\n                        lastName: Doer\n                        telephone: \"+442012345678\"\n                        lastLoginIP: \"192.168.1.1\"\n                        lastLoginDate: \"2020-06-21T12:11:09Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n    patch:\n      tags:\n        - Manage Entities\n      summary: Update an entity\n      description: Admins can update a specific entity's details.\n      parameters:\n        - $ref: '#/components/parameters/entityID'\n      requestBody:\n        $ref: '#/components/requestBodies/updateEntity'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/EntityWithUser'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa8\n                  accountNumber: \"7337657615120777\"\n                  name: New World Pizza PLC\n                  email: nwpizza@dev.null\n                  telephone: \"+442098765432\"\n                  incType: plc\n                  companyNumber: B67890\n                  website: https://nwpizza.null\n                  declaredTurnover: 10000\n                  description: \"We show you how good things can taste and where you need to go to eat them!\"\n                  address: 456 Yellow Brick Road\n                  city: London\n                  region: Greater London\n                  postalCode: UK1 2ENG\n                  country: England\n                  status: tradingAccepted\n                  offers: \n                      - craft-beers\n                      - beer\n                      - pizza\n                  wants:\n                      - organic-flour\n                      - organic-vegetables\n                  categories:\n                      - brewery\n                      - restaurant\n                  showTagsMatchedSinceLastLogin: true\n                  receiveDailyMatchNotificationEmail: true\n                  maxPositiveBalance: 20\n                  maxNegativeBalance: 10\n                  users:\n                      - id: 5ed7641d5a5135e226005aa9\n                        email: jdoe@dev.null\n                        firstName: Jane K.\n                        lastName: Doer\n                        telephone: \"+442012345678\"\n                        lastLoginIP: \"192.168.1.1\"\n                        lastLoginDate: \"2020-06-21T12:11:09Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: [] \n    delete:\n      tags:\n        - Manage Entities\n      summary: Delete an entity\n      description: Admins can delete a entity.\n      parameters:\n        - $ref: '#/components/parameters/entityID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Entity'\n              example:\n                data:\n                  id: 5ed7641d5a5135e226005aa8\n                  accountNumber: \"7337657615120777\"\n                  name: New World Pizza PLC\n                  email: nwpizza@dev.null\n                  telephone: \"+442098765432\"\n                  incType: plc\n                  companyNumber: B67890\n                  website: https://nwpizza.null\n                  declaredTurnover: 10000\n                  description: \"We show you how good things can taste and where you need to go to eat them!\"\n                  address: 456 Yellow Brick Road\n                  city: London\n                  region: Greater London\n                  postalCode: UK1 2ENG\n                  country: England\n                  status: tradingAccepted\n                  offers:\n                    - pizza\n                    - wine\n                  wants:\n                    - flour\n                    - tomato\n                    - mozzarella\n                  categories:\n                    - restaurant\n                  showTagsMatchedSinceLastLogin: true\n                  receiveDailyMatchNotificationEmail: true\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n      security:\n        - jwt: []\n  /admin/transfers:\n    post:\n      tags:\n        - Manage Transfers\n      summary: Make a transfer\n      description: An admin can make a MC transfer on behalf of users.\n      requestBody:\n        $ref: '#/components/requestBodies/createTransfer'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/TransferCompleted'\n              example:\n                data:\n                  id: 1dUcBb4GSrwGi8wsFih27f2391o\n                  fromAccountNumber: \"2338171888854062\"\n                  fromEntityName: Betty's Baked Goods\n                  toAccountNumber: \"1637023403508535\"\n                  toEntityName: Farmer Freddy's Veg\n                  amount: 1.1\n                  description: Payment of invoice number 12345\n                  type: adminTransfer\n                  status: transferCompleted\n                  dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                  dateCompleted: \"2020-06-18T12:22:57.633753Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n    get:\n      tags:\n        - Manage Transfers\n      summary: Get a list of transfers\n      description: An admin can get a list of transfers.\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/transferStatus'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Transfer'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              examples:\n                completed:\n                  value:\n                    data:\n                      - id: 1dUcBb4GSrwGi8wsFih27f2391o\n                        fromAccountNumber: \"2338171888854062\"\n                        fromEntityName: Betty's Baked Goods\n                        toAccountNumber: \"1637023403508535\"\n                        toEntityName: Farmer Freddy's Veg\n                        amount: 1.1\n                        description: Payment of invoice number 12345\n                        type: adminTransfer\n                        status: transferCompleted\n                        dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                        dateCompleted: \"2020-06-18T12:22:57.633753Z\"\n                    meta:\n                        numberOfResults: 1\n                        totalPages: 1\n                initiated:\n                  value:\n                    data:\n                      - id: 1dUcBb4GSrwGi8wsFih27f2391o\n                        fromAccountNumber: \"2338171888854062\"\n                        fromEntityName: Betty's Baked Goods\n                        toAccountNumber: \"1637023403508535\"\n                        toEntityName: Farmer Freddy's Veg\n                        amount: 1.1\n                        description: Payment of invoice number 12345\n                        type: transfer\n                        status: transferInitiated\n                        dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                    meta:\n                        numberOfResults: 1\n                        totalPages: 1\n                cancelledOrRejected:\n                  value:\n                    data:\n                      - id: 1dUcBb4GSrwGi8wsFih27f2391o\n                        fromAccountNumber: \"2338171888854062\"\n                        fromEntityName: Betty's Baked Goods\n                        toAccountNumber: \"1637023403508535\"\n                        toEntityName: Farmer Freddy's Veg\n                        amount: 1.1\n                        description: Payment of invoice number 12345\n                        type: transfer\n                        status: transferCancelled\n                        cancellationReason: Some reason for cancelling or rejecting\n                        dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                    meta:\n                        numberOfResults: 1\n                        totalPages: 1\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /admin/transfers/{transferID}:\n    get:\n      tags:\n        - Manage Transfers\n      summary: Get a specific transfer\n      description: An admin can retrieve a specific transfer by its ID.\n      parameters:\n        - $ref: '#/components/parameters/transferID'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Transfer'\n              examples:\n                completed:\n                  value:\n                    data:\n                      id: 1dUcBb4GSrwGi8wsFih27f2391o\n                      fromAccountNumber: \"2338171888854062\"\n                      fromEntityName: Betty's Baked Goods\n                      toAccountNumber: \"1637023403508535\"\n                      toEntityName: Farmer Freddy's Veg\n                      amount: 1.1\n                      description: Payment of invoice number 12345\n                      type: adminTransfer\n                      status: transferCompleted\n                      dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                      dateCompleted: \"2020-06-18T12:22:57.633753Z\"\n                initiated:\n                  value:\n                    data:\n                      id: 1dUcBb4GSrwGi8wsFih27f2391o\n                      fromAccountNumber: \"2338171888854062\"\n                      fromEntityName: Betty's Baked Goods\n                      toAccountNumber: \"1637023403508535\"\n                      toEntityName: Farmer Freddy's Veg\n                      amount: 1.1\n                      description: Payment of invoice number 12345\n                      type: transfer\n                      status: transferInitiated\n                      dateProposed: \"2020-06-18T12:22:57.633372Z\"\n                cancelledOrRejected:\n                  value:\n                    data:\n                      id: 1dUcBb4GSrwGi8wsFih27f2391o\n                      fromAccountNumber: \"2338171888854062\"\n                      fromEntityName: Betty's Baked Goods\n                      toAccountNumber: \"1637023403508535\"\n                      toEntityName: Farmer Freddy's Veg\n                      amount: 1.1\n                      description: Payment of invoice number 12345\n                      type: transfer\n                      status: transferCancelled\n                      cancellationReason: Some reason for cancelling or rejecting\n                      dateProposed: \"2020-06-18T12:22:57.633372Z\"\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\n  /admin/logs:\n    get:\n      tags:\n        - Review Logs\n      summary: Review activity logs\n      description: Admins can view the logs of user and admin activity in MCCS.\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/logEmail'\n        - $ref: '#/components/parameters/logCategory'\n        - $ref: '#/components/parameters/action'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogEntry'\n                  meta:\n                    $ref: '#/components/schemas/Meta'\n              example:\n                data:\n                  - userID: 5eeb5c20e4dbf983854b662c\n                    email: api-test-admin3@dev.null\n                    action: admin login successful\n                    detail: \"api-test-admin3@dev.null - 172.20.0.1\"\n                    category: admin\n                    createdAt: \"2020-02-18T12:22:14.666Z\"\n                meta:\n                  numberOfResults: 1\n                  totalPages: 1\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/PermissionDenied'\n        429:\n          $ref: '#/components/responses/TooManyRequests'\n        500: \n          $ref: '#/components/responses/ServerError'\ncomponents:\n  schemas:\n    Category:\n      type: object\n      title: Category\n      description: A category object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    Tag:\n      type: object\n      title: Tag\n      description: A tag object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    User:\n      type: object\n      title: User\n      description: An individual and unique user of MCCS\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        telephone:\n          type: string\n        lastLoginIP:\n          type: string\n        lastLoginDate:\n          type: string\n    UserWithEntity:\n      type: object\n      title: UserWithEntity\n      description: An individual and unique user of MCCS\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        telephone:\n          type: string\n        lastLoginIP:\n          type: string\n        lastLoginDate:\n          type: string\n        entities:\n          type: array\n          items:\n            $ref: '#/components/schemas/Entity'\n    Entity:\n      type: object\n      title: Entity\n      description: An entity object representing a business, non-profit, etc.\n      properties:\n        id:\n          type: string\n        accountNumber:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        telephone:\n          type: string\n        incType:\n          type: string\n        companyNumber:\n          type: string\n        website:\n          type: string\n        declaredTurnover:\n          type: integer\n        description:\n          type: string\n        address:\n          type: string\n        city:\n          type: string\n        region:\n          type: string\n        postalCode:\n          type: string\n        country:\n          type: string\n        status:\n          type: string\n          enum:\n            - pending\n            - accepted\n            - rejected\n            - tradingPending\n            - tradingAccepted\n            - tradingRejected\n        offers:\n          type: array\n          items:\n            type: string\n        wants:\n          type: array\n          items:\n            type: string\n        categories:\n          type: array\n          items:\n            type: string\n        showTagsMatchedSinceLastLogin:\n          type: boolean\n        receiveDailyMatchNotificationEmail:\n          type: boolean\n        balance:\n          type: number\n        maxPositiveBalance:\n          type: integer\n        maxNegativeBalance:\n          type: integer\n        pendingTransfers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransferPending'\n    EntityWithUser:\n      type: object\n      title: EntityWithUser\n      description: An entity object representing a business, non-profit, etc.\n      properties:\n        id:\n          type: string\n        accountNumber:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        telephone:\n          type: string\n        incType:\n          type: string\n        companyNumber:\n          type: string\n        website:\n          type: string\n        declaredTurnover:\n          type: integer\n        description:\n          type: string\n        address:\n          type: string\n        city:\n          type: string\n        region:\n          type: string\n        postalCode:\n          type: string\n        country:\n          type: string\n        status:\n          type: string\n          enum:\n            - pending\n            - accepted\n            - rejected\n            - tradingPending\n            - tradingAccepted\n            - tradingRejected\n        offers:\n          type: array\n          items:\n            type: string\n        wants:\n          type: array\n          items:\n            type: string\n        categories:\n          type: array\n          items:\n            type: string\n        showTagsMatchedSinceLastLogin:\n          type: boolean\n        receiveDailyMatchNotificationEmail:\n          type: boolean\n        balance:\n          type: number\n        maxPositiveBalance:\n          type: integer\n        maxNegativeBalance:\n          type: integer\n        pendingTransfers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransferPending'\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    TransferPending:\n      type: object\n      title: TransferPending\n      description: A pending transfer object\n      properties:\n        id:\n          type: string\n        fromAccountNumber:\n          type: string\n        fromEntityName:\n          type: string\n        toAccountNumber:\n          type: string\n        toEntityName:\n          type: string\n        amount:\n          type: number\n        description:\n          type: string\n        status:\n          type: string\n        type:\n          type: string\n        dateProposed:\n          type: string\n    Transfer:\n      type: object\n      title: Transfer\n      description: A transfer object\n      properties:\n        id:\n          type: string\n        fromAccountNumber:\n          type: string\n        fromEntityName:\n          type: string\n        toAccountNumber:\n          type: string\n        toEntityName:\n          type: string\n        amount:\n          type: number\n        description:\n          type: string\n        type:\n          type: string\n          enum:\n            - transfer\n            - adminTransfer\n        status:\n          type: string\n          enum:\n            - transferInitiated\n            - transferCompleted\n            - transferCancelled\n        cancellationReason:\n          type: string\n        dateProposed:\n          type: string\n        dateCompleted:\n          type: string\n    TransferCompleted:\n      type: object\n      title: TransferCompleted\n      description: A completed transfer object\n      properties:\n        id:\n          type: string\n        fromAccountNumber:\n          type: string\n        fromEntityName:\n          type: string\n        toAccountNumber:\n          type: string\n        toEntityName:\n          type: string\n        amount:\n          type: number\n        description:\n          type: string\n        type:\n          type: string\n          enum:\n            - adminTransfer\n        status:\n          type: string\n          enum:\n            - transferCompleted\n        dateProposed:\n          type: string\n        dateCompleted:\n          type: string\n    LogEntry:\n      type: object\n      title: LogEntry\n      description: A log entry object\n      properties:\n        userID:\n          type: string\n        email:\n          type: string\n        action:\n          type: string\n        detail:\n          type: string\n        category:\n          type: string\n        createdAt:\n          type: string\n    Meta:\n      type: object\n      title: Meta\n      description: A meta object\n      properties:\n        numberOfResults:\n          type: integer\n        totalPages:\n          type: integer\n    Error:\n      type: object\n      title: Error\n      description: An error object\n      properties:\n        message:\n          type: string\n  parameters:\n    token:\n      name: token\n      in: path\n      description: The password reset token.\n      required: true\n      schema:\n        type: string\n    tagID:\n      name: tagID\n      in: path\n      description: The ID of the tag\n      required: true\n      schema:\n        type: string\n    categoryID:\n      name: categoryID\n      in: path\n      description: The ID of the category.\n      required: true\n      schema:\n        type: string\n    userID:\n      name: userID\n      in: path\n      description: The ID of the user\n      required: true\n      schema:\n        type: string\n    lastName:\n      name: last_name\n      description: Last name of user\n      in: query\n      schema:\n        type: string\n      example: Doe\n    userEmail:\n      name: email\n      description: User's email address\n      in: query\n      schema:\n        type: string\n      example: jdoe@dev.null\n    entityEmail:\n      name: email\n      description: Entity's email address\n      in: query\n      schema:\n        type: string\n      example: nwpizza@dev.null\n    entityID:\n      name: entityID\n      in: path\n      description: The ID of the entity\n      required: true\n      schema:\n        type: string\n    offers:\n      name: offers\n      description: A list of goods/services offered by an entity\n      in: query\n      schema:\n          type: string\n      example: pizza\n    wants:\n      name: wants\n      description: A list of good/services wanted by an entity\n      in: query\n      schema:\n          type: string\n      example: tomato\n    taggedSince:\n      name: tagged_since\n      description: Date after which offers and wants tags were added\n      in:  query\n      schema:\n        type: string\n      example: \"2020-02-16T08:39:10.250Z\"\n    category:\n      name: category\n      description: Category assigned by admin\n      in: query\n      schema:\n        type: string\n      example: restaurant\n    entityName:\n      name: name\n      description: Name of the entity\n      in: query\n      schema:\n        type: string\n      example: New World Pizza\n    accountNumber:\n      name: account_number\n      description: Account number of the entity\n      in: query\n      schema:\n        type: string\n      example: \"1234567887654321\"\n    status:\n      name: status\n      description: Status of the entity\n      in: query\n      schema:\n        type: string\n        enum:\n          - pending\n          - accepted\n          - rejected\n          - tradingPending\n          - tradingAccepted\n          - tradingRejected\n    city:\n      name: city\n      description: City of entity's location\n      in: query\n      schema:\n        type: string\n      example: London\n    region:\n      name: region\n      description: Region of entity's location\n      in: query\n      schema:\n        type: string\n      example: Greater London\n    country:\n      name: country\n      description: Country of entity's location\n      in: query\n      schema:\n        type: string\n      example: England\n    balance:\n      name: balance\n      description: Account balance of the entity that is greater than or equal to (\u003e=) input amount\n      in: query\n      schema:\n        type: number\n    maxPosBal:\n      name: max_pos_bal\n      description: Maximum positive balance possible for the entity (return entities \u003e= the input amount)\n      in: query\n      schema:\n        type: integer\n    maxNegBal:\n      name: max_neg_bal\n      description: Maximum negative balance possible for the entity (return entities \u003e= the input amount)\n      in: query\n      schema:\n        type: integer\n    transferStatus:\n      name: status\n      description: Status of the transfer\n      in: query\n      schema:\n        type: string\n        enum:\n          - initiated\n          - completed\n          - cancelled\n    transferID:\n      name: transferID\n      in: path\n      description: The ID of the transfer\n      required: true\n      schema:\n        type: string\n    logEmail:\n      name: email\n      description: Admin's or user's email address\n      in: query\n      schema:\n        type: string\n      example: admin1@dev.null\n    logCategory:\n      name: category\n      description: Type of user who performed an action\n      in: query\n      schema:\n        type: string\n      example: admin\n    action:\n      name: action\n      description: Type of user or admin action\n      in: query\n      schema:\n        type: string\n      example: login\n    page:\n      name: page\n      description: The page number\n      in: query\n      schema:\n          type: integer\n          default: 1\n    pageSize:\n      name: page_size\n      description: The number of results per page\n      in: query\n      schema:\n        type: integer\n        default: 10\n        minimum: 1\n        maximum: 100\n  requestBodies:\n    emailAndPassword:\n      description: A JSON object containing an email address and password\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n              - password\n            properties:\n              email:\n                type: string\n              password:\n                type: string\n          example:\n            email: admin@dev.null\n            password: 1TrulySecurePassword!!\n    resetPassword:\n      description: A JSON object containing an email address\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n            properties:\n              email:\n                type: string\n          example:\n            email: admin@dev.null\n    updatePassword:\n      description: A JSON object containing a password\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - password\n            properties:\n              password:\n                type: string\n          example:\n            password: 1EvenM00rTrulySecurePassword!@?!\n    manageCategory:\n      description: A JSON object containing a category name\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n          example:\n            name: some-category\n    manageTag:\n      description: A JSON object containing a tag name\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n          example:\n            name: some-tag\n    updateUser:\n      description: The user fields an admin wants to update\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              firstName:\n                type: string\n              lastName:\n                type: string\n              telephone:\n                type: string\n              email:\n                type: string\n          example:\n            firstName: Jane K.\n            lastName: Doer\n            telephone: \"+442012345678\"\n            email: jdoe@dev.null\n    updateEntity:\n      description: The entity fields a user wants to update\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              email:\n                type: string\n              telephone:\n                type: string\n              incType:\n                type: string\n              companyNumber:\n                type: string\n              website:\n                type: string\n              declaredTurnover:\n                type: integer\n              description:\n                type: string\n              address:\n                type: string\n              city:\n                type: string\n              region:\n                type: string\n              postalCode:\n                type: string\n              country:\n                type: string\n              status:\n                type: string\n                enum:\n                  - pending\n                  - accepted\n                  - rejected\n                  - tradingPending\n                  - tradingAccepted\n                  - tradingRejected\n              offers:\n                type: array\n                items:\n                  type: string\n              wants:\n                type: array\n                items:\n                  type: string\n              categories:\n                type: array\n                items:\n                  type: string\n              showTagsMatchedSinceLastLogin:\n                type: boolean\n              receiveDailyMatchNotificationEmail:\n                type:  boolean\n              maxPositiveBalance:\n                type: integer\n              maxNegativeBalance:\n                type: integer\n          example:\n            name: New World Pizza PLC\n            email: nwpizza@dev.null\n            telephone: \"+442098765432\"\n            incType: plc\n            companyNumber: \"B67890\"\n            website: https://nwpizza.null\n            declaredTurnover: 10000\n            description: \"We show you how good things can taste and where you need to go to eat them!\"\n            address: 456 Yellow Brick Road\n            city: London\n            region: Greater London\n            postalCode: UK1 2ENG\n            country: England\n            status: tradingAccepted\n            offers: \n                - pizza\n                - wine\n            wants:\n                - flour\n                - tomato\n                -  mozzarella\n            categories:\n                - restaurant\n            showTagsMatchedSinceLastLogin: true\n            receiveDailyMatchNotificationEmail: true\n            maxPositiveBalance: 20\n            maxNegativeBalance: 10\n    createTransfer:\n      description: The fields needed to create a MC transfer on behalf of users by an admin\n      required: true\n      content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - payer\n                - payee\n                - amount\n              properties:\n                payer:\n                  type: string\n                payee:\n                  type: string\n                amount:\n                  type: number\n                description:\n                  type: string\n            example:\n              payer: \"2338171888854062\"\n              payee: \"1637023403508535\"\n              amount: 1.1\n              description: Payment of invoice number 12345\n  responses:\n    BadRequest:\n      description: The request is missing the \u003cnamed\u003e parameter in the request.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: \u003cnamed\u003e parameter is missing.\n    Unauthorized:\n      description: There was an issue with the authentication data for the request.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Could not authenticate you.\n    PermissionDenied:\n      description: Request was made by user without required permissions\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Permission denied.\n    TooManyRequests:\n      description: The request limit for this resource has been reached for the current rate limit window.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Rate limit exceeded.\n    ServerError:\n      description: An unknown internal error occurred.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Error'\n          example:\n            errors:\n              - message: Internal server error triggered.\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/ic3software/mccs-alpha-api@88ee3970265a5d411db649b62f6fbe1fcb681bda/-/blob/openapi-admin.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ic3software/mccs-alpha-api/blob/88ee3970265a5d411db649b62f6fbe1fcb681bda/openapi-admin.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}