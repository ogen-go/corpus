{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/YorkDevelopers/venimus"
		},
		"file": {
			"name": "swagger1.json",
			"size": 0,
			"path": "yorkdevelopersevents/OpenAPIs/swagger1.json",
			"byteSize": 69868,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"Venimus\",\n    \"license\": {\n      \"name\": \"(c) York Developers - All Rights Reserved\"\n    },\n    \"version\": \"v1\"\n  },\n  \"paths\": {\n    \"/api/groups/{groupSlug}/events\": {\n      \"post\": {\n        \"tags\": [\n          \"Events\"\n        ],\n        \"summary\": \"Allows you to create a new event for your group.\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    POST /api/groups/YorkCodeDojo/events\\r\\n    {\\r\\n        \\\"slug\\\" : \\\"Oct2019\\\"\\r\\n        \\\"title\\\" : \\\"Game of Life - Oct 2019\\\",\\r\\n        \\\"description\\\" : \\\"Tonight we will work in pairs implementing the **classic Game Of Life**\\\"\\r\\n        \\\"location\\\" : \\\"Room 12\\\"\\r\\n        \\\"startTime\\\" : \\\"2019-12-12 18:30\\\"\\r\\n        \\\"endTime\\\" : \\\"2019-12-12 21:00\\\"\\r\\n    }\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateEvent\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateEvent\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateEvent\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"404\": {\n            \"description\": \"The group does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"201\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\"\n          }\n        }\n      }\n    },\n    \"/api/groups/{groupSlug}/events/{eventSlug}\": {\n      \"put\": {\n        \"tags\": [\n          \"Events\"\n        ],\n        \"summary\": \"Allows you to amend the details of an existing event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    PUT /api/groups/YorkCodeDojo/events/12345\\r\\n    {\\r\\n        \\\"slug\\\" : \\\"Oct2019\\\"\\r\\n        \\\"title\\\" : \\\"Game of Life - Oct 2019\\\",\\r\\n        \\\"description\\\" : \\\"Tonight we will work in pairs implementing the **classic Game Of Life**\\\"\\r\\n        \\\"location\\\" : \\\"Room 12\\\"\\r\\n        \\\"startTime\\\" : \\\"2019-12-12 18:30\\\"\\r\\n        \\\"endTime\\\" : \\\"2019-12-12 21:00\\\"\\r\\n        \\\"host\\\" : \\\"E Betteridge\\\"\\r\\n        \\\"speaker\\\" : \\\"J Betteridge\\\"\\r\\n    }\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateEvent\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateEvent\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateEvent\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"404\": {\n            \"description\": \"The group or event does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Events\"\n        ],\n        \"summary\": \"Allows an administrator to delete an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    DELETE /api/groups/YorkCodeDojo/events/1234\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          }\n        }\n      },\n      \"get\": {\n        \"tags\": [\n          \"Events\"\n        ],\n        \"summary\": \"Allows you to retrieve the details of an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups/YorkCodeDojo/events/1234\",\n        \"operationId\": \"Events\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetEvent\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetEvent\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetEvent\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group or Event does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Groups/{groupSlug}/Events/{eventSlug}/Members\": {\n      \"get\": {\n        \"tags\": [\n          \"EventsAttendees\"\n        ],\n        \"summary\": \"Allows you to retrieve the members of an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups/YorkCodeDojo/Events/Nov2019/Members\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListEventAttendees\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListEventAttendees\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListEventAttendees\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"No Access.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"No Permission.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/public/FutureEvents\": {\n      \"get\": {\n        \"tags\": [\n          \"FutureEvents\"\n        ],\n        \"summary\": \"Allows you request the list of future events.  Maximum of 10 per group.\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /public/FutureEvents\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListFutureEvents\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListFutureEvents\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListFutureEvents\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Groups\": {\n      \"post\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to create a new group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    POST /api/groups\\r\\n    {\\r\\n        \\\"slug\\\" : \\\"YorkCodeDojo\\\",\\r\\n        \\\"name\\\" : \\\"York Cod eDojo\\\",\\r\\n        \\\"isActive\\\" : true,\\r\\n        \\\"slackChannelName\\\" : \\\"YorkCodeDojo\\\",\\r\\n        \\\"logoInBase64\\\" : \\\"1111\\\",\\r\\n        \\\"description\\\" : \\\"Improve your code by practice.\\\"\\r\\n    }\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateGroup\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateGroup\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CreateGroup\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\"\n          }\n        }\n      },\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to retrieve the list of all groups\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups\",\n        \"parameters\": [\n          {\n            \"name\": \"includeInActiveGroups\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"boolean\",\n              \"default\": false\n            }\n          },\n          {\n            \"name\": \"groupsIBelongToOnly\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"boolean\",\n              \"default\": false\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroups\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroups\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroups\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Groups/{groupSlug}\": {\n      \"put\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to update an existing group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    PUT /api/groups/YorkCodeDojo\\r\\n    {\\r\\n        \\\"slug\\\" : \\\"YorkCodeDojo\\\",\\r\\n        \\\"name\\\" : \\\"York Cod eDojo\\\",\\r\\n        \\\"isActive\\\" : true,\\r\\n        \\\"slackChannelName\\\" : \\\"YorkCodeDojo\\\",\\r\\n        \\\"logoInBase64\\\" : \\\"1111\\\",\\r\\n        \\\"description\\\" : \\\"Improve your code by practice.\\\"\\r\\n    }\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateGroup\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateGroup\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateGroup\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"201\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\"\n          }\n        }\n      },\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to retrieve the details of a group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups/YorkCodeDojo\",\n        \"operationId\": \"Groups\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetGroup\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetGroup\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetGroup\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to delete an existing group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    DELETE /api/groups/YorkCodeDojo\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"NoContent\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\"\n          }\n        }\n      }\n    },\n    \"/api/groups/{groupSlug}/logo\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Allows you to get the logo for a group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups/YORKCODEDOJO/logo\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Groups/{groupSlug}/Members\": {\n      \"get\": {\n        \"tags\": [\n          \"GroupsMembers\"\n        ],\n        \"summary\": \"Allows you to retrieve the members of a group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/groups/YorkCodeDojo/Members\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroupMembers\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroupMembers\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ListGroupMembers\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"No Access.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"No Permission.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"GroupsMembers\"\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AddGroupMember\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AddGroupMember\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AddGroupMember\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"Unauthorized\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Forbidden\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/public/SlackWebHook\": {\n      \"post\": {\n        \"tags\": [\n          \"SlackWebHook\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/user/connected\": {\n      \"post\": {\n        \"tags\": [\n          \"UserConnected\"\n        ],\n        \"summary\": \"Called once the user has connected to the frontend.  This ensures that they exist in the database.\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    POST /api/users/connected\\r\\n    {\\r\\n    }\",\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/user\": {\n      \"get\": {\n        \"tags\": [\n          \"UserDetails\"\n        ],\n        \"summary\": \"Allows the current user to retrieve their personal profile\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/user\",\n        \"operationId\": \"CurrentUserDetails\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyDetails\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"UserDetails\"\n        ],\n        \"summary\": \"Allows the current user to update their personal profile\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    PUT /api/user\\r\\n    {\\r\\n        \\\"pronoun\\\" : \\\"Him\\\"\\r\\n        \\\"Fullname\\\" : \\\"David Betteridge\\\",\\r\\n        \\\"DisplayName\\\" : \\\"David B\\\",\\r\\n        \\\"Bio\\\" : \\\"I am me\\\",\\r\\n        \\\"profilePictureAsBase64\\\" : \\\"123123123\\\",\\r\\n    }\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateMyDetails\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateMyDetails\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UpdateMyDetails\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/user/events\": {\n      \"get\": {\n        \"tags\": [\n          \"UserEvents\"\n        ],\n        \"summary\": \"Allows the current user to retrieve all the future events they have signed up to.\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/user/events\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ViewAllMyEventRegistrations\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ViewAllMyEventRegistrations\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ViewAllMyEventRegistrations\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/User/Groups\": {\n      \"post\": {\n        \"tags\": [\n          \"UserGroups\"\n        ],\n        \"summary\": \"Allows the current user to join a group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    POST /api/user/groups\\r\\n    {\\r\\n        \\\"groupSlug\\\" : \\\"YorkCodeDojo\\\",\\r\\n    }\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JoinGroup\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JoinGroup\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JoinGroup\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/User/Groups/{groupSlug}\": {\n      \"delete\": {\n        \"tags\": [\n          \"UserGroups\"\n        ],\n        \"summary\": \"Allows the current user to leave a group\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    DELETE /api/user/groups/YorkCodeDojo\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/User/Groups/{groupSlug}/Events/{eventSlug}\": {\n      \"put\": {\n        \"tags\": [\n          \"UserGroupsEvents\"\n        ],\n        \"summary\": \"Allows the current user to update their registration for an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    PUT /api/user/groups/YorkCodeDojo/Events/Nov2019\\r\\n    {\\r\\n        \\\"numberOfGuest\\\" : 1,\\r\\n        \\\"dietaryRequirements\\\" : \\\"Milk free\\\",\\r\\n        \\\"messageToOrganiser\\\" : \\\"I might be 10 minutes late\\\"\\r\\n    }\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegisterForEvent\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegisterForEvent\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegisterForEvent\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"401\": {\n            \"description\": \"User is not authorized.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group does not exist\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/user/groups/{groupSlug}/events/{eventSlug}\": {\n      \"delete\": {\n        \"tags\": [\n          \"UserGroupsEvents\"\n        ],\n        \"summary\": \"Allows the current user to decline attending an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    DELETE /api/user/groups/YorkCodeDojo/Events/Nov2019\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Success\"\n          },\n          \"400\": {\n            \"description\": \"Event has already happened\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group or Event does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"get\": {\n        \"tags\": [\n          \"UserGroupsEvents\"\n        ],\n        \"summary\": \"Allows the current user to retrieve their registration details for an event\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/user/groups/YorkCodeDojo/Events/Nov2019\",\n        \"operationId\": \"EventRegistration\",\n        \"parameters\": [\n          {\n            \"name\": \"groupSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"eventSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyEventRegistration\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyEventRegistration\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ViewMyEventRegistration\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Group or Event does not exist.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/users\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Allows you to get the details for a user\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/users?displayName=davidb\",\n        \"parameters\": [\n          {\n            \"name\": \"displayName\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetUser\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetUser\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GetUser\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"Unauthorized\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Forbidden\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/users/{userSlug}/profilepicture\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Allows you to get the profile picture for a user\",\n        \"description\": \"Sample request:\\r\\n            \\r\\n    GET /api/users/YORKCODEDOJO/profilepicture\",\n        \"parameters\": [\n          {\n            \"name\": \"userSlug\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"CreateEvent\": {\n        \"required\": [\n          \"description\",\n          \"location\",\n          \"slug\",\n          \"title\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique external id for the event.  For example May2019\",\n            \"nullable\": true\n          },\n          \"title\": {\n            \"maxLength\": 200,\n            \"type\": \"string\",\n            \"description\": \"The title of the event,  for example March 2019 Meetup. Must be unique for the group.\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the event,  in markdown format.\",\n            \"nullable\": true\n          },\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The location of the event, for example York Minster,  Room 201 York St John University\",\n            \"nullable\": true\n          },\n          \"startTimeUTC\": {\n            \"type\": \"string\",\n            \"description\": \"Date and time the event starts\",\n            \"format\": \"date-time\"\n          },\n          \"endTimeUTC\": {\n            \"type\": \"string\",\n            \"description\": \"Date and time the event ends.  Must be after the StartTime\",\n            \"format\": \"date-time\"\n          },\n          \"maximumNumberOfAttendees\": {\n            \"type\": \"integer\",\n            \"description\": \"How many people + guests are allowed to sign up.  This includes hosts and speakers\",\n            \"format\": \"int32\"\n          },\n          \"guestsAllowed\": {\n            \"type\": \"boolean\",\n            \"description\": \"Are members allowed to bring guests to this event?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ProblemDetails\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"status\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"nullable\": true\n          },\n          \"detail\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"instance\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"extensions\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"additionalProperties\": false\n            },\n            \"nullable\": true,\n            \"readOnly\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"UpdateEvent\": {\n        \"required\": [\n          \"description\",\n          \"location\",\n          \"slug\",\n          \"title\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique external id for the event.  For example May2019\",\n            \"nullable\": true\n          },\n          \"title\": {\n            \"maxLength\": 200,\n            \"type\": \"string\",\n            \"description\": \"The title of the event,  for example March 2019 Meetup. Must be unique for the group.\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the event,  in markdown format.\",\n            \"nullable\": true\n          },\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The location of the event, for example York Minster,  Room 201 York St John University\",\n            \"nullable\": true\n          },\n          \"startTimeUTC\": {\n            \"type\": \"string\",\n            \"description\": \"Date and time the event starts\",\n            \"format\": \"date-time\"\n          },\n          \"endTimeUTC\": {\n            \"type\": \"string\",\n            \"description\": \"Date and time the event ends.  Must be after the StartTime\",\n            \"format\": \"date-time\"\n          },\n          \"maximumNumberOfAttendees\": {\n            \"type\": \"integer\",\n            \"description\": \"How many people + guests are allowed to sign up.  This includes hosts and speakers\",\n            \"format\": \"int32\"\n          },\n          \"guestsAllowed\": {\n            \"type\": \"boolean\",\n            \"description\": \"Are members allowed to bring guests to this event?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Question\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"type\": \"string\",\n            \"description\": \"Unique ID for this question.\",\n            \"nullable\": true\n          },\n          \"caption\": {\n            \"type\": \"string\",\n            \"description\": \"Question shown to the user\",\n            \"nullable\": true\n          },\n          \"questionType\": {\n            \"type\": \"string\",\n            \"description\": \"Type of question,  text, date, boolean etc\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"GetEvent\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"eventSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external ID for the event.\",\n            \"nullable\": true\n          },\n          \"groupName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the group hosting the event.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"eventTitle\": {\n            \"type\": \"string\",\n            \"description\": \"The title of the event.  Monthly meeting - October\",\n            \"nullable\": true\n          },\n          \"eventDescription\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the event in markdown.\",\n            \"nullable\": true\n          },\n          \"eventStartsUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event start,  in UTC time?\",\n            \"format\": \"date-time\"\n          },\n          \"eventFinishesUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event finish, in UTC time?\",\n            \"format\": \"date-time\"\n          },\n          \"eventLocation\": {\n            \"type\": \"string\",\n            \"description\": \"Where is the event being held?\",\n            \"nullable\": true\n          },\n          \"maximumNumberOfAttendees\": {\n            \"type\": \"integer\",\n            \"description\": \"How many people + guests are allowed to sign up.  This includes hosts and speakers\",\n            \"format\": \"int32\"\n          },\n          \"guestsAllowed\": {\n            \"type\": \"boolean\",\n            \"description\": \"Are members allowed to bring guests to this event?\"\n          },\n          \"questions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Question\"\n            },\n            \"description\": \"Questions to ask the user when they are registering\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ListEventAttendees\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The external ID for the user.\",\n            \"nullable\": true\n          },\n          \"emailAddress\": {\n            \"type\": \"string\",\n            \"description\": \"The email address which also links all the social media accounts together.\",\n            \"nullable\": true\n          },\n          \"pronoun\": {\n            \"type\": \"string\",\n            \"description\": \"The users preferred personal pronon.  e.g. Him\",\n            \"nullable\": true\n          },\n          \"fullname\": {\n            \"type\": \"string\",\n            \"description\": \"The user's fullname.  e.g David Betteridge\",\n            \"nullable\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\",\n            \"description\": \"The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB\\r\\n(Has to be unique)\",\n            \"nullable\": true\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"The user's biography.  This can include their place of work/student,  any interests etc.\\r\\nVisible to all signed in members\",\n            \"nullable\": true\n          },\n          \"profilePictureInBase64\": {\n            \"type\": \"string\",\n            \"description\": \"The user's profile picture\",\n            \"nullable\": true\n          },\n          \"isHost\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the event's host\"\n          },\n          \"isSpeaker\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is a speaker at the event\"\n          },\n          \"isAttending\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the user attending the event?\"\n          },\n          \"numberOfGuests\": {\n            \"type\": \"integer\",\n            \"description\": \"How many guests is this person bringing?\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ListFutureEvents\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"eventSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external ID for the event.\",\n            \"nullable\": true\n          },\n          \"groupName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the group hosting the event.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"eventTitle\": {\n            \"type\": \"string\",\n            \"description\": \"The title of the event.  Monthly meeting - October\",\n            \"nullable\": true\n          },\n          \"eventDescription\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the event in markdown.\",\n            \"nullable\": true\n          },\n          \"eventStartsUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event start,  in UTC time?\",\n            \"format\": \"date-time\"\n          },\n          \"eventFinishesUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event finish, in UTC time?\",\n            \"format\": \"date-time\"\n          },\n          \"groupSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"groupLogo\": {\n            \"type\": \"string\",\n            \"description\": \"The group's logo. (Either URL or Base64)\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"CreateGroup\": {\n        \"required\": [\n          \"description\",\n          \"name\",\n          \"slug\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"isActive\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this group still actively running events?\"\n          },\n          \"name\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique name for the group / community.  For example York Code Dojo\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the group in markdown\",\n            \"nullable\": true\n          },\n          \"strapLine\": {\n            \"type\": \"string\",\n            \"description\": \"A very short one-line description of the group\",\n            \"nullable\": true\n          },\n          \"slackChannelName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of this groups slack channel\",\n            \"nullable\": true\n          },\n          \"logoInBase64\": {\n            \"type\": \"string\",\n            \"description\": \"The group's logo.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ListGroups\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"isActive\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this group still actively running events?\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The unique name for the group / community.  For example York Code Dojo\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the group in markdown\",\n            \"nullable\": true\n          },\n          \"strapLine\": {\n            \"type\": \"string\",\n            \"description\": \"A very short one-line description of the group\",\n            \"nullable\": true\n          },\n          \"slackChannelName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of this groups slack channel\",\n            \"nullable\": true\n          },\n          \"logo\": {\n            \"type\": \"string\",\n            \"description\": \"The URL of the groups logo\",\n            \"format\": \"uri\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"UpdateGroup\": {\n        \"required\": [\n          \"description\",\n          \"name\",\n          \"slug\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"isActive\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this group still actively running events?\"\n          },\n          \"name\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The unique name for the group / community.  For example York Code Dojo\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the group in markdown\",\n            \"nullable\": true\n          },\n          \"strapLine\": {\n            \"type\": \"string\",\n            \"description\": \"A very short one-line description of the group\",\n            \"nullable\": true\n          },\n          \"slackChannelName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of this groups slack channel\",\n            \"nullable\": true\n          },\n          \"logoInBase64\": {\n            \"type\": \"string\",\n            \"description\": \"The group's logo.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"GetGroup\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"isActive\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this group still actively running events?\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The unique name for the group / community.  For example York Code Dojo\",\n            \"nullable\": true\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the group in markdown\",\n            \"nullable\": true\n          },\n          \"strapLine\": {\n            \"type\": \"string\",\n            \"description\": \"A very short one-line description of the group\",\n            \"nullable\": true\n          },\n          \"slackChannelName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of this groups slack channel\",\n            \"nullable\": true\n          },\n          \"logo\": {\n            \"type\": \"string\",\n            \"description\": \"The group's logo. (Either URL or Base64)\",\n            \"format\": \"uri\",\n            \"nullable\": true\n          },\n          \"canViewMembers\": {\n            \"type\": \"boolean\",\n            \"description\": \"Can this user view the list of members in this group?\"\n          },\n          \"canAddEvents\": {\n            \"type\": \"boolean\",\n            \"description\": \"Can this user create new events for this group?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ListGroupMembers\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The external ID for the user.\",\n            \"nullable\": true\n          },\n          \"emailAddress\": {\n            \"type\": \"string\",\n            \"description\": \"The email address which also links all the social media accounts together.\",\n            \"nullable\": true\n          },\n          \"pronoun\": {\n            \"type\": \"string\",\n            \"description\": \"The users preferred personal pronon.  e.g. Him\",\n            \"nullable\": true\n          },\n          \"fullname\": {\n            \"type\": \"string\",\n            \"description\": \"The user's fullname.  e.g David Betteridge\",\n            \"nullable\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\",\n            \"description\": \"The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB\\r\\n(Has to be unique)\",\n            \"nullable\": true\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"The user's biography.  This can include their place of work/student,  any interests etc.\\r\\nVisible to all signed in members\",\n            \"nullable\": true\n          },\n          \"profilePicture\": {\n            \"type\": \"string\",\n            \"description\": \"The URL of the user's profile picture\",\n            \"format\": \"uri\",\n            \"nullable\": true\n          },\n          \"isAdministrator\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the user a group administrator?\"\n          },\n          \"isApproved\": {\n            \"type\": \"boolean\",\n            \"description\": \"Has this user's membership to the group been approved?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"AddGroupMember\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique ID of the user to add\",\n            \"nullable\": true\n          },\n          \"isAdministrator\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the user an administrator of the group?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ViewMyDetails\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"emailAddress\": {\n            \"type\": \"string\",\n            \"description\": \"The email address which also links all the social media accounts together.\",\n            \"nullable\": true\n          },\n          \"pronoun\": {\n            \"type\": \"string\",\n            \"description\": \"The users preferred personal pronon.  e.g. Him\",\n            \"nullable\": true\n          },\n          \"fullname\": {\n            \"type\": \"string\",\n            \"description\": \"The user's fullname.  e.g David Betteridge\",\n            \"nullable\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\",\n            \"description\": \"The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB\\r\\n(Has to be unique)\",\n            \"nullable\": true\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"The user's biography.  This can include their place of work/student,  any interests etc.\\r\\nVisible to all signed in members\",\n            \"nullable\": true\n          },\n          \"profilePictureAsBase64\": {\n            \"type\": \"string\",\n            \"description\": \"The user's profile picture in base64\",\n            \"nullable\": true\n          },\n          \"isRegistered\": {\n            \"type\": \"boolean\",\n            \"description\": \"Has the user completed the registration stage (ie. entered all their details)\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"UpdateMyDetails\": {\n        \"required\": [\n          \"bio\",\n          \"displayName\",\n          \"fullname\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"pronoun\": {\n            \"type\": \"string\",\n            \"description\": \"The users preferred personal pronon.  e.g. Him\",\n            \"nullable\": true\n          },\n          \"fullname\": {\n            \"type\": \"string\",\n            \"description\": \"The user's fullname.  e.g David Betteridge\",\n            \"nullable\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\",\n            \"description\": \"The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB\\r\\n(Has to be unique)\",\n            \"nullable\": true\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"The user's biography.  This can include their place of work/student,  any interests etc.\\r\\nVisible to all signed in members\",\n            \"nullable\": true\n          },\n          \"profilePictureAsBase64\": {\n            \"type\": \"string\",\n            \"description\": \"The user's profile picture in base64\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ViewAllMyEventRegistrations\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"groupSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external code for the group.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"eventSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The unique external ID for the event.\",\n            \"nullable\": true\n          },\n          \"groupName\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the group hosting the event.  For example YorkCodeDojo\",\n            \"nullable\": true\n          },\n          \"eventTitle\": {\n            \"type\": \"string\",\n            \"description\": \"The title of the event.  Monthly meeting - October\",\n            \"nullable\": true\n          },\n          \"eventDescription\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the event in markdown.\",\n            \"nullable\": true\n          },\n          \"eventStartsUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event start,  in UTC time?\",\n            \"format\": \"date-time\"\n          },\n          \"eventFinishesUTC\": {\n            \"type\": \"string\",\n            \"description\": \"When does the event finish, in UTC time?\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"JoinGroup\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"groupSlug\": {\n            \"type\": \"string\",\n            \"description\": \"The slug of the group that the user is joining.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Answer\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"code\": {\n            \"type\": \"string\",\n            \"description\": \"Unique ID for this question.\",\n            \"nullable\": true\n          },\n          \"usersAnswer\": {\n            \"type\": \"string\",\n            \"description\": \"Answer from the user\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"RegisterForEvent\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"answers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Answer\"\n            },\n            \"description\": \"The user's answers\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"ViewMyEventRegistration\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"numberOfGuests\": {\n            \"type\": \"integer\",\n            \"description\": \"The number of unregistered guests joining the user\",\n            \"format\": \"int32\"\n          },\n          \"dietaryRequirements\": {\n            \"type\": \"string\",\n            \"description\": \"Any Dietary Requirements.\",\n            \"nullable\": true\n          },\n          \"messageToOrganiser\": {\n            \"type\": \"string\",\n            \"description\": \"Free format message to the event host.\",\n            \"nullable\": true\n          },\n          \"attending\": {\n            \"type\": \"boolean\",\n            \"description\": \"Has the user said they are attending the event?\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"GetUser\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"slug\": {\n            \"type\": \"string\",\n            \"description\": \"The external ID for the user.\",\n            \"nullable\": true\n          },\n          \"emailAddress\": {\n            \"type\": \"string\",\n            \"description\": \"The email address which also links all the social media accounts together.\",\n            \"nullable\": true\n          },\n          \"pronoun\": {\n            \"type\": \"string\",\n            \"description\": \"The users preferred personal pronon.  e.g. Him\",\n            \"nullable\": true\n          },\n          \"fullname\": {\n            \"type\": \"string\",\n            \"description\": \"The user's fullname.  e.g David Betteridge\",\n            \"nullable\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\",\n            \"description\": \"The user's name within the system.  Ideally the same as their slack name.  e.g. DavidB\\r\\n(Has to be unique)\",\n            \"nullable\": true\n          },\n          \"bio\": {\n            \"type\": \"string\",\n            \"description\": \"The user's biography.  This can include their place of work/student,  any interests etc.\\r\\nVisible to all signed in members\",\n            \"nullable\": true\n          },\n          \"profileURL\": {\n            \"type\": \"string\",\n            \"description\": \"The URL to the user's profile picture\",\n            \"format\": \"uri\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      }\n    },\n    \"securitySchemes\": {\n      \"Bearer\": {\n        \"type\": \"http\",\n        \"description\": \"Please enter the token obtained by calling the /token endpoint.\",\n        \"scheme\": \"bearer\"\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"Bearer\": [ ]\n    }\n  ]\n}",
			"canonicalURL": "/github.com/YorkDevelopers/venimus@0e495fbf072bcac5a19f7e5ffac8326f4676cc5a/-/blob/yorkdevelopersevents/OpenAPIs/swagger1.json",
			"externalURLs": [
				{
					"url": "https://github.com/YorkDevelopers/venimus/blob/0e495fbf072bcac5a19f7e5ffac8326f4676cc5a/yorkdevelopersevents/OpenAPIs/swagger1.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}