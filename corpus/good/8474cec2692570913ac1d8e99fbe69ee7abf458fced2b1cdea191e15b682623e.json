{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teiid/teiid-operator"
		},
		"file": {
			"name": "vdb_with_openapi_ddl.yaml",
			"size": 0,
			"path": "deploy/crs/vdb_with_openapi_ddl.yaml",
			"byteSize": 7547,
			"content": "apiVersion: teiid.io/v1alpha1\nkind: VirtualDatabase\nmetadata:\n  name: petstore-vdb\nspec:\n  replicas: 1\n  datasources:\n    - name: sampledb\n      type: postgresql\n      properties:\n        - name: username\n          value: user\n        - name: password\n          value: mypassword\n        - name: jdbc-url\n          value: jdbc:postgresql://sampledb/sampledb\n  build:\n    source:\n      ddl: |\n        CREATE DATABASE PetStore OPTIONS (ANNOTATION 'PetStore VDB');\n        USE DATABASE PetStore;\n\n        CREATE SERVER sampledb TYPE 'NONE' FOREIGN DATA WRAPPER postgresql;\n\n        CREATE VIRTUAL SCHEMA pets;\n        CREATE SCHEMA petdb SERVER sampledb;\n\n        SET SCHEMA petdb;\n        CREATE FOREIGN TABLE Pet\n        (\n            id integer,\n            name varchar(50),\n            status varchar(10),\n            CONSTRAINT PK_PET PRIMARY KEY(id)\n        ) OPTIONS(UPDATABLE 'TRUE');\n\n        SET SCHEMA pets;\n\n        CREATE VIRTUAL PROCEDURE createPets(IN pet json) OPTIONS (UPDATECOUNT 1)AS\n        BEGIN\n          LOOP ON (SELECT j.id, j.name, j.status FROM JSONTABLE(pet, '$', false COLUMNS id integer, name string, status string) as j) AS x\n          BEGIN\n              INSERT INTO petdb.Pet(id, name, status) VALUES (x.id, x.name, x.status);\n          END\n        END\n\n        CREATE VIRTUAL PROCEDURE showPetById(IN petId integer) RETURNS json OPTIONS (UPDATECOUNT 0)AS\n        BEGIN\n            declare json x = (SELECT JSONOBJECT(id, name, status) FROM petdb.Pet where id = petId);\n            return x;\n        END\n\n        CREATE VIRTUAL PROCEDURE listPets(IN \"limit\" integer) RETURNS json OPTIONS (UPDATECOUNT 0)AS\n        BEGIN\n            declare json x = (SELECT JSONARRAY_AGG(JSONOBJECT(p.id, p.name, p.status))\n                FROM petdb.Pet p WHERE p.status in (status));\n            return x;\n        END\n      openapi: |\n        {\n          \"openapi\": \"3.0.0\",\n          \"info\": {\n            \"version\": \"1.0.0\",\n            \"title\": \"Swagger Petstore\",\n            \"license\": {\n              \"name\": \"MIT\"\n            }\n          },\n          \"servers\": [\n            {\n              \"url\": \"http://petstore.swagger.io/v1\"\n            }\n          ],\n          \"paths\": {\n            \"/pets\": {\n              \"get\": {\n                \"summary\": \"List all pets\",\n                \"operationId\": \"listPets\",\n                \"tags\": [\n                  \"pets\"\n                ],\n                \"parameters\": [\n                  {\n                    \"name\": \"limit\",\n                    \"in\": \"query\",\n                    \"description\": \"How many items to return at one time (max 100)\",\n                    \"required\": false,\n                    \"schema\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int32\"\n                    }\n                  }\n                ],\n                \"responses\": {\n                  \"200\": {\n                    \"description\": \"A paged array of pets\",\n                    \"headers\": {\n                      \"x-next\": {\n                        \"description\": \"A link to the next page of responses\",\n                        \"schema\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    },\n                    \"content\": {\n                      \"application/json\": {\n                        \"schema\": {\n                          \"$ref\": \"#/components/schemas/Pets\"\n                        }\n                      }\n                    }\n                  },\n                  \"default\": {\n                    \"description\": \"unexpected error\",\n                    \"content\": {\n                      \"application/json\": {\n                        \"schema\": {\n                          \"$ref\": \"#/components/schemas/Error\"\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"post\": {\n                \"summary\": \"Create a pet\",\n                \"operationId\": \"createPets\",\n                \"requestBody\": {\n                  \"description\": \"Pet to add to the store\",\n                  \"required\": true,\n                  \"content\": {\n                    \"application/json\": {\n                      \"schema\": {\n                        \"$ref\": \"#/components/schemas/Pet\"\n                      }\n                    }\n                  }\n                },\n                \"tags\": [\n                  \"pets\"\n                ],\n                \"responses\": {\n                  \"201\": {\n                    \"description\": \"Null response\"\n                  },\n                  \"default\": {\n                    \"description\": \"unexpected error\",\n                    \"content\": {\n                      \"application/json\": {\n                        \"schema\": {\n                          \"$ref\": \"#/components/schemas/Error\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            \"/pets/{petId}\": {\n              \"get\": {\n                \"summary\": \"Info for a specific pet\",\n                \"operationId\": \"showPetById\",\n                \"tags\": [\n                  \"pets\"\n                ],\n                \"parameters\": [\n                  {\n                    \"name\": \"petId\",\n                    \"in\": \"path\",\n                    \"required\": true,\n                    \"description\": \"The id of the pet to retrieve\",\n                    \"schema\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                ],\n                \"responses\": {\n                  \"200\": {\n                    \"description\": \"Expected response to a valid request\",\n                    \"content\": {\n                      \"application/json\": {\n                        \"schema\": {\n                          \"$ref\": \"#/components/schemas/Pets\"\n                        }\n                      }\n                    }\n                  },\n                  \"default\": {\n                    \"description\": \"unexpected error\",\n                    \"content\": {\n                      \"application/json\": {\n                        \"schema\": {\n                          \"$ref\": \"#/components/schemas/Error\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"components\": {\n            \"schemas\": {\n              \"Pet\": {\n                \"required\": [\n                  \"id\",\n                  \"name\"\n                ],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"status\": {\n                    \"type\": \"string\"\n                  }\n                }\n              },\n              \"Pets\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/Pet\"\n                }\n              },\n              \"Error\": {\n                \"required\": [\n                  \"code\",\n                  \"message\"\n                ],\n                \"properties\": {\n                  \"code\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"message\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n",
			"canonicalURL": "/github.com/teiid/teiid-operator@9d8613e581b0b041c0b7cc47fb25f4600cc86bf6/-/blob/deploy/crs/vdb_with_openapi_ddl.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/teiid/teiid-operator/blob/9d8613e581b0b041c0b7cc47fb25f4600cc86bf6/deploy/crs/vdb_with_openapi_ddl.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}