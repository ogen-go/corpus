{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/octotravel/spec"
		},
		"file": {
			"name": "openapi_v1.0.0-alpha.yaml",
			"size": 0,
			"path": "docs/openapi_v1.0.0-alpha.yaml",
			"byteSize": 68025,
			"content": "openapi: 3.0.0\n\ninfo:\n  description: |\n    An open-source API for connecting Resellers and Booking Platforms.\n\n    The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [BCP 14](https://tools.ietf.org/html/bcp14) [RFC 2119](https://tools.ietf.org/html/rfc2119) [RFC 8174](https://tools.ietf.org/html/rfc8174) when, and only when, they appear in all capitals, as shown here.\n  version: \"1.0.0-alpha\"\n  title: 'Open Connectivity for Tourism (OCTo) API'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n\npaths:\n  /suppliers:\n    get:\n      tags:\n        - Suppliers\n      summary: 'Returns a list of suppliers and associated contact details.'\n      description: |\n        This list MAY be limited based on the suppliers that the authenticated user has been granted access to.\n      operationId: 'suppliers'\n      responses:\n        '200':\n          description: |\n            List of suppliers with details.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Supplier'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                  errorClass: 'unknownError'\n                  errorCode: 'core/9000'\n                  errorMessage: 'the stars are not aligned'\n                  retryable: true\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/products:\n    get:\n      tags:\n        - Products\n      summary: 'Returns a list of products for a specific supplier.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        Contains all product details necessary to ingest, map, and sell.\n      operationId: 'products'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n      responses:\n        '200':\n          description: |\n            List of products with details.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Product'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003csupplierId\u003e'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/availability:\n    get:\n      tags:\n        - Availability\n      summary: 'Returns a list of dates and their availability status.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        For any dates which are never available for booking, the response MUST exclude those dates entirely.\n\n        If the product's `availabilityType` is `OPENING_HOURS` then the `localDateTimeStart` and `localDateTimeEnd` are the hours of operation. If a product has more than one hours of operation on the same day (e.g. the supplier is open 8-5 but closed for lunch from 12-1) then one availability object MUST be returned for each contiguous range of time for that day.\n\n        The availability `id` value MUST be sent when making a Booking request.\n\n        The `status` field SHOULD be used to infer how frequently your cache should be updated from the Booking Platform. The RECOMMENDED frequency is as follows:\n\n          * `FREESALE`: Always available. Refresh no more than once/week.\n          * `AVAILABLE`: Currently available for sale, but has a fixed capacity. Refresh every 12 hours.\n          * `LIMITED`: Currently available for sale, but has a fixed capacity and may be sold out soon. Refresh at least once/hour.\n          * `SOLD_OUT`: Currently sold out, but additional availability may free up. Refresh no more than once/hour.\n          * `CLOSED`: Currently not available for sale, but not sold out (e.g. temporarily on stop-sell) and may be available for sale soon. Refresh no more than once/12 hours.\n      operationId: 'availabilityOverview'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/ProductId'\n        - $ref: '#/components/parameters/OptionId'\n        - $ref: '#/components/parameters/LocalDateStart'\n        - $ref: '#/components/parameters/LocalDateEnd'\n      responses:\n        '200':\n          description: |\n            List of availability objects with status.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AvailabilityItem'\n                example:\n                  - id: '28271273-a317-40fc-8f42-79725a7072a3'\n                    localDateTimeStart: '2019-10-31T08:30:00'\n                    localDateTimeEnd: '2019-10-31T10:00:00'\n                    status: 'AVAILABLE'\n                    vacancies: 100\n                  - id: '6143d137-fdf6-4da1-a558-20aa93eb55f0'\n                    localDateTimeStart: '2019-10-31T12:00:00'\n                    localDateTimeEnd: '2019-10-31T13:00:00'\n                    status: 'FREESALE'\n                    vacancies: null\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003csupplierId\u003e'\n                  retryable: false\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9002'\n                  errorMessage: 'unknown value for \u003cproductId\u003e provided'\n                  retryable: false\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9003'\n                  errorMessage: '\u003clocalDateStart\u003e date in the past'\n                  retryable: false                  \n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Availability\n      summary: 'Returns a list of dates after evaluating the specific Unit and Availability IDs that the customer would like to book.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This request is intended to provide the Booking Platform a complete view of the Unit IDs, Unit quantity, and Availability IDs so that additional restrictions and policies can be validated within the Booking Platform prior to making a Booking. The purpose is to provide a clear and accurate answer to the Reseller about whether the requested booking configuration could be accepted by the Supplier. This is to support complex booking requirements without the Reseller needing to know the details of the restriction (e.g. \"must purchase at least 1 adult ticket if a child ticket is purchased\").\n      operationId: 'availabilityCheck'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n      requestBody:\n        $ref: '#/components/requestBodies/AvailabilityCheckRequest'\n      responses:\n        '200':\n          description: |\n            List of availability objects with status.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AvailabilityItem'\n                example:\n                  - id: '28271273-a317-40fc-8f42-79725a7072a3'\n                    localDateTimeStart: '2019-10-31T08:30:00'\n                    localDateTimeEnd: '2019-10-31T10:00:00'\n                    status: 'AVAILABLE'\n                    vacancies: 100\n                  - id: '6143d137-fdf6-4da1-a558-20aa93eb55f0'\n                    localDateTimeStart: '2019-10-31T12:00:00'\n                    localDateTimeEnd: '2019-10-31T13:00:00'\n                    status: 'FREESALE'\n                    vacancies: null\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003cunits[0].id\u003e'\n                  retryable: false\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003cunits[1].id\u003e'\n                  retryable: false\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9002'\n                  errorMessage: 'unknown value for \u003cavailabilityIds[28271273-a317-40fc-8f42-79725a7072a3]\u003e provided'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/availability/calendar:\n    get:\n      tags:\n        - Availability\n      summary: 'Get a list of dates on which tickets are available'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        Returns a list of dates (no times) and the number of vacancies. The response MUST only include dates that have vacancies and a minimum range of 31 days MUST be supported.\n\n        This endpoint is intended to support a lightweight way to show a calendar in a user interface containing a one month view with the days where there is no availability greyed out.\n      operationId: 'availabilityCalendar'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/ProductId'\n        - $ref: '#/components/parameters/OptionId'\n        - $ref: '#/components/parameters/LocalDateStart'\n        - $ref: '#/components/parameters/LocalDateEnd'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AvailabilityCalendarItem'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003csupplierId\u003e'\n                  retryable: false\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9006'\n                  errorMessage: 'date range too large, max supported range is 62 days'\n                  retryable: false\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9003'\n                  errorMessage: '\u003clocalDateStart\u003e date in the past'\n                  retryable: false                  \n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/bookings:\n    post:\n      tags:\n        - Bookings\n      summary: 'Create a new pending booking.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This creates a new pending booking.\n\n        This call has to be idempotent. To be able to safely retry a call on any network error or timeout, therefore it MUST not fail on retry or create a duplicate booking. The idempotency key is the UUID. A supplier SHOULD verify that a retried request with the same UUID is matching the original booking data, to avoid erroneous clients generating repeating UUIDs and response with the status 400 and ErrorCode 1005 in such case.\n      operationId: 'createBooking'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n      requestBody:\n        $ref: '#/components/requestBodies/CreateBookingRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/BookingResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003cproductId\u003e'\n                  retryable: false\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9008'\n                  errorMessage: 'value for \u003choldExpirationMinutes\u003e too large, max supported value is 15 minutes'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/bookings/{uuid}:\n    get:\n      tags:\n        - Bookings\n      summary: 'Gets the current details of an in-progress booking or completed booking.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This returns the current state of any valid booking. This request MAY be made at any point after the initial `createBooking` request is processed successfully and it MUST return the booking object.\n      operationId: 'booking'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/Uuid'\n      responses:\n        '200':\n          $ref: '#/components/responses/BookingResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9002'\n                  errorMessage: 'unknown value for \u003cuuid\u003e provided'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/bookings/{uuid}/extend:\n    post:\n      tags:\n        - Bookings\n      summary: 'Extend the hold of an in-progress booking.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This extends the hold of an in-progress booking. The `utcHoldExpiration` MUST NOT be elapsed when this request is sent, otherwise the response MAY show a `status` of `EXPIRED`.\n      operationId: 'extendBooking'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/Uuid'\n      requestBody:\n        $ref: '#/components/requestBodies/ExtendBookingRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/BookingResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9009'\n                  errorMessage: 'reservation extension limit reached'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/bookings/{uuid}/confirm:\n    post:\n      tags:\n        - Bookings\n      summary: 'Confirm an in-progress booking.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This confirms an in-progress booking. The `utcHoldExpiration` MUST NOT be elapsed when this request is sent, otherwise the response MAY show a `status` of `EXPIRED`.\n\n        This call MUST be idempotent so that a Reseller may retry the request for any network error or timeout. The Booking `uuid` MUST be used to ensure idempotency of the request.\n      operationId: 'confirmBooking'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/Uuid'\n      requestBody:\n        $ref: '#/components/requestBodies/ConfirmBookingRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/BookingResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'illegalOperationError'\n                  errorCode: 'core/9007'\n                  errorMessage: 'reservation expired'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /suppliers/{supplierId}/bookings/{uuid}/cancel:\n    post:\n      tags:\n        - Bookings\n      summary: 'Either cancel the booking, or expire the hold of an in-progress booking.'\n      description: |\n        **WARNING: this endpoint may live under a different domain, path or both depending on the supplier endpoint URL returned by the GET /suppliers.**\n\n        This expires the availability hold of an in-progress booking so that the availablity is release for other bookings. This request is a courtesy, however Resellers SHOULD send this in order to ensure proper cleanup of any outstanding holds.\n\n        This call has to be idempotent. To be able to safely retry a call on any network error or timeout, therefore it MUST not fail on retry. The idempotency key is the UUID.\n      operationId: 'cancelBooking'\n      parameters:\n        - $ref: '#/components/parameters/SupplierId'\n        - $ref: '#/components/parameters/Uuid'\n      requestBody:\n        $ref: '#/components/requestBodies/CancelBookingRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/BookingResponse'\n        '400':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ErrorObject'\n                minItems: 1\n              example:\n                - errorClass: 'inputValidationError'\n                  errorCode: 'core/9001'\n                  errorMessage: 'invalid or missing parameter \u003creason\u003e'\n                  retryable: false\n          description: |\n            An error has occurred. See the definition of the ErrorObject for more details.\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\ncomponents:\n  schemas:\n    ErrorObject:\n      type: object\n      required:\n        - errorClass\n        - errorCode\n        - errorMessage\n        - retryable      \n      properties:\n        errorClass:\n          type: string\n          enum:\n          - inputValidationError\n          - illegalOperationError\n          - unknownError\n          description: |\n            A high level classification of the error category.  \n            `illegalOperationError`: The client is trying to perform an operation that does not comply with certain business logic. Eg.: Trying to cancel a booking while the cancellation window has passed.  \n            \n            `inputValidationError`: One or more input parameters contain invalid values or are missing.  \n            \n            `unknownError`: A last-resort fallback option in case none of the other error classes seem appropriate. Usage of this error class is discouraged.\n        errorMessage:\n          type: string\n          nullable: false\n          description: |\n            Contains a clear, human readable error message that properly describes the issue which MAY comply with the following rules:\n            * No capitalization\n            * No punctuation other than a comma\n            * Field names must:\n              * Be enclosed by \u003c and \u003e symbols\n              * Contain a full path to the value, including array indexes\n          example: 'invalid or missing parameter \u003cunits[0].id\u003e'\n        errorCode:\n          type: string\n          nullable: false\n          description: |\n            Contains a namespaced error code.  \n            The namespace is used to distinguish between core errors and the errors of custom capabilities the server may have implemented and\n              MUST match the regular expression /[a-z\\-]*\\/[0-9]{4}\\/[a-zA-Z \\-]*/.  \n              \n            The `9000-9999` range is reserved for official OCTo error codes.  \n            The `0000-8999` range can be used for scenarios that aren't covered by the OCTo spec.  \n            When no specific error code applies, use 9000.  \n            In serious cases use 9999 accompanied by an HTTP 500 status code. \n              \n            ## Prescribed error codes\n            Using error codes allows the client to programmatically handle errors or determine the gravity of the errors.  \n            The following is a selection of errors codes that should be implemented explicitly.  \n            Failure to do so makes is much harder for a client to re-use the same code with a different partner, without having to adjust to the new partner's errors.  \n            \n            `9000`: Generic error  \n            `9001`: Invalid or missing input  \n            `9002`: Unknown value provided  \n            `9003`: Date in the past  \n            `9004`: Insufficient availability  \n            `9005`: Cancellation not allowed  \n            `9006`: Date range too large  \n            `9007`: Reservation expired  \n            `9008`: Hold period too long  \n            `9009`: Cannot extend hold period  \n            `9010`: Reservation ID not found  \n            `9011`: Reservation expired  \n            `9999`: Generic error for all unexpected / unknown cases  \n              \n          example: 'core/9000'\n        retryable:\n          type: boolean\n          nullable: false\n          description: |\n            The OCTO spec distinguishes between retryable and non-retryable errors. Typically any error is non-retryable, but there are a few exceptions. \n              * A __non-retryable__ error is an error that indicates human intervention is needed. For example\n                * Invalid product / unit ID provided - This suggests there is a mapping problem due to a changed configuration\n                * Insufficient credits - The outstanding rolling deposit with the supplier has depleted and a top-up is needed to continue sales. Note that support for this is not included in the core API specification.\n                * Authentication failure - Credentials may need to be updated\n              * A __retryable__ error is an error that the consumer of the API generally won't have to take action on. The supplier is likely to find out about the issue and is bound to fix it soon and the call can simply be retried later. This includes situations like\n                * Time outs / down-time\n                * Server errors like HTTP 500 without error object in the response body\n                * No more availability for a date / timeslot while placing an order\n          example: 'false'\n    Availability:\n      type: object\n      required:\n        - id\n        - localDateTimeStart\n        - localDateTimeEnd\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be a unique identifier within the scope of the Option.\n          example: '28271273-a317-40fc-8f42-79725a7072a3'\n        localDateTimeStart:\n          type: string\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time.\n          format: date-time\n          example: '2019-10-31T08:30:00'\n        localDateTimeEnd:\n          type: string\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time.\n          format: date-time\n          example: '2019-10-31T10:00:00'\n    AvailabilityCalendarItem:\n      type: object\n      required:\n        - localDate\n        - status\n      properties:\n        localDate:\n          type: string\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date.\n          format: date\n          example: '2019-10-31'\n        status:\n          $ref: '#/components/schemas/AvailabilityStatus'\n        vacancies:\n          type: integer\n          description: |\n            This SHOULD NOT be returned when `status` is `FREESALE`. This SHOULD be a shared pool for all Unit types in the Option. If availability is tracked per-Unit then this value MUST be equal to the available quantity for the Unit that has the most remaining.\n          example: 100\n          minimum: 0\n    AvailabilityItem:\n      allOf:\n        - $ref: '#/components/schemas/Availability'\n        - type: object\n          required:\n            - status\n          properties:\n            status:\n              $ref: '#/components/schemas/AvailabilityStatus'\n            vacancies:\n              type: integer\n              description: |\n                This SHOULD NOT be returned when `status` is `FREESALE`. This SHOULD be a shared pool for all Unit types in the Option. If availability is tracked per-Unit then this value MUST be equal to the available quantity for the Unit that has the most remaining.\n              example: 100\n              minimum: 0\n    AvailabilityStatus:\n      type: string\n      description: |\n        This represents whether the availability in this configuration is currently bookable. The values have the following meanings:\n\n        * `FREESALE`: Always available.\n        * `AVAILABLE`: Currently available for sale, but has a fixed capacity.\n        * `LIMITED`: Currently available for sale, but has a fixed capacity and may be sold out soon.\n        * `SOLD_OUT`: Currently sold out, but additional availability may free up.\n        * `CLOSED`: Currently not available for sale, but not sold out (e.g. temporarily on stop-sell) and may be available for sale soon.\n      enum:\n        - FREESALE\n        - AVAILABLE\n        - LIMITED\n        - SOLD_OUT\n        - CLOSED\n      example: 'AVAILABLE'\n    AvailabilityType:\n      type: string\n      description: |\n        This indicates whether the Product redemption is valid only for a specific start time (e.g. a guided tour) or valid any time during normal business hours.\n      enum:\n        - START_TIME\n        - OPENING_HOURS\n      example: 'START_TIME'\n    Booking:\n      type: object\n      required:\n        - uuid\n        - status\n        - cancellable\n        - productId\n        - optionId\n        - availability\n        - contact\n        - deliveryMethods\n        - unitItems\n      properties:\n        uuid:\n          type: string\n          format: uuid\n          description: |\n            This is a randomly-generated UUID that MUST be tracked by both the Reseller and Booking Platform for locating this record.\n          example: 'f149068e-300e-452a-a856-3f091239f1d7'\n        resellerReference:\n          type: string\n          description: |\n            An OPTIONAL tracking reference for the Reseller that SHOULD be tracked by the Booking Platform. This MUST be returned if the value was provided in the request body.\n          example: '001-002'\n        supplierReference:\n          type: string\n          description: |\n            An OPTIONAL tracking reference for the Supplier that SHOULD be tracked by the Reseller.\n          example: 'ABC-123'\n        status:\n          $ref: '#/components/schemas/Status'\n        cancellable:\n          type: boolean\n          description: |\n            Indicates whether the booking is cancellable right now\n          example: true\n        utcHoldExpiration:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the availability hold will be released. This SHOULD be equivalent to the time calculated by adding `holdExpirationMinutes` to the current UTC time but MAY be either earlier or later than the requested duration.\n          example: '2019-10-31T08:30:00Z'\n        utcConfirmedAt:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the booking was confirmed (either automatically by the Booking Platform or manually by the Supplier).\n          example: '2019-10-31T08:30:00Z'\n        utcDeliveredAt:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at whcih the VOUCHER was delivered.\n          example: '2019-10-31T08:30:00Z'\n        refreshFrequency:\n          $ref: '#/components/schemas/RefreshFrequency'\n        productId:\n          type: string\n          description: |\n            A valid product ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n          example: 'adult'\n        optionId:\n          type: string\n          description: |\n            A valid option ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n          example: 'LR1-01'\n        availability:\n          $ref: '#/components/schemas/Availability'\n        contact:\n          $ref: '#/components/schemas/Contact'\n        deliveryMethods:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeliveryMethod'\n          minItems: 1\n          maxItems: 2\n        voucher:\n          $ref: '#/components/schemas/Ticket'\n        unitItems:\n          type: array\n          items:\n            $ref: '#/components/schemas/UnitItemTicket'\n          minItems: 1\n        cancellationRequest:\n          $ref: '#/components/schemas/CancellationRequest'\n    CancellationRequest:\n      type: object\n      required:\n        - reason\n        - reasonDetails\n        - status\n        - refund\n        - utcRequestedAt\n        - utcConfirmedAt\n        - utcResolvedAt\n      properties:\n        reason:\n          $ref: '#/components/schemas/CancelReason'\n        reasonDetails:\n          type: string\n          description: |\n            This field provides additional details about the reason for the cancellation request. It may include information from the customer, supplier, or support agent about the reason for the cancellation (especially in the case of requesting a cancellation outside of the normal policy which may require manual approval from the supplier).\n          example: 'Child came down with the flu the day before the activity.'\n        status:\n          $ref: '#/components/schemas/Status'\n        refund:\n          $ref: '#/components/schemas/Refund'\n        utcRequestedAt:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the cancellation request was originally started. This timestamp MUST be used for any validation against a cancellation policy. This is important because there may be some delay in confirming this cancellation request during the 2-phase workflow which could finish just after the cancellation policy cutoff has elapsed.\n          example: '2019-10-31T08:30:00Z'\n        utcConfirmedAt:\n          type: string\n          format: date-time\n          nullable: true\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the cancellation request was confirmed by the Reseller.\n          example: '2019-10-31T08:30:00Z'\n        utcResolvedAt:\n          type: string\n          format: date-time\n          nullable: true\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the cancellation was confirmed. This will typically be the same as `utcConfirmedAt` however if the cancellation request required manual approval from the Supplier, it may be different.\n          example: '2019-10-31T08:30:00Z'\n    CancelReason:\n      type: string\n      enum:\n        - CUSTOMER\n        - SUPPLIER\n        - FRAUD\n        - OTHER\n      description: |\n        This value indicates the reason that the cancellation request was sent.\n\n        * `CUSTOMER` is the most common and indicates that the customer requested the cancellation.\n        * `SUPPLIER` indicates that the supplier requested the cancellation (possibly due to bad weather or other unexpected circumstances).\n        * `FRAUD` indicates that the booking cancellation is being requested by the Reseller because it has been determined the booking was fraudulent.\n        * `OTHER` indicates that the cancellation reason does not fall into one of these categories. This SHOULD be used only in rare circumstances.\n      example: 'CUSTOMER_REQUESTED'\n    Capability:\n      type: object\n      required:\n        - id\n        - revision\n        - required\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be a unique identifier within the scope of the OCTo specification. Officially adopted capabilities will be identified only by the name of the capability but any capabilities that are specific to a particular partner MUST be prefixed with that partner's identifier and separated from the capability name with a `/`.\n          example: 'api.my-booking-platform.com/dynamic-pricing'\n        revision:\n          type: integer\n          description: |\n            This represents which revision of the capability is supported. This is not a version numbers and therefore there is no implied version compatibility like you would have with a semantic version, therefore if multiple revisions are supported, then one Capability object should be returned for each revision that is supported.\n          example: 2\n        required:\n          type: boolean\n          description: |\n            This indicates whether the capability is merely supported or strictly required. Resellers that don't support the capability or specific revision will use this flag to filter out products they are unable to support.\n          example: true\n    Contact:\n      type: object\n      required:\n        - fullName\n        - emailAddress\n        - locales\n      properties:\n        fullName:\n          type: string\n          description: |\n            The full name of the lead traveller.\n          example: 'Mr. Traveller'\n        emailAddress:\n          type: string\n          format: email\n          description: |\n            The contact email of the lead traveller.\n          example: 'traveller@fake.com'\n        phoneNumber:\n          type: string\n          description: |\n            The contact phone number of the lead traveller.\n          example: '+1 555-555-1212'\n        locales:\n          type: array\n          items:\n            type: string\n            description: |\n              This MUST be a valid [BCP 47](https://tools.ietf.org/html/bcp47) [RFC 5646](https://tools.ietf.org/html/rfc5646) [RFC 4647](https://tools.ietf.org/html/rfc4647) language tag.\n            example: 'en-GB'\n          example:\n            - en-GB\n            - en-US\n            - en\n          minItems: 0\n        country:\n          type: string\n          description: |\n            This MUST be a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.\n          example: 'GB'\n    DeliveryFormat:\n      type: string\n      enum:\n        - PDF_URL\n        - QRCODE\n        - AZTEC\n        - CODE128\n        - CODE39\n      description: |\n        This indicates the format for the `deliveryValue` so that it can be parsed or encoded correctly.\n      example: 'CODE39'\n    DeliveryMethod:\n      type: string\n      enum:\n        - TICKET\n        - VOUCHER\n      description: |\n        A value of `TICKET` indicates that there will be one `deliveryValue` for each ticket in the Booking while a value of `VOUCHER` indicates that there will be one `deliveryValue` that is shared among all tickets in the Booking.\n      example: 'VOUCHER'\n    DeliveryOption:\n      type: object\n      required:\n        - deliveryFormat\n        - deliveryValue\n      properties:\n        deliveryFormat:\n          $ref: '#/components/schemas/DeliveryFormat'\n        deliveryValue:\n          type: string\n          description: |\n            Represents the value for the voucher or ticket that should be used. If the `deliveryFormat` is `PDF_URL` then this value MUST be a valid [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier) that resolves to a `PDF` resource. For any other `deliveryFormat` this value MUST be encoded according to the `deliveryFormat` value.\n          example: '01234567890'\n    ExtendReason:\n      type: string\n      enum:\n        - FRAUD_CHECK\n        - CUSTOMER_REQUESTED\n        - OTHER\n      description: |\n        This indicates the reason for extending the booking hold.\n\n        * `FRAUD_CHECK` is the most common scenario where additional time is required to ensure that the booking is not being made using fraudulent payment information.\n        * `CUSTOMER_REQUESTED` is intended for scenarios where the customer is actively completing the checkout process but requires some additional time to complete. The Reseller SHOULD try to ensure that customers may only extend their booking once.\n        * `OTHER` can be used in other unusual circumstances but SHOULD not be abused to maintain a hold without good reason. If this value is specified the Reseller SHOULD provide `reasonDetails` to explain the justification.\n      example: 'FRAUD_CHECK'\n    Product:\n      type: object\n      required:\n        - id\n        - internalName\n        - locale\n        - timeZone\n        - instantConfirmation\n        - instantDelivery\n        - availabilityType\n        - deliveryFormats # confirm\n        - deliveryMethods # confirm\n        - redemptionMethod\n        - options\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be unique within the scope of the Supplier.\n          example: '0001'\n        internalName:\n          type: string\n          description: |\n            This SHOULD be a friendly name for the Product to facilitate easier identification. It MUST NOT be shown to the customer.\n          example: 'Morning tour'\n        reference:\n          type: string\n          description: |\n            This is an internal reference identifier that the Supplier wishes to use. It MAY be non-unique.\n          example: 'LR1-01'\n        locale:\n          type: string\n          description: |\n            This MUST be a valid [BCP 47](https://tools.ietf.org/html/bcp47) [RFC 5646](https://tools.ietf.org/html/rfc5646) [RFC 4647](https://tools.ietf.org/html/rfc4647) language tag.\n          example: 'en-GB'\n        timeZone:\n          type: string\n          description: |\n            This MUST be a valid database name from the ICANN [tz database](https://en.wikipedia.org/wiki/Tz_database). Any calculation of UTC offset or UTC DTC offset MUST use the correct offset from this database.\n          example: 'Europe/London'\n        instantConfirmation:\n          type: boolean\n          description: |\n            This indicates whether the Reseller can expect an immediate confirmation of whether the Supplier has accepted the booking. If `false` then the Reseller MUST be able to delay confirmation to the customer while waiting for the Supplier to accept or reject the Booking.\n\n            When `instantConfirmation` is set to `false` one should expect created bookings to first get into a `PENDING` state.\n          example: true\n        instantDelivery:\n          type: boolean\n          description: |\n            This indicates whether the Reseller can expect immediate delivery of the customer's tickets. If `false` then the Reseller MUST be able to delay delivery of the tickets to the customer.\n          example: true\n        availabilityType:\n          $ref: '#/components/schemas/AvailabilityType'\n        deliveryFormats:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeliveryFormat'\n          description: |\n            This MAY contain more than one value if some Options or Units under this Product will use different delivery formats. The Reseller MUST be able to support all of the specified formats in order to sell this Product.\n          example:\n            - PDF_URL\n            - CODE39\n        deliveryMethods:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeliveryMethod'\n          description: |\n            A product MAY support both types of delivery methods.\n          example:\n            - TICKET\n            - VOUCHER\n        redemptionMethod:\n          $ref: '#/components/schemas/RedemptionMethod'\n        capabilities:\n          type: array\n          items:\n            $ref: '#/components/schemas/Capability'\n          minItems: 0\n          example:\n            - id: 'dynamic-pricing'\n              revision: 1\n              required: true\n            - id: 'api.my-booking-platform.com/dynamic-pricing'\n              revision: 2\n              required: false\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProductOption'\n          minItems: 1\n          example:\n            - id: '0001'\n              internalName: 'Morning'\n              reference: 'LR1-01'\n              units:\n                - id: 'adult'\n                  internalName: 'Adult'\n                  reference: 'LR1-01-01'\n                  type: 'ADULT'\n                - id: '0001-0001-child'\n                  internalName: 'Child'\n                  reference: 'LR1-01-02'\n                  type: 'CHILD'\n            - id: '0002'\n              internalName: 'Afternoon'\n              reference: 'LR1-02'\n              units:\n                - id: 'adult'\n                  internalName: 'Adult'\n                  reference: 'LR1-01-01'\n                  type: 'ADULT'\n                - id: '0001-0001-child'\n                  internalName: 'Child'\n                  reference: 'LR1-01-02'\n                  type: 'CHILD'\n    ProductOption:\n      type: object\n      required:\n        - id\n        - internalName\n        - units\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be a unique identifier within the scope of the Product.\n          example: '0001'\n        internalName:\n          type: string\n          description: |\n            This SHOULD be a friendly name for the Option to facilitate easier identification. It MUST NOT be shown to the customer.\n          example: 'Morning'\n        reference:\n          type: string\n          description: |\n            This is an internal reference identifier that the Supplier wishes to use. It MAY be non-unique.\n          example: 'LR1-01'\n        units:\n          type: array\n          items:\n            $ref: '#/components/schemas/Unit'\n          minItems: 1\n          example:\n            - id: 'adult'\n              internalName: 'Adult'\n              reference: 'LR1-01-01'\n              type: 'ADULT'\n            - id: '0001-0001-child'\n              internalName: 'Child'\n              reference: 'LR1-01-02'\n              type: 'CHILD'\n    RedemptionMethod:\n      type: string\n      description: |\n        This indicates the redemption requirements for the customer. A value of `MANIFEST` indicates that the customer MUST provide a form of identification to redeem and as such a printed or digital copy of the ticket is OPTIONAL. A value of `DIGITAL` indicates that the customer MUST provide a copy of the ticket but MAY be digital or printed. A value of `PRINT` indicates that the customer MUST provide a printed copy of the ticket (this is typically only used when the Supplier must retain the printed copy for their records).\n      enum:\n        - MANIFEST\n        - DIGITAL\n        - PRINT\n      example: 'DIGITAL'\n    RefreshFrequency:\n      type: string\n      enum:\n        - HOURLY\n        - DAILY\n      description: |\n        This is the RECOMMENDED refresh interval for the Reseller and SHOULD be used by the Reseller to control the frequency at which they make a `getBooking` request for the following scenarios:\n\n        * To see if a booking has changed out of a `PENDING` status into `CONFIRMED` or `REJECTED`.\n        * To see if a booking has had any new Vouchers or Tickets delivered for the booking.\n        * To see if a booking has changed from `CONFIRMED` to `CANCELLED` in the event of a supplier-initiated cancellation.\n        * To see if a booking has an updated `utcRedeemedAt`/`utcResolvedAt` value for the Voucher or any of the Tickets.\n      example: 'HOURLY'\n    Refund:\n      type: string\n      enum:\n        - FULL\n        - PARTIAL\n        - NONE\n      description: |\n        This value indicates the expected refund from the Supplier.\n        * `FULL` indicates that the Supplier has fully refunded the booking and will not be paid by the Reseller for this booking. This is the expected state when a valid cancellation request is made before any cancellation cutoff policy or when a Supplier approves a cancellation request that was made after the cutoff.\n        * `PARTIAL` indicates that the Supplier has agreed to partially refund the customer. This may be due to a cancellation policy that grants a partial refund or because the Supplier has agreed to partially refund the customer when the cancellation policy would otherwise have not allowed any refund.\n        * `NONE` indicates that no refund will be given by the Supplier. The customer may still be refunded by the Reseller but the Supplier MUST still be paid for this booking.\n      example: 'FULL'\n    Status:\n      type: string\n      enum:\n        - ON_HOLD\n        - EXPIRED\n        - PENDING\n        - REJECTED\n        - CONFIRMED\n        - CANCELLED\n      description: |\n        After a successful `createBooking` request, the `status` MUST be `ON_HOLD`.\n\n        After a successful `confirmBooking` request, the `status` MUST be `CONFIRMED`.\n\n        After a successful `confirmCancellation` request, the `status` MUST be `CANCELLED`.\n\n        Following are the only valid Booking flow status transitions:\n\n        * New Booking -\u003e `REJECTED`\n        * New Booking -\u003e `ON_HOLD` -\u003e `EXPIRED`\n        * New Booking -\u003e `ON_HOLD` -\u003e `CONFIRMED`\n        * New Booking -\u003e `ON_HOLD` -\u003e `PENDING` -\u003e `REJECTED`\n        * New Booking -\u003e `ON_HOLD` -\u003e `PENDING` -\u003e `CONFIRMED`\n\n        The `PENDING` status MAY appear only for products with the `instantConfirmation` property set to `false`. Poll the /bookings endpoint for status changes.\n\n        Following are the only valid Cancellation flow status transitions:\n\n        * `CONFIRMED` -\u003e `CANCELLED`\n        * `ON_HOLD` -\u003e `EXPIRED`\n      example: 'ON_HOLD'\n    Supplier:\n      type: object\n      required:\n        - id\n        - name\n        - endpoint\n        - contact\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be unique within the scope of the Booking Platform.\n          example: '0001'\n        name:\n          type: string\n          description: |\n            Common name for the supplier that may be displayed to the customer.\n          example: 'Acme Tour Co.'\n        endpoint:\n          type: string\n          description: |\n            This is the base URL that will be prepended to ALL other paths. The value SHOULD NOT contain a trailing `/`.\n          format: uri\n          example: 'https://api.my-booking-platform.com/v1'\n        contact:\n          $ref: '#/components/schemas/SupplierContact'\n    SupplierContact:\n      type: object\n      description: |\n        Contact details for the supplier.\n      required:\n        - email\n      properties:\n        website:\n          type: string\n          description: |\n            This SHOULD be the website of the Supplier that is separate from the Booking Platform but MAY be a unique destination within the Booking Platform about the Supplier.\n          format: url\n          example: 'https://acme-tours.co.fake'\n        email:\n          type: string\n          description: |\n            This SHOULD be the email support contact for the Supplier. This information MAY be provided to the customer.\n          format: email\n          example: 'info@acme-tours.co.fake'\n        telephone:\n          type: string\n          description: |\n            This SHOULD be the phone support contact for the Supplier. This information MAY be provided to the customer.\n          example: '+1 888-555-1212'\n        address:\n          type: string\n          description: |\n            This SHOULD be the mail address support contact for the Supplier. This information MAY be provided to the customer.\n          example: '123 Main St, Anytown USA'\n    Ticket:\n      type: object\n      required:\n        - deliveryOptions\n        - redemptionMethod\n      properties:\n        deliveryOptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeliveryOption'\n        redemptionMethod:\n          $ref: '#/components/schemas/RedemptionMethod'\n        utcDeliveredAt:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the voucher was made available to the customer by the Supplier. This will typically be the same as `utcConfirmedAt`.\n          example: '2019-10-31T08:30:00Z'\n        utcRedeemedAt:\n          type: string\n          format: date-time\n          description: |\n            This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date and time. The value represents the time at which the customer redeemed this voucher.\n          example: '2019-10-31T08:30:00Z'\n    Unit:\n      type: object\n      required:\n        - id\n        - internalName\n        - type\n      properties:\n        id:\n          type: string\n          description: |\n            This MUST be a unique identifier within the scope of the Option.\n          example: 'youth_10_17'\n        internalName:\n          type: string\n          description: |\n            This SHOULD be a friendly name for the Unit to facilitate easier identification. It MUST NOT be shown to the customer.\n          example: 'Youth (Summer)'\n        reference:\n          type: string\n          description: |\n            This is an internal reference identifier that the Supplier wishes to use. It MAY be non-unique.\n          example: 'LR1-01-new'\n        type:\n          $ref: '#/components/schemas/UnitType'\n    UnitItem:\n      type: object\n      required:\n        - uuid\n        - unitId\n      properties:\n        uuid:\n          type: string\n          description: |\n            This is a randomly-generated UUID that MUST be tracked by both the Reseller and Booking Platform for locating this record.\n          example: '6be0409f-181e-4520-acc1-cc6791896859'\n        unitId:\n          type: string\n          description: |\n            A valid unit ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n          example: 'adult'\n        resellerReference:\n          type: string\n          description: |\n            An OPTIONAL tracking reference for the Reseller that SHOULD be tracked by the Booking Platform. This MUST be returned if the value was provided in the request body.\n          example: '001-002'\n    UnitItemTicket:\n      allOf:\n        - $ref: '#/components/schemas/UnitItem'\n        - type: object\n          properties:\n            supplierReference:\n              type: string\n              description: |\n                An OPTIONAL tracking reference for the Supplier that SHOULD be tracked by the Reseller.\n              example: 'ABC-123'\n            ticket:\n              $ref: '#/components/schemas/Ticket'\n    UnitQuantity:\n      type: object\n      required:\n        - unitId\n        - quantity\n      properties:\n        unitId:\n          type: string\n          description: |\n            A valid unit ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n            example: 'adult'\n        quantity:\n          type: integer\n          description: |\n            The total number of this unit that the customer wants to purchase.\n          example: 2\n    UnitType:\n      type: string\n      description: |\n        This is the base unit type for this unit definition. A value of `TRAVELLER` MUST only be used in replacement of `ADULT`, `CHILD`, `INFANT`, `YOUTH`, `STUDENT`, or `SENIOR`.\n      enum:\n        - ADULT\n        - CHILD\n        - INFANT\n        - YOUTH\n        - STUDENT\n        - SENIOR\n        - TRAVELLER\n        - RESOURCE\n        - OTHER\n      example: 'YOUTH'\n  responses:\n    BadRequest:\n      description: |\n        Invalid request (e.g. missing required parameters, invalid model, missing `Date` header, etc.).\n    Unauthorized:\n      description: |\n        Missing `Authorization` header or key could not be validated.\n    Forbidden:\n      description: |\n        The `Authorization` header was validated but the requestor does not have the correct permissions to access the requested resource or perform the requested operation.\n    NotFound:\n      description: |\n        Invalid URI path requested.\n    InternalServerError:\n      description: |\n        An unknown error occurred and the server cannot respond in a sensible way. The response may not include a valid error object if one could not be generated.\n    BookingResponse:\n      description: |\n        A complete representation of the current booking booking status.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Booking'\n  parameters:\n    LocalDateStart:\n      name: 'localDateStart'\n      in: query\n      description: |\n        This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date. The start of the date range MUST be treated as inclusive of this date when generating the response.\n      required: true\n      schema:\n        type: string\n        format: date\n    LocalDateEnd:\n      name: 'localDateEnd'\n      in: query\n      description: |\n        This MUST be an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant date. The end of the date range MUST be treated as exclusive of this date when generating the response.\n      required: true\n      schema:\n        type: string\n        format: date\n    OptionId:\n      name: 'optionId'\n      in: query\n      description: |\n        A valid option ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n      required: true\n      schema:\n        type: string\n        format: string\n    ProductId:\n      name: 'productId'\n      in: query\n      description: |\n        A valid product ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n      required: true\n      schema:\n        type: string\n        format: string\n    SupplierId:\n      name: 'supplierId'\n      in: path\n      description: |\n        A valid supplier ID that matches the `id` returned from `GET /suppliers`.\n      required: true\n      schema:\n        type: string\n        format: string\n    Uuid:\n      name: 'uuid'\n      in: path\n      description: |\n        A valid booking UUID that matches the `uuid` sent during the initial `POST /suppliers/{supplierId}/bookings`\n      required: true\n      schema:\n        type: string\n        format: uuid\n  requestBodies:\n    AvailabilityCheckRequest:\n      required: true\n      description: |\n        This MUST include all units that the customer is attempting to reserve and SHOULD include all possible availability IDs that the customer may be interested in reserving.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - productId\n              - optionId\n              - availabilityIds\n              - units\n            properties:\n              productId:\n                type: string\n                description: |\n                  A valid product ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n                example: 'adult'\n              optionId:\n                type: string\n                description: |\n                  A valid option ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n                example: 'LR1-01'\n              availabilityIds:\n                type: array\n                items:\n                  type: string\n                  description: |\n                    A valid list of availability IDs that matches the `id` returned from `GET /availability`.\n                  example: '28271273-a317-40fc-8f42-79725a7072a3'\n                example:\n                  - '28271273-a317-40fc-8f42-79725a7072a3'\n                  - '6143d137-fdf6-4da1-a558-20aa93eb55f0'\n                minItems: 1\n              units:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UnitQuantity'\n                example:\n                  - id: 'adult'\n                    quantity: 2\n                  - id: 'child'\n                    quantity: 1\n                minItems: 1\n    CreateBookingRequest:\n      required: true\n      description: |\n        This MUST include all unitItems that the customer wants to book.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - uuid\n              - productId\n              - optionId\n              - availabilityId\n              - unitItems\n            properties:\n              uuid:\n                type: string\n                format: uuid\n                description: |\n                  This UUID is generated for the initial `createBooking` request and MUST never change. This value MUST be tracked by both the Reseller and Booking Platform for locating this record.\n                example: '7df49d62-57ad-44be-8373-e4c2fe7e63fe'\n              resellerReference:\n                type: string\n                description: |\n                  An OPTIONAL tracking reference for the Reseller that SHOULD be tracked by the Booking Platform. This MUST be returned if the value was provided in the request body.\n                example: '001-002'\n              productId:\n                type: string\n                description: |\n                  A valid product ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n                example: 'adult'\n              optionId:\n                type: string\n                description: |\n                  A valid option ID that matches the `id` returned from `GET /suppliers/{supplierId}/products`.\n                example: 'LR1-01'\n              availabilityId:\n                type: string\n                description: |\n                  A valid availability ID that matches the `id` returned from `GET /suppliers/{supplierId}/availability`.\n                example: '28271273-a317-40fc-8f42-79725a7072a3'\n              unitItems:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UnitItem'\n                minItems: 1\n              holdExpirationMinutes:\n                type: integer\n                description: |\n                  This is the duration that the Reseller would like the product inventory to be temporarily held while the booking is completed. The Booking Platform SHOULD reserve the inventory for at least this duration but MAY reserve for a shorter period of time. The exact hold expiration time will be returned in the response.\n                example: 30\n    ExtendBookingRequest:\n      required: true\n      description: |\n        This MUST include the proper `reason` for requesting the extension and MUST NOT be abused to keep availability reserved due to processing delays by the Reseller.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - reason\n              - holdExpirationMinutes\n            properties:\n              reason:\n                $ref: '#/components/schemas/ExtendReason'\n              reasonDetails:\n                type: string\n                description: |\n                  This provides additional details behind the reason for requesting the extension and SHOULD be provided in all cases, but especially if the `reason` given is `OTHER`.\n                example: 'Manual fraud review with 2-hour SLA.'\n              holdExpirationMinutes:\n                type: integer\n                description: |\n                  This is the duration that the Reseller would like the product inventory hold to be extended while the booking is completed. The Booking Platform SHOULD extend the hold on the inventory for at least this duration from the time of the request but MAY reserve for a shorter period of time. The exact hold expiration time will be returned in the response.\n                example: 120\n    \n    ConfirmBookingRequest:\n      required: true\n      description: |\n        This confirms an in-progress booking and MUST be sent before the `utcHoldExpiration` has elapsed.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - contact\n            properties:\n              resellerReference:\n                type: string\n                description: |\n                  An OPTIONAL tracking reference for the Reseller that SHOULD be tracked by the Booking Platform. This MUST be returned if the value was provided in the request body.\n                example: '001-002'\n              contact:\n                $ref: '#/components/schemas/Contact'\n    CancelBookingRequest:\n      required: true\n      description: |\n        This request will release the inventory hold on an in-progress booking or cancel a completed booking. It is RECOMMENDED that this request be sent if the customer fails to complete their booking, in order to release the inventory for other customers. It is also RECOMMENDED that this request be sent for a completed booking even if no refund is expected so that the Supplier can attempt to sell the unused inventory to another customer.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - reason\n              - reasonDetails\n            properties:\n              reason:\n                $ref: '#/components/schemas/CancelReason'\n              reasonDetails:\n                type: string\n                description: |\n                  This field provides additional details about the reason for the cancellation request. It may include information from the customer, supplier, or support agent about the reason for the cancellation (especially in the case of requesting a cancellation outside of the normal policy which may require manual approval from the supplier).\n                example: 'Child came down with the flu the day before the activity.'\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: Bearer {apiKey}\n\nsecurity:\n  - bearerAuth: []\n\ntags:\n  - name: Suppliers\n  - name: Products\n  - name: Availability\n  - name: Bookings\n\nexternalDocs:\n  description: OCTo Home\n  url: http://octospec.com/\n",
			"canonicalURL": "/github.com/octotravel/spec@87843b641d47b29c28f9fd9e4452e342ab21d5c4/-/blob/docs/openapi_v1.0.0-alpha.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/octotravel/spec/blob/87843b641d47b29c28f9fd9e4452e342ab21d5c4/docs/openapi_v1.0.0-alpha.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}