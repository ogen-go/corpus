{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GVogeler/prosopogrAPhI"
		},
		"file": {
			"name": "prosopogrAPhI.yaml",
			"size": 0,
			"path": "prosopogrAPhI.yaml",
			"byteSize": 49206,
			"content": "openapi: 3.0.2\ninfo:\n  version: 0.3.3\n  title: prosopogrAPhI\n  description: basic prosopographical data API\n  license:\n    name: CC-BY-SA 4.0\n    url: 'https://creativecommons.org/licenses/by-sa/4.0/'\n  contact:\n    name: Georg Vogeler\n    email: georg.vogeler@uni-graz.at\npaths:\n  /factoids:\n    get:\n      summary: Returns array of factoids\n      description: Returns an array of `Factoid` objects. The number of array members returned with each response is restricted by the **size** parameter. Factoids can be filtered by setting additional parameters like **personId** or **p**. Factoids are sorted by default by date of creation time. Statement-specific parameters (e.g. **place**, **memberOf**) accept a asterisk (*) to require that parameter to have any non-null value.\n      operationId: getFactoids\n      parameters:\n        - $ref: '#/components/parameters/size'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/personId'\n        - $ref: '#/components/parameters/p'\n        - $ref: '#/components/parameters/statementId'\n        - $ref: '#/components/parameters/st'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/s'\n        - $ref: '#/components/parameters/f'\n        - $ref: '#/components/parameters/statementText'\n        - $ref: '#/components/parameters/relatesToPerson'\n        - $ref: '#/components/parameters/memberOf'\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/from'\n        - $ref: '#/components/parameters/to'\n        - $ref: '#/components/parameters/place'\n        - $ref: '#/components/parameters/sortBy'\n      responses:\n        '200':\n          description: A list of Factoids with some metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FactoidsResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    post:\n      summary: 'creates a factoid. No Factoid can be created without references to a person, a source, and at least one statement'\n      operationId: createFactoid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Factoid'\n        description: the factoid data\n      responses:\n        '201':\n          description: factoid created\n        '400':\n          description: factoid could not be created or updated\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create persons.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  '/factoids/{id}':\n    get:\n      summary: 'Returns factoid with id {id}'\n      operationId: getFactoidById\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '200':\n          description: a factoid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Factoid'\n        '404':\n          description: the factoid does not exist\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    put:\n      summary: 'updates the factoid with the {id}'\n      operationId: updateFactoid\n      parameters:\n        - $ref: '#/components/parameters/id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Factoid'\n      responses:\n        '201':\n          description: factoid updated\n        '400':\n          description: factoid could not be updated or created. TODO should return reason as message\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create persons.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n\n    delete:\n      summary: 'delete the factoid with id {id}'\n      operationId: deleteFactoid\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '204':\n          description: Factoid has been deleted successfully\n        '403':\n          description: Missing token or user is not allowed to delete this factoid\n        '404':\n          description: Factoid not found\n        '409':\n          description: 'Conflict: Factoid cannot be deleted eg. because of referential integrity. Reason should be given as error response detail'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  /persons:\n    get:\n      summary: Get persons\n      description: Returns an array of `Person` objects. The number of array members returned with each response is restricted by the **size** parameter. Persons can be filtered by setting additional parameters like **factoidId** or **f**. Statement-specific parameters (e.g. **place**, **memberOf**) accept a asterisk (*) to require that parameter to have any non-null value. TODO Further parameters for filtering have to be specified.\n      operationId: getPersons\n      parameters:\n        - $ref: '#/components/parameters/size'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/p'\n        - $ref: '#/components/parameters/factoidId'\n        - $ref: '#/components/parameters/f'\n        - $ref: '#/components/parameters/statementId'\n        - $ref: '#/components/parameters/st'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/s'\n        - $ref: '#/components/parameters/statementText'\n        - $ref: '#/components/parameters/relatesToPerson'\n        - $ref: '#/components/parameters/memberOf'\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/from'\n        - $ref: '#/components/parameters/to'\n        - $ref: '#/components/parameters/place'\n      responses:\n        '200':\n          description: Successfull response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonsResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    post:\n      summary: Add a new person\n      operationId: createPerson\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Person'\n      responses:\n        '201':\n          description: Person created\n          headers:\n            Location:\n              description: the uri of the created person\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create persons.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  '/persons/{id}':\n    get:\n      summary: 'Returns person with id {id}'\n      operationId: getPersonById\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '200':\n          description: a person object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n        '404':\n          description: the person does not exist\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    put:\n      summary: 'Updates the person with the {id}'\n      operationId: updatePerson\n      parameters:\n        - $ref: '#/components/parameters/id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Person'\n        description: the person data\n      responses:\n        '201':\n          description: person updated\n        '400':\n          description: person could not be updated or created. TODO should return reason as message\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create persons.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n    delete:\n      summary: 'delete the person with id {id}'\n      operationId: deletePerson\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '204':\n          description: Person has been deleted successfully\n        '403':\n          description: Missing token or user is not allowed to delete this person\n        '404':\n          description: Person not found\n        '409':\n          description: 'Conflict: Person cannot be deleted eg. because of referential integrity. Reason should be given as error response detail'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  /sources:\n    get:\n      summary: Returns array of source objects.\n      description: Returns array of `source` objects. The number of array members returned with each response is restricted by the **size** parameter. Sources can be filtered by setting additional parameters like **factoidId** or **f**. Statement-specific parameters (e.g. **place**, **memberOf**) accept a asterisk (*) to require that parameter to have any non-null value. TODO Further parameters for filtering have to be specified.\n      operationId: getSources\n      parameters:\n        - $ref: '#/components/parameters/size'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/personId'\n        - $ref: '#/components/parameters/p'\n        - $ref: '#/components/parameters/factoidId'\n        - $ref: '#/components/parameters/f'\n        - $ref: '#/components/parameters/st'\n        - $ref: '#/components/parameters/statementText'\n        - $ref: '#/components/parameters/relatesToPerson'\n        - $ref: '#/components/parameters/memberOf'\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/from'\n        - $ref: '#/components/parameters/to'\n        - $ref: '#/components/parameters/place'\n      responses:\n        '200':\n          description: Successfull response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourcesResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    post:\n      summary: Add a new source\n      operationId: createSource\n      requestBody:\n        $ref: '#/components/requestBodies/Source'\n      responses:\n        '201':\n          description: Source created\n          headers:\n            Location:\n              description: the uri of the created source\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Source'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create persons.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  '/sources/{id}':\n    get:\n      summary: 'Returns source with id {id}'\n      operationId: getSourceById\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '200':\n          description: a source object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Source'\n        '404':\n          description: the source does not exist\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n    put:\n      summary: 'updates the source with the {id}'\n      operationId: updateSource\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/Source'\n      responses:\n        '201':\n          description: source updated\n        '400':\n          description: source could not be updated or created. TODO should return reason as message\n        '403':\n          description: Forbidden. Missing token or user is not allowed to create sources.\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n    delete:\n      summary: 'delete the source with id {id}'\n      operationId: deleteSource\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '204':\n          description: Source has been deleted successfully\n        '403':\n          description: Missing token or user is not allowed to delete this source\n        '404':\n          description: Source not found\n        '409':\n          description: 'Conflict: Source cannot be deleted eg. because of referential integrity. Reason should be given as error response detail'\n        '501':\n          $ref: '#/components/responses/NotImplementedError'\n  /statements:\n    get:\n      summary: Returns array of statement objects\n      description: Returns array of `Statement` objects. The number of array members returned with each response is restricted by the **size** parameter. Statements can be filtered by setting additional parameters like **factoidId** or **f**. Statement-specific parameters (e.g. **place**, **memberOf**) accept a asterisk (*) to require that parameter to have any non-null value. TODO Further parameters for filtering have to be specified.\n      operationId: getStatements\n      parameters:\n        - $ref: '#/components/parameters/size'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortBy'\n        - $ref: '#/components/parameters/personId'\n        - $ref: '#/components/parameters/factoidId'\n        - $ref: '#/components/parameters/f'\n        - $ref: '#/components/parameters/sourceId'\n        - $ref: '#/components/parameters/st'\n        - $ref: '#/components/parameters/p'\n        - $ref: '#/components/parameters/statementText'\n        - $ref: '#/components/parameters/relatesToPerson'\n        - $ref: '#/components/parameters/memberOf'\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/from'\n        - $ref: '#/components/parameters/to'\n        - $ref: '#/components/parameters/place'\n      responses:\n        '200':\n          description: Successfull response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementsResponse'\n        '400':\n          $ref: '#/components/responses/BadRequestError'\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n  '/statements/{id}':\n    get:\n      summary: 'Return statement with id {id}'\n      operationId: getStatementById\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '200':\n          description: a statement object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statement'\n        '404':\n          description: the statement does not exist\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\n\n  /describe:\n    get:\n      description: Gives basic information about the service and the implementation of API\n      operationId: getDescription\n      responses:\n        '200':\n          description: basic information about the service and the implementation of the API\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '500':\n          $ref: '#/components/responses/Standard500ErrorResponse'\nservers:\n  - url: 'https://localhost/api'\n  - url: 'http://localhost/api'\ncomponents:\n  parameters:\n    size:\n      name: size\n      in: query\n      description: sets the  number of objects returned per page.\n      schema:\n        type: integer\n        default: 30\n    page:\n      name: page\n      in: query\n      description: 'Sets the page number of returned objects. If size is set to 10 and page is set to 2, the objects 11-20 will be returned.'\n      schema:\n        type: integer\n        default: 1\n    id:\n      name: id\n      in: path\n      required: true\n      description: 'can be either the local id, or an uri representing the same resource as stored in `uris`'\n      schema:\n        type: string\n    sortBy:\n      # TODO: this must be more precise: allowed values per endpoint\n      # TODO: how to address properties not on level 0?\n      name: sortBy\n      in: query\n      description: 'defines the sort order of the requested resource, can contain all properties of the resource searched. The closing keywords ''ASC'' and ''DESC'' describe the sort order as ''ASCending'' and ''DESCending''. In case the property is a list of values, use the first item.'\n      schema:\n        type: string\n        default: createdWhen\n    personId:\n      name: personId\n      in: query\n      description: filter by person id\n      schema:\n        type: string\n    p:\n      name: p\n      in: query\n      description: filters the current resource by a search in direct properties of person object (id, uri)\n      schema:\n        type: string\n    statementId:\n      name: statementId\n      in: query\n      description: filter by statement id\n      schema:\n        type: string\n    st:\n      name: st\n      in: query\n      description: filters by applying a pattern on statements (fulltext search). This filter will be combined by an AND operator with all other filters applicable to statements (statementText, role, from, to, place, name, relatesToPerson, memberOf).\n      schema:\n        type: string\n    sourceId:\n      name: sourceId\n      in: query\n      description: filter by source id\n      schema:\n        type: string\n    s:\n      name: s\n      in: query\n      description: filter by applying a pattern on sources (fulltext search)\n      schema:\n        type: string\n    f:\n      name: f\n      in: query\n      description: filter by applying a pattern on factoid metadata (fulltext search)\n      schema:\n        type: string\n    factoidId:\n      name: factoidId\n      in: query\n      description: filter by factoid id\n      schema:\n        type: string\n    statementText:\n      name: statementText\n      in: query\n      description: filters by any keyword occurring in the statement content. This filter will be combined by an AND operator with all other filters applicable to statements (st, role, from, to, place, name, relatesToPerson, memberOf).\n      schema:\n        type: string\n    role:\n      name: role\n      in: query\n      description: filters by a keyword occuring in the role property of a statement. The filter applies to the human readable label and the URI provided. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, from, to, place, name, relatesToPerson, memberOf).\n      schema:\n        type: string\n    from:\n      name: from\n      in: query\n      description: 'all dates after the event date (including the event date itself) will be included. If `from` and `to` are the same, only a single exact date is included. Fragments (yyyy, yyyy-mm) will be interpreted as exact time ranges if the second parameter is missing (`from=yyyy-mm` is interpreted as `from=start of month`, `to=end of month`. If conflicting data is present, for example ``from=yyyy\u0026to=yyyy-mm-dd`, the most correct interpretation will be decided on by the backend. For instance, the example before will be interpreted as `from=yyyy-01-01\u0026to=yyyy-mm-dd`. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, to, place, name, relatesToPerson, memberOf).'\n      schema:\n        type: string\n    to:\n      name: to\n      in: query\n      description: 'all dates before the event date (including the event date itself) will be included. If `from` and `to` are the same, only a single exact date is included. Fragments (yyyy, yyyy-mm) will be interpreted as exact time ranges if the second parameter is missing (`from=yyyy-mm` is interpreted as `from=start of month`, `to=end of month`. If conflicting data is present, for example ``from=yyyy\u0026to=yyyy-mm-dd`, the most correct interpretation will be decided on by the backend. For instance, the example before will be interpreted as `from=yyyy-01-01\u0026to=yyyy-mm-dd`. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, from, place, name, relatesToPerson, memberOf).'\n      schema:\n        type: string\n    place:\n      name: place\n      in: query\n      description: filters by a keyword occuring in the place  property of a statement. The filter applies to the human readable label and the URI provided. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, from, to, name, relatesToPerson, memberOf).\n      schema:\n        type: string\n    relatesToPerson:\n      name: relatesToPerson\n      in: query\n      description: filters by a keyword occuring in the relations to other persons property of a statement. The filter applies to the human readable label and the URI provided. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, from, to, place, name, memberOf).\n      schema:\n        type: string\n    memberOf:\n      name: memberOf\n      in: query\n      description: filters by a keyword occuring in the membership in organisation property of a statement. The filter applies to the human readable label and the URI provided. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, from, to, place, name, relatesToPerson).\n      schema:\n        type: string\n    name:\n      name: name\n      in: query\n      description: filters by a keyword occuring in the names of a person. This filter will be combined by an AND operator with all other filters applicable to statements (st, statementText, role, from, to, place, relatesToPerson, memberOf).\n      schema:\n        type: string\n    createdBefore:\n      name: createdBefore\n      description: sets terminus antequem for filtering by createdWhen\n      in: query\n      schema:\n        type: string\n    createdAfter:\n      name: createdAfter\n      description: sets terminus postquem for filtering by createdWhen\n      in: query\n      schema:\n        type: string\n    createdBy:\n      name: createdBy\n      in: query\n      description: Filters by full text search in the description of the user responsbile for the creation of the object. A group of persons is represented by a comma seperated list.\n      schema:\n        type: string\n    modifiedBefore:\n      name: createdBefore\n      in: query\n      description: sets terminus antequo for filtering the date of modification of the current resource.\n      schema:\n        type: string\n    modifiedAfter:\n      name: createdAfter\n      description: sets terminus postquem for filtering the date of modification of the current resource.\n      in: query\n      schema:\n        type: string\n    modifiedBy:\n      name: createdBy\n      in: query\n      description: Filters by full text  search in the description of the user responsbile for a modification of the object. A group of persons is represented by a comma seperated list.\n      schema:\n        type: string\n    depth:\n      name: depth\n      in: query\n      description: 'declares the depth of description to be returned by a list of factoids. With the keyword `reduced` the response should return only `@id` for the source, the person, and the statement aggregated by the factoid. If no value is given, the factoids return the full information.'\n      schema:\n        type: string\n        enum:\n          - full\n          - reduced\n  responses:\n    BadRequestError:\n      description: Bad request. Caused by unknown parameters or illegal parameter values\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Standard500ErrorResponse:\n      description: An unexpected error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotImplementedError:\n      description: Functionality not implemented. Some implementations will only support read operations. For any data modifying request they must return a 501 response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  requestBodies:\n    Source:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Source'\n      description: the source data\n    Statement:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Statement'\n  schemas:\n    FactoidRef:\n      description: 'References the local ID of a factoid in the current service and all IDs of person, sources, statements aggregated in the factoid. Please use the `factoids/{id}-endpoint` to request further information on the factoid. The factoid reference does not apply any filter used for requesting the current ressource.'\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n        person-ref:\n          $ref: '#/components/schemas/PersonRef'\n        source-ref:\n          $ref: '#/components/schemas/SourceRef'\n        statement-refs:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatementRef'\n    Factoid:\n      description: A Factoid is a composite of one or more statements about a single person extracted by somebody from a single source at a specific time.\n      type: object\n      required:\n        - '@id'\n        - person-ref\n        - source-ref\n        - statement-refs\n        - createdBy\n        - createdWhen\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n        createdBy:\n          $ref: '#/components/schemas/createdBy'\n        createdWhen:\n          $ref: '#/components/schemas/createdWhen'\n        modifiedBy:\n          $ref: '#/components/schemas/modifiedBy'\n        modifiedWhen:\n          $ref: '#/components/schemas/modifiedWhen'\n        derivedFrom:\n          description: references the URI of a factoid on which this factoid is based.\n          type: string\n          format: uri\n        person-ref:\n          $ref: '#/components/schemas/PersonRef'\n        source-ref:\n          $ref: '#/components/schemas/SourceRef'\n        statement-refs:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatementRef'\n      example:\n        '@id': TW_Pez1_809_1\n        createdBy: Thomas Wallnig\n        createdWhen: 2010-05-05T00:00:00.000Z\n        modifiedBy: Thomas Wallnig\n        modifiedWhen: 2010-05-05T00:00:00.000Z\n        person-ref:\n          '@id': Andreas_Reuter\n        statement-refs:\n          - '@id': Pez1_809_1\n        source-ref: \n          '@id': PezNachlassVol1\n    FactoidsResponse:\n      type: object\n      description: Schema of the response of /factoids\n      properties:\n        protocol:\n          $ref: '#/components/schemas/Protocol'\n        factoids:\n          type: array\n          items:\n            $ref: '#/components/schemas/Factoid'\n      example:\n        protocol:\n          size: 30\n          totalHits: 1234\n          page: 2\n        factoids:\n          - '@id': TW_Pez1_809_1\n            createdBy: Thomas Wallnig\n            createdWhen: 2010-05-05T00:00:00.000Z\n            modifiedBy: Thomas Wallnig\n            modifiedWhen: 2010-05-05T00:00:00.000Z\n            person-ref:\n              '@id': Andreas_Reuter\n            statement-refs:\n              - '@id': Pez1_809_1\n            source-ref: \n              '@id': PezNachlassVol1\n          - '@id': TW_Pez1_123456\n            createdBy: Thomas Wallnig\n            createdWhen: 2007-04-16T00:00:00.000Z\n            modifiedBy: Thomas Wallnig\n            modifiedWhen: 2007-04-16T00:00:00.000Z\n            person-ref:\n              '@id': Placidus_Seiz\n            statement-refs:\n              - '@id': person1241\n            source-ref:\n              '@id': 'Lindner-Album_Ettalense253f.'\n          - '@id': Fd2qwr\n            createdBy: Thomas Wallnig\n            createdWhen: 2007-04-16T00:00:00.000Z\n            modifiedBy: Thomas Wallnig\n            modifiedWhen: 2007-07-01T00:00:00.000Z\n            person-ref:\n              '@id': Andreas_Reuter\n            statement-refs:\n              - '@id': Fd2qwr\n            source-ref:\n              '@id': PezNachlassVol1\n    PersonRef:\n      description: 'References the local ID of a person in the current service. Please use the persons/{id}-endpoint to request further information on the person'\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n    Person:\n      type: object\n      description: 'A Person is an abstract entity representing a human individual (fictional or historical) independet from their cultural desciption by name, status, social relationsships etc. It has therefore only formal identifiers as properties.'\n      required:\n        - '@id'\n        - factoid-refs\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n        label:\n          type: string\n          description: 'A human readable identification of the person for easy processing in selection scenarios. This identification is considered to be unstable, does not have to be stored in the backend (i.e. it might be created algorithmically on the fly from a currente state of data stored), can be ommitted (then the @id can be used as default) and is not processed in POST or PUT requests. In practice, this label would typically be constructed from statements on names, basic biographical dates (birth, death) and maybe a claim of fame / occupation, but the decision how to construct this label would be completely under responsibility of the service provider.'\n        uris:\n          $ref: '#/components/schemas/uris'\n        createdBy:\n          $ref: '#/components/schemas/createdBy'\n        createdWhen:\n          $ref: '#/components/schemas/createdWhen'\n        modifiedBy:\n          $ref: '#/components/schemas/modifiedBy'\n        modifiedWhen:\n          $ref: '#/components/schemas/modifiedWhen'\n        factoid-refs:\n          type: array\n          items:\n            $ref: '#/components/schemas/FactoidRef'\n      example:\n        - '@id': Placidus_Seiz\n          uris:\n            - 'http://d-nb.info/gnd/10102407X'\n            - 'https://viaf.org/viaf/5285530/'\n          factoid-refs:\n            - '@id': TW_Pez1_123456\n              source-ref:\n                '@id': 'Pez#474'\n              statement-refs:\n                - '@id': 'Pez#474-7'\n            - '@id': TW_Pez1_123457\n              source-ref:\n                '@id': 'Lindner-Album_Ettalense253f.'\n              statement-refs:\n                - '@id': person1241\n    PersonsResponse:\n      type: object\n      description: Schema of the response of /persons\n      properties:\n        protocol:\n          $ref: '#/components/schemas/Protocol'\n        persons:\n          type: array\n          items:\n            $ref: '#/components/schemas/Person'\n      example:\n        protocol:\n          size: 30\n          totalHits: 12345\n          page: 2\n        persons:\n          - '@id': Andreas_Reuter\n            label: Andreas Reuter, Autor, um 1650\n            uris:\n              - 'http://pez-digital.at/persons#Mauro_Aspini'\n            factoid-refs:\n              - '@id': Fd2qwr\n                source-ref:\n                  '@id': PezNachlassVol1\n                statement-refs:\n                  - '@id': Fd2qwr\n              - '@id': TW_Pez1_809_1\n                source-ref:\n                  '@id': PezNachlassVol1\n                statement-refs:\n                  - '@id': Pez1_809_1\n          - '@id': Placidus_Seiz\n            label: Seitz, Placidus, Theologe, Abt, Schriftsteller, Benediktiner, 1672-1736.\n            uris:\n              - 'http://d-nb.info/gnd/10102407X'\n              - 'https://viaf.org/viaf/5285530/'\n            factoid-refs:\n              - '@id': TW_Pez1_123456\n                source-ref:\n                  '@id': 'Pez#474'\n                statement-refs:\n                  - '@id': 'Pez#474-7'\n              - '@id': TW_Pez1_123457\n                source-ref:\n                  '@id': 'Lindner-Album_Ettalense253f.'\n                statement-refs:\n                  - '@id': person1241\n    StatementRef:\n      description: 'References the local ID of a statement he current service. Please use the statements/{id}-endpoint to request further information on the statement and its content'\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n    Statement:\n      type: object\n      description: The statement object gives human and machine readable information on the person(s) listed in the factoid.\n      required:\n        - '@id'\n        - factoid-refs\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n        uris:\n          $ref: '#/components/schemas/uris'\n        factoid-refs:\n          type: array\n          items:\n            $ref: '#/components/schemas/FactoidRef'\n        statementType:\n          type: object\n          description: 'in context of structured information (with places, relationships, etc.) this property gives the type of event, relationship etc. connecting the other properties'\n          properties:\n            uri:\n              type: string\n              format: uri\n              description: 'A fully dereferencably URI, which could be an endpoint to RESTful API for the applied taxonomy'\n            label:\n              type: string\n              description: descriptive text. We can imagine this to be a term from a controlled vocabulary or a short type name.\n        name:\n          type: string\n          description: any verbal identification of a person\n        role:\n          type: object\n          description: describes the role of the person in the statement. If empty it is considered generically as 'participates in something which could be an event'\n          properties:\n            uri:\n              type: string\n              format: uri\n              description: 'A fully dereferencably URI, which could be an endpoint to RESTful API for the applied taxonomy'\n            label:\n              type: string\n              description: descriptive text of the role of the person in the statement.\n        date:\n          type: object\n          description: 'The temporal allocation of the statement: To which time frame the statement on the person applies?'\n          properties:\n            sortdate:\n              type: string\n              format: date\n              description: 'Formal version of the date following W3C recommendations. This date is not expected to represent the full range of possible dating. Use the label property to describe the date in more detail dates by century, by year, time ranges, date not before/not after, and similar.'\n            label:\n              type: string\n              description: 'verbal version of the date, which should enable the human reader to get an idea of the chronological concept.'\n        places:\n          description: 'describes the geographical information of the statement, e.g. the place where an event happened, the geographic coverage of a social role etc. The API does not commit to the existence of a georeference with coordinates of the location, but suggests to use supplementarily the geo-JSON `geometry` property.'\n          type: array\n          items:\n            type: object\n            properties:\n              uri:\n                type: string\n                format: uri\n                description: 'reference to geo-referenceable object (e.g. single place), preferably an endpoint of an RESTful API serving coordinates of a single place or a polygon together with information on projection used.'\n              label:\n                type: string\n                description: 'verbal reference to geo-referenceable object, e.g. name of a city, name of an area.'\n        relatesToPersons:\n          description: relationships of the person on which the statement is made to other persons.\n          type: array\n          items:\n            type: object\n            properties:\n              uri:\n                type: string\n                format: uri\n                description: 'reference to a machine readably object on a person, preferably an endpoint following the definitions of this API.'\n              label:\n                type: string\n                description: 'a human readable description of the person to which the statement relates the persons referenced in the factoid, e.g. the name of the person'\n        memberOf:\n          type: object\n          description: relationship of the person on which the statement is made to institutions or groups of persons identifiable.\n          properties:\n            uri:\n              type: string\n              format: uri\n            label:\n              type: string\n              description: a human readable description of the group/institution to which the statement relates the persons referenced in the factoid\n        statementText:\n          type: string\n          description: 'describes the statement in more detail, usually quotes from source or descriptive prose including the wording from the source or a short biogram.'\n        createdBy:\n          $ref: '#/components/schemas/createdBy'\n        createdWhen:\n          $ref: '#/components/schemas/createdWhen'\n        modifiedBy:\n          $ref: '#/components/schemas/modifiedBy'\n        modifiedWhen:\n          $ref: '#/components/schemas/modifiedWhen'\n    StatementsResponse:\n      type: object\n      description: Schema of the response of /statements\n      properties:\n        protocol:\n          $ref: '#/components/schemas/Protocol'\n        statements:\n          type: array\n          items:\n            $ref: '#/components/schemas/Statement'\n      example:\n        protocol:\n          size: 30\n          totalHits: 1234\n          page: 2\n        statements:\n          - '@id': Pez1_809_1\n            factoid-refs:\n              - '@id': 'TW_Pez1_809_1'\n                person-ref:\n                  '@id': 'Andreas_Reuter'\n                source-ref:\n                  '@id': 'PezNachlassVol1'\n            statementText: 'Andreas Reuter (ca. 1648 Kremsm�nster – 1715 Gleink) war Konventuale von Gleink. Er war Doktor der Theologie, apostolischer Protonotar und wirkte in Gleink als Ökonom sowie insgesamt 22 Jahre lang als Prior. Als solcher begegnet er 1708 als Unterzeichner der Rotel auf Abt Rupert von Kimpflern und 1710 in seinem Brief an Bernhard Pez.'\n          - '@id': 'Pez#474-7,'\n            factoid-refs:\n              - '@id': ''\n                person-ref:\n                  '@id': 'Placidus_Seiz'\n                source-ref:\n                  '@id' : 'Pez#474'\n            statementText: '... , quam accepturum me spero a reverendissimo domino abbate Ettalensi ...'\n          - '@id': person1241\n            factoid-refs:\n              - '@id': TW_Pez1_123456\n                person-ref:\n                  '@id': Placidus_Seiz\n                source-ref: \n                  '@id': 'Lindner-Album_Ettalense253f.'\n            name: 'Placidus Seitz'\n          - '@id': 'Fd2qwr'\n            factoid-refs:\n              - '@id': Fd2qwr\n                person-ref:\n                  '@id': Andreas_Reuter\n                source-ref: \n                  '@id': PezNachlassVol1\n            date:\n              sortdate: 1648-06-15T00:00:00.000Z\n              label: ca. 1648\n            statementType:\n              - label: \"Geburt\"\n              - uri: \"http://www.cidoc-crm.org/cidoc-crm/#E67_Birth\"\n            places:\n              - label: Kremsm�nster\n    Protocol:\n      type: object\n      description: Provides metadata about the current request\n      properties:\n        size:\n          type: integer\n          description: Number of objects returned per page\n        page:\n          type: integer\n          description: 'Number of result page (first page, second page etc.)'\n        totalHits:\n          type: integer\n          description: Total number of objects found by this request\n    SourceRef:\n      description: 'References the local ID of a source in the current service. Please use the sources/{id}-endpoint to request further information on the source'\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n    Source:\n      type: object  \n      required:\n        - '@id'\n        - factoid-refs\n      properties:\n        '@id':\n          $ref: '#/components/schemas/id'\n        label:\n          description: 'A human readable description of the source of information for the factoid, e.g. a bibliographic reference, an archival shelfmark etc.'\n          type: string\n        uris:\n          $ref: '#/components/schemas/uris'\n        createdBy:\n          $ref: '#/components/schemas/createdBy'\n        createdWhen:\n          $ref: '#/components/schemas/createdWhen'\n        modifiedBy:\n          $ref: '#/components/schemas/modifiedBy'\n        modifiedWhen:\n          $ref: '#/components/schemas/modifiedWhen'\n        factoid-refs:\n          type: array\n          items:\n            $ref: '#/components/schemas/FactoidRef'\n      example:\n        '@id': PezNachlassVol1\n        uris:\n          - 'https://e-book.fwf.ac.at/o:370'\n        metadata: 'Die gelehrte Korrespondenz der Br�der Pez, Text, Regesten, Kommentare; Band 1: 1709–1715, bearb. v. Thomas Wallnig u. Thomas Stockinger, Wien u. Köln: Böhlau, 2010'\n        factoid-refs:\n          - '@id': TW_Pez1_809_1\n            person-ref:\n              '@id': Andreas_Reuter\n            statement-refs:\n              - '@id': Pez1_809_1\n          - '@id': Fd2qwr\n            person-ref:\n              '@id': Andreas_Reuter\n            statement-refs:\n              - '@id': Fd2qwr\n    SourcesResponse:\n      type: object\n      description: Schema of the response of /sources\n      properties:\n        protocol:\n          $ref: '#/components/schemas/Protocol'\n        sources:\n          type: array\n          items:\n            $ref: '#/components/schemas/Source'\n      example:\n        protocol:\n          size: 30\n          totalHits: 1234\n          page: 2\n        sources:\n        - '@id': PezNachlassVol1\n          uris:\n            - 'https://e-book.fwf.ac.at/o:370'\n          metadata: 'Die gelehrte Korrespondenz der Br�der Pez, Text, Regesten, Kommentare; Band 1: 1709–1715, bearb. v. Thomas Wallnig u. Thomas Stockinger, Wien u. Köln: Böhlau, 2010'\n          factoid-refs:\n            - '@id': TW_Pez1_809_1\n              person-ref:\n                '@id': Andreas_Reuter\n              statement-refs:\n                - '@id': Pez1_809_1\n            - '@id': Fd2qwr\n              person-ref:\n                '@id': Andreas_Reuter\n              statement-refs:\n                - '@id': Fd2qwr\n        - '@id': 'Pez#474'\n          metadata: 'Melk, Stiftsarchiv, Kt. 07 Patres 07, II, 673r-675v'\n          factoid-refs:\n            - '@id': TW_Pez1_123457\n              person-ref:\n                '@id': Placidus_Seiz\n              statement-refs:\n                - '@id': 'Pez#474-7'\n        - '@id': Lindner-Album_Ettalense253f.\n          metadata: 'Lindner: Album Ettalense, S. 253f.'\n          factoid-refs:\n            - '@id': TW_Pez1_123456\n              person-ref:\n                '@id': Placidus_Seiz\n              statement-refs:\n                - '@id': person1241\n    ServiceDescription:\n      type: object\n      description: describes the service providing the API\n      required:\n        - complianceLevel\n      properties:\n        description:\n          description: A verbal description of the collection of factoids provided by the service\n          type: string\n        provider:\n          description: information on the service provider\n          type: string\n        contact:\n          description: 'address of a contact point (e-mail, phone etc.)'\n          type: string\n        vocabs:\n          description: \"lists all vocabularies used for URIs in the `role` and `statemenType` properties of the statements. API consumers should be able to create valid assumption on URIs used in properties of the statements.\"\n          type: array\n          items:\n            type: string\n        complianceLevel:\n          type: number\n          description: |\n            defines the compliance level supported by the server. This is a numeric value between 0 and 2 which indicates the functionality provided by the service.\n\n            *Compliance level 0* is the most minimalistic implementation. It only supports  ``GET`` requests and a restricted set of filter parameters:                ``f=``, ``p=``, ``s=``, ``st=`` are not allowed and result in a ``400 Bad Request`` response as POST and PUT requests do.\n\n            *Compliance level 1* only supports ``GET`` requests (as compliance level ``0``  does), but supports all filter parameters. So compliance level ``0``  and ``1`` differ in that level ``1`` supports the filter parameters ``f=``, ``p=``, ``s=`` and ``st=``. POST und PUT requests result in a ``400 Bad Request``  response.\n\n            *Compliance level 2* supports the full API and therefore also allows creation and modification of resources via PUT and POST requests.\n\n            We recommend to publish the compliance level additionally als link header  with each response to a GET request in this form:\n\n            ``Link: \u003chttps://raw.githubusercontent.com/GVogeler/prosopogrAPhI/master/level1.json\u003e;rel=\"profile\"``\n        formats:\n          type: array\n          description: 'List of the supported response formats (content types). E.g.  ``application/json`` (default), ``application/xml``, ``application/rdf+xml``, ``application/x-turtle``, ...'\n          items:\n            type: string\n      example:\n        description: Prosopographical data from the 1890 census\n        provider: 'Centre for Information Modelling, University of Graz'\n        contact: contact@example.com\n        complianceLevel: 1\n        formats:\n          - application/json\n    id:\n      description: 'the local id of the object (factoid, person, source, statement)'\n      type: string\n    uri:\n      description: 'the uri of an object (role, place, organisation, type, factoid, person, source, statement, etc.).'\n      type: string\n      format: uri\n    uris:\n      description: 'a list of external uris of the current object (factoid, person, source, statement, etc.) which could be used as objects to owl:sameAs.'\n      type: array\n      items:\n        $ref: '#/components/schemas/uri'\n    createdBy:\n      type: string\n      description: The user responsbile for a creation of the object. A group of persons is represented by a comma seperated list.\n    createdWhen:\n      description: ''\n      type: string\n      format: date\n    modifiedBy:\n      type: string\n      description: The user responsbile for a modification of the object. A group of persons is represented by a comma seperated list.\n    modifiedWhen:\n      description: ''\n      type: string\n      format: date\n    Error:\n      type: object\n      required:\n        - status\n        - title\n      properties:\n        status:\n          type: number\n          description: 'The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.'\n        title:\n          type: string\n          description: 'A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localisation.'\n        detail:\n          type: string\n          description: An human readable explanation specific to this occurrence of the problem.\n        type:\n          type: string\n          description: 'An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".'\n        instance:\n          type: string\n          description: An absolute URI that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.\n",
			"canonicalURL": "/github.com/GVogeler/prosopogrAPhI@ebe97307d70ada21c35e114cce9621bf0cac884a/-/blob/prosopogrAPhI.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/GVogeler/prosopogrAPhI/blob/ebe97307d70ada21c35e114cce9621bf0cac884a/prosopogrAPhI.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}