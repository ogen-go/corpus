{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "gitlab.com/thorchain/midgard"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/openapi.yaml",
			"byteSize": 84453,
			"content": "openapi: 3.0.0\ninfo:\n  title: Midgard Public API\n  version: 2.7.2\n  contact:\n    email: devs@thorchain.org\n  description: \u003e-\n    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st\n    and prepares information about the network to be readily available for public users.\n    The API parses transaction event data from THORChain and stores them\n    in a time-series database to make time-dependent queries easy.\n    Midgard does not hold critical information.\n    To interact with BEPSwap and Asgardex, users should query THORChain directly.\n\npaths:\n  # TODO(acsaba): remove remaining mentions of stake from documentation.\n  /v2/doc:\n    get:\n      operationId: GetDocs\n      summary: Documentation\n      description: Swagger/OpenAPI 3.0 specification generated documents.\n      responses:\n        \"200\":\n          description: swagger/OpenAPI 3.0 spec generated docs\n      tags:\n        - Specification\n\n  \"/v2/swagger.json\":\n    get:\n      operationId: GetSwagger\n      summary: Swagger File\n      description: Returns human and machine readable swagger/openapi specification\n      responses:\n        \"200\":\n          description: human and machine readable swagger/openapi specification\n      tags:\n        - Specification\n\n  \"/v2/health\":\n    get:\n      operationId: GetHealth\n      summary: Health Info\n      # In openapi 3.0.0 it's not possible to add description to $ref fields therefore we describe\n      # them here. It may be possible to do it in the future with 3.1.0\n      # https://github.com/OAI/OpenAPI-Specification/issues/1514\n      description: |\n        Returns an object containing the health response of the API.\n        Meaning of heights:\n\n        lastThorNode - Latest block as reported by ThorNode.\n\n        lastFetched - Latest block fetched from ThorNode.\n\n        lastCommitted - Latest block commited to the DB but not fully processed yet.\n\n        lastAggregated - Latest block fully processed and aggregated.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/HealthResponse'\n\n  \"/v2/pools\":\n    get:\n      operationId: GetPools\n      summary: Pools List\n      description: Returns an array containing details for a set of pools\n      parameters:\n        - name: status\n          in: query\n          description: Filter for only pools with this status\n          required: false\n          schema:\n            type: string\n            enum: [\"available\", \"staged\", \"suspended\"]\n      responses:\n        \"200\":\n          $ref: '#/components/responses/PoolsResponse'\n\n  \"/v2/pool/{asset}\":\n    get:\n      operationId: GetPool\n      summary: Details of a Pool\n      description: 'Returns details of the pool: depths, price, 24h volume, APY. '\n      parameters:\n        - in: path\n          name: asset\n          description: pool name\n          required: true\n          schema:\n            type: string\n          example: 'BNB.TOMOB-1E1'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/PoolResponse'\n\n  \"/v2/pool/{asset}/stats\":\n    get:\n      operationId: GetPoolStats\n      summary: Pool Statistics\n      description: |\n        Statistics about the pool. The description of the fields have pointers about the\n        corresponding v2/history location. Visit the history endpoint for drilldowns.\n      parameters:\n        - in: path\n          name: asset\n          description: pool name\n          required: true\n          schema:\n            type: string\n          example: 'BNB.TOMOB-1E1'\n        - name: period\n          in: query\n          description: |\n            Restricts aggregation type fields to the last period only.\n            Default is 30d.\n          required: false\n          example: \"24h\"\n          schema:\n            type: string\n            enum: [\"1h\", \"24h\", \"7d\", \"30d\", \"90d\", \"365d\", \"all\"]\n      responses:\n        \"200\":\n          $ref: '#/components/responses/PoolStatsResponse'\n\n  \"/v2/history/depths/{pool}\":\n    get:\n      operationId: GetDepthHistory\n      summary: Depth and Price History\n      description: |\n        Returns the asset and rune depths and price.\n        The values report the state at the end of each interval.\n\n        History endpoint has two modes:\n        * With Interval parameter it returns a series of time buckets. From and To dates will\n          be rounded to the Interval boundaries.\n        * Without Interval parameter a single From..To search is performed with exact timestamps.\n\n\n        * Interval: possible values: 5min, hour, day, week, month, quarter, year.\n        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.\n        * from/to: optional int, unix second.\n\n        Possible usages with interval.\n        * last 10 days: `?interval=day\u0026count=10`\n        * last 10 days before to: `?interval=day\u0026count=10\u0026to=1608825600`\n        * next 10 days after from: `?interval=day\u0026count=10\u0026from=1606780800`\n        * Days between from and to. From defaults to start of chain, to defaults to now.\n          Only the first 400 intervals are returned:\n          `interval=day\u0026from=1606780800\u0026to=1608825600`\n\n        Pagination is possible with from\u0026count and then using the returned meta.endTime as the\n        From parameter of the next query.\n\n        Possible configurations without interval:\n        * exact search for one time frame: `?from=1606780899\u0026to=1608825600`\n        * one time frame until now: `?from=1606780899`\n        * from chain start until now: no query parameters\n      parameters:\n        - name: pool\n          in: path\n          description: Return stats for this single pool.\n          required: true\n          schema:\n            type: string\n        - name: interval\n          in: query\n          description: Interval of calculations\n          required: false\n          example: \"day\"\n          schema:\n            type: string\n            enum: [\"5min\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]\n        - name: count\n          in: query\n          description: Number of intervals to return. Should be between [1..400].\n          required: false\n          example: 30\n          schema:\n            type: integer\n        - name: to\n          in: query\n          description: |\n            End time of the query as unix timestamp. If only count is given, defaults to now.\n          required: false\n          example: 1608825600\n          schema:\n            type: integer\n            format: int64\n        - name: from\n          in: query\n          description: Start time of the query as unix timestamp\n          required: false\n          example: 1606780800\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: '#/components/responses/DepthHistoryResponse'\n\n  \"/v2/history/earnings\":\n    get:\n      operationId: GetEarningsHistory\n      summary: Earnings History\n      description: |\n        Returns earnings data for the specified interval.\n\n        History endpoint has two modes:\n        * With Interval parameter it returns a series of time buckets. From and To dates will\n          be rounded to the Interval boundaries.\n        * Without Interval parameter a single From..To search is performed with exact timestamps.\n\n\n        * Interval: possible values: 5min, hour, day, week, month, quarter, year.\n        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.\n        * from/to: optional int, unix second.\n\n        Possible usages with interval.\n        * last 10 days: `?interval=day\u0026count=10`\n        * last 10 days before to: `?interval=day\u0026count=10\u0026to=1608825600`\n        * next 10 days after from: `?interval=day\u0026count=10\u0026from=1606780800`\n        * Days between from and to. From defaults to start of chain, to defaults to now.\n          Only the first 400 intervals are returned:\n          `interval=day\u0026from=1606780800\u0026to=1608825600`\n\n        Pagination is possible with from\u0026count and then using the returned meta.endTime as the\n        From parameter of the next query.\n\n        Possible configurations without interval:\n        * exact search for one time frame: `?from=1606780899\u0026to=1608825600`\n        * one time frame until now: `?from=1606780899`\n        * from chain start until now: no query parameters\n      parameters:\n        - name: interval\n          in: query\n          description: Interval of calculations\n          required: false\n          example: \"day\"\n          schema:\n            type: string\n            enum: [\"5min\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]\n        - name: count\n          in: query\n          description: Number of intervals to return. Should be between [1..400].\n          required: false\n          example: 30\n          schema:\n            type: integer\n        - name: to\n          in: query\n          description: |\n            End time of the query as unix timestamp. If only count is given, defaults to now.\n          required: false\n          example: 1608825600\n          schema:\n            type: integer\n            format: int64\n        - name: from\n          in: query\n          description: Start time of the query as unix timestamp\n          required: false\n          example: 1606780800\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: '#/components/responses/EarningsHistoryResponse'\n\n  \"/v2/history/swaps\":\n    get:\n      operationId: GetSwapHistory\n      summary: Swaps History\n      description: |\n        Returns swap count, volume, fees, slip in specified interval.\n        If pool is not specified returns for all pools\n\n        History endpoint has two modes:\n        * With Interval parameter it returns a series of time buckets. From and To dates will\n          be rounded to the Interval boundaries.\n        * Without Interval parameter a single From..To search is performed with exact timestamps.\n\n\n        * Interval: possible values: 5min, hour, day, week, month, quarter, year.\n        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.\n        * from/to: optional int, unix second.\n\n        Possible usages with interval.\n        * last 10 days: `?interval=day\u0026count=10`\n        * last 10 days before to: `?interval=day\u0026count=10\u0026to=1608825600`\n        * next 10 days after from: `?interval=day\u0026count=10\u0026from=1606780800`\n        * Days between from and to. From defaults to start of chain, to defaults to now.\n          Only the first 400 intervals are returned:\n          `interval=day\u0026from=1606780800\u0026to=1608825600`\n\n        Pagination is possible with from\u0026count and then using the returned meta.endTime as the\n        From parameter of the next query.\n\n        Possible configurations without interval:\n        * exact search for one time frame: `?from=1606780899\u0026to=1608825600`\n        * one time frame until now: `?from=1606780899`\n        * from chain start until now: no query parameters\n      parameters:\n        - name: pool\n          in: query\n          description: Return history given pool. Returns sum of all pools if missing.\n          required: false\n          schema:\n            type: string\n        - name: interval\n          in: query\n          description: Interval of calculations\n          required: false\n          example: \"day\"\n          schema:\n            type: string\n            enum: [\"5min\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]\n        - name: count\n          in: query\n          description: Number of intervals to return. Should be between [1..400].\n          required: false\n          example: 30\n          schema:\n            type: integer\n        - name: to\n          in: query\n          description: |\n            End time of the query as unix timestamp. If only count is given, defaults to now.\n          required: false\n          example: 1608825600\n          schema:\n            type: integer\n            format: int64\n        - name: from\n          in: query\n          description: Start time of the query as unix timestamp\n          required: false\n          example: 1606780800\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: '#/components/responses/SwapHistoryResponse'\n\n  \"/v2/history/tvl\":\n    get:\n      operationId: GetTVLHistory\n      summary: Total Value Locked History\n      description: |\n        Returns total pool depths, total bonds, and total value locked in specified interval.\n\n        Total Value Locked = Total Bonds + 2 * Total Pool Depths\n\n        History endpoint has two modes:\n        * With Interval parameter it returns a series of time buckets. From and To dates will\n          be rounded to the Interval boundaries.\n        * Without Interval parameter a single From..To search is performed with exact timestamps.\n\n        * Interval: possible values: 5min, hour, day, week, month, quarter, year.\n        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.\n        * from/to: optional int, unix second.\n\n        Possible usages with interval.\n        * last 10 days: `?interval=day\u0026count=10`\n        * last 10 days before to: `?interval=day\u0026count=10\u0026to=1608825600`\n        * next 10 days after from: `?interval=day\u0026count=10\u0026from=1606780800`\n        * Days between from and to. From defaults to start of chain, to defaults to now.\n          Only the first 400 intervals are returned:\n          `interval=day\u0026from=1606780800\u0026to=1608825600`\n\n        Pagination is possible with from\u0026count and then using the returned meta.endTime as the\n        From parameter of the next query.\n\n        Possible configurations without interval:\n        * exact search for one time frame: `?from=1606780899\u0026to=1608825600`\n        * one time frame until now: `?from=1606780899`\n        * from chain start until now: no query parameters\n      parameters:\n        - name: interval\n          in: query\n          description: Interval of calculations\n          required: false\n          example: \"day\"\n          schema:\n            type: string\n            enum: [\"5min\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]\n        - name: count\n          in: query\n          description: Number of intervals to return. Should be between [1..400].\n          required: false\n          example: 30\n          schema:\n            type: integer\n        - name: to\n          in: query\n          description: |\n            End time of the query as unix timestamp. If only count is given, defaults to now.\n          required: false\n          example: 1608825600\n          schema:\n            type: integer\n            format: int64\n        - name: from\n          in: query\n          description: Start time of the query as unix timestamp\n          required: false\n          example: 1606780800\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: '#/components/responses/TVLHistoryResponse'\n\n  \"/v2/history/liquidity_changes\":\n    get:\n      operationId: GetLiquidityHistory\n      summary: Liquidity Changes History\n      description: |\n        Returns withdrawals and deposits for given time interval.\n        If pool is not specified returns for all pools\n\n        History endpoint has two modes:\n        * With Interval parameter it returns a series of time buckets. From and To dates will\n          be rounded to the Interval boundaries.\n        * Without Interval parameter a single From..To search is performed with exact timestamps.\n\n\n        * Interval: possible values: 5min, hour, day, week, month, quarter, year.\n        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.\n        * from/to: optional int, unix second.\n\n        Possible usages with interval.\n        * last 10 days: `?interval=day\u0026count=10`\n        * last 10 days before to: `?interval=day\u0026count=10\u0026to=1608825600`\n        * next 10 days after from: `?interval=day\u0026count=10\u0026from=1606780800`\n        * Days between from and to. From defaults to start of chain, to defaults to now.\n          Only the first 400 intervals are returned:\n          `interval=day\u0026from=1606780800\u0026to=1608825600`\n\n        Pagination is possible with from\u0026count and then using the returned meta.endTime as the\n        From parameter of the next query.\n\n        Possible configurations without interval:\n        * exact search for one time frame: `?from=1606780899\u0026to=1608825600`\n        * one time frame until now: `?from=1606780899`\n        * from chain start until now: no query parameters\n      parameters:\n        - name: pool\n          in: query\n          description: Return stats for given pool. Returns sum of all pools if missing\n          required: false\n          schema:\n            type: string\n        - name: interval\n          in: query\n          description: Interval of calculations\n          required: false\n          example: \"day\"\n          schema:\n            type: string\n            enum: [\"5min\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]\n        - name: count\n          in: query\n          description: Number of intervals to return. Should be between [1..400]\n          required: false\n          example: 30\n          schema:\n            type: integer\n        - name: to\n          in: query\n          description: |\n            End time of the query as unix timestamp. If only count is given, defaults to now\n          required: false\n          example: 1608825600\n          schema:\n            type: integer\n            format: int64\n        - name: from\n          in: query\n          description: Start time of the query as unix timestamp\n          required: false\n          example: 1606780800\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: '#/components/responses/LiquidityHistoryResponse'\n\n  \"/v2/nodes\":\n    get:\n      operationId: GetNodes\n      summary: Nodes List\n      description: Returns a list of Node public keys and adresses.\n      responses:\n        \"200\":\n          \"$ref\": \"#/components/responses/NodesResponse\"\n\n  \"/v2/network\":\n    get:\n      operationId: GetNetworkData\n      summary: Network Data\n      description: Returns an object containing Network data\n      responses:\n        \"200\":\n          \"$ref\": \"#/components/responses/NetworkResponse\"\n\n  \"/v2/actions\":\n    get:\n      operationId: GetActions\n      summary: Actions List\n      description: |\n        List actions along with their related transactions. An action is generated by one or more\n        inbound transactions with the intended action set in the transaction memo. The action may\n        result in one or more outbound transactions. Results are paginated by sets of 50.\n        Filters may be applied to query actions.\n      parameters:\n        - name: address\n          in: query\n          description: |\n            Comma separated list. Address of sender or recipient of any in/out transaction related\n            to the action.\n          required: false\n          schema:\n            type: string\n          example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5\n        - name: txid\n          in: query\n          description: ID of any in/out tx related to the action\n          required: false\n          schema:\n            type: string\n          example: 2F624637DE179665BA3322B864DB9F30001FD37B4E0D22A0B6ECE6A5B078DAB4\n        - name: asset\n          in: query\n          description: Any asset that is part of the action (CHAIN.SYMBOL)\n          required: false\n          schema:\n            type: string\n          example: BNB.TOMOB-1E1\n        - name: type\n          in: query\n          description: |\n            One or more comma separated unique types of action\n            (swap, addLiquidity, withdraw, donate, refund, switch)\n          required: false\n          schema:\n            type: string\n          example: swap,addLiquidity\n        - name: affiliate\n          in: query\n          description: |\n            Affiliate address of the action (swap)\n          required: false\n          schema:\n            type: string\n          example: thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g\n        - name: limit\n          in: query\n          description: number of actions returned, default is 50\n          required: false\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            maximum: 50\n        - name: offset\n          in: query\n          description: pagination offset, default is 0\n          required: false\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ActionsResponse'\n\n  \"/v2/members\":\n    get:\n      operationId: GetMembersAdresses\n      summary: Members List\n      description: |\n        Returns an array containing the addresses for all pool members.\n        Addresses are only shown once. If there's both a RUNE address and an asset address\n        for a member, only the RUNE address will be shown.\n      parameters:\n        - name: pool\n          in: query\n          description: Return only members present in the pool.\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          \"$ref\": \"#/components/responses/MembersResponse\"\n\n  \"/v2/member/{address}\":\n    get:\n      operationId: GetMemberDetail\n      summary: Member Details\n      description: |\n        Returns an array of statistics for all the liquidity providers associated with a given\n        member address.\n      parameters:\n        - name: address\n          in: path\n          description: |\n            Address to match liquidity providers. Either a rune or an asset address may be given.\n          required: true\n          schema:\n            type: string\n          example: 'bnb1jxfh2g85q3v0tdq56fnevx6xcxtcnhtsmcu64m'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/MemberDetailsResponse'\n\n  \"/v2/thorname/lookup/{name}\":\n    get:\n      operationId: GetTHORNameDetail\n      summary: THORName Details\n      description: Returns an array of chains and their addresses associated with the given THORName\n      parameters:\n        - name: name\n          in: path\n          description: a THORName\n          required: true\n          schema:\n            type: string\n          example: 'thorchain'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/THORNameDetailsResponse'\n\n  \"/v2/thorname/rlookup/{address}\":\n    get:\n      operationId: GetTHORNamesByAddress\n      summary: Gives a list of THORNames by reverse lookup\n      description: Returns an array of THORNames associated with the given address\n      parameters:\n        - name: address\n          in: path\n          description: Address to match THORNames against.\n          required: true\n          schema:\n            type: string\n          example: 'bnb1jxfh2g85q3v0tdq56fnevx6xcxtcnhtsmcu64m'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ReverseTHORNameResponse'\n\n  \"/v2/thorname/owner/{address}\":\n    get:\n      operationId: GetTHORNamesOwnerByAddress\n      summary: THORName owner\n      description: |\n        Returns an array of THORNames owned by the address. The address is not necessarily an\n        associated address for those thornames.\n      parameters:\n        - name: address\n          in: path\n          description: Address which owns a THORName.\n          required: true\n          schema:\n            type: string\n          example: 'thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ReverseTHORNameResponse'\n\n  \"/v2/stats\":\n    get:\n      operationId: GetStats\n      summary: Global Stats\n      description: Returns an object containing global stats for all pools and all transactions\n      responses:\n        \"200\":\n          $ref: '#/components/responses/StatsResponse'\n\n  \"/v2/thorchain/inbound_addresses\":\n    get:\n      operationId: GetProxiedInboundAddresses\n      summary: Proxied THORChain Inbound Addresses\n      description: |\n        Inbound addresses will return a list of address , one per chain. The address might change\n        frequently if THORChain has multiple asgards.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/InboundAddressesResponse'\n\n  \"/v2/thorchain/constants\":\n    get:\n      operationId: GetProxiedConstants\n      summary: Proxied THORChain Constants\n      description: Constant values used by THORChain , some of the values can be overrided by mimir\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ConstantsResponse'\n\n  \"/v2/thorchain/lastblock\":\n    get:\n      operationId: GetProxiedLastblock\n      summary: Proxied THORChain Lastblock\n      description: Retrieve lastest block infomation across all chains.\n      responses:\n        \"200\":\n          $ref: '#/components/responses/LastblockResponse'\n\n  \"/v2/thorchain/queue\":\n    get:\n      operationId: GetProxiedQueue\n      summary: Proxied THORChain Queue\n      description: Returns the proxied queue endpoint from thornode\n      responses:\n        \"200\":\n          $ref: '#/components/responses/QueueResponse'\n\n  \"/v2/thorchain/nodes\":\n    get:\n      operationId: GetProxiedNodes\n      summary: Proxied THORChain Nodes\n      description: Returns the proxied nodes endpoint from thornode\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ProxiedNodesResponse'\n\n  \"/v2/balance/{address}\":\n    get:\n      operationId: GetBalance\n      summary: Current balance for an address\n      description: |\n        Returns all coin amounts for the given address at watermark height.\n        This endpoint is enabled only if the midgard startup config allows it.\n      parameters:\n        - name: address\n          in: path\n          description: Rune address.\n          required: true\n          schema:\n            type: string\n          example: 'thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g'\n      responses:\n        \"200\":\n          $ref: '#/components/responses/BalanceResponse'\n\ncomponents:\n  responses:\n    HealthResponse:\n      description: Returns health status for Midgard\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Health'\n    PoolsResponse:\n      description: Array of pool details\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PoolDetails'\n    PoolStatsResponse:\n      description: Stats for one pool.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PoolStatsDetail'\n    PoolResponse:\n      description: Object containing details for one pool\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PoolDetail'\n    DepthHistoryResponse:\n      description: Depth and price history\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DepthHistory'\n    EarningsHistoryResponse:\n      description: earnings history\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EarningsHistory'\n    SwapHistoryResponse:\n      description: Swap count, volume, fee and slip history\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SwapHistory'\n    LiquidityHistoryResponse:\n      description: Withdrawals and deposits history\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiquidityHistory'\n    TVLHistoryResponse:\n      description: Total pool depths, total bonds, and total value locked history\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TVLHistory'\n    NodesResponse:\n      # TODO(acsaba): add better description\n      description: Returns an object containing Node public key data\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Nodes'\n    NetworkResponse:\n      # TODO(acsaba): add better description\n      description: Returns an object containing Network data\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Network'\n    ActionsResponse:\n      description: Returns an array of actions for the given filters.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - count\n              - actions\n            properties:\n              count:\n                type: string\n                description: Int64, number of results matching the given filters.\n              actions:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Action'\n    MembersResponse:\n      description: array of all the members\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Members'\n    MemberDetailsResponse:\n      description: object containing liquidity provider data for a specific member\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/MemberDetails'\n    THORNameDetailsResponse:\n      description: object containing THORName data for a specific name\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/THORNameDetails'\n    ReverseTHORNameResponse:\n      description: object containing a list of THORName names for a specific address\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReverseTHORNames'\n    StatsResponse:\n      description: object containing global BEPSwap data\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StatsData'\n\n    InboundAddressesResponse:\n      description: Thornode Indbound Adresses response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/InboundAddresses'\n    ConstantsResponse:\n      description: Thornode Constants response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Constants'\n    LastblockResponse:\n      description: Thornode Lastblock response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Lastblock'\n    QueueResponse:\n      description: Thornode Queue response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Queue'\n    ProxiedNodesResponse:\n      description: Thornode Nodes response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProxiedNodes'\n    BalanceResponse:\n      description: object containing balance details for a given address\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Balance'\n\n  schemas:\n    HeightTS:\n      type: object\n      required:\n        - height\n        - timestamp\n      properties:\n        height:\n          type: integer\n          description: Block height\n        timestamp:\n          type: integer\n          description: Block timestamp (seconds since epoch)\n\n    Health:\n      type: object\n      required:\n      - database\n      - scannerHeight\n      - inSync\n      - lastThorNode\n      - lastFetched\n      - lastCommitted\n      - lastAggregated\n      properties:\n        database:\n          type: boolean\n          description: True means healthy, connected to database\n        scannerHeight:\n          type: string\n          description: Int64, the current block count\n        inSync:\n          type: boolean\n          description: True means healthy. False means Midgard is still catching up to the chain\n        # It's not possible to add description to $ref fields, it's descriped above.\n        # https://github.com/OAI/OpenAPI-Specification/issues/1514\n        lastThorNode:\n          $ref: '#/components/schemas/HeightTS'\n        lastFetched:\n          $ref: '#/components/schemas/HeightTS'\n        lastCommitted:\n          $ref: '#/components/schemas/HeightTS'\n        lastAggregated:\n          $ref: '#/components/schemas/HeightTS'\n\n    PoolDetails:\n      type: array\n      items:\n        $ref: '#/components/schemas/PoolDetail'\n    PoolDetail:\n      type: object\n      required:\n        - asset\n        - volume24h\n        - assetDepth\n        - runeDepth\n        - assetPrice\n        - assetPriceUSD\n        - annualPercentageRate\n        - poolAPY\n        - status\n        - liquidityUnits\n        - synthUnits\n        - synthSupply\n        - units\n      properties:\n        asset:\n          type: string\n        volume24h:\n          type: string\n          description: |\n            Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.\n            It includes synth mint or burn.\n        assetDepth:\n          type: string\n          description: Int64(e8), the amount of Asset in the pool.\n        runeDepth:\n          type: string\n          description: Int64(e8), the amount of Rune in the pool.\n        assetPrice:\n          type: string\n          description: Float, price of asset in rune. I.e. rune amount / asset amount.\n        assetPriceUSD:\n          type: string\n          description: Float, the price of asset in USD (based on the deepest USD pool).\n        annualPercentageRate:\n          type: string\n          description: |\n            Float, Also called APR. Annual return estimated from last 30 days income\n            (linearly, not compounded). E.g. 0.1 means 10% yearly return.\n            Due to Impermantent Loss and Synths this might be negative, but given Impermanent\n            Loss Protection for 100+ day members, frontends might show MAX(APR, 0).\n        poolAPY:\n          type: string\n          description: |\n            Float, MAX(AnnualPercentageRate, 0)\n        status:\n          type: string\n          description: The state of the pool, e.g. Available, Staged.\n        liquidityUnits:\n          type: string\n          description: Int64, Liquidity Units in the pool.\n        synthUnits:\n          type: string\n          description: Int64, Synth Units in the pool.\n        synthSupply:\n          type: string\n          description: Int64, Synth supply in the pool.\n        units:\n          type: string\n          description: Int64, Total Units (synthUnits + liquidityUnits) in the pool.\n\n    PoolStatsDetail:\n      type: object\n      required:\n        - asset\n        - status\n        - assetPrice\n        - assetPriceUSD\n        - assetDepth\n        - runeDepth\n        - liquidityUnits\n        - synthUnits\n        - synthSupply\n        - units\n        - toAssetVolume\n        - toRuneVolume\n        - swapVolume\n        - toAssetCount\n        - toRuneCount\n        - swapCount\n        - uniqueSwapperCount\n        - toAssetAverageSlip\n        - toRuneAverageSlip\n        - averageSlip\n        - toAssetFees\n        - toRuneFees\n        - totalFees\n        - annualPercentageRate\n        - poolAPY\n        - addAssetLiquidityVolume\n        - addRuneLiquidityVolume\n        - addLiquidityVolume\n        - addLiquidityCount\n        - withdrawAssetVolume\n        - withdrawRuneVolume\n        - impermanentLossProtectionPaid\n        - withdrawVolume\n        - withdrawCount\n        - uniqueMemberCount\n      properties:\n        asset:\n          type: string\n        status:\n          type: string\n          description: The state of the pool, e.g. Available, Staged\n        assetPrice:\n          type: string\n          description: Float, price of asset in rune. I.e. rune amount / asset amount\n        assetPriceUSD:\n          type: string\n          description: Float, the price of asset in USD (based on the deepest USD pool).\n        assetDepth:\n          type: string\n          description: Int64(e8), the amount of Asset in the pool\n        runeDepth:\n          type: string\n          description: Int64(e8), the amount of Rune in the pool\n        synthUnits:\n          type: string\n          description: Int64, Synth Units in the pool\n        synthSupply:\n          type: string\n          description: Int64, Synth supply in the pool\n        liquidityUnits:\n          type: string\n          description: Int64, Liquidity Units in the pool\n        units:\n          type: string\n          description: Int64, Total Units (synthUnits + liquidityUnits) in the pool\n        toAssetVolume:\n          type: string\n          description: Int64(e8), same as history/swaps:toAssetVolume\n        toRuneVolume:\n          type: string\n          description: Int64(e8), same as history/swaps:toRuneVolume\n        swapVolume:\n          type: string\n          description: Int64(e8), same as history/swaps:totalVolume\n        toAssetCount:\n          type: string\n          description: Int64, same as history/swaps:toAssetCount\n        toRuneCount:\n          type: string\n          description: Int64, same as history/swaps:toRuneCount\n        swapCount:\n          type: string\n          description: Int64, same as history/swaps:totalCount\n        uniqueSwapperCount:\n          type: string\n          description: Deprecated, it's always 0.\n        toAssetAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), same as\n            history/swaps:toAssetAverageSlip\n        toRuneAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), same as\n            history/swaps:toRuneAverageSlip\n        averageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip\n        toAssetFees:\n          type: string\n          description: Int64(e8), same as history/swaps:toAssetFees\n        toRuneFees:\n          type: string\n          description: Int64(e8), same as history/swaps:toRuneFees\n        totalFees:\n          type: string\n          description: Int64(e8), same as history/swaps:totalFees\n        annualPercentageRate:\n          type: string\n          description: |\n            Float, Also called APR. Estimated annual return (linearly, not compounded).\n            Always estimated from last 30 days (doesn't take period into account).\n            E.g. 0.1 means 10% yearly return.\n            Due to Impermantent Loss and Synths this might be negative, but given Impermanent\n            Loss Protection for 100+ day members, frontends might show MAX(APR, 0).\n        poolAPY:\n          type: string\n          description: |\n            Float, MAX(AnnualPercentageRate, 0)\n        addAssetLiquidityVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume\n        addRuneLiquidityVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume\n        addLiquidityVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:addLiquidityVolume\n        addLiquidityCount:\n          type: string\n          description: Int64, same as history/liquidity_changes:addLiquidityCount\n        withdrawAssetVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:withdrawAssetVolume\n        withdrawRuneVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:withdrawRuneVolume\n        impermanentLossProtectionPaid:\n          type: string\n          description: |\n            Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss\n            protection.\n        withdrawVolume:\n          type: string\n          description: Int64(e8), same as history/liquidity_changes:withdrawVolume\n        withdrawCount:\n          type: string\n          description: Int64, same as history/liquidity_changes:withdrawCount\n        uniqueMemberCount:\n          type: string\n          description: Int64, same as len(history/members?pool=POOL)\n\n    DepthHistory:\n      type: object\n      required:\n        - meta\n        - intervals\n      properties:\n        meta:\n          $ref: '#/components/schemas/DepthHistoryMeta'\n        intervals:\n          $ref: '#/components/schemas/DepthHistoryIntervals'\n    DepthHistoryMeta:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - priceShiftLoss\n        - luviIncrease\n        - startAssetDepth\n        - startRuneDepth\n        - startLPUnits\n        - startSynthUnits\n        - endAssetDepth\n        - endRuneDepth\n        - endLPUnits\n        - endSynthUnits\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of bucket in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of bucket in unix timestamp\n        priceShiftLoss:\n          type: string\n          description: Float, The impermanent loss between the first and last depth item\n        luviIncrease:\n          type: string\n          description: |\n            Float, The liquidity unit value index increase between the first and last depth item\n        startAssetDepth:\n          type: string\n          description: |\n            Int64(e8), the amount of Asset in the pool at the start of the interval at time\n            startTime\n        startRuneDepth:\n          type: string\n          description: |\n            Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime\n        startLPUnits:\n          type: string\n          description: |\n            Int64, Liquidity Units in the pool at the start of the interval at time startTime\n        startSynthUnits:\n          type: string\n          description: |\n            Int64, Synth Units in the pool at the start of the interval at time startTime\n        endAssetDepth:\n          type: string\n          description: |\n            Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime\n        endRuneDepth:\n          type: string\n          description: |\n            Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime\n        endLPUnits:\n          type: string\n          description: Int64, Liquidity Units in the pool at the end of the interval at time endTime\n        endSynthUnits:\n          type: string\n          description: Int64, Synth Units in the pool at the end of the interval at time endTime\n    DepthHistoryIntervals:\n      type: array\n      items:\n        $ref: '#/components/schemas/DepthHistoryItem'\n    DepthHistoryItem:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - assetDepth\n        - runeDepth\n        - assetPrice\n        - assetPriceUSD\n        - liquidityUnits\n        - synthUnits\n        - synthSupply\n        - units\n        - luvi\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of bucket in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of bucket in unix timestamp\n        assetDepth:\n          type: string\n          description: Int64(e8), the amount of Asset in the pool at the end of the interval\n        runeDepth:\n          type: string\n          description: Int64(e8), the amount of Rune in the pool at the end of the interval\n        assetPrice:\n          type: string\n          description: Float, price of asset in rune. I.e. rune amount / asset amount\n        assetPriceUSD:\n          type: string\n          description: Float, the price of asset in USD (based on the deepest USD pool).\n        liquidityUnits:\n          type: string\n          description: Int64, Liquidity Units in the pool at the end of the interval\n        synthUnits:\n          type: string\n          description: Int64, Synth Units in the pool at the end of the interval\n        synthSupply:\n          type: string\n          description: Int64, Synth supply in the pool at the end of the interval\n        units:\n          type: string\n          description: |\n            Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval\n        luvi:\n          type: string\n          description: |\n            Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units\n    EarningsHistory:\n      type: object\n      required:\n        - meta\n        - intervals\n      properties:\n        meta:\n          $ref: '#/components/schemas/EarningsHistoryItem'\n        intervals:\n          $ref: '#/components/schemas/EarningsHistoryIntervals'\n    EarningsHistoryIntervals:\n      type: array\n      items:\n        $ref: '#/components/schemas/EarningsHistoryItem'\n    EarningsHistoryItem:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - liquidityFees\n        - blockRewards\n        - earnings\n        - bondingEarnings\n        - liquidityEarnings\n        - avgNodeCount\n        - runePriceUSD\n        - pools\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of interval in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of interval in unix timestamp\n        liquidityFees:\n          type: string\n          description: |\n            Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval\n        blockRewards:\n          type: string\n          description: Int64(e8), Total block rewards emitted during the time interval\n        earnings:\n          type: string\n          description: |\n            Int64(e8), System income generated during the time interval. It is the sum of\n            liquidity fees and block rewards\n        bondingEarnings:\n          type: string\n          description: Int64(e8), Share of earnings sent to nodes during the time interval\n        liquidityEarnings:\n          type: string\n          description: Int64(e8), Share of earnings sent to pools during the time interval\n        avgNodeCount:\n          type: string\n          description: float64, Average amount of active nodes during the time interval\n        runePriceUSD:\n          type: string\n          description: |\n            Float, the price of Rune based on the deepest USD pool at the end of the interval.\n        pools:\n          type: array\n          description: Earnings data for each pool for the time interval\n          items:\n            $ref: '#/components/schemas/EarningsHistoryItemPool'\n    EarningsHistoryItemPool:\n      type: object\n      required:\n        - pool\n        - assetLiquidityFees\n        - runeLiquidityFees\n        - totalLiquidityFeesRune\n        - rewards\n        - earnings\n      description: pool earnings data during the time interval\n      properties:\n        pool:\n          type: string\n          description: asset for the given pool\n        assetLiquidityFees:\n          type: string\n          description: Int64(e8), liquidity fees collected in the pool's asset\n        runeLiquidityFees:\n          type: string\n          description: Int64(e8), liquidity fees collected in RUNE\n        totalLiquidityFeesRune:\n          type: string\n          description: |\n            Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE\n        rewards:\n          type: string\n          description: |\n            Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as\n            a result of balancing it's share of system income each block\n        earnings:\n          type: string\n          description: Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)\n\n    SwapHistory:\n      type: object\n      required:\n        - meta\n        - intervals\n      properties:\n        meta:\n          $ref: '#/components/schemas/SwapHistoryItem'\n        intervals:\n          $ref: '#/components/schemas/SwapHistoryIntervals'\n    SwapHistoryIntervals:\n      type: array\n      items:\n        $ref: '#/components/schemas/SwapHistoryItem'\n    SwapHistoryItem:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - toAssetCount\n        - toRuneCount\n        - synthMintCount\n        - synthRedeemCount\n        - totalCount\n        - toAssetVolume\n        - toRuneVolume\n        - synthMintVolume\n        - synthRedeemVolume\n        - totalVolume\n        - toAssetFees\n        - toRuneFees\n        - synthMintFees\n        - synthRedeemFees\n        - totalFees\n        - toAssetAverageSlip\n        - toRuneAverageSlip\n        - synthMintAverageSlip\n        - synthRedeemAverageSlip\n        - averageSlip\n        - runePriceUSD\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of bucket in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of bucket in unix timestamp\n        toAssetCount:\n          type: string\n          description: Int64, count of swaps from rune to asset\n        toRuneCount:\n          type: string\n          description: Int64, count of swaps from asset to rune\n        synthMintCount:\n          type: string\n          description: Int64, count of rune to synthetic asset swaps\n        synthRedeemCount:\n          type: string\n          description: Int64, count of synthetic asset to rune swaps\n        totalCount:\n          type: string\n          description: Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount\n        toAssetVolume:\n          type: string\n          description: Int64(e8), volume of swaps from rune to asset denoted in rune\n        toRuneVolume:\n          type: string\n          description: Int64(e8), volume of swaps from asset to rune denoted in rune\n        synthMintVolume:\n          type: string\n          description: Int64(e8), volume of swaps from rune to synthetic asset denoted in rune\n        synthRedeemVolume:\n          type: string\n          description: Int64(e8), volume of swaps from synthetic asset to rune denoted in rune\n        totalVolume:\n          type: string\n          description: |\n            Int64(e8),\n            toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)\n        toAssetFees:\n          type: string\n          description: Int64(e8), the fees collected from swaps from rune to asset (in rune)\n        toRuneFees:\n          type: string\n          description: Int64(e8), the fees collected from swaps from asset to rune (in rune)\n        synthMintFees:\n          type: string\n          description: |\n            Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)\n        synthRedeemFees:\n          type: string\n          description: |\n            Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)\n        totalFees:\n          type: string\n          description: Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees\n        toAssetAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps\n            from rune to asset.\n            Big swaps have the same weight as small swaps\n        toRuneAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps\n            from asset to rune.\n            Big swaps have the same weight as small swaps\n        synthMintAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps\n            from rune to synthetic asset.\n            Big swaps have the same weight as small swaps\n        synthRedeemAverageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps\n            from synthetic asset to rune.\n            Big swaps have the same weight as small swaps\n        averageSlip:\n          type: string\n          description: |\n            Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)\n            of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.\n            Big swaps have the same weight as small swaps.\n        runePriceUSD:\n          type: string\n          description: |\n            Float, the price of Rune based on the deepest USD pool at the end of the interval.\n\n    LiquidityHistory:\n      type: object\n      required:\n        - meta\n        - intervals\n      properties:\n        meta:\n          $ref: '#/components/schemas/LiquidityHistoryItem'\n        intervals:\n          $ref: '#/components/schemas/LiquidityHistoryIntervals'\n    LiquidityHistoryIntervals:\n      type: array\n      items:\n        $ref: '#/components/schemas/LiquidityHistoryItem'\n    LiquidityHistoryItem:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - addAssetLiquidityVolume\n        - addRuneLiquidityVolume\n        - addLiquidityVolume\n        - addLiquidityCount\n        - withdrawAssetVolume\n        - withdrawRuneVolume\n        - impermanentLossProtectionPaid\n        - withdrawVolume\n        - withdrawCount\n        - net\n        - runePriceUSD\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of bucket in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of bucket in unix timestamp\n        addAssetLiquidityVolume:\n          type: string\n          description: |\n            Int64(e8), total assets deposited during the time interval.\n            Denoted in Rune using the price at deposit time.\n        addRuneLiquidityVolume:\n          type: string\n          description: |\n            Int64(e8), total Rune deposited during the time interval.\n        addLiquidityVolume:\n          type: string\n          description: |\n            Int64(e8), total of rune and asset deposits.\n            Denoted in Rune (using the price at deposit time).\n        addLiquidityCount:\n          type: string\n          description: |\n            Int64, number of deposits during the time interval.\n        withdrawAssetVolume:\n          type: string\n          description: |\n            Int64(e8), total assets withdrawn during the time interval.\n            Denoted in Rune using the price at withdraw time.\n        withdrawRuneVolume:\n          type: string\n          description: |\n            Int64(e8), total Rune withdrawn during the time interval.\n        impermanentLossProtectionPaid:\n          type: string\n          description: |\n            Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss\n            protection.\n        withdrawVolume:\n          type: string\n          description: |\n            Int64(e8), total of rune and asset withdrawals.\n            Denoted in Rune (using the price at withdraw time).\n        withdrawCount:\n          type: string\n          description: |\n            Int64, number of withdraw during the time interval.\n        net:\n          type: string\n          description: |\n            Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval\n        runePriceUSD:\n          type: string\n          description: |\n            Float, the price of Rune based on the deepest USD pool at the end of the interval.\n\n    TVLHistory:\n      type: object\n      required:\n        - meta\n        - intervals\n      properties:\n        meta:\n          $ref: '#/components/schemas/TVLHistoryItem'\n        intervals:\n          $ref: '#/components/schemas/TVLHistoryIntervals'\n    TVLHistoryIntervals:\n      type: array\n      items:\n        $ref: '#/components/schemas/TVLHistoryItem'\n    TVLHistoryItem:\n      type: object\n      required:\n        - startTime\n        - endTime\n        - totalValuePooled\n        - runePriceUSD\n      properties:\n        startTime:\n          type: string\n          description: Int64, The beginning time of bucket in unix timestamp\n        endTime:\n          type: string\n          description: Int64, The end time of bucket in unix timestamp\n        totalValuePooled:\n          type: string\n          description: |\n            Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at\n            the end of the interval.\n            Note: this is twice the aggregate Rune depth of all pools.\n        totalValueBonded:\n          type: string\n          description: |\n            Int64(e8), the total amount of bonds (both active and standby) at the end of\n            the interval\n        totalValueLocked:\n          type: string\n          description: |\n            Int64(e8), total value locked in the chain (in rune)\n            This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity\n            pools and bonds of the nodes.\n        runePriceUSD:\n          type: string\n          description: |\n            Float, the price of Rune based on the deepest USD pool at the end of the interval.\n\n    Nodes:\n      type: array\n      items:\n        $ref: '#/components/schemas/Node'\n    Node:\n      type: object\n      required:\n        - nodeAddress\n        - secp256k1\n        - ed25519\n      properties:\n        nodeAddress:\n          type: string\n          description: node thorchain address\n          example: thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g\n        secp256k1:\n          type: string\n          description: secp256k1 public key\n          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr\n        ed25519:\n          type: string\n          description: ed25519 public key\n          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr\n    Network:\n      type: object\n      required:\n        - bondMetrics\n        - blockRewards\n        - activeBonds\n        - standbyBonds\n        - activeNodeCount\n        - standbyNodeCount\n        - totalPooledRune\n        - totalReserve\n        - nextChurnHeight\n        - poolActivationCountdown\n        - poolShareFactor\n        - bondingAPY\n        - liquidityAPY\n      properties:\n        bondMetrics:\n          $ref: '#/components/schemas/BondMetrics'\n        blockRewards:\n          $ref: '#/components/schemas/BlockRewards'\n        activeBonds:\n          type: array\n          items:\n            type: string\n          description: |\n            Array of rune amounts (e8) bonded by each active node.\n        standbyBonds:\n          type: array\n          items:\n            type: string\n          description: |\n            Array of rune amounts (e8) bonded by each standby node.\n        activeNodeCount:\n          type: string\n          description: Int64, Number of active nodes\n        standbyNodeCount:\n          type: string\n          description: |\n            Int64, Number of standby nodes, some of them might become active at the next churn.\n        totalPooledRune:\n          type: string\n          description: |\n            Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in\n            every pool (by definition), the total amount pooled is totalPooledRune*2.\n        totalReserve:\n          type: string\n          description: Int64(e8), Current size of the Reserve.\n        nextChurnHeight:\n          type: string\n          description: Int64, height (block number) of the next churn.\n        poolActivationCountdown:\n          type: string\n          description: Int64, the remaining time of pool activation (in blocks)\n        poolShareFactor:\n          type: string\n          description: |\n            Float [0..1], the ratio which is used to split earnings between liquidity provider and\n            nodes.\n            LPIncome = rewards * poolShareFactor ;\n            BondIncome :=  rewards * (1 - poolShareFactor)\n        bondingAPY:\n          type: string\n          description: |\n            Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current\n            reserve size, emmission curve, blocks per year and pool share factor =\n            (WeeklyBondIncome/BondAmount + 1)^52 - 1\n        liquidityAPY:\n          type: string\n          description: |\n            Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based\n            on the current reserve size, emmission curve, blocks per year and pool share factor =\n            (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1\n    BondMetrics:\n      type: object\n      required:\n        - totalActiveBond\n        - averageActiveBond\n        - medianActiveBond\n        - minimumActiveBond\n        - maximumActiveBond\n        - totalStandbyBond\n        - averageStandbyBond\n        - medianStandbyBond\n        - minimumStandbyBond\n        - maximumStandbyBond\n      properties:\n        totalActiveBond:\n          type: string\n          description: Int64(e8), Total bond of active nodes\n        averageActiveBond:\n          type: string\n          # TODO(acsaba): make this float\n          description: Int64(e8), Average bond of active nodes\n        medianActiveBond:\n          type: string\n          description: Int64(e8), Median bond of active nodes\n        minimumActiveBond:\n          type: string\n          description: Int64(e8), Minumum bond of active nodes\n        maximumActiveBond:\n          type: string\n          description: Int64(e8), Maxinum bond of active nodes\n        totalStandbyBond:\n          type: string\n          description: Int64(e8), Total bond of standby nodes\n        averageStandbyBond:\n          type: string\n          # TODO(acsaba): make this float\n          description: Int64(e8), Average bond of standby nodes\n        medianStandbyBond:\n          type: string\n          description: Int64(e8), Median bond of standby nodes\n        minimumStandbyBond:\n          type: string\n          description: Int64(e8), Minumum bond of standby nodes\n        maximumStandbyBond:\n          type: string\n          description: Int64(e8), Maximum bond of standby nodes\n    BlockRewards:\n      type: object\n      required:\n        - blockReward\n        - bondReward\n        - poolReward\n      properties:\n        blockReward:\n          type: string\n          # TODO(acsaba): add description\n        bondReward:\n          type: string\n          # TODO(acsaba): add description\n        poolReward:\n          type: string\n          # TODO(acsaba): add description.\n    Action:\n      type: object\n      description: action details among with related transactions\n      required:\n        - pools\n        - type\n        - status\n        - in\n        - out\n        - date\n        - height\n        - metadata\n      properties:\n        pools:\n          type: array\n          description: Pools involved in the action\n          items:\n            type: string\n        type:\n          type: string\n          description: Type of action\n          enum: [swap, addLiquidity, withdraw, donate, refund, switch]\n        status:\n          type: string\n          description: |\n            Indicates if the action is completed or if related outbound transactions are still\n            pending.\n          enum: [success, pending]\n        in:\n          type: array\n          description: Inbound transactions related to the action\n          items:\n            $ref: '#/components/schemas/Transaction'\n        out:\n          type: array\n          description: Outbound transactions related to the action\n          items:\n            $ref: '#/components/schemas/Transaction'\n        date:\n          type: string\n          description: Int64, nano timestamp of the block at which the action was registered\n        height:\n          type: string\n          description: Int64, height of the block at which the action was registered\n        metadata:\n          description: Metadata associated with the action\n          $ref: '#/components/schemas/Metadata'\n    Transaction:\n      type: object\n      description: Transaction data\n      required:\n        - txID\n        - address\n        - coins\n      properties:\n        txID:\n          type: string\n          description: |\n            Transaction id hash. Some transactions (such as outbound transactions made in the\n            native asset) may have a zero value.\n        address:\n          type: string\n          description: Sender address\n        coins:\n          $ref: '#/components/schemas/Coins'\n          description: Coins sent in the transaction\n    Coins:\n      type: array\n      items:\n        $ref: '#/components/schemas/Coin'\n    Coin:\n      type: object\n      description: Represents a digital currency amount\n      required:\n        - asset\n        - amount\n      properties:\n        asset:\n          type: string\n          description: Asset in CHAIN.SYMBOL format\n        amount:\n          type: string\n          description: Int64(e8), asset Amount.\n    Metadata:\n      type: object\n      properties:\n        swap:\n          $ref: '#/components/schemas/SwapMetadata'\n        addLiquidity:\n          $ref: '#/components/schemas/AddLiquidityMetadata'\n        withdraw:\n          $ref: '#/components/schemas/WithdrawMetadata'\n        refund:\n          $ref: '#/components/schemas/RefundMetadata'\n    SwapMetadata:\n      type: object\n      required:\n        - networkFees\n        - liquidityFee\n        - swapSlip\n        - swapTarget\n        - affiliateFee\n        - affiliateAddress\n      properties:\n        networkFees:\n          $ref: '#/components/schemas/NetworkFees'\n        liquidityFee:\n          type: string\n          description: Int64(e8), RUNE amount charged as swap liquidity fee\n        swapSlip:\n          type: string\n          description: Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage\n        swapTarget:\n          type: string\n          description: Int64(e8), minimum output amount specified for the swap\n        affiliateFee:\n          type: string\n          description:  Int64 (Basis points, 0-1000, where 1000=10%)\n        affiliateAddress:\n          type: string\n          description: Affiliate fee address of the swap, empty if fee swap\n    AddLiquidityMetadata:\n      type: object\n      required:\n        - liquidityUnits\n      properties:\n        liquidityUnits:\n          type: string\n          description: |\n            Int64, amount of liquidity units assigned to the member as result of the liquidity\n            deposit\n    WithdrawMetadata:\n      type: object\n      required:\n        - liquidityUnits\n        - asymmetry\n        - basisPoints\n        - networkFees\n        - impermanentLossProtection\n      properties:\n        liquidityUnits:\n          type: string\n          description: |\n            Int64, amount of liquidity units removed from the member as result of the withdrawal\n        asymmetry:\n          type: string\n          description: |\n            Decimal (-1.0 \u003c=\u003e 1.0), indicates how assymetrical the withdrawal was. 0 means\n            totally symetrical\n        basisPoints:\n          type: string\n          description: |\n            Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership\n            withdrawn\n        networkFees:\n          $ref: '#/components/schemas/NetworkFees'\n        impermanentLossProtection:\n          type: string\n          description: Int64, additional Rune payed out because of impermanent loss protection\n    RefundMetadata:\n      type: object\n      required:\n        - networkFees\n        - reason\n      properties:\n        networkFees:\n          $ref: '#/components/schemas/NetworkFees'\n        reason:\n          type: string\n          description: Reason for the refund\n    NetworkFees:\n      type: array\n      description: |\n        List of network fees associated to an action. One network fee is charged for each\n        outbound transaction\n      items:\n        $ref: '#/components/schemas/Coin'\n    ReverseTHORNames:\n      type: array\n      items:\n        type: string\n        description: THORName name\n        example: myname\n    THORNameDetails:\n      type: object\n      required:\n        - owner\n        - expire\n        - entries\n      properties:\n        owner:\n          type: string\n          description: owner's THOR address\n          example: thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g\n        expire:\n          type: string\n          description: Int64, THORChain block height in which THORName expires\n        entries:\n          type: array\n          items:\n              $ref: '#/components/schemas/THORNameEntry'\n          description: List details of all chains and their addresses for a given THORName\n    THORNameEntry:\n      type: object\n      required:\n        - chain\n        - address\n      properties:\n        chain:\n          type: string\n          description: blockchain\n        address:\n          type: string\n          description: address on blockchain\n    Members:\n      type: array\n      items:\n        type: string\n        description: Member address\n        example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5\n    MemberDetails:\n      type: object\n      required:\n        - pools\n      properties:\n        pools:\n          type: array\n          items:\n              $ref: '#/components/schemas/MemberPool'\n          description: List details of all the liquidity providers identified with the given address\n    MemberPool:\n      type: object\n      required:\n        - pool\n        - runeAddress\n        - assetAddress\n        - liquidityUnits\n        - runeAdded\n        - assetAdded\n        - runePending\n        - assetPending\n        - runeWithdrawn\n        - assetWithdrawn\n        - dateFirstAdded\n        - dateLastAdded\n      properties:\n        pool:\n          type: string\n          description: Pool rest of the data refers to\n        runeAddress:\n          type: string\n          description: Rune address used by the member\n        assetAddress:\n          type: string\n          description: asset address used by the member\n        liquidityUnits:\n          type: string\n          description: Int64, pool liquidity units that belong the the member\n        runeAdded:\n          type: string\n          description: Int64(e8), total Rune added to the pool by member\n        assetAdded:\n          type: string\n          description: Int64(e8), total asset added to the pool by member\n        runePending:\n          type: string\n          description: |\n            Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives\n        assetPending:\n          type: string\n          description: |\n            Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives\n        runeWithdrawn:\n          type: string\n          description: Int64(e8), total Rune withdrawn from the pool by member\n        assetWithdrawn:\n          type: string\n          description: Int64(e8), total asset withdrawn from the pool by member\n        dateFirstAdded:\n          type: string\n          description: Int64, Unix timestamp for the first time member deposited into the pool\n        dateLastAdded:\n          type: string\n          description: Int64, Unix timestamp for the last time member deposited into the pool\n\n    StatsData:\n      type: object\n      required:\n        - runeDepth\n        - switchedRune\n        - runePriceUSD\n        - swapVolume\n        - swapCount24h\n        - swapCount30d\n        - swapCount\n        - toAssetCount\n        - toRuneCount\n        - synthMintCount\n        - synthBurnCount\n        - dailyActiveUsers\n        - monthlyActiveUsers\n        - uniqueSwapperCount\n        - addLiquidityVolume\n        - withdrawVolume\n        - impermanentLossProtectionPaid\n        - addLiquidityCount\n        - withdrawCount\n      properties:\n        runeDepth:\n          type: string\n          description: Int64(e8), current total Rune in the pools.\n        switchedRune:\n          type: string\n          description: Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.\n        runePriceUSD:\n          type: string\n          description: Float, the price of Rune based on the deepest USD pool.\n        swapVolume:\n          type: string\n          description: |\n            Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.\n        swapCount24h:\n          type: string\n          description: Int64(e8), number of swaps (including synths) in the last 24h.\n        swapCount30d:\n          type: string\n          description: Int64, number of swaps (including synths) in the last 30d.\n        swapCount:\n          type: string\n          description: Int64, number of swaps (including synths) since beginning.\n        toAssetCount:\n          type: string\n          description: Int64, number of swaps from Rune to Asset since beginning.\n        toRuneCount:\n          type: string\n          description: Int64, number of swaps from Asset to Rune since beginning.\n        synthMintCount:\n          type: string\n          description: Int64, number of swaps from Rune to Synth since beginning.\n        synthBurnCount:\n          type: string\n          description: Int64, number of swaps from Synth to Rune since beginning.\n        dailyActiveUsers:\n          type: string\n          description: Deprecated, it's always 0.\n        monthlyActiveUsers:\n          type: string\n          description: Deprecated, it's always 0.\n        uniqueSwapperCount:\n          type: string\n          description: Deprecated, it's always 0.\n        addLiquidityVolume:\n          type: string\n          description: |\n            Int64(e8), total of deposits since beginning.\n        withdrawVolume:\n          type: string\n          description: |\n            Int64(e8), total of withdraws since beginning.\n        impermanentLossProtectionPaid:\n          type: string\n          description: |\n            Int64(e8), impermanent loss protection paid out.\n        addLiquidityCount:\n          type: string\n          description: Int64, number of deposits since beginning.\n        withdrawCount:\n          type: string\n          description: Int64, number of withdraws since beginning.\n\n    InboundAddresses:\n      type: array\n      items:\n        $ref: '#/components/schemas/InboundAddressesItem'\n    InboundAddressesItem:\n      type: object\n      required:\n        - chain\n        - pub_key\n        - address\n        - halted\n      properties:\n        chain:\n          type: string\n          example: \"BTC\"\n        pub_key:\n          type: string\n          example: \"tthorpub1addwnpepqd9nqqmgay6mju0yq72ptjucmk9atawtev4v4n6wkee5y26q80eccg0xk37\"\n        address:\n          type: string\n          example: \"bcrt1q257g60tcxvu4dvflpszgkwq34d5vw6pg726gf3\"\n        router:\n          type: string\n          example: \"0x9d496De78837f5a2bA64Cb40E62c19FBcB67f55a\"\n        halted:\n          type: boolean\n          description: indicate whether this chain has halted\n          example: false\n        gas_rate:\n          type: string\n          example: \"56250\"\n\n    Constants:\n      type: object\n      required:\n        - int_64_values\n        - bool_values\n        - string_values\n      properties:\n        int_64_values:\n          $ref: '#/components/schemas/Int64Constants'\n        bool_values:\n          $ref: '#/components/schemas/BoolConstants'\n        string_values:\n          $ref: '#/components/schemas/StringConstants'\n\n    Int64Constants:\n      type: object\n      required:\n        - AsgardSize\n        - BadValidatorRate\n        - BadValidatorRedline\n        - BlocksPerYear\n        - ChurnInterval\n        - ChurnRetryInterval\n        - DesiredValidatorSet\n        - DoubleSignMaxAge\n        - EmissionCurve\n        - FailKeygenSlashPoints\n        - FailKeysignSlashPoints\n        - FullImpLossProtectionBlocks\n        - FundMigrationInterval\n        - IncentiveCurve\n        - JailTimeKeygen\n        - JailTimeKeysign\n        - LackOfObservationPenalty\n        - LiquidityLockUpBlocks\n        - MaxAvailablePools\n        - MaxSwapsPerBlock\n        - MinRunePoolDepth\n        - MinSlashPointsForBadValidator\n        - MinSwapsPerBlock\n        - MinimumBondInRune\n        - MinimumNodesForBFT\n        - MinimumNodesForYggdrasil\n        - NativeTransactionFee\n        - ObservationDelayFlexibility\n        - ObserveSlashPoints\n        - OldValidatorRate\n        - OutboundTransactionFee\n        - PoolCycle\n        - SigningTransactionPeriod\n        - VirtualMultSynths\n        - YggFundLimit\n      properties:\n        AsgardSize:\n          type: integer\n          format: int64\n          example: 30\n        BadValidatorRate:\n          type: integer\n          format: int64\n          example: 60\n        BadValidatorRedline:\n          type: integer\n          example: 3\n        BlocksPerYear:\n          type: integer\n          format: int64\n          example: 6311390\n        ChurnInterval:\n          type: integer\n          format: int64\n          example: 60\n        ChurnRetryInterval:\n          type: integer\n          format: int64\n          example: 30\n        DesiredValidatorSet:\n          type: integer\n          format: int64\n          example: 12\n        DoubleSignMaxAge:\n          type: integer\n          format: int64\n          example: 24\n        EmissionCurve:\n          type: integer\n          format: int64\n          example: 6\n        FailKeygenSlashPoints:\n          type: integer\n          format: int64\n          example: 720\n        FailKeysignSlashPoints:\n          type: integer\n          format: int64\n          example: 2\n        FullImpLossProtectionBlocks:\n          type: integer\n          format: int64\n          example: 1440000\n        FundMigrationInterval:\n          type: integer\n          format: int64\n          example: 60\n        IncentiveCurve:\n          type: integer\n          format: int64\n          example: 100\n        JailTimeKeygen:\n          type: integer\n          format: int64\n          example: 10\n        JailTimeKeysign:\n          type: integer\n          format: int64\n          example: 10\n        LackOfObservationPenalty:\n          type: integer\n          format: int64\n          example: 2\n        LiquidityLockUpBlocks:\n          type: integer\n          format: int64\n          example: 0\n        MaxAvailablePools:\n          type: integer\n          format: int64\n          example: 10\n        MaxSwapsPerBlock:\n          type: integer\n          format: int64\n          example: 10\n        MinRunePoolDepth:\n          type: integer\n          format: int64\n          example: 10\n        MinSlashPointsForBadValidator:\n          type: integer\n          format: int64\n          example: 10\n        MinSwapsPerBlock:\n          type: integer\n          format: int64\n          example: 10\n        MinimumBondInRune:\n          type: integer\n          format: int64\n          example: 100000000\n        MinimumNodesForBFT:\n          type: integer\n          format: int64\n          example: 4\n        MinimumNodesForYggdrasil:\n          type: integer\n          format: int64\n          example: 6\n        NativeTransactionFee:\n          type: integer\n          format: int64\n          example: 10000000\n        NewPoolCycle:\n          type: integer\n          format: int64\n          example: 51840\n        ObservationDelayFlexibility:\n          type: integer\n          format: int64\n          example: 5\n        ObserveSlashPoints:\n          type: integer\n          format: int64\n          example: 1\n        OldValidatorRate:\n          type: integer\n          format: int64\n          example: 60\n        OutboundTransactionFee:\n          type: integer\n          format: int64\n          example: 100000000\n        PoolCycle:\n          type: integer\n          format: int64\n          example: 43200\n        SigningTransactionPeriod:\n          type: integer\n          format: int64\n          example: 300\n        VirtualMultSynths:\n          type: integer\n          format: int64\n          example: 2\n        YggFundLimit:\n          type: integer\n          format: int64\n          example: 5\n    BoolConstants:\n      type: object\n      required:\n        - StrictBondLiquidityRatio\n      properties:\n         StrictBondLiquidityRatio:\n          type: boolean\n          example: false\n    StringConstants:\n      type: object\n      required:\n        - DefaultPoolStatus\n      properties:\n         DefaultPoolStatus:\n          type: string\n          example: \"Enabled\"\n\n    Lastblock:\n      type: array\n      items:\n        $ref: '#/components/schemas/LastblockItem'\n    LastblockItem:\n      type: object\n      required:\n        - chain\n        - last_observed_in\n        - last_signed_out\n        - thorchain\n      properties:\n        chain:\n          type: string\n          example: \"BNB\"\n        last_observed_in:\n          type: integer\n          format: int64\n          example: 1590\n        last_signed_out:\n          type: integer\n          format: int64\n          example: 109\n        thorchain:\n          type: integer\n          format: int64\n          example: 1548\n\n    Queue:\n      type: object\n      required:\n        - swap\n        - outbound\n        - internal\n      properties:\n        swap:\n          type: integer\n          example: 0\n        outbound:\n          type: integer\n          example: 0\n        internal:\n          type: integer\n          example: 0\n\n    ProxiedNodes:\n      type: array\n      items:\n        $ref: '#/components/schemas/ProxiedNode'\n\n    ProxiedNode:\n      type: object\n      required:\n        - node_address\n        - status\n        - pub_key_set\n        - validator_cons_pub_key\n        - bond\n        - active_block_height\n        - bond_address\n        - status_since\n        - signer_membership\n        - requested_to_leave\n        - forced_to_leave\n        - leave_height\n        - ip_address\n        - version\n        - slash_points\n        - jail\n        - current_award\n        - observe_chains\n        - preflight_status\n      properties:\n        node_address:\n          type: string\n          example: \"tthorabc1\"\n        status:\n          type: string\n          example: \"Active\"\n        pub_key_set:\n          type: object\n          required:\n            - secp256k1\n            - ed25519\n          properties:\n            secp256k1:\n              type: string\n              example: \"tthorpub1xyz1\"\n            ed25519:\n              type: string\n              example: \"tthorpub1xyz2\"\n        validator_cons_pub_key:\n          type: string\n          example: \"tthorabc2\"\n        bond:\n          type: string\n          example: \"123456789\"\n        active_block_height:\n          type: integer\n          example: 123456\n        bond_address:\n          type: string\n          example: \"tthorabc3\"\n        status_since:\n          type: integer\n          example: 100000\n        signer_membership:\n          type: array\n          items:\n            type: string\n        requested_to_leave:\n          type: boolean\n        forced_to_leave:\n          type: boolean\n        leave_height:\n          type: integer\n          example: 0\n        ip_address:\n          type: string\n          example: \"10.20.30.40\"\n        version:\n          type: string\n          example: \"0.35.0\"\n        slash_points:\n          type: integer\n          example: 42\n        jail:\n          type: object\n          properties:\n            node_address:\n              type: string\n              example: \"tthorabc4\"\n        current_award:\n          type: string\n          example: \"123456\"\n        observe_chains:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObservedChain'\n        preflight_status:\n          $ref: '#/components/schemas/PreflightStatus'\n\n    ObservedChain:\n      type: object\n      required:\n        - chain\n        - height\n      properties:\n        chain:\n          type: string\n          example: \"BTC\"\n        height:\n          type: integer\n          example: 2000000\n\n    PreflightStatus:\n      type: object\n      required:\n        - status\n        - reason\n        - code\n      properties:\n        status:\n          type: string\n          example: \"Ready\"\n        reason:\n          type: string\n          example: \"OK\"\n        code:\n          type: integer\n          example: 0\n\n    Balance:\n      type: object\n      required:\n        - coins\n      properties:\n        coins:\n          type: coins\n          $ref: '#/components/schemas/Coins'\n",
			"canonicalURL": "/gitlab.com/thorchain/midgard@26535dd5e250e660ed395ec64ea8c444a4280034/-/blob/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://gitlab.com/thorchain/midgard/blob/26535dd5e250e660ed395ec64ea8c444a4280034/openapi/openapi.yaml",
					"serviceKind": "GITLAB"
				}
			]
		}
	}
}