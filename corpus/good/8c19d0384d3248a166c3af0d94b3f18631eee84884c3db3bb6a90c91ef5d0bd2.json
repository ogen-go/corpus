{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/distribworks/dkron"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "website/static/openapi/openapi.yaml",
			"byteSize": 16649,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: Dkron REST API\n  description: |\n    You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.\n\n    Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.\n\n    Default API responses are unformatted JSON add the `pretty=true` param to format the response.\n  version: 1-oas3\nservers:\n- url: http://localhost:8080/v1\npaths:\n  /:\n    get:\n      tags:\n      - default\n      description: |\n        Gets `Status` object.\n      operationId: status\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/status'\n  /jobs:\n    get:\n      tags:\n      - jobs\n      description: |\n        List jobs.\n      operationId: getJobs\n      parameters:\n      - name: metadata\n        in: query\n        description: Filter jobs by metadata\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n      - name: _sort\n        in: query\n        description: Sorting field\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: _order\n        in: query\n        description: Sort order (ASC/DESC)\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: q\n        in: query\n        description: Filter query text\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: _start\n        in: query\n        description: Start index\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n      - name: _end\n        in: query\n        description: End index\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: integer\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/job'\n    post:\n      tags:\n      - jobs\n      description: |\n        Create or updates a new job.\n      operationId: createOrUpdateJob\n      parameters:\n      - name: runoncreate\n        in: query\n        description: If present, regardless of any value, causes the job to be run immediately after being succesfully created or updated.\n        required: false\n        allowEmptyValue: true\n        style: form\n        explode: true\n        schema:\n          type: boolean\n      requestBody:\n        description: Updated job object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/job'\n        required: true\n      responses:\n        \"201\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job'\n  /jobs/{job_name}:\n    get:\n      tags:\n      - jobs\n      description: |\n        Show a job.\n      operationId: showJobByName\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that needs to be fetched.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job'\n    post:\n      tags:\n      - jobs\n      description: |\n        Executes a job.\n      operationId: runJob\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that needs to be run.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"202\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job'\n    delete:\n      tags:\n      - jobs\n      description: |\n        Delete a job.\n      operationId: deleteJob\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that needs to be deleted.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job'\n  /jobs/{job_name}/toggle:\n    post:\n      tags:\n      - jobs\n      description: |\n        Toggle a job.\n      operationId: toggleJob\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that needs to be toggled.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job'\n  /restore:\n    post:\n      tags:\n      - jobs\n      description: |\n        Restore jobs from json file.\n      operationId: restore\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/restore_body'\n        required: true\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/restore'\n  /members:\n    get:\n      tags:\n      - members\n      description: |\n        List members.\n      operationId: getMember\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/member'\n  /leader:\n    get:\n      tags:\n      - default\n      description: |\n        List leader of cluster.\n      operationId: getLeader\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n  /isleader:\n    get:\n      tags:\n      - default\n      description: |\n        Check if node is a leader or follower.\n      operationId: getIsLeader\n      responses:\n        \"200\":\n          description: Node is a leader\n        \"404\":\n          description: Node is a follower\n  /leave:\n    post:\n      tags:\n      - default\n      description: |\n        Force the node to leave the cluster.\n      operationId: leave\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/member'\n  /jobs/{job_name}/executions:\n    get:\n      tags:\n      - executions\n      description: |\n        List executions.\n      operationId: listExecutionsByJob\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that owns the executions to be fetched.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/execution'\n  /jobs/{job_name}/executions/{execution}:\n    get:\n      tags:\n      - executions\n      description: |\n        Show execution.\n      operationId: showExecutionByID\n      parameters:\n      - name: job_name\n        in: path\n        description: The job that owns the execution to be fetched.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: execution\n        in: path\n        description: The executions to be fetched.\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/execution'\n  /busy:\n    get:\n      tags:\n      - default\n      description: |\n        Returns the running executions.\n      operationId: busy\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/execution'\ncomponents:\n  schemas:\n    status:\n      type: object\n      properties:\n        agent:\n          type: object\n          additionalProperties:\n            type: object\n          description: Node basic details\n          readOnly: true\n        serf:\n          type: object\n          additionalProperties:\n            type: object\n          description: Serf status\n          readOnly: true\n        tags:\n          type: object\n          additionalProperties:\n            type: string\n          description: Tags asociated with this node\n          readOnly: true\n      description: Status represents details about the node.\n      readOnly: true\n    job:\n      required:\n      - name\n      - schedule\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name for the job. Use only lower case letters (unicode), digits, underscore and dash.\n          readOnly: false\n          example: job1\n        displayname:\n          type: string\n          description: Nice name for the job. Optional.\n          readOnly: false\n        schedule:\n          type: string\n          description: Cron expression for the job.\n          readOnly: false\n          example: '@every 10s'\n        timezone:\n          type: string\n          description: Timezone where the job will be executed. By default and when field is set to empty string, the job will run in local time.\n          readOnly: false\n          example: Europe/Berlin\n        owner:\n          type: string\n          description: Owner of the job\n          readOnly: false\n          example: Platform Team\n        owner_email:\n          type: string\n          description: Email of the owner\n          readOnly: false\n          example: platform@example.com\n        success_count:\n          type: integer\n          description: Number of successful executions\n          readOnly: true\n        error_count:\n          type: integer\n          description: Number of failed executions\n          readOnly: true\n        last_success:\n          type: string\n          description: Last time this job executed successfully\n          format: date-time\n          readOnly: true\n        last_error:\n          type: string\n          description: Last time this job failed\n          format: date-time\n          readOnly: true\n        disabled:\n          type: boolean\n          description: Disabled state of the job\n          readOnly: false\n        tags:\n          type: object\n          additionalProperties:\n            type: string\n          description: Target nodes tags of this job\n          readOnly: false\n          example:\n            server: \"true\"\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n          description: Extra metadata tags for this job\n          readOnly: false\n          example:\n            office: Barcelona\n        retries:\n          type: integer\n          description: Number of times to retry a failed job execution\n          readOnly: false\n          example: 2\n        parent_job:\n          type: string\n          description: The name/id of the job that will trigger the execution of this job\n          readOnly: false\n          example: parent_job\n        dependent_jobs:\n          type: array\n          description: Array containing the jobs that depends on this one\n          readOnly: true\n          example:\n          - dependent_job\n          items:\n            type: string\n        processors:\n          $ref: '#/components/schemas/processors'\n        concurrency:\n          type: string\n          description: Concurrency policy for the job allow/forbid\n          readOnly: false\n          example: allow\n        executor:\n          type: string\n          description: Executor plugin used to run the job\n          readOnly: false\n          example: shell\n        executor_config:\n          type: object\n          additionalProperties:\n            type: string\n          description: Executor plugin parameters\n          example:\n            command: echo 'Hello from Dkron'\n        status:\n          type: string\n          description: Status of the job\n          readOnly: true\n          example: success\n      description: A Job represents a scheduled task to execute.\n    member:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Node name\n          example: dkron1\n        Addr:\n          type: string\n          description: IP Address\n          example: 192.168.1.137\n        Port:\n          type: integer\n          description: Port number\n          example: 8946\n        Tags:\n          type: object\n          additionalProperties:\n            type: string\n          description: Tags asociated with this node\n          example:\n            rpc_addr: 192.168.1.137:6868\n            server: \"true\"\n            version\": 1.0.0\n        Status:\n          type: integer\n          description: 'The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus'\n          example: 1\n        ProtocolMin:\n          type: integer\n          description: Serf protocol minimum version this node can understand or speak\n          example: 5\n        ProtocolMax:\n          type: integer\n          description: Serf protocol maximum version this node can understand or speak\n          example: 2\n        ProtocolCur:\n          type: integer\n          description: Serf protocol current version this node can understand or speak\n          example: 2\n        DelegateMin:\n          type: integer\n          description: Serf delegate protocol minimum version this node can understand or speak\n        DelegateMax:\n          type: integer\n          description: Serf delegate protocol maximum version this node can understand or speak\n          example: 5\n        DelegateCur:\n          type: integer\n          description: Serf delegate protocol current version this node can understand or speak\n          example: 4\n      description: A member represents a cluster member node.\n    execution:\n      type: object\n      properties:\n        job_name:\n          type: string\n          description: job name\n          example: job_1\n        started_at:\n          type: string\n          description: start time of the execution\n          format: date-time\n        finished_at:\n          type: string\n          description: when the execution finished running\n          format: date-time\n        success:\n          type: boolean\n          description: the execution run successfuly\n        output:\n          type: string\n          description: partial output of the command execution\n          example: Hello from Dkron\n        node_name:\n          type: string\n          description: name of the node that executed the command\n          example: dkron1\n      description: An execution represents a timed job run.\n    processors:\n      type: object\n      additionalProperties:\n        type: object\n        additionalProperties:\n          type: string\n      description: Processor plugins used to process executions results of this job\n      example:\n        files:\n          forward: true\n    restore:\n      type: string\n      description: Each job restore result.\n      example: success create job_1\n    restore_body:\n      required:\n      - file\n      type: object\n      properties:\n        file:\n          type: string\n          description: Json file that needs to be restored.\n          format: binary\n",
			"canonicalURL": "/github.com/distribworks/dkron@f051261f1fbbbe363750c22633444f6ecf528c61/-/blob/website/static/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/distribworks/dkron/blob/f051261f1fbbbe363750c22633444f6ecf528c61/website/static/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}