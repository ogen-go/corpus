{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/espoo-dev/espoo-dev"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "backend/swagger/v1/swagger.yaml",
			"byteSize": 11956,
			"content": "openapi: 3.0.1\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n  schemas:\n    Group:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        surveys:\n          type: array\n          items:\n            $ref: '#/components/schemas/Survey'\n        required_groups_ids:\n          type: array\n          items:\n            type: integer\n        position:\n          type: number\n        status:\n          type: string\n          example: 'Available, Completed, Doing, Blocked'\n    SimpleTrail:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        surveys_quantity:\n          type: number\n    Trail:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n    SimpleAnswersSurvey:\n      type: object\n      properties:\n        id:\n          type: number\n        user_id:\n          type: number\n        status:\n          type: string\n        questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Question'\n    AnswersSurvey:\n      type: object\n      properties:\n        id:\n          type: number\n        user_id:\n          type: number\n        status:\n          type: string\n        questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Question'\n    AnsweredQuestion:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        question_type:\n          $ref: '#/components/schemas/QuestionType'\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/Option'\n        answered_options:\n          type: array\n          items:\n            $ref: '#/components/schemas/Option'\n    AnswersSurveyWithAnswers:\n      type: object\n      properties:\n        id:\n          type: number\n        user_id:\n          type: number\n        status:\n          type: string\n        questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AnsweredQuestion'\n        answered_questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Question'\n        not_answered_questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Question'\n        current_question_index:\n          type: number\n    Role:\n      type: object\n      properties:\n        id:\n          type: number\n        role_type:\n          type: string\n    Option:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        correct:\n          type: boolean\n    QuestionType:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n    Question:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        question_type:\n          $ref: '#/components/schemas/QuestionType'\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/Option'\n        image_url:\n          type: string\n    Survey:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        description:\n          type: string\n        total_questions_quantity:\n          type: number\n        answered_questions_quantity:\n          type: number\n        answers_surveys:\n          type: array\n          items:\n            $ref: '#/components/schemas/AnswersSurveyWithAnswers'\n        current_answers_survey:\n          $ref: '#/components/schemas/AnswersSurveyWithAnswers'\n        questions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Question'\n        survey_subject_id:\n          type: number\n        icon_url:\n          type: string\n        image_url:\n          type: string\n    SimpleSurvey:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        description:\n          type: string\n        total_questions_quantity:\n          type: number\n        answered_question_quantity:\n          type: number\n    User:\n      type: object\n      properties:\n        id:\n          type: number\n        email:\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n        surveys:\n          type: array\n          items:\n            $ref: '#/components/schemas/SimpleSurvey'\n    SignInRequestBody:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/AuthData'\n    Answer:\n      type: object\n      properties:\n        id:\n          type: number\n        question_id:\n          type: number\n        answers_survey_id:\n          type: number\n        user_answer:\n          type: string\n        options:\n          type: array\n          items:\n            $ref: '#/components/schemas/Option'\n    CreateUserRequestBody:\n      type: object\n      properties:\n        email:\n          type: string\n        role_id:\n          type: number\n        password:\n          type: string\n    CreateAnswersSurveyRequestBody:\n      type: object\n      properties:\n        survey_id:\n          type: number\n    CreateAnswerRequestBody:\n      type: object\n      properties:\n        question_id:\n          type: number\n        answers_survey_id:\n          type: number\n        user_answer:\n          type: string\n        option_ids:\n          type: array\n          items:\n            type: number\n    AuthData:\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\nsecurity:\n  - ApiKeyAuth: []\ninfo:\n  title: Espoo dev\n  version: v1\npaths:\n  /users/sign_in:\n    post:\n      summary: Authorization\n      description: 'example data: email: admin@gmail.com, password:123456'\n      tags:\n        - Login\n      responses:\n        '200':\n          description: Successful operation - Login authorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SignInRequestBody'\n  /api/v1/users:\n    post:\n      summary: Create user\n      description: Creates users that will be able to login\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Successful operation - User created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequestBody'\n    get:\n      summary: List user\n      description: List users according to token\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: role_id\n          schema:\n            type: integer\n          description: Get users by role_id\n      responses:\n        '200':\n          description: Users available by token\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /api/v1/roles:\n    get:\n      summary: List all roles\n      description: Get available roles\n      tags:\n        - Roles\n      responses:\n        '200':\n          description: Available roles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n  /api/v1/surveys:\n    get:\n      summary: List all Surveys\n      description: Returns an array with all Surveys\n      tags:\n        - Surveys\n      responses:\n        '200':\n          description: Successful operation - Surveys returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Survey'\n  '/api/v1/surveys/{id}':\n    get:\n      summary: List a single Survey by ID\n      description: Returns a single Survey found by ID\n      tags:\n        - Surveys\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Successful operation - Survey with a given ID returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Survey'\n  /api/v1/answers_surveys:\n    post:\n      summary: Create Answers Survey\n      description: Successful operation - Create Answers Survey\n      tags:\n        - AnswerSurvey\n      responses:\n        '201':\n          description: Successful operation - AnswersSurvey created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnswersSurvey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAnswersSurveyRequestBody'\n  '/api/v1/answers_surveys/{id}':\n    get:\n      summary: Get Answers Survey by ID\n      description: 'With answered questions, unanswered questions and current_question_index'\n      tags:\n        - AnswerSurvey\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Successful operation - AnswersSurvey returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnswersSurveyWithAnswers'\n  /api/v1/answers:\n    post:\n      summary: Create Answers\n      description: Create Answers\n      tags:\n        - Answers\n      responses:\n        '200':\n          description: Successful operation - Answer created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Answer'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAnswerRequestBody'\n  /api/v1/trails:\n    get:\n      summary: List all Trails\n      description: Returns an array with all Trails\n      tags:\n        - Trails\n      responses:\n        '200':\n          description: Successful operation - Trails returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SimpleTrail'\n  '/api/v1/trails/{id}':\n    get:\n      summary: Get a single Trail by ID\n      description: Returns a single Trail found by ID\n      tags:\n        - Trails\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: Successful operation - Trail with a given ID returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trail'\n  /api/v1/seed_database:\n    get:\n      summary: Refreshing the database - This can only be produced in development mode\n      description: \u003e-\n        It will delete the existing database and create a simple new one for\n        easier testing of the api requests .\n      tags:\n        - Seeds\n      responses:\n        '200':\n          description: Successful operation in development mode.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\nservers:\n  - url: 'https://espoo-staging.herokuapp.com'\n  - url: 'http://localhost:3000'\n",
			"canonicalURL": "/github.com/espoo-dev/espoo-dev@c0754414687a4e3b69e7de439ecc935a5ee40b4d/-/blob/backend/swagger/v1/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/espoo-dev/espoo-dev/blob/c0754414687a4e3b69e7de439ecc935a5ee40b4d/backend/swagger/v1/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}