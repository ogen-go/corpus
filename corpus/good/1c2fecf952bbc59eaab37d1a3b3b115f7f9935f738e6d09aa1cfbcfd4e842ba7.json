{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/approveapi/approveapi-go"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 11903,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: dev@approveapi.com\n  description: The simple API to request a user's approval on anything via email + sms.\n  title: ApproveAPISwagger\n  version: 1.0.1\nservers:\n- url: https://approve.sh\npaths:\n  /prompt/{id}:\n    get:\n      description: Retrieve the prompt object with the given ID.\n      operationId: GetPrompt\n      parameters:\n      - description: The identifier for a pending or completed prompt. This is returned when you create a prompt.\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.\n        explode: true\n        in: query\n        name: long_poll\n        required: false\n        schema:\n          type: boolean\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Prompt'\n          description: OK\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: A prompt with this identifier could not be found\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid parameters\n      security:\n      - apiKey: []\n      summary: Retrieve a prompt\n      tags:\n      - approve\n  /prompt/{id}/status:\n    get:\n      description: Returns whether a prompt has been completed by the user. This request does not require authentication, and so can be used client-side without sharing API credentials.\n      operationId: GetPromptStatus\n      parameters:\n      - description: The prompt identifier.\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PromptStatus'\n          description: OK\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: A prompt with this identifier could not be found\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid parameters\n      summary: Check prompt status\n      tags:\n      - approve\n  /prompt:\n    post:\n      description: Creates a prompt and pushes it to the user (sends via email, sms, or other supported protocols).\n      operationId: CreatePrompt\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatePromptRequest'\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Prompt'\n          description: OK\n        504:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Polling timed out with no user response\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Missing or invalid API key in the username basic auth field\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Invalid parameters\n      security:\n      - apiKey: []\n      summary: Sending a prompt\n      tags:\n      - approve\ncomponents:\n  responses:\n    PromptNotFound:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: A prompt with this identifier could not be found\n    PollTimeout:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Polling timed out with no user response\n    Unauthorized:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Missing or invalid API key in the username basic auth field\n    BadRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Invalid parameters\n  schemas:\n    PromptInternalData:\n      additionalProperties:\n        type: string\n      type: object\n    Prompt:\n      example:\n        sent_at: 0.8008281904610115\n        request:\n          metadata:\n            browser: browser\n            operating_system: operating_system\n            location: location\n            time: time\n            ip_address: ip_address\n          long_poll: true\n          reject_text: reject_text\n          internal_data:\n            key: internal_data\n          approve_redirect_url: approve_redirect_url\n          reject_redirect_url: reject_redirect_url\n          idempotency_key: idempotency_key\n          approve_text: approve_text\n          body: body\n          title: title\n          expires_in: 1.4658129805029452\n          user: user\n        metadata:\n          browser: browser\n          operating_system: operating_system\n          location: location\n          time: time\n          ip_address: ip_address\n        is_expired: true\n        answer:\n          result: true\n          metadata:\n            slack_real_name: slack_real_name\n            browser: browser\n            operating_system: operating_system\n            ip_address: ip_address\n            slack_email: slack_email\n            slack_username: slack_username\n          time: 6.027456183070403\n        id: id\n      properties:\n        sent_at:\n          description: The unix timestamp when this prompt was sent.\n          type: number\n        answer:\n          $ref: '#/components/schemas/PromptAnswer'\n        is_expired:\n          description: Whether the prompt can still be answered.\n          type: boolean\n        request:\n          $ref: '#/components/schemas/CreatePromptRequest'\n        id:\n          description: A unique id for this prompt.\n          type: string\n        metadata:\n          $ref: '#/components/schemas/PromptMetadata'\n      required:\n      - id\n      - is_expired\n      - request\n      - sent_at\n      type: object\n    PromptMetadata:\n      example:\n        browser: browser\n        operating_system: operating_system\n        location: location\n        time: time\n        ip_address: ip_address\n      properties:\n        time:\n          description: The date/time of the action.\n          type: string\n        operating_system:\n          description: The operating system initiating the action, i.e. Mac OS X.\n          type: string\n        ip_address:\n          description: The IP address of the computer initiating the action.\n          type: string\n        location:\n          description: The physical location, like Oakland, CA, of the action.\n          type: string\n        browser:\n          description: The web browser initiating the action, i.e. Chrome.\n          type: string\n      type: object\n    CreatePromptRequest:\n      example:\n        metadata:\n          browser: browser\n          operating_system: operating_system\n          location: location\n          time: time\n          ip_address: ip_address\n        long_poll: true\n        reject_text: reject_text\n        internal_data:\n          key: internal_data\n        approve_redirect_url: approve_redirect_url\n        reject_redirect_url: reject_redirect_url\n        idempotency_key: idempotency_key\n        approve_text: approve_text\n        body: body\n        title: title\n        expires_in: 1.4658129805029452\n        user: user\n      properties:\n        body:\n          description: The body of the approval request to show the user.\n          type: string\n        idempotency_key:\n          description: Allows calling `create_prompt` multiple times idempotently, such that a prompt is sent at-most once. This key should contain sufficient randomness. Idempotent requests are stored for 24 hours. After that time, the same key will create a new request.\n          type: string\n        title:\n          description: The title of an approval request. Defaults to an empty string.\n          type: string\n        reject_text:\n          description: The reject action text. If not specified the reject button will NOT be rendered, and the user will only see an approve action button.\n          type: string\n        expires_in:\n          description: The number of seconds until this request can no longer be answered.\n          type: number\n        long_poll:\n          description: If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.\n          type: boolean\n        internal_data:\n          additionalProperties:\n            type: string\n          type: object\n        user:\n          description: The user to send the approval request to. Can be either an email address or a phone number.\n          type: string\n        approve_text:\n          description: The approve action text. Defaults to 'Approve'.\n          type: string\n        approve_redirect_url:\n          description: An HTTPS URL to redirect the user to if the prompt is approved. This URL is kept secret until the user is redirected to it.\n          type: string\n        reject_redirect_url:\n          description: An HTTPS URL to redirect the user to if the prompt is rejected. This URL is kept secret until the user is redirected to it.\n          type: string\n        metadata:\n          $ref: '#/components/schemas/PromptMetadata'\n      required:\n      - body\n      - user\n      type: object\n    Error:\n      properties:\n        error:\n          description: A human readable API error message.\n          type: string\n      required:\n      - error\n      type: object\n    PromptStatus:\n      example:\n        is_expired: true\n        is_answered: true\n      properties:\n        is_answered:\n          description: Whether the prompt has been answered or not.\n          type: boolean\n        is_expired:\n          description: Whether the prompt can still be answered.\n          type: boolean\n      required:\n      - is_answered\n      - is_expired\n      type: object\n    AnswerMetadata:\n      example:\n        slack_real_name: slack_real_name\n        browser: browser\n        operating_system: operating_system\n        ip_address: ip_address\n        slack_email: slack_email\n        slack_username: slack_username\n      properties:\n        slack_real_name:\n          type: string\n        operating_system:\n          type: string\n        slack_username:\n          type: string\n        ip_address:\n          type: string\n        slack_email:\n          type: string\n        browser:\n          type: string\n      type: object\n    PromptAnswer:\n      example:\n        result: true\n        metadata:\n          slack_real_name: slack_real_name\n          browser: browser\n          operating_system: operating_system\n          ip_address: ip_address\n          slack_email: slack_email\n          slack_username: slack_username\n        time: 6.027456183070403\n      properties:\n        time:\n          description: The unix timestamp when the user answered the prompt.\n          type: number\n        result:\n          description: The user's answer to whether or not they approve this prompt.\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/AnswerMetadata'\n      required:\n      - result\n      - time\n      type: object\n  securitySchemes:\n    apiKey:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/approveapi/approveapi-go@21e080223fe37d0180745e8501b97d073f1ab125/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/approveapi/approveapi-go/blob/21e080223fe37d0180745e8501b97d073f1ab125/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}