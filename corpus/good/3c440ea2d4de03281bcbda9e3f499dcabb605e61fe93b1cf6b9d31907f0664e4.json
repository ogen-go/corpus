{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stichtingsem/technology-prototype"
		},
		"file": {
			"name": "events.v1.yaml",
			"size": 0,
			"path": "reference/events.v1.yaml",
			"byteSize": 5047,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://example.stichtingsem.org/api'\ninfo:\n  version: 1.0.0\n  title: Generic Event Stream API\n  description: |-\n    The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.\n\n    The Event API is the mechanism, in conjunction with the Webhook API, that enables this event based notification mechanism to function reliably.  It enables subscribers to request events from the provider, and paginate through to the last place that it received a message.\n\n    Notes:\n      - Pagination is essential - using start and limit semantics.\n      - Limits should be imposed on page size.\n      - Order should always be reverese chronological.\n      - Filtering is available by matching specific event type.\n      - Providers should ensure that this API is cacheable or able to be retrieved at minimal cost, as it may be accessed a lot by consumers who are 'catching up'\n      \n      \u003e Note:  We may need to provide an API that creates a 'dummy' event list of all entities to enable an initial synchronisation of all data (e.g. a brand new LA that wants to do an initial synchronisation with data from the SIS) - this may be simpler than providing a GET requests for entities in the SIS itseelf (e.g. get students).\n  contact:\n    email: clifton@infinitaslearning.com\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\ntags:\n  - name: events\n    description: Operations related to event retrieval\npaths:\n  /events:\n    get:\n      description: Allows a subscriber to retrieve a list of past events.\n      tags:\n        - events\n      operationId: listEvents\n      parameters:\n        - in: query\n          name: type\n          description: 'Filter by a specific type of event, e.g. la.usage - specific to the service implementing the API.'\n          schema:\n            type: string\n            example: la.usage\n        - in: query\n          name: start\n          description: 'Start point for pagination of results, defaults to 0,'\n          schema:\n            type: integer\n          examples:\n            default:\n              value: 0\n              summary: The start point for pagination\n        - in: query\n          name: limit\n          description: 'Limit of number of results returned by page, defaults to 20 with max 100.'\n          schema:\n            type: integer\n            maximum: 100\n          examples:\n            default:\n              value: 20\n              summary: The default value if none is provided\n            max:\n              value: 100\n              summary: The largest recommended page size\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/events'\n      summary: ''\ncomponents:\n  schemas:\n    events:\n      type: array\n      items:\n        $ref: '#/components/schemas/event'\n      x-tags:\n        - events\n      description: 'A list of events - reverse chronologically ordered, provided to enable subscribers to ''catch up'' on events they may have missed.'\n      title: ''\n    event:\n      type: object\n      x-tags:\n        - events\n      description: |-\n        An event is a notification that something of interest has happened within a service, that, based on authorised scopes, a subscriber may then process.  This enables systems to communicate with each other in a loosely coupled way, where the event creator has no direct connection to any of the subscribing systems.\n\n        Typically an event will contain a basic data object that indicates what the state of the object is at the point at which the event is raised, but this is optional.  In the case that no data object exists it is intended that the subscribing system would call back to the provided API to retrieve the information.\n\n        By calling back at a future point you avoid a number of distributed system related issues:\n\n        - Ordering doesn't matter, as when you call back you always get the latest version.  The biggest risk is you call back twice and get the same information twice - but you always have correct data.\n        - Security can be checked again at the point of request, so even in the unlikely scenario that a subscriber authorization changes between an event being emitted and the call back occurring, the subscriber can only ever get data they are authorized to retrieve.\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        type:\n          type: string\n          example: la.usage\n        created:\n          type: number\n          example: 1530291411\n        data:\n          type: object\n        url:\n          type: string\n          description: |\n            The URL that can be called to get information about the event.\n      required:\n        - id\n        - type\n        - url\n",
			"canonicalURL": "/github.com/stichtingsem/technology-prototype@3bf27b60f5566865821b0496df27c73dc3e3c5e2/-/blob/reference/events.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stichtingsem/technology-prototype/blob/3bf27b60f5566865821b0496df27c73dc3e3c5e2/reference/events.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}