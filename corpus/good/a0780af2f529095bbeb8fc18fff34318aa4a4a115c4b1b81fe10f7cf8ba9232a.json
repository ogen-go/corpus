{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/k4cg/matomat-service"
		},
		"file": {
			"name": "maas.yml",
			"size": 0,
			"path": "maas.yml",
			"byteSize": 25211,
			"content": "openapi: 3.0.0\ninfo:\n  title: MaaS\n  description: MaaS (Matomat as a Service) API definition\n  version: 0.5.2\nservers:\n  - url: https://maas.intern.k4cg.org/v0\n    description: The production server\n  - url: https://localhost:8443/v0\n    description: Local test setup\ntags:\n- name: auth\n  description: Authentication and authorization related operations\n- name: users\n  description: User management related operations\n- name: items\n  description: Item related operations\npaths:\n  /auth/login:\n    post:\n      tags:\n      - auth\n      summary: Logs a user in and returns an JWT token for authentication\n      description: Logs a user in and returns an JWT token for authentication. The passes along validitiyseconds determine how long the token should be available.\n      requestBody:\n        description: User information required for login\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                validityseconds:\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - username\n                - password\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuthSuccess'\n        400:\n          description: Invalid username/password supplied\n  /items:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: List all available items\n      description: Returns a map of item objects, with the item ID as key and the object as value\n      responses:\n        200:\n          description: List of items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Add a new item\n      description: Adds a new item to matomat. This can only be done by admins\n      requestBody:\n        description: Information required to create an item\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: The name of the item\n                  type: string\n                cost:\n                  description: The number of credits a single consumption of this Item requires (unit for credits is smallest unit in currency used)\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - name\n                - cost\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /items/stats:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Get consumption stats of all items\n      description: Get the matomat stats for all items\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ItemStats'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /items/{itemId}:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Get a certain Item\n      description: Get a certain Item\n      parameters:\n      - in: path\n        name: itemId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the Item that needs to be fetched\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Update Item\n      description: Update Item. This can only be done by admins\n      parameters:\n      - in: path\n        name: itemId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the Item that needs to be updated\n      requestBody:\n        description: Information required to update an item\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: The name of the item\n                  type: string\n                cost:\n                  description: The number of credits a single consumption of this Item requires (unit for credits is smallest unit in currency used)\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - name\n                - cost\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Delete Item\n      description: Delete the Item. This can only be done by admins. (Should only mark a Item as deleted to not loose reference for stats)\n      parameters:\n      - in: path\n        name: itemId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the Item that needs to be deleted\n      responses:\n        200:\n          description: Success. Returns the deleted item object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /items/{itemId}/consume:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Consumes a Item\n      description: Consumes a Item and subtracts the cost of the Item from the credit of the user. \n      parameters:\n      - in: path\n        name: itemId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the Item that needs to be consumed\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ItemStats'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /items/{itemId}/stats:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - items\n      summary: Get consumption stats\n      description: Get the matomat stats for a certain Item\n      parameters:\n      - in: path\n        name: itemId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the Item for which to fetch the stats\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ItemStats'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: List all users\n      description: List all users\n      responses:\n        200:\n          description: List of user objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Add a new user\n      description: Add a new user. Only admin users are allowed to do this. If \"admin\" is greater than 0, the new user will be created as admin user.\n      requestBody:\n        description: Information required to create an user\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: The name of the user\n                  type: string\n                password:\n                  type: string\n                passwordrepeat:\n                  type: string\n                admin:\n                  type: integer\n              required:\n                - name\n                - password\n                - passwordrepeat\n                - admin\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Get user by user ID\n      description: Get user by user ID. Returns a user object\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The user ID that needs to be fetched\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Delete user\n      description: Delete user. This can only be done by the logged in user (for self) or an admin\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user to be deleted\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/credits/add:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Add users credits\n      description: Add users credits. This can only be done by the logged in user or a admin.\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user for which the credits should be changed\n      requestBody:\n        description: Credits withdrawl information\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                credits:\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - credits\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/admin/set:\n    put:\n      security:\n        - jwtTokenAuth: []\n      tags:\n        - users\n      summary: Promote a user to admin\n      description: Promote a user to admin. This can only be done by other admin users.\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n            format: int32\n          required: true\n          description: The ID of the user to promote to admin\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: Logged in user is not allowed to promote given user to admin\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/admin/unset:\n    put:\n      security:\n        - jwtTokenAuth: []\n      tags:\n        - users\n      summary: Remove admin capabilities from an user\n      description: Remove admin capabilities from an user. This can only be done by other admin users.\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n            format: int32\n          required: true\n          description: The ID of the user to remove admin capabilities from\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        403:\n          description: Logged in user is not allowed to remove the admin capabilities from the given user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/credits/withdraw:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Widthdraw users credits\n      description: Widthdraw users credits. A user can only withdraw as many credits as she currently has, if more than available are attempted to withdraw, an error is returned and no withdrawl performed. This can only be done by the logged in user or a admin.\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user for which the credits should be changed\n      requestBody:\n        description: A - not negative - amount of credits\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                credits:\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - credits\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        412:\n          description: Not enough credits to withdraw desired amount\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/credits/transfer:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Transfer credits\n      description: Transfers credits from logged in user to given user\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user to transfer credits to\n      requestBody:\n        description: A - not negative - amount of credits to transfer\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                credits:\n                  type: integer\n                  format: int32\n                  minimum: 0\n              required:\n                - credits\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransferredCredits'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/stats:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Get matomat stats for user\n      description: Get the matomat stats for user. A user can only request the stats for herself\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user for which to fetch the stats\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStats'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/password:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Change password for currently logged in user.\n      description: Change password for currently logged in user. Must provide old and new passwords (twice) in order to be allowed to change it.\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user for which the password should be changed\n      requestBody:\n        description: The new password\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n                passwordnew:\n                  type: string\n                passwordrepeat:\n                  type: string\n              required:\n                - password\n                - passwordnew\n                - passwordrepeat\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}/resetpassword:\n    put:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - users\n      summary: Set password for user ID\n      description: Set password for user ID. This can only be done by a logged in admin for a different user than self.\n      parameters:\n      - in: path\n        name: userId\n        schema:\n          type: integer\n          format: int32\n        required: true\n        description: The ID of the user for which the password should be changed\n      requestBody:\n        description: The new password\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                passwordnew:\n                  type: string\n                passwordrepeat:\n                  type: string\n              required:\n                - passwordnew\n                - passwordrepeat\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /service/stats:\n    get:\n      security:\n      - jwtTokenAuth: []\n      tags:\n      - service\n      summary: Total service stats\n      description: Total service stats\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceStats'\n        default:\n          description: An error occured\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    jwtTokenAuth:            # faking JWT bearer authentication using api key type\n      type: apiKey\n      in: header\n      name: Authorization\n  schemas:\n    AuthSuccess:\n      type: object\n      properties:\n        token:\n          type: string\n        expires:\n          type: integer\n          format: int32\n        user:\n          $ref: '#/components/schemas/User'\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        username:\n          type: string\n        credits:\n          type: integer\n          format: int32\n        admin:\n          type: boolean\n    TransferredCredits:\n      description: The information on the sending user after the transaction, as well as the amount transferred\n      type: object\n      properties:\n        sender:\n          $ref: '#/components/schemas/User'\n        credits:\n          type: integer\n          format: int32\n    UserStats:\n      description: Consumption stats of a user\n      type: array\n      items:\n        $ref: '#/components/schemas/ItemStats'\n    Item:\n      description: Represenation of a Item, containing its name and cost (in credits)\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        cost:\n          type: integer\n          format: int32\n    ItemStats:\n      description: Stats on a certain item\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        cost:\n          type: integer\n          format: int32\n        consumed:\n          type: integer\n          format: int32\n    ServiceStats:\n      description: Stats on the service\n      type: object\n      properties:\n        items:\n          type: object\n          properties:\n            count:\n              type: integer\n              format: int32\n            cost:\n              type: object\n              properties:\n                avg:\n                  type: integer\n                  format: int32\n                min:\n                  type: integer\n                  format: int32\n                max:\n                  type: integer\n                  format: int32\n        users:\n          type: object\n          properties:\n            count:\n              type: integer\n              format: int32\n            credits:\n              type: object\n              properties:\n                sum:\n                  type: integer\n                  format: int32\n                avg:\n                  type: integer\n                  format: int32\n                min:\n                  type: integer\n                  format: int32\n                max:\n                  type: integer\n                  format: int32\n    Error:\n      description: Represenation of an error\n      type: object\n      properties:\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/k4cg/matomat-service@82228910045ae77f4545346e0cf7cda931a769f7/-/blob/maas.yml",
			"externalURLs": [
				{
					"url": "https://github.com/k4cg/matomat-service/blob/82228910045ae77f4545346e0cf7cda931a769f7/maas.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}