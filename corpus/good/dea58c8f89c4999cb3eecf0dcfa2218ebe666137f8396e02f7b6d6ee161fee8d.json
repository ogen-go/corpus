{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Nookipedia/nookipedia-api"
		},
		"file": {
			"name": "doc.yaml",
			"size": 0,
			"path": "static/doc.yaml",
			"byteSize": 166624,
			"content": "openapi: 3.0.0\ninfo:\n  title: Nookipedia\n  description: 'The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.\u003cbr\u003e\u003cbr\u003eAccess to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).\u003cbr\u003e\u003cbr\u003eThis API is ''version 2'' of our [original API](https://nookipedia.com/api/). While the previous API scraped information directly from the wiki, this new edition of the API pulls data from a structured and constrained database, resulting in higher-quality data, better searching, and support for filtering.'\n  version: 1.5.0\nservers:\n  - url: 'https://api.nookipedia.com/'\npaths:\n  '/villagers':\n    get:\n      summary: Villagers\n      description: 'This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: name\n          required: false\n          schema:\n            type: string\n          description: 'Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you.'\n        - in: query\n          name: species\n          required: false\n          schema:\n            type: string\n            enum:\n              - alligator\n              - anteater\n              - bear\n              - bird\n              - bull\n              - cat\n              - cub\n              - chicken\n              - cow\n              - deer\n              - dog\n              - duck\n              - eagle\n              - elephant\n              - frog\n              - goat\n              - gorilla\n              - hamster\n              - hippo\n              - horse\n              - koala\n              - kangaroo\n              - lion\n              - monkey\n              - mouse\n              - octopus\n              - ostrich\n              - penguin\n              - pig\n              - rabbit\n              - rhino\n              - sheep\n              - squirrel\n              - tiger\n              - wolf\n          description: Retrieve villagers of a certain species.\n        - in: query\n          name: personality\n          required: false\n          schema:\n            type: string\n            enum:\n              - lazy\n              - jock\n              - cranky\n              - smug\n              - normal\n              - peppy\n              - snooty\n              - sisterly\n          description: 'Retrieve villagers with a certain personality. For ''sisterly'', note that the community often also calls it ''uchi'' or ''big sister''.'\n        - in: query\n          name: game\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - DNM\n                - AC\n                - E_PLUS\n                - WW\n                - CF\n                - NL\n                - WA\n                - NH\n                - FILM\n                - HHD\n                - PC\n          description: 'Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh\u0026game=pc`.'\n        - in: query\n          name: birthmonth\n          required: false\n          schema:\n            type: string\n          description: 'Retrieve villagers born in a specific month. Value may be the month''s name (`jan`, `january`) or the integer representing the month (`01`, `1`).'\n        - in: query\n          name: birthday\n          required: false\n          schema:\n            type: string\n          description: 'Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31.'\n        - in: query\n          name: nhdetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of villagers.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Villager'\n        '400':\n          description: One of the inputs (usually query parameters) has an invalid value.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error400'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fish':\n    get:\n      summary: All New Horizons fish\n      description: Get a list of all fish and their details in *New Horizons*.\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: month\n          required: false\n          schema:\n            type: string\n          description: 'Retrive only the fish that are available in a specific month. Value may be the month''s name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server''s time, so it may be slightly off for you at the beginning or end of the month.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of fish in a given month but not all their respective details.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of fish.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHFish'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fish/{fish}':\n    get:\n      summary: Single New Horizons fish\n      description: 'Retrieve information about a specific fish in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: fish\n          required: true\n          schema:\n            type: string\n          description: The name of the fish you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the fish.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHFish'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '404':\n          description: Could not find the specified fish.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/bugs':\n    get:\n      summary: All New Horizons bugs\n      description: 'Get a list of all bugs and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: month\n          required: false\n          schema:\n            type: string\n          description: 'Retrive only the bug that are available in a specific month. Value may be the month''s name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server''s time, so it may be slightly off for you at the beginning or end of the month.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of bugs in a given month but not all their respective details.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of bugs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHBug'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/bugs/{bug}':\n    get:\n      summary: Single New Horizons bug\n      description: 'Retrieve information about a specific bug in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: bug\n          required: true\n          schema:\n            type: string\n          description: The name of the bug you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the bug.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHBug'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '404':\n          description: Could not find the specified bug.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/sea':\n    get:\n      summary: All New Horizons sea creatures\n      description: 'Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: month\n          required: false\n          schema:\n            type: string\n          description: 'Retrive only the sea creature that are available in a specific month. Value may be the month''s name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server''s time, so it may be slightly off for you at the beginning or end of the month.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of sea creatures in a given month but not all their respective details.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of sea creatures.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHSeaCreature'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/sea/{sea_creature}':\n    get:\n      summary: Single New Horizons sea creature\n      description: 'Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: sea_creature\n          required: true\n          schema:\n            type: string\n          description: The name of the sea creature you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the sea creature.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHSeaCreature'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '404':\n          description: Could not find the specified sea creature.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error404'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/events':\n    get:\n      summary: All New Horizons events\n      description: 'Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: date\n          required: false\n          schema:\n            type: string\n          description: \"Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as `YYYY-MM-DD` or `Month Day, Year`, as well as `today` to retrieve the current day's events (UTC time).\"\n        - in: query\n          name: year\n          required: false\n          schema:\n            type: string\n          description: Specify the year to retrieve events for. Must be the current or next year.\n        - in: query\n          name: month\n          required: false\n          schema:\n            type: string\n          description: Specify the month to retrieve events for (accepts multiple formats, such as `Oct`, `October`, or `10`). Most likely want to use alongside `year`, otherwise events in both the current and next year are returned.\n        - in: query\n          name: day\n          required: false\n          schema:\n            type: integer\n          description: Specify the day of the month to retrieve events for.\n      responses:\n        '200':\n          description: A JSON array of events.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHEvent'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/art':\n    get:\n      summary: All New Horizons artwork\n      description: 'Get a list of all artwork and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: hasfake\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only artwork that has a fake will be returned. When set to `false`, only artwork without fakes will be returned.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of artwork.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHArtwork'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/art/{artwork}':\n    get:\n      summary: Single New Horizons artwork\n      description: 'Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: artwork\n          required: true\n          schema:\n            type: string\n          description: The name of the artwork you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the artwork.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHArtwork'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/furniture':\n    get:\n      summary: All New Horizons furniture\n      description: 'Get a list of all furniture and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: category\n          required: false\n          schema:\n            type: string\n            enum:\n              - Housewares\n              - Miscellaneous\n              - Wall-mounted\n          description: Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted).\n        - in: query\n          name: color\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Aqua\n                - Beige\n                - Black\n                - Blue\n                - Brown\n                - Colorful\n                - Gray\n                - Green\n                - Orange\n                - Pink\n                - Purple\n                - Red\n                - White\n                - Yellow\n          description: Return furniture that matches the provided colors (may specify one or two colors).\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of furniture.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHFurniture'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/furniture/{furniture}':\n    get:\n      summary: Single New Horizons furniture\n      description: 'Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: furniture\n          required: true\n          schema:\n            type: string\n          description: The name of the furniture you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the furniture.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHFurniture'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/clothing':\n    get:\n      summary: All New Horizons clothing\n      description: 'Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: category\n          required: false\n          schema:\n            type: string\n            enum:\n              - Tops\n              - Bottoms\n              - Dress-up\n              - Headwear\n              - Accessories\n              - Socks\n              - Shoes\n              - Bags\n              - Umbrellas\n          description: Specify the category of clothing to return.\n        - in: query\n          name: color\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Aqua\n                - Beige\n                - Black\n                - Blue\n                - Brown\n                - Colorful\n                - Gray\n                - Green\n                - Orange\n                - Pink\n                - Purple\n                - Red\n                - White\n                - Yellow\n          description: Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers.\n        - in: query\n          name: style\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Active\n                - Cool\n                - Cute\n                - Elegant\n                - Gorgeous\n                - Simple\n          description: Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers.\n        - in: query\n          name: labeltheme\n          required: false\n          schema:\n            type: string\n            enum:\n              - Comfy\n              - Everyday\n              - Fairy tale\n              - Formal\n              - Goth\n              - Outdoorsy\n              - Party\n              - Sporty\n              - Theatrical\n              - Vacation\n              - Work\n          description: Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of clothing.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHClothing'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/clothing/{clothing}':\n    get:\n      summary: Single New Horizons clothing\n      description: 'Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: clothing\n          required: true\n          schema:\n            type: string\n          description: The name of the clothing you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the clothing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHClothing'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/interior':\n    get:\n      summary: All New Horizons interior items\n      description: 'Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: color\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Aqua\n                - Beige\n                - Black\n                - Blue\n                - Brown\n                - Colorful\n                - Gray\n                - Green\n                - Orange\n                - Pink\n                - Purple\n                - Red\n                - White\n                - Yellow\n          description: Return furniture that matches the provided colors (may specify one or two colors).\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of interior items.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHInterior'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/interior/{item}':\n    get:\n      summary: Single New Horizons interior item\n      description: 'Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: item\n          required: true\n          schema:\n            type: string\n          description: The name of the interior item you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: color\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Aqua\n                - Beige\n                - Black\n                - Blue\n                - Brown\n                - Colorful\n                - Gray\n                - Green\n                - Orange\n                - Pink\n                - Purple\n                - Red\n                - White\n                - Yellow\n          description: Return furniture that matches the provided colors (may specify one or two colors).\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the interior item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHInterior'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/tools':\n    get:\n      summary: All New Horizons tools\n      description: 'Get a list of all tools and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of interior items.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHTool'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/tools/{tool}':\n    get:\n      summary: Single New Horizons tool\n      description: 'Retrieve information about a specific tool in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: tool\n          required: true\n          schema:\n            type: string\n          description: The name of the interior item you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the tool.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHTool'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/photos':\n    get:\n      summary: All New Horizons photos and posters\n      description: 'Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of photos and posters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHPhoto'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/photos/{item}':\n    get:\n      summary: Single New Horizons photo or poster\n      description: 'Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: item\n          required: true\n          schema:\n            type: string\n          description: The name of the photo or poster you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the photo or poster.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHPhoto'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/items':\n    get:\n      summary: Miscellaneous New Horizons items\n      description: 'Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n      responses:\n        '200':\n          description: A JSON array of items.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHItem'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/items/{item}':\n    get:\n      summary: Single New Horizons miscellaneous item\n      description: 'Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: item\n          required: true\n          schema:\n            type: string\n          description: The name of the interior item you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the item.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHItem'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/recipes':\n    get:\n      summary: All New Horizons recipes\n      description: 'Get a list of all recipes and their details in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: material\n          required: false\n          schema:\n            type: string\n          description: Specify a material to only get recipes that use that material. You can specify `material` up to six times (no recipe uses more than six materials).\n        - in: query\n          name: excludedetails\n          required: false\n          schema:\n            type: string\n          description: 'When set to `true`, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.'\n      responses:\n        '200':\n          description: A JSON array of recipes.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHRecipe'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/recipes/{item}':\n    get:\n      summary: Single New Horizons recipe\n      description: 'Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: item\n          required: true\n          schema:\n            type: string\n          description: The name of the item you wish to retrieve recipe information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the recipe.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHRecipe'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/individuals':\n    get:\n      summary: All New Horizons fossils\n      description: 'Get a list of all the individual fossils in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON array of individual fossils.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHIndividualFossil'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/individuals/{fossil}':\n    get:\n      summary: Single New Horizons fossil\n      description: 'Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: fossil\n          required: true\n          schema:\n            type: string\n          description: The name of the individual fossil you wish to retrieve fossil information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the individual fossil.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHIndividualFossil'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/groups':\n    get:\n      summary: All New Horizons fossil groups\n      description: 'Get a list of all the fossil groups in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON array of fossil groups.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHFossilGroup'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/groups/{fossil_group}':\n    get:\n      summary: Single New Horizons fossil group\n      description: 'Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: fossil_group\n          required: true\n          schema:\n            type: string\n          description: The name of the fossil group you wish to retrieve information about.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the fossil group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHFossilGroup'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/all':\n    get:\n      summary: All New Horizons fossil groups or individual fossil\n      description: 'Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON array of fossil groups.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/NHFossilGroupWithIndividualFossilsNoMatched'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\n  '/nh/fossils/all/{fossil}':\n    get:\n      summary: Single New Horizons fossil group with individual fossils\n      description: 'Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.'\n      parameters:\n        - in: path\n          name: fossil\n          required: true\n          schema:\n            type: string\n          description: The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned.\n        - in: header\n          name: X-API-KEY\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: 'Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.'\n        - in: header\n          name: Accept-Version\n          required: true\n          schema:\n            type: string\n          description: 'The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.'\n        - in: query\n          name: thumbsize\n          required: false\n          schema:\n            type: integer\n          description: 'Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.'\n      responses:\n        '200':\n          description: A JSON object describing the fossil group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NHFossilGroupWithIndividualFossils'\n        '401':\n          description: Failed to authenticate user from `X-API-KEY`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error401'\n        '500':\n          description: There was an error fetching the requested data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error500'\ncomponents:\n  schemas:\n    Error400:\n      description: Bad request (often an invalid input).\n      type: object\n      properties:\n        title:\n          type: string\n          example: Failed to identify the provided month filter.\n          description: A brief title describing the error.\n        details:\n          type: string\n          example: Provided month filter jonuary was not recognized as a valid month.\n          description: 'A more in-depth description of the issue, including parameters and/or error text when available.'\n    Error401:\n      description: Unauthorized.\n      type: object\n      properties:\n        title:\n          type: string\n          example: Failed to validate UUID.\n          description: A brief title describing the error.\n        details:\n          type: string\n          example: 'UUID is either missing or invalid; or, unspecified server occured.'\n          description: 'A more in-depth description of the issue, including parameters and/or error text when available.'\n    Error404:\n      description: Not found.\n      type: object\n      properties:\n        title:\n          type: string\n          example: No data was found for the given query.\n          description: A brief title describing the error.\n        details:\n          type: string\n          example: 'MediaWiki Cargo request succeeded by nothing was returned for the parameters: {}'\n          description: 'A more in-depth description of the issue, including parameters and/or error text when available.'\n    Error500:\n      description: Internal server error.\n      type: object\n      properties:\n        title:\n          type: string\n          example: API experienced a fatal error.\n          description: A brief title describing the error.\n        details:\n          type: string\n          example: Details unknown.\n          description: 'A more in-depth description of the issue, including parameters and/or error text when available.'\n    Villager:\n      type: object\n      properties:\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Ribbot'\n          description: Link to the respective Nookipedia article.\n        name:\n          type: string\n          example: Ribbot\n          description: Name of the villager.\n        alt_name:\n          type: string\n          example: ''\n          description: 'A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.'\n        title_color:\n          type: string\n          example: bfbfbf\n          description: 'The HTML color code of the background of the villager''s name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.'\n        text_color:\n          type: string\n          example: 5e5e5e\n          description: 'The HTML color code of the text of the villager''s name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.'\n        id:\n          type: string\n          example: flg01\n          description: The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/9/94/Ribbot_NH.png'\n          description: Image of the villager from the latest game the villager appeared in. dodo.ac is Nookipedia's CDN server.\n        species:\n          type: string\n          example: Frog\n          description: The villager's species.\n          enum:\n            - Alligator\n            - Anteater\n            - Bear\n            - Bird\n            - Bull\n            - Cat\n            - Cub\n            - Chicken\n            - Cow\n            - Deer\n            - Dog\n            - Duck\n            - Eagle\n            - Elephant\n            - Frog\n            - Goat\n            - Gorilla\n            - Hamster\n            - Hippo\n            - Horse\n            - Koala\n            - Kangaroo\n            - Lion\n            - Monkey\n            - Mouse\n            - Octopus\n            - Ostrich\n            - Penguin\n            - Pig\n            - Rabbit\n            - Rhino\n            - Sheep\n            - Squirrel\n            - Tiger\n            - Wolf\n        personality:\n          type: string\n          example: Jock\n          description: 'The villager''s personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of ''sisterly'', other common names include ''big sis'' and ''uchi''.'\n          enum:\n            - Cranky\n            - Jock\n            - Lazy\n            - Normal\n            - Peppy\n            - Sisterly\n            - Smug\n            - Snooty\n        gender:\n          type: string\n          example: Male\n          description: 'Gender of the villager. In *Animal Crossing*, only male and female are used.'\n          enum:\n            - Male\n            - Female\n        birthday_month:\n          type: string\n          example: February\n          description: 'Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn''t appear in *Wild World* or any later games, this field will be an empty string.'\n        birthday_day:\n          type: string\n          example: '13'\n          description: 'Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn''t appear in *Wild World* or any later games, this field will be an empty string.'\n        sign:\n          type: string\n          example: Aquarius\n          description: The villager's astrological star sign.\n          enum:\n            - Aries\n            - Taurus\n            - Gemini\n            - Cancer\n            - Leo\n            - Virgo\n            - Libra\n            - Scorpio\n            - Sagittarius\n            - Capricorn\n            - Aquarius\n            - Pisces\n        quote:\n          type: string\n          example: 'Never rest, never rust.'\n          description: 'The villager''s quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.'\n        phrase:\n          type: string\n          example: zzrrbbit\n          description: 'The villager''s default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).'\n        prev_phrases:\n          type: array\n          items:\n            type: string\n          example:\n            - toady\n          description: Any phrases used in previous *Animal Crossing* installations. May be empty.\n        clothing:\n          type: string\n          example: Simple Parka\n          description: 'The villager''s default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).'\n        islander:\n          type: boolean\n          example: false\n          description: Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.\n        debut:\n          type: string\n          example: DNM\n          description: 'The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.'\n          enum:\n            - DNM\n            - AC\n            - E_PLUS\n            - WW\n            - CF\n            - NL\n            - WA\n            - NH\n            - FILM\n            - HHD\n            - PC\n        appearances:\n          type: array\n          items:\n            type: string\n            enum:\n              - DNM\n              - AC\n              - E_PLUS\n              - WW\n              - CF\n              - NL\n              - WA\n              - NH\n              - FILM\n              - HHD\n              - PC\n          example:\n            - DNM\n            - AC\n            - E_PLUS\n            - WW\n            - CF\n            - NL\n            - WA\n            - NH\n            - HHD\n            - PC\n          description: 'List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.'\n        nh_details:\n          type: object\n          description: 'An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.'\n          properties:\n            image_url:\n              type: string\n              example: 'https://dodo.ac/np/images/9/94/Ribbot_NH.png'\n              description: Image of the villager from *New Horizons*.\n            photo_url:\n              type: string\n              example: 'https://dodo.ac/np/images/0/03/RibbotPicACNH.png'\n              description: 'The villager''s photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.'\n            icon_url:\n              type: string\n              example: 'https://dodo.ac/np/images/8/87/Ribbot_NH_Villager_Icon.png'\n              description: 'The villager''s icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.'\n            quote:\n              type: string\n              example: 'Never rest, never rust.'\n              description: 'The villager''s quote, as found on the back of their in-game photo.'\n            sub-personality:\n              type: string\n              example: B\n              description: 'Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.'\n              enum:\n                - A\n                - B\n            catchphrase:\n              type: string\n              example: zzrrbbit\n              description: The default phrase a villager will use when speaking to the player.\n            clothing:\n              type: string\n              example: Simple Parka\n              description: The default clothing that the villager wears.\n            clothing_variation:\n              type: string\n              example: Light Blue\n              description: The variation of the clothing (usually a color).\n            fav_styles:\n              type: array\n              items:\n                type: string\n              example:\n                - Simple\n                - Active\n              description: The villager's favorite clothing styles.\n            fav_colors:\n              type: array\n              items:\n                type: string\n              example:\n                - Blue\n                - Aqua\n              description: The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).\n            hobby:\n              type: string\n              example: Fitness\n              description: 'The villager''s primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies'\n              enum:\n                - Education\n                - Fashion\n                - Fitness\n                - Music\n                - Nature\n                - Play\n            house_interior_url:\n              type: string\n              example: 'https://dodo.ac/np/images/8/86/House_of_Ribbot_NH.png'\n              description: A screenshot of the villager's house interior.\n            house_exterior_url:\n              type: string\n              example: 'https://dodo.ac/np/images/4/42/House_of_Ribbot_NH_Model.png'\n              description: 'A rendered model of the villager''s house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.'\n            house_wallpaper:\n              type: string\n              example: Circuit-Board Wall\n              description: The wallpaper in the villager's house.\n            house_flooring:\n              type: string\n              example: Future-Tech Flooring\n              description: The flooring in the villager's house.\n            house_music:\n              type: string\n              example: K.K. Technopop\n              description: The music in the villager's house.\n            house_music_note:\n              type: string\n              example: ''\n              description: 'Any notes about the villager''s music. If populated, this is usually \"Does not contain a stereo initially\", meaning that the villager''s house will not play music unless provided with a stereo.'\n    NHFish:\n      type: object\n      properties:\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Cherry Salmon'\n          description: Link to the respective Nookipedia article.\n        name:\n          type: string\n          example: Cherry Salmon\n          description: Name of the fish.\n        number:\n          type: integer\n          example: 27\n          description: 'In-game fish number, marking position in the Critterpedia.'\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/d/db/Cherry_Salmon_NH_Icon.png'\n          description: Image of the fish. dodo.ac is Nookipedia's CDN server.\n        render_url:\n          type: string\n          example: 'https://dodo.ac/np/images/c/c0/Cherry_Salmon_NH.png'\n          description: Render of the fish. dodo.ac is Nookipedia's CDN server.\n        location:\n          type: string\n          example: River (clifftop)\n          description: Short descriptor of where the fish can be found.\n        shadow_size:\n          type: string\n          example: Small\n          enum:\n            - X-Small\n            - Small\n            - Medium\n            - Medium w/Fin\n            - Large\n            - Large w/Fin\n            - X-Large\n            - XX-Large\n            - Long\n          description: The size of the fish's shadow.\n        rarity:\n          type: string\n          example: Uncommon\n          description: How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.\n        total_catch:\n          type: integer\n          example: 100\n          description: The total number of fish the player has to have caught before this fish will start spawning.\n        sell_nook:\n          type: integer\n          example: 1000\n          description: The number of Bells the fish can be sold to Nook's store for.\n        sell_cj:\n          type: integer\n          example: 1500\n          description: The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.\n        tank_width:\n          type: number\n          format: float\n          example: 1\n          description: The width of the tank when the fish is placed as a furniture item.\n        tank_length:\n          type: number\n          format: float\n          example: 1\n          description: The length of the tank when the fish is placed as a furniture item.\n        catchphrases:\n          type: array\n          items:\n            type: string\n          example:\n            - I caught a cherry salmon! It's the perfect topper for a marlin sundae!\n          description: 'An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.'\n        north:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: Mar – Jun\n                  time: 4 PM – 9 AM\n                - months: Sep – Nov\n                  time: All day\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '2':\n                  type: string\n                '3':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n              example:\n                '1': NA\n                '2': NA\n                '3': 4 PM – 9 AM\n                '4': 4 PM – 9 AM\n                '5': 4 PM – 9 AM\n                '6': 4 PM – 9 AM\n                '7': NA\n                '8': NA\n                '9': All day\n                '10': All day\n                '11': All day\n                '12': NA\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Mar – Jun; Sep – Nov\n              description: 'The months the fish is available for in the Northern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 3\n                - 4\n                - 5\n                - 6\n                - 9\n                - 10\n                - 11\n              description: An array of integers representing the months the fish is available in the Northern hemisphere.\n          description: When you can catch the fish in the Northern hemisphere.\n        south:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: Sep – Dec\n                  time: 4 PM – 9 AM\n                - months: Mar – May\n                  time: All day\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n                2':\n                  type: string\n                3':\n                  type: string\n              example:\n                '1': NA\n                '2': NA\n                '3': 4 PM – 9 AM\n                '4': 4 PM – 9 AM\n                '5': 4 PM – 9 AM\n                '6': 4 PM – 9 AM\n                '7': NA\n                '8': NA\n                '9': All day\n                '10': All day\n                '11': All day\n                '12': NA\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Mar – May; Sep – Dec\n              description: 'The months the fish is available for in the Southern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 3\n                - 4\n                - 5\n                - 9\n                - 10\n                - 11\n                - 12\n              description: An array of integers representing the months the fish is available in the Southern hemisphere.\n          description: When you can catch the fish in the Southern hemisphere.\n    NHBug:\n      type: object\n      properties:\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Grasshopper'\n          description: Link to the respective Nookipedia article.\n        name:\n          type: string\n          example: Grasshopper\n          description: Name of the bug.\n        number:\n          type: integer\n          example: 19\n          description: 'In-game bug number, marking position in the Critterpedia.'\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/3/37/Grasshopper_NH_Icon.png'\n          description: Image of the bug. dodo.ac is Nookipedia's CDN server.\n        render_url:\n          type: string\n          example: 'https://dodo.ac/np/images/1/1d/Grasshopper_NH.png'\n          description: Render of the bug. dodo.ac is Nookipedia's CDN server.\n        location:\n          type: string\n          example: On the ground\n          description: Short descriptor of where the bug can be found.\n        rarity:\n          type: string\n          example: Uncommon\n          description: How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.\n        total_catch:\n          type: integer\n          example: 0\n          description: The total number of bug the player has to have caught before this bug will start spawning.\n        sell_nook:\n          type: integer\n          example: 160\n          description: The number of Bells the bug can be sold to Nook's store for.\n        sell_flick:\n          type: integer\n          example: 240\n          description: The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.\n        tank_width:\n          type: number\n          format: float\n          example: 1\n          description: The width of the tank when the bug is placed as a furniture item.\n        tank_length:\n          type: number\n          format: float\n          example: 1\n          description: The length of the tank when the bug is placed as a furniture item.\n        catchphrases:\n          type: array\n          items:\n            type: string\n          example:\n            - I caught a grasshopper! They're a grass act!\n          description: 'An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.'\n        north:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: Jul – Sep\n                  time: 8 AM – 5 PM\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '2':\n                  type: string\n                '3':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n              example:\n                '1': NA\n                '2': NA\n                '3': NA\n                '4': NA\n                '5': NA\n                '6': NA\n                '7': 8 AM – 5 PM\n                '8': 8 AM – 5 PM\n                '9': 8 AM – 5 PM\n                '10': NA\n                '11': NA\n                '12': NA\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Jul – Sep\n              description: 'The months the bug is available for in the Northern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 7\n                - 8\n                - 9\n              description: An array of integers representing the months the bug is available in the Northern hemisphere.\n          description: When you can catch the bug in the Northern hemisphere.\n        south:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: Jan – Mar\n                  time: 8 AM – 5 PM\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '2':\n                  type: string\n                '3':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n              example:\n                '1': 8 AM – 5 PM\n                '2': 8 AM – 5 PM\n                '3': 8 AM – 5 PM\n                '4': NA\n                '5': NA\n                '6': NA\n                '7': NA\n                '8': NA\n                '9': NA\n                '10': NA\n                '11': NA\n                '12': NA\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Jan – Mar\n              description: 'The months the bug is available for in the Southern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 1\n                - 2\n                - 3\n              description: An array of integers representing the months the bug is available in the Southern hemisphere.\n          description: When you can catch the bug in the Southern hemisphere.\n    NHSeaCreature:\n      type: object\n      properties:\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Octopus_(fish)'\n          description: Link to the respective Nookipedia article.\n        name:\n          type: string\n          example: Octopus\n          description: Name of the sea creature.\n        number:\n          type: integer\n          example: 20\n          description: 'In-game sea creature number, marking position in the Critterpedia.'\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/5/58/Octopus_NH_Icon.png'\n          description: Image of the sea creature. dodo.ac is Nookipedia's CDN server.\n        render_url:\n          type: string\n          example: 'https://dodo.ac/np/images/2/27/Octopus_NH.png'\n          description: Render of the sea creature. dodo.ac is Nookipedia's CDN server.\n        shadow_size:\n          type: string\n          example: Medium\n          description: Short descriptor of where the sea creature can be found.\n          enum:\n            - X-Small\n            - Small\n            - Medium\n            - Large\n            - X-Large\n        shadow_movement:\n          type: string\n          example: Slow\n          description: Short descriptor of where the sea creature can be found.\n          enum:\n            - Stationary\n            - Very slow\n            - Slow\n            - Medium\n            - Fast\n            - Very fast\n        rarity:\n          type: string\n          example: Uncommon\n          description: How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.\n        total_catch:\n          type: integer\n          example: 0\n          description: The total number of sea creatures the player has to have caught before this sea creature will start spawning.\n        sell_nook:\n          type: integer\n          example: 160\n          description: The number of Bells the sea creature can be sold to Nook's store for.\n        tank_width:\n          type: number\n          format: float\n          multipleOf: 0.1\n          example: 1\n          description: The width of the tank when the sea creature is placed as a furniture item.\n        tank_length:\n          type: number\n          format: float\n          multipleOf: 0.1\n          example: 1\n          description: The length of the tank when the sea creature is placed as a furniture item.\n        catchphrases:\n          type: array\n          items:\n            type: string\n          example:\n            - I got an octopus! It can give four hugs at once!\n          description: 'An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.'\n        north:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: All year\n                  time: All day\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '2':\n                  type: string\n                '3':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n              example:\n                '1': All day\n                '2': All day\n                '3': All day\n                '4': All day\n                '5': All day\n                '6': All day\n                '7': All day\n                '8': All day\n                '9': All day\n                '10': All day\n                '11': All day\n                '12': All day\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Jul – Sep\n              description: 'The months the sea creature is available for in the Northern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 1\n                - 2\n                - 3\n                - 4\n                - 5\n                - 6\n                - 7\n                - 8\n                - 9\n                - 10\n                - 11\n                - 12\n              description: An array of integers representing the months the sea creature is available in the Northern hemisphere.\n          description: When you can catch the sea creature in the Northern hemisphere.\n        south:\n          type: object\n          properties:\n            availability_array:\n              type: array\n              items:\n                type: object\n                properties:\n                  months:\n                    type: string\n                  time:\n                    type: string\n              example:\n                - months: All year\n                  time: All day\n              description: 'An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.'\n            times_by_month:\n              type: object\n              properties:\n                '1':\n                  type: string\n                '2':\n                  type: string\n                '3':\n                  type: string\n                '4':\n                  type: string\n                '5':\n                  type: string\n                '6':\n                  type: string\n                '7':\n                  type: string\n                '8':\n                  type: string\n                '9':\n                  type: string\n                '10':\n                  type: string\n                '11':\n                  type: string\n                '12':\n                  type: string\n              example:\n                '1': All day\n                '2': All day\n                '3': All day\n                '4': All day\n                '5': All day\n                '6': All day\n                '7': All day\n                '8': All day\n                '9': All day\n                '10': All day\n                '11': All day\n                '12': All day\n              description: 'An object with twelve numerical keys, each representing a month (`\"1\"` for January, `\"2\"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `\"NA\"`.'\n            months:\n              type: string\n              example: Jan – Mar\n              description: 'The months the sea creature is available for in the Southern hemisphere. If all year, value will be `\"All year\"`.'\n            months_array:\n              type: array\n              items:\n                type: integer\n              example:\n                - 1\n                - 2\n                - 3\n                - 4\n                - 5\n                - 6\n                - 7\n                - 8\n                - 9\n                - 10\n                - 11\n                - 12\n              description: An array of integers representing the months the sea creature is available in the Southern hemisphere.\n          description: When you can catch the sea creature in the Southern hemisphere.\n    NHEvent:\n      type: object\n      properties:\n        event:\n          type: string\n          example: May Day event begins\n          description: The description of the event.\n        date:\n          type: string\n          example: '2021-05-01'\n          description: The date of the event in YYYY-MM-DD format.\n        type:\n          type: string\n          example: Event\n          description: The type of event. \"Event\" is a festivity the player can take part in. \"Nook Shopping\" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). \"Recipes\" refers to the start or end of certain recipes being available. \"Birthday\" refers to the birthday of a villager or special character.\n          enum:\n            - Event\n            - Nook Shopping\n            - Recipes\n            - Birthday\n        url:\n          type: string\n          example: https://nookipedia.com/wiki/May_Day\n          description: Link to the respective Nookipedia article for the event.\n    NHArtwork:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Academic Painting\n          description: Name of the artwork.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Academic_Painting'\n          description: Link to the respective Nookipedia article.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/e/e8/Academic_Painting_NH_Icon.png'\n          description: Image of the real artwork. dodo.ac is Nookipedia's CDN server.\n        has_fake:\n          type: boolean\n          example: true\n          description: Whether the artwork has a fake or not.\n        fake_image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/1/13/Academic_Painting_%28Forgery%29_NH_Icon.png'\n          description: 'Image of the fake artwork, if it exists.'\n        art_name:\n          type: string\n          example: Vitruvian Man\n          description: The name of the real-life analog to the artwork.\n        author:\n          type: string\n          example: Leonardo da Vinci\n          description: The author of the real-life analog to the artwork.\n        year:\n          type: string\n          example: circa 1487\n          description: The year that the real-life analog was made.\n        art_style:\n          type: string\n          example: Pen and ink on paper\n          description: The art style of the artwork.\n        description:\n          type: string\n          example: 'This drawing is based on the \u0026quot;ideal\u0026quot; human-body ratio, as stated in \u0026quot;De architectura.\u0026quot; \u0026quot;De architectura\u0026quot; was a treatise by Vitruvius, an architect from the early 1st century BCE.'\n          description: The description of the artwork.\n        buy:\n          type: integer\n          example: 4980\n          description: The number of Bells the artwork may be purchased for.\n        sell:\n          type: integer\n          example: 1245\n          description: 'The number of Bells the artwork can be sold to Nook''s store for, when it is genuine.'\n        availability:\n          type: string\n          example: Jolly Redd's Treasure Trawler\n          description: The availability of the artwork.\n        authenticity:\n          type: string\n          example: 'If there is a coffee stain in the top right corner, it is fake. If there is no stain, it is genuine. The forgery has a key taped to the back of the canvas.'\n          description: 'The description of the difference between real and fake, if there is one'\n        width:\n          type: number\n          format: float\n          example: 1\n          description: The width of the artwork.\n        length:\n          type: number\n          format: float\n          example: 1\n          description: The length of the artwork.\n    NHFurniture:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Antique Vanity\n          description: The name of the furniture.\n        url:\n          type: string\n          example: https://nookipedia.com/wiki/Item:Antique_Vanity_(New_Horizons)\n          description: Link to the respective Nookipedia article.\n        category:\n          type: string\n          example: Housewares\n          description: The category of item as shown in the player's inventory.\n          enum:\n            - Housewares\n            - Miscellaneous\n            - Wall-mounted\n        item_series:\n          type: string\n          example: Antique\n          description: The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.\n        item_set:\n          type: string\n          example: \"\"\n          description: The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.\n        themes:\n          type: array\n          items:\n            type: string\n          example:\n            - \"Living Room\"\n            - \"Expensive\"\n          description: A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.\n        hha_category:\n          type: string\n          example: Dresser\n          description: The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.\n        hha_base:\n          type: integer\n          example: 251\n          description: The base value that the item provides to a player's Happy Home Academy score when placed in their home.\n        tag:\n          type: string\n          example: Dresser\n          description: The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.\n        lucky:\n          type: boolean\n          example: false\n          description: Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.\n        lucky_season:\n          type: string\n          example: \"\"\n          description: The season in which the item is lucky (or \"All year\" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.\n          enum:\n            - \"\"\n            - All year\n            - Spring\n            - Summer\n            - Autumn\n            - Winter\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 31000\n              currency: Bells\n          description: 'An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..'\n        sell:\n          type: integer\n          example: 7750\n          description: The number of Bells the item can be sold to Nook's store for.\n        variation_total:\n          type: integer\n          example: 3\n          description: The number of variations, between 0 and 8.\n          enum:\n           - 0\n           - 1\n           - 2\n           - 3\n           - 4\n           - 5\n           - 6\n           - 7\n           - 8\n        pattern_total:\n          type: integer\n          example: 0\n          description: The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.\n          enum:\n           - 0\n           - 1\n           - 2\n           - 3\n           - 4\n           - 5\n           - 6\n           - 7\n           - 8\n        customizable:\n          type: boolean\n          example: false\n          description: Whether or not the item is customizable via a crafting table.\n        custom_kits:\n          type: integer\n          example: 0\n          description: The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.\n        custom_kit_type:\n          type: string\n          example: \"\"\n          description: The item that needs to be consumed to customize this item. The vast majority are \"Customization Kit\", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.\n        custom_body_part:\n          type: string\n          example: \"\"\n          description: If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.\n        custom_pattern_part:\n          type: string\n          example: \"\"\n          description: If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is \"Cushion\" as the cushion on the chair may have a pattern applied.\n        grid_width:\n          type: number\n          format: float\n          example: 2.0\n          description: The number of widthwise grid spaces this item takes up.\n        grid_length:\n          type: number\n          format: float\n          example: 1.0\n          description: The number of lengthwise grid spaces this item takes up.\n        height:\n          type: number\n          format: float\n          example: 15.98677\n          description: The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.\n        door_decor:\n          type: boolean\n          example: false\n          description: Whether this item may be placed on the exterior door of the player's house.\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        functions:\n          type: array\n          items:\n            type: string\n            enum:\n            - 'Trash'\n            - 'Toilet'\n            - 'Table'\n            - 'Storage'\n            - 'Stereo'\n            - 'Seating'\n            - 'Lighting'\n            - 'Instrument'\n            - 'Dresser'\n            - 'Bed'\n            - 'Audio'\n          example:\n            - \"Dresser\"\n          description: A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have \"Table\" as a function..\n        availability:\n          type: array\n          items:\n            type: object\n            properties:\n              from:\n                type: string\n              note:\n                type: string\n          example:\n            - from: Nook's Cranny (Upgraded)\n              note: \"\"\n          description: Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        variations:\n          type: array\n          items:\n            type: object\n            properties:\n              variation:\n                type: string\n              pattern:\n                type: string\n              image_url:\n                type: string\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - Aqua\n                    - Beige\n                    - Black\n                    - Blue\n                    - Brown\n                    - Colorful\n                    - Gray\n                    - Green\n                    - Orange\n                    - Pink\n                    - Purple\n                    - Red\n                    - White\n                    - Yellow\n          example:\n            - variation: Brown\n              pattern: \"\"\n              image_url: https://dodo.ac/np/images/9/9e/Antique_Vanity_%28Brown%29_NH_Icon.png\n              colors:\n              - Aqua\n              - Brown\n            - variation: Natural\n              pattern: \"\"\n              image_url: https://dodo.ac/np/images/a/ab/Antique_Vanity_%28Natural%29_NH_Icon.png\n              colors:\n              - Aqua\n              - Beige\n            - variation: Black\n              pattern: \"\"\n              image_url: https://dodo.ac/np/images/5/55/Antique_Vanity_%28Black%29_NH_Icon.png\n              colors:\n              - Aqua\n              - Black\n          description: An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.\n        notes:\n          type: string\n          example: \"\"\n          description: Any additional miscellaneous information about the item, such as a name change from a past update.\n    NHTool:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Axe\n          description: The name of the tool.\n        url:\n          type: string\n          example: https://nookipedia.com/wiki/Item:Axe_(New_Horizons)\n          description: Link the the respective Nookipedia article.\n        uses:\n          type: integer\n          example: 100\n          description: How many times the tool can be used before breaking.\n        hha_base:\n          type: integer\n          example: 0\n          description: The base value that the item provides to a player's Happy Home Academy score when placed in their home.\n        sell:\n          type: integer\n          example: 625\n          description: The number of bells the tool can be sold to the store for.\n        customizable:\n          type: boolean\n          example: false\n          description: Whether or not the item is customizable via a crafting table.\n        custom_kits:\n          type: integer\n          example: 0\n          description: The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.\n        custom_body_part:\n          type: string\n          example: \"\"\n          description: If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        notes:\n          type: string\n          example: \"\"\n          description: Any additional miscellaneous information about the item, such as a name change from a past update.\n        availability:\n          type: array\n          items:\n            type: object\n            properties:\n              from:\n                type: string\n              note:\n                type: string\n          example:\n            - from: Nook's Cranny\n              note: \"\"\n            - from: Crafting\n              note: \"\"\n          description: Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 2550\n            - currency: Bells\n          description: 'An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..'\n        variations:\n          type: array\n          items:\n            type: object\n            properties:\n              variation:\n                type: string\n              image_url:\n                type: string\n          example:\n            - variation: \"\"\n              image_url: https://dodo.ac/np/images/f/fa/Axe_NH_Icon.png\n          description: An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.\n    NHPhoto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Admiral's Photo\n          description: The name of the photo.\n        url:\n          type: string\n          example: https://nookipedia.com/wiki/Item:Admiral's_Photo_(New_Horizons)\n          description: Link to the respective Nookipedia article.\n        category:\n          type: string\n          example: Accessories\n          description: The category of item as shown in the player's inventory.\n          enum:\n            - Photos\n            - Posters\n        sell:\n          type: integer\n          example: 10\n          description: The number of Bells the photo can be sold to the store for.\n        customizable:\n          type: boolean\n          example: false\n          description: Whether or not the item is customizable via a crafting table.\n        custom_kits:\n          type: integer\n          example: 1\n          description: The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.\n        custom_body_part:\n          type: string\n          example: \"Frame\"\n          description: If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.\n        interactable:\n          type: boolean\n          example: true\n          description: Whether or not the item can be interacted with. This field is true for all photos and false for all posters.\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        grid_width:\n          type: number\n          format: float\n          example: 2.0\n          description: The number of widthwise grid spaces this item takes up.\n        grid_length:\n          type: number\n          format: float\n          example: 1.0\n          description: The number of lengthwise grid spaces this item takes up.\n        availability:\n          type: array\n          items:\n            type: object\n            properties:\n              from:\n                type: string\n              note:\n                type: string\n          example:\n            - from: Friendship\n              note: \"\"\n          description: Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example: []\n          description: 'An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..'\n        variations:\n          type: array\n          items:\n            type: object\n            properties:\n              variation:\n                type: string\n              image_url:\n                type: string\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - Aqua\n                    - Beige\n                    - Black\n                    - Blue\n                    - Brown\n                    - Colorful\n                    - Gray\n                    - Green\n                    - Orange\n                    - Pink\n                    - Purple\n                    - Red\n                    - White\n                    - Yellow\n          example:\n            - variation: Natural Wood\n              image_url: https://dodo.ac/np/images/7/72/Admiral%27s_Photo_%28Natural_Wood%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Dark Wood\n              image_url: https://dodo.ac/np/images/e/e5/Admiral%27s_Photo_%28Dark_Wood%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Pastel\n              image_url: https://dodo.ac/np/images/9/9a/Admiral%27s_Photo_%28Pastel%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: White\n              image_url: https://dodo.ac/np/images/1/16/Admiral%27s_Photo_%28White%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Pop\n              image_url: https://dodo.ac/np/images/b/be/Admiral%27s_Photo_%28Pop%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Colorful\n              image_url: https://dodo.ac/np/images/5/51/Admiral%27s_Photo_%28Colorful%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Silver\n              image_url: https://dodo.ac/np/images/e/ed/Admiral%27s_Photo_%28Silver%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n            - variation: Gold\n              image_url: https://dodo.ac/np/images/c/cf/Admiral%27s_Photo_%28Gold%29_NH_Icon.png\n              colors:\n                - Blue\n                - Green\n          description: An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.\n    NHClothing:\n      type: object\n      properties:\n        name:\n          type: string\n          example: 3D Glasses\n          description: The name of the clothing.\n        url:\n          type: string\n          example: https://nookipedia.com/wiki/Item:3D_Glasses_(New_Horizons)\n          description: Link to the respective Nookipedia article.\n        category:\n          type: string\n          example: Accessories\n          description: The category of item as shown in the player's inventory.\n          enum:\n            - Tops\n            - Bottoms\n            - Dress-up\n            - Headwear\n            - Accessories\n            - Socks\n            - Shoes\n            - Bags\n            - Umbrellas\n        sell:\n          type: integer\n          example: 122\n          description: The number of Bells the clothing can be sold to the store for.\n        variation_total:\n          type: integer\n          example: 2\n          description: The total number of variations the clothing has, between 0 and 8.\n          enum:\n           - 0\n           - 1\n           - 2\n           - 3\n           - 4\n           - 5\n           - 6\n           - 7\n           - 8\n        vill_equip:\n          type: boolean\n          example: true\n          description: Whether villagers may equip this item.\n        seasonality:\n          type: string\n          example: All year\n          description: The time of the year that the clothing is available.\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        notes:\n          type: string\n          example: \"\"\n          description: Any additional miscellaneous information about the clothing, such as a name change from a past update.\n        label_themes:\n          type: array\n          items:\n            type: string\n            enum:\n              - Comfy\n              - Everyday\n              - Fairy tale\n              - Formal\n              - Goth\n              - Outdoorsy\n              - Party\n              - Sporty\n              - Theatrical\n              - Vacation\n              - Work\n          example:\n            - Party\n          description: The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.\n        styles:\n          type: array\n          items:\n            type: string\n            enum:\n              - Active\n              - Cool\n              - Cute\n              - Elegant\n              - Gorgeous\n              - Simple\n          example:\n            - Active\n          description: The clothing's style(s). Styles are used for gifting villagers.\n        availability:\n            type: array\n            items:\n              type: object\n              properties:\n                from:\n                  type: string\n                note:\n                  type: string\n            example:\n              - from: Able Sisters\n                note: \"\"\n            description: Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 490\n              currency: Bells\n          description: 'An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..'\n        variations:\n          type: array\n          items:\n            type: object\n            properties:\n              variation:\n                type: string\n              image_url:\n                type: string\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - Aqua\n                    - Beige\n                    - Black\n                    - Blue\n                    - Brown\n                    - Colorful\n                    - Gray\n                    - Green\n                    - Orange\n                    - Pink\n                    - Purple\n                    - Red\n                    - White\n                    - Yellow\n          example:\n            - variation: White\n              image_url: https://dodo.ac/np/images/1/15/3D_Glasses_%28White%29_NH_Icon.png\n              colors:\n                - White\n                - Colorful\n            - variation: Black\n              image_url: https://dodo.ac/np/images/2/28/3D_Glasses_%28Black%29_NH_Icon.png\n              colors:\n                - Colorful\n                - Black\n          description: An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.\n    NHInterior:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Abstract Wall\n          description: The name of the interior.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Item:Abstract_Wall_(New_Horizons)'\n          description: Link to the respective Nookipedia article.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/2/2d/Abstract_Wall_NH_Icon.png'\n          description: Image of the interior. dodo.ac is Nookipedia's CDN server.\n        category:\n          type: string\n          example: Wallpaper\n          description: The category of item as shown in the player's inventory.\n          enum:\n            - Floors\n            - Wallpaper\n            - Rugs\n        item_series:\n          type: string\n          example: \"\"\n          description: The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.\n        item_set:\n          type: string\n          example: \"\"\n          description: The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.\n        themes:\n          type: array\n          items:\n            type: string\n          example:\n            - Shop\n            - Facility\n          description: A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.\n        hha_category:\n          type: string\n          example: Dresser\n          description: The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.\n        hha_base:\n          type: integer\n          example: 0\n          description: The base value that the item provides to a player's Happy Home Academy score when placed in their home.\n        tag:\n          type: string\n          example: Dresser\n          description: The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.\n        sell:\n          type: integer\n          example: 200\n          description: The number of Bells the interior can be sold to Nook's store for.\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        notes:\n          type: string\n          example: \"\"\n          description: Any additional miscellaneous information about the item, such as a name change from a past update.\n        grid_width:\n          type: number\n          format: float\n          example: 2.0\n          description: The number of widthwise grid spaces this item takes up.\n        grid_length:\n          type: number\n          format: float\n          example: 1.0\n          description: The number of lengthwise grid spaces this item takes up.\n        colors:\n          type: string\n          example:\n            - White\n            - Colorful\n          description: (WIP) # TODO\n          enum:\n            - Aqua\n            - Beige\n            - Black\n            - Blue\n            - Brown\n            - Colorful\n            - Gray\n            - Green\n            - Orange\n            - Pink\n            - Purple\n            - Red\n            - White\n            - Yellow\n        availability:\n            type: array\n            items:\n              type: object\n              properties:\n                from:\n                  type: string\n                note:\n                  type: string\n            example:\n              - from: Nook's\n                note: \"\"\n            description: Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 1560\n              currency: Bells\n          description: 'An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..'\n    NHItem:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Acorn\n          description: The name of the item.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Item:Acorn_(New_Horizons)'\n          description: Link to the respective Nookipedia article.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/9/9f/Acorn_NH_Icon.png'\n          description: Image of the interior. dodo.ac is Nookipedia's CDN server.\n        stack:\n          type: integer\n          example: 30\n          description: How much the item can stack up to in a single inventory slot.\n        hha_base:\n          type: integer\n          example: 0\n          description: The base value that the item provides to a player's Happy Home Academy score when placed in their home.\n        sell:\n          type: integer\n          example: 200\n          description: The number of bells the item can be sold to Nook's store for.\n        is_fence:\n          type: boolean\n          example: false\n          description: Whether or not the item is a fence or not.\n        material_type:\n          type: string\n          example: Tree\n          description: (WIP) # TODO\n          enum:\n            - \"\"\n            - Bamboo\n            - Mushroom\n            - Trash\n            - Wood\n            - Ore\n            - Snowflake\n            - Tree\n            - Ornament\n            - Fruit\n            - Underwater\n            - Other\n            - Leaf\n            - Shell\n            - Flower\n            - Star Fragment\n            - Feather\n            - Egg\n            - Plant\n        material_seasonality:\n          type: string\n          example: Autumn\n          description: (WIP) # TODO\n        material_sort:\n          type: integer\n          example: 3\n          description: (WIP) # TODO\n        material_name_sort:\n          type: integer\n          example: 0\n          description: (WIP) # TODO\n        material_seasonality_sort:\n          type: integer\n          example: 3\n          description: (WIP) # TODO\n        edible:\n          type: boolean\n          example: false\n          description: Whether the item is edible or not.\n        plant_type:\n          type: string\n          example: \"\"\n          description: (WIP) # TODO\n          enum:\n            - \"\"\n            - Pumpkin\n            - Flower\n            - Bush\n            - Tree\n        version_added:\n          type: string\n          example: \"1.0.0\"\n          description: The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".\n        unlocked:\n          type: boolean\n          example: true\n          description: Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.\n        notes:\n          type: string\n          example: \"\"\n          description: Any additional miscellaneous information about the item, such as a name change from a past update.\n        availability:\n          type: array\n          items:\n            type: object\n            properties:\n              from:\n                type: string\n              note:\n                type: string\n          example:\n            - from: Nook's\n              note: \"\"\n          description: Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 280\n              currency: Bells\n          description: An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..\n    NHRecipe:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Flimsy Axe\n          description: The name of the recipe.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Item:Flimsy_Axe_(New_Horizons)'\n          description: Link to the respective Nookipedia article.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/a/ac/Flimsy_Axe_NH_DIY_Icon.png'\n          description: Image of the item the recipe crafts. dodo.ac is Nookipedia's CDN server.\n        serial_id:\n          type: integer\n          example: 100\n          description: The unique in-game ID of the recipe.\n        buy:\n          type: array\n          items:\n            type: object\n            properties:\n              price:\n                type: integer\n              currency:\n                type: string\n          example:\n            - price: 280\n              currency: Bells\n          description: 'An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).'\n        sell:\n          type: integer\n          example: 200\n          description: The number of Bells the sea creature can be sold to Nook's store for.\n        recipes_to_unlock:\n          type: integer\n          example: 0\n          description: How many recipes the player has to have learned to unlock this one.\n        availability:\n          type: array\n          items:\n            type: object\n            properties:\n              from:\n                type: string\n              note:\n                type: string\n          example:\n            - from: Tom Nook\n              note: Obtained through Tom Nook's DIY Workshop at the beginning of the game.\n            - from: Nook's Cranny\n              note: ''\n          description: 'Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.'\n        materials:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              count:\n                type: integer\n          example:\n            - name: Tree Branch\n              count: 5\n            - name: Stone\n              count: 1\n          description: The list of materials required to craft the item.\n    NHIndividualFossil:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Spino Skull\n          description: The name of the fossil.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Spinosaurus'\n          description: Link to the respective Nookipedia article.\n        image_url:\n          type: string\n          example: 'https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png'\n          description: Image of the fossil's icon. dodo.ac is Nookipedia's CDN server.\n        fossil_group:\n          type: string\n          example: 'Spinosaurus'\n          description: The name of the group that the fossil belongs to.\n        interactable:\n          type: boolean\n          example: false\n          description: Whether or not the item can be interacted with.\n        sell:\n          type: integer\n          example: 4000\n          description: The number of bells the item can be sold to Nook's store for.\n        hha_base:\n          type: integer\n          example: 87\n          description: The base value that the item provides to a player's Happy Home Academy score when placed in their home.\n        width:\n          type: integer\n          example: 2\n          description: The width of the fossil.\n        length:\n          type: integer\n          example: 2\n          description: The length of the fossil.\n        colors:\n          type: array\n          items:\n            type: string\n            enum:\n              - Aqua\n              - Beige\n              - Black\n              - Blue\n              - Brown\n              - Colorful\n              - Gray\n              - Green\n              - Orange\n              - Pink\n              - Purple\n              - Red\n              - White\n              - Yellow\n          example:\n            - Brown\n    NHFossilGroup:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Spinosaurus\n          description: The name of the fossil group.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Spinosaurus'\n          description: Link to the respective Nookipedia article.\n        room:\n          type: integer\n          example: 2\n          description: The room where the fossil group can be found in the museum's fossil section.\n        description:\n          type: string\n          example: 'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'\n          description: A description of the fossil group.\n    NHFossilGroupWithIndividualFossils:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Spinosaurus\n          description: The name of the fossil group.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Spinosaurus'\n          description: Link to the respective Nookipedia article.\n        room:\n          type: integer\n          example: 2\n          description: The room where the fossil group can be found in the museum's fossil section.\n        description:\n          type: string\n          example: 'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'\n          description: A description of the fossil group.\n        matched:\n          type: object\n          properties:\n            type:\n              type: string\n              example: individual\n              description: If the query given was a fossil group, `group` would be returned. Otherwise, `individual` is returned.\n            name:\n              type: string\n              example: Spino Skull\n              description: The name of the fossil or fossil group that matched the given query.\n        fossils:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                example: Spino Skull\n              url:\n                type: string\n              image_url:\n                type: string\n              fossil_group:\n                type: string\n              interactable:\n                type: boolean\n              sell:\n                type: integer\n              hha_base:\n                type: integer\n              width:\n                type: integer\n              length:\n                type: integer\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                  - Aqua\n                  - Beige\n                  - Black\n                  - Blue\n                  - Brown\n                  - Colorful\n                  - Gray\n                  - Green\n                  - Orange\n                  - Pink\n                  - Purple\n                  - Red\n                  - White\n                  - Yellow\n          example:\n            - name: 'Spino Skull'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png'\n              interactable: true\n              sell: 4000\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n            - name: 'Spino Tail'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png'\n              interactable: true\n              sell: 2500\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n            - name: 'Spino Torso'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png'\n              interactable: true\n              sell: 3000\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n          description: An array of objects, each object representing a fossil that belongs to the given group.\n    NHFossilGroupWithIndividualFossilsNoMatched:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Spinosaurus\n          description: The name of the fossil group.\n        url:\n          type: string\n          example: 'https://nookipedia.com/wiki/Spinosaurus'\n          description: Link to the respective Nookipedia article.\n        room:\n          type: integer\n          example: 2\n          description: The room where the fossil group can be found in the museum's fossil section.\n        description:\n          type: string\n          example: 'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'\n          description: A description of the fossil group.\n        fossils:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                example: Spino Skull\n              url:\n                type: string\n              image_url:\n                type: string\n              fossil_group:\n                type: string\n              interactable:\n                type: boolean\n              sell:\n                type: integer\n              hha_base:\n                type: integer\n              width:\n                type: integer\n              length:\n                type: integer\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                  - Aqua\n                  - Beige\n                  - Black\n                  - Blue\n                  - Brown\n                  - Colorful\n                  - Gray\n                  - Green\n                  - Orange\n                  - Pink\n                  - Purple\n                  - Red\n                  - White\n                  - Yellow\n          example:\n            - name: 'Spino Skull'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png'\n              interactable: true\n              sell: 4000\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n            - name: 'Spino Tail'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png'\n              interactable: true\n              sell: 2500\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n            - name: 'Spino Torso'\n              url: 'https://nookipedia.com/wiki/Spinosaurus'\n              image_url: 'https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png'\n              interactable: true\n              sell: 3000\n              hha_base: 87\n              width: 2\n              length: 2\n              colors:\n                - Brown\n          description: An array of objects, each object representing a fossil that belongs to the given group.\n",
			"canonicalURL": "/github.com/Nookipedia/nookipedia-api@c0ea49bed69d55db668e7fc0218e27f14916d6c7/-/blob/static/doc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Nookipedia/nookipedia-api/blob/c0ea49bed69d55db668e7fc0218e27f14916d6c7/static/doc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}