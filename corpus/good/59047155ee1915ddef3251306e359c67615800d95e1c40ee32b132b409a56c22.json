{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/maubot/maubot"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "maubot/management/api/spec.yaml",
			"byteSize": 21866,
			"content": "openapi: 3.0.0\ninfo:\n  title: Maubot Management\n  version: 0.1.0\n  description: The API to manage a [maubot](https://github.com/maubot/maubot) instance\n  license:\n    name: GNU Affero General Public License version 3\n    url: 'https://github.com/maubot/maubot/blob/master/LICENSE'\nsecurity:\n- bearer: []\nservers:\n- url: /_matrix/maubot/v1\n\npaths:\n  /auth/login:\n    post:\n      operationId: login\n      summary: Log in with the unshared secret or username+password\n      tags: [Authentication]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Set either username+password or secret.\n              properties:\n                secret:\n                  type: string\n                  description: The unshared server secret for root login\n                username:\n                  type: string\n                  description: The username for normal login\n                password:\n                  type: string\n                  description: The password for normal login\n      responses:\n        200:\n          description: Logged in successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n        401:\n          description: Invalid credentials\n  /auth/ping:\n    post:\n      operationId: ping\n      summary: Check if the given token is valid\n      tags: [Authentication]\n      responses:\n        200:\n          description: Token is OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  username:\n                    type: string\n        401:\n          description: Token is not OK\n\n  /plugins:\n    get:\n      operationId: get_plugins\n      summary: Get the list of installed plugins\n      tags: [Plugins]\n      responses:\n        200:\n          description: The list of plugins\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Plugin'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /plugins/upload:\n    post:\n      operationId: upload_plugin\n      summary: Upload a new plugin\n      description: Upload a new plugin. If the plugin already exists, enabled instances will be restarted.\n      tags: [Plugins]\n      parameters:\n      - name: allow_override\n        in: query\n        description: Set to allow overriding existing plugins\n        required: false\n        schema:\n          type: boolean\n          default: false\n      requestBody:\n        content:\n          application/zip:\n            schema:\n              type: string\n              format: binary\n              example: The plugin maubot archive (.mbp)\n      responses:\n        200:\n          description: Plugin uploaded and replaced current version successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        201:\n          description: New plugin uploaded successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        409:\n          description: Plugin already exists and allow_override was not specified.\n  '/plugin/{id}':\n    parameters:\n    - name: id\n      in: path\n      description: The ID of the plugin to get\n      required: true\n      schema:\n        type: string\n    get:\n      operationId: get_plugin\n      summary: Get information about a specific plugin\n      tags: [Plugins]\n      responses:\n        200:\n          description: Plugin found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/PluginNotFound'\n    delete:\n      operationId: delete_plugin\n      summary: Delete a plugin\n      description: Delete a plugin. All instances of the plugin must be deleted before deleting the plugin.\n      tags: [Plugins]\n      responses:\n        204:\n          description: Plugin deleted\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/PluginNotFound'\n        412:\n          description: One or more plugin instances of this type exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      operationId: put_plugin\n      summary: Upload a new or replacement plugin\n      description: |\n        Upload a new or replacement plugin with the specified ID.\n        A HTTP 400 will be returned if the ID of the uploaded plugin\n        doesn't match the ID in the path. If the plugin already\n        exists, enabled instances will be restarted.\n      tags: [Plugins]\n      requestBody:\n        content:\n          application/zip:\n            schema:\n              type: string\n              format: binary\n              example: The plugin maubot archive (.mbp)\n      responses:\n        200:\n          description: Plugin uploaded and replaced current version successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        201:\n          description: New plugin uploaded successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /plugin/{id}/reload:\n    parameters:\n    - name: id\n      in: path\n      description: The ID of the plugin to get\n      required: true\n      schema:\n        type: string\n    post:\n      operationId: reload_plugin\n      summary: Reload a plugin from disk\n      tags: [Plugins]\n      responses:\n        200:\n          description: Plugin reloaded\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/PluginNotFound'\n\n  /instances:\n    get:\n      operationId: get_instances\n      summary: Get all plugin instances\n      tags: [Plugin instances]\n      responses:\n        200:\n          description: The list of instances\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PluginInstance'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  '/instance/{id}':\n    parameters:\n    - name: id\n      in: path\n      description: The ID of the instance to get\n      required: true\n      schema:\n        type: string\n    get:\n      operationId: get_instance\n      summary: Get information about a specific plugin instance\n      tags: [Plugin instances]\n      responses:\n        200:\n          description: Plugin instance found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginInstance'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/InstanceNotFound'\n    delete:\n      operationId: delete_instance\n      summary: Delete a specific plugin instance\n      tags: [Plugin instances]\n      responses:\n        204:\n          description: Plugin instance deleted\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/InstanceNotFound'\n    put:\n      operationId: update_instance\n      summary: Create a plugin instance or edit the details of an existing plugin instance\n      tags: [Plugin instances]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PluginInstance'\n      responses:\n        200:\n          description: Plugin instance edited\n        201:\n          description: Plugin instance created\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          description: The referenced client or plugin type could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/clients':\n    get:\n      operationId: get_clients\n      summary: Get the list of Matrix clients\n      tags: [Clients]\n      responses:\n        200:\n          description: The list of plugins\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MatrixClient'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /client/new:\n    post:\n      operationId: create_client\n      summary: Create a Matrix client\n      tags: [Clients]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MatrixClient'\n      responses:\n        201:\n          description: Client created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/ClientNotFound'\n        409:\n          description: There is already a client with the user ID of that token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/client/{id}':\n    parameters:\n    - name: id\n      in: path\n      description: The Matrix user ID of the client to get\n      required: true\n      schema:\n        type: string\n    get:\n      operationId: get_client\n      summary: Get information about a specific Matrix client\n      tags: [Clients]\n      responses:\n        200:\n          description: Client found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/ClientNotFound'\n    put:\n      operationId: update_client\n      summary: Create or update a Matrix client\n      tags: [Clients]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MatrixClient'\n      responses:\n        202:\n          description: Client updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        201:\n          description: Client created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n    delete:\n      operationId: delete_client\n      summary: Delete a Matrix client\n      tags: [Clients]\n      responses:\n        204:\n          description: Client deleted\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/ClientNotFound'\n        412:\n          description: One or more plugin instances with this as their primary client exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/client/{id}/clearcache':\n    parameters:\n    - name: id\n      in: path\n      description: The Matrix user ID of the client to change\n      required: true\n      schema:\n        type: string\n    put:\n      operationId: clear_client_cache\n      summary: Clear the sync/state cache of a Matrix client\n      tags: [Clients]\n      responses:\n        200:\n          description: Cache cleared\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/ClientNotFound'\n  /client/auth/servers:\n    get:\n      operationId: get_client_auth_servers\n      summary: Get the list of servers you can register or log in on via the maubot server\n      tags: [Clients]\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Key-value map from server name to homeserver URL\n                additionalProperties:\n                  type: string\n                  description: The homeserver URL\n                example:\n                  maunium.net: https://maunium.net\n                  example.com: https://matrix.example.org\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  '/client/auth/{server}/register':\n    parameters:\n    - name: server\n      in: path\n      description: The server name to register the account on.\n      required: true\n      schema:\n        type: string\n    - name: update_client\n      in: query\n      description: Should maubot store the access details in a Client instead of returning them?\n      required: false\n      schema:\n        type: boolean\n    post:\n      operationId: client_auth_register\n      summary: |\n        Register a new account on the given Matrix server using the shared registration\n        secret configured into the maubot server.\n      tags: [Clients]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MatrixAuthentication'\n      responses:\n        200:\n          description: Registration successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                    example: syt_123_456_789\n                  user_id:\n                    type: string\n                    example: '@putkiteippi:maunium.net'\n                  device_id:\n                    type: string\n                    example: maubot_F00BAR12\n        201:\n          description: Client created (when update_client is true)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        409:\n          description: |\n            There is already a client with the user ID of that token.\n            This should usually not happen, because the user ID was just created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          $ref: '#/components/responses/MatrixServerError'\n  '/client/auth/{server}/login':\n    parameters:\n    - name: server\n      in: path\n      description: The server name to log in to.\n      required: true\n      schema:\n        type: string\n    - name: update_client\n      in: query\n      description: Should maubot store the access details in a Client instead of returning them?\n      required: false\n      schema:\n        type: boolean\n    post:\n      operationId: client_auth_login\n      summary: Log in to the given Matrix server via the maubot server\n      tags: [Clients]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MatrixAuthentication'\n      responses:\n        200:\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user_id:\n                    type: string\n                    example: '@putkiteippi:maunium.net'\n                  access_token:\n                    type: string\n                    example: syt_123_456_789\n                  device_id:\n                    type: string\n                    example: maubot_F00BAR12\n        201:\n          description: Client created (when update_client is true)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        202:\n          description: Client updated (when update_client is true)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatrixClient'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/MatrixServerError'\n\ncomponents:\n  responses:\n    Unauthorized:\n      description: Invalid or missing access token\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    PluginNotFound:\n      description: Plugin not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ClientNotFound:\n      description: Client not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InstanceNotFound:\n      description: Plugin instance not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: Bad request (e.g. bad request body)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    MatrixServerError:\n      description: The Matrix server returned an error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errcode:\n                type: string\n                description: The `errcode` returned by the server.\n              error:\n                type: string\n                description: The human-readable error returned by the server.\n              http_status:\n                type: integer\n                description: The HTTP status returned by the server.\n\n  securitySchemes:\n    bearer:\n      type: http\n      scheme: bearer\n      description: Required authentication for all endpoints\n  schemas:\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: A human-readable error message\n        errcode:\n          type: string\n          description: A simple error code\n    Plugin:\n      type: object\n      properties:\n        id:\n          type: string\n          example: xyz.maubot.jesaribot\n        version:\n          type: string\n          example: 2.0.0\n        instances:\n          type: array\n          items:\n            $ref: '#/components/schemas/PluginInstance'\n    PluginInstance:\n      type: object\n      properties:\n        id:\n          type: string\n          example: jesaribot\n        type:\n          type: string\n          example: xyz.maubot.jesaribot\n        enabled:\n          type: boolean\n          example: true\n        started:\n          type: boolean\n          example: true\n        primary_user:\n          type: string\n          example: '@putkiteippi:maunium.net'\n        config:\n          type: string\n          example: \"YAML\"\n    MatrixClient:\n      type: object\n      properties:\n        id:\n          type: string\n          example: '@putkiteippi:maunium.net'\n          readOnly: true\n          description: The Matrix user ID of this client.\n        homeserver:\n          type: string\n          example: 'https://maunium.net'\n          description: The homeserver URL for this client.\n        access_token:\n          type: string\n          description: The Matrix access token for this client.\n        device_id:\n          type: string\n          description: The Matrix device ID corresponding to the access token.\n        fingerprint:\n          type: string\n          description: The encryption device fingerprint for verification.\n        enabled:\n          type: boolean\n          example: true\n          description: Whether or not this client is enabled.\n        started:\n          type: boolean\n          example: true\n          description: Whether or not this client and its instances have been started.\n        sync:\n          type: boolean\n          example: true\n          description: Whether or not syncing is enabled on this client.\n        sync_ok:\n          type: boolean\n          example: true\n          description: Whether or not the previous sync was successful on this client.\n        autojoin:\n          type: boolean\n          example: true\n          description: Whether or not this client should automatically join rooms when invited.\n        displayname:\n          type: string\n          example: J. E. Saarinen\n          description: The display name for this client.\n        avatar_url:\n          type: string\n          example: 'mxc://maunium.net/FsPQQTntCCqhJMFtwArmJdaU'\n          description: The content URI of the avatar for this client.\n        instances:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/PluginInstance'\n    MatrixAuthentication:\n      type: object\n      properties:\n        username:\n          type: string\n          example: putkiteippi\n          description: The user ID localpart to register/log in as.\n        password:\n          type: string\n          example: p455w0rd\n          description: The password for/of the user.\n",
			"canonicalURL": "/github.com/maubot/maubot@cc5f9141fcffc11d5cddb95f2d75603fea791e7e/-/blob/maubot/management/api/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/maubot/maubot/blob/cc5f9141fcffc11d5cddb95f2d75603fea791e7e/maubot/management/api/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}