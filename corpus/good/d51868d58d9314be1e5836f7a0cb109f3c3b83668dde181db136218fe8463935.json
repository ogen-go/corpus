{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/City-of-Helsinki/respa"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 55031,
			"content": "openapi: 3.0.1\ninfo:\n  title: Respa\n  description: The Respa API provides categorized data on resources available for reservation within a city or metropolitan area\n    and enables the reservation of these resources. The API provides data in the JSON format, in a RESTful fashion.\n  version: 1.6.2\nservers:\n- url: https://api.hel.fi/respa/v1\n- url: https://respa.koe.hel.ninja/v1\ntags:\n- name: resource\n  description: Look for available resources\n- name: reservation\n  description: Make or change your reservations\n- name: unit\n  description: Places where resources are located\n- name: equipment\n  description: Equipment available for use in the resources\n- name: filter\n  description: Properties you can use in filtering resources\n- name: search\n  description: Typeahead suggestions for objects\npaths:\n  /search/:\n    get:\n      tags:\n      - search\n      description: |-\n        Get typeahead suggestions for objects based on an arbitrary user input (the `input` query parameter).\n        Currently supported are \"resource\" and \"unit\".\n      parameters:\n      - name: input\n        in: query\n        description: Query search parameter\n        required: true\n        schema:\n          type: string\n      - name: full\n        in: query\n        description: Return all properties with the objects\n        schema:\n          type: boolean\n      - name: types\n        in: query\n        description: Return only objects of the specified types\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  unit:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/unit'\n                  resource:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/resource'\n  /unit/:\n    get:\n      tags:\n      - unit\n      description: The unit endpoint returns units (libraries, youth centers etc.) listed in the reservation system. The optional\n        parameter **page** allows specifying page number and **page_size** allows specifying more than the default 20 units per page.\n      parameters:\n      - name: resource_group\n        in: query\n        description: Only return units whose resources belong to the speficied resource\n          group(s). Accepts multiple comma-separated values.\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of units per page\n        schema:\n          type: integer\n      - name: unit_has_resource\n        in: query\n        description: Only return units that either have or do not have related resources,\n          based on the boolean value given.\n        schema:\n          type: boolean\n      - name: include\n        in: query\n        description: Include extra data to queryset. Currently accepts value `accessibility_summaries`.\n        schema:\n          type: string\n        example: accessibility_summaries\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/unit'\n  /unit/{id}/:\n    get:\n      tags:\n      - unit\n      description: The unit endpoint returns units (libraries, youth\n        centers etc.) listed in the reservation system.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier for the unit in the service registry.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/unit'\n  /purpose/:\n    get:\n      tags:\n      - filter\n      description: The purpose endpoint returns the possible resource usage purposes registered in the system.\n        The optional parameter **page** allows specifying page number and **page_size** allows specifying more than the default\n        50 purposes per page.\n      parameters:\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of purposes per page\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/purpose'\n  /purpose/{id}/:\n    get:\n      tags:\n      - filter\n      description: The purpose endpoint returns the possible resource usage purposes\n        registered in the system.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the usage purpose.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/purpose'\n  /type/:\n    get:\n      tags:\n      - filter\n      description: The type endpoint returns the possible resource types registered in the system. The optional parameter **page**\n        allows specifying page number and **page_size** allows specifying more than the default 20 units per page.\n      parameters:\n      - name: resource_group\n        in: query\n        description: Only return types for which there are resources that belong to\n          the speficied resource group(s). Accepts multiple comma-separated values.\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of types per page\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/type'\n  /type/{id}/:\n    get:\n      tags:\n      - filter\n      description: The type endpoint returns the possible resource types registered\n        in the system.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the resource type.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/type'\n  /equipment/:\n    get:\n      tags:\n      - equipment\n      description: The equipment endpoint returns the pieces of equipment of the resources. The optional parameter **page** allows\n        specifying page number and **page_size** allows specifying more than the default 20 pieces of equipment per page.\n      parameters:\n      - name: resource_group\n        in: query\n        description: Only return pieces of equipment that belong to the speficied\n          resource group(s). Accepts multiple comma-separated values. Use equipment ID.\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of pieces of equipment per page\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/equipment'\n  /equipment/{id}/:\n    get:\n      tags:\n      - equipment\n      description: The equipment endpoint returns the pieces of equipment of the resources.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier for the piece of equipment.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/equipment'\n  /equipmentcategory/:\n    get:\n      tags:\n      - equipment\n      description: The equipment category endpoint returns the possible categories for the pieces of equipment. The optional parameter\n        **page** allows specifying page number and **page_size** allows specifying more than the default 20 equipment categories per page.\n      parameters:\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of equipment categories per page\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/equipmentcategory'\n  /equipmentcategory/{id}/:\n    get:\n      tags:\n      - equipment\n      description: The equipment category endpoint returns the possible categories\n        for the pieces of equipment.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier for the equipment category in the service registry.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/equipmentcategory'\n  /resource/:\n    get:\n      tags:\n      - resource\n      description: The resource endpoint returns resources (e.g. meeting rooms) listed in the reservation system,\n        allowing queries based on resource purpose, type, name and availability. Availability can be specified for a desired\n        duration in a desired time interval. This allows fetching only the resources that match a particular need at a particular time.\n        The optional **page** parameter allows specifying page number and **page_size** allows specifying more than the default 20 units per page.\n      parameters:\n      - name: purpose\n        in: query\n        description: Only return resources that have the specified purpose(s)\n        schema:\n          type: string\n        example: meetings-and-working\n      - name: type\n        in: query\n        description: Only return resources of the specified type(s). Accepts multiple\n          comma-separated values.\n        schema:\n          type: string\n        example: av5k4tflpjvq\n      - name: search\n        in: query\n        description: Only return resources matching the specified string. Queries the resource name, description and unit name fields.\n        schema:\n          type: string\n      - name: start\n        in: query\n        description: Use together with `end`. Only return resources that are free\n          within the specified interval. Accepts ISO 8601 format.\n        schema:\n          type: string\n          format: date-time\n      - name: end\n        in: query\n        description: Use together with `start`. Only return resources that are free\n          within the specified interval. Accepts ISO 8601 format.\n        schema:\n          type: string\n          format: date-time\n      - name: duration\n        in: query\n        description: Use together with `start` and `end`. Only return resources that\n          are free for a consecutive period of `duration` minutes within the specified\n          interval.\n        schema:\n          type: number\n      - name: during_closing\n        in: query\n        description: Use together with `start` and `end`. Include resources that are\n          free but closed within the specified interval.\n        schema:\n          type: boolean\n      - name: people\n        in: query\n        description: Only return resources with greater or equal capacity\n        schema:\n          type: number\n        example: 2\n      - name: equipment\n        in: query\n        description: Only return resources that contain the specified piece(s) of\n          equipment. Accepts multiple comma-separated values of equipment ID.\n        schema:\n          type: string\n      - name: resource_group\n        in: query\n        description: Only return resources that belong to the speficied resource group(s).\n          Accepts multiple comma-separated values.\n        schema:\n          type: string\n      - name: unit\n        in: query\n        description: Only return resources that belong to the specified unit.\n        schema:\n          type: string\n        example: tprek:51342\n      - name: need_manual_confirmation\n        in: query\n        description: Only return resources that need or do not need manual confirmation,\n          based on the boolean value.\n        schema:\n          type: boolean\n      - name: is_favorite\n        in: query\n        description: Only return resources that are or are not favorited by authenticated\n          user, based on the boolean value.\n        schema:\n          type: boolean\n      - name: available_between\n        in: query\n        description: Only return resources that are open and free on the given datetime\n          range. Expects two comma-separated datetimes as start and end time. Accepts\n          also a third comma-separated value (period length in minutes), which can\n          be used to determine a minimum free slot length that must exists in the\n          main time range.\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n        example: 1\n      - name: page_size\n        in: query\n        description: Number of resources per page\n        schema:\n          type: integer\n        example: 10\n      - name: lat\n        in: query\n        description: Use together with `lon` and `distance`. Specifies latitude to\n          return only resources that are within the given `distance`.\n        schema:\n          type: number\n        example: 60.1695096\n      - name: lon\n        in: query\n        description: Use together with `lat` and `distance`. Specifies longitude to\n          return only resources that are within the given `distance`.\n        schema:\n          type: number\n        example: 24.9405559\n      - name: distance\n        in: query\n        description: Use together with `lat` and `long`. Returns only resources that\n          are within the given `distance` of the point which is calculated from `lat`\n          and `lon`.\n        schema:\n          type: number\n        example: 10000.2\n      - name: free_of_charge\n        in: query\n        description: If given boolean is `true`, returns only resources that have\n          their `min_price` value of `0` or `None`. If given boolean is `false`,\n          returns resources that have their `min_price` greater than 0.\n        schema:\n          type: boolean\n      - name: municipality\n        in: query\n        description: Only return resources that belong to units that are located in\n          the given municipality.\n        schema:\n          type: string\n        example: helsinki\n      - name: order_by\n        in: query\n        description: Order queryset by given resource fields, accepted values are\n          `resource_name_fi`, `resource_name_en`, `resource_name_sv`, `unit_name_fi`,\n          `unit_name_en`, `unit_name_sv`, `type`, `people_capacity`, `accessibility`. Prefix parameter\n          value with `-` to get reverse ordering.\n        schema:\n          type: string\n        example: resource_name_fi\n      - name: accessibility_viewpoint\n        in: query\n        description: Use together with `order_by` `accessibility`. Determines the viewpoint for accessibility ordering using the viewpoint ID.\n        schema:\n          type: number\n        example: 11\n      - name: include\n        in: query\n        description: Include extra data to queryset. Currently accepts values `unit_detail`, `accessibility_summaries`.\n        schema:\n          type: string\n        example: unit_detail\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/resource'\n                        - type: object\n                          properties:\n                            products:\n                              type: array\n                              items:\n                                $ref: '#/components/schemas/product'\n  /resource/{id}/:\n    get:\n      tags:\n      - resource\n      description: The resource endpoint returns resources (meeting rooms, workstations,\n        reservable spaces etc.) listed in the reservation system.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier for the resource in the reservation system.\n        required: true\n        schema:\n          type: string\n      - name: start\n        in: query\n        description: Use together with `end`. Specifies starting time for reporting\n          opening hours, availability and reservations.\n        schema:\n          type: string\n          format: date-time\n      - name: end\n        in: query\n        description: Use together with `start`. Specifies ending time for reporting\n          opening hours, availability and reservations.\n        schema:\n          type: string\n          format: date-time\n      - name: duration\n        in: query\n        description: Use together with `start` and `end`. Specifies minimum free period\n          duration for resource availability.\n        schema:\n          type: number\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/resource'\n                  - type: object\n                    properties:\n                      products:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/product'\n  /reservation/:\n    get:\n      tags:\n      - reservation\n      description: The reservation endpoint returns reservations listed in the reservation system. The optional parameter **page**\n        allows specifying page number and **page_size** allows specifying more than the default 20 units per page.\n      parameters:\n      - name: page\n        in: query\n        description: Result page number\n        schema:\n          type: integer\n      - name: page_size\n        in: query\n        description: Number of reservations per page\n        schema:\n          type: integer\n      - name: resource\n        in: query\n        description: Resource id, for filtering reservations by resource. Accepts multiple comma-separated values.\n        schema:\n          type: string\n      - name: all\n        in: query\n        description: Display also past reservations. Default to false.\n        schema:\n          type: boolean\n      - name: need_manual_confirmation\n        in: query\n        description: Filter reservations based on their need of a manual confirmation\n          from unit personnel.\n        schema:\n          type: boolean\n      - name: reserver_info_search\n        in: query\n        description: Only return reservations matching the specified string. Queries the\n          reserver's name, email and phone number.\n        schema:\n          type: string\n      - name: state\n        in: query\n        description: 'Display only reservation(s) in given state(s). Possible values:\n          cancelled, confirmed, denied and requested.'\n        schema:\n          type: string\n      - name: can_approve\n        in: query\n        description: Display reservations that the request user has the right to approve.\n        schema:\n          type: boolean\n      - name: resource_group\n        in: query\n        description: Only return reservations for resources that belong to the speficied\n          resource group(s). Accepts multiple comma-separated values.\n        schema:\n          type: string\n      - name: event_subject\n        in: query\n        description: Only return reservations that has given parameter in the event\n          subject.\n        schema:\n          type: string\n      - name: host_name\n        in: query\n        description: Only return reservations that has given parameter in the host\n          name field.\n        schema:\n          type: string\n      - name: reserver_name\n        in: query\n        description: Only return reservations that has given parameter in the reserver\n          name field.\n        schema:\n          type: string\n      - name: resource_name\n        in: query\n        description: Only return reservations that has given parameter in the resource\n          name field.\n        schema:\n          type: string\n      - name: unit\n        in: query\n        description: Only return reservations for resources that belong to the specified\n          unit.\n        schema:\n          type: string\n      - name: start\n        in: query\n        description: The starting time of the reservation in ISO 8601 format.\n        schema:\n          type: string\n      - name: end\n        in: query\n        description: The ending time of the reservation in ISO 8601 format.\n        schema:\n          type: string\n      - name: has_catering_order\n        in: query\n        description: Return only reservations which either have or do not have related\n          catering orders based on the boolean value.\n        schema:\n          type: boolean\n      - name: is_favorite_resource\n        in: query\n        description: Return only reservations that are related to resource that either\n          is or is not favorited by user, based on the boolean value.\n        schema:\n          type: boolean\n      - name: user\n        in: query\n        description: Return only reservations that are related to given user. Expects\n          to recieve user's UUID.\n        schema:\n          type: string\n      - name: is_own\n        in: query\n        description: Return only own reservations\n        schema:\n          type: boolean\n      - name: include\n        in: query\n        description: Include extra data to queryset. Currently accepts values `resource_detail` and `order_detail` (available only when the payment support is enabled).\n          To get more than one extra data entry, use multiple include parameters eg. `?include=resource_detail\u0026include=order_detail`.\n        schema:\n          type: string\n        example: resource_detail\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  next:\n                    type: string\n                    description: URL for the next page\n                  prev:\n                    type: string\n                    description: URL for the previous page\n                  count:\n                    type: integer\n                    description: The total number of results\n                  results:\n                    type: array\n                    items:\n                      allOf:\n                        - $ref: '#/components/schemas/reservation'\n                        - $ref: '#/components/schemas/order_just_id'\n    post:\n      tags:\n      - reservation\n      description: The reservation endpoint accepts reservations.\n      requestBody:\n        description: The reservation you wish to make\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/reservation'\n                - $ref: '#/components/schemas/order_creation_request'\n        required: true\n      responses:\n        201:\n          description: Reservation created\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/reservation'\n                  - $ref: '#/components/schemas/order_creation_response'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  non_field_errors:\n                    type: string\n                    description: The reason the reservation was not accepted\n  /reservation/{id}/:\n    get:\n      tags:\n      - reservation\n      description: The reservation endpoint returns reservations listed in the reservation\n        system.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the reservation in the reservation system.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/reservation'\n                  - $ref: '#/components/schemas/order_just_id'\n    put:\n      tags:\n      - reservation\n      description: The reservation endpoint allows editing existing reservations.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the reservation in the reservation system.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: The reservation data you wish to edit\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/reservation'\n        required: true\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/reservation'\n                  - $ref: '#/components/schemas/order_just_id'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  non_field_errors:\n                    type: string\n                    description: The reason the change was not accepted\n    patch:\n      tags:\n      - reservation\n      description: The reservation endpoint allows changing state of reservation with a reason message\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the reservation in the reservation system.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: The reservation data you wish to edit. State and cancel reason currently allowed with patch.\n        content:\n          'application/json':\n            schema:\n              properties:\n                  state:\n                    description: New state for the reservation\n                    type: string\n                  cancel_reason:\n                    description: Reason object for reservation cancellation / denial\n                    type: object\n                    $ref: '#/components/schemas/cancel_reason_write'\n              required:\n                - status\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/reservation'\n                  - $ref: '#/components/schemas/order_just_id'\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  non_field_errors:\n                    type: string\n                    description: The reason the change was not accepted\n    delete:\n      tags:\n      - reservation\n      description: The reservation endpoint allows deleting existing reservations.\n      parameters:\n      - name: id\n        in: path\n        description: Unique identifier of the reservation in the reservation system.\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Reservation deleted\n          content: {}\n  /order/check_price/:\n    post:\n      tags:\n        - order\n      description: Check the price of an order (available only when the payment support is enabled)\n      requestBody:\n        description: The order data for which one wishes to find out the price\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/order_check_price_request'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/order_check_price_response'\n  /cancel_reason_category/:\n    get:\n      tags:\n      - cancel_reason\n      description: Predefined categories for cancellation reason for reservations. Includes predefined notification messages in all languages.\n      parameters:\n      - name: reservation_type\n        in: query\n        description: \"Filtering parameter for type of reservation for which this cancel reason category is used. Choices: confirmed, requested, own.\"\n        schema:\n          type: string\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cancel_reason_category'\n\ncomponents:\n  schemas:\n    unit:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier for the unit in the service registry.\n        opening_hours_today:\n          type: object\n          properties: {}\n          description: \"\"\n        created_at:\n          type: string\n          description: \"\"\n        modified_at:\n          type: string\n          description: \"\"\n        name:\n          type: object\n          properties:\n            sv:\n              type: string\n              description: Swedish name for the unit\n            fi:\n              type: string\n              description: Finnish name for the unit\n            en:\n              type: string\n              description: English name for the unit\n        description:\n          type: string\n          description: \"\"\n        time_zone:\n          type: string\n          description: tz database name of the time zone used at the unit\n        street_address:\n          type: object\n          properties:\n            sv:\n              type: string\n              description: Swedish address for the unit\n            fi:\n              type: string\n              description: Finnish address for the unit\n            en:\n              type: string\n              description: English address for the unit\n        address_zip:\n          type: string\n          description: Zip code for the street address\n        phone:\n          type: string\n          description: Phone number\n        email:\n          type: string\n          description: Contact email address\n        www_url:\n          type: object\n          properties:\n            sv:\n              type: string\n              description: Swedish WWW URL for the unit\n            fi:\n              type: string\n              description: Finnish WWW URL for the unit\n            en:\n              type: string\n              description: English WWW URL for the unit\n        address_postal_full:\n          type: string\n          description: \"\"\n        picture_url:\n          type: string\n          description: URL of unit picture\n        picture_caption:\n          type: string\n          description: \"\"\n        created_by:\n          type: string\n          description: \"\"\n        modified_by:\n          type: string\n          description: \"\"\n        location:\n          $ref: '#/components/schemas/location'\n    purpose:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the usage purpose\n        parent:\n          type: string\n          description: The parent purpose of this purpose, or null, if this purpose\n            is main purpose type\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: The purpose in Finnish\n            en:\n              type: string\n              description: The purpose in Finnish\n    resource:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the resource in the reservation system\n        purposes:\n          type: array\n          description: Usage purposes for this resource\n          items:\n            $ref: '#/components/schemas/purpose'\n        type:\n          $ref: '#/components/schemas/type'\n        available_hours:\n          type: array\n          description: The intervals when the resource is not reserved during the\n            queried period\n          items:\n            type: object\n            properties: {}\n        opening_hours:\n          type: array\n          description: The intervals when the resource is open during the queried\n            period\n          items:\n            type: object\n            properties: {}\n        reservable:\n          type: boolean\n          description: Is it possible to create or modify reservations for this resource\n            through the API. Even if this is false, reservations by other means (eg.\n            phone call) might still be possible.\n        reservable_max_days_in_advance:\n          minimum: 0\n          type: integer\n          description: Reservable max. days in advance, accepts null value\n        reservable_min_days_in_advance:\n          minimum: 0\n          type: integer\n          description: Reservable min. days in advance, accepts null value\n        reservations:\n          type: array\n          description: The reservations made for the resource during the queried period\n          items:\n            $ref: '#/components/schemas/reservation'\n        created_at:\n          type: string\n        modified_at:\n          type: string\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Resource name in Finnish\n        description:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Resource description in Finnish\n        photo:\n          type: string\n          description: URL of resource picture\n        need_manual_confirmation:\n          type: boolean\n          description: Does making a reservation require confirmation from the unit\n            personnel?\n        authentication:\n          type: string\n          description: The type of authentication required to reserve the resource\n        people_capacity:\n          type: number\n          description: The maximum number of people for the resource\n        area:\n          type: number\n          description: The floor area, in sq. m.\n        ground_plan:\n          type: string\n          description: URL of the floor plan\n        min_period:\n          type: string\n          description: The minimum duration of a reservation for the resource, in\n            hh:mm:ss\n        max_period:\n          type: string\n          description: The maximum duration of a reservation for the resource, in\n            hh:mm:ss\n        created_by:\n          type: string\n        modified_by:\n          type: string\n        unit:\n          type: string\n          description: Unique identifier for the unit where the resource is located\n        location:\n          $ref: '#/components/schemas/location'\n        equipment:\n          type: object\n          properties:\n            data:\n              type: object\n              additionalProperties:\n                type: string\n              description: Additional data related to the resource specific equipment\n                instance\n            name:\n              type: object\n              properties:\n                fi:\n                  type: string\n                  description: Finnish name for the piece of equipment\n                sv:\n                  type: string\n                  description: Swedish name for the piece of equipment\n                en:\n                  type: string\n                  description: English name for the piece of equipment\n            description:\n              type: string\n              description: Description of the resource specific equipment instance\n            id:\n              type: string\n              description: Unique identifier of the piece of equipment\n          description: The resource specific equipment instances\n        external_reservation_url:\n          type: string\n          description: URL to an external calendar for the resource.\n          format: uri\n    equipmentcategory:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the equipment category\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Finnish name for the equipment category\n            sv:\n              type: string\n              description: Swedish name for the equipment category\n            en:\n              type: string\n              description: English name for the equipment category\n        equipment:\n          type: array\n          description: The pieces of equipment that belong to the equipment category\n          items:\n            type: object\n            properties:\n              name:\n                type: object\n                properties:\n                  fi:\n                    type: string\n                    description: Finnish name for the piece of equipment\n                  sv:\n                    type: string\n                    description: Swedish name for the piece of equipment\n                  en:\n                    type: string\n                    description: English name for the piece of equipment\n              id:\n                type: string\n                description: Unique identifier of the piece of equipment\n    reservation:\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL of the reservation\n        resource:\n          type: string\n          description: Unique identifier of the reserved resource\n        user:\n          type: string\n          description: Unique identifier of the user who made the reservation\n        begin:\n          type: string\n          description: The starting time of the reservation in ISO 8601 format\n        end:\n          type: string\n          description: The ending time of the reservation in ISO 8601 format\n        is_own:\n          type: boolean\n          description: Is the reservation is made by the current user.\n          readOnly: true\n        state:\n          type: string\n          description: The state the reservation is currently in.\n          enum:\n          - cancelled\n          - confirmed\n          - denied\n          - requested\n          - waiting_for_payment\n        type:\n          type: string\n          description: Type of the reservation\n          enum:\n          - normal\n          - blocked\n        need_manual_confirmation:\n          type: boolean\n          description: Does the reservation require a confirmation from the unit personnel?\n          readOnly: true\n        reserver_name:\n          type: string\n          description: Reserver name\n        reserver_phone_number:\n          type: string\n          description: Reserver phone number\n        reserver_address_street:\n          type: string\n          description: Reserver street address\n        reserver_address_zip:\n          type: string\n          description: Reserver address zip code\n        reserver_address_city:\n          type: string\n          description: Reserver address city\n        billing_address_street:\n          type: string\n          description: Billing street address\n        billing_address_zip:\n          type: string\n          description: Billing address zip code\n        billing_address_city:\n          type: string\n          description: Billing address city\n        billing_first_name:\n          type: string\n          description: Billpayer's first name\n        billing_last_name:\n          type: string\n          description: Billpayer's last name\n        billing_phone_number:\n          type: string\n          description: Billpayer's phone number\n        billing_email_address:\n          type: string\n          description: Billpayer's email address\n        company:\n          type: string\n          description: Reserver company\n        event_description:\n          type: string\n          description: Description of the event the reservation is for\n        business_id:\n          type: string\n          description: Business ID of the reserver company\n        number_of_participants:\n          type: integer\n          description: Number of participants in the reservation\n        reserver_email_address:\n          type: string\n          description: Reserver email address\n        cancel_reason:\n          $ref: '#/components/schemas/cancel_reason_read'\n    equipment:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the piece of equipment\n        category:\n          type: object\n          properties:\n            name:\n              type: object\n              properties:\n                fi:\n                  type: string\n                  description: Finnish name for the equipment category\n                sv:\n                  type: string\n                  description: Swedish name for the equipment category\n                en:\n                  type: string\n                  description: English name for the equipment category\n            id:\n              type: string\n              description: Unique identifier of the equipment category\n          description: The equipment category the piece of equipment belongs to\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Finnish name for the piece of equipment\n            sv:\n              type: string\n              description: Swedish name for the piece of equipment\n            en:\n              type: string\n              description: English name for the piece of equipment\n        aliases:\n          type: array\n          description: Aliases for the piece of equipment\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: The name of the equipment alias\n              language:\n                type: string\n                description: The language of the equipment alias. \"fi\", \"sv\" or \"en\".\n    location:\n      type: object\n      properties:\n        type:\n          type: string\n          description: GeoJSON object geometry type\n        coordinates:\n          type: array\n          description: GeoJSON object coordinates\n          items:\n            type: number\n    type:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the resource type\n        main_type:\n          type: string\n          description: The main category of this resource type\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Resource type in Finnish\n    product:\n      type: object\n      description: Products represent everything one can order and pay related to reservations. A product can be the mandatory rent of the resource, or some optional extra accessories. (available only when the payment support is enabled)\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the product\n        type:\n          type: string\n          description: |\n            - `rent`: At least one product of type `rent` must be ordered when such is available on the resource.\n            - `extra`: Ordering of products of type `extra` is not mandatory, so when there are only `extra` products available, one can create a reservation without an order. However, when an order is created, even with just extra product(s), it must be paid to get the reservation confirmed.\n          enum:\n            - rent\n            - extra\n        name:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Finnish name\n            sv:\n              type: string\n              description: Swedish name\n            en:\n              type: string\n              description: English name\n        description:\n          type: object\n          properties:\n            fi:\n              type: string\n              description: Finnish description\n            sv:\n              type: string\n              description: Swedish description\n            en:\n              type: string\n              description: English description\n        price:\n          type: object\n          description: Price data of the product. Has always at least `type` field. Existence of other fields depends on the type.\n          properties:\n            type:\n              type: string\n              description: |\n                - `fixed`: The price stays always the same regardless of the reservation, so if `amount` is `10.00` the final price is 10.00 EUR.\n                   Other price fields present with this type: `tax_percentage` and `amount`.\n                - `per_period`: When price type is `per_period`, field `period` contains length of the period, for example if `amount` is `10.00` and `period` is `00:30:00` it means the actual price is 10.00 EUR / 0.5h.\n                   Other price fields present with this type: `tax_percentage`, `amount` and `period.\n              enum:\n                - fixed\n                - per_period\n            tax_percentage:\n              description: Present when `type` is `fixed` or `per_period`.\n              type: string\n              enum:\n                - \"0.00\"\n                - \"10.00\"\n                - \"14.00\"\n                - \"24.00\"\n            amount:\n              type: string\n              description: |\n                The product's price in euros. However, there are different ways the value should be interpreted depending on `type` field's value.\n                Present when `type` is `fixed` or `per_period`.\n            period:\n              type: string\n              description: |\n                When `type` is `per_period`, this field contains the period's duration, format hh:mm:ss.\n                Present when `type` is `per_period`.\n        max_quantity:\n          type: integer\n          description: The maximum quantity of this product in a single order\n          minimum: 1\n    order_just_id:\n      type: object\n      properties:\n        order:\n          type: string\n          description: ID of the order (available only when the payment support is enabled)\n    order_line_read:\n      type: object\n      properties:\n        quantity:\n          type: integer\n          minimum: 1\n        unit_price:\n          type: string\n        price:\n          type: string\n        product:\n          $ref: '#/components/schemas/product'\n    order_line_write:\n      type: object\n      properties:\n        quantity:\n          type: integer\n          minimum: 1\n        product:\n          type: string\n          description: ID of the product\n    order_request_base:\n      type: object\n      properties:\n        order_lines:\n          type: array\n          items:\n            $ref: '#/components/schemas/order_line_write'\n    order_response_base:\n      type: object\n      properties:\n        order_lines:\n          type: array\n          items:\n            $ref: '#/components/schemas/order_line_read'\n        price:\n          type: string\n    order_creation_request:\n      type: object\n      properties:\n        order:\n          allOf:\n            - $ref: '#/components/schemas/order_request_base'\n            - type: object\n              description: Order data containing products ordered alongside the reservation (available only when the payment support is enabled)\n              properties:\n                return_url:\n                  type: string\n                  description: URL to the frontend where the user is redirected after the payment has been completed\n    order_creation_response:\n      type: object\n      properties:\n        order:\n          allOf:\n            - $ref: '#/components/schemas/order_response_base'\n            - type: object\n              description: Order data containing products ordered alongside the reservation (available only when the payment support is enabled)\n              properties:\n                id:\n                  type: string\n                  description: ID of the order\n                state:\n                  type: string\n                  enum:\n                    - waiting\n                    - confirmed\n                    - rejected\n                    - expired\n                    - cancelled\n                payment_url:\n                  type: string\n                  description: URL to the payment provider's site where the user should be redirected to execute the payment\n    order_check_price_base:\n      type: object\n      properties:\n        begin:\n          type: string\n          description: Begin timestamp, format hh:mm:ss\n        end:\n          type: string\n          description: End timestamp, format hh:mm:ss\n    order_check_price_request:\n      allOf:\n        - $ref: '#/components/schemas/order_request_base'\n        - $ref: '#/components/schemas/order_check_price_base'\n    order_check_price_response:\n      allOf:\n        - $ref: '#/components/schemas/order_response_base'\n        - $ref: '#/components/schemas/order_check_price_base'\n    cancel_reason_write:\n      type: object\n      properties:\n        description:\n          type: string\n          description: Free description of reason of reservations cancellation\n        category_id:\n          type: integer\n          description: Id of reservation cancellation reason category to be used for cancellation\n    cancel_reason_read:\n      type: object\n      properties:\n        description:\n          type: string\n          description: Free description of reason of reservations cancellation\n        category:\n          $ref: '#/components/schemas/cancel_reason_category'\n    cancel_reason_category:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Id of the category\n        reservation_type:\n          type: string\n          description: \"Type of reservation for which this cancel reason category is used. Choices: confirmed, requested, own.\"\n        name:\n          type: object\n          properties:\n            sv:\n              type: string\n              description: Swedish name for the cancel reason category\n            fi:\n              type: string\n              description: Finnish name for the cancel reason category\n            en:\n              type: string\n              description: English name for the cancel reason category\n        description:\n          type: object\n          properties:\n            sv:\n              type: string\n              description: Swedish full description for the cancel reason category\n            fi:\n              type: string\n              description: Finnish full description for the cancel reason category\n            en:\n              type: string\n              description: English full description for the cancel reason category\n",
			"canonicalURL": "/github.com/City-of-Helsinki/respa@016f1873ed36b7625eaec57134edca91aaf5d63b/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/City-of-Helsinki/respa/blob/016f1873ed36b7625eaec57134edca91aaf5d63b/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}