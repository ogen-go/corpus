{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "elm.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/elm.yaml",
			"byteSize": 6537,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Elm generator test\n  license:\n    name: MIT\nservers:\n  - url: http://localhost:9000\npaths:\n  /data:\n    post:\n      tags:\n        - primitive\n      operationId: update\n      requestBody:\n        description: Request body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Primitive\"\n      responses:\n        \"200\":\n          description: Default response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Primitive\"\n  /header:\n    post:\n      parameters:\n        - name: string\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: integer\n          in: header\n          schema:\n            type: integer\n        - name: headerType\n          in: header\n          schema:\n            type: string\n            enum: [left, right]\n      responses:\n        \"200\":\n          description: Default response\n          content:\n            application/json:\n              schema:\n                type: string\n  /maybe:\n    get:\n      responses:\n        \"200\":\n          description: Default response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Maybe\"\n  /path/{string}/{integer}/{enumeration}:\n    get:\n      parameters:\n        - name: string\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: integer\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: enumeration\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [a, b, c]\n      responses:\n        \"200\":\n          description: Default response\n  /query:\n    get:\n      parameters:\n        - name: string\n          in: query\n          schema:\n            type: string\n        - name: int\n          in: query\n          schema:\n            type: integer\n        - name: enum\n          in: query\n          schema:\n            type: string\n            enum: [a, b, c]\n      responses:\n        \"200\":\n          description: Default response\n  /secured:\n    post:\n      summary: Secured endpoint\n      security:\n        - BearerAuth: []\n      responses:\n        \"200\":\n          description: Authenticated\n        \"401\":\n          description: Unauthenticated\n  /uuid:\n    get:\n      parameters:\n        - name: value\n          in: query\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: Default response\n          content:\n            application/json:\n              schema:\n                type: string\n                format: uuid\ncomponents:\n  schemas:\n    Absent:\n      description: Model having absent and null values\n      required:\n        - required\n        - requiredNullable\n      properties:\n        default:\n          type: string\n        required:\n          type: string\n        nullable:\n          type: string\n          nullable: true\n        requiredNullable:\n          type: string\n          nullable: true\n    Array:\n      description: Model with arrays\n      required:\n        - array\n        - arrayOfArray\n      properties:\n        array:\n          type: array\n          items:\n            type: string\n        arrayOfArray:\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n        arrayOfPrimitve:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Primitive\"\n        arrayOfEnum:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Enum\"\n    Composed:\n      description: Composed model\n      allOf:\n        - $ref: \"#/components/schemas/ComposedBase\"\n        - type: object\n          properties:\n            value:\n              type: string\n    ComposedBase:\n      required:\n        - base\n      properties:\n        base:\n          type: number\n    Discriminated:\n      description: Discriminated model\n      required:\n        - kind\n      properties:\n        kind:\n          type: string\n      discriminator:\n        propertyName: kind\n    DiscriminatedA:\n      allOf:\n        - $ref: \"#/components/schemas/Discriminated\"\n        - type: object\n          properties:\n            a:\n              type: string\n    DiscriminatedB:\n      allOf:\n        - $ref: \"#/components/schemas/Discriminated\"\n        - type: object\n          properties:\n            b:\n              type: string\n    Enum:\n      type: string\n      enum:\n        - foo\n        - bar\n        - baz\n    Enumeric:\n      type: number\n      enum:\n        - 1\n        - 2\n        - 3\n    Maybe:\n      description: Model using reserved words\n      properties:\n        type:\n          type: string\n        if:\n          type: boolean\n    OneOf:\n      description: One of two models\n      oneOf:\n        - $ref: \"#/components/schemas/OneOfA\"\n        - $ref: \"#/components/schemas/OneOfB\"\n    OneOfA:\n      properties:\n        a:\n          type: string\n    OneOfB:\n      properties:\n        b:\n          type: string\n    Primitive:\n      description: Model with primitive properties\n      properties:\n        string:\n          type: string\n        number:\n          type: number\n        float:\n          type: number\n          format: float\n        double:\n          type: number\n          format: double\n        integer:\n          type: integer\n        short:\n          type: integer\n          format: int32\n        long:\n          type: integer\n          format: int64\n        boolean:\n          type: boolean\n    Recursion:\n      properties:\n        maybe:\n          $ref: \"#/components/schemas/Recursion\"\n        list:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Recursion\"\n        ref:\n          $ref: \"#/components/schemas/RecursionLoop\"\n    RecursionLoop:\n      properties:\n        ref:\n          $ref: \"#/components/schemas/Recursion\"\n    UnsafeCharacters:\n      description: Model using unsafe characters\n      properties:\n        $prefix:\n          type: string\n        suffix$:\n          type: string\n        r@nd0m_$t#ff:\n          type: string\n        _before:\n          type: string\n        after_:\n          type: string\n        _both_:\n          type: string\n        in_the_middle:\n          type: string\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/-/blob/modules/openapi-generator/src/test/resources/3_0/elm.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/modules/openapi-generator/src/test/resources/3_0/elm.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}