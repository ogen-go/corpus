{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alekras/erl.mqtt.server"
		},
		"file": {
			"name": "mqtt_rest_v3.yaml",
			"size": 0,
			"path": "mqtt_rest_v3.yaml",
			"byteSize": 5901,
			"content": "openapi: 3.0.1\ninfo:\n  title: MQTT server API\n  description: \u003e-\n    This is a RESTful API of MQTT server. The API manages user database of MQTT server.\n    See for details https://github.com/alekras/erl.mqtt.server\n  contact:\n    email: krasnop@bellsouth.net\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.1\n\nexternalDocs:\n  description: Find out more about Erlang MQTT server\n  url: https://github.com/alekras/erl.mqtt.server\n\nservers:\n- url: '{protocol}://{server}:{port}/rest'\n  variables:\n    protocol:\n      enum:\n        - http\n        - https\n      default: http\n    server:\n      enum:\n        - lucky3p.com\n        - localhost\n      default: localhost\n    port:\n      default: '8880'\ntags:\n- name: user\n  description: Manage user database\n  externalDocs:\n    description: Find out more\n    url: http://lucky3p.com\npaths:\n  /user/{user_name}:\n    get:\n      tags:\n      - user\n      summary: Get user's information\n      description: Returns a user's password in md5 format and list of roles\n      operationId: getUserInfo\n      parameters:\n      - name: user_name\n        in: path\n        description: User name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid user name supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n      - user\n      summary: Add a new user to the database\n      operationId: createNewUser\n      parameters:\n      - name: user_name\n        in: path\n        description: User name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: User's password in md5 format and roles\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        '201':\n          description: Successful operation\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n      - user\n      summary: Delete user in the database\n      operationId: deleteUser\n      parameters:\n      - name: user_name\n        in: path\n        description: User name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successfully deleted\n        '204':\n          description: Already deleted\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user/{user_name}/status:\n    get:\n      tags:\n      - user\n      summary: Get user connection status\n      description: Returns a user connection status\n      operationId: getStatus\n      parameters:\n      - name: user_name\n        in: path\n        description: User name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionStatus'\n        '400':\n          description: Invalid user name supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user/status:\n    get:\n      tags:\n      - user\n      summary: Get user connection statuses\n      description: Returns a list of user statuses\n      operationId: getAllStatuses\n      parameters:\n      - name: users\n        in: query\n        description: List of user names\n        required: true\n        style: form\n        explode: false\n        schema:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        example: alex,sam,john\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionStatusList'\n        '400':\n          description: Invalid user name supplied\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\nsecurity:\n  - ApiKeyAuth: []\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n  schemas:\n    User:\n      type: object\n      properties:\n        password:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n      required: \n        - password\n    ConnectionStatus:\n      type: object\n      properties:\n        id:\n          type: string\n        status:\n          type: string\n          enum: ['on', 'off', 'notFound']\n      required: \n        - id\n    ConnectionStatusList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ConnectionStatus'\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n",
			"canonicalURL": "/github.com/alekras/erl.mqtt.server@8c3a619180f94b63530ae260399a7a6ba58dc006/-/blob/mqtt_rest_v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/alekras/erl.mqtt.server/blob/8c3a619180f94b63530ae260399a7a6ba58dc006/mqtt_rest_v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}