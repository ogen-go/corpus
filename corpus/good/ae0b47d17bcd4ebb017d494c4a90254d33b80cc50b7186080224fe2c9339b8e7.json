{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openfoodfacts/robotoff"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "doc/api.yml",
			"byteSize": 8989,
			"content": "openapi: 3.0.0\ninfo:\n  title: API Reference\n  description: |\n    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.\n\n    All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`.\n\n    Robotoff can interact with all Openfoodfacts products: Openfoodfacts, Openbeautyfacts, etc. and all environments (production, development, pro). The `server_domain` field should be used to specify the product/environment: `api.openfoodfacts.org` for OFF-prod, `api.openfoodfacts.net` for OFF-dev, `api.openbeautyfacts.org` for OBF-prod,...\n  contact: {}\n  version: \"1.0\"\nservers:\n  - url: https://robotoff.openfoodfacts.org/api/v1/\n    description: Production server\n  - url: https://robotoff.openfoodfacts.net/api/v1/\n    description: Preproduction server\n\npaths:\n  /questions/{barcode}:\n    get:\n      tags:\n        - Questions\n      summary: Get questions for a given product\n      operationId: getQuestionsBarcode\n      parameters:\n        - name: barcode\n          in: path\n          description: The product barcode\n          required: true\n          style: simple\n          schema:\n            type: string\n        - name: lang\n          in: query\n          description: The language of the question/value\n          required: false\n          schema:\n            type: string\n            default: en\n        - name: count\n          in: query\n          description: The number of questions to return\n          required: false\n          schema:\n            type: number\n            default: 1\n            minimum: 1\n        - name: server_domain\n          in: query\n          description: The server domain\n          required: false\n          schema:\n            type: string\n            default: api.openfoodfacts.org\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - \"no_questions\"\n                      - \"found\"\n                  questions:\n                    type: array\n                    items:\n                      type: object\n\n      deprecated: false\n  /questions/random:\n    get:\n      tags:\n        - Questions\n      summary: Get random questions\n      operationId: getQuestionsRandom\n      parameters:\n        - name: lang\n          in: query\n          description: The language of the question/value\n          required: false\n          schema:\n            type: string\n            default: en\n        - name: count\n          in: query\n          description: The number of questions to return\n          required: false\n          schema:\n            type: number\n            default: 1\n            minimum: 1\n        - name: server_domain\n          in: query\n          description: The server domain\n          required: false\n          schema:\n            type: string\n            default: api.openfoodfacts.org\n        - name: insight_types\n          in: query\n          description: Comma-separated list, filter by insight types\n          required: false\n          schema:\n            type: string\n        - name: country\n          in: query\n          description: Filter by country tag\n          required: false\n          schema:\n            type: string\n        - name: brands\n          in: query\n          description: Comma-separated list, filter by brands\n          required: false\n          schema:\n            type: string\n        - name: value_tag\n          in: query\n          description: Filter by value tag, i.e the value that is going to be sent to Openfoodfacts\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content: {}\n      deprecated: false\n  /insights/random:\n    get:\n      tags:\n        - Insights\n      summary: Get a random insight\n      operationId: Getarandominsight\n      parameters:\n        - name: count\n          in: query\n          description: The number of results to return\n          required: false\n          schema:\n            type: number\n            default: 1\n            minimum: 1\n        - name: server_domain\n          in: query\n          description: The server domain\n          required: false\n          schema:\n            type: string\n            default: api.openfoodfacts.org\n        - name: type\n          in: query\n          description: filter by insight type\n          required: false\n          schema:\n            type: string\n        - name: country\n          in: query\n          description: Filter by country tag\n          required: false\n          schema:\n            type: string\n        - name: value_tag\n          in: query\n          description: Filter by value_tag\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  insights:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/InsightSearchResult\"\n\n      deprecated: false\n  /insights/{barcode}:\n    get:\n      tags:\n        - Insights\n      summary: Get all insights for a specific product\n      description: \u003e-\n        Return all insights associated with a specific product.\n\n        + server_domain (str, optional) - server domain. Default to 'api.openfoodfacts.org'\n      operationId: Getallinsightsforaspecificproduct\n      parameters:\n        - name: barcode\n          in: path\n          description: \"\"\n          required: true\n          style: simple\n          schema:\n            type: integer\n            example: Product barcode\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content: {}\n      deprecated: false\n  /insights/detail/{id}:\n    get:\n      tags:\n        - Insights\n      summary: Get a specific insight\n      operationId: Getaspecificinsight\n      parameters:\n        - name: id\n          in: path\n          description: \"ID of the insight\"\n          required: true\n          style: simple\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content: {}\n      deprecated: false\n  /insights/annotate:\n    post:\n      tags:\n        - Insights\n      summary: Submit an annotation\n      operationId: Submitanannotation\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                insight_id:\n                  type: string\n                  description: ID of the insight\n                annotation:\n                  type: integer\n                  description: \"Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for `unknown`\"\n                  enum:\n                    - 0\n                    - 1\n                    - -1\n                update:\n                  type: integer\n                  description: \"Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side\"\n                  default: 1\n                  enum:\n                    - 0\n                    - 1\n              required:\n                - \"insight_id\"\n                - \"annotation\"\n      responses:\n        \"200\":\n          description: \"\"\n          headers: {}\n          content: {}\n      deprecated: false\ncomponents:\n  schemas:\n    InsightSearchResult:\n      description: An insight search result as returned by /insights/random or /insights/{barcode}\n      required:\n        - id\n        - type\n        - barcode\n        - countries\n      type: object\n      properties:\n        id:\n          type: string\n          description: Insight ID\n        type:\n          type: string\n          description: Insight type\n        barcode:\n          type: integer\n          description: Barcode of the product\n        countries:\n          type: array\n          description: country tags of the product\n          items:\n            type: string\n      example:\n        id: 3cd5aecd-edcc-4237-87d0-6595fc4e53c9\n        type: label\n        barcode: 9782012805866\n\ntags:\n  - name: Questions\n  - name: Insights\n    description: |\n      An insight is a fact about a product that has been either extracted or inferred from the product pictures, characteristics,...\n      If the insight is correct, the Openfoodfacts DB can be updated accordingly.\n\n      Current insight types and their description can be found in [robotoff/insights/dataclass.py](https://github.com/openfoodfacts/robotoff/blob/master/robotoff/insights/dataclass.py).\n",
			"canonicalURL": "/github.com/openfoodfacts/robotoff@0a6686e627c44ad662a61a56db6a589d47a0f913/-/blob/doc/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openfoodfacts/robotoff/blob/0a6686e627c44ad662a61a56db6a589d47a0f913/doc/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}