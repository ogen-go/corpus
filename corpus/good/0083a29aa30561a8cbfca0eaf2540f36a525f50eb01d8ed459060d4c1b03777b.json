{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/apideck.com/pos/8.32.6/openapi.yaml",
			"byteSize": 306366,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://unify.apideck.com\ninfo:\n  contact:\n    email: hello@apideck.com\n    url: https://developers.apideck.com\n  description: |+\n    Welcome to the POS API.\n\n    You can use this API to access all POS API endpoints.\n\n    ## Base URL\n\n    The base URL for all API requests is `https://unify.apideck.com`\n\n    ## GraphQL\n\n    Use the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.\n\n    ## Headers\n\n    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n    | Name                  | Type    | Required | Description                                                                                                                                                    |\n    | --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n    | x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n    | x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n    | x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n    | Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n    ## Authorization\n\n    You can interact with the API through the authorization methods below.\n\n    \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\n\n    ## Pagination\n\n    All API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\n    To fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\n    In the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n    ### Query Parameters\n\n    | Name   | Type   | Required | Description                                                                                                        |\n    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n    | cursor | String | No       | Cursor to start from. You can find cursors for next \u0026 previous pages in the meta.cursors property of the response. |\n    | limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n    ### Response Body\n\n    | Name                  | Type   | Description                                                        |\n    | --------------------- | ------ | ------------------------------------------------------------------ |\n    | meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n    | meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n    | meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n    | meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n    | links.previous        | String | Link to navigate to the previous page of results through the API   |\n    | links.current         | String | Link to navigate to the current page of results through the API    |\n    | links.next            | String | Link to navigate to the next page of results through the API       |\n\n    ⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n    ## SDKs and API Clients\n\n    Upcoming. [Request the SDK of your choice](https://integrations.apideck.com/request).\n\n    ## Debugging\n\n    Because of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n    ## Errors\n\n    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n    | Code | Title                | Description                                                                                                                                                                                              |\n    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n    | 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n    ### Handling errors\n\n    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n    ### Error Types\n\n    #### RequestValidationError\n\n    Request is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n    #### UnsupportedFiltersError\n\n    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n    #### UnsupportedSortFieldError\n\n    Sort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n    #### InvalidCursorError\n\n    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n    #### ConnectorExecutionError\n\n    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n    #### UnauthorizedError\n\n    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n    #### ConnectorCredentialsError\n\n    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n    #### ConnectorDisabledError\n\n    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n    #### ConnectorRateLimitError\n\n    You sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n    #### RequestLimitError\n\n    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.\n\n    #### EntityNotFoundError\n\n    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n    #### OAuthCredentialsNotFoundError\n\n    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n    #### IntegrationNotFoundError\n\n    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n    #### ConnectionNotFoundError\n\n    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n    #### ConnectionSettingsError\n\n    The connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n    #### ConnectorNotFoundError\n\n    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n    #### OAuthRedirectUriError\n\n    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n    #### OAuthInvalidStateError\n\n    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n    #### OAuthCodeExchangeError\n\n    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n    #### OAuthConnectorError\n\n    It seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    #### MappingError\n\n    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n    #### ConnectorMappingNotFoundError\n\n    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    #### ConnectorResponseMappingNotFoundError\n\n    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    #### ConnectorOperationMappingNotFoundError\n\n    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    #### ConnectorWorkflowMappingError\n\n    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    #### ConnectorOperationUnsupportedError\n\n    You're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n    #### PaginationNotSupportedError\n\n    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n    ## API Design\n\n    ### API Styles and data formats\n\n    #### REST API\n\n    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n    ##### Available HTTP methods\n\n    The Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n    ```\n    POST /messages\n    GET /messages\n    GET /messages/{messageId}\n    PATCH /messages/{messageId}\n    DELETE /messages/{messageId}\n    ```\n\n    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n    ### Schema\n\n    All API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n    ### Meta\n\n    Meta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n    ### Idempotence (upcoming)\n\n    To prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.\n\n    Uniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)\n\n    ### Request IDs\n\n    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n    ### Fixed field types\n\n    #### Dates\n\n    The dates returned by the API are all represented in UTC (ISO8601 format).\n\n    This example `2019-11-14T00:55:31.820Z` is defined by the ISO 8601 standard. The T in the middle separates the year-month-day portion from the hour-minute-second portion. The Z on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The Z is pronounced \"Zulu\" per military/aviation tradition.\n\n    The ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n    #### Prices and Currencies\n\n    All prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\n    For zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\n    All currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n    ## Support\n\n    If you have problems or need help with your case, you can always reach out to our Support.\n\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: POS API\n  version: 8.32.6\n  x-apideck-api: pos\n  x-apideck-sdk-support: true\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://developers.apideck.com/icon.png\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/pos.yml\n      version: \"3.0\"\n  x-providerName: apideck.com\n  x-serviceName: pos\n  x-tags:\n    - partner\nexternalDocs:\n  description: Apideck Developer Docs\n  url: https://developers.apideck.com\nsecurity:\n  - apiKey: []\ntags:\n  - description: \"\"\n    name: Orders\n    x-apideck-model:\n      $ref: \"#/components/schemas/Order\"\n    x-apideck-resource-id: orders\n  - description: \"\"\n    name: Payments\n    x-apideck-model:\n      $ref: \"#/components/schemas/PosPayment\"\n    x-apideck-resource-id: payments\n  - description: \"\"\n    name: Merchants\n    x-apideck-model:\n      $ref: \"#/components/schemas/Merchant\"\n    x-apideck-resource-id: merchants\n  - description: \"\"\n    name: Locations\n    x-apideck-model:\n      $ref: \"#/components/schemas/Location\"\n    x-apideck-resource-id: locations\n  - description: \"\"\n    name: Items\n    x-apideck-model:\n      $ref: \"#/components/schemas/Item\"\n    x-apideck-resource-id: items\n  - description: \"\"\n    name: Modifiers\n    x-apideck-model:\n      $ref: \"#/components/schemas/Modifier\"\n    x-apideck-resource-id: modifiers\n  - description: \"\"\n    name: Modifier Groups\n    x-apideck-model:\n      $ref: \"#/components/schemas/ModifierGroup\"\n    x-apideck-resource-id: modifier-groups\n  - description: \"\"\n    name: Order Types\n    x-apideck-model:\n      $ref: \"#/components/schemas/OrderType\"\n    x-apideck-resource-id: order-types\n  - description: \"\"\n    name: Tenders\n    x-apideck-model:\n      $ref: \"#/components/schemas/Tender\"\n    x-apideck-resource-id: tenders\npaths:\n  /pos/items:\n    get:\n      description: List Items\n      operationId: itemsAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetItemsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Items\n      tags:\n        - Items\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.itemsAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: items\n    post:\n      description: Create Item\n      operationId: itemsAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Item\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateItemResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Item\n      tags:\n        - Items\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              item: {\n                id: '#cocoa',\n                idempotency_key: 'random_string',\n                name: 'Cocoa',\n                description: 'Hot Chocolate',\n                abbreviation: 'Ch',\n                product_type: 'regular',\n                price_amount: 10,\n                pricing_type: 'fixed',\n                price_currency: 'USD',\n                cost: 2,\n                tax_ids: ['12345', '67890'],\n                absent_at_location_ids: ['12345', '67890'],\n                present_at_all_locations: false,\n                sku: '11910345',\n                code: '11910345',\n                categories: [\n                  {\n                    id: '12345',\n                    name: 'Food',\n                    image_ids: ['12345', '67890']\n                  }\n                ],\n                options: [\n                  {\n                    id: '12345',\n                    name: 'Option 1',\n                    attribute_id: '12345'\n                  }\n                ],\n                variations: [\n                  {\n                    id: '12345',\n                    name: 'Food',\n                    sku: '11910345',\n                    item_id: '12345',\n                    sequence: 0,\n                    pricing_type: 'fixed',\n                    price_amount: 10,\n                    price_currency: 'USD',\n                    image_ids: ['12345', '67890']\n                  }\n                ],\n                available: true,\n                hidden: true,\n                deleted: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.itemsAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/items/{id}\":\n    delete:\n      description: Delete Item\n      operationId: itemsDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteItemResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Item\n      tags:\n        - Items\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.itemsDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Item\n      operationId: itemsOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetItemResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Item\n      tags:\n        - Items\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.itemsOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Item\n      operationId: itemsUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Item\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateItemResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Item\n      tags:\n        - Items\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              item: {\n                id: '#cocoa',\n                idempotency_key: 'random_string',\n                name: 'Cocoa',\n                description: 'Hot Chocolate',\n                abbreviation: 'Ch',\n                product_type: 'regular',\n                price_amount: 10,\n                pricing_type: 'fixed',\n                price_currency: 'USD',\n                cost: 2,\n                tax_ids: ['12345', '67890'],\n                absent_at_location_ids: ['12345', '67890'],\n                present_at_all_locations: false,\n                sku: '11910345',\n                code: '11910345',\n                categories: [\n                  {\n                    id: '12345',\n                    name: 'Food',\n                    image_ids: ['12345', '67890']\n                  }\n                ],\n                options: [\n                  {\n                    id: '12345',\n                    name: 'Option 1',\n                    attribute_id: '12345'\n                  }\n                ],\n                variations: [\n                  {\n                    id: '12345',\n                    name: 'Food',\n                    sku: '11910345',\n                    item_id: '12345',\n                    sequence: 0,\n                    pricing_type: 'fixed',\n                    price_amount: 10,\n                    price_currency: 'USD',\n                    image_ids: ['12345', '67890']\n                  }\n                ],\n                available: true,\n                hidden: true,\n                deleted: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.itemsUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/locations:\n    get:\n      description: List Locations\n      operationId: locationsAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetLocationsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Locations\n      tags:\n        - Locations\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.locationsAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: locations\n    post:\n      description: Create Location\n      operationId: locationsAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Location\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateLocationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Location\n      tags:\n        - Locations\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              location: {\n                name: 'Dunkin Donuts',\n                business_name: 'Dunkin Donuts LLC',\n                address: {\n                  id: '123',\n                  type: 'primary',\n                  string: '25 Spring Street, Blackburn, VIC 3130',\n                  name: 'HQ US',\n                  line1: 'Main street',\n                  line2: 'apt #',\n                  line3: 'Suite #',\n                  line4: 'delivery instructions',\n                  street_number: '25',\n                  city: 'San Francisco',\n                  state: 'CA',\n                  postal_code: '94104',\n                  country: 'US',\n                  latitude: '40.759211',\n                  longitude: '-73.984638',\n                  county: 'Santa Clara',\n                  contact_name: 'Elon Musk',\n                  salutation: 'Mr',\n                  phone_number: '111-111-1111',\n                  fax: '122-111-1111',\n                  email: 'elon@musk.com',\n                  website: 'https://elonmusk.com',\n                  row_version: '1-12345'\n                },\n                status: 'active',\n                merchant_id: '12345',\n                currency: 'USD'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.locationsAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/locations/{id}\":\n    delete:\n      description: Delete Location\n      operationId: locationsDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteLocationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Location\n      tags:\n        - Locations\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.locationsDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Location\n      operationId: locationsOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetLocationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Location\n      tags:\n        - Locations\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.locationsOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Location\n      operationId: locationsUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Location\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateLocationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Location\n      tags:\n        - Locations\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              location: {\n                name: 'Dunkin Donuts',\n                business_name: 'Dunkin Donuts LLC',\n                address: {\n                  id: '123',\n                  type: 'primary',\n                  string: '25 Spring Street, Blackburn, VIC 3130',\n                  name: 'HQ US',\n                  line1: 'Main street',\n                  line2: 'apt #',\n                  line3: 'Suite #',\n                  line4: 'delivery instructions',\n                  street_number: '25',\n                  city: 'San Francisco',\n                  state: 'CA',\n                  postal_code: '94104',\n                  country: 'US',\n                  latitude: '40.759211',\n                  longitude: '-73.984638',\n                  county: 'Santa Clara',\n                  contact_name: 'Elon Musk',\n                  salutation: 'Mr',\n                  phone_number: '111-111-1111',\n                  fax: '122-111-1111',\n                  email: 'elon@musk.com',\n                  website: 'https://elonmusk.com',\n                  row_version: '1-12345'\n                },\n                status: 'active',\n                merchant_id: '12345',\n                currency: 'USD'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.locationsUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/merchants:\n    get:\n      description: List Merchants\n      operationId: merchantsAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetMerchantsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Merchants\n      tags:\n        - Merchants\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.merchantsAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: merchants\n    post:\n      description: Create Merchant\n      operationId: merchantsAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Merchant\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateMerchantResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Merchant\n      tags:\n        - Merchants\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              merchant: {\n                name: 'Dunkin Donuts',\n                address: {\n                  id: '123',\n                  type: 'primary',\n                  string: '25 Spring Street, Blackburn, VIC 3130',\n                  name: 'HQ US',\n                  line1: 'Main street',\n                  line2: 'apt #',\n                  line3: 'Suite #',\n                  line4: 'delivery instructions',\n                  street_number: '25',\n                  city: 'San Francisco',\n                  state: 'CA',\n                  postal_code: '94104',\n                  country: 'US',\n                  latitude: '40.759211',\n                  longitude: '-73.984638',\n                  county: 'Santa Clara',\n                  contact_name: 'Elon Musk',\n                  salutation: 'Mr',\n                  phone_number: '111-111-1111',\n                  fax: '122-111-1111',\n                  email: 'elon@musk.com',\n                  website: 'https://elonmusk.com',\n                  row_version: '1-12345'\n                },\n                owner_id: '12345',\n                main_location_id: '12345',\n                status: 'active',\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ],\n                language: 'EN',\n                currency: 'USD'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.merchantsAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/merchants/{id}\":\n    delete:\n      description: Delete Merchant\n      operationId: merchantsDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteMerchantResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Merchant\n      tags:\n        - Merchants\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.merchantsDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Merchant\n      operationId: merchantsOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetMerchantResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Merchant\n      tags:\n        - Merchants\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.merchantsOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Merchant\n      operationId: merchantsUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Merchant\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateMerchantResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Merchant\n      tags:\n        - Merchants\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              merchant: {\n                name: 'Dunkin Donuts',\n                address: {\n                  id: '123',\n                  type: 'primary',\n                  string: '25 Spring Street, Blackburn, VIC 3130',\n                  name: 'HQ US',\n                  line1: 'Main street',\n                  line2: 'apt #',\n                  line3: 'Suite #',\n                  line4: 'delivery instructions',\n                  street_number: '25',\n                  city: 'San Francisco',\n                  state: 'CA',\n                  postal_code: '94104',\n                  country: 'US',\n                  latitude: '40.759211',\n                  longitude: '-73.984638',\n                  county: 'Santa Clara',\n                  contact_name: 'Elon Musk',\n                  salutation: 'Mr',\n                  phone_number: '111-111-1111',\n                  fax: '122-111-1111',\n                  email: 'elon@musk.com',\n                  website: 'https://elonmusk.com',\n                  row_version: '1-12345'\n                },\n                owner_id: '12345',\n                main_location_id: '12345',\n                status: 'active',\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ],\n                language: 'EN',\n                currency: 'USD'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.merchantsUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/modifier-groups:\n    get:\n      description: List Modifier Groups\n      operationId: modifierGroupsAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetModifierGroupsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Modifier Groups\n      tags:\n        - Modifier Groups\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifierGroupsAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: modifierGroups\n    post:\n      description: Create Modifier Group\n      operationId: modifierGroupsAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModifierGroup\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateModifierGroupResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Modifier Group\n      tags:\n        - Modifier Groups\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              modifierGroup: {\n                name: 'Modifier',\n                alternate_name: 'Modifier New',\n                minimum_required: 1,\n                maximum_allowed: 5,\n                selection_type: 'single',\n                present_at_all_locations: false,\n                modifiers: [\n                  {\n                    id: '12345',\n                    name: 'Modifier',\n                    alternate_name: 'Modifier New',\n                    price_amount: 10,\n                    currency: 'USD',\n                    available: true\n                  }\n                ],\n                deleted: true,\n                row_version: '1-12345'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.modifierGroupsAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/modifier-groups/{id}\":\n    delete:\n      description: Delete Modifier Group\n      operationId: modifierGroupsDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteModifierGroupResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Modifier Group\n      tags:\n        - Modifier Groups\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifierGroupsDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Modifier Group\n      operationId: modifierGroupsOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetModifierGroupResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Modifier Group\n      tags:\n        - Modifier Groups\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifierGroupsOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Modifier Group\n      operationId: modifierGroupsUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ModifierGroup\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateModifierGroupResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Modifier Group\n      tags:\n        - Modifier Groups\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              modifierGroup: {\n                name: 'Modifier',\n                alternate_name: 'Modifier New',\n                minimum_required: 1,\n                maximum_allowed: 5,\n                selection_type: 'single',\n                present_at_all_locations: false,\n                modifiers: [\n                  {\n                    id: '12345',\n                    name: 'Modifier',\n                    alternate_name: 'Modifier New',\n                    price_amount: 10,\n                    currency: 'USD',\n                    available: true\n                  }\n                ],\n                deleted: true,\n                row_version: '1-12345'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.modifierGroupsUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/modifiers:\n    get:\n      description: List Modifiers\n      operationId: modifiersAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetModifiersResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Modifiers\n      tags:\n        - Modifiers\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifiersAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: modifiers\n    post:\n      description: Create Modifier\n      operationId: modifiersAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Modifier\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateModifierResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Modifier\n      tags:\n        - Modifiers\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              modifier: {\n                name: 'Modifier',\n                alternate_name: 'Modifier New',\n                price_amount: 10,\n                currency: 'USD',\n                modifier_group_id: '123',\n                available: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.modifiersAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/modifiers/{id}\":\n    delete:\n      description: Delete Modifier\n      operationId: modifiersDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/modifierGroupFilter\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteModifierResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Modifier\n      tags:\n        - Modifiers\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifiersDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Modifier\n      operationId: modifiersOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/modifierGroupFilter\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetModifierResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Modifier\n      tags:\n        - Modifiers\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.modifiersOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Modifier\n      operationId: modifiersUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Modifier\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateModifierResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Modifier\n      tags:\n        - Modifiers\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              modifier: {\n                name: 'Modifier',\n                alternate_name: 'Modifier New',\n                price_amount: 10,\n                currency: 'USD',\n                modifier_group_id: '123',\n                available: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.modifiersUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/order-types:\n    get:\n      description: List Order Types\n      operationId: orderTypesAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetOrderTypesResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Order Types\n      tags:\n        - Order Types\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.orderTypesAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: orderTypes\n    post:\n      description: Create Order Type\n      operationId: orderTypesAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrderType\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateOrderTypeResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Order Type\n      tags:\n        - Order Types\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              orderType: {\n                name: 'Default order type',\n                default: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.orderTypesAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/order-types/{id}\":\n    delete:\n      description: Delete Order Type\n      operationId: orderTypesDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteOrderTypeResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Order Type\n      tags:\n        - Order Types\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.orderTypesDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Order Type\n      operationId: orderTypesOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetOrderTypeResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Order Type\n      tags:\n        - Order Types\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.orderTypesOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Order Type\n      operationId: orderTypesUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrderType\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateOrderTypeResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Order Type\n      tags:\n        - Order Types\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              orderType: {\n                name: 'Default order type',\n                default: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.orderTypesUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/orders:\n    get:\n      description: List Orders\n      operationId: ordersAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/locationId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetOrdersResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Orders\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.ordersAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: orders\n    post:\n      description: Create Order\n      operationId: ordersAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateOrderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Order\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              order: {\n                order_number: '1F',\n                order_date: '2022-08-12',\n                closed_date: '2022-08-13',\n                reference_id: 'my-order-001',\n                status: 'open',\n                payment_status: 'open',\n                currency: 'USD',\n                title: 'string',\n                note: 'string',\n                merchant_id: '12345',\n                customer_id: '12345',\n                employee_id: '12345',\n                location_id: '12345',\n                order_type_id: '12345',\n                table: '1F',\n                seat: '23F',\n                total_amount: 27.5,\n                total_tip: 7,\n                total_tax: 2.75,\n                total_discount: 3,\n                total_refund: 0,\n                total_service_charge: 0,\n                refunded: false,\n                customers: [\n                  {\n                    first_name: 'Elon',\n                    middle_name: 'D.',\n                    last_name: 'Musk',\n                    phone_numbers: [\n                      {\n                        id: '12345',\n                        country_code: '1',\n                        area_code: '323',\n                        number: '111-111-1111',\n                        extension: '105',\n                        type: 'primary'\n                      }\n                    ],\n                    emails: [\n                      {\n                        id: '123',\n                        email: 'elon@musk.com',\n                        type: 'primary'\n                      }\n                    ]\n                  }\n                ],\n                fulfillments: [\n                  {\n                    id: '12345',\n                    status: 'proposed',\n                    type: 'shipment',\n                    pickup_details: {\n                      auto_complete_duration: 'P1W3D',\n                      cancel_reason: 'Not hungry',\n                      expires_at: '2016-09-04T23:59:33.123Z',\n                      schedule_type: 'scheduled',\n                      pickup_at: '2016-09-04T23:59:33.123Z',\n                      pickup_window_duration: 'P1W3D',\n                      prep_time_duration: 'P1W3D',\n                      note: 'Pickup in the back.',\n                      placed_at: '2016-09-04T23:59:33.123Z',\n                      rejected_at: '2016-09-04T23:59:33.123Z',\n                      ready_at: '2016-09-04T23:59:33.123Z',\n                      expired_at: '2016-09-04T23:59:33.123Z',\n                      picked_up_at: '2016-09-04T23:59:33.123Z',\n                      canceled_at: '2016-09-04T23:59:33.123Z',\n                      is_curbside_pickup: true,\n                      curbside_pickup_details: {\n                        curbside_details: 'string',\n                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'\n                      },\n                      recipient: {\n                        customer_id: '12345',\n                        address: [Object],\n                        phone_number: [Object],\n                        email: [Object]\n                      }\n                    },\n                    shipment_details: {}\n                  }\n                ],\n                line_items: [\n                  {\n                    name: 'New York Strip Steak',\n                    item: {},\n                    total_tax: 2000,\n                    total_discount: 3000,\n                    total_amount: 27500,\n                    quantity: 1,\n                    unit_price: 27500.5,\n                    applied_taxes: [\n                      {\n                        tax_id: 'sales-tax',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    applied_discounts: [\n                      {\n                        discount_id: '12345',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    modifiers: [\n                      {\n                        name: 'New York Strip Steak - no cheese',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ]\n                  }\n                ],\n                payments: [\n                  {\n                    amount: 27500,\n                    currency: 'USD'\n                  }\n                ],\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ],\n                refunds: [\n                  {\n                    amount: 27500,\n                    currency: 'USD',\n                    reason: 'The reason for the refund being issued.',\n                    status: 'pending'\n                  }\n                ],\n                taxes: [\n                  {\n                    id: 'state-sales-tax',\n                    name: 'State Sales Tax',\n                    amount: 27500,\n                    currency: 'USD',\n                    percentage: 15,\n                    scope: 'order',\n                    type: 'unknown',\n                    auto_applied: true\n                  }\n                ],\n                discounts: [\n                  {\n                    name: '10% off',\n                    type: 'fixed_percentage',\n                    amount: 27500,\n                    currency: 'USD',\n                    scope: 'order'\n                  }\n                ],\n                tenders: [\n                  {\n                    name: '10% off',\n                    type: 'cash',\n                    note: 'An optional note associated with the tender at the time of payment.',\n                    amount: 27500,\n                    currency: 'USD',\n                    total_amount: 27.5,\n                    total_tip: 7,\n                    total_processing_fee: 0,\n                    total_tax: 2.75,\n                    total_discount: 3,\n                    total_refund: 0,\n                    total_service_charge: 0,\n                    buyer_tendered_cash_amount: 27500,\n                    change_back_cash_amount: 27500,\n                    card: {\n                      bin: '41111',\n                      card_brand: 'visa',\n                      card_type: 'credit',\n                      prepaid_type: 'prepaid',\n                      cardholder_name: 'John Doe',\n                      customer_id: '12345',\n                      merchant_id: '12345',\n                      exp_month: 1,\n                      exp_year: 2022,\n                      fingerprint:\n                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',\n                      last_4: 'The last 4 digits of the card number.',\n                      enabled: true,\n                      billing_address: {\n                        id: '123',\n                        type: 'primary',\n                        string: '25 Spring Street, Blackburn, VIC 3130',\n                        name: 'HQ US',\n                        line1: 'Main street',\n                        line2: 'apt #',\n                        line3: 'Suite #',\n                        line4: 'delivery instructions',\n                        street_number: '25',\n                        city: 'San Francisco',\n                        state: 'CA',\n                        postal_code: '94104',\n                        country: 'US',\n                        latitude: '40.759211',\n                        longitude: '-73.984638',\n                        county: 'Santa Clara',\n                        contact_name: 'Elon Musk',\n                        salutation: 'Mr',\n                        phone_number: '111-111-1111',\n                        fax: '122-111-1111',\n                        email: 'elon@musk.com',\n                        website: 'https://elonmusk.com',\n                        row_version: '1-12345'\n                      },\n                      reference_id: 'card-001',\n                      version: '230320320320'\n                    },\n                    card_status: 'authorized',\n                    card_entry_method: 'swiped'\n                  }\n                ],\n                voided: false,\n                version: '230320320320'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.ordersAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/orders/{id}\":\n    delete:\n      description: Delete Order\n      operationId: ordersDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteOrderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Order\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.ordersDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Order\n      operationId: ordersOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetOrderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Order\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.ordersOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Order\n      operationId: ordersUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateOrderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Order\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              order: {\n                order_number: '1F',\n                order_date: '2022-08-12',\n                closed_date: '2022-08-13',\n                reference_id: 'my-order-001',\n                status: 'open',\n                payment_status: 'open',\n                currency: 'USD',\n                title: 'string',\n                note: 'string',\n                merchant_id: '12345',\n                customer_id: '12345',\n                employee_id: '12345',\n                location_id: '12345',\n                order_type_id: '12345',\n                table: '1F',\n                seat: '23F',\n                total_amount: 27.5,\n                total_tip: 7,\n                total_tax: 2.75,\n                total_discount: 3,\n                total_refund: 0,\n                total_service_charge: 0,\n                refunded: false,\n                customers: [\n                  {\n                    first_name: 'Elon',\n                    middle_name: 'D.',\n                    last_name: 'Musk',\n                    phone_numbers: [\n                      {\n                        id: '12345',\n                        country_code: '1',\n                        area_code: '323',\n                        number: '111-111-1111',\n                        extension: '105',\n                        type: 'primary'\n                      }\n                    ],\n                    emails: [\n                      {\n                        id: '123',\n                        email: 'elon@musk.com',\n                        type: 'primary'\n                      }\n                    ]\n                  }\n                ],\n                fulfillments: [\n                  {\n                    id: '12345',\n                    status: 'proposed',\n                    type: 'shipment',\n                    pickup_details: {\n                      auto_complete_duration: 'P1W3D',\n                      cancel_reason: 'Not hungry',\n                      expires_at: '2016-09-04T23:59:33.123Z',\n                      schedule_type: 'scheduled',\n                      pickup_at: '2016-09-04T23:59:33.123Z',\n                      pickup_window_duration: 'P1W3D',\n                      prep_time_duration: 'P1W3D',\n                      note: 'Pickup in the back.',\n                      placed_at: '2016-09-04T23:59:33.123Z',\n                      rejected_at: '2016-09-04T23:59:33.123Z',\n                      ready_at: '2016-09-04T23:59:33.123Z',\n                      expired_at: '2016-09-04T23:59:33.123Z',\n                      picked_up_at: '2016-09-04T23:59:33.123Z',\n                      canceled_at: '2016-09-04T23:59:33.123Z',\n                      is_curbside_pickup: true,\n                      curbside_pickup_details: {\n                        curbside_details: 'string',\n                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'\n                      },\n                      recipient: {\n                        customer_id: '12345',\n                        address: [Object],\n                        phone_number: [Object],\n                        email: [Object]\n                      }\n                    },\n                    shipment_details: {}\n                  }\n                ],\n                line_items: [\n                  {\n                    name: 'New York Strip Steak',\n                    item: {},\n                    total_tax: 2000,\n                    total_discount: 3000,\n                    total_amount: 27500,\n                    quantity: 1,\n                    unit_price: 27500.5,\n                    applied_taxes: [\n                      {\n                        tax_id: 'sales-tax',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    applied_discounts: [\n                      {\n                        discount_id: '12345',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    modifiers: [\n                      {\n                        name: 'New York Strip Steak - no cheese',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ]\n                  }\n                ],\n                payments: [\n                  {\n                    amount: 27500,\n                    currency: 'USD'\n                  }\n                ],\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ],\n                refunds: [\n                  {\n                    amount: 27500,\n                    currency: 'USD',\n                    reason: 'The reason for the refund being issued.',\n                    status: 'pending'\n                  }\n                ],\n                taxes: [\n                  {\n                    id: 'state-sales-tax',\n                    name: 'State Sales Tax',\n                    amount: 27500,\n                    currency: 'USD',\n                    percentage: 15,\n                    scope: 'order',\n                    type: 'unknown',\n                    auto_applied: true\n                  }\n                ],\n                discounts: [\n                  {\n                    name: '10% off',\n                    type: 'fixed_percentage',\n                    amount: 27500,\n                    currency: 'USD',\n                    scope: 'order'\n                  }\n                ],\n                tenders: [\n                  {\n                    name: '10% off',\n                    type: 'cash',\n                    note: 'An optional note associated with the tender at the time of payment.',\n                    amount: 27500,\n                    currency: 'USD',\n                    total_amount: 27.5,\n                    total_tip: 7,\n                    total_processing_fee: 0,\n                    total_tax: 2.75,\n                    total_discount: 3,\n                    total_refund: 0,\n                    total_service_charge: 0,\n                    buyer_tendered_cash_amount: 27500,\n                    change_back_cash_amount: 27500,\n                    card: {\n                      bin: '41111',\n                      card_brand: 'visa',\n                      card_type: 'credit',\n                      prepaid_type: 'prepaid',\n                      cardholder_name: 'John Doe',\n                      customer_id: '12345',\n                      merchant_id: '12345',\n                      exp_month: 1,\n                      exp_year: 2022,\n                      fingerprint:\n                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',\n                      last_4: 'The last 4 digits of the card number.',\n                      enabled: true,\n                      billing_address: {\n                        id: '123',\n                        type: 'primary',\n                        string: '25 Spring Street, Blackburn, VIC 3130',\n                        name: 'HQ US',\n                        line1: 'Main street',\n                        line2: 'apt #',\n                        line3: 'Suite #',\n                        line4: 'delivery instructions',\n                        street_number: '25',\n                        city: 'San Francisco',\n                        state: 'CA',\n                        postal_code: '94104',\n                        country: 'US',\n                        latitude: '40.759211',\n                        longitude: '-73.984638',\n                        county: 'Santa Clara',\n                        contact_name: 'Elon Musk',\n                        salutation: 'Mr',\n                        phone_number: '111-111-1111',\n                        fax: '122-111-1111',\n                        email: 'elon@musk.com',\n                        website: 'https://elonmusk.com',\n                        row_version: '1-12345'\n                      },\n                      reference_id: 'card-001',\n                      version: '230320320320'\n                    },\n                    card_status: 'authorized',\n                    card_entry_method: 'swiped'\n                  }\n                ],\n                voided: false,\n                version: '230320320320'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.ordersUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/orders/{id}/pay\":\n    post:\n      description: Pay Order\n      operationId: ordersPay\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateOrderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Pay Order\n      tags:\n        - Orders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              order: {\n                order_number: '1F',\n                order_date: '2022-08-12',\n                closed_date: '2022-08-13',\n                reference_id: 'my-order-001',\n                status: 'open',\n                payment_status: 'open',\n                currency: 'USD',\n                title: 'string',\n                note: 'string',\n                merchant_id: '12345',\n                customer_id: '12345',\n                employee_id: '12345',\n                location_id: '12345',\n                order_type_id: '12345',\n                table: '1F',\n                seat: '23F',\n                total_amount: 27.5,\n                total_tip: 7,\n                total_tax: 2.75,\n                total_discount: 3,\n                total_refund: 0,\n                total_service_charge: 0,\n                refunded: false,\n                customers: [\n                  {\n                    first_name: 'Elon',\n                    middle_name: 'D.',\n                    last_name: 'Musk',\n                    phone_numbers: [\n                      {\n                        id: '12345',\n                        country_code: '1',\n                        area_code: '323',\n                        number: '111-111-1111',\n                        extension: '105',\n                        type: 'primary'\n                      }\n                    ],\n                    emails: [\n                      {\n                        id: '123',\n                        email: 'elon@musk.com',\n                        type: 'primary'\n                      }\n                    ]\n                  }\n                ],\n                fulfillments: [\n                  {\n                    id: '12345',\n                    status: 'proposed',\n                    type: 'shipment',\n                    pickup_details: {\n                      auto_complete_duration: 'P1W3D',\n                      cancel_reason: 'Not hungry',\n                      expires_at: '2016-09-04T23:59:33.123Z',\n                      schedule_type: 'scheduled',\n                      pickup_at: '2016-09-04T23:59:33.123Z',\n                      pickup_window_duration: 'P1W3D',\n                      prep_time_duration: 'P1W3D',\n                      note: 'Pickup in the back.',\n                      placed_at: '2016-09-04T23:59:33.123Z',\n                      rejected_at: '2016-09-04T23:59:33.123Z',\n                      ready_at: '2016-09-04T23:59:33.123Z',\n                      expired_at: '2016-09-04T23:59:33.123Z',\n                      picked_up_at: '2016-09-04T23:59:33.123Z',\n                      canceled_at: '2016-09-04T23:59:33.123Z',\n                      is_curbside_pickup: true,\n                      curbside_pickup_details: {\n                        curbside_details: 'string',\n                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'\n                      },\n                      recipient: {\n                        customer_id: '12345',\n                        address: [Object],\n                        phone_number: [Object],\n                        email: [Object]\n                      }\n                    },\n                    shipment_details: {}\n                  }\n                ],\n                line_items: [\n                  {\n                    name: 'New York Strip Steak',\n                    item: {},\n                    total_tax: 2000,\n                    total_discount: 3000,\n                    total_amount: 27500,\n                    quantity: 1,\n                    unit_price: 27500.5,\n                    applied_taxes: [\n                      {\n                        tax_id: 'sales-tax',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    applied_discounts: [\n                      {\n                        discount_id: '12345',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ],\n                    modifiers: [\n                      {\n                        name: 'New York Strip Steak - no cheese',\n                        amount: 27500,\n                        currency: 'USD'\n                      }\n                    ]\n                  }\n                ],\n                payments: [\n                  {\n                    amount: 27500,\n                    currency: 'USD'\n                  }\n                ],\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ],\n                refunds: [\n                  {\n                    amount: 27500,\n                    currency: 'USD',\n                    reason: 'The reason for the refund being issued.',\n                    status: 'pending'\n                  }\n                ],\n                taxes: [\n                  {\n                    id: 'state-sales-tax',\n                    name: 'State Sales Tax',\n                    amount: 27500,\n                    currency: 'USD',\n                    percentage: 15,\n                    scope: 'order',\n                    type: 'unknown',\n                    auto_applied: true\n                  }\n                ],\n                discounts: [\n                  {\n                    name: '10% off',\n                    type: 'fixed_percentage',\n                    amount: 27500,\n                    currency: 'USD',\n                    scope: 'order'\n                  }\n                ],\n                tenders: [\n                  {\n                    name: '10% off',\n                    type: 'cash',\n                    note: 'An optional note associated with the tender at the time of payment.',\n                    amount: 27500,\n                    currency: 'USD',\n                    total_amount: 27.5,\n                    total_tip: 7,\n                    total_processing_fee: 0,\n                    total_tax: 2.75,\n                    total_discount: 3,\n                    total_refund: 0,\n                    total_service_charge: 0,\n                    buyer_tendered_cash_amount: 27500,\n                    change_back_cash_amount: 27500,\n                    card: {\n                      bin: '41111',\n                      card_brand: 'visa',\n                      card_type: 'credit',\n                      prepaid_type: 'prepaid',\n                      cardholder_name: 'John Doe',\n                      customer_id: '12345',\n                      merchant_id: '12345',\n                      exp_month: 1,\n                      exp_year: 2022,\n                      fingerprint:\n                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',\n                      last_4: 'The last 4 digits of the card number.',\n                      enabled: true,\n                      billing_address: {\n                        id: '123',\n                        type: 'primary',\n                        string: '25 Spring Street, Blackburn, VIC 3130',\n                        name: 'HQ US',\n                        line1: 'Main street',\n                        line2: 'apt #',\n                        line3: 'Suite #',\n                        line4: 'delivery instructions',\n                        street_number: '25',\n                        city: 'San Francisco',\n                        state: 'CA',\n                        postal_code: '94104',\n                        country: 'US',\n                        latitude: '40.759211',\n                        longitude: '-73.984638',\n                        county: 'Santa Clara',\n                        contact_name: 'Elon Musk',\n                        salutation: 'Mr',\n                        phone_number: '111-111-1111',\n                        fax: '122-111-1111',\n                        email: 'elon@musk.com',\n                        website: 'https://elonmusk.com',\n                        row_version: '1-12345'\n                      },\n                      reference_id: 'card-001',\n                      version: '230320320320'\n                    },\n                    card_status: 'authorized',\n                    card_entry_method: 'swiped'\n                  }\n                ],\n                voided: false,\n                version: '230320320320'\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.ordersPay(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  /pos/payments:\n    get:\n      description: List Payments\n      operationId: paymentsAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetPosPaymentsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Payments\n      tags:\n        - Payments\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.paymentsAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-exclude: true\n      x-graphql-field-name: payments\n    post:\n      description: Create Payment\n      operationId: paymentsAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosPayment\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreatePosPaymentResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Payment\n      tags:\n        - Payments\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              payment: {\n                source_id: '12345',\n                order_id: '12345',\n                merchant_id: '12345',\n                customer_id: '12345',\n                employee_id: '12345',\n                location_id: '12345',\n                device_id: '12345',\n                tender_id: '12345',\n                external_payment_id: '12345',\n                idempotency_key: 'random_string',\n                amount: 27.5,\n                currency: 'USD',\n                tip: 7,\n                tax: 20,\n                total: 37.5,\n                app_fee: 3,\n                change_back_cash_amount: 20,\n                approved: 37.5,\n                refunded: 37.5,\n                processing_fees: [\n                  {\n                    amount: 1.05,\n                    effective_at: '2020-09-30T07:43:32.000Z',\n                    processing_type: 'initial'\n                  }\n                ],\n                source: 'external',\n                status: 'approved',\n                cash: {\n                  amount: null,\n                  charge_back_amount: null\n                },\n                card_details: {\n                  card: {\n                    bin: '41111',\n                    card_brand: 'visa',\n                    card_type: 'credit',\n                    prepaid_type: 'prepaid',\n                    cardholder_name: 'John Doe',\n                    customer_id: '12345',\n                    merchant_id: '12345',\n                    exp_month: 1,\n                    exp_year: 2022,\n                    fingerprint:\n                      ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',\n                    last_4: 'The last 4 digits of the card number.',\n                    enabled: true,\n                    billing_address: {\n                      id: '123',\n                      type: 'primary',\n                      string: '25 Spring Street, Blackburn, VIC 3130',\n                      name: 'HQ US',\n                      line1: 'Main street',\n                      line2: 'apt #',\n                      line3: 'Suite #',\n                      line4: 'delivery instructions',\n                      street_number: '25',\n                      city: 'San Francisco',\n                      state: 'CA',\n                      postal_code: '94104',\n                      country: 'US',\n                      latitude: '40.759211',\n                      longitude: '-73.984638',\n                      county: 'Santa Clara',\n                      contact_name: 'Elon Musk',\n                      salutation: 'Mr',\n                      phone_number: '111-111-1111',\n                      fax: '122-111-1111',\n                      email: 'elon@musk.com',\n                      website: 'https://elonmusk.com',\n                      row_version: '1-12345'\n                    },\n                    reference_id: 'card-001',\n                    version: '230320320320'\n                  }\n                },\n                bank_account: {\n                  bank_name: 'string',\n                  transfer_type: 'string',\n                  account_ownership_type: 'string',\n                  fingerprint: 'string',\n                  country: 'US',\n                  statement_description: 'string',\n                  ach_details: {\n                    routing_number: 'string',\n                    account_number_suffix: 'stri',\n                    account_type: 'string'\n                  }\n                },\n                wallet: {\n                  status: 'authorized'\n                },\n                external_details: {\n                  type: 'check',\n                  source: 'string',\n                  source_id: 'string',\n                  source_fee_amount: 2.5\n                },\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ]\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.paymentsAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-exclude: true\n  \"/pos/payments/{id}\":\n    delete:\n      description: Delete Payment\n      operationId: paymentsDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeletePosPaymentResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Payment\n      tags:\n        - Payments\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.paymentsDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-exclude: true\n    get:\n      description: Get Payment\n      operationId: paymentsOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetPosPaymentResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Payment\n      tags:\n        - Payments\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.paymentsOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-exclude: true\n    patch:\n      description: Update Payment\n      operationId: paymentsUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosPayment\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdatePosPaymentResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Payment\n      tags:\n        - Payments\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              payment: {\n                source_id: '12345',\n                order_id: '12345',\n                merchant_id: '12345',\n                customer_id: '12345',\n                employee_id: '12345',\n                location_id: '12345',\n                device_id: '12345',\n                tender_id: '12345',\n                external_payment_id: '12345',\n                idempotency_key: 'random_string',\n                amount: 27.5,\n                currency: 'USD',\n                tip: 7,\n                tax: 20,\n                total: 37.5,\n                app_fee: 3,\n                change_back_cash_amount: 20,\n                approved: 37.5,\n                refunded: 37.5,\n                processing_fees: [\n                  {\n                    amount: 1.05,\n                    effective_at: '2020-09-30T07:43:32.000Z',\n                    processing_type: 'initial'\n                  }\n                ],\n                source: 'external',\n                status: 'approved',\n                cash: {\n                  amount: null,\n                  charge_back_amount: null\n                },\n                card_details: {\n                  card: {\n                    bin: '41111',\n                    card_brand: 'visa',\n                    card_type: 'credit',\n                    prepaid_type: 'prepaid',\n                    cardholder_name: 'John Doe',\n                    customer_id: '12345',\n                    merchant_id: '12345',\n                    exp_month: 1,\n                    exp_year: 2022,\n                    fingerprint:\n                      ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',\n                    last_4: 'The last 4 digits of the card number.',\n                    enabled: true,\n                    billing_address: {\n                      id: '123',\n                      type: 'primary',\n                      string: '25 Spring Street, Blackburn, VIC 3130',\n                      name: 'HQ US',\n                      line1: 'Main street',\n                      line2: 'apt #',\n                      line3: 'Suite #',\n                      line4: 'delivery instructions',\n                      street_number: '25',\n                      city: 'San Francisco',\n                      state: 'CA',\n                      postal_code: '94104',\n                      country: 'US',\n                      latitude: '40.759211',\n                      longitude: '-73.984638',\n                      county: 'Santa Clara',\n                      contact_name: 'Elon Musk',\n                      salutation: 'Mr',\n                      phone_number: '111-111-1111',\n                      fax: '122-111-1111',\n                      email: 'elon@musk.com',\n                      website: 'https://elonmusk.com',\n                      row_version: '1-12345'\n                    },\n                    reference_id: 'card-001',\n                    version: '230320320320'\n                  }\n                },\n                bank_account: {\n                  bank_name: 'string',\n                  transfer_type: 'string',\n                  account_ownership_type: 'string',\n                  fingerprint: 'string',\n                  country: 'US',\n                  statement_description: 'string',\n                  ach_details: {\n                    routing_number: 'string',\n                    account_number_suffix: 'stri',\n                    account_type: 'string'\n                  }\n                },\n                wallet: {\n                  status: 'authorized'\n                },\n                external_details: {\n                  type: 'check',\n                  source: 'string',\n                  source_id: 'string',\n                  source_fee_amount: 2.5\n                },\n                service_charges: [\n                  {\n                    name: 'Charge for delivery',\n                    amount: 27500,\n                    percentage: 12.5,\n                    currency: 'USD',\n                    active: true,\n                    type: 'auto_gratuity'\n                  }\n                ]\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.paymentsUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-exclude: true\n  /pos/tenders:\n    get:\n      description: List Tenders\n      operationId: tendersAll\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetTendersResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: List Tenders\n      tags:\n        - Tenders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.tendersAll({})\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n      x-graphql-field-name: tenders\n    post:\n      description: Create Tender\n      operationId: tendersAdd\n      parameters:\n        - $ref: \"#/components/parameters/raw\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tender\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/CreateTenderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Create Tender\n      tags:\n        - Tenders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              tender: {\n                key: 'com.clover.tender.cash',\n                label: 'Cash',\n                active: true,\n                hidden: true,\n                editable: true,\n                opens_cash_drawer: true,\n                allows_tipping: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.tendersAdd(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n  \"/pos/tenders/{id}\":\n    delete:\n      description: Delete Tender\n      operationId: tendersDelete\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeleteTenderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Delete Tender\n      tags:\n        - Tenders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.tendersDelete({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    get:\n      description: Get Tender\n      operationId: tendersOne\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GetTenderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Get Tender\n      tags:\n        - Tenders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            try {\n              const { data } = await apideck.pos.tendersOne({\n                id: 'id_example'\n              })\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\n    patch:\n      description: Update Tender\n      operationId: tendersUpdate\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/consumerId\"\n        - $ref: \"#/components/parameters/applicationId\"\n        - $ref: \"#/components/parameters/serviceId\"\n        - $ref: \"#/components/parameters/raw\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tender\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UpdateTenderResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequestResponse\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        \"402\":\n          $ref: \"#/components/responses/PaymentRequiredResponse\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"422\":\n          $ref: \"#/components/responses/UnprocessableResponse\"\n        default:\n          $ref: \"#/components/responses/UnexpectedErrorResponse\"\n      security:\n        - apiKey: []\n      summary: Update Tender\n      tags:\n        - Tenders\n      x-apideck-api: pos\n      x-codeSamples:\n        - label: Node\n          lang: TypeScript\n          source: |\n            import { Apideck } from '@apideck/node'\n\n            const apideck = new Apideck({\n              apiKey: 'REPLACE_WITH_API_KEY',\n              appId: 'REPLACE_WITH_APP_ID',\n              consumerId: 'REPLACE_WITH_CONSUMER_ID'\n            })\n\n            const params = {\n              id: 'id_example',\n              tender: {\n                key: 'com.clover.tender.cash',\n                label: 'Cash',\n                active: true,\n                hidden: true,\n                editable: true,\n                opens_cash_drawer: true,\n                allows_tipping: true\n              }\n            }\n\n            try {\n              const { data } = await apideck.pos.tendersUpdate(params)\n              console.log('API called successfully', data)\n            } catch (error) {\n              console.error(error)\n            }\ncomponents:\n  parameters:\n    applicationId:\n      description: The ID of your Unify application\n      in: header\n      name: x-apideck-app-id\n      required: true\n      schema:\n        type: string\n    consumerId:\n      description: ID of the consumer which you want to get or push data from\n      in: header\n      name: x-apideck-consumer-id\n      required: true\n      schema:\n        type: string\n    cursor:\n      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.\n      in: query\n      name: cursor\n      schema:\n        nullable: true\n        type: string\n    id:\n      description: ID of the record you are acting upon.\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    limit:\n      description: Number of records to return\n      in: query\n      name: limit\n      schema:\n        default: 20\n        maximum: 200\n        minimum: 1\n        type: integer\n    locationId:\n      description: ID of the location.\n      in: query\n      name: location_id\n      required: false\n      schema:\n        type: string\n    merchantId:\n      description: ID of the merchant.\n      in: path\n      name: merchantId\n      required: true\n      schema:\n        type: string\n    modifierGroupFilter:\n      description: Apply filters (beta)\n      explode: true\n      in: query\n      name: filter\n      schema:\n        $ref: \"#/components/schemas/ModifierGroupFilter\"\n      style: deepObject\n    raw:\n      description: Include raw response. Mostly used for debugging purposes\n      in: query\n      name: raw\n      schema:\n        default: false\n        type: boolean\n    serviceId:\n      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.\n      in: header\n      name: x-apideck-service-id\n      schema:\n        type: string\n  responses:\n    BadRequestResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/BadRequestResponse\"\n      description: Bad Request\n    CreateItemResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateItemResponse\"\n      description: Items\n    CreateLocationResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateLocationResponse\"\n      description: Locations\n    CreateMerchantResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateMerchantResponse\"\n      description: Merchants\n    CreateModifierGroupResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateModifierGroupResponse\"\n      description: ModifierGroups\n    CreateModifierResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateModifierResponse\"\n      description: Modifiers\n    CreateOrderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateOrderResponse\"\n      description: Orders\n    CreateOrderTypeResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateOrderTypeResponse\"\n      description: OrderTypes\n    CreatePosPaymentResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreatePosPaymentResponse\"\n      description: PosPayments\n    CreateTenderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateTenderResponse\"\n      description: Tenders\n    DeleteItemResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteItemResponse\"\n      description: Items\n    DeleteLocationResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteLocationResponse\"\n      description: Locations\n    DeleteMerchantResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteMerchantResponse\"\n      description: Merchants\n    DeleteModifierGroupResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteModifierGroupResponse\"\n      description: ModifierGroups\n    DeleteModifierResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteModifierResponse\"\n      description: Modifiers\n    DeleteOrderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteOrderResponse\"\n      description: Orders\n    DeleteOrderTypeResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteOrderTypeResponse\"\n      description: OrderTypes\n    DeletePosPaymentResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeletePosPaymentResponse\"\n      description: PosPayments\n    DeleteTenderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeleteTenderResponse\"\n      description: Tenders\n    GetItemResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetItemResponse\"\n      description: Items\n    GetItemsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetItemsResponse\"\n      description: Items\n    GetLocationResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetLocationResponse\"\n      description: Locations\n    GetLocationsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetLocationsResponse\"\n      description: Locations\n    GetMerchantResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetMerchantResponse\"\n      description: Merchants\n    GetMerchantsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetMerchantsResponse\"\n      description: Merchants\n    GetModifierGroupResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetModifierGroupResponse\"\n      description: ModifierGroups\n    GetModifierGroupsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetModifierGroupsResponse\"\n      description: ModifierGroups\n    GetModifierResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetModifierResponse\"\n      description: Modifiers\n    GetModifiersResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetModifiersResponse\"\n      description: Modifiers\n    GetOrderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetOrderResponse\"\n      description: Orders\n    GetOrderTypeResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetOrderTypeResponse\"\n      description: OrderTypes\n    GetOrderTypesResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetOrderTypesResponse\"\n      description: OrderTypes\n    GetOrdersResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetOrdersResponse\"\n      description: Orders\n    GetPosPaymentResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetPosPaymentResponse\"\n      description: PosPayments\n    GetPosPaymentsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetPosPaymentsResponse\"\n      description: PosPayments\n    GetTenderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetTenderResponse\"\n      description: Tenders\n    GetTendersResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GetTendersResponse\"\n      description: Tenders\n    Item:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Item\"\n      description: Items\n    Location:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Location\"\n      description: Locations\n    Merchant:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Merchant\"\n      description: Merchants\n    Modifier:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Modifier\"\n      description: Modifiers\n    ModifierGroup:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ModifierGroup\"\n      description: ModifierGroups\n    NotFoundResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/NotFoundResponse\"\n      description: The specified resource was not found\n    NotImplementedResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/NotImplementedResponse\"\n      description: Not Implemented\n    Order:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Order\"\n      description: Orders\n    OrderType:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/OrderType\"\n      description: OrderTypes\n    PaymentRequiredResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PaymentRequiredResponse\"\n      description: Payment Required\n    PosPayment:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PosPayment\"\n      description: PosPayments\n    Tender:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Tender\"\n      description: Tenders\n    TooManyRequestsResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/TooManyRequestsResponse\"\n      description: Too Many Requests\n    UnauthorizedResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UnauthorizedResponse\"\n      description: Unauthorized\n    UnexpectedErrorResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UnexpectedErrorResponse\"\n      description: Unexpected error\n    UnprocessableResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UnprocessableResponse\"\n      description: Unprocessable\n    UpdateItemResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateItemResponse\"\n      description: Items\n    UpdateLocationResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateLocationResponse\"\n      description: Locations\n    UpdateMerchantResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateMerchantResponse\"\n      description: Merchants\n    UpdateModifierGroupResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateModifierGroupResponse\"\n      description: ModifierGroups\n    UpdateModifierResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateModifierResponse\"\n      description: Modifiers\n    UpdateOrderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateOrderResponse\"\n      description: Orders\n    UpdateOrderTypeResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateOrderTypeResponse\"\n      description: OrderTypes\n    UpdatePosPaymentResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdatePosPaymentResponse\"\n      description: PosPayments\n    UpdateTenderResponse:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdateTenderResponse\"\n      description: Tenders\n  schemas:\n    Active:\n      example: true\n      nullable: true\n      title: Is active\n      type: boolean\n    Address:\n      additionalProperties: false\n      properties:\n        city:\n          description: Name of city.\n          example: San Francisco\n          nullable: true\n          type: string\n        contact_name:\n          example: Elon Musk\n          nullable: true\n          type: string\n        country:\n          description: country code according to ISO 3166-1 alpha-2.\n          example: US\n          nullable: true\n          type: string\n        county:\n          description: Address field that holds a sublocality, such as a county\n          example: Santa Clara\n          nullable: true\n          type: string\n        email:\n          example: elon@musk.com\n          nullable: true\n          type: string\n        fax:\n          example: 122-111-1111\n          nullable: true\n          type: string\n        id:\n          example: \"123\"\n          nullable: true\n          type: string\n        latitude:\n          example: \"40.759211\"\n          nullable: true\n          type: string\n        line1:\n          description: \"Line 1 of the address e.g. number, street, suite, apt #, etc.\"\n          example: Main street\n          nullable: true\n          type: string\n        line2:\n          description: Line 2 of the address\n          example: \"apt #\"\n          nullable: true\n          type: string\n        line3:\n          description: Line 3 of the address\n          example: \"Suite #\"\n          nullable: true\n          type: string\n        line4:\n          description: Line 4 of the address\n          example: delivery instructions\n          nullable: true\n          type: string\n        longitude:\n          example: \"-73.984638\"\n          nullable: true\n          type: string\n        name:\n          example: HQ US\n          nullable: true\n          type: string\n        phone_number:\n          example: 111-111-1111\n          nullable: true\n          type: string\n        postal_code:\n          description: Zip code or equivalent.\n          example: \"94104\"\n          nullable: true\n          type: string\n        row_version:\n          $ref: \"#/components/schemas/RowVersion\"\n        salutation:\n          example: Mr\n          nullable: true\n          type: string\n        state:\n          description: Name of state\n          example: CA\n          nullable: true\n          type: string\n        street_number:\n          description: Street number\n          example: \"25\"\n          nullable: true\n          type: string\n        string:\n          example: 25 Spring Street, Blackburn, VIC 3130\n          nullable: true\n          title: The address string. Some APIs don't provide structured address data.\n          type: string\n        type:\n          enum:\n            - primary\n            - secondary\n            - home\n            - office\n            - shipping\n            - billing\n            - other\n          example: primary\n          type: string\n          x-apideck-enum-id: addresses.type\n          x-graphql-type-name: AddressType\n        website:\n          example: https://elonmusk.com\n          nullable: true\n          type: string\n      type: object\n      x-apideck-weights:\n        city: high\n        contact_name: edge-case\n        country: high\n        county: edge-case\n        email: edge-case\n        fax: edge-case\n        id: edge-case\n        latitude: low\n        line1: high\n        line2: low\n        line3: edge-case\n        line4: edge-case\n        longitude: low\n        name: edge-case\n        phone_number: edge-case\n        postal_code: high\n        row_version: edge-case\n        salutation: edge-case\n        state: high\n        street_number: low\n        string: low\n        type: critical\n        website: edge-case\n    Available:\n      example: true\n      nullable: true\n      title: Available\n      type: boolean\n    BadRequestResponse:\n      properties:\n        detail:\n          anyOf:\n            - example: Missing property foobar\n              type: string\n            - example:\n                missing:\n                  - foobar: required\n              type: object\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Bad Request\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Invalid Params\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#requestvalidationerror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 400\n          type: number\n        type_name:\n          description: The type of error returned\n          example: RequestValidationError\n          type: string\n    CreateItemResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Items\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateLocationResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Locations\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateMerchantResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Merchants\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateModifierGroupResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: ModifierGroups\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateModifierResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Modifiers\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateOrderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Orders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateOrderTypeResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: OrderTypes\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreatePosPaymentResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: PosPayments\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreateTenderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Tenders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    CreatedAt:\n      example: 2020-09-30T07:43:32.000Z\n      format: date-time\n      readOnly: true\n      title: Created at (timestamp)\n      type: string\n    CreatedBy:\n      example: \"12345\"\n      nullable: true\n      readOnly: true\n      title: Created by\n      type: string\n    Currency:\n      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n      enum:\n        - UNKNOWN_CURRENCY\n        - AED\n        - AFN\n        - ALL\n        - AMD\n        - ANG\n        - AOA\n        - ARS\n        - AUD\n        - AWG\n        - AZN\n        - BAM\n        - BBD\n        - BDT\n        - BGN\n        - BHD\n        - BIF\n        - BMD\n        - BND\n        - BOB\n        - BOV\n        - BRL\n        - BSD\n        - BTN\n        - BWP\n        - BYR\n        - BZD\n        - CAD\n        - CDF\n        - CHE\n        - CHF\n        - CHW\n        - CLF\n        - CLP\n        - CNY\n        - COP\n        - COU\n        - CRC\n        - CUC\n        - CUP\n        - CVE\n        - CZK\n        - DJF\n        - DKK\n        - DOP\n        - DZD\n        - EGP\n        - ERN\n        - ETB\n        - EUR\n        - FJD\n        - FKP\n        - GBP\n        - GEL\n        - GHS\n        - GIP\n        - GMD\n        - GNF\n        - GTQ\n        - GYD\n        - HKD\n        - HNL\n        - HRK\n        - HTG\n        - HUF\n        - IDR\n        - ILS\n        - INR\n        - IQD\n        - IRR\n        - ISK\n        - JMD\n        - JOD\n        - JPY\n        - KES\n        - KGS\n        - KHR\n        - KMF\n        - KPW\n        - KRW\n        - KWD\n        - KYD\n        - KZT\n        - LAK\n        - LBP\n        - LKR\n        - LRD\n        - LSL\n        - LTL\n        - LVL\n        - LYD\n        - MAD\n        - MDL\n        - MGA\n        - MKD\n        - MMK\n        - MNT\n        - MOP\n        - MRO\n        - MUR\n        - MVR\n        - MWK\n        - MXN\n        - MXV\n        - MYR\n        - MZN\n        - NAD\n        - NGN\n        - NIO\n        - NOK\n        - NPR\n        - NZD\n        - OMR\n        - PAB\n        - PEN\n        - PGK\n        - PHP\n        - PKR\n        - PLN\n        - PYG\n        - QAR\n        - RON\n        - RSD\n        - RUB\n        - RWF\n        - SAR\n        - SBD\n        - SCR\n        - SDG\n        - SEK\n        - SGD\n        - SHP\n        - SLL\n        - SOS\n        - SRD\n        - SSP\n        - STD\n        - SVC\n        - SYP\n        - SZL\n        - THB\n        - TJS\n        - TMT\n        - TND\n        - TOP\n        - TRC\n        - TRY\n        - TTD\n        - TWD\n        - TZS\n        - UAH\n        - UGX\n        - USD\n        - USN\n        - USS\n        - UYI\n        - UYU\n        - UZS\n        - VEF\n        - VND\n        - VUV\n        - WST\n        - XAF\n        - XAG\n        - XAU\n        - XBA\n        - XBB\n        - XBC\n        - XBD\n        - XCD\n        - XDR\n        - XOF\n        - XPD\n        - XPF\n        - XPT\n        - XTS\n        - XXX\n        - YER\n        - ZAR\n        - ZMK\n        - ZMW\n        - BTC\n      example: USD\n      nullable: true\n      title: Currency\n      type: string\n      x-apideck-enum-coverage-ignore: true\n      x-apideck-enum-id: currencies\n      x-enum-elements:\n        - description: Unknown currency\n          name: UNKNOWN_CURRENCY\n        - description: United Arab Emirates dirham\n          name: AED\n        - description: Afghan afghani\n          name: AFN\n        - description: Albanian lek\n          name: ALL\n        - description: Armenian dram\n          name: AMD\n        - description: Netherlands Antillean guilder\n          name: ANG\n        - description: Angolan kwanza\n          name: AOA\n        - description: Argentine peso\n          name: ARS\n        - description: Australian dollar\n          name: AUD\n        - description: Aruban florin\n          name: AWG\n        - description: Azerbaijani manat\n          name: AZN\n        - description: Bosnia and Herzegovina convertible mark\n          name: BAM\n        - description: Barbados dollar\n          name: BBD\n        - description: Bangladeshi taka\n          name: BDT\n        - description: Bulgarian lev\n          name: BGN\n        - description: Bahraini dinar\n          name: BHD\n        - description: Burundian franc\n          name: BIF\n        - description: Bermudian dollar\n          name: BMD\n        - description: Brunei dollar\n          name: BND\n        - description: Boliviano\n          name: BOB\n        - description: Bolivian Mvdol\n          name: BOV\n        - description: Brazilian real\n          name: BRL\n        - description: Bahamian dollar\n          name: BSD\n        - description: Bhutanese ngultrum\n          name: BTN\n        - description: Botswana pula\n          name: BWP\n        - description: Belarusian ruble\n          name: BYR\n        - description: Belize dollar\n          name: BZD\n        - description: Canadian dollar\n          name: CAD\n        - description: Congolese franc\n          name: CDF\n        - description: WIR Euro\n          name: CHE\n        - description: Swiss franc\n          name: CHF\n        - description: WIR Franc\n          name: CHW\n        - description: Unidad de Fomento\n          name: CLF\n        - description: Chilean peso\n          name: CLP\n        - description: Chinese yuan\n          name: CNY\n        - description: Colombian peso\n          name: COP\n        - description: Unidad de Valor Real\n          name: COU\n        - description: Costa Rican colon\n          name: CRC\n        - description: Cuban convertible peso\n          name: CUC\n        - description: Cuban peso\n          name: CUP\n        - description: Cape Verdean escudo\n          name: CVE\n        - description: Czech koruna\n          name: CZK\n        - description: Djiboutian franc\n          name: DJF\n        - description: Danish krone\n          name: DKK\n        - description: Dominican peso\n          name: DOP\n        - description: Algerian dinar\n          name: DZD\n        - description: Egyptian pound\n          name: EGP\n        - description: Eritrean nakfa\n          name: ERN\n        - description: Ethiopian birr\n          name: ETB\n        - description: Euro\n          name: EUR\n        - description: Fiji dollar\n          name: FJD\n        - description: Falkland Islands pound\n          name: FKP\n        - description: Pound sterling\n          name: GBP\n        - description: Georgian lari\n          name: GEL\n        - description: Ghanaian cedi\n          name: GHS\n        - description: Gibraltar pound\n          name: GIP\n        - description: Gambian dalasi\n          name: GMD\n        - description: Guinean franc\n          name: GNF\n        - description: Guatemalan quetzal\n          name: GTQ\n        - description: Guyanese dollar\n          name: GYD\n        - description: Hong Kong dollar\n          name: HKD\n        - description: Honduran lempira\n          name: HNL\n        - description: Croatian kuna\n          name: HRK\n        - description: Haitian gourde\n          name: HTG\n        - description: Hungarian forint\n          name: HUF\n        - description: Indonesian rupiah\n          name: IDR\n        - description: Israeli new shekel\n          name: ILS\n        - description: Indian rupee\n          name: INR\n        - description: Iraqi dinar\n          name: IQD\n        - description: Iranian rial\n          name: IRR\n        - description: Icelandic króna\n          name: ISK\n        - description: Jamaican dollar\n          name: JMD\n        - description: Jordanian dinar\n          name: JOD\n        - description: Japanese yen\n          name: JPY\n        - description: Kenyan shilling\n          name: KES\n        - description: Kyrgyzstani som\n          name: KGS\n        - description: Cambodian riel\n          name: KHR\n        - description: Comoro franc\n          name: KMF\n        - description: North Korean won\n          name: KPW\n        - description: South Korean won\n          name: KRW\n        - description: Kuwaiti dinar\n          name: KWD\n        - description: Cayman Islands dollar\n          name: KYD\n        - description: Kazakhstani tenge\n          name: KZT\n        - description: Lao kip\n          name: LAK\n        - description: Lebanese pound\n          name: LBP\n        - description: Sri Lankan rupee\n          name: LKR\n        - description: Liberian dollar\n          name: LRD\n        - description: Lesotho loti\n          name: LSL\n        - description: Lithuanian litas\n          name: LTL\n        - description: Latvian lats\n          name: LVL\n        - description: Libyan dinar\n          name: LYD\n        - description: Moroccan dirham\n          name: MAD\n        - description: Moldovan leu\n          name: MDL\n        - description: Malagasy ariary\n          name: MGA\n        - description: Macedonian denar\n          name: MKD\n        - description: Myanmar kyat\n          name: MMK\n        - description: Mongolian tögrög\n          name: MNT\n        - description: Macanese pataca\n          name: MOP\n        - description: Mauritanian ouguiya\n          name: MRO\n        - description: Mauritian rupee\n          name: MUR\n        - description: Maldivian rufiyaa\n          name: MVR\n        - description: Malawian kwacha\n          name: MWK\n        - description: Mexican peso\n          name: MXN\n        - description: Mexican Unidad de Inversion\n          name: MXV\n        - description: Malaysian ringgit\n          name: MYR\n        - description: Mozambican metical\n          name: MZN\n        - description: Namibian dollar\n          name: NAD\n        - description: Nigerian naira\n          name: NGN\n        - description: Nicaraguan córdoba\n          name: NIO\n        - description: Norwegian krone\n          name: NOK\n        - description: Nepalese rupee\n          name: NPR\n        - description: New Zealand dollar\n          name: NZD\n        - description: Omani rial\n          name: OMR\n        - description: Panamanian balboa\n          name: PAB\n        - description: Peruvian sol\n          name: PEN\n        - description: Papua New Guinean kina\n          name: PGK\n        - description: Philippine peso\n          name: PHP\n        - description: Pakistani rupee\n          name: PKR\n        - description: Polish złoty\n          name: PLN\n        - description: Paraguayan guaraní\n          name: PYG\n        - description: Qatari riyal\n          name: QAR\n        - description: Romanian leu\n          name: RON\n        - description: Serbian dinar\n          name: RSD\n        - description: Russian ruble\n          name: RUB\n        - description: Rwandan franc\n          name: RWF\n        - description: Saudi riyal\n          name: SAR\n        - description: Solomon Islands dollar\n          name: SBD\n        - description: Seychelles rupee\n          name: SCR\n        - description: Sudanese pound\n          name: SDG\n        - description: Swedish krona\n          name: SEK\n        - description: Singapore dollar\n          name: SGD\n        - description: Saint Helena pound\n          name: SHP\n        - description: Sierra Leonean leone\n          name: SLL\n        - description: Somali shilling\n          name: SOS\n        - description: Surinamese dollar\n          name: SRD\n        - description: South Sudanese pound\n          name: SSP\n        - description: São Tomé and Príncipe dobra\n          name: STD\n        - description: Salvadoran colón\n          name: SVC\n        - description: Syrian pound\n          name: SYP\n        - description: Swazi lilangeni\n          name: SZL\n        - description: Thai baht\n          name: THB\n        - description: Tajikstani somoni\n          name: TJS\n        - description: Turkmenistan manat\n          name: TMT\n        - description: Tunisian dinar\n          name: TND\n        - description: Tongan pa'anga\n          name: TOP\n        - description: Turkish lira\n          name: TRY\n        - description: Trinidad and Tobago dollar\n          name: TTD\n        - description: New Taiwan dollar\n          name: TWD\n        - description: Tanzanian shilling\n          name: TZS\n        - description: Ukrainian hryvnia\n          name: UAH\n        - description: Ugandan shilling\n          name: UGX\n        - description: United States dollar\n          name: USD\n        - description: United States dollar (next day)\n          name: USN\n        - description: United States dollar (same day)\n          name: USS\n        - description: Uruguay Peso en Unidedades Indexadas\n          name: UYI\n        - description: Uruguyan peso\n          name: UYU\n        - description: Uzbekistan som\n          name: UZS\n        - description: Venezuelan bolívar soberano\n          name: VEF\n        - description: Vietnamese đồng\n          name: VND\n        - description: Vanuatu vatu\n          name: VUV\n        - description: Samoan tala\n          name: WST\n        - description: CFA franc BEAC\n          name: XAF\n        - description: Silver\n          name: XAG\n        - description: Gold\n          name: XAU\n        - description: European Composite Unit\n          name: XBA\n        - description: European Monetary Unit\n          name: XBB\n        - description: European Unit of Account 9\n          name: XBC\n        - description: European Unit of Account 17\n          name: XBD\n        - description: East Caribbean dollar\n          name: XCD\n        - description: Special drawing rights (International Monetary Fund)\n          name: XDR\n        - description: CFA franc BCEAO\n          name: XOF\n        - description: Palladium\n          name: XPD\n        - description: CFP franc\n          name: XPF\n        - description: Platinum\n          name: XPT\n        - description: Code reserved for testing\n          name: XTS\n        - description: No currency\n          name: XXX\n        - description: Yemeni rial\n          name: YER\n        - description: South African rand\n          name: ZAR\n        - description: Zambian kwacha\n          name: ZMK\n        - description: Zambian kwacha\n          name: ZMW\n        - description: Bitcoin\n          name: BTC\n    CustomField:\n      additionalProperties: false\n      properties:\n        description:\n          description: More information about the custom field\n          example: Employee Level\n          title: Description\n          type: string\n        id:\n          example: \"2389328923893298\"\n          title: ID\n          type: string\n        name:\n          description: Name of the custom field.\n          example: employee_level\n          title: Name\n          type: string\n        value:\n          anyOf:\n            - example: Uses Salesforce and Marketo\n              nullable: true\n              type: string\n            - example: 10\n              nullable: true\n              type: number\n            - example: true\n              nullable: true\n              type: boolean\n            - items:\n                type: string\n              type: array\n      required:\n        - id\n      type: object\n      x-apideck-weights:\n        description: edge-case\n        id: critical\n        name: medium\n        value: critical\n    DeleteItemResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Items\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteLocationResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Locations\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteMerchantResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Merchants\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteModifierGroupResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: ModifierGroups\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteModifierResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Modifiers\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteOrderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Orders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteOrderTypeResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: OrderTypes\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeletePosPaymentResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: PosPayments\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    DeleteTenderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Tenders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    Deleted:\n      example: true\n      nullable: true\n      title: Deleted\n      type: boolean\n    Email:\n      additionalProperties: false\n      properties:\n        email:\n          example: elon@musk.com\n          format: email\n          minLength: 1\n          type: string\n        id:\n          example: \"123\"\n          type: string\n        type:\n          enum:\n            - primary\n            - secondary\n            - work\n            - personal\n            - billing\n            - other\n          example: primary\n          type: string\n          x-apideck-enum-id: emails.type\n          x-graphql-type-name: EmailType\n      required:\n        - email\n      type: object\n      x-apideck-weights:\n        email: critical\n        id: edge-case\n        type: critical\n    GetItemResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Item\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Items\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Item\n    GetItemsResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Item\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Items\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: ItemList\n    GetLocationResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Location\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Locations\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Location\n    GetLocationsResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Location\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Locations\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: LocationList\n    GetMerchantResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Merchant\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Merchants\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Merchant\n    GetMerchantsResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Merchant\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Merchants\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: MerchantList\n    GetModifierGroupResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/ModifierGroup\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: ModifierGroups\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: ModifierGroup\n    GetModifierGroupsResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/ModifierGroup\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: ModifierGroups\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: ModifierGroupList\n    GetModifierResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Modifier\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Modifiers\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Modifier\n    GetModifiersResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Modifier\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Modifiers\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: ModifierList\n    GetOrderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Order\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Orders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Order\n    GetOrderTypeResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/OrderType\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: OrderTypes\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: OrderType\n    GetOrderTypesResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/OrderType\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: OrderTypes\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: OrderTypeList\n    GetOrdersResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Order\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Orders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: OrderList\n    GetPosPaymentResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/PosPayment\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: PosPayments\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: PosPayment\n    GetPosPaymentsResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/PosPayment\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: PosPayments\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: PosPaymentList\n    GetTenderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Tender\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Tenders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: Tender\n    GetTendersResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Tender\"\n          type: array\n        links:\n          $ref: \"#/components/schemas/Links\"\n        meta:\n          $ref: \"#/components/schemas/Meta\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Tenders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n      x-graphql-type-name: TenderList\n    Hidden:\n      example: true\n      nullable: true\n      title: Hidden\n      type: boolean\n    Id:\n      example: \"12345\"\n      readOnly: true\n      type: string\n    IdempotencyKey:\n      description: A value you specify that uniquely identifies this request among requests you have sent.\n      example: random_string\n      maxLength: 45\n      type: string\n    Item:\n      additionalProperties: false\n      properties:\n        abbreviation:\n          example: Ch\n          title: Abbreviation\n          type: string\n        absent_at_location_ids:\n          description: A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.\n          example:\n            - \"12345\"\n            - \"67890\"\n          items:\n            type: string\n          type: array\n        available:\n          $ref: \"#/components/schemas/Available\"\n        categories:\n          example:\n            - id: \"12345\"\n              image_ids:\n                - \"12345\"\n                - \"67890\"\n              name: Food\n          items:\n            properties:\n              id:\n                $ref: \"#/components/schemas/Id\"\n              image_ids:\n                items:\n                  $ref: \"#/components/schemas/Id\"\n                type: array\n              name:\n                type: string\n            x-apideck-weights:\n              id: medium\n              image_ids: medium\n              name: medium\n          title: Categories\n          type: array\n        code:\n          description: Product code, e.g. UPC or EAN\n          example: \"11910345\"\n          title: SKU\n          type: string\n        cost:\n          example: 2\n          title: Cost\n          type: number\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        deleted:\n          $ref: \"#/components/schemas/Deleted\"\n        description:\n          example: Hot Chocolate\n          title: Description\n          type: string\n        hidden:\n          $ref: \"#/components/schemas/Hidden\"\n        id:\n          example: \"#cocoa\"\n          type: string\n        idempotency_key:\n          $ref: \"#/components/schemas/IdempotencyKey\"\n        name:\n          example: Cocoa\n          title: Name\n          type: string\n        options:\n          description: List of options pertaining to this item's attribute variation\n          items:\n            properties:\n              attribute_id:\n                example: \"12345\"\n                title: Attribute ID\n                type: string\n              id:\n                example: \"12345\"\n                type: string\n              name:\n                example: Option 1\n                title: Name\n                type: string\n            x-apideck-weights:\n              attribute_id: medium\n              id: medium\n              name: medium\n          type: array\n        present_at_all_locations:\n          example: false\n          title: Present at all locations\n          type: boolean\n        price_amount:\n          example: 10\n          title: Price amount\n          type: number\n        price_currency:\n          $ref: \"#/components/schemas/Currency\"\n        pricing_type:\n          enum:\n            - fixed\n            - variable\n            - per_unit\n            - other\n          example: fixed\n          title: Pricing type\n          type: string\n          x-apideck-enum-id: items.pricing_type\n        product_type:\n          enum:\n            - regular\n            - other\n          example: regular\n          title: Product type\n          type: string\n          x-apideck-enum-id: items.product_type\n        sku:\n          description: SKU of the item\n          example: \"11910345\"\n          title: SKU\n          type: string\n        tax_ids:\n          description: A list of Tax IDs for the product.\n          example:\n            - \"12345\"\n            - \"67890\"\n          items:\n            type: string\n          title: Tax IDs\n          type: array\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n        variations:\n          example:\n            - id: \"12345\"\n              image_ids:\n                - \"12345\"\n                - \"67890\"\n              item_id: \"12345\"\n              name: Food\n              price_amount: 10\n              price_currency: USD\n              pricing_type: fixed\n              sequence: 0\n              sku: \"11910345\"\n          items:\n            properties:\n              created_at:\n                $ref: \"#/components/schemas/CreatedAt\"\n              id:\n                $ref: \"#/components/schemas/Id\"\n              item_id:\n                $ref: \"#/components/schemas/Id\"\n              name:\n                example: Variation\n                title: Name\n                type: string\n              present_at_all_locations:\n                example: false\n                title: Present at all locations\n                type: boolean\n              price_amount:\n                example: 10\n                title: Price amount\n                type: number\n              price_currency:\n                $ref: \"#/components/schemas/Currency\"\n              pricing_type:\n                enum:\n                  - fixed\n                  - variable\n                  - other\n                example: fixed\n                title: Pricing type\n                type: string\n                x-apideck-enum-id: items.pricing_type\n              sequence:\n                $ref: \"#/components/schemas/Sequence\"\n              sku:\n                example: \"11910345\"\n                title: SKU\n                type: string\n              stockable:\n                example: false\n                title: Stockable\n                type: boolean\n              updated_at:\n                $ref: \"#/components/schemas/UpdatedAt\"\n              version:\n                $ref: \"#/components/schemas/UpdatedBy\"\n            x-apideck-weights:\n              created_at: medium\n              id: medium\n              item_id: medium\n              name: medium\n              present_at_all_locations: medium\n              price_amount: medium\n              price_currency: medium\n              pricing_type: medium\n              sequence: medium\n              sku: medium\n              stockable: medium\n              updated_at: medium\n              version: medium\n          title: Variations\n          type: array\n        version:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      required:\n        - name\n      type: object\n      x-apideck-weights:\n        abbreviation: low\n        absent_at_location_ids: edge-case\n        available: high\n        categories: low\n        code: high\n        cost: medium\n        created_at: medium\n        created_by: edge-case\n        deleted: medium\n        description: medium\n        hidden: medium\n        id: critical\n        idempotency_key: medium\n        name: critical\n        options: low\n        present_at_all_locations: low\n        price_amount: high\n        price_currency: high\n        pricing_type: high\n        product_type: high\n        sku: high\n        tax_ids: medium\n        updated_at: medium\n        updated_by: edge-case\n        variations: low\n        version: medium\n    Links:\n      description: Links to navigate to previous or next pages through the API\n      properties:\n        current:\n          description: Link to navigate to the current page through the API\n          example: https://unify.apideck.com/crm/companies\n          type: string\n        next:\n          description: Link to navigate to the previous page through the API\n          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\n          nullable: true\n          type: string\n        previous:\n          description: Link to navigate to the previous page through the API\n          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\n          nullable: true\n          type: string\n      type: object\n    Location:\n      additionalProperties: false\n      properties:\n        address:\n          $ref: \"#/components/schemas/Address\"\n        business_name:\n          description: The business name of the location\n          example: Dunkin Donuts LLC\n          nullable: true\n          title: name\n          type: string\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        merchant_id:\n          example: \"12345\"\n          type: string\n        name:\n          description: The name of the location\n          example: Dunkin Donuts\n          nullable: true\n          title: name\n          type: string\n        status:\n          description: Status of this location.\n          enum:\n            - active\n            - inactive\n            - other\n          example: active\n          nullable: true\n          title: Status\n          type: string\n          x-apideck-enum-id: locations.status\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      type: object\n      x-apideck-weights:\n        address: high\n        business_name: high\n        created_at: medium\n        created_by: edge-case\n        currency: high\n        id: critical\n        merchant_id: high\n        name: critical\n        status: high\n        updated_at: medium\n        updated_by: edge-case\n    Merchant:\n      additionalProperties: false\n      properties:\n        address:\n          $ref: \"#/components/schemas/Address\"\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        language:\n          description: language code according to ISO 639-1. For the United States - EN\n          example: EN\n          nullable: true\n          type: string\n        main_location_id:\n          description: The main location ID of the merchant\n          example: \"12345\"\n          nullable: true\n          title: Main location ID\n          type: string\n        name:\n          description: The name of the merchant\n          example: Dunkin Donuts\n          nullable: true\n          title: name\n          type: string\n        owner_id:\n          example: \"12345\"\n          title: Owner ID\n          type: string\n        service_charges:\n          items:\n            $ref: \"#/components/schemas/ServiceCharge\"\n          type: array\n        status:\n          description: Status of this merchant.\n          enum:\n            - active\n            - inactive\n            - other\n          example: active\n          nullable: true\n          title: Status\n          type: string\n          x-apideck-enum-id: merchants.status\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      type: object\n      x-apideck-weights:\n        address: medium\n        created_at: medium\n        created_by: edge-case\n        currency: medium\n        id: critical\n        language: medium\n        main_location_id: medium\n        name: critical\n        owner_id: medium\n        status: high\n        updated_at: medium\n        updated_by: edge-case\n    Meta:\n      description: Response metadata\n      properties:\n        cursors:\n          description: Cursors to navigate to previous or next pages through the API\n          properties:\n            current:\n              description: Cursor to navigate to the current page of results through the API\n              example: em9oby1jcm06OnBhZ2U6OjI=\n              nullable: true\n              type: string\n            next:\n              description: Cursor to navigate to the next page of results through the API\n              example: em9oby1jcm06OnBhZ2U6OjM=\n              nullable: true\n              type: string\n            previous:\n              description: Cursor to navigate to the previous page of results through the API\n              example: em9oby1jcm06OnBhZ2U6OjE=\n              nullable: true\n              type: string\n          type: object\n        items_on_page:\n          description: Number of items returned in the data property of the response\n          example: 50\n          type: integer\n      type: object\n    Modifier:\n      additionalProperties: false\n      properties:\n        alternate_name:\n          example: Modifier New\n          title: Alternate name\n          type: string\n        available:\n          $ref: \"#/components/schemas/Available\"\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        modifier_group_id:\n          example: \"123\"\n          title: Modifier group ID\n          type: string\n        name:\n          example: Modifier\n          title: Name\n          type: string\n        price_amount:\n          example: 10\n          title: Price amount\n          type: number\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      required:\n        - name\n        - modifier_group_id\n      type: object\n      x-apideck-weights:\n        alternate_name: edge-case\n        available: high\n        created_at: medium\n        created_by: edge-case\n        currency: high\n        id: critical\n        modifier_group_id: medium\n        name: critical\n        price_amount: high\n        updated_at: medium\n        updated_by: edge-case\n    ModifierGroup:\n      additionalProperties: false\n      properties:\n        alternate_name:\n          example: Modifier New\n          title: Alternate name\n          type: string\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        deleted:\n          $ref: \"#/components/schemas/Deleted\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        maximum_allowed:\n          example: 5\n          title: Maximum allowed\n          type: integer\n        minimum_required:\n          example: 1\n          title: Minimum required\n          type: integer\n        modifiers:\n          items:\n            properties:\n              alternate_name:\n                example: Modifier New\n                title: Alternate name\n                type: string\n              available:\n                $ref: \"#/components/schemas/Available\"\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                example: \"12345\"\n                title: ID\n                type: string\n              name:\n                example: Modifier\n                title: Name\n                type: string\n              price_amount:\n                example: 10\n                title: Price amount\n                type: number\n            x-apideck-weights:\n              alternate_name: medium\n              available: medium\n              currency: medium\n              id: medium\n              name: medium\n              price_amount: medium\n          type: array\n        name:\n          example: Modifier\n          title: Name\n          type: string\n        present_at_all_locations:\n          example: false\n          title: Present at all locations\n          type: boolean\n        row_version:\n          $ref: \"#/components/schemas/RowVersion\"\n        selection_type:\n          enum:\n            - single\n            - multiple\n          example: single\n          title: Indicates whether multiple options from the modifier group can be applied to a single or multiple modifiers\n          type: string\n          x-apideck-enum-id: modifier-groups.selection_type\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      type: object\n      x-apideck-weights:\n        alternate_name: low\n        created_at: medium\n        created_by: edge-case\n        deleted: medium\n        id: critical\n        maximum_allowed: low\n        minimum_required: low\n        modifiers: high\n        name: critical\n        present_at_all_locations: low\n        row_version: edge-case\n        selection_type: medium\n        updated_at: medium\n        updated_by: edge-case\n    ModifierGroupFilter:\n      additionalProperties: false\n      example:\n        modifier_group_id: \"1234\"\n      properties:\n        modifier_group_id:\n          description: Id of the job to filter on\n          example: \"1234\"\n          type: string\n      type: object\n      x-graphql-type-name: ModifierGroupFilter\n    NotFoundResponse:\n      properties:\n        detail:\n          anyOf:\n            - example: \"Could not find widget with id: '123'\"\n              type: string\n            - example:\n                not_found:\n                  entity: widget\n                  id: \"123\"\n              type: object\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Not Found\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Unknown Widget\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#entitynotfounderror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 404\n          type: number\n        type_name:\n          description: The type of error returned\n          example: EntityNotFoundError\n          type: string\n    NotImplementedResponse:\n      properties:\n        detail:\n          anyOf:\n            - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'\n              type: string\n            - type: object\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Not Implemented\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Unmapped Attribute\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#mappingerror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 501\n          type: number\n        type_name:\n          description: The type of error returned\n          example: MappingError\n          type: string\n    Order:\n      additionalProperties: false\n      properties:\n        closed_date:\n          example: 2022-08-13\n          format: date\n          nullable: true\n          type: string\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        customer_id:\n          example: \"12345\"\n          type: string\n        customers:\n          items:\n            properties:\n              emails:\n                items:\n                  $ref: \"#/components/schemas/Email\"\n                type: array\n              first_name:\n                example: Elon\n                nullable: true\n                type: string\n              last_name:\n                example: Musk\n                nullable: true\n                type: string\n              middle_name:\n                example: D.\n                nullable: true\n                type: string\n              phone_numbers:\n                items:\n                  $ref: \"#/components/schemas/PhoneNumber\"\n                type: array\n            type: object\n            x-apideck-weights:\n              emails: medium\n              first_name: medium\n              last_name: medium\n              middle_name: medium\n              phone_numbers: medium\n          type: array\n        discounts:\n          items:\n            properties:\n              amount:\n                example: 27500\n                title: Amount (in cents)\n                type: number\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                $ref: \"#/components/schemas/Id\"\n              name:\n                example: 10% off\n                type: string\n              product_id:\n                $ref: \"#/components/schemas/Id\"\n              scope:\n                enum:\n                  - order\n                  - line_item\n                example: order\n                type: string\n                x-apideck-enum-id: orders.discounts.scope\n              type:\n                enum:\n                  - fixed_percentage\n                example: fixed_percentage\n                type: string\n                x-apideck-enum-id: orders.discounts.type\n            type: object\n            x-apideck-weights:\n              amount: medium\n              currency: medium\n              id: medium\n              name: medium\n              product_id: medium\n              scope: medium\n              type: medium\n          type: array\n        employee_id:\n          example: \"12345\"\n          type: string\n        fulfillments:\n          items:\n            properties:\n              id:\n                example: \"12345\"\n                type: string\n              pickup_details:\n                properties:\n                  accepted_at:\n                    example: 2020-09-30T07:43:32.000Z\n                    format: date-time\n                    nullable: true\n                    readOnly: true\n                    title: Accepted at (timestamp)\n                    type: string\n                  auto_complete_duration:\n                    description: The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').\n                    example: P1W3D\n                    nullable: true\n                    type: string\n                  cancel_reason:\n                    description: A description of why the pickup was canceled.\n                    example: Not hungry\n                    nullable: true\n                    type: string\n                  canceled_at:\n                    description: |-\n                      Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  curbside_pickup_details:\n                    description: Specific details for curbside pickup.\n                    properties:\n                      buyer_arrived_at:\n                        description: |-\n                          Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format\n                          (for example, \"2016-09-04T23:59:33.123Z\").\n                        example: 2016-09-04T23:59:33.123Z\n                        format: date-time\n                        type: string\n                      curbside_details:\n                        description: Specific details for curbside pickup, such as parking number and vehicle model.\n                        maxLength: 250\n                        type: string\n                    type: object\n                    x-apideck-weights:\n                      buyer_arrived_at: medium\n                      curbside_details: medium\n                  expired_at:\n                    description: |-\n                      Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  expires_at:\n                    description: |-\n                      Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\"). The expiration time can only be set up to 7 days in the future.\n                      If `expires_at` is not set, this pickup fulfillment is automatically accepted when \n                      placed.\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  is_curbside_pickup:\n                    description: If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.\n                    type: boolean\n                  note:\n                    description: |-\n                      A note meant to provide additional instructions about the pickup\n                      fulfillment displayed in the Square Point of Sale application and set by the API.\n                    example: Pickup in the back.\n                    type: string\n                  picked_up_at:\n                    description: |-\n                      Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  pickup_at:\n                    description: |-\n                      The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., \n                      \"2016-09-04T23:59:33.123Z\".\n\n                      For fulfillments with the schedule type `ASAP`, this is automatically set\n                      to the current time plus the expected duration to prepare the fulfillment.\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  pickup_window_duration:\n                    description: |-\n                      The window of time in which the order should be picked up after the `pickup_at` timestamp.\n                      Must be in RFC 3339 duration format, e.g., \"P1W3D\". Can be used as an\n                      informational guideline for merchants.\n                    example: P1W3D\n                    type: string\n                  placed_at:\n                    description: |-\n                      Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  prep_time_duration:\n                    description: |-\n                      The duration of time it takes to prepare this fulfillment.\n                      The duration must be in RFC 3339 format (for example, \"P1W3D\").\n                    example: P1W3D\n                    type: string\n                  ready_at:\n                    description: |-\n                      Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  recipient:\n                    properties:\n                      address:\n                        $ref: \"#/components/schemas/Address\"\n                      customer_id:\n                        example: \"12345\"\n                        type: string\n                      email:\n                        $ref: \"#/components/schemas/Email\"\n                      phone_number:\n                        $ref: \"#/components/schemas/PhoneNumber\"\n                    type: object\n                    x-apideck-weights:\n                      address: medium\n                      customer_id: medium\n                      email: medium\n                      phone_number: medium\n                  rejected_at:\n                    description: |-\n                      Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format\n                      (for example, \"2016-09-04T23:59:33.123Z\").\n                    example: 2016-09-04T23:59:33.123Z\n                    format: date-time\n                    type: string\n                  schedule_type:\n                    description: The schedule type of the pickup fulfillment.\n                    enum:\n                      - scheduled\n                    type: string\n                    x-apideck-enum-id: orders.pickup_details.schedule_type\n                type: object\n                x-apideck-weights:\n                  accepted_at: medium\n                  auto_complete_duration: medium\n                  cancel_reason: medium\n                  canceled_at: medium\n                  curbside_pickup_details: medium\n                  expired_at: medium\n                  expires_at: medium\n                  is_curbside_pickup: medium\n                  note: medium\n                  picked_up_at: medium\n                  pickup_at: medium\n                  pickup_window_duration: medium\n                  placed_at: medium\n                  prep_time_duration: medium\n                  ready_at: medium\n                  recipient: medium\n                  rejected_at: medium\n                  schedule_type: medium\n              shipment_details:\n                properties: {}\n                type: object\n                x-apideck-weights: {}\n              status:\n                description: The state of the fulfillment.\n                enum:\n                  - proposed\n                  - reserved\n                  - prepared\n                  - completed\n                  - cancelled\n                  - failed\n                  - other\n                title: Fulfillment status\n                type: string\n                x-apideck-enum-id: orders.fulfillments.status\n              type:\n                enum:\n                  - pickup\n                  - shipment\n                example: shipment\n                type: string\n                x-apideck-enum-id: orders.fulfillments.type\n            type: object\n            x-apideck-weights:\n              id: medium\n              pickup_details: medium\n              shipment_details: medium\n              status: medium\n              type: medium\n          type: array\n        id:\n          $ref: \"#/components/schemas/Id\"\n        line_items:\n          items:\n            properties:\n              applied_discounts:\n                items:\n                  properties:\n                    amount:\n                      example: 27500\n                      title: Amount (in cents)\n                      type: number\n                    currency:\n                      $ref: \"#/components/schemas/Currency\"\n                    discount_id:\n                      example: \"12345\"\n                      type: string\n                    id:\n                      $ref: \"#/components/schemas/Id\"\n                  x-apideck-weights:\n                    amount: medium\n                    currency: medium\n                    discount_id: medium\n                    id: medium\n                type: array\n              applied_taxes:\n                items:\n                  properties:\n                    amount:\n                      example: 27500\n                      title: Amount (in cents)\n                      type: number\n                    currency:\n                      $ref: \"#/components/schemas/Currency\"\n                    id:\n                      $ref: \"#/components/schemas/Id\"\n                    tax_id:\n                      example: sales-tax\n                      type: string\n                  x-apideck-weights:\n                    amount: medium\n                    currency: medium\n                    id: medium\n                    tax_id: medium\n                type: array\n              id:\n                $ref: \"#/components/schemas/Id\"\n              item:\n                properties:\n                  id:\n                    $ref: \"#/components/schemas/Id\"\n                x-apideck-weights:\n                  id: medium\n              modifiers:\n                description: Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts\n                items:\n                  properties:\n                    amount:\n                      example: 27500\n                      title: Amount (in cents)\n                      type: number\n                    currency:\n                      $ref: \"#/components/schemas/Currency\"\n                    name:\n                      example: New York Strip Steak - no cheese\n                      type: string\n                  x-apideck-weights:\n                    amount: medium\n                    currency: medium\n                    name: medium\n                type: array\n              name:\n                example: New York Strip Steak\n                type: string\n              quantity:\n                $ref: \"#/components/schemas/Quantity\"\n              total_amount:\n                example: 27500\n                nullable: true\n                title: Total amount (in cents)\n                type: number\n              total_discount:\n                example: 3000\n                nullable: true\n                title: Total discount amount (in cents)\n                type: number\n              total_tax:\n                example: 2000\n                nullable: true\n                title: Tax amount (in cents)\n                type: number\n              unit_price:\n                $ref: \"#/components/schemas/UnitPrice\"\n            type: object\n            x-apideck-weights:\n              applied_discounts: medium\n              applied_taxes: medium\n              id: medium\n              item: medium\n              modifiers: medium\n              name: medium\n              quantity: medium\n              total_amount: medium\n              total_discount: medium\n              total_tax: medium\n              unit_price: medium\n          type: array\n        location_id:\n          example: \"12345\"\n          type: string\n        merchant_id:\n          example: \"12345\"\n          type: string\n        note:\n          description: A note with information about this order, may be printed on the order receipt and displayed in apps\n          title: Note\n          type: string\n        order_date:\n          example: 2022-08-12\n          format: date\n          nullable: true\n          type: string\n        order_number:\n          example: 1F\n          type: string\n        order_type_id:\n          example: \"12345\"\n          type: string\n        payment_status:\n          description: Is this order paid or not?\n          enum:\n            - open\n            - paid\n            - refunded\n            - credited\n            - partially_paid\n            - partially_refunded\n            - unknown\n          example: open\n          title: PosPayment status\n          type: string\n          x-apideck-enum-id: orders.payment_status\n        payments:\n          items:\n            properties:\n              amount:\n                example: 27500\n                title: Amount (in cents)\n                type: number\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                $ref: \"#/components/schemas/Id\"\n            type: object\n            x-apideck-weights:\n              amount: medium\n              currency: medium\n              id: medium\n          type: array\n        reference_id:\n          description: An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.\n          example: my-order-001\n          nullable: true\n          title: Reference ID\n          type: string\n        refunded:\n          example: false\n          type: boolean\n        refunds:\n          items:\n            properties:\n              amount:\n                example: 27500\n                title: Amount (in cents)\n                type: number\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                $ref: \"#/components/schemas/Id\"\n              location_id:\n                $ref: \"#/components/schemas/Id\"\n              reason:\n                example: The reason for the refund being issued.\n                type: string\n              status:\n                enum:\n                  - pending\n                  - approved\n                  - rejected\n                  - failed\n                type: string\n                x-apideck-enum-id: orders.refunds.status\n              tender_id:\n                $ref: \"#/components/schemas/Id\"\n              transaction_id:\n                $ref: \"#/components/schemas/Id\"\n            type: object\n            x-apideck-weights:\n              amount: medium\n              currency: medium\n              id: medium\n              location_id: medium\n              reason: medium\n              status: medium\n              tender_id: medium\n              transaction_id: medium\n          type: array\n        seat:\n          example: 23F\n          type: string\n        service_charges:\n          $ref: \"#/components/schemas/ServiceCharges\"\n        source:\n          description: Source of order. Indicates the way that the order was placed.\n          enum:\n            - in-store\n            - online\n            - opt\n            - api\n            - kiosk\n            - caller-id\n            - google\n            - invoice\n          example: api\n          nullable: true\n          readOnly: true\n          type: string\n          x-apideck-enum-id: orders.source\n        status:\n          description: \"Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()\"\n          enum:\n            - open\n            - draft\n            - delivered\n            - delayed\n            - voided\n            - completed\n            - hidden\n          example: open\n          title: Status\n          type: string\n          x-apideck-enum-id: orders.status\n        table:\n          example: 1F\n          type: string\n        taxes:\n          items:\n            properties:\n              amount:\n                example: 27500\n                title: Amount (in cents)\n                type: number\n              auto_applied:\n                description: \"Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()\"\n                example: true\n                type: boolean\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                example: state-sales-tax\n                type: string\n              name:\n                description: The tax's name.\n                example: State Sales Tax\n                type: string\n              percentage:\n                $ref: \"#/components/schemas/Percentage\"\n              scope:\n                enum:\n                  - order\n                  - line_item\n                type: string\n                x-apideck-enum-id: orders.taxes.scope\n              type:\n                enum:\n                  - unknown\n                  - additive\n                  - inclusive\n                type: string\n                x-apideck-enum-id: orders.taxes.type\n            x-apideck-weights:\n              amount: medium\n              auto_applied: medium\n              currency: medium\n              id: medium\n              name: medium\n              percentage: medium\n              scope: medium\n              type: medium\n          type: array\n        tenders:\n          items:\n            properties:\n              amount:\n                example: 27500\n                title: Amount\n                type: number\n              buyer_tendered_cash_amount:\n                description: The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.\n                example: 27500\n                nullable: true\n                type: number\n              card:\n                $ref: \"#/components/schemas/PaymentCard\"\n              card_entry_method:\n                description: The entry method of the card. Only applicable when the tender type is card.\n                enum:\n                  - evm\n                  - swiped\n                  - keyed\n                  - on-file\n                  - contactless\n                example: swiped\n                nullable: true\n                type: string\n                x-apideck-enum-id: orders.tenders.card_entry_method\n              card_status:\n                description: The status of the card. Only applicable when the tender type is card.\n                enum:\n                  - authorized\n                  - captured\n                  - failed\n                  - voided\n                example: authorized\n                nullable: true\n                type: string\n                x-apideck-enum-id: orders.tenders.card_status\n              change_back_cash_amount:\n                description: The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.\n                example: 27500\n                nullable: true\n                type: number\n              currency:\n                $ref: \"#/components/schemas/Currency\"\n              id:\n                $ref: \"#/components/schemas/Id\"\n              location_id:\n                $ref: \"#/components/schemas/Id\"\n              name:\n                example: 10% off\n                type: string\n              note:\n                example: An optional note associated with the tender at the time of payment.\n                title: Note\n                type: string\n              payment_id:\n                $ref: \"#/components/schemas/Id\"\n              total_amount:\n                example: 27.5\n                nullable: true\n                title: Total amount (in cents)\n                type: number\n              total_discount:\n                example: 3\n                nullable: true\n                title: Total discount (in cents)\n                type: number\n              total_processing_fee:\n                example: 0\n                nullable: true\n                title: Total processing fee (in cents)\n                type: number\n              total_refund:\n                example: 0\n                nullable: true\n                title: Total refund (in cents)\n                type: number\n              total_service_charge:\n                example: 0\n                nullable: true\n                title: Total service charge (in cents)\n                type: number\n              total_tax:\n                example: 2.75\n                nullable: true\n                title: Total tax (in cents)\n                type: number\n              total_tip:\n                example: 7\n                nullable: true\n                title: Total tax (in cents)\n                type: number\n              transaction_id:\n                $ref: \"#/components/schemas/Id\"\n              type:\n                enum:\n                  - cash\n                  - card\n                  - other\n                example: cash\n                type: string\n                x-apideck-enum-id: orders.tenders.type\n            type: object\n            x-apideck-weights:\n              amount: medium\n              buyer_tendered_cash_amount: medium\n              card: medium\n              card_entry_method: medium\n              card_status: medium\n              change_back_cash_amount: medium\n              currency: medium\n              id: medium\n              location_id: medium\n              name: medium\n              note: medium\n              payment_id: medium\n              total_amount: medium\n              total_discount: medium\n              total_processing_fee: medium\n              total_refund: medium\n              total_service_charge: medium\n              total_tax: medium\n              total_tip: medium\n              transaction_id: medium\n              type: medium\n          type: array\n        title:\n          title: Title\n          type: string\n        total_amount:\n          example: 27.5\n          nullable: true\n          title: Total amount (in cents)\n          type: number\n        total_discount:\n          example: 3\n          nullable: true\n          title: Total discount (in cents)\n          type: number\n        total_refund:\n          example: 0\n          nullable: true\n          title: Total refund (in cents)\n          type: number\n        total_service_charge:\n          example: 0\n          nullable: true\n          title: Total service charge (in cents)\n          type: number\n        total_tax:\n          example: 2.75\n          nullable: true\n          title: Total tax (in cents)\n          type: number\n        total_tip:\n          example: 7\n          nullable: true\n          title: Total tax (in cents)\n          type: number\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n        version:\n          $ref: \"#/components/schemas/Version\"\n        voided:\n          example: false\n          type: boolean\n        voided_at:\n          example: 2020-09-30T07:43:32.000Z\n          format: date-time\n          readOnly: true\n          title: Updated at (timestamp)\n          type: string\n      required:\n        - location_id\n        - merchant_id\n      type: object\n      x-apideck-weights:\n        closed_date: high\n        created_at: medium\n        created_by: edge-case\n        currency: medium\n        customer_id: medium\n        customers: medium\n        discounts: medium\n        employee_id: medium\n        fulfillments: medium\n        id: critical\n        line_items: medium\n        location_id: critical\n        merchant_id: critical\n        note: medium\n        order_date: critical\n        order_number: high\n        order_type_id: medium\n        payment_status: high\n        payments: medium\n        reference_id: low\n        refunded: medium\n        refunds: medium\n        seat: medium\n        service_charges: medium\n        source: medium\n        state: high\n        status: high\n        table: medium\n        taxes: medium\n        tenders: medium\n        title: high\n        total_amount: high\n        total_discount: medium\n        total_refund: medium\n        total_service_charge: medium\n        total_tax: medium\n        total_tip: medium\n        updated_at: medium\n        updated_by: edge-case\n        version: low\n        voided: medium\n        voided_at: medium\n    OrderType:\n      additionalProperties: false\n      properties:\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        default:\n          example: true\n          title: Default\n          type: boolean\n        id:\n          $ref: \"#/components/schemas/Id\"\n        name:\n          example: Default order type\n          title: Order type name\n          type: string\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      type: object\n      x-apideck-weights:\n        created_at: medium\n        created_by: edge-case\n        default: medium\n        id: medium\n        name: medium\n        updated_at: medium\n        updated_by: edge-case\n    PaymentCard:\n      additionalProperties: false\n      description: A card's non-confidential details.\n      nullable: true\n      properties:\n        billing_address:\n          $ref: \"#/components/schemas/Address\"\n        bin:\n          description: The first six digits of the card number, known as the Bank Identification Number (BIN).\n          example: \"41111\"\n          nullable: true\n          type: string\n        card_brand:\n          description: The first six digits of the card number, known as the Bank Identification Number (BIN).\n          enum:\n            - visa\n            - mastercard\n            - amex\n            - discover\n            - discover-diners\n            - jcb\n            - china-unionpay\n            - square-gift-card\n            - square-capital-card\n            - interac\n            - eftpos\n            - felica\n            - ebt\n            - other\n          nullable: true\n          type: string\n          x-apideck-enum-id: payment-cards.card_brand\n        card_type:\n          enum:\n            - credit\n            - debit\n            - prepaid\n            - other\n          example: credit\n          nullable: true\n          type: string\n          x-apideck-enum-id: payment-cards.card_type\n        cardholder_name:\n          example: John Doe\n          nullable: true\n          type: string\n        customer_id:\n          example: \"12345\"\n          nullable: true\n          type: string\n        enabled:\n          description: Indicates whether or not a card can be used for payments.\n          example: true\n          nullable: true\n          type: boolean\n        exp_month:\n          description: The expiration month of the associated card as an integer between 1 and 12.\n          example: 1\n          maximum: 12\n          minimum: 1\n          nullable: true\n          type: integer\n        exp_year:\n          description: The four-digit year of the card's expiration date.\n          example: 2022\n          nullable: true\n          type: integer\n        fingerprint:\n          example: \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\"\n          nullable: true\n          type: string\n        id:\n          $ref: \"#/components/schemas/Id\"\n        last_4:\n          example: The last 4 digits of the card number.\n          nullable: true\n          type: string\n        merchant_id:\n          example: \"12345\"\n          type: string\n        prepaid_type:\n          enum:\n            - non-prepaid\n            - prepaid\n            - unknown\n          example: prepaid\n          nullable: true\n          type: string\n          x-apideck-enum-id: payment-cards.prepaid_type\n        reference_id:\n          description: An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.\n          example: card-001\n          nullable: true\n          title: Reference ID\n          type: string\n        version:\n          $ref: \"#/components/schemas/Version\"\n      type: object\n    PaymentRequiredResponse:\n      properties:\n        detail:\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n          example: You have reached your limit of 2000\n          type: string\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Payment Required\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Request Limit Reached\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#requestlimiterror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 402\n          type: number\n        type_name:\n          description: The type of error returned\n          example: RequestLimitError\n          type: string\n    Percentage:\n      example: 15\n      title: Percentage\n      type: number\n    PhoneNumber:\n      additionalProperties: false\n      properties:\n        area_code:\n          example: \"323\"\n          nullable: true\n          title: Area code\n          type: string\n        country_code:\n          example: \"1\"\n          nullable: true\n          title: Country code\n          type: string\n        extension:\n          example: \"105\"\n          nullable: true\n          title: Phone extension\n          type: string\n        id:\n          example: \"12345\"\n          nullable: true\n          type: string\n        number:\n          example: 111-111-1111\n          minLength: 1\n          title: Phone number\n          type: string\n        type:\n          enum:\n            - primary\n            - secondary\n            - home\n            - work\n            - office\n            - mobile\n            - assistant\n            - fax\n            - direct-dial-in\n            - personal\n            - other\n          example: primary\n          type: string\n          x-apideck-enum-id: phone_numbers.type\n          x-graphql-type-name: PhoneType\n      required:\n        - number\n      type: object\n      x-apideck-weights:\n        area_code: edge-case\n        country_code: edge-case\n        extension: edge-case\n        id: edge-case\n        number: critical\n        type: critical\n    PosPayment:\n      additionalProperties: false\n      properties:\n        amount:\n          example: 27.5\n          title: Amount (in cents)\n          type: number\n        app_fee:\n          description: The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.\n          example: 3\n          title: App fee\n          type: number\n        approved:\n          description: The initial amount of money approved for this payment.\n          example: 37.5\n          title: Approved amount (in cents)\n          type: number\n        bank_account:\n          description: Card details for this payment. This field is currently not available. Reach out to our team for more info.\n          properties:\n            account_ownership_type:\n              description: |-\n                The ownership type of the bank account performing the transfer.\n                The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.\n              maxLength: 50\n              type: string\n            ach_details:\n              description: ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.\n              properties:\n                account_number_suffix:\n                  description: The last few digits of the bank account number.\n                  maxLength: 4\n                  type: string\n                account_type:\n                  description: |-\n                    The type of the bank account performing the transfer. The account type can be `CHECKING`,\n                    `SAVINGS`, or `UNKNOWN`.\n                  maxLength: 50\n                  type: string\n                routing_number:\n                  description: The routing number for the bank account.\n                  maxLength: 50\n                  type: string\n              type: object\n            bank_name:\n              description: The name of the bank associated with the bank account.\n              maxLength: 100\n              type: string\n            country:\n              description: country code according to ISO 3166-1 alpha-2.\n              example: US\n              maxLength: 2\n              minLength: 2\n              nullable: true\n              type: string\n            fingerprint:\n              description: |-\n                Uniquely identifies the bank account for this seller and can be used\n                to determine if payments are from the same bank account.\n              maxLength: 255\n              type: string\n            statement_description:\n              description: The statement description as sent to the bank.\n              maxLength: 1000\n              type: string\n            transfer_type:\n              description: The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.\n              maxLength: 50\n              type: string\n          title: Bank account\n          type: object\n        card_details:\n          properties:\n            card:\n              $ref: \"#/components/schemas/PaymentCard\"\n          type: object\n        cash:\n          description: Cash details for this payment\n          properties:\n            amount: {}\n            charge_back_amount:\n              description: \"The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.\"\n          title: Cash details\n          type: object\n        change_back_cash_amount:\n          example: 20\n          title: Change back cash amount (in cents)\n          type: number\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        customer_id:\n          example: \"12345\"\n          type: string\n        device_id:\n          example: \"12345\"\n          type: string\n        employee_id:\n          example: \"12345\"\n          type: string\n        external_details:\n          description: Details about an external payment.\n          properties:\n            source:\n              description: |-\n                A description of the external payment source. For example, \n                \"Food Delivery Service\".\n              maxLength: 255\n              type: string\n            source_fee_amount:\n              description: The fees paid to the source. The amount minus this field is the net amount seller receives.\n              example: 2.5\n              title: Source fee\n              type: number\n            source_id:\n              description: An ID to associate the payment to its originating source.\n              maxLength: 255\n              type: string\n            type:\n              description: |-\n                The type of external payment the seller received. It can be one of the following:\n                - CHECK - Paid using a physical check.\n                - BANK_TRANSFER - Paid using external bank transfer.\n                - OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card.\n                - CRYPTO - Paid using a crypto currency.\n                - SQUARE_CASH - Paid using Square Cash App.\n                - SOCIAL - Paid using peer-to-peer payment applications.\n                - EXTERNAL - A third-party application gathered this payment outside of Square.\n                - EMONEY - Paid using an E-money provider.\n                - CARD - A credit or debit card that Square does not support.\n                - STORED_BALANCE - Use for house accounts, store credit, and so forth.\n                - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals\n                - OTHER - A type not listed here.\n              enum:\n                - check\n                - bank_transfer\n                - other_gift_card\n                - crypto\n                - square_cash\n                - social\n                - external\n                - emoney\n                - card\n                - stored_balance\n                - food_voucher\n                - other\n              maxLength: 50\n              type: string\n              x-apideck-enum-id: pos-payments.external_details.type\n          required:\n            - type\n            - source\n          type: object\n        external_payment_id:\n          example: \"12345\"\n          type: string\n        id:\n          $ref: \"#/components/schemas/Id\"\n        idempotency_key:\n          $ref: \"#/components/schemas/IdempotencyKey\"\n        location_id:\n          example: \"12345\"\n          type: string\n        merchant_id:\n          example: \"12345\"\n          type: string\n        order_id:\n          example: \"12345\"\n          type: string\n        processing_fees:\n          example:\n            - amount: 1.05\n              effective_at: 2020-09-30T07:43:32.000Z\n              processing_type: initial\n          items:\n            properties:\n              amount:\n                example: 1.05\n                title: Amount (in cents)\n                type: number\n              effective_at:\n                example: 2020-09-30T07:43:32.000Z\n                format: date-time\n                title: Effective at (timestamp)\n                type: string\n              processing_type:\n                enum:\n                  - initial\n                  - adjustment\n                title: Type\n                type: string\n                x-apideck-enum-id: pos-payments.processing_fees.processing_type\n          type: array\n        refunded:\n          description: The initial amount of money approved for this payment.\n          example: 37.5\n          title: The total amount (in cents) of the payment refunded to date.\n          type: number\n        service_charges:\n          $ref: \"#/components/schemas/ServiceCharges\"\n        source:\n          description: Source of this payment.\n          enum:\n            - card\n            - bank_account\n            - wallet\n            - bnpl\n            - cash\n            - external\n            - other\n          example: external\n          type: string\n          x-apideck-enum-id: pos-payments.source\n        source_id:\n          example: \"12345\"\n          type: string\n        status:\n          description: Status of this payment.\n          enum:\n            - approved\n            - pending\n            - completed\n            - canceled\n            - failed\n            - other\n          example: approved\n          title: Status\n          type: string\n          x-apideck-enum-id: pos-payments.status\n          x-graphql-type-name: PosPosPaymentStatus\n        tax:\n          example: 20\n          title: Tax amount (in cents)\n          type: number\n        tender_id:\n          example: \"12345\"\n          type: string\n        tip:\n          example: 7\n          title: Tip amount (in cents)\n          type: number\n        total:\n          example: 37.5\n          title: Total amount (in cents)\n          type: number\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n        wallet:\n          description: Wallet details for this payment. This field is currently not available. Reach out to our team for more info.\n          properties:\n            status:\n              description: The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.\n              enum:\n                - authorized\n                - captured\n                - voided\n                - failed\n                - other\n              maxLength: 50\n              type: string\n              x-apideck-enum-id: pos-payments.wallet.status\n          title: Wallet details\n          type: object\n      required:\n        - source_id\n        - customer_id\n        - amount\n        - currency\n        - order_id\n        - tender_id\n      type: object\n    PosWebhookEvent:\n      allOf:\n        - properties:\n            entity_id:\n              description: The service provider's ID of the entity that triggered this event\n              example: 123456ASDF\n              type: string\n            entity_type:\n              description: The type entity that triggered this event\n              example: Company\n              type: string\n            entity_url:\n              description: The url to retrieve entity detail.\n              example: https://unify.apideck.com/crm/contacts/123456\n              type: string\n            event_id:\n              description: Unique reference to this request event\n              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb\n              type: string\n            execution_attempt:\n              description: The current count this request event has been attempted\n              example: 2\n              type: number\n            occurred_at:\n              description: ISO Datetime for when the original event occurred\n              example: 2021-10-01T03:14:55.419Z\n              type: string\n            service_id:\n              description: Service provider identifier\n              example: close\n              type: string\n          type: object\n        - properties:\n            event_type:\n              enum:\n                - pos.order.created\n                - pos.order.updated\n                - pos.order.deleted\n                - pos.payment.created\n                - pos.payment.updated\n                - pos.payment.deleted\n                - pos.merchant.created\n                - pos.merchant.updated\n                - pos.merchant.deleted\n                - pos.location.created\n                - pos.location.updated\n                - pos.location.deleted\n                - pos.item.created\n                - pos.item.updated\n                - pos.item.deleted\n                - pos.modifier.created\n                - pos.modifier.updated\n                - pos.modifier.deleted\n                - pos.modifier-group.created\n                - pos.modifier-group.updated\n                - pos.modifier-group.deleted\n              example: pos.order.created\n              type: string\n          type: object\n      x-sdk-exclude: true\n    Quantity:\n      example: 1\n      nullable: true\n      title: Quantity\n      type: number\n    RowVersion:\n      example: 1-12345\n      nullable: true\n      title: Row version\n      type: string\n    Sequence:\n      example: 1\n      nullable: true\n      title: Sequence\n      type: number\n    ServiceCharge:\n      properties:\n        active:\n          $ref: \"#/components/schemas/Active\"\n        amount:\n          example: 27500\n          title: Amount (in cents)\n          type: number\n        currency:\n          $ref: \"#/components/schemas/Currency\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        name:\n          description: Service charge name\n          example: Charge for delivery\n          type: string\n        percentage:\n          description: Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.\n          example: 12.5\n          type: number\n        type:\n          description: The type of the service charge.\n          enum:\n            - auto_gratuity\n            - custom\n          type: string\n          x-apideck-enum-id: service-charges.type\n      type: object\n    ServiceCharges:\n      description: Optional service charges or gratuity tip applied to the order.\n      items:\n        $ref: \"#/components/schemas/ServiceCharge\"\n      type: array\n      x-apideck-weights:\n        amount: critical\n        currency: high\n        name: high\n        percentage: high\n        type: high\n    SocialLink:\n      additionalProperties: false\n      properties:\n        id:\n          example: \"12345\"\n          nullable: true\n          type: string\n        type:\n          example: twitter\n          nullable: true\n          type: string\n        url:\n          example: https://www.twitter.com/apideck-io\n          minLength: 1\n          type: string\n      required:\n        - url\n      type: object\n      x-apideck-weights:\n        id: edge-case\n        type: critical\n        url: critical\n    Tags:\n      example:\n        - New\n      items:\n        type: string\n      type: array\n    Tender:\n      additionalProperties: false\n      properties:\n        active:\n          $ref: \"#/components/schemas/Active\"\n        allows_tipping:\n          default: true\n          description: Allow tipping on payment from tender\n          type: boolean\n        created_at:\n          $ref: \"#/components/schemas/CreatedAt\"\n        created_by:\n          $ref: \"#/components/schemas/CreatedBy\"\n        editable:\n          $ref: \"#/components/schemas/Hidden\"\n        hidden:\n          $ref: \"#/components/schemas/Hidden\"\n        id:\n          $ref: \"#/components/schemas/Id\"\n        key:\n          example: com.clover.tender.cash\n          nullable: true\n          type: string\n        label:\n          example: Cash\n          nullable: true\n          type: string\n        opens_cash_drawer:\n          default: true\n          description: If this tender opens the cash drawer\n          type: boolean\n        updated_at:\n          $ref: \"#/components/schemas/UpdatedAt\"\n        updated_by:\n          $ref: \"#/components/schemas/UpdatedBy\"\n      type: object\n      x-apideck-weights:\n        active: medium\n        allows_tipping: medium\n        created_at: medium\n        created_by: edge-case\n        editable: low\n        hidden: low\n        id: critical\n        key: high\n        label: high\n        opens_cash_drawer: low\n        updated_at: medium\n        updated_by: edge-case\n    TooManyRequestsResponse:\n      properties:\n        detail:\n          properties:\n            context:\n              type: string\n            error:\n              additionalProperties: true\n              type: object\n          type: object\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)\n          example: Too Many Requests\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Connector Rate Limit Error\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#connectorratelimiterror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 429\n          type: number\n        type_name:\n          description: The type of error returned\n          example: ConnectorRateLimitError\n          type: string\n    UnauthorizedResponse:\n      properties:\n        detail:\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n          example: Failed to generate valid JWT Session. Verify applicationId is correct\n          type: string\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Unauthorized\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Unauthorized Request\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#unauthorizederror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 401\n          type: number\n        type_name:\n          description: The type of error returned\n          example: UnauthorizedError\n          type: string\n    UnexpectedErrorResponse:\n      properties:\n        detail:\n          anyOf:\n            - example: \"Missing Header: x-apideck-consumer-id\"\n              type: string\n            - example:\n                missing:\n                  - x-apideck-consumer-id: required\n              type: object\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Bad Request\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Invalid Params\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#unauthorizederror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 400\n          type: number\n        type_name:\n          description: The type of error returned\n          example: RequestHeadersValidationError\n          type: string\n    UnifiedId:\n      properties:\n        id:\n          example: \"12345\"\n          readOnly: true\n          type: string\n      required:\n        - id\n      title: UnifiedId\n    UnitPrice:\n      example: 27500.5\n      nullable: true\n      title: Unit price\n      type: number\n    UnprocessableResponse:\n      properties:\n        detail:\n          description: Contains parameter or domain specific information related to the error and why it occurred.\n          example: State did not include unified_api\n          type: string\n        error:\n          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)\n          example: Unprocessable Entity\n          type: string\n        message:\n          description: A human-readable message providing more details about the error.\n          example: Invalid State\n          type: string\n        ref:\n          description: Link to documentation of error type\n          example: https://developers.apideck.com/errors#invalidstateerror\n          type: string\n        status_code:\n          description: HTTP status code\n          example: 422\n          type: number\n        type_name:\n          description: The type of error returned\n          example: InvalidStateError\n          type: string\n    UpdateItemResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Items\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateLocationResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Locations\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateMerchantResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Merchants\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateModifierGroupResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: ModifierGroups\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateModifierResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Modifiers\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateOrderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Orders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateOrderTypeResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: OrderTypes\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdatePosPaymentResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: PosPayments\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: square\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdateTenderResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/UnifiedId\"\n        operation:\n          description: Operation performed\n          example: one\n          type: string\n        resource:\n          description: Unified API resource name\n          example: Tenders\n          type: string\n        service:\n          description: Apideck ID of service provider\n          example: clover\n          type: string\n        status:\n          description: HTTP Response Status\n          example: OK\n          type: string\n        status_code:\n          description: HTTP Response Status Code\n          example: 200\n          type: integer\n      required:\n        - status_code\n        - status\n        - service\n        - resource\n        - operation\n        - data\n      type: object\n    UpdatedAt:\n      example: 2020-09-30T07:43:32.000Z\n      format: date-time\n      readOnly: true\n      title: Updated at (timestamp)\n      type: string\n    UpdatedBy:\n      example: \"12345\"\n      nullable: true\n      readOnly: true\n      type: string\n    Version:\n      example: \"230320320320\"\n      nullable: true\n      title: Version\n      type: string\n    Website:\n      additionalProperties: false\n      properties:\n        id:\n          example: \"12345\"\n          nullable: true\n          type: string\n        type:\n          enum:\n            - primary\n            - secondary\n            - work\n            - personal\n            - other\n          example: primary\n          type: string\n          x-apideck-enum-id: websites.type\n          x-graphql-type-name: WebsiteType\n        url:\n          example: http://example.com\n          minLength: 1\n          type: string\n      required:\n        - url\n      type: object\n      x-apideck-weights:\n        id: edge-case\n        type: critical\n        url: critical\n  securitySchemes:\n    apiKey:\n      description: |\n        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. \n        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.\n        Your Apideck application_id can also be found on the same page.\n\n        Authenticate your API requests by including your test or live secret API key in the request header. \n\n        - Bearer authorization header: `Authorization: Bearer \u003cyour-apideck-api-key\u003e`\n        - Application id header: `x-apideck-app-id: \u003cyour-apideck-app-id\u003e`\n\n        You should use the public keys on the SDKs and the secret keys to authenticate API requests.\n\n        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.\n\n        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key\n\n        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys\n      in: header\n      name: Authorization\n      type: apiKey\nx-webhooks:\n  ItemCreated:\n    post:\n      description: Item created\n      operationId: itemCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Item created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.item.created\n  ItemDeleted:\n    post:\n      description: Item deleted\n      operationId: itemDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Item deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.item.deleted\n  ItemUpdated:\n    post:\n      description: Item updated\n      operationId: itemUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Item updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.item.updated\n  LocationCreated:\n    post:\n      description: Location created\n      operationId: locationCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Location created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.location.created\n  LocationDeleted:\n    post:\n      description: Location deleted\n      operationId: locationDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Location deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.location.deleted\n  LocationUpdated:\n    post:\n      description: Location updated\n      operationId: locationUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Location updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.location.updated\n  MerchantCreated:\n    post:\n      description: Merchant created\n      operationId: merchantCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Merchant created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.merchant.created\n  MerchantDeleted:\n    post:\n      description: Merchant deleted\n      operationId: merchantDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Merchant deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.merchant.deleted\n  MerchantUpdated:\n    post:\n      description: Merchant updated\n      operationId: merchantUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Merchant updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.merchant.updated\n  ModifierCreated:\n    post:\n      description: Modifier created\n      operationId: modifierCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier.created\n  ModifierDeleted:\n    post:\n      description: Modifier deleted\n      operationId: modifierDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier.deleted\n  ModifierGroupCreated:\n    post:\n      description: Modifier Group created\n      operationId: modifierGroupCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier Group created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier-group.created\n  ModifierGroupDeleted:\n    post:\n      description: Modifier Group deleted\n      operationId: modifierGroupDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier Group deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier-group.deleted\n  ModifierGroupUpdated:\n    post:\n      description: Modifier Group updated\n      operationId: modifierGroupUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier Group updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier-group.updated\n  ModifierUpdated:\n    post:\n      description: Modifier updated\n      operationId: modifierUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Modifier updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.modifier.updated\n  OrderCreated:\n    post:\n      description: Order created\n      operationId: orderCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Order created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.order.created\n      x-apideck-upcoming: true\n  OrderDeleted:\n    post:\n      description: Order deleted\n      operationId: orderDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Order deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.order.deleted\n      x-apideck-upcoming: true\n  OrderUpdated:\n    post:\n      description: Order updated\n      operationId: orderUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: Order updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.order.updated\n      x-apideck-upcoming: true\n  PosPaymentCreated:\n    post:\n      description: PosPayment created\n      operationId: paymentCreated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: PosPayment created\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.payment.created\n  PosPaymentDeleted:\n    post:\n      description: PosPayment deleted\n      operationId: paymentDeleted\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: PosPayment deleted\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.payment.deleted\n  PosPaymentUpdated:\n    post:\n      description: PosPayment updated\n      operationId: paymentUpdated\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PosWebhookEvent\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n      summary: PosPayment updated\n      tags:\n        - Webhook Events\n      x-apideck-event-type: pos.payment.updated\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/apideck.com/pos/8.32.6/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/apideck.com/pos/8.32.6/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}