{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mulesoft/api-console"
		},
		"file": {
			"name": "APIC-557.yaml",
			"size": 0,
			"path": "demo/models/APIC-557/APIC-557.yaml",
			"byteSize": 6269,
			"content": "openapi: \"3.0.0\"\nexternalDocs:\n  url: petstore.com\n  description: Pet Store website\ninfo:\n  version: 1.0.0\n  contact: \n    name: John Smith\n    email: jsmith@petstore.com\n    url: petstore.com\n  title: OpenAPI Spec 3.0  Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\n    description: prodcutive env\n  - url: http://qa.petstore.swagger.io/v1\n    description: qa env\n  - url: http://dev.petstore.swagger.io/v1\n    description: dev env\n  \ncomponents:\n  \n  responses:\n    \"200\":\n      description: \"ok\"\n      content:\n        application/json: \n          schema:\n            $ref: \"#/components/schemas/Pet\"\n            example: \n              $ref: \"#/components/schemas/Pet\"\n  links:\n    UserRepositories:\n      # returns array of '#/components/schemas/repository'\n      operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n      parameters:\n        username: $response.body#/username\n  securitySchemes:\n    api_key:\n      type: \"apiKey\"\n      description: Api key security\n      name: \"api_key\"\n      in: \"header\"\n    petstore_auth:\n      type: oauth2\n      flows: \n        implicit:\n          authorizationUrl: https://example.com/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n        authorizationCode:\n          authorizationUrl: https://example.com/api/oauth/dialog\n          tokenUrl: https://example.com/api/oauth/token\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets \n  examples:\n    petsArrayExample:\n      summary: s\n      description: aaa\n      value: \n        -  \n            id: 233\n            name: Archie\n        - \n            id: 455\n            name: Bella\n    petExample1:\n      description: pet1\n      value: \n        id: 2333\n        name: Max\n    petExample2:\n      description: pet2\n      value: \n        id: 344\n        name: Brea\n    errorExample:\n      value: \n        code: 1400\n        message: Unexpected error\n  schemas:\n    Pet:\n      type: object\n      required: \n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required: \n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\npaths: \n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: how many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          \n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link\n              schema:\n                type: string\n          content:\n            application/json: \n              schema:\n                $ref: \"#/components/schemas/Pets\" \n              examples: \n                pet1:\n                  $ref: \"#/components/examples/petsArrayExample\"\n    \n    post:\n      summary: Create a pet\n \n      requestBody:\n        content:\n          application/json: \n            schema:\n              $ref: \"#/components/schemas/Pet\"\n              \n            examples:\n              e1:\n                $ref: \"#/components/examples/petExample1\"\n                \n      \n      tags:\n        - pets\n      responses:\n        \"201\":\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json: \n              schema: \n                $ref: \"#/components/schemas/Error\"\n              examples:\n                err1:\n                  $ref: \"#/components/examples/errorExample\"\n  /pets/{petId}:\n    get:\n      summary: Info for specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        default:\n          \n            $ref: \"#/components/responses/200\"\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json: \n              schema:\n                $ref: \"#/components/schemas/Pet\"\n           \n              examples:\n                one: \n                  $ref: \"#/components/examples/petExample1\"\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    get:\n      responses:\n    \n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId \n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address               \n          content:\n            application/json: \n              schema:\n                type: object\n                properties:\n                  addressLine1: \n                    type: string\n                  country: \n                    type: string\n                example: \n                  addressLine1: Washintong 3434\n                  country: USA",
			"canonicalURL": "/github.com/mulesoft/api-console@23fc579a4f8d520009a4587ddaf5f003d5ef9105/-/blob/demo/models/APIC-557/APIC-557.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mulesoft/api-console/blob/23fc579a4f8d520009a4587ddaf5f003d5ef9105/demo/models/APIC-557/APIC-557.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}