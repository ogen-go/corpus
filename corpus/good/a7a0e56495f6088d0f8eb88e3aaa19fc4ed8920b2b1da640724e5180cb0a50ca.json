{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/john30/ebusd"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "contrib/html/openapi.yaml",
			"byteSize": 22424,
			"content": "openapi: 3.1.0\ninfo:\n  title: ebusd-http\n  description: The API that ebusd provides on HTTP port.\n  version: \"22.3\"\nservers:\n  - url: http://127.0.0.1:8080/\npaths:\n  /data:\n    get:\n      summary: Get all messages of all circuits.\n      parameters:\n        - $ref: '#/components/parameters/sinceQuery'\n        - $ref: '#/components/parameters/pollQuery'\n        - $ref: '#/components/parameters/verboseQuery'\n        - $ref: '#/components/parameters/indexedQuery'\n        - $ref: '#/components/parameters/numericQuery'\n        - $ref: '#/components/parameters/valuenameQuery'\n        - $ref: '#/components/parameters/fullQuery'\n        - $ref: '#/components/parameters/requiredQuery'\n        - $ref: '#/components/parameters/writeQuery'\n        - $ref: '#/components/parameters/rawQuery'\n        - $ref: '#/components/parameters/defQuery'\n        - $ref: '#/components/parameters/userQuery'\n        - $ref: '#/components/parameters/secretQuery'\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Data'\n        400:\n          description: Invalid request parameters.\n          content: { }\n        403:\n          description: User not authorized.\n          content: { }\n        404:\n          description: Circuit or message not found.\n          content: { }\n        500:\n          description: General error.\n          content: { }\n  /data/{circuit}:\n    get:\n      summary: Get all messages of a particular circuit.\n      parameters:\n        - name: circuit\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/sinceQuery'\n        - $ref: '#/components/parameters/pollQuery'\n        - $ref: '#/components/parameters/exactQuery'\n        - $ref: '#/components/parameters/verboseQuery'\n        - $ref: '#/components/parameters/indexedQuery'\n        - $ref: '#/components/parameters/numericQuery'\n        - $ref: '#/components/parameters/valuenameQuery'\n        - $ref: '#/components/parameters/fullQuery'\n        - $ref: '#/components/parameters/requiredQuery'\n        - $ref: '#/components/parameters/writeQuery'\n        - $ref: '#/components/parameters/rawQuery'\n        - $ref: '#/components/parameters/defQuery'\n        - $ref: '#/components/parameters/userQuery'\n        - $ref: '#/components/parameters/secretQuery'\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Data'\n        400:\n          description: Invalid request parameters.\n          content: { }\n        403:\n          description: User not authorized.\n          content: { }\n        404:\n          description: Circuit or message not found.\n          content: { }\n        500:\n          description: General error.\n          content: { }\n  /data/{circuit}/{message}:\n    get:\n      summary: Get a particular message of a particular circuit.\n      parameters:\n        - name: circuit\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: message\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/sinceQuery'\n        - $ref: '#/components/parameters/pollQuery'\n        - $ref: '#/components/parameters/exactQuery'\n        - $ref: '#/components/parameters/verboseQuery'\n        - $ref: '#/components/parameters/indexedQuery'\n        - $ref: '#/components/parameters/numericQuery'\n        - $ref: '#/components/parameters/valuenameQuery'\n        - $ref: '#/components/parameters/fullQuery'\n        - $ref: '#/components/parameters/requiredQuery'\n        - $ref: '#/components/parameters/writeQuery'\n        - $ref: '#/components/parameters/rawQuery'\n        - $ref: '#/components/parameters/defQuery'\n        - $ref: '#/components/parameters/defineQuery'\n        - $ref: '#/components/parameters/userQuery'\n        - $ref: '#/components/parameters/secretQuery'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/Data'\n        500:\n          description: Circuit or message not found.\n          content: { }\n  /datatypes:\n    get:\n      summary: Get all known field data types.\n      responses:\n        200:\n          description: Success.\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/DataTypes'\n        400:\n          description: Invalid request parameters.\n          content: { }\n        403:\n          description: User not authorized.\n          content: { }\n        404:\n          description: Circuit or message not found.\n          content: { }\n        500:\n          description: General error.\n          content: { }\n  /raw:\n    get:\n      summary: Retrieve raw data from grabbed and/or decoded messages.\n      parameters:\n        - $ref: '#/components/parameters/sinceQuery'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/RawMessages'\n  /decode:\n    get:\n      summary: Decode raw data with the specified field defintion.\n      parameters:\n        - name: def\n          in: query\n          description: the field definition (starting with type).\n          allowEmptyValue: false\n          required: true\n          schema:\n            type: string\n        - name: raw\n          in: query\n          description: the raw symbols to decode as hex sequence.\n          required: true\n          allowEmptyValue: false\n          schema:\n            type: string\n            pattern: '^([0-9a-f][0-9a-f])+$'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json;charset=utf-8:\n              schema:\n                $ref: '#/components/schemas/FieldValue'\n  /{file}:\n    get:\n      summary: Retrieve a particular file.\n      parameters:\n        - name: file\n          in: path\n          description: the file to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            text/html:\n              schema:\n                type: string\n                format: binary\n            text/css:\n              schema:\n                type: string\n                format: binary\n            application/javascript:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/svg+xml:\n              schema:\n                type: string\n                format: binary\n            application/json;charset=utf-8:\n              schema:\n                type: string\n                format: binary\n            application/yaml;charset=utf-8:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: Invalid request parameters.\n          content: { }\n        403:\n          description: User not authorized.\n          content: { }\n        404:\n          description: Circuit or message not found.\n          content: { }\n        500:\n          description: General error.\n          content: { }\n#    head:\n#      summary: Retrieve headers for a certain file.\n#      parameters:\n#        - name: file\n#          in: path\n#          description: the file to retrieve.\n#          required: true\n#          schema:\n#            type: string\n#      responses:\n#        200:\n#          description: Success\n#          content:\n#            application/json;charset=utf-8:\n#              schema:\n#                $ref: '#/components/schemas/Data'\n#        400:\n#          description: Circuit or message not found.\n#          content: { }\n\ncomponents:\n  schemas:\n    Seconds:\n      minimum: 0\n      type: integer\n      description: the time in UTC seconds (0 for never).\n      example: 1493483370\n    Global:\n      required:\n        - version\n        - signal\n        - reconnects\n        - masters\n        - messages\n        - lastup\n      type: object\n      properties:\n        version:\n          pattern: '[0-9]+\\.[0-9]+\\.[0-9a-f]+\\.'\n          type: string\n          description: the ebusd version (major.minor.sha1 or major.minor.date).\n          example: 3.0.1234abc\n        updatecheck:\n          type: string\n          description: the result of update check (\"OK\" or string describing available\n            updates).\n          example: revision 1234abd available, 5 newer configuration files available\n        user:\n          type: string\n          description: logged in user name.\n        access:\n          type: string\n          description: access level(s) of the logged in user.\n        signal:\n          type: boolean\n          description: whether signal is available.\n          example: true\n        symbolrate:\n          minimum: 0\n          type: integer\n          description: the current symbol rate on the bus.\n          example: 31\n        maxsymbolrate:\n          minimum: 0\n          type: integer\n          description: the maximum symbol rate on the bus seen since start.\n          example: 167\n        minarbitrationmicros:\n          minimum: 0\n          type: integer\n          description: the minimum arbitration delay in microseconds.\n          example: 4231\n        maxarbitrationmicros:\n          minimum: 0\n          type: integer\n          description: the maximum arbitration delay in microseconds.\n          example: 4892\n        minsymbollatency:\n          minimum: 0\n          type: integer\n          description: the minimum symbol latency in milliseconds.\n          example: 4\n        maxsymbollatency:\n          minimum: 0\n          type: integer\n          description: the maximum symbol latency in milliseconds.\n          example: 9\n        qq:\n          $ref: '#/components/schemas/Symbol'\n          description: the ebusd master address (only if not readonly).\n          example: 49\n        reconnects:\n          minimum: 0\n          type: integer\n          description: the number of reconnects to the device since start.\n          example: 0\n        masters:\n          minimum: 0\n          type: integer\n          description: the number of masters recognized on the bus.\n          example: 5\n        messages:\n          minimum: 0\n          type: integer\n          description: the number of known message definitions.\n          example: 893\n        lastup:\n          $ref: '#/components/schemas/Seconds'\n          description: the time in UTC seconds of the last update of any message.\n    Circuit:\n      type: object\n      properties:\n        name:\n          type: string\n          description: the circuit name.\n        zz:\n          maximum: 255\n          minimum: 0\n          type: integer\n          description: the circuit slave address.\n          example: 8\n        messages:\n          type: object\n          description: the messages with the unique key per circuit.\n          additionalProperties:\n            $ref: '#/components/schemas/Message'\n    Message:\n      required:\n        - name\n        - passive\n        - write\n        - lastup\n      type: object\n      properties:\n        name:\n          type: string\n          description: the message name.\n        passive:\n          type: boolean\n          description: true when this is a passive message.\n        write:\n          type: boolean\n          description: true for a write message, false for a read message.\n        level:\n          type: string\n          description: the access level for the message (only with full).\n        pollprio:\n          description: the poll priority of the message (only with full).\n          type: integer\n          minimum: 0\n        condition:\n          type: string\n          description: the condition string in case of a conditional message (only with full).\n        lastup:\n          $ref: '#/components/schemas/Seconds'\n          description: the time in UTC seconds of the last update of the message (0\n            for never).\n        qq:\n          $ref: '#/components/schemas/Symbol'\n          description: limited source master address (only with def or data).\n          example: 49\n        zz:\n          $ref: '#/components/schemas/Symbol'\n          description: destination master or slave address.\n          example: 8\n        id:\n          $ref: '#/components/schemas/Symbols'\n          description: the message ID composed of PBSB and further master data bytes (only with def).\n        comment:\n          type: string\n          description: the message comment (only with verbose).\n        master:\n          $ref: '#/components/schemas/Symbols'\n          description: the last seen master data bytes (only with raw and if available).\n        slave:\n          $ref: '#/components/schemas/Symbols'\n          description: the last seen slave data bytes (only with raw and if available).\n        fields:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Field'\n          description: the decoded fields the message is composed of (only if available).\n        decodeerror:\n          type: string\n          description: set to the error message instead of fields in case of a decoding error.\n        fielddefs:\n          type: array\n          description: the field definitions the message is composed of (only with\n            def).\n          items:\n            $ref: '#/components/schemas/FieldDef'\n    Symbol:\n      description: a single master or slave data byte.\n      type: integer\n      minimum: 0\n      maximum: 255\n    Symbols:\n      description: a sequence of master or slave data bytes.\n      type: array\n      minItems: 1\n      maximum: 32\n      items:\n        $ref: '#/components/schemas/Symbol'\n    Field:\n      type: object\n      properties:\n        name:\n          type: string\n          description: the field name.\n        value:\n          $ref: '#/components/schemas/FieldValue'\n          description: the field value.\n        unit:\n          type: string\n          description: the field unit (only with verbose).\n        comment:\n          type: string\n          description: the field comment (only with verbose).\n    FieldValue:\n      description: the field value.\n      oneOf:\n        - type: string\n        - type: number\n      nullable: true\n    FieldDef:\n      required:\n        - name\n        - slave\n        - type\n        - isbits\n        - length\n      type: object\n      properties:\n        name:\n          type: string\n          description: the field name.\n        slave:\n          type: boolean\n          description: whether the field is part of the slave data.\n        type:\n          type: string\n          description: the field type.\n        isbits:\n          type: boolean\n          description: true when the length is in bits.\n        length:\n          type: number\n          description: the field length in bytes (-1 for remainder, number of bits\n            when isbits is true).\n        divisor:\n          type: number\n          description: the divisor for numeric types (only if applicable, positive\n            for divisor, negative for reciprocal i.e. 1/-divisor).\n        value:\n          type: string\n          description: the constant value (only if applicable).\n        verify:\n          type: boolean\n          description: whether the constant value is verified when decoding (only\n            if applicable).\n        values:\n          type: object\n          additionalProperties:\n            type: string\n            description: the value name.\n          description: the raw numeric value to name assignments (only if applicable).\n        unit:\n          type: string\n          description: the field unit.\n        comment:\n          type: string\n          description: the field comment.\n    DataType:\n      description: a known field data type.\n      type: object\n      properties:\n        type:\n          type: string\n          description: the type name.\n          example: UCH\n        isbits:\n          type: boolean\n          description: true when the length is in bits.\n        isadjustable:\n          type: boolean\n          description: whether the length is adjustable.\n        isignored:\n          type: boolean\n          description: whether the result is ignored.\n        isreverse:\n          type: boolean\n          description: whether the symbols are in reverse order (most significant byte first).\n        length:\n          type: number\n          minimum: -1\n          maximum: 31\n          description: the field length in bytes (-1 for remainder, number\n            of bits when isbits is true).\n        result:\n          enum:\n            - void\n            - string\n            - number\n            - date\n            - time\n            - datetime\n          description: the result type.\n        divisor:\n          type: number\n          description: the divisor for numeric types (only if applicable, positive\n            for divisor, negative for reciprocal i.e. 1/-divisor).\n        precision:\n          type: number\n          description: the precision (number of fraction digits) when divisor is \u003e1.\n      required:\n        - type\n        - isbits\n        - length\n    DataTypes:\n      type: array\n      description: the known field data types.\n      items:\n        $ref: '#/components/schemas/DataType'\n    Data:\n      required:\n        - global\n      type: object\n      properties:\n        global:\n          $ref: '#/components/schemas/Global'\n      additionalProperties:\n        $ref: '#/components/schemas/Circuit'\n    RawMessage:\n      type: object\n      description: raw message seen on the bus.\n      properties:\n        master:\n          $ref: '#/components/schemas/Symbols'\n          description: the last seen master data bytes (only with raw and if available).\n        slave:\n          $ref: '#/components/schemas/Symbols'\n          description: the last seen slave data bytes (only with raw and if available).\n        lastup:\n          $ref: '#/components/schemas/Seconds'\n          description: the time in UTC seconds of the last update of the message (0\n            for never).\n        count:\n          type: number\n          description: number of times the master part was seen.\n        circuit:\n          type: string\n          description: name of the circuit in case of an already associated message definition.\n        name:\n          type: string\n          description: name of the message in case of an already associated message definition.\n      required:\n        - master\n        - count\n    RawMessages:\n      type: array\n      description: raw messages seen on the bus.\n      items:\n        $ref: '#/components/schemas/RawMessage'\n  responses:\n    BadRequest:\n      description: Invalid request parameters.\n      content: { }\n    GeneralError:\n      description: General error.\n      content: { }\n    NotAuthorized:\n      description: User not authorized.\n      content: { }\n    NotFound:\n      description: Circuit or message not found.\n      content: { }\n  parameters:\n    circuitParam:\n      name: circuit\n      in: path\n      required: true\n      schema:\n        type: string\n    messageParam:\n      name: message\n      in: path\n      required: true\n      schema:\n        type: string\n    sinceQuery:\n      name: since\n      in: query\n      description: limit to messages that have changed since the specified UTC seconds.\n      allowEmptyValue: false\n      schema:\n        $ref: '#/components/schemas/Seconds'\n    pollQuery:\n      name: poll\n      in: query\n      description: set the poll priority of matching message(s) to prio.\n      allowEmptyValue: false\n      schema:\n        minimum: 0\n        type: integer\n    exactQuery:\n      name: exact\n      in: query\n      description: exact search for circuit/message name.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    verboseQuery:\n      name: verbose\n      in: query\n      description: include comments and field units.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    indexedQuery:\n      name: indexed\n      in: query\n      description: always return field indexes instead of names.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    numericQuery:\n      name: numeric\n      in: query\n      description: return numeric values of value list entries.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    valuenameQuery:\n      name: valuename\n      in: query\n      description: include value and name for named values.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    fullQuery:\n      name: full\n      in: query\n      description: include all available attributes.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    requiredQuery:\n      name: required\n      in: query\n      description: retrieve the data from the bus if not yet cached.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    writeQuery:\n      name: write\n      in: query\n      description: retrieve write messages in addition to read/poll messages.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    rawQuery:\n      name: raw\n      in: query\n      description: include raw master/slave data.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    defQuery:\n      name: def\n      in: query\n      description: include message and field definition.\n      allowEmptyValue: true\n      schema:\n        type: boolean\n    defineQuery:\n      name: define\n      in: query\n      description: update/replace a message definition.\n      allowEmptyValue: false\n      schema:\n        type: string\n        description: message definition in CSV format.\n    userQuery:\n      name: user\n      in: query\n      description: authenticate with user name.\n      allowEmptyValue: false\n      schema:\n        type: string\n    secretQuery:\n      name: secret\n      in: query\n      description: authenticate with user secret.\n      allowEmptyValue: false\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/john30/ebusd@fce1088cc34d06662b249027000ed7225bef2ccb/-/blob/contrib/html/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/john30/ebusd/blob/fce1088cc34d06662b249027000ed7225bef2ccb/contrib/html/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}