{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/samcart/openapi.yml",
			"byteSize": 60898,
			"content": "openapi: 3.0.0\ninfo:\n  x-ballerina-display:\n    label: SamCart\n    iconPath: \"icon.png\"\n  title: 'SamCart Public API'\n  description: |\n    This is a generated connector for [SamCart API v1.0.0](https://developer.samcart.com/) OpenAPI specification.\n    SamCart's Public API is used for accessing the data inside your SamCart marketplace.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [SamCart account](https://www.samcart.com/) and obtain tokens following [this guide](https://developer.samcart.com/#section/Authentication).\n  termsOfService: 'https://www.samcart.com/terms-and-conditions'\n  contact:\n    name: 'API Support'\n    email: support@samcart.com\n  license:\n    name: 'Apache 2.0'\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 1.0.0\n  x-logo:\n    url: 'https://qn03e1pj8r21z48mq2u9ctcv-wpengine.netdna-ssl.com/wp-content/themes/samcart/assets/images/logo-samcart.svg'\n    altText: 'SamCart logo'\nservers:\n  -\n    url: 'https://api.samcart.com/v1'\n    description: 'Public API server'\npaths:\n  /charges:\n    get:\n      tags:\n        - Charges\n      description: 'Retrieve all charges'\n      operationId: getCharges\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more charges'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/ChargeService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/charges/{id}':\n    get:\n      tags:\n        - Charges\n      description: 'Retrieve a charge'\n      operationId: getByChargeId\n      parameters:\n        -\n          $ref: '#/components/parameters/charge_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChargeService'\n        '404':\n          description: 'Charge could not found'\n      security:\n        -\n          apiKeyAuth: []\n  '/charges/{id}/refunds':\n    get:\n      tags:\n        - Charges\n      description: 'Retrieve all refunds on a charge'\n      operationId: getMultipleRefundsByChargeId\n      parameters:\n        -\n          $ref: '#/components/parameters/charge_id'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more refunds'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RefundService'\n        '404':\n          description: 'Charge could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/charges/{id}/refunds/{refund_id}':\n    get:\n      tags:\n        - Charges\n      description: 'Retrieve a refund on a charge'\n      operationId: getRefundByChargeId\n      parameters:\n        -\n          $ref: '#/components/parameters/charge_id'\n        -\n          $ref: '#/components/parameters/refund_id'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefundService'\n        '404':\n          description: 'Charge or refund could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  /customers:\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve all customers'\n      operationId: getCustomers\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more customers'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/CustomerService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/customers/{id}':\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve a customer'\n      operationId: getByCustomerId\n      parameters:\n        -\n          $ref: '#/components/parameters/customer_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerService'\n        '404':\n          description: 'Customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/customers/{id}/addresses':\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve all addresses for a customer'\n      operationId: getAddressesByCustomerId\n      parameters:\n        -\n          $ref: '#/components/parameters/customer_id'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more addresses'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AddressService'\n        '404':\n          description: 'Customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/customers/{id}/charges':\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve all charges for a customer'\n      operationId: getChargesByCustomerId\n      parameters:\n        -\n          $ref: '#/components/parameters/customer_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more charges'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChargeService'\n        '404':\n          description: 'Customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/customers/{id}/orders':\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve all orders for a customer'\n      operationId: getOrdersByCustomerId\n      parameters:\n        -\n          $ref: '#/components/parameters/customer_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more orders'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrderService'\n        '404':\n          description: 'Customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/customers/{id}/subscriptions':\n    get:\n      tags:\n        - Customers\n      description: 'Retrieve all subscriptions for a customer'\n      operationId: getSubscriptionsByCustomerId\n      parameters:\n        -\n          $ref: '#/components/parameters/customer_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/rebilling_at_min'\n        -\n          $ref: '#/components/parameters/rebilling_at_max'\n        -\n          $ref: '#/components/parameters/canceled_at_min'\n        -\n          $ref: '#/components/parameters/canceled_at_max'\n        -\n          $ref: '#/components/parameters/subscription_status'\n        -\n          $ref: '#/components/parameters/subscription_type'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more subscriptions'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubscriptionService'\n        '404':\n          description: 'Customer could not found'\n      security:\n        -\n          apiKeyAuth: []\n  /failed-charges:\n    get:\n      tags:\n        - 'Failed Charges'\n      description: 'Retrieve all failed charges'\n      operationId: getFailedCharges\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more failed charges'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/FailedChargeService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/failed-charges/{id}':\n    get:\n      tags:\n        - 'Failed Charges'\n      description: 'Retrieve a failed charge'\n      operationId: getByFailedChargeId\n      parameters:\n        -\n          $ref: '#/components/parameters/charge_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FailedChargeService'\n        '404':\n          description: 'Failed charge could not found'\n      security:\n        -\n          apiKeyAuth: []\n  /orders:\n    get:\n      tags:\n        - Orders\n      description: 'Retrieve all orders'\n      operationId: getOrders\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more orders'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/OrderService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/orders/{id}':\n    get:\n      tags:\n        - Orders\n      description: 'Retrieve an order'\n      operationId: getByOrderId\n      parameters:\n        -\n          $ref: '#/components/parameters/order_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderService'\n        '404':\n          description: 'Order could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/orders/{id}/charges':\n    get:\n      tags:\n        - Orders\n      description: 'Retrieve all charges on an order'\n      operationId: getChargesByOrderId\n      parameters:\n        -\n          $ref: '#/components/parameters/order_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more charges'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChargeService'\n      security:\n        -\n          apiKeyAuth: []\n  '/orders/{id}/customer':\n    get:\n      tags:\n        - Orders\n      description: 'Retrieve customer on an order'\n      operationId: getCustomerByOrderId\n      parameters:\n        -\n          $ref: '#/components/parameters/order_id'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerService'\n        '404':\n          description: 'Order or customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/orders/{id}/subscriptions':\n    get:\n      tags:\n        - Orders\n      description: 'Retrieve all subscriptions on an order'\n      operationId: getSubscriptionsByOrderId\n      parameters:\n        -\n          $ref: '#/components/parameters/order_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/rebilling_at_min'\n        -\n          $ref: '#/components/parameters/rebilling_at_max'\n        -\n          $ref: '#/components/parameters/canceled_at_min'\n        -\n          $ref: '#/components/parameters/canceled_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/subscription_status'\n        -\n          $ref: '#/components/parameters/subscription_type'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more subscriptions'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubscriptionService'\n      security:\n        -\n          apiKeyAuth: []\n  /products:\n    get:\n      tags:\n        - Products\n      description: 'Retrieve all products'\n      operationId: getProducts\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/product_status'\n        -\n          $ref: '#/components/parameters/product_category'\n        -\n          $ref: '#/components/parameters/pricing_type'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more products'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/ProductService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/products/{id}':\n    get:\n      tags:\n        - Products\n      description: 'Retrieve a product'\n      operationId: getByProductId\n      parameters:\n        -\n          $ref: '#/components/parameters/product_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/product_status'\n        -\n          $ref: '#/components/parameters/product_category'\n        -\n          $ref: '#/components/parameters/pricing_type'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductService'\n        '404':\n          description: 'Product could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  /subscriptions:\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve all subscriptions'\n      operationId: getSubscriptions\n      parameters:\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/rebilling_at_min'\n        -\n          $ref: '#/components/parameters/rebilling_at_max'\n        -\n          $ref: '#/components/parameters/canceled_at_min'\n        -\n          $ref: '#/components/parameters/canceled_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/subscription_status'\n        -\n          $ref: '#/components/parameters/subscription_type'\n        -\n          $ref: '#/components/parameters/pagination_offset'\n        -\n          $ref: '#/components/parameters/pagination_limit'\n        -\n          $ref: '#/components/parameters/pagination_direction'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more subscriptions'\n          content:\n            application/json:\n              schema:\n                properties:\n                  data: { type: array, items: { $ref: '#/components/schemas/SubscriptionService' } }\n                  pagination: { $ref: '#/components/schemas/Pagination' }\n                type: object\n      security:\n        -\n          apiKeyAuth: []\n  '/subscriptions/{id}':\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve a subscription'\n      operationId: getSubscriptionById\n      parameters:\n        -\n          $ref: '#/components/parameters/subscription_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/rebilling_at_min'\n        -\n          $ref: '#/components/parameters/rebilling_at_max'\n        -\n          $ref: '#/components/parameters/canceled_at_min'\n        -\n          $ref: '#/components/parameters/canceled_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n        -\n          $ref: '#/components/parameters/subscription_status'\n        -\n          $ref: '#/components/parameters/subscription_type'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriptionService'\n        '404':\n          description: 'Subscription could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/subscriptions/{id}/charges':\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve charges on a subscription'\n      operationId: getChargesBySubscriptionID\n      parameters:\n        -\n          $ref: '#/components/parameters/subscription_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n        -\n          $ref: '#/components/parameters/test_mode'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more charges'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChargeService'\n        '404':\n          description: 'Subscription could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/subscriptions/{id}/customer':\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve a customer on a subscription'\n      operationId: getCustomerBySubscriptionID\n      parameters:\n        -\n          $ref: '#/components/parameters/subscription_id'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerService'\n        '404':\n          description: 'Subscription or customer could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/subscriptions/{id}/history':\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve a subscription''s history'\n      operationId: getHistoriesBySubscriptionID\n      parameters:\n        -\n          $ref: '#/components/parameters/subscription_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n      responses:\n        '200':\n          description: 'Successful operation. Response will return an array of 0 or more history entries'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubscriptionHistoryService'\n        '404':\n          description: 'Subscription could not be found'\n      security:\n        -\n          apiKeyAuth: []\n  '/subscriptions/{id}/plan':\n    get:\n      tags:\n        - Subscriptions\n      description: 'Retrieve a plan for a subscription'\n      operationId: getPlanBySubscriptionID\n      parameters:\n        -\n          $ref: '#/components/parameters/subscription_id'\n        -\n          $ref: '#/components/parameters/created_at_min'\n        -\n          $ref: '#/components/parameters/created_at_max'\n      responses:\n        '200':\n          description: 'Successful operation'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriptionPlanService'\n        '404':\n          description: 'Subscription could not be found'\n      security:\n        -\n          apiKeyAuth: []\ncomponents:\n  schemas:\n    Pagination:\n      description: 'Optional information for paginating large data sets.'\n      properties:\n        next:\n          description: 'A URL to the next page of data to be retrieve. If current page is the last page this value will be null.'\n          type: string\n          format: uri\n          example: 'https://example.samcart.com/v1/example?offset=1337\u0026dir=next'\n          nullable: true\n        prev:\n          description: 'A URL to the previous page of data to be retrieve. If current page is the first page this value will be null.'\n          type: string\n          format: uri\n          example: null\n          nullable: true\n      type: object\n    AddressService:\n      title: Address\n      description: Address\n      properties:\n        type:\n          description: 'The type of address for the customer'\n          enum:\n            - shipping\n            - billing\n          example: shipping\n        street:\n          description: 'The street for the customer'\n          type: string\n          example: '221B Baker Street'\n        postal_code:\n          description: 'The postal code for the customer'\n          type: string\n          example: 1234\n        city:\n          description: 'The city name for the customer'\n          type: string\n          example: Austin\n        state:\n          description: 'The 2-letter state code for US customers. For non-US addresses this value will be null.'\n          type: string\n          example: TX\n          nullable: true\n        region:\n          description: 'The optional sub-divided area of a country for international customers. For US addresses this value will be null.'\n          type: string\n          example: Quebec\n          nullable: true\n        country:\n          description: 'The country for the customer'\n          type: string\n          example: 'United States'\n      type: object\n    ChargeService:\n      title: Charge\n      description: Charge\n      properties:\n        id:\n          description: 'The SamCart ID for the charge'\n          type: integer\n          example: 1337\n        customer_id:\n          description: 'The SamCart ID for the customer that created the charge'\n          type: integer\n          example: 1234\n        affiliate_id:\n          description: 'The SamCart ID of the affiliate credited for the order'\n          type: integer\n          example: 1001\n          nullable: true\n        order_id:\n          description: 'The SamCart ID for the order. For subscriptions, this will be the order ID of the original purchase'\n          type: integer\n          example: 1001\n        subscription_rebill_id:\n          description: 'The SamCart ID for the subscription rebill. If the charge is for a non-subscription product, this will be null.'\n          type: integer\n          example: 1001\n          nullable: true\n        test_mode:\n          description: 'Indicates whether the transaction was done while the product was in test mode'\n          type: boolean\n          example: true\n        processor_name:\n          description: 'The name of the processor for the order'\n          enum:\n            - Stripe\n            - Braintree\n            - Authorize.net\n            - PayPal\n          example: Stripe\n        processor_transaction_id:\n          description: 'The processor ID generated for the charge'\n          type: string\n          example: 01234ABCD\n        currency:\n          description: 'The 3 letter identifier for the currency for the charge'\n          type: string\n          example: USD\n        card_used:\n          description: 'The last 4 digits of the card that was used. PayPal charges will have a null value.'\n          type: number\n          example: '4242'\n          nullable: true\n        charge_refund_status:\n          description: 'Indicates whether a refund and the type of refund. If no refund was created the value will be null.'\n          enum:\n            - refunded\n            - partially_refunded\n          example: partially_refunded\n          nullable: true\n        order_date:\n          description: 'The UTC date and time for when the order was created'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        created_at:\n          description: 'The UTC date and time that the charge was created'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        total:\n          description: 'The total (in cents) for the charge including taxes and shipping fees'\n          type: integer\n          example: 10025\n      type: object\n    CustomerService:\n      title: Customer\n      description: Customer\n      properties:\n        id:\n          description: 'The SamCart ID of the customer'\n          type: integer\n          example: 1337\n        first_name:\n          description: 'The first name of the customer'\n          type: string\n          example: John\n          nullable: true\n        last_name:\n          description: 'The last name of the customer'\n          type: string\n          example: Doe\n          nullable: true\n        email:\n          description: 'The email address of the customer'\n          type: string\n          format: email\n          example: jdoe@gmail.com\n        phone:\n          description: 'The phone number of the customer'\n          type: string\n          example: '5555555555'\n          nullable: true\n        customer_tags:\n          description: 'The tags applied to the customer'\n          type: array\n          items:\n            properties:\n              name:\n                description: 'The name of the customer tag'\n                type: string\n                example: new\n            type: object\n        lifetime_value:\n          description: 'The lifetime value (in cents) of the customer. Value is for live data only'\n          type: integer\n          example: 95025\n        updated_at:\n          description: 'The UTC date and time when the customer information was updated'\n          type: string\n          format: date-time\n          example: '2020-03-04 00:18:35'\n        created_at:\n          description: 'The UTC date and time when the customer was created'\n          type: string\n          format: date-time\n          example: '2020-03-04 00:18:35'\n        addresses:\n          description: 'Addresses associated with the customer'\n          type: array\n          items:\n            $ref: '#/components/schemas/AddressService'\n      type: object\n    FailedChargeService:\n      title: 'Failed Charge'\n      description: 'Failed Charge'\n      properties:\n        id:\n          description: 'The SamCart ID for the charge'\n          type: integer\n          example: 1337\n        customer_id:\n          description: 'The SamCart ID for the customer that created the charge'\n          type: integer\n          example: 1234\n          nullable: true\n        affiliate_id:\n          description: 'The SamCart ID of the affiliate credited for the order'\n          type: integer\n          example: 1001\n          nullable: true\n        order_id:\n          description: 'The SamCart ID for the order. For subscriptions, this will be the order ID of the original purchase'\n          type: integer\n          example: 1001\n          nullable: true\n        subscription_rebill_id:\n          description: 'The SamCart ID for the subscription rebill. If the charge is for a non-subscription product, this will be null.'\n          type: integer\n          example: 1001\n          nullable: true\n        test_mode:\n          description: 'Indicates whether the transaction was done while the product was in test mode'\n          type: boolean\n          example: true\n        processor_name:\n          description: 'The name of the processor for the order'\n          enum:\n            - Stripe\n            - Braintree\n            - Authorize.net\n            - PayPal\n          example: Stripe\n        processor_transaction_id:\n          description: 'The processor ID generated for the charge'\n          type: string\n          example: 01234ABCD\n        error:\n          description: 'The error message provided by the payment processor'\n          type: string\n          example: 'Your card was declined'\n          nullable: true\n        currency:\n          description: 'The 3 letter identifier for the currency for the charge'\n          type: string\n          example: USD\n        card_used:\n          description: 'The last 4 digits of the card that was used. PayPal charges will have a null value.'\n          type: number\n          example: '4242'\n          nullable: true\n        created_at:\n          description: 'The UTC date and time that the charge was created'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        total:\n          description: 'The total (in cents) for the charge including taxes and shipping fees'\n          type: integer\n          example: 10025\n      type: object\n    OrderService:\n      title: Order\n      description: Order\n      properties:\n        id:\n          description: 'The SamCart ID of the order'\n          type: integer\n          example: 1337\n        customer_id:\n          description: 'The SamCart ID of the customer'\n          type: integer\n          example: 1234\n        affiliate_id:\n          description: 'The SamCart ID of the affiliate credited for the order'\n          type: integer\n          example: 1001\n          nullable: true\n        test_mode:\n          description: 'Indicates whether the transaction was done while the product was in test mode'\n          type: boolean\n          example: true\n        order_date:\n          description: 'The UTC date and time for when the order was created'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        cart_items:\n          description: 'A list of cart items on the order'\n          type: array\n          items:\n            properties:\n              id:\n                description: 'The ID for the specific cart item'\n                type: integer\n                example: 1234\n              product_id:\n                description: 'The SamCart ID for the product'\n                type: integer\n                example: 1234\n              subscription_id:\n                description: 'The subscription ID for the product. If the cart item is for a non-subscription product the value will be null'\n                type: integer\n                example: 1234\n                nullable: true\n              sku:\n                description: 'The optional product SKU of the cart item purchased'\n                type: string\n                example: sku1234\n                nullable: true\n              internal_product_name:\n                description: 'An optional product name displayed on the marketplace dashboard'\n                type: string\n                example: internal-book-product\n                nullable: true\n              product_name:\n                description: 'The product name displayed to customers'\n                type: string\n                example: Book\n              charge_id:\n                description: 'The SamCart ID for the charge'\n                type: integer\n                example: 1234\n              pricing_type:\n                description: 'Indicates how the product is priced'\n                enum:\n                  - one_time\n                  - recurring_subscription\n                  - limited_subscription\n                  - pwyw_onetime\n                  - pwyw_recurring_subscription\n                  - pwyw_limited_subscription\n                example: one_time\n              processor_transaction_id:\n                description: 'The processor ID generated for the charge'\n                type: string\n                example: 01234ABCD\n              currency:\n                description: 'The 3 letter identifier for the currency for the charge on the cart item'\n                type: string\n                example: USD\n              quantity:\n                description: 'The quantity of the cart item purchased'\n                type: integer\n                example: 2\n              status:\n                description: 'The current status of the charge on the cart item'\n                enum:\n                  - pending\n                  - charged\n                  - declined\n                  - refunded\n                  - fulfilled\n                  - reversed\n                  - partially_refunded\n                example: charged\n              initial_price:\n                description: 'The pricing structure for one-time purchases and for the first charge on subscription products'\n                properties:\n                  subtotal: { description: 'The price for the cart item (in cents) excluding discount, taxes and shipping fees', type: integer, example: 10000 }\n                  taxes: { description: 'The tax fees (in cents) for the cart item', type: integer, example: 500 }\n                  shipping: { description: 'The shipping fees (in cents) for the cart item', type: integer, example: 300 }\n                  total: { description: 'The price for the cart item (in cents) including discount, taxes and shipping fees', type: integer, example: 9800 }\n                type: object\n              recurring_price:\n                description: 'The pricing structure for limited and recurring subscription products. This structure could differ from the initial price.'\n                properties:\n                  subtotal: { description: 'The recurring price for the cart item (in cents) excluding discount, taxes and shipping fees', type: integer, example: 10000 }\n                  taxes: { description: 'The recurring tax fees (in cents) for the cart item', type: integer, example: 500 }\n                  shipping: { description: 'The recurring shipping fees (in cents) for the cart item', type: integer, example: 300 }\n                  total: { description: 'The recurring price for the cart item (in cents) including discount, taxes and shipping fees', type: integer, example: 10800 }\n                type: object\n              coupon:\n                description: 'An optional coupon that was applied to the cart item'\n                properties:\n                  id: { description: 'The ID of the coupon that was used on the cart item', type: integer, example: '1234' }\n                  charge_instance: { description: 'Whether the coupon applies only once or for recurring charges also', enum: [one_time, recurring], example: one_time }\n                  code: { description: 'The code of the coupon used', type: string, example: summersale }\n                  type: { description: 'The type of discount applied', enum: [flat_rate, percentage], example: flat_rate }\n                  discount_amount: { description: 'The flat_rate discount amount (in cents) on the cart item', type: integer, example: null, nullable: true }\n                  discount_percentage: { description: 'The percentage discount on the cart item', type: integer, example: 10, nullable: true }\n                type: object\n            type: object\n        subtotal:\n          description: 'The total price of the order (in cents) excluding discount, shipping and tax fees'\n          type: integer\n          example: 10000\n        discount:\n          description: 'The total discount (in cents) on the order'\n          type: integer\n          example: 1000\n        taxes:\n          description: 'The total of tax fees (in cents) of the order'\n          type: integer\n          example: 500\n        shipping:\n          description: 'The total of shipping fees (in cents) of the order'\n          type: integer\n          example: 300\n        total:\n          description: 'The total price of the order (in cents) including discount, shipping and tax fees'\n          type: integer\n          example: 9800\n        card_used:\n          description: 'The last 4 digits of the card that was used. PayPal charges will have a null value.'\n          type: string\n          example: '0123'\n          nullable: true\n        processor_name:\n          description: 'The name of the processor for the order'\n          enum:\n            - Stripe\n            - Braintree\n            - Authorize.net\n            - PayPal\n          example: Stripe\n        custom_fields:\n          description: 'Optional custom fields applied to the order'\n          type: object\n      type: object\n    ProductService:\n      title: Product\n      description: Product\n      properties:\n        id:\n          description: 'The SamCart ID of the product'\n          type: integer\n          example: 1337\n        sku:\n          description: 'An optional product SKU displayed on the marketplace dashboard'\n          type: string\n          example: sku123\n          nullable: true\n        internal_product_name:\n          description: 'An optional product name displayed on the marketplace dashboard'\n          type: string\n          example: internal-book-product\n          nullable: true\n        product_name:\n          description: 'The product name displayed to customers'\n          type: string\n          example: Book\n        description:\n          description: 'The optional description of the product'\n          type: string\n          example: 'This is a good book'\n          nullable: true\n        currency:\n          description: 'The 3 letter identifier for the currency currently configured on the product. This can be changed.'\n          type: string\n          example: USD\n        price:\n          description: 'The price of the product. For subscription products, it is the initial price (in cents)'\n          type: number\n          format: float\n          example: 1025\n        product_category:\n          description: 'Indicates the type of product being sold'\n          enum:\n            - physical\n            - digital\n          example: physical\n        pricing_type:\n          description: 'Indicates how the product will be priced'\n          enum:\n            - one_time\n            - limited\n            - recurring\n            - pwyw\n          example: one_time\n        status:\n          description: 'Indicates the current status of the product'\n          enum:\n            - live\n            - test\n            - archived\n          example: live\n        taxes:\n          description: 'Indicates if the product is currently configured to have taxes. This can be changed.'\n          type: boolean\n          example: true\n        upsell_funnel:\n          description: 'The name of the upsell funnel attached to the product'\n          type: string\n          example: 'Additional Offer'\n          nullable: true\n        order_bumps:\n          description: 'An optional list of additional products added with the product before checkout'\n          type: array\n          items:\n            properties:\n              product_id:\n                description: 'The SamCart ID for the additional product'\n                type: integer\n                example: 1234\n              product_name:\n                description: 'The name of the additional product'\n                type: string\n                example: Binder\n            type: object\n        bundled_products:\n          description: 'An optional list of products bundled to the product'\n          type: array\n          items:\n            properties:\n              product_id:\n                description: 'The SamCart ID of the bundled product'\n                type: integer\n                example: 3423\n              product_name:\n                description: 'The bundled product name displayed to customers'\n                type: string\n                example: Magazine\n            type: object\n        slug:\n          description: 'The URL slug for the product'\n          type: string\n          example: book\n        custom_domain:\n          description: 'An optional custom domain used for the product'\n          type: string\n          format: uri\n          example: 'https://google.com'\n          nullable: true\n        product_tags:\n          description: 'An optional list of product tags'\n          type: array\n          items:\n            properties:\n              name:\n                description: 'The name of the product tag'\n                type: string\n                example: digital\n            type: object\n        created_at:\n          description: 'The UTC date and time the product was created'\n          type: string\n          format: date-time\n          example: '2021-01-14 18:03:59'\n        updated_at:\n          description: 'The UTC date and time the product was updated'\n          type: string\n          format: date-time\n          example: '2021-01-14 18:03:59'\n        archived_date:\n          description: 'The UTC date and time the product was archived. If the product has not been archive the value will be null.'\n          type: string\n          format: date-time\n          example: '2021-01-14 18:03:59'\n          nullable: true\n      type: object\n    RefundService:\n      title: Refund\n      description: Refund\n      properties:\n        id:\n          description: 'The SamCart ID for the refund'\n          type: integer\n          example: 1337\n        charge_id:\n          description: 'The SamCart ID for the charge'\n          type: integer\n          example: 1337\n        cart_item_id:\n          description: 'The ID for the refunded cart item'\n          type: integer\n          example: 1234\n        created_at:\n          description: 'The UTC date and time the refund was issued'\n          type: string\n          format: date-time\n          example: '2020-03-04 00:18:35'\n        test_mode:\n          description: 'Indicates whether the transaction was done while the transaction was in test mode.'\n          type: boolean\n          example: true\n        charge_refund_status:\n          description: 'Indicates whether a refund and the type of refund. If no refund was created the value will be null.'\n          enum:\n            - refunded\n            - partially_refunded\n          example: partially_refunded\n          nullable: true\n        currency:\n          description: 'This will match the currency that the original charge was created in and will be the currency of the created refund'\n          type: string\n          example: USD\n        refund_amount:\n          description: 'The total refund amount (in cents)'\n          type: integer\n          example: 1525\n      type: object\n    SubscriptionHistoryService:\n      title: 'Subscription History'\n      description: 'Subscription History'\n      properties:\n        id:\n          description: 'The SamCart ID for the subscription history record'\n          type: integer\n          example: 1337\n        subscription_id:\n          description: 'The SamCart ID for the subscription'\n          type: integer\n          example: 1001\n        new_status:\n          description: 'The status of the subscription'\n          enum:\n            - active\n            - canceled\n            - delinquent\n            - completed\n            - paused\n            - invalid_processor\n            - sca_required\n            - deleted\n          example: active\n        source:\n          description: 'The source of the change'\n          type: string\n          example: dashboard\n        type:\n          description: 'The type of change'\n          type: string\n          example: status\n        change_date:\n          description: 'The UTC date and time that the change was made'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n      type: object\n    SubscriptionPlanService:\n      title: 'Subscription Plan'\n      description: 'Subscription Plan'\n      properties:\n        id:\n          description: 'The SamCart ID for the subscription plan'\n          type: integer\n          example: 1337\n        product_id:\n          description: 'The SamCart ID for the product'\n          type: integer\n          example: 1234\n        plan_status:\n          description: 'The current status of the subscription plan'\n          enum:\n            - active\n            - archived\n          example: active\n        plan_archived_date:\n          description: 'The UTC date and time for when the subscription plan was archived'\n          type: string\n          format: date-time\n          example: '2021-03-02 01:23:34'\n          nullable: true\n        plan_duration:\n          description: 'For a limited subscription, this indicates the number of rebills'\n          type: integer\n          example: 2\n        plan_frequency:\n          description: 'Indicates how frequently the subscription will rebill'\n          enum:\n            - days\n            - weekly\n            - monthly\n            - quarterly\n            - yearly\n          example: days\n        plan_price:\n          description: 'The recurring price of subscription exclusing tax and shipping fees'\n          type: integer\n          example: 9825\n        trial_period:\n          description: 'The number of days that the subscription has for a trial'\n          type: integer\n          example: 2\n        rebill_days:\n          description: 'The number of days between each subscription rebill, used for ''days'' frequency only'\n          type: integer\n          example: 15\n        stripe_compatible:\n          description: 'Indicates whether the subscription will be Stripe-managed'\n          type: boolean\n          example: true\n        stripe_plan_id:\n          description: 'For Stripe-managed subscriptions, this is the plan ID from within Stripe'\n          type: string\n          example: samcart_plan_1_12345\n          nullable: true\n        on_stripe_sandbox:\n          description: 'Indicates whether the subscription is associated with a Stripe testing environment'\n          type: boolean\n          example: true\n        recurring_shipping:\n          description: 'Indicates whether the shipping prices for the subscription will be charged at every subscription rebill'\n          type: boolean\n          example: true\n      type: object\n    SubscriptionService:\n      title: Subscription\n      description: Subscription\n      properties:\n        id:\n          description: 'The SamCart ID for the subscription'\n          type: integer\n          example: 1337\n        customer_id:\n          description: 'The SamCart ID for the customer that created the charge'\n          type: integer\n          example: 1234\n        affiliate_id:\n          description: 'The SamCart ID of the affiliate credited for the order.'\n          type: integer\n          example: 1001\n          nullable: true\n        order_id:\n          description: 'The SamCart ID for the order. For subscriptions, this will be the order ID of the original purchase.'\n          type: integer\n          example: 1001\n        product_id:\n          description: 'The SamCart ID for a product in the cart'\n          type: integer\n          example: 1001\n        sku:\n          description: 'The optional product SKU for the subscription'\n          type: string\n          example: sku123\n          nullable: true\n        status:\n          description: 'The status of the subscription'\n          enum:\n            - active\n            - canceled\n            - delinquent\n            - completed\n            - paused\n            - invalid_processor\n            - sca_required\n            - deleted\n          example: active\n        type:\n          description: 'Indicates the format of the subscription'\n          enum:\n            - limited_subscription\n            - recurring_subscription\n          example: recurring_subscription\n        product_name:\n          description: 'The name of the product for the subscription'\n          type: string\n          example: 'Cool Product'\n        internal_product_name:\n          description: 'An optional product name displayed on the marketplace dashboard for the subscription'\n          type: string\n          example: 'Cool Product'\n          nullable: true\n        initial_price:\n          description: 'The pricing structure for the first charge of the subscription'\n          properties:\n            subtotal:\n              description: 'The initial price (in cents) excluding discount, taxes and shipping fees'\n              type: integer\n              example: 10000\n            taxes:\n              description: 'The initial tax fees (in cents)'\n              type: integer\n              example: 500\n            shipping:\n              description: 'The initial shipping fees (in cents)'\n              type: integer\n              example: 300\n            total:\n              description: 'The initial price (in cents) including discount, taxes and shipping fees'\n              type: integer\n              example: 9800\n          type: object\n        recurring_price:\n          description: 'The pricing structure for all the recurring charges of the subscription'\n          properties:\n            subtotal:\n              description: 'The recurring price (in cents) excluding discount, taxes and shipping fees'\n              type: integer\n              example: 10000\n            taxes:\n              description: 'The recurring tax fees (in cents)'\n              type: integer\n              example: 500\n            shipping:\n              description: 'The recurring shipping fees (in cents)'\n              type: integer\n              example: 300\n            total:\n              description: 'The recurring price (in cents) including discount, taxes and shipping fees'\n              type: integer\n              example: 10800\n          type: object\n        coupon:\n          description: 'An optional coupon that is applied to the subscription rebill'\n          properties:\n            id:\n              description: 'The ID of the coupon that was used on the subscription'\n              type: integer\n              example: '1234'\n            charge_instance:\n              description: 'Whether the coupon applies only once or for recurring charges also'\n              enum:\n                - one_time\n                - recurring\n              example: one_time\n            code:\n              description: 'The code of the coupon used'\n              type: string\n              example: summersale\n            type:\n              description: 'The type of discount applied'\n              enum:\n                - flat_rate\n                - percentage\n              example: flat_rate\n            discount_amount:\n              description: 'The flat_rate discount amount (in cents) on the subscription'\n              type: integer\n              example: null\n              nullable: true\n            discount_percentage:\n              description: 'The percentage discount on the subscription'\n              type: integer\n              example: 10\n              nullable: true\n          type: object\n        processor_name:\n          description: 'The name of the processor for the order'\n          enum:\n            - Stripe\n            - Braintree\n            - Authorize.net\n            - PayPal\n          example: Stripe\n        test_mode:\n          description: 'Indicates whether the transaction was done while the product was in test mode.'\n          type: boolean\n          example: true\n        card_used:\n          description: 'The last 4 digits of the card that was used. PayPal charges will have a null value.'\n          type: number\n          example: '4242'\n          nullable: true\n        created_at:\n          description: 'The UTC date and time the subscription was created. This is also when the original order was created.'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        start_date:\n          description: 'The UTC date and time the first rebill occurred. For subscriptions with trials, this will be the first rebill after the trial.'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n        end_date:\n          description: 'The UTC date and time that a limited subscription will end. Recurring subscriptions will not have a value.'\n          type: string\n          format: date-time\n          example: '2021-03-08 00:18:35'\n          nullable: true\n        next_rebilling_date:\n          description: 'The UTC date and time of the next rebill for the subscription'\n          type: string\n          format: date-time\n          example: '2021-04-08 00:18:35'\n        total_failed_charges:\n          description: 'The number of unsuccessful charges for this subscription'\n          type: integer\n          example: 1\n      type: object\n  parameters:\n    created_at_min:\n      name: created_at_min\n      in: query\n      description: 'Filter by UTC created at date at or after given date'\n      schema:\n        type: string\n        format: date\n    created_at_max:\n      name: created_at_max\n      in: query\n      description: 'Filter by UTC created at date at or before given date'\n      schema:\n        type: string\n        format: date\n    canceled_at_min:\n      name: canceled_at_min\n      in: query\n      description: 'Filter by UTC canceled date at or after given date'\n      schema:\n        type: string\n        format: date\n    canceled_at_max:\n      name: canceled_at_max\n      in: query\n      description: 'Filter by UTC canceled date at or before given date'\n      schema:\n        type: string\n        format: date\n    rebilling_at_min:\n      name: rebilling_at_min\n      in: query\n      description: 'Filter by UTC rebilling date at or after given date'\n      schema:\n        type: string\n        format: date\n    rebilling_at_max:\n      name: rebilling_at_max\n      in: query\n      description: 'Filter by UTC rebilling date at or before given date'\n      schema:\n        type: string\n        format: date\n    test_mode:\n      name: test_mode\n      in: query\n      description: 'Filter by test mode'\n      schema:\n        type: boolean\n    subscription_status:\n      name: status\n      in: query\n      description: 'Filter subscriptions by status'\n      schema:\n        type: string\n        enum:\n          - active\n          - canceled\n          - delinquent\n          - completed\n          - paused\n          - invalid_processor\n          - sca_required\n          - deleted\n    product_status:\n      name: status\n      in: query\n      description: 'Filter product by status'\n      schema:\n        type: string\n        enum:\n          - live\n          - test\n          - archived\n    subscription_type:\n      name: type\n      in: query\n      description: 'Filter subscriptions by type'\n      schema:\n        type: string\n        enum:\n          - limited_subscription\n          - recurring_subscription\n    product_category:\n      name: product_category\n      in: query\n      description: 'Filter product by category'\n      schema:\n        type: string\n        enum:\n          - physical\n          - digital\n    pricing_type:\n      name: pricing_type\n      in: query\n      description: 'Filter product by pricing type'\n      schema:\n        type: string\n        enum:\n          - one_time\n          - limited_subscription\n          - recurring_subscription\n          - pwyw_one_time\n          - pwyw_recurring_subscription\n          - pwyw_limited_subscription\n    charge_id:\n      name: id\n      in: path\n      description: 'The SamCart ID for the charge'\n      required: true\n      schema:\n        type: integer\n    refund_id:\n      name: refund_id\n      in: path\n      description: 'The SamCart ID for the refund'\n      required: true\n      schema:\n        type: integer\n    order_id:\n      name: id\n      in: path\n      description: 'The SamCart ID for the order'\n      required: true\n      schema:\n        type: integer\n    subscription_id:\n      name: id\n      in: path\n      description: 'The SamCart ID for the subscription'\n      required: true\n      schema:\n        type: integer\n    product_id:\n      name: id\n      in: path\n      description: 'The SamCart ID for the product'\n      required: true\n      schema:\n        type: integer\n    customer_id:\n      name: id\n      in: path\n      description: 'The SamCart ID for the customer'\n      required: true\n      schema:\n        type: integer\n    pagination_offset:\n      name: offset\n      in: query\n      description: 'The offset value used to paginate through a list of entries. If the dir query parameter is prev then the offset will be the id of the first record of the data set otherwise the offset will be the id of the last record'\n      schema:\n        type: integer\n      example: 100\n    pagination_limit:\n      name: limit\n      in: query\n      description: 'An optional limit for the number of entries on a page with a maximum value of 100. Default value is 100 if not provided.'\n      schema:\n        type: integer\n        maximum: 100\n      example: 100\n    pagination_direction:\n      name: dir\n      in: query\n      description: 'The direction to paginate the next set of data. If dir is prev the page will return a data set before the offset otherwise the data set will be after the offset. Default value is next if not provided.'\n      schema:\n        type: string\n        enum:\n          - next\n          - prev\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      name: sc-api\n      in: header\n      description: Represents API Key `sc-api`\n      ",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/samcart/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/samcart/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}