{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/admin-ch/CovidCertificate-Api-Cli"
		},
		"file": {
			"name": "api-doc.json",
			"size": 0,
			"path": "api-doc.json",
			"byteSize": 31842,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"Covid Certificate API Gateway Service\",\n    \"description\": \"Rest API for Covid Certificate API Gateway Service.\",\n    \"license\": {\n      \"name\": \"Apache 2.0\"\n    },\n    \"version\": \"0.0.1\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://ws.covidcertificate-a.bag.admin.ch\",\n      \"description\": \"Generated server url\"\n    }\n  ],\n  \"paths\": {\n    \"/api/v1/covidcertificate/vaccination\": {\n      \"post\": {\n        \"tags\": [\n          \"covid-certification-generation-controller\"\n        ],\n        \"summary\": \"Creates a vaccine certificate for the given data.\",\n        \"description\": \"Creates a vaccine certificate as an QR-Code and PDF. Performs an integrity check for each request based on headers and body.\",\n        \"operationId\": \"createVaccinationCertificate\",\n        \"parameters\": [\n          {\n            \"name\": \"X-Signature\",\n            \"in\": \"header\",\n            \"description\": \"Base64 encoded hash of the canonicalized body, generated with the `SHA256withRSA` algorithm signed with the private key of the certificate issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature) on Github.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"Base64\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/VaccinationCertificateCreateDto\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"413\": {\n            \"description\": \"Payload Too Large\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"PAYLOAD_TOO_LARGE\": {\n                    \"description\": \"PAYLOAD_TOO_LARGE\",\n                    \"value\": \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Request payload too large, the maximum payload size is: 2048 bytes}\"\n                  }\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Forbidden\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"INVALID_BEARER\": {\n                    \"description\": \"INVALID_BEARER\",\n                    \"value\": \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid or missing bearer token}\"\n                  },\n                  \"INVALID_SIGNATURE\": {\n                    \"description\": \"INVALID_SIGNATURE\",\n                    \"value\": \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed, the body hash does not match the hash in the header}\"\n                  },\n                  \"SIGNATURE_PARSE_ERROR\": {\n                    \"description\": \"SIGNATURE_PARSE_ERROR\",\n                    \"value\": \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not be parsed}\"\n                  }\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"CREATE_COSE_PROTECTED_HEADER_FAILED\": {\n                    \"description\": \"CREATE_COSE_PROTECTED_HEADER_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 550, \\\"errorMessage\\\": Creating COSE protected header failed.}\"\n                  },\n                  \"CREATE_COSE_PAYLOAD_FAILED\": {\n                    \"description\": \"CREATE_COSE_PAYLOAD_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 551, \\\"errorMessage\\\": Creating COSE payload failed.}\"\n                  },\n                  \"CREATE_COSE_SIGNATURE_DATA_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGNATURE_DATA_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 552, \\\"errorMessage\\\": Creating COSE signature data failed.}\"\n                  },\n                  \"CREATE_SIGNATURE_FAILED\": {\n                    \"description\": \"CREATE_SIGNATURE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 553, \\\"errorMessage\\\": Creating signature failed.}\"\n                  },\n                  \"CREATE_COSE_SIGN1_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGN1_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 554, \\\"errorMessage\\\": Creating COSE_Sign1 failed.}\"\n                  },\n                  \"CREATE_BARCODE_FAILED\": {\n                    \"description\": \"CREATE_BARCODE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 555, \\\"errorMessage\\\": Creating barcode failed.}\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"NO_VACCINATION_DATA\": {\n                    \"description\": \"NO_VACCINATION_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 451, \\\"errorMessage\\\": No vaccination data was specified}\"\n                  },\n                  \"NO_PERSON_DATA\": {\n                    \"description\": \"NO_PERSON_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was specified}\"\n                  },\n                  \"INVALID_DATE_OF_BIRTH\": {\n                    \"description\": \"INVALID_DATE_OF_BIRTH\",\n                    \"value\": \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth! Must be younger than 1900-01-01}\"\n                  },\n                  \"INVALID_MEDICINAL_PRODUCT\": {\n                    \"description\": \"INVALID_MEDICINAL_PRODUCT\",\n                    \"value\": \"{\\\"errorCode\\\": 454, \\\"errorMessage\\\": Invalid medicinal product}\"\n                  },\n                  \"INVALID_DOSES\": {\n                    \"description\": \"INVALID_DOSES\",\n                    \"value\": \"{\\\"errorCode\\\": 455, \\\"errorMessage\\\": Invalid number of doses}\"\n                  },\n                  \"INVALID_VACCINATION_DATE\": {\n                    \"description\": \"INVALID_VACCINATION_DATE\",\n                    \"value\": \"{\\\"errorCode\\\": 456, \\\"errorMessage\\\": Invalid vaccination date! Date cannot be in the future}\"\n                  },\n                  \"INVALID_COUNTRY_OF_VACCINATION\": {\n                    \"description\": \"INVALID_COUNTRY_OF_VACCINATION\",\n                    \"value\": \"{\\\"errorCode\\\": 457, \\\"errorMessage\\\": Invalid country of vaccination}\"\n                  },\n                  \"INVALID_GIVEN_NAME\": {\n                    \"description\": \"INVALID_GIVEN_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name! Must not exceed 50 chars}\"\n                  },\n                  \"INVALID_FAMILY_NAME\": {\n                    \"description\": \"INVALID_FAMILY_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name! Must not exceed 50 chars}\"\n                  },\n                  \"INVALID_COUNTRY_SHORT_FORM\": {\n                    \"description\": \"INVALID_COUNTRY_SHORT_FORM\",\n                    \"value\": \"{\\\"errorCode\\\": 468, \\\"errorMessage\\\": Country short form can not be mapped}\"\n                  },\n                  \"INVALID_LANGUAGE\": {\n                    \"description\": \"INVALID_LANGUAGE\",\n                    \"value\": \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language does not match any of the supported languages: de, it, fr!}\"\n                  }\n                }\n              }\n            }\n          },\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CovidCertificateCreateResponseDto\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/v1/covidcertificate/recovery\": {\n      \"post\": {\n        \"tags\": [\n          \"covid-certification-generation-controller\"\n        ],\n        \"summary\": \"Creates a recovery certificate for the given data.\",\n        \"description\": \"Creates a recovery certificate as an QR-Code and PDF. Performs an integrity check for each request based on headers and body.\",\n        \"operationId\": \"createRecoveryCertificate\",\n        \"parameters\": [\n          {\n            \"name\": \"X-Signature\",\n            \"in\": \"header\",\n            \"description\": \"Base64 encoded hash of the canonicalized body, generated with the `SHA256withRSA` algorithm signed with the private key of the certificate issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature) on Github.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"Base64\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RecoveryCertificateCreateDto\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"413\": {\n            \"description\": \"Payload Too Large\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"PAYLOAD_TOO_LARGE\": {\n                    \"description\": \"PAYLOAD_TOO_LARGE\",\n                    \"value\": \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Request payload too large, the maximum payload size is: 2048 bytes}\"\n                  }\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Forbidden\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"INVALID_BEARER\": {\n                    \"description\": \"INVALID_BEARER\",\n                    \"value\": \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid or missing bearer token}\"\n                  },\n                  \"INVALID_SIGNATURE\": {\n                    \"description\": \"INVALID_SIGNATURE\",\n                    \"value\": \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed, the body hash does not match the hash in the header}\"\n                  },\n                  \"SIGNATURE_PARSE_ERROR\": {\n                    \"description\": \"SIGNATURE_PARSE_ERROR\",\n                    \"value\": \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not be parsed}\"\n                  }\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"CREATE_COSE_PROTECTED_HEADER_FAILED\": {\n                    \"description\": \"CREATE_COSE_PROTECTED_HEADER_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 550, \\\"errorMessage\\\": Creating COSE protected header failed.}\"\n                  },\n                  \"CREATE_COSE_PAYLOAD_FAILED\": {\n                    \"description\": \"CREATE_COSE_PAYLOAD_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 551, \\\"errorMessage\\\": Creating COSE payload failed.}\"\n                  },\n                  \"CREATE_COSE_SIGNATURE_DATA_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGNATURE_DATA_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 552, \\\"errorMessage\\\": Creating COSE signature data failed.}\"\n                  },\n                  \"CREATE_SIGNATURE_FAILED\": {\n                    \"description\": \"CREATE_SIGNATURE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 553, \\\"errorMessage\\\": Creating signature failed.}\"\n                  },\n                  \"CREATE_COSE_SIGN1_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGN1_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 554, \\\"errorMessage\\\": Creating COSE_Sign1 failed.}\"\n                  },\n                  \"CREATE_BARCODE_FAILED\": {\n                    \"description\": \"CREATE_BARCODE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 555, \\\"errorMessage\\\": Creating barcode failed.}\"\n                  }\n                }\n              }\n            }\n          },\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CovidCertificateCreateResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"NO_PERSON_DATA\": {\n                    \"description\": \"NO_PERSON_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was specified}\"\n                  },\n                  \"INVALID_DATE_OF_BIRTH\": {\n                    \"description\": \"INVALID_DATE_OF_BIRTH\",\n                    \"value\": \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth! Must be younger than 1900-01-01}\"\n                  },\n                  \"INVALID_GIVEN_NAME\": {\n                    \"description\": \"INVALID_GIVEN_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name! Must not exceed 50 chars}\"\n                  },\n                  \"INVALID_FAMILY_NAME\": {\n                    \"description\": \"INVALID_FAMILY_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name! Must not exceed 50 chars}\"\n                  },\n                  \"NO_RECOVERY_DATA\": {\n                    \"description\": \"NO_RECOVERY_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 465, \\\"errorMessage\\\": No recovery data specified}\"\n                  },\n                  \"INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT\": {\n                    \"description\": \"INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT\",\n                    \"value\": \"{\\\"errorCode\\\": 466, \\\"errorMessage\\\": Invalid date of first positive test result}\"\n                  },\n                  \"INVALID_COUNTRY_OF_TEST\": {\n                    \"description\": \"INVALID_COUNTRY_OF_TEST\",\n                    \"value\": \"{\\\"errorCode\\\": 467, \\\"errorMessage\\\": Invalid country of test}\"\n                  },\n                  \"INVALID_COUNTRY_SHORT_FORM\": {\n                    \"description\": \"INVALID_COUNTRY_SHORT_FORM\",\n                    \"value\": \"{\\\"errorCode\\\": 468, \\\"errorMessage\\\": Country short form can not be mapped}\"\n                  },\n                  \"INVALID_LANGUAGE\": {\n                    \"description\": \"INVALID_LANGUAGE\",\n                    \"value\": \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language does not match any of the supported languages: de, it, fr!}\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/v1/covidcertificate/test\": {\n      \"post\": {\n        \"tags\": [\n          \"covid-certification-generation-controller\"\n        ],\n        \"summary\": \"Creates a test certificate for the given data.\",\n        \"description\": \"Creates a test certificate as an QR-Code and PDF. Performs an integrity check for each request based on headers and body.\",\n        \"operationId\": \"createTestCertificate\",\n        \"parameters\": [\n          {\n            \"name\": \"X-Signature\",\n            \"in\": \"header\",\n            \"description\": \"Base64 encoded hash of the canonicalized body, generated with the `SHA256withRSA` algorithm signed with the private key of the certificate issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature) on Github.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"Base64\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TestCertificateCreateDto\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"413\": {\n            \"description\": \"Payload Too Large\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"PAYLOAD_TOO_LARGE\": {\n                    \"description\": \"PAYLOAD_TOO_LARGE\",\n                    \"value\": \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Request payload too large, the maximum payload size is: 2048 bytes}\"\n                  }\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Forbidden\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"INVALID_BEARER\": {\n                    \"description\": \"INVALID_BEARER\",\n                    \"value\": \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid or missing bearer token}\"\n                  },\n                  \"INVALID_SIGNATURE\": {\n                    \"description\": \"INVALID_SIGNATURE\",\n                    \"value\": \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed, the body hash does not match the hash in the header}\"\n                  },\n                  \"SIGNATURE_PARSE_ERROR\": {\n                    \"description\": \"SIGNATURE_PARSE_ERROR\",\n                    \"value\": \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not be parsed}\"\n                  }\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"CREATE_COSE_PROTECTED_HEADER_FAILED\": {\n                    \"description\": \"CREATE_COSE_PROTECTED_HEADER_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 550, \\\"errorMessage\\\": Creating COSE protected header failed.}\"\n                  },\n                  \"CREATE_COSE_PAYLOAD_FAILED\": {\n                    \"description\": \"CREATE_COSE_PAYLOAD_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 551, \\\"errorMessage\\\": Creating COSE payload failed.}\"\n                  },\n                  \"CREATE_COSE_SIGNATURE_DATA_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGNATURE_DATA_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 552, \\\"errorMessage\\\": Creating COSE signature data failed.}\"\n                  },\n                  \"CREATE_SIGNATURE_FAILED\": {\n                    \"description\": \"CREATE_SIGNATURE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 553, \\\"errorMessage\\\": Creating signature failed.}\"\n                  },\n                  \"CREATE_COSE_SIGN1_FAILED\": {\n                    \"description\": \"CREATE_COSE_SIGN1_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 554, \\\"errorMessage\\\": Creating COSE_Sign1 failed.}\"\n                  },\n                  \"CREATE_BARCODE_FAILED\": {\n                    \"description\": \"CREATE_BARCODE_FAILED\",\n                    \"value\": \"{\\\"errorCode\\\": 555, \\\"errorMessage\\\": Creating barcode failed.}\"\n                  }\n                }\n              }\n            }\n          },\n          \"200\": {\n            \"description\": \"OK\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CovidCertificateCreateResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RestError\"\n                },\n                \"examples\": {\n                  \"NO_PERSON_DATA\": {\n                    \"description\": \"NO_PERSON_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was specified}\"\n                  },\n                  \"INVALID_DATE_OF_BIRTH\": {\n                    \"description\": \"INVALID_DATE_OF_BIRTH\",\n                    \"value\": \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth! Must be younger than 1900-01-01}\"\n                  },\n                  \"INVALID_GIVEN_NAME\": {\n                    \"description\": \"INVALID_GIVEN_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name! Must not exceed 50 chars}\"\n                  },\n                  \"INVALID_FAMILY_NAME\": {\n                    \"description\": \"INVALID_FAMILY_NAME\",\n                    \"value\": \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name! Must not exceed 50 chars}\"\n                  },\n                  \"NO_TEST_DATA\": {\n                    \"description\": \"NO_TEST_DATA\",\n                    \"value\": \"{\\\"errorCode\\\": 460, \\\"errorMessage\\\": No test data was specified}\"\n                  },\n                  \"INVALID_MEMBER_STATE_OF_TEST\": {\n                    \"description\": \"INVALID_MEMBER_STATE_OF_TEST\",\n                    \"value\": \"{\\\"errorCode\\\": 461, \\\"errorMessage\\\": Invalid member state of test}\"\n                  },\n                  \"INVALID_TYP_OF_TEST\": {\n                    \"description\": \"INVALID_TYP_OF_TEST\",\n                    \"value\": \"{\\\"errorCode\\\": 462, \\\"errorMessage\\\": Invalid type of test and manufacturer code combination! Must either be a PCR Test type and no manufacturer code or give a manufacturer code and the antigen test type code.}\"\n                  },\n                  \"INVALID_TEST_CENTER\": {\n                    \"description\": \"INVALID_TEST_CENTER\",\n                    \"value\": \"{\\\"errorCode\\\": 463, \\\"errorMessage\\\": Invalid testing center or facility}\"\n                  },\n                  \"INVALID_SAMPLE_OR_RESULT_DATE_TIME\": {\n                    \"description\": \"INVALID_SAMPLE_OR_RESULT_DATE_TIME\",\n                    \"value\": \"{\\\"errorCode\\\": 464, \\\"errorMessage\\\": Invalid sample or result date time! Sample date must be before current date and before result date}\"\n                  },\n                  \"INVALID_COUNTRY_SHORT_FORM\": {\n                    \"description\": \"INVALID_COUNTRY_SHORT_FORM\",\n                    \"value\": \"{\\\"errorCode\\\": 468, \\\"errorMessage\\\": Country short form can not be mapped}\"\n                  },\n                  \"INVALID_LANGUAGE\": {\n                    \"description\": \"INVALID_LANGUAGE\",\n                    \"value\": \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language does not match any of the supported languages: de, it, fr!}\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"RestError\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"errorCode\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"errorMessage\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"CovidCertificatePersonNameDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"familyName\": {\n            \"type\": \"string\",\n            \"description\": \"family name of the covid certificate owner. Format: maxLength: 50 CHAR\",\n            \"example\": \"Rochat\"\n          },\n          \"givenName\": {\n            \"type\": \"string\",\n            \"description\": \"first name of the covid certificate owner. Format: maxLength: 50 CHAR\",\n            \"example\": \"Céline\"\n          }\n        }\n      },\n      \"VaccinationCertificateCreateDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"$ref\": \"#/components/schemas/CovidCertificatePersonNameDto\"\n          },\n          \"dateOfBirth\": {\n            \"type\": \"string\",\n            \"description\": \"birthdate of the covid certificate owner. Format: ISO 8601 date without time. Range: can be between 1900-01-01 and 2099-12-31. Regexp: \\\"[19|20][0-9][0-9]-(0[1-9]|1[0-2])-([0-2][1-9]|3[0|1])\\\".\",\n            \"format\": \"date\",\n            \"example\": \"1950-06-04\"\n          },\n          \"language\": {\n            \"type\": \"string\",\n            \"description\": \"language for the PDF (together with english). Accepted languages are: de, it, fr, rm\",\n            \"example\": \"de\"\n          },\n          \"otp\": {\n            \"type\": \"string\"\n          },\n          \"vaccinationInfo\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/VaccinationCertificateDataDto\"\n            }\n          }\n        }\n      },\n      \"VaccinationCertificateDataDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"medicinalProductCode\": {\n            \"type\": \"string\",\n            \"description\": \"name of the medicinal product as registered in the country.\",\n            \"example\": \"68267\"\n          },\n          \"numberOfDoses\": {\n            \"type\": \"integer\",\n            \"description\": \"number in a series of doses.\",\n            \"format\": \"int32\",\n            \"example\": 2\n          },\n          \"totalNumberOfDoses\": {\n            \"type\": \"integer\",\n            \"description\": \"total series of doses.\",\n            \"format\": \"int32\",\n            \"example\": 2\n          },\n          \"vaccinationDate\": {\n            \"type\": \"string\",\n            \"description\": \"date of vaccination. Format: ISO 8601 date without time. Range: can be between 1900-01-01 and 2099-12-31. Regexp: \\\"[19|20][0-9][0-9]-(0[1-9]|1[0-2])-([0-2][1-9]|3[0|1])\\\".\",\n            \"format\": \"date\",\n            \"example\": \"2021-05-14\"\n          },\n          \"countryOfVaccination\": {\n            \"type\": \"string\",\n            \"description\": \"the country in which the covid certificate owner has been vaccinated. Format: string (2 chars according to ISO 3166 Country Codes).\",\n            \"example\": \"CH\"\n          }\n        }\n      },\n      \"CovidCertificateCreateResponseDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pdf\": {\n            \"type\": \"string\",\n            \"format\": \"byte\"\n          },\n          \"qrCode\": {\n            \"type\": \"string\",\n            \"format\": \"byte\"\n          },\n          \"uvci\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"RecoveryCertificateCreateDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"$ref\": \"#/components/schemas/CovidCertificatePersonNameDto\"\n          },\n          \"dateOfBirth\": {\n            \"type\": \"string\",\n            \"description\": \"birthdate of the covid certificate owner. Format: ISO 8601 date without time. Range: can be between 1900-01-01 and 2099-12-31. Regexp: \\\"[19|20][0-9][0-9]-(0[1-9]|1[0-2])-([0-2][1-9]|3[0|1])\\\".\",\n            \"format\": \"date\",\n            \"example\": \"1950-06-04\"\n          },\n          \"language\": {\n            \"type\": \"string\",\n            \"description\": \"language for the PDF (together with english). Accepted languages are: de, it, fr, rm\",\n            \"example\": \"de\"\n          },\n          \"otp\": {\n            \"type\": \"string\"\n          },\n          \"recoveryInfo\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RecoveryCertificateDataDto\"\n            }\n          }\n        }\n      },\n      \"RecoveryCertificateDataDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"dateOfFirstPositiveTestResult\": {\n            \"type\": \"string\",\n            \"description\": \"date when the sample for the test was collected that led to positive test obtained through a procedure established by a public health authority. Format: ISO 8601 date without time. Range: can be between 1900-01-01 and 2099-12-31. Regexp: \\\"[19|20][0-9][0-9]-(0[1-9]|1[0-2])-([0-2][1-9]|3[0|1])\\\".\",\n            \"format\": \"date\",\n            \"example\": \"2021-10-03\"\n          },\n          \"countryOfTest\": {\n            \"type\": \"string\",\n            \"description\": \"the country in which the covid certificate owner has been tested. Format: string (2 chars according to ISO 3166 Country Codes).\",\n            \"example\": \"CH\"\n          }\n        }\n      },\n      \"TestCertificateCreateDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"$ref\": \"#/components/schemas/CovidCertificatePersonNameDto\"\n          },\n          \"dateOfBirth\": {\n            \"type\": \"string\",\n            \"description\": \"birthdate of the covid certificate owner. Format: ISO 8601 date without time. Range: can be between 1900-01-01 and 2099-12-31. Regexp: \\\"[19|20][0-9][0-9]-(0[1-9]|1[0-2])-([0-2][1-9]|3[0|1])\\\".\",\n            \"format\": \"date\",\n            \"example\": \"1950-06-04\"\n          },\n          \"language\": {\n            \"type\": \"string\",\n            \"description\": \"language for the PDF (together with english). Accepted languages are: de, it, fr, rm\",\n            \"example\": \"de\"\n          },\n          \"otp\": {\n            \"type\": \"string\"\n          },\n          \"testInfo\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/TestCertificateDataDto\"\n            }\n          }\n        }\n      },\n      \"TestCertificateDataDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"typeCode\": {\n            \"type\": \"string\",\n            \"description\": \"type of test. This field is only mandatory when it is a PCR test. If given with manufacturerCode as well, they must match otherwise there will be a 400 BAD REQUEST.\",\n            \"example\": \"LP217198-3\"\n          },\n          \"manufacturerCode\": {\n            \"type\": \"string\",\n            \"description\": \"test manufacturer code. This should only be sent when it is not a PCR test, otherwise there will be a 400 BAD REQUEST.\",\n            \"example\": \"1065\"\n          },\n          \"sampleDateTime\": {\n            \"type\": \"string\",\n            \"description\": \"date and time of the test sample collection. Format: ISO 8601 date incl. time.\",\n            \"format\": \"date-time\",\n            \"example\": \"2020-09-24T17:29:41Z\"\n          },\n          \"resultDateTime\": {\n            \"type\": \"string\",\n            \"description\": \"date and time of the test result production (optional for rapid antigen test). Format: ISO 8601 date incl. time.\",\n            \"format\": \"date-time\",\n            \"example\": \"2020-09-28T13:40:12Z\"\n          },\n          \"testingCentreOrFacility\": {\n            \"type\": \"string\",\n            \"description\": \"name of centre or facility. Format: string, maxLength: 50 CHAR.\",\n            \"example\": \"de\"\n          },\n          \"memberStateOfTest\": {\n            \"type\": \"string\",\n            \"description\": \"the country in which the covid certificate owner has been tested. Format: string (2 chars according to ISO 3166 Country Codes).\",\n            \"example\": \"CH\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/admin-ch/CovidCertificate-Api-Cli@51e91d794963bc01aef5698e12d39f33f6acfd23/-/blob/api-doc.json",
			"externalURLs": [
				{
					"url": "https://github.com/admin-ch/CovidCertificate-Api-Cli/blob/51e91d794963bc01aef5698e12d39f33f6acfd23/api-doc.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}