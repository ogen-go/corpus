{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/googleapis.com/chat/v1/openapi.yaml",
			"byteSize": 87796,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://chat.googleapis.com/\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: Enables apps to fetch information and perform actions in Google Chat. Authentication is a prerequisite for using the Google Chat REST API.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Google Chat API\n  version: v1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n    - analytics\n    - media\n  x-logo:\n    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\n  x-origin:\n    - converter:\n        url: https://github.com/mermade/oas-kit\n        version: 7.0.4\n      format: google\n      url: https://chat.googleapis.com/$discovery/rest?version=v1\n      version: v1\n  x-providerName: googleapis.com\n  x-serviceName: chat\nexternalDocs:\n  url: https://developers.google.com/hangouts/chat\ntags:\n  - name: dms\n  - name: media\n  - name: rooms\n  - name: spaces\npaths:\n  \"/v1/media/{resourceName}\":\n    get:\n      description: Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.\n      operationId: chat.media.download\n      parameters:\n        - description: Name of the media that is being downloaded. See ReadRequest.resource_name.\n          in: path\n          name: resourceName\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Media\"\n          description: Successful response\n      tags:\n        - media\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  /v1/spaces:\n    get:\n      description: Lists spaces the caller is a member of. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.list\n      parameters:\n        - description: Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.\n          in: query\n          name: pageSize\n          schema:\n            type: integer\n        - description: A token identifying a page of results the server should return.\n          in: query\n          name: pageToken\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListSpacesResponse\"\n          description: Successful response\n      tags:\n        - spaces\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  \"/v1/{name}\":\n    delete:\n      description: Deletes a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.messages.delete\n      parameters:\n        - description: 'Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB'\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n          description: Successful response\n      tags:\n        - spaces\n    get:\n      description: Gets the metadata of a message attachment. The attachment data is fetched using the media API. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.messages.attachments.get\n      parameters:\n        - description: Required. Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attachment\"\n          description: Successful response\n      tags:\n        - spaces\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    put:\n      description: Updates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.messages.update\n      parameters:\n        - description: \"Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`\"\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n        - description: \"Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards * attachment\"\n          in: query\n          name: updateMask\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Message\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n          description: Successful response\n      tags:\n        - spaces\n  \"/v1/{parent}/members\":\n    get:\n      description: Lists human memberships in a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.members.list\n      parameters:\n        - description: \"Required. The resource name of the space for which to fetch a membership list. Format: spaces/{space}\"\n          in: path\n          name: parent\n          required: true\n          schema:\n            type: string\n        - description: Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.\n          in: query\n          name: pageSize\n          schema:\n            type: integer\n        - description: A token identifying a page of results the server should return.\n          in: query\n          name: pageToken\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListMembershipsResponse\"\n          description: Successful response\n      tags:\n        - spaces\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n  \"/v1/{parent}/messages\":\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: Creates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).\n      operationId: chat.spaces.messages.create\n      parameters:\n        - description: 'Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA'\n          in: path\n          name: parent\n          required: true\n          schema:\n            type: string\n        - description: Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.\n          in: query\n          name: requestId\n          schema:\n            type: string\n        - description: Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.\n          in: query\n          name: threadKey\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Message\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n          description: Successful response\n      tags:\n        - spaces\n  \"/v1/{parent}/webhooks\":\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n      - $ref: \"#/components/parameters/uploadType\"\n    post:\n      description: Legacy path for creating message. Calling these will result in a BadRequest response.\n      operationId: chat.spaces.webhooks\n      parameters:\n        - description: 'Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA'\n          in: path\n          name: parent\n          required: true\n          schema:\n            type: string\n        - description: Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.\n          in: query\n          name: requestId\n          schema:\n            type: string\n        - description: Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.\n          in: query\n          name: threadKey\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Message\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n          description: Successful response\n      tags:\n        - spaces\ncomponents:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n          - \"1\"\n          - \"2\"\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n          - json\n          - media\n          - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    ActionParameter:\n      description: \"List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.\"\n      properties:\n        key:\n          description: The name of the parameter for the action script.\n          type: string\n        value:\n          description: The value of the parameter.\n          type: string\n      type: object\n    ActionResponse:\n      description: Parameters that a Chat app can use to configure how it's response is posted.\n      properties:\n        dialogAction:\n          $ref: \"#/components/schemas/DialogAction\"\n          description: Input only. A response to an event related to a [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be accompanied by `ResponseType.Dialog`.\n        type:\n          description: Input only. The type of Chat app response.\n          enum:\n            - TYPE_UNSPECIFIED\n            - NEW_MESSAGE\n            - UPDATE_MESSAGE\n            - UPDATE_USER_MESSAGE_CARDS\n            - REQUEST_CONFIG\n            - DIALOG\n          type: string\n        url:\n          description: Input only. URL for users to auth or config. (Only for REQUEST_CONFIG response types.)\n          type: string\n      type: object\n    ActionStatus:\n      description: Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).\n      properties:\n        statusCode:\n          description: The status code.\n          enum:\n            - OK\n            - CANCELLED\n            - UNKNOWN\n            - INVALID_ARGUMENT\n            - DEADLINE_EXCEEDED\n            - NOT_FOUND\n            - ALREADY_EXISTS\n            - PERMISSION_DENIED\n            - UNAUTHENTICATED\n            - RESOURCE_EXHAUSTED\n            - FAILED_PRECONDITION\n            - ABORTED\n            - OUT_OF_RANGE\n            - UNIMPLEMENTED\n            - INTERNAL\n            - UNAVAILABLE\n            - DATA_LOSS\n          type: string\n        userFacingMessage:\n          description: The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.\n          type: string\n      type: object\n    Annotation:\n      description: 'Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```'\n      properties:\n        length:\n          description: Length of the substring in the plain-text message body this annotation corresponds to.\n          format: int32\n          type: integer\n        slashCommand:\n          $ref: \"#/components/schemas/SlashCommandMetadata\"\n          description: The metadata for a slash command.\n        startIndex:\n          description: Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.\n          format: int32\n          type: integer\n        type:\n          description: The type of this annotation.\n          enum:\n            - ANNOTATION_TYPE_UNSPECIFIED\n            - USER_MENTION\n            - SLASH_COMMAND\n          type: string\n        userMention:\n          $ref: \"#/components/schemas/UserMentionMetadata\"\n          description: The metadata of user mention.\n      type: object\n    Attachment:\n      description: An attachment in Google Chat.\n      properties:\n        attachmentDataRef:\n          $ref: \"#/components/schemas/AttachmentDataRef\"\n          description: A reference to the attachment data. This is used with the media API to download the attachment data.\n        contentName:\n          description: The original file name for the content, not the full path.\n          type: string\n        contentType:\n          description: The content type (MIME type) of the file.\n          type: string\n        downloadUri:\n          description: Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps should not use this URL to download attachment content.\n          readOnly: true\n          type: string\n        driveDataRef:\n          $ref: \"#/components/schemas/DriveDataRef\"\n          description: A reference to the drive attachment. This is used with the Drive API.\n        name:\n          description: Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".\n          type: string\n        source:\n          description: The source of the attachment.\n          enum:\n            - SOURCE_UNSPECIFIED\n            - DRIVE_FILE\n            - UPLOADED_CONTENT\n          type: string\n        thumbnailUri:\n          description: Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps should not use this URL to download attachment content.\n          readOnly: true\n          type: string\n      type: object\n    AttachmentDataRef:\n      description: A reference to the data of an attachment.\n      properties:\n        resourceName:\n          description: The resource name of the attachment data. This is used with the media API to download the attachment data.\n          type: string\n      type: object\n    Button:\n      description: A button. Can be a text button or an image button.\n      properties:\n        imageButton:\n          $ref: \"#/components/schemas/ImageButton\"\n          description: A button with image and onclick action.\n        textButton:\n          $ref: \"#/components/schemas/TextButton\"\n          description: A button with text and onclick action.\n      type: object\n    Card:\n      description: A card is a UI element that can contain UI widgets such as texts, images.\n      properties:\n        cardActions:\n          description: The actions of this card.\n          items:\n            $ref: \"#/components/schemas/CardAction\"\n          type: array\n        header:\n          $ref: \"#/components/schemas/CardHeader\"\n          description: The header of the card. A header usually contains a title and an image.\n        name:\n          description: Name of the card.\n          type: string\n        sections:\n          description: Sections are separated by a line divider.\n          items:\n            $ref: \"#/components/schemas/Section\"\n          type: array\n      type: object\n    CardAction:\n      description: \"A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.\"\n      properties:\n        actionLabel:\n          description: The label used to be displayed in the action menu item.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/OnClick\"\n          description: The onclick action for this action item.\n      type: object\n    CardHeader:\n      properties:\n        imageStyle:\n          description: The image's type (e.g. square border or circular border).\n          enum:\n            - IMAGE_STYLE_UNSPECIFIED\n            - IMAGE\n            - AVATAR\n          type: string\n        imageUrl:\n          description: The URL of the image in the card header.\n          type: string\n        subtitle:\n          description: The subtitle of the card header.\n          type: string\n        title:\n          description: \"The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines.\"\n          type: string\n      type: object\n    ChatAppLogEntry:\n      description: JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs).\n      properties:\n        deployment:\n          description: The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script.\n          type: string\n        deploymentFunction:\n          description: The unencrypted `callback_method` name that was running when the error was encountered.\n          type: string\n        error:\n          $ref: \"#/components/schemas/Status\"\n          description: The error code and message.\n      type: object\n    Color:\n      description: \"Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:\u0026red green:\u0026green blue:\u0026blue alpha:\u0026alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...\"\n      properties:\n        alpha:\n          description: \"The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).\"\n          format: float\n          type: number\n        blue:\n          description: The amount of blue in the color as a value in the interval [0, 1].\n          format: float\n          type: number\n        green:\n          description: The amount of green in the color as a value in the interval [0, 1].\n          format: float\n          type: number\n        red:\n          description: The amount of red in the color as a value in the interval [0, 1].\n          format: float\n          type: number\n      type: object\n    CommonEventObject:\n      description: Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).\n      properties:\n        formInputs:\n          additionalProperties:\n            $ref: \"#/components/schemas/Inputs\"\n          description: \"A map containing the current values of the widgets in a card. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. Depending on the input data type, a different object represents each input: For single-value widgets, `StringInput`. For multi-value widgets, an array of `StringInput` objects. For a date-time picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a time-only picker, a `TimeInput`. Corresponds with the data entered by a user on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs).\"\n          type: object\n        hostApp:\n          description: The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.\n          enum:\n            - UNSPECIFIED_HOST_APP\n            - GMAIL\n            - CALENDAR\n            - DRIVE\n            - DEMO\n            - DOCS\n            - SHEETS\n            - SLIDES\n            - DRAWINGS\n            - CHAT\n          type: string\n        invokedFunction:\n          description: Name of the invoked function associated with the widget. Only set for Chat apps.\n          type: string\n        parameters:\n          additionalProperties:\n            type: string\n          description: Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.\n          type: object\n        platform:\n          description: The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.\n          enum:\n            - UNKNOWN_PLATFORM\n            - WEB\n            - IOS\n            - ANDROID\n          type: string\n        timeZone:\n          $ref: \"#/components/schemas/TimeZone\"\n          description: The timezone ID and offset from Coordinated Universal Time (UTC).\n        userLocale:\n          description: The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\". Not supported by Chat apps.\n          type: string\n      type: object\n    DateInput:\n      description: Date input values. Not supported by Chat apps.\n      properties:\n        msSinceEpoch:\n          description: Time since epoch time, in milliseconds.\n          format: int64\n          type: string\n      type: object\n    DateTimeInput:\n      description: Date and time input values. Not supported by Chat apps.\n      properties:\n        hasDate:\n          description: Whether the `datetime` input includes a calendar date.\n          type: boolean\n        hasTime:\n          description: Whether the `datetime` input includes a timestamp.\n          type: boolean\n        msSinceEpoch:\n          description: Time since epoch time, in milliseconds.\n          format: int64\n          type: string\n      type: object\n    DeprecatedEvent:\n      description: Google Chat events.\n      properties:\n        action:\n          $ref: \"#/components/schemas/FormAction\"\n          description: The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information.\n        common:\n          $ref: \"#/components/schemas/CommonEventObject\"\n          description: Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes information submitted by users interacting with [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data entered on a card.\n        configCompleteRedirectUrl:\n          description: The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information.\n          type: string\n        dialogEventType:\n          description: The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) event received.\n          enum:\n            - TYPE_UNSPECIFIED\n            - REQUEST_DIALOG\n            - SUBMIT_DIALOG\n            - CANCEL_DIALOG\n          type: string\n        eventTime:\n          description: The timestamp indicating when the event occurred.\n          format: google-datetime\n          type: string\n        isDialogEvent:\n          description: True when the event is related to [dialogs](https://developers.google.com/chat/how-tos/dialogs).\n          type: boolean\n        message:\n          $ref: \"#/components/schemas/Message\"\n          description: The message that triggered the event, if applicable.\n        space:\n          $ref: \"#/components/schemas/Space\"\n          description: The space in which the event occurred.\n        threadKey:\n          description: The Chat app-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.\n          type: string\n        token:\n          description: A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).\n          type: string\n        type:\n          description: The type of the event.\n          enum:\n            - UNSPECIFIED\n            - MESSAGE\n            - ADDED_TO_SPACE\n            - REMOVED_FROM_SPACE\n            - CARD_CLICKED\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n          description: The user that triggered the event.\n      type: object\n    Dialog:\n      description: Wrapper around the card body of the dialog.\n      properties:\n        body:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Card\"\n          description: \"Input only. Body of the dialog, which is rendered in a modal. Google Chat apps do not support the following card entities: `DateTimePicker`, `OnChangeAction`.\"\n      type: object\n    DialogAction:\n      description: Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.\n      properties:\n        actionStatus:\n          $ref: \"#/components/schemas/ActionStatus\"\n          description: Input only. Status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a status and message to users, if necessary. For example, in case of an error or success.\n        dialog:\n          $ref: \"#/components/schemas/Dialog\"\n          description: Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the request.\n      type: object\n    DriveDataRef:\n      description: A reference to the data of a drive attachment.\n      properties:\n        driveFileId:\n          description: The id for the drive file, for use with the Drive API.\n          type: string\n      type: object\n    Empty:\n      description: \"A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }\"\n      properties: {}\n      type: object\n    FormAction:\n      description: A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.\n      properties:\n        actionMethodName:\n          description: The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired.\n          type: string\n        parameters:\n          description: List of action parameters.\n          items:\n            $ref: \"#/components/schemas/ActionParameter\"\n          type: array\n      type: object\n    GoogleAppsCardV1Action:\n      description: An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.\n      properties:\n        function:\n          description: Apps Script function to invoke when the containing element is clicked/activated.\n          type: string\n        loadIndicator:\n          description: Specifies the loading indicator that the action displays while making the call to the action.\n          enum:\n            - SPINNER\n            - NONE\n          type: string\n        parameters:\n          description: List of action parameters.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1ActionParameter\"\n          type: array\n        persistValues:\n          description: Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed.\n          type: boolean\n      type: object\n    GoogleAppsCardV1ActionParameter:\n      description: \"List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.\"\n      properties:\n        key:\n          description: The name of the parameter for the action script.\n          type: string\n        value:\n          description: The value of the parameter.\n          type: string\n      type: object\n    GoogleAppsCardV1AppUri:\n      description: Represents the platform specific uri/intent to open for each client.\n      properties:\n        androidIntent:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Intent\"\n          description: An intent object to be opened in the corresponding android hosting app.\n        companionUri:\n          description: A companion uri string to be opened in the chat companion window. on the web.\n          type: string\n        iosUri:\n          description: A uri string to be opened in the corresponding iOS hosting app.\n          type: string\n      type: object\n    GoogleAppsCardV1BorderStyle:\n      description: Represents the complete border style applied to widgets.\n      properties:\n        cornerRadius:\n          description: The corner radius for the border.\n          format: int32\n          type: integer\n        strokeColor:\n          $ref: \"#/components/schemas/Color\"\n          description: The colors to use when the type is `BORDER_TYPE_STROKE`.\n        type:\n          description: The border type.\n          enum:\n            - BORDER_TYPE_UNSPECIFIED\n            - NO_BORDER\n            - STROKE\n          type: string\n      type: object\n    GoogleAppsCardV1Button:\n      description: A button. Can be a text button or an image button.\n      properties:\n        altText:\n          description: The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.\n          type: string\n        color:\n          $ref: \"#/components/schemas/Color\"\n          description: If set, the button is filled with a solid background.\n        disabled:\n          description: If `true`, the button is displayed in a disabled state and doesn't respond to user actions.\n          type: boolean\n        icon:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Icon\"\n          description: The icon image.\n        onClick:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OnClick\"\n          description: The action to perform when the button is clicked.\n        text:\n          description: The text of the button.\n          type: string\n      type: object\n    GoogleAppsCardV1ButtonList:\n      description: A list of buttons layed out horizontally.\n      properties:\n        buttons:\n          description: An array of buttons.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1Button\"\n          type: array\n      type: object\n    GoogleAppsCardV1Card:\n      description: 'A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Sasha\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/sasha.png\", \"imageAltText\": \"Avatar for Sasha\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"sasha@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```'\n      properties:\n        cardActions:\n          description: \"The card's actions. Actions are added to the card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \\\"card_actions\\\": [ { \\\"actionLabel\\\": \\\"Settings\\\", \\\"onClick\\\": { \\\"action\\\": { \\\"functionName\\\": \\\"goToView\\\", \\\"parameters\\\": [ { \\\"key\\\": \\\"viewType\\\", \\\"value\\\": \\\"SETTING\\\" } ], \\\"loadIndicator\\\": \\\"LoadIndicator.SPINNER\\\" } } }, { \\\"actionLabel\\\": \\\"Send Feedback\\\", \\\"onClick\\\": { \\\"openLink\\\": { \\\"url\\\": \\\"https://example.com/feedback\\\" } } } ] ```\"\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1CardAction\"\n          type: array\n        displayStyle:\n          description: The display style for `peekCardHeader`.\n          enum:\n            - DISPLAY_STYLE_UNSPECIFIED\n            - PEEK\n            - REPLACE\n          type: string\n        fixedFooter:\n          $ref: \"#/components/schemas/GoogleAppsCardV1CardFixedFooter\"\n          description: The fixed footer shown at the bottom of this card.\n        header:\n          $ref: \"#/components/schemas/GoogleAppsCardV1CardHeader\"\n          description: The header of the card. A header usually contains a title and an image.\n        name:\n          description: Name of the card. Used as a card identifier in card navigation.\n          type: string\n        peekCardHeader:\n          $ref: \"#/components/schemas/GoogleAppsCardV1CardHeader\"\n          description: When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards.\n        sections:\n          description: Sections are separated by a line divider.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1Section\"\n          type: array\n      type: object\n    GoogleAppsCardV1CardAction:\n      description: A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.\n      properties:\n        actionLabel:\n          description: The label that displays as the action menu item.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OnClick\"\n          description: The `onClick` action for this action item.\n      type: object\n    GoogleAppsCardV1CardFixedFooter:\n      description: A persistent (sticky) footer that is added to the bottom of the card.\n      properties:\n        primaryButton:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Button\"\n          description: The primary button of the fixed footer. The button must be a text button with text and color set.\n        secondaryButton:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Button\"\n          description: The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.\n      type: object\n    GoogleAppsCardV1CardHeader:\n      description: Represents a card header.\n      properties:\n        imageAltText:\n          description: The alternative text of this image which is used for accessibility.\n          type: string\n        imageType:\n          description: The image's type.\n          enum:\n            - SQUARE\n            - CIRCLE\n          type: string\n        imageUrl:\n          description: The URL of the image in the card header.\n          type: string\n        subtitle:\n          description: The subtitle of the card header.\n          type: string\n        title:\n          description: \"Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.\"\n          type: string\n      type: object\n    GoogleAppsCardV1DateTimePicker:\n      description: The widget that lets users to specify a date and time. Not supported by Google Chat apps.\n      properties:\n        label:\n          description: The label for the field that displays to the user.\n          type: string\n        name:\n          description: The name of the text input that's used in `formInput`, and uniquely identifies this input.\n          type: string\n        onChangeAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation.\n        timezoneOffsetDate:\n          description: The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side.\n          format: int32\n          type: integer\n        type:\n          description: The type of the date/time picker.\n          enum:\n            - DATE_AND_TIME\n            - DATE_ONLY\n            - TIME_ONLY\n          type: string\n        valueMsEpoch:\n          description: The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.\n          format: int64\n          type: string\n      type: object\n    GoogleAppsCardV1DecoratedText:\n      description: A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.\n      properties:\n        bottomLabel:\n          description: The formatted text label that shows below the main text.\n          type: string\n        button:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Button\"\n          description: A button that can be clicked to trigger an action.\n        endIcon:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Icon\"\n          description: An icon displayed after the text.\n        icon:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Icon\"\n          description: Deprecated in favor of start_icon.\n        onClick:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OnClick\"\n          description: Only the top and bottom label and content region are clickable.\n        startIcon:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Icon\"\n          description: The icon displayed in front of the text.\n        switchControl:\n          $ref: \"#/components/schemas/GoogleAppsCardV1SwitchControl\"\n          description: A switch widget can be clicked to change its state or trigger an action.\n        text:\n          description: Required. The main widget formatted text. See Text formatting for details.\n          type: string\n        topLabel:\n          description: The formatted text label that shows above the main text.\n          type: string\n        wrapText:\n          description: The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated.\n          type: boolean\n      type: object\n    GoogleAppsCardV1Divider:\n      description: A divider that appears in between widgets.\n      properties: {}\n      type: object\n    GoogleAppsCardV1ExtraData:\n      description: Extra data for an android intent. Valid keys are defined in the hosting app contract.\n      properties:\n        key:\n          description: A key for the intent extra data.\n          type: string\n        value:\n          description: Value for the given extra data key.\n          type: string\n      type: object\n    GoogleAppsCardV1Grid:\n      description: Represents a Grid widget that displays items in a configurable grid layout.\n      properties:\n        borderStyle:\n          $ref: \"#/components/schemas/GoogleAppsCardV1BorderStyle\"\n          description: The border style to apply to each grid item.\n        columnCount:\n          description: The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).\n          format: int32\n          type: integer\n        items:\n          description: The items to display in the grid.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1GridItem\"\n          type: array\n        onClick:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OnClick\"\n          description: This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.\n        title:\n          description: The text that displays in the grid header.\n          type: string\n      type: object\n    GoogleAppsCardV1GridItem:\n      description: Represents a single item in the grid layout.\n      properties:\n        id:\n          description: A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters.\n          type: string\n        image:\n          $ref: \"#/components/schemas/GoogleAppsCardV1ImageComponent\"\n          description: The image that displays in the grid item.\n        layout:\n          description: The layout to use for the grid item.\n          enum:\n            - GRID_ITEM_LAYOUT_UNSPECIFIED\n            - TEXT_BELOW\n            - TEXT_ABOVE\n          type: string\n        subtitle:\n          description: The grid item's subtitle.\n          type: string\n        textAlignment:\n          description: The horizontal alignment of the grid item's text.\n          enum:\n            - HORIZONTAL_ALIGNMENT_UNSPECIFIED\n            - START\n            - CENTER\n            - END\n          type: string\n        title:\n          description: The grid item's title.\n          type: string\n      type: object\n    GoogleAppsCardV1Icon:\n      properties:\n        altText:\n          description: The description of the icon, used for accessibility. The default value is provided if you don't specify one.\n          type: string\n        iconUrl:\n          description: The icon specified by a URL.\n          type: string\n        imageType:\n          description: The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.\n          enum:\n            - SQUARE\n            - CIRCLE\n          type: string\n        knownIcon:\n          description: The icon specified by the string name of a list of known icons.\n          type: string\n      type: object\n    GoogleAppsCardV1Image:\n      description: An image that is specified by a URL and can have an `onClick` action.\n      properties:\n        altText:\n          description: The alternative text of this image, used for accessibility.\n          type: string\n        imageUrl:\n          description: An image URL.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OnClick\"\n          description: The action triggered by an `onClick` event.\n      type: object\n    GoogleAppsCardV1ImageComponent:\n      description: Represents an image.\n      properties:\n        altText:\n          description: The accessibility label for the image.\n          type: string\n        borderStyle:\n          $ref: \"#/components/schemas/GoogleAppsCardV1BorderStyle\"\n          description: The border style to apply to the image.\n        cropStyle:\n          $ref: \"#/components/schemas/GoogleAppsCardV1ImageCropStyle\"\n          description: The crop style to apply to the image.\n        imageUri:\n          description: The image URL.\n          type: string\n      type: object\n    GoogleAppsCardV1ImageCropStyle:\n      description: Represents the crop style applied to an image.\n      properties:\n        aspectRatio:\n          description: The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.\n          format: double\n          type: number\n        type:\n          description: The crop type.\n          enum:\n            - IMAGE_CROP_TYPE_UNSPECIFIED\n            - SQUARE\n            - CIRCLE\n            - RECTANGLE_CUSTOM\n            - RECTANGLE_4_3\n          type: string\n      type: object\n    GoogleAppsCardV1Intent:\n      description: Android intent.\n      properties:\n        extraData:\n          description: A list of extra data for the android intent. For example, for a calendar event edit intent, the event title information can be passed as extra data.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1ExtraData\"\n          type: array\n        intentAction:\n          description: \"An android intent action string for the {@link android.content.Intent} object. For example: for the view intent action type, a valid value will be android.content.Intent.ACTION_VIEW.\"\n          type: string\n      type: object\n    GoogleAppsCardV1OnClick:\n      description: Represents the response to an `onClick` event.\n      properties:\n        action:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: If specified, an action is triggered by this `onClick`.\n        card:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Card\"\n          description: A new card is pushed to the card stack after clicking if specified.\n        openDynamicLinkAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: An add-on triggers this action when the action needs to open a link. This differs from the `open_link` above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.\n        openLink:\n          $ref: \"#/components/schemas/GoogleAppsCardV1OpenLink\"\n          description: If specified, this `onClick` triggers an open link action.\n      type: object\n    GoogleAppsCardV1OpenLink:\n      description: Represents an `onClick` event that opens a hyperlink.\n      properties:\n        appUri:\n          $ref: \"#/components/schemas/GoogleAppsCardV1AppUri\"\n          description: \"Represents the platform specific uri/intent to open on each client. For example: A companion_url will open in a companion window on the web. An iOS URL and android intent will open in the corresponding hosting apps. If these platform specific URLs can't be handled correctly, i.e. if the companion isn't supported on web and the hosting apps aren't available on the mobile platforms then the `uri` will open in a new browser window on all the platforms.\"\n        onClose:\n          description: Whether the client forgets about a link after opening it, or observes it until the window closes. Not supported by Chat apps.\n          enum:\n            - NOTHING\n            - RELOAD\n          type: string\n        openAs:\n          description: How to open a link. Not supported by Chat apps.\n          enum:\n            - FULL_SIZE\n            - OVERLAY\n          type: string\n        url:\n          description: The URL to open.\n          type: string\n      type: object\n    GoogleAppsCardV1Section:\n      description: A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.\n      properties:\n        collapsible:\n          description: Indicates whether this section is collapsible. If a section is collapsible, the description must be given.\n          type: boolean\n        header:\n          description: The header of the section. Formatted text is supported.\n          type: string\n        uncollapsibleWidgetsCount:\n          description: The number of uncollapsible widgets. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.\n          format: int32\n          type: integer\n        widgets:\n          description: A section must contain at least 1 widget.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1Widget\"\n          type: array\n      type: object\n    GoogleAppsCardV1SelectionInput:\n      description: A widget that creates a UI item with options for users to select. For example, a dropdown menu.\n      properties:\n        items:\n          description: An array of the selected items.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1SelectionItem\"\n          type: array\n        label:\n          description: The label displayed ahead of the switch control.\n          type: string\n        name:\n          description: The name of the text input which is used in `formInput`.\n          type: string\n        onChangeAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button.\n        type:\n          description: The type of the selection.\n          enum:\n            - CHECK_BOX\n            - RADIO_BUTTON\n            - SWITCH\n            - DROPDOWN\n          type: string\n      type: object\n    GoogleAppsCardV1SelectionItem:\n      description: A selectable item in the switch control.\n      properties:\n        selected:\n          description: If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.\n          type: boolean\n        text:\n          description: The text to be displayed.\n          type: string\n        value:\n          description: The value associated with this item. The client should use this as a form input value.\n          type: string\n      type: object\n    GoogleAppsCardV1SuggestionItem:\n      description: A suggestion item.\n      properties:\n        text:\n          description: The suggested autocomplete result.\n          type: string\n      type: object\n    GoogleAppsCardV1Suggestions:\n      description: A container wrapping elements necessary for showing suggestion items used in text input autocomplete.\n      properties:\n        items:\n          description: A list of suggestions used for autocomplete recommendations.\n          items:\n            $ref: \"#/components/schemas/GoogleAppsCardV1SuggestionItem\"\n          type: array\n      type: object\n    GoogleAppsCardV1SwitchControl:\n      description: Either a toggle-style switch or a checkbox.\n      properties:\n        controlType:\n          description: The control type, either switch or checkbox.\n          enum:\n            - SWITCH\n            - CHECKBOX\n            - CHECK_BOX\n          type: string\n        name:\n          description: The name of the switch widget that's used in `formInput`.\n          type: string\n        onChangeAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: The action when the switch state is changed.\n        selected:\n          description: If the switch is selected.\n          type: boolean\n        value:\n          description: The value is what is passed back in the callback.\n          type: string\n      type: object\n    GoogleAppsCardV1TextInput:\n      description: A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.\n      properties:\n        autoCompleteAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items.\n        hintText:\n          description: The hint text.\n          type: string\n        initialSuggestions:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Suggestions\"\n          description: The initial suggestions made before any user input.\n        label:\n          description: At least one of label and hintText must be specified.\n          type: string\n        name:\n          description: The name of the text input which is used in `formInput`.\n          type: string\n        onChangeAction:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Action\"\n          description: The onChange action, for example, invoke a function.\n        type:\n          description: The style of the text, for example, a single line or multiple lines.\n          enum:\n            - SINGLE_LINE\n            - MULTIPLE_LINE\n          type: string\n        value:\n          description: The default value when there is no input from the user.\n          type: string\n      type: object\n    GoogleAppsCardV1TextParagraph:\n      description: A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.\n      properties:\n        text:\n          description: The text that's shown in the widget.\n          type: string\n      type: object\n    GoogleAppsCardV1Widget:\n      description: A widget is a UI element that presents texts, images, etc.\n      properties:\n        buttonList:\n          $ref: \"#/components/schemas/GoogleAppsCardV1ButtonList\"\n          description: 'A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```'\n        dateTimePicker:\n          $ref: \"#/components/schemas/GoogleAppsCardV1DateTimePicker\"\n          description: 'Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```'\n        decoratedText:\n          $ref: \"#/components/schemas/GoogleAppsCardV1DecoratedText\"\n          description: 'Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"sasha@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_sasha\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```'\n        divider:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Divider\"\n          description: 'Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```'\n        grid:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Grid\"\n          description: 'Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```'\n        horizontalAlignment:\n          description: The horizontal alignment of this widget.\n          enum:\n            - HORIZONTAL_ALIGNMENT_UNSPECIFIED\n            - START\n            - CENTER\n            - END\n          type: string\n        image:\n          $ref: \"#/components/schemas/GoogleAppsCardV1Image\"\n          description: 'Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/sasha.png\" \"altText\": \"Avatar for Sasha\" } ```'\n        selectionInput:\n          $ref: \"#/components/schemas/GoogleAppsCardV1SelectionInput\"\n          description: 'Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```'\n        textInput:\n          $ref: \"#/components/schemas/GoogleAppsCardV1TextInput\"\n          description: 'Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```'\n        textParagraph:\n          $ref: \"#/components/schemas/GoogleAppsCardV1TextParagraph\"\n          description: 'Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```'\n      type: object\n    Image:\n      description: An image that is specified by a URL and can have an onclick action.\n      properties:\n        aspectRatio:\n          description: The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image.\n          format: double\n          type: number\n        imageUrl:\n          description: The URL of the image.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/OnClick\"\n          description: The onclick action.\n      type: object\n    ImageButton:\n      description: An image button with an onclick action.\n      properties:\n        icon:\n          description: The icon specified by an enum that indices to an icon provided by Chat API.\n          enum:\n            - ICON_UNSPECIFIED\n            - AIRPLANE\n            - BOOKMARK\n            - BUS\n            - CAR\n            - CLOCK\n            - CONFIRMATION_NUMBER_ICON\n            - DOLLAR\n            - DESCRIPTION\n            - EMAIL\n            - EVENT_PERFORMER\n            - EVENT_SEAT\n            - FLIGHT_ARRIVAL\n            - FLIGHT_DEPARTURE\n            - HOTEL\n            - HOTEL_ROOM_TYPE\n            - INVITE\n            - MAP_PIN\n            - MEMBERSHIP\n            - MULTIPLE_PEOPLE\n            - OFFER\n            - PERSON\n            - PHONE\n            - RESTAURANT_ICON\n            - SHOPPING_CART\n            - STAR\n            - STORE\n            - TICKET\n            - TRAIN\n            - VIDEO_CAMERA\n            - VIDEO_PLAY\n          type: string\n        iconUrl:\n          description: The icon specified by a URL.\n          type: string\n        name:\n          description: The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/OnClick\"\n          description: The onclick action.\n      type: object\n    Inputs:\n      description: Types of data inputs for widgets. Users enter data with these inputs.\n      properties:\n        dateInput:\n          $ref: \"#/components/schemas/DateInput\"\n          description: Date input values. Not supported by Chat apps.\n        dateTimeInput:\n          $ref: \"#/components/schemas/DateTimeInput\"\n          description: Date and time input values. Not supported by Chat apps.\n        stringInputs:\n          $ref: \"#/components/schemas/StringInputs\"\n          description: Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.\n        timeInput:\n          $ref: \"#/components/schemas/TimeInput\"\n          description: Time input values. Not supported by Chat apps.\n      type: object\n    KeyValue:\n      description: A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.\n      properties:\n        bottomLabel:\n          description: The text of the bottom label. Formatted text supported.\n          type: string\n        button:\n          $ref: \"#/components/schemas/Button\"\n          description: A button that can be clicked to trigger an action.\n        content:\n          description: The text of the content. Formatted text supported and always required.\n          type: string\n        contentMultiline:\n          description: If the content should be multiline.\n          type: boolean\n        icon:\n          description: An enum value that will be replaced by the Chat API with the corresponding icon image.\n          enum:\n            - ICON_UNSPECIFIED\n            - AIRPLANE\n            - BOOKMARK\n            - BUS\n            - CAR\n            - CLOCK\n            - CONFIRMATION_NUMBER_ICON\n            - DOLLAR\n            - DESCRIPTION\n            - EMAIL\n            - EVENT_PERFORMER\n            - EVENT_SEAT\n            - FLIGHT_ARRIVAL\n            - FLIGHT_DEPARTURE\n            - HOTEL\n            - HOTEL_ROOM_TYPE\n            - INVITE\n            - MAP_PIN\n            - MEMBERSHIP\n            - MULTIPLE_PEOPLE\n            - OFFER\n            - PERSON\n            - PHONE\n            - RESTAURANT_ICON\n            - SHOPPING_CART\n            - STAR\n            - STORE\n            - TICKET\n            - TRAIN\n            - VIDEO_CAMERA\n            - VIDEO_PLAY\n          type: string\n        iconUrl:\n          description: The icon specified by a URL.\n          type: string\n        onClick:\n          $ref: \"#/components/schemas/OnClick\"\n          description: The onclick action. Only the top label, bottom label and content region are clickable.\n        topLabel:\n          description: The text of the top label. Formatted text supported.\n          type: string\n      type: object\n    ListMembershipsResponse:\n      properties:\n        memberships:\n          description: List of memberships in the requested (or first) page.\n          items:\n            $ref: \"#/components/schemas/Membership\"\n          type: array\n        nextPageToken:\n          description: Continuation token to retrieve the next page of results. It will be empty for the last page of results.\n          type: string\n      type: object\n    ListSpacesResponse:\n      properties:\n        nextPageToken:\n          description: Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.\n          type: string\n        spaces:\n          description: List of spaces in the requested (or first) page.\n          items:\n            $ref: \"#/components/schemas/Space\"\n          type: array\n      type: object\n    MatchedUrl:\n      description: A matched url in a Chat message. Chat apps can preview matched URLs. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).\n      properties:\n        url:\n          description: Output only. The url that was matched.\n          readOnly: true\n          type: string\n      type: object\n    Media:\n      description: Media resource.\n      properties:\n        resourceName:\n          description: Name of the media resource.\n          type: string\n      type: object\n    Membership:\n      description: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.\n      properties:\n        createTime:\n          description: Output only. The creation time of the membership, such as when a member joined or was invited to join a space.\n          format: google-datetime\n          readOnly: true\n          type: string\n        member:\n          $ref: \"#/components/schemas/User\"\n          description: \"A Google Chat user or app. Format: `users/{user}` or `users/app` When `users/{user}`, represents a [person](https://developers.google.com/people/api/rest/v1/people) in the People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. When `users/app`, represents a Chat app creating membership for itself.\"\n        name:\n          description: \"Resource name of the membership. Format: spaces/{space}/members/{member}\"\n          type: string\n        state:\n          description: Output only. State of the membership.\n          enum:\n            - MEMBERSHIP_STATE_UNSPECIFIED\n            - JOINED\n            - INVITED\n            - NOT_A_MEMBER\n          readOnly: true\n          type: string\n      type: object\n    Message:\n      description: A message in Google Chat.\n      properties:\n        actionResponse:\n          $ref: \"#/components/schemas/ActionResponse\"\n          description: Input only. Parameters that a Chat app can use to configure how its response is posted.\n        annotations:\n          description: Output only. Annotations associated with the text in this message.\n          items:\n            $ref: \"#/components/schemas/Annotation\"\n          readOnly: true\n          type: array\n        argumentText:\n          description: Plain-text body of the message with all Chat app mentions stripped out.\n          type: string\n        attachment:\n          description: User uploaded attachment.\n          items:\n            $ref: \"#/components/schemas/Attachment\"\n          type: array\n        cards:\n          description: \"Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message.\"\n          items:\n            $ref: \"#/components/schemas/Card\"\n          type: array\n        createTime:\n          description: Output only. The time at which the message was created in Google Chat server.\n          format: google-datetime\n          readOnly: true\n          type: string\n        fallbackText:\n          description: A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).\n          type: string\n        lastUpdateTime:\n          description: Output only. The time at which the message was last updated. If the message was never updated, this field matches `create_time`.\n          format: google-datetime\n          readOnly: true\n          type: string\n        matchedUrl:\n          $ref: \"#/components/schemas/MatchedUrl\"\n          description: Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).\n          readOnly: true\n        name:\n          description: \"Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`\"\n          type: string\n        sender:\n          $ref: \"#/components/schemas/User\"\n          description: Output only. The user who created the message.\n          readOnly: true\n        slashCommand:\n          $ref: \"#/components/schemas/SlashCommand\"\n          description: Output only. Slash command information, if applicable.\n          readOnly: true\n        space:\n          $ref: \"#/components/schemas/Space\"\n          description: The space the message belongs to.\n        text:\n          description: Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip.\n          type: string\n        thread:\n          $ref: \"#/components/schemas/Thread\"\n          description: The thread the message belongs to.\n      type: object\n    OnClick:\n      description: An onclick action (e.g. open a link).\n      properties:\n        action:\n          $ref: \"#/components/schemas/FormAction\"\n          description: A form action will be triggered by this onclick if specified.\n        openLink:\n          $ref: \"#/components/schemas/OpenLink\"\n          description: This onclick triggers an open link action if specified.\n      type: object\n    OpenLink:\n      description: A link that opens a new window.\n      properties:\n        url:\n          description: The URL to open.\n          type: string\n      type: object\n    Section:\n      description: A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).\n      properties:\n        header:\n          description: The header of the section, text formatted supported.\n          type: string\n        widgets:\n          description: A section must contain at least 1 widget.\n          items:\n            $ref: \"#/components/schemas/WidgetMarkup\"\n          type: array\n      type: object\n    SlashCommand:\n      description: A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.\n      properties:\n        commandId:\n          description: The id of the slash command invoked.\n          format: int64\n          type: string\n      type: object\n    SlashCommandMetadata:\n      description: Annotation metadata for slash commands (/).\n      properties:\n        bot:\n          $ref: \"#/components/schemas/User\"\n          description: The Chat app whose command was invoked.\n        commandId:\n          description: The command id of the invoked slash command.\n          format: int64\n          type: string\n        commandName:\n          description: The name of the invoked slash command.\n          type: string\n        triggersDialog:\n          description: Indicating whether the slash command is for a dialog.\n          type: boolean\n        type:\n          description: The type of slash command.\n          enum:\n            - TYPE_UNSPECIFIED\n            - ADD\n            - INVOKE\n          type: string\n      type: object\n    Space:\n      description: A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.\n      properties:\n        displayName:\n          description: The space's display name. For direct messages between humans, this field might be empty.\n          type: string\n        name:\n          description: \"Resource name of the space. Format: spaces/{space}\"\n          type: string\n        singleUserBotDm:\n          description: Output only. Whether the space is a DM between a Chat app and a single human.\n          readOnly: true\n          type: boolean\n        threaded:\n          description: Output only. Whether messages are threaded in this space.\n          readOnly: true\n          type: boolean\n        type:\n          description: \"Output only. Deprecated: Use `single_user_bot_dm` or `space_type` (developer preview) instead. The type of a space.\"\n          enum:\n            - TYPE_UNSPECIFIED\n            - ROOM\n            - DM\n          readOnly: true\n          type: string\n      type: object\n    Status:\n      description: \"The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).\"\n      properties:\n        code:\n          description: The status code, which should be an enum value of google.rpc.Code.\n          format: int32\n          type: integer\n        details:\n          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.\n          items:\n            additionalProperties:\n              description: Properties of the object. Contains field @type with type URL.\n            type: object\n          type: array\n        message:\n          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n          type: string\n      type: object\n    StringInputs:\n      description: Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.\n      properties:\n        value:\n          description: An array of strings entered by the user.\n          items:\n            type: string\n          type: array\n      type: object\n    TextButton:\n      description: A button with text and onclick action.\n      properties:\n        onClick:\n          $ref: \"#/components/schemas/OnClick\"\n          description: The onclick action of the button.\n        text:\n          description: The text of the button.\n          type: string\n      type: object\n    TextParagraph:\n      description: A paragraph of text. Formatted text supported.\n      properties:\n        text:\n          type: string\n      type: object\n    Thread:\n      description: A thread in Google Chat.\n      properties:\n        name:\n          description: 'Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAAAAAAAA/threads/TTTTTTTTTTT'\n          type: string\n      type: object\n    TimeInput:\n      description: Time input values. Not supported by Chat apps.\n      properties:\n        hours:\n          description: The hour on a 24-hour clock.\n          format: int32\n          type: integer\n        minutes:\n          description: The number of minutes past the hour. Valid values are 0 to 59.\n          format: int32\n          type: integer\n      type: object\n    TimeZone:\n      description: The timezone ID and offset from Coordinated Universal Time (UTC). Not supported by Chat apps.\n      properties:\n        id:\n          description: The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as \"America/Toronto\".\n          type: string\n        offset:\n          description: The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).\n          format: int32\n          type: integer\n      type: object\n    User:\n      description: A user in Google Chat.\n      properties:\n        displayName:\n          description: Output only. The user's display name.\n          readOnly: true\n          type: string\n        domainId:\n          description: Unique identifier of the user's Google Workspace domain.\n          type: string\n        isAnonymous:\n          description: Output only. When `true`, the user is deleted or their profile is not visible.\n          readOnly: true\n          type: boolean\n        name:\n          description: \"Resource name for a Google Chat user. Represents a [person](https://developers.google.com/people/api/rest/v1/people#Person) in the People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. Formatted as: `users/{user}`\"\n          type: string\n        type:\n          description: User type.\n          enum:\n            - TYPE_UNSPECIFIED\n            - HUMAN\n            - BOT\n          type: string\n      type: object\n    UserMentionMetadata:\n      description: Annotation metadata for user mentions (@).\n      properties:\n        type:\n          description: The type of user mention.\n          enum:\n            - TYPE_UNSPECIFIED\n            - ADD\n            - MENTION\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n          description: The user mentioned.\n      type: object\n    WidgetMarkup:\n      description: A widget is a UI element that presents texts, images, etc.\n      properties:\n        buttons:\n          description: A list of buttons. Buttons is also oneof data and only one of these fields should be set.\n          items:\n            $ref: \"#/components/schemas/Button\"\n          type: array\n        image:\n          $ref: \"#/components/schemas/Image\"\n          description: Display an image in this widget.\n        keyValue:\n          $ref: \"#/components/schemas/KeyValue\"\n          description: Display a key value item in this widget.\n        textParagraph:\n          $ref: \"#/components/schemas/TextParagraph\"\n          description: Display a text paragraph in this widget.\n      type: object\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/googleapis.com/chat/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/googleapis.com/chat/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}