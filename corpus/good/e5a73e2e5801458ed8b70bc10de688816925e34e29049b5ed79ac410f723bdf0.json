{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "AuthorizationServer.yaml",
			"size": 0,
			"path": "providers/src/okta/v0.1.0/services/AuthorizationServer.yaml",
			"byteSize": 65304,
			"content": "components:\n  schemas:\n    AppAndInstanceConditionEvaluatorAppOrInstance:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        type:\n          enum:\n          - APP_TYPE\n          - APP\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    AppAndInstancePolicyRuleCondition:\n      properties:\n        exclude:\n          items:\n            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'\n          type: array\n        include:\n          items:\n            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    AppInstancePolicyRuleCondition:\n      properties:\n        exclude:\n          items:\n            type: string\n          type: array\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    ApplicationCredentialsSigningUse:\n      enum:\n      - sig\n      type: string\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServer:\n      properties:\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        audiences:\n          items:\n            type: string\n          type: array\n        created:\n          format: date-time\n          readOnly: true\n          type: string\n        credentials:\n          $ref: '#/components/schemas/AuthorizationServerCredentials'\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        issuer:\n          type: string\n        issuerMode:\n          enum:\n          - ORG_URL\n          - CUSTOM_URL\n          type: string\n        lastUpdated:\n          format: date-time\n          readOnly: true\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - ACTIVE\n          - INACTIVE\n          type: string\n      type: object\n      x-okta-crud:\n      - alias: create\n        arguments:\n        - dest: authorizationServer\n          self: true\n        operationId: createAuthorizationServer\n      - alias: read\n        arguments: []\n        operationId: getAuthorizationServer\n      - alias: update\n        arguments:\n        - dest: authServerId\n          src: id\n        - dest: authorizationServer\n          self: true\n        operationId: updateAuthorizationServer\n      - alias: delete\n        arguments:\n        - dest: authServerId\n          src: id\n        - dest: authorizationServer\n          self: true\n        operationId: deleteAuthorizationServer\n      x-okta-operations:\n      - alias: listOAuth2Claims\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listOAuth2Claims\n      - alias: createOAuth2Claim\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: createOAuth2Claim\n      - alias: deleteOAuth2Claim\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: deleteOAuth2Claim\n      - alias: getOAuth2Claim\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: getOAuth2Claim\n      - alias: updateOAuth2Claim\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: updateOAuth2Claim\n      - alias: listOAuth2Clients\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listOAuth2ClientsForAuthorizationServer\n      - alias: revokeRefreshTokensForClient\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: revokeRefreshTokensForAuthorizationServerAndClient\n      - alias: listRefreshTokensForClient\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listRefreshTokensForAuthorizationServerAndClient\n      - alias: getRefreshTokenForClient\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: getRefreshTokenForAuthorizationServerAndClient\n      - alias: revokeRefreshTokenForClient\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: revokeRefreshTokenForAuthorizationServerAndClient\n      - alias: listKeys\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listAuthorizationServerKeys\n      - alias: rotateKeys\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: rotateAuthorizationServerKeys\n      - alias: activate\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: activateAuthorizationServer\n      - alias: deactivate\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: deactivateAuthorizationServer\n      - alias: listPolicies\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listAuthorizationServerPolicies\n      - alias: createPolicy\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: createAuthorizationServerPolicy\n      - alias: deletePolicy\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: deleteAuthorizationServerPolicy\n      - alias: getPolicy\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: getAuthorizationServerPolicy\n      - alias: updatePolicy\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: updateAuthorizationServerPolicy\n      - alias: listOAuth2Scopes\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: listOAuth2Scopes\n      - alias: createOAuth2Scope\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: createOAuth2Scope\n      - alias: deleteOAuth2Scope\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: deleteOAuth2Scope\n      - alias: getOAuth2Scope\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: getOAuth2Scope\n      - alias: updateOAuth2Scope\n        arguments:\n        - dest: authServerId\n          src: id\n        operationId: updateOAuth2Scope\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServerCredentials:\n      properties:\n        signing:\n          $ref: '#/components/schemas/AuthorizationServerCredentialsSigningConfig'\n      type: object\n      x-okta-tags:\n      - Application\n    AuthorizationServerCredentialsRotationMode:\n      enum:\n      - AUTO\n      - MANUAL\n      type: string\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServerCredentialsSigningConfig:\n      properties:\n        kid:\n          type: string\n        lastRotated:\n          format: date-time\n          readOnly: true\n          type: string\n        nextRotation:\n          format: date-time\n          readOnly: true\n          type: string\n        rotationMode:\n          $ref: '#/components/schemas/AuthorizationServerCredentialsRotationMode'\n        use:\n          $ref: '#/components/schemas/AuthorizationServerCredentialsUse'\n      type: object\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServerCredentialsUse:\n      enum:\n      - sig\n      type: string\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServerPolicy:\n      properties:\n        _embedded:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        conditions:\n          $ref: '#/components/schemas/PolicyRuleConditions'\n        created:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        lastUpdated:\n          format: date-time\n          readOnly: true\n          type: string\n        name:\n          type: string\n        priority:\n          type: integer\n        status:\n          enum:\n          - ACTIVE\n          - INACTIVE\n          type: string\n        system:\n          type: boolean\n        type:\n          $ref: '#/components/schemas/PolicyType'\n      type: object\n      x-okta-crud:\n      - alias: read\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: getAuthorizationServerPolicy\n      - alias: update\n        arguments:\n        - dest: policyId\n          src: id\n        - dest: policy\n          self: true\n        operationId: updateAuthorizationServerPolicy\n      - alias: delete\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: deleteAuthorizationServerPolicy\n      x-okta-operations:\n      - alias: listPolicyRules\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: listAuthorizationServerPolicyRules\n      - alias: createPolicyRule\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: createAuthorizationServerPolicyRule\n      - alias: getPolicyRule\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: getAuthorizationServerPolicyRule\n      - alias: deletePolicyRule\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: deleteAuthorizationServerPolicyRule\n      - alias: activate\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: activateAuthorizationServerPolicy\n      - alias: deactivate\n        arguments:\n        - dest: policyId\n          src: id\n        operationId: deactivateAuthorizationServerPolicy\n      x-okta-tags:\n      - AuthorizationServer\n    AuthorizationServerPolicyRule:\n      properties:\n        actions:\n          $ref: '#/components/schemas/AuthorizationServerPolicyRuleActions'\n        conditions:\n          $ref: '#/components/schemas/AuthorizationServerPolicyRuleConditions'\n        created:\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        lastUpdated:\n          format: date-time\n          readOnly: true\n          type: string\n        name:\n          type: string\n        priority:\n          type: integer\n        status:\n          default: ACTIVE\n          enum:\n          - ACTIVE\n          - INACTIVE\n          type: string\n        system:\n          default: false\n          type: boolean\n        type:\n          enum:\n          - RESOURCE_ACCESS\n          type: string\n      type: object\n      x-okta-crud:\n      - alias: update\n        arguments:\n        - dest: ruleId\n          src: id\n        - dest: policyRule\n          self: true\n        - dest: policyId\n          parentSrc: id\n        operationId: updateAuthorizationServerPolicyRule\n      - alias: delete\n        arguments:\n        - dest: ruleId\n          src: id\n        - dest: policyId\n          parentSrc: policyId\n        operationId: deleteAuthorizationServerPolicyRule\n      x-okta-operations:\n      - alias: activate\n        arguments:\n        - dest: ruleId\n          src: id\n        - dest: policyId\n          parentSrc: policyId\n        operationId: activateAuthorizationServerPolicyRule\n      - alias: deactivate\n        arguments:\n        - dest: ruleId\n          src: id\n        - dest: policyId\n          parentSrc: policyId\n        operationId: deactivateAuthorizationServerPolicyRule\n      x-okta-tags:\n      - AuthorizationServerPolicy\n    AuthorizationServerPolicyRuleActions:\n      properties:\n        token:\n          $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleAction'\n      type: object\n      x-okta-tags:\n      - AuthorizationServerPolicy\n    AuthorizationServerPolicyRuleConditions:\n      properties:\n        clients:\n          $ref: '#/components/schemas/ClientPolicyCondition'\n        grantTypes:\n          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'\n        people:\n          $ref: '#/components/schemas/PolicyPeopleCondition'\n        scopes:\n          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'\n      type: object\n      x-okta-tags:\n      - AuthorizationServerPolicy\n    BeforeScheduledActionPolicyRuleCondition:\n      properties:\n        duration:\n          $ref: '#/components/schemas/Duration'\n        lifecycleAction:\n          $ref: '#/components/schemas/ScheduledUserLifecycleAction'\n      type: object\n      x-okta-tags:\n      - Policy\n    ClientPolicyCondition:\n      properties:\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    ContextPolicyRuleCondition:\n      properties:\n        expression:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    DevicePolicyRuleCondition:\n      properties:\n        migrated:\n          type: boolean\n        platform:\n          $ref: '#/components/schemas/DevicePolicyRuleConditionPlatform'\n        rooted:\n          type: boolean\n        trustLevel:\n          enum:\n          - ANY\n          - TRUSTED\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    DevicePolicyRuleConditionPlatform:\n      properties:\n        supportedMDMFrameworks:\n          items:\n            enum:\n            - AFW\n            - SAFE\n            - NATIVE\n            type: string\n          type: array\n        types:\n          items:\n            enum:\n            - IOS\n            - ANDROID\n            - OSX\n            - WINDOWS\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    Duration:\n      properties:\n        number:\n          type: integer\n        unit:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    GrantTypePolicyRuleCondition:\n      properties:\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    GroupCondition:\n      properties:\n        exclude:\n          items:\n            type: string\n          type: array\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    GroupPolicyRuleCondition:\n      properties:\n        exclude:\n          items:\n            type: string\n          type: array\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    IdentityProviderPolicyRuleCondition:\n      properties:\n        idpIds:\n          items:\n            type: string\n          type: array\n        provider:\n          enum:\n          - ANY\n          - OKTA\n          - SPECIFIC_IDP\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    InactivityPolicyRuleCondition:\n      properties:\n        number:\n          type: integer\n        unit:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    JsonWebKey:\n      properties:\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        alg:\n          type: string\n        created:\n          format: date-time\n          type: string\n        e:\n          type: string\n        expiresAt:\n          format: date-time\n          type: string\n        key_ops:\n          items:\n            type: string\n          type: array\n        kid:\n          type: string\n        kty:\n          type: string\n        lastUpdated:\n          format: date-time\n          type: string\n        n:\n          type: string\n        status:\n          type: string\n        use:\n          type: string\n        x5c:\n          items:\n            type: string\n          type: array\n        x5t:\n          type: string\n        x5t#S256:\n          type: string\n        x5u:\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    JwkUse:\n      properties:\n        use:\n          enum:\n          - sig\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    LifecycleExpirationPolicyRuleCondition:\n      properties:\n        lifecycleStatus:\n          type: string\n        number:\n          type: integer\n        unit:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    MDMEnrollmentPolicyRuleCondition:\n      properties:\n        blockNonSafeAndroid:\n          type: boolean\n        enrollment:\n          enum:\n          - OMM\n          - ANY_OR_NONE\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    OAuth2Actor:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        type:\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2Claim:\n      properties:\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        alwaysIncludeInToken:\n          type: boolean\n        claimType:\n          enum:\n          - IDENTITY\n          - RESOURCE\n          type: string\n        conditions:\n          $ref: '#/components/schemas/OAuth2ClaimConditions'\n        group_filter_type:\n          enum:\n          - STARTS_WITH\n          - EQUALS\n          - CONTAINS\n          - REGEX\n          type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        status:\n          enum:\n          - ACTIVE\n          - INACTIVE\n          type: string\n        system:\n          type: boolean\n        value:\n          type: string\n        valueType:\n          enum:\n          - EXPRESSION\n          - GROUPS\n          - SYSTEM\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2ClaimConditions:\n      properties:\n        scopes:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2Client:\n      properties:\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        client_id:\n          readOnly: true\n          type: string\n        client_name:\n          readOnly: true\n          type: string\n        client_uri:\n          readOnly: true\n          type: string\n        logo_uri:\n          readOnly: true\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2RefreshToken:\n      properties:\n        _embedded:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        _links:\n          additionalProperties:\n            properties: {}\n            type: object\n          readOnly: true\n          type: object\n        clientId:\n          type: string\n        created:\n          format: date-time\n          readOnly: true\n          type: string\n        createdBy:\n          $ref: '#/components/schemas/OAuth2Actor'\n        expiresAt:\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: string\n        issuer:\n          type: string\n        lastUpdated:\n          format: date-time\n          readOnly: true\n          type: string\n        scopes:\n          items:\n            type: string\n          type: array\n        status:\n          enum:\n          - ACTIVE\n          - REVOKED\n          type: string\n        userId:\n          type: string\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2Scope:\n      properties:\n        consent:\n          enum:\n          - REQUIRED\n          - IMPLICIT\n          - ADMIN\n          type: string\n        default:\n          type: boolean\n        description:\n          type: string\n        displayName:\n          type: string\n        id:\n          readOnly: true\n          type: string\n        metadataPublish:\n          enum:\n          - ALL_CLIENTS\n          - NO_CLIENTS\n          type: string\n        name:\n          type: string\n        system:\n          type: boolean\n      type: object\n      x-okta-tags:\n      - Application\n    OAuth2ScopesMediationPolicyRuleCondition:\n      properties:\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Application\n    PasswordExpirationPolicyRuleCondition:\n      properties:\n        number:\n          type: integer\n        unit:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    PasswordPolicyAuthenticationProviderCondition:\n      properties:\n        include:\n          items:\n            type: string\n          type: array\n        provider:\n          enum:\n          - ACTIVE_DIRECTORY\n          - ANY\n          - LDAP\n          - OKTA\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    PlatformConditionEvaluatorPlatform:\n      properties:\n        os:\n          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystem'\n        type:\n          enum:\n          - DESKTOP\n          - MOBILE\n          - OTHER\n          - ANY\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    PlatformConditionEvaluatorPlatformOperatingSystem:\n      properties:\n        expression:\n          type: string\n        type:\n          enum:\n          - ANDROID\n          - IOS\n          - WINDOWS\n          - OSX\n          - OTHER\n          - ANY\n          type: string\n        version:\n          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystemVersion'\n      type: object\n      x-okta-tags:\n      - Policy\n    PlatformConditionEvaluatorPlatformOperatingSystemVersion:\n      properties:\n        matchType:\n          enum:\n          - EXPRESSION\n          - SEMVER\n          type: string\n        value:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    PlatformPolicyRuleCondition:\n      properties:\n        exclude:\n          items:\n            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'\n          type: array\n        include:\n          items:\n            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    PolicyNetworkCondition:\n      properties:\n        connection:\n          enum:\n          - ANYWHERE\n          - ZONE\n          type: string\n        exclude:\n          items:\n            type: string\n          type: array\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    PolicyPeopleCondition:\n      properties:\n        groups:\n          $ref: '#/components/schemas/GroupCondition'\n        users:\n          $ref: '#/components/schemas/UserCondition'\n      type: object\n      x-okta-tags:\n      - Policy\n    PolicyRuleAuthContextCondition:\n      properties:\n        authType:\n          enum:\n          - ANY\n          - RADIUS\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    PolicyRuleConditions:\n      properties:\n        app:\n          $ref: '#/components/schemas/AppAndInstancePolicyRuleCondition'\n        apps:\n          $ref: '#/components/schemas/AppInstancePolicyRuleCondition'\n        authContext:\n          $ref: '#/components/schemas/PolicyRuleAuthContextCondition'\n        authProvider:\n          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderCondition'\n        beforeScheduledAction:\n          $ref: '#/components/schemas/BeforeScheduledActionPolicyRuleCondition'\n        clients:\n          $ref: '#/components/schemas/ClientPolicyCondition'\n        context:\n          $ref: '#/components/schemas/ContextPolicyRuleCondition'\n        device:\n          $ref: '#/components/schemas/DevicePolicyRuleCondition'\n        grantTypes:\n          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'\n        groups:\n          $ref: '#/components/schemas/GroupPolicyRuleCondition'\n        identityProvider:\n          $ref: '#/components/schemas/IdentityProviderPolicyRuleCondition'\n        mdmEnrollment:\n          $ref: '#/components/schemas/MDMEnrollmentPolicyRuleCondition'\n        network:\n          $ref: '#/components/schemas/PolicyNetworkCondition'\n        people:\n          $ref: '#/components/schemas/PolicyPeopleCondition'\n        platform:\n          $ref: '#/components/schemas/PlatformPolicyRuleCondition'\n        risk:\n          $ref: '#/components/schemas/RiskPolicyRuleCondition'\n        riskScore:\n          $ref: '#/components/schemas/RiskScorePolicyRuleCondition'\n        scopes:\n          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'\n        userIdentifier:\n          $ref: '#/components/schemas/UserIdentifierPolicyRuleCondition'\n        userStatus:\n          $ref: '#/components/schemas/UserStatusPolicyRuleCondition'\n        users:\n          $ref: '#/components/schemas/UserPolicyRuleCondition'\n      type: object\n      x-okta-tags:\n      - Policy\n    PolicyType:\n      enum:\n      - OAUTH_AUTHORIZATION_POLICY\n      - OKTA_SIGN_ON\n      - PASSWORD\n      - IDP_DISCOVERY\n      type: string\n      x-okta-tags:\n      - Policy\n    RiskPolicyRuleCondition:\n      properties:\n        behaviors:\n          items:\n            type: string\n          type: array\n          uniqueItems: true\n      type: object\n      x-okta-tags:\n      - Policy\n    RiskScorePolicyRuleCondition:\n      properties:\n        level:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    ScheduledUserLifecycleAction:\n      properties:\n        status:\n          enum:\n          - ACTIVE\n          - INACTIVE\n          - PENDING\n          - DELETED\n          - EXPIRED_PASSWORD\n          - ACTIVATING\n          - SUSPENDED\n          - DELETING\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    TokenAuthorizationServerPolicyRuleAction:\n      properties:\n        accessTokenLifetimeMinutes:\n          type: integer\n        inlineHook:\n          $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleActionInlineHook'\n        refreshTokenLifetimeMinutes:\n          type: integer\n        refreshTokenWindowMinutes:\n          type: integer\n      type: object\n      x-okta-tags:\n      - AuthorizationServerPolicy\n    TokenAuthorizationServerPolicyRuleActionInlineHook:\n      properties:\n        id:\n          type: string\n      type: object\n      x-okta-tags:\n      - AuthorizationServerPolicy\n    UserCondition:\n      properties:\n        exclude:\n          items:\n            type: string\n          type: array\n        include:\n          items:\n            type: string\n          type: array\n      type: object\n      x-okta-tags:\n      - Policy\n    UserIdentifierConditionEvaluatorPattern:\n      properties:\n        matchType:\n          enum:\n          - SUFFIX\n          - EXPRESSION\n          - STARTS_WITH\n          - EQUALS\n          - CONTAINS\n          type: string\n        value:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    UserIdentifierPolicyRuleCondition:\n      properties:\n        attribute:\n          type: string\n        patterns:\n          items:\n            $ref: '#/components/schemas/UserIdentifierConditionEvaluatorPattern'\n          type: array\n        type:\n          enum:\n          - IDENTIFIER\n          - ATTRIBUTE\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    UserLifecycleAttributePolicyRuleCondition:\n      properties:\n        attributeName:\n          type: string\n        matchingValue:\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n    UserPolicyRuleCondition:\n      properties:\n        exclude:\n          items:\n            type: string\n          type: array\n        inactivity:\n          $ref: '#/components/schemas/InactivityPolicyRuleCondition'\n        include:\n          items:\n            type: string\n          type: array\n        lifecycleExpiration:\n          $ref: '#/components/schemas/LifecycleExpirationPolicyRuleCondition'\n        passwordExpiration:\n          $ref: '#/components/schemas/PasswordExpirationPolicyRuleCondition'\n        userLifecycleAttribute:\n          $ref: '#/components/schemas/UserLifecycleAttributePolicyRuleCondition'\n      type: object\n      x-okta-tags:\n      - Policy\n    UserStatusPolicyRuleCondition:\n      properties:\n        value:\n          enum:\n          - ACTIVE\n          - INACTIVE\n          - PENDING\n          - DELETED\n          - EXPIRED_PASSWORD\n          - ACTIVATING\n          - SUSPENDED\n          - DELETING\n          type: string\n      type: object\n      x-okta-tags:\n      - Policy\n  securitySchemes:\n    api_token:\n      description: SSWS {API Token}\n      in: header\n      name: Authorization\n      type: apiKey\n  x-stackQL-resources:\n    authorizationservers:\n      id: okta.authorizationserver.authorizationservers\n      methods:\n        activate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1lifecycle~1activate/POST'\n          response:\n            openAPIDocKey: '200'\n        deactivate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1lifecycle~1deactivate/POST'\n          response:\n            openAPIDocKey: '200'\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/PUT'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: authorizationservers\n      title: authorizationservers\n    claims:\n      id: okta.authorizationserver.claims\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/PUT'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: claims\n      title: claims\n    clients:\n      id: okta.authorizationserver.clients\n      methods:\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: clients\n      title: clients\n    keys:\n      id: okta.authorizationserver.keys\n      methods:\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1credentials~1keys/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        rotate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1credentials~1lifecycle~1keyRotate/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: keys\n      title: keys\n    policies:\n      id: okta.authorizationserver.policies\n      methods:\n        activate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1lifecycle~1activate/POST'\n          response:\n            openAPIDocKey: '200'\n        deactivate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1lifecycle~1deactivate/POST'\n          response:\n            openAPIDocKey: '200'\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/PUT'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: policies\n      title: policies\n    rules:\n      id: okta.authorizationserver.rules\n      methods:\n        activate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}~1lifecycle~1activate/POST'\n          response:\n            openAPIDocKey: '200'\n        deactivate:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}~1lifecycle~1deactivate/POST'\n          response:\n            openAPIDocKey: '200'\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/PUT'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: rules\n      title: rules\n    scopes:\n      id: okta.authorizationserver.scopes\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes/POST'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/PUT'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: scopes\n      title: scopes\n    tokens:\n      id: okta.authorizationserver.tokens\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens~1{tokenId}/DELETE'\n          response:\n            openAPIDocKey: '204'\n        deleteall:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens/DELETE'\n          response:\n            openAPIDocKey: '204'\n        get:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens~1{tokenId}/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens/GET'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: tokens\n      title: tokens\nexternalDocs:\n  description: Find more info here\n  url: https://developer.okta.com/docs/api/getting_started/design_principles.html\ninfo:\n  contact:\n    email: devex-public@okta.com\n    name: Okta Developer Team\n    url: https://developer.okta.com/\n  description: Allows customers to easily access the Okta API\n  license:\n    name: Apache-2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://developer.okta.com/terms/\n  title: Okta API\n  version: 2.8.0\nopenapi: 3.0.1\npaths:\n  /api/v1/authorizationServers:\n    get:\n      description: Success\n      operationId: listAuthorizationServers\n      parameters:\n      - in: query\n        name: q\n        schema:\n          type: string\n      - in: query\n        name: limit\n        schema:\n          type: string\n      - in: query\n        name: after\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/AuthorizationServer'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    post:\n      description: Success\n      operationId: createAuthorizationServer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServer'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServer'\n          description: Success\n        '201':\n          content: {}\n          description: Created\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: authorizationServer\n  /api/v1/authorizationServers/{authServerId}:\n    delete:\n      description: Success\n      operationId: deleteAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: getAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServer'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    put:\n      description: Success\n      operationId: updateAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServer'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServer'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: authorizationServer\n  /api/v1/authorizationServers/{authServerId}/claims:\n    get:\n      description: Success\n      operationId: listOAuth2Claims\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OAuth2Claim'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    post:\n      description: Success\n      operationId: createOAuth2Claim\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OAuth2Claim'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Claim'\n          description: Created\n        '201':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: oAuth2Claim\n  /api/v1/authorizationServers/{authServerId}/claims/{claimId}:\n    delete:\n      description: Success\n      operationId: deleteOAuth2Claim\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: claimId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: getOAuth2Claim\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: claimId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Claim'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    put:\n      description: Success\n      operationId: updateOAuth2Claim\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: claimId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OAuth2Claim'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Claim'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: oAuth2Claim\n  /api/v1/authorizationServers/{authServerId}/clients:\n    get:\n      description: Success\n      operationId: listOAuth2ClientsForAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OAuth2Client'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens:\n    delete:\n      description: Success\n      operationId: revokeRefreshTokensForAuthorizationServerAndClient\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: listRefreshTokensForAuthorizationServerAndClient\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: expand\n        schema:\n          type: string\n      - in: query\n        name: after\n        schema:\n          type: string\n      - in: query\n        name: limit\n        schema:\n          default: -1\n          format: int32\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OAuth2RefreshToken'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}:\n    delete:\n      description: Success\n      operationId: revokeRefreshTokenForAuthorizationServerAndClient\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: tokenId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: getRefreshTokenForAuthorizationServerAndClient\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: tokenId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: expand\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2RefreshToken'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/credentials/keys:\n    get:\n      description: Success\n      operationId: listAuthorizationServerKeys\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/JsonWebKey'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate:\n    post:\n      description: Success\n      operationId: rotateAuthorizationServerKeys\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JwkUse'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/JsonWebKey'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: use\n  /api/v1/authorizationServers/{authServerId}/lifecycle/activate:\n    post:\n      description: Success\n      operationId: activateAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/lifecycle/deactivate:\n    post:\n      description: Success\n      operationId: deactivateAuthorizationServer\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/policies:\n    get:\n      description: Success\n      operationId: listAuthorizationServerPolicies\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/AuthorizationServerPolicy'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    post:\n      description: Success\n      operationId: createAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServerPolicy'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicy'\n          description: Success\n        '201':\n          content: {}\n          description: Created\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: policy\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}:\n    delete:\n      description: Success\n      operationId: deleteAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: getAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicy'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    put:\n      description: Success\n      operationId: updateAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServerPolicy'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicy'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: policy\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate:\n    post:\n      description: Activate Authorization Server Policy\n      operationId: activateAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate:\n    post:\n      description: Deactivate Authorization Server Policy\n      operationId: deactivateAuthorizationServerPolicy\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules:\n    get:\n      description: Enumerates all policy rules for the specified Custom Authorization\n        Server and Policy.\n      operationId: listAuthorizationServerPolicyRules\n      parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    post:\n      description: Creates a policy rule for the specified Custom Authorization Server\n        and Policy.\n      operationId: createAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: policyRule\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}:\n    delete:\n      description: Deletes a Policy Rule defined in the specified Custom Authorization\n        Server and Policy.\n      operationId: deleteAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ruleId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Returns a Policy Rule by ID that is defined in the specified Custom\n        Authorization Server and Policy.\n      operationId: getAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ruleId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    put:\n      description: Updates the configuration of the Policy Rule defined in the specified\n        Custom Authorization Server and Policy.\n      operationId: updateAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ruleId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthorizationServerPolicyRule'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: policyRule\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate:\n    post:\n      description: Activate Authorization Server Policy Rule\n      operationId: activateAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ruleId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:\n    post:\n      description: Deactivate Authorization Server Policy Rule\n      operationId: deactivateAuthorizationServerPolicyRule\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ruleId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n  /api/v1/authorizationServers/{authServerId}/scopes:\n    get:\n      description: Success\n      operationId: listOAuth2Scopes\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: q\n        schema:\n          type: string\n      - in: query\n        name: filter\n        schema:\n          type: string\n      - in: query\n        name: cursor\n        schema:\n          type: string\n      - in: query\n        name: limit\n        schema:\n          default: -1\n          format: int32\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/OAuth2Scope'\n                type: array\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    post:\n      description: Success\n      operationId: createOAuth2Scope\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OAuth2Scope'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Scope'\n          description: Success\n        '201':\n          content: {}\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: oAuth2Scope\n  /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}:\n    delete:\n      description: Success\n      operationId: deleteOAuth2Scope\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: scopeId\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          content: {}\n          description: No Content\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    get:\n      description: Success\n      operationId: getOAuth2Scope\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: scopeId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Scope'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n    put:\n      description: Success\n      operationId: updateOAuth2Scope\n      parameters:\n      - in: path\n        name: authServerId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: scopeId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OAuth2Scope'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Scope'\n          description: Success\n      security:\n      - api_token: []\n      tags:\n      - AuthorizationServer\n      x-codegen-request-body-name: oAuth2Scope\nservers:\n- url: https://{subdomain}.okta.com/\n  variables:\n    subdomain:\n      default: my-domain\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/okta/v0.1.0/services/AuthorizationServer.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/okta/v0.1.0/services/AuthorizationServer.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}