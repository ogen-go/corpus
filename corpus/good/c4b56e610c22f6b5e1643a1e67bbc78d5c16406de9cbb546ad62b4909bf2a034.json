{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/usdot-fhwa-OPS/V2X-Hub"
		},
		"file": {
			"name": "port-drayage-webservice.yml",
			"size": 0,
			"path": "tools/port-drayage-webservice/src/main/resources/port-drayage-webservice.yml",
			"byteSize": 14783,
			"content": "openapi: 3.0.0\ninfo:\n  title: Port Drayage Web Service.\n  description: Web Service for Loading/Unloading/Inspection interactions for Port Drayage Operations. \n  version: \"1.0\"\nservers:\n  - url: http://127.0.0.1:8090\n    description: Unsecured hosting for development\n  - url: https://127.0.0.1:8443\n    description: Secured hosting for deployment\npaths:\n  /uiaction/reset:\n    post:\n      summary: Clear Web Service Actions\n      description:\n        Request will clear all actions in InspectionActions, LoadingActions, and UnloadingActions.\n      responses:\n        \"201\":\n          description: Created\n  /uiaction/area/{area}:\n    post:\n      parameters:\n        - in: path\n          name: area\n          schema:\n            type: string\n          required: true\n          description: Area Enumeration indicating where web service is deployed.\n      summary: Select Area Of Operations.\n      description: Indicates where the web service is deployed. Possible valid area of operations include PORT_AREA and STAGING_AREA\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Invalid Request\n\n  /loading:\n    post:\n      summary: Request a container is loaded on to freight vehicle.\n      description:\n        Provide ContainerRequest JSON to request a container with a given id be loaded on a vehicle with a given id.\\\n        Also requires an action id to uniquely identify the requested action. If an action already exists for a given action id\\\n        request will be discarded as duplicate and result in 400 response.\n      requestBody:\n        description: Request contains container ID, Vehicle ID and an Action ID\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ContainerRequest\"\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /loading/pending:\n    get:\n      summary: List of all pending loading actions.\n      description:\n        Provides a list of ContainerActionStatus JSON objects describing the loading actions waiting to be started.\\\n        Any action requested while there is a current action in progress will be added to this list. Actions in this list will\\\n        replace the current action after it is completed in a first-in first-out order.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActionStatusList\"\n  /loading/start/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Start a loading action.\n      description:\n        Will attempt to start current loading action. This REST endpoint is only intended for UI form submission. Will\\\n        be triggered on UI interaction to indicate a loading action has started. Will return 400 if provided action id is not \\\n        current action.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /loading/complete/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Complete a loading action.\n      description:\n        Will attempt to complete current loading action. This REST endpoint is only intended for UI form submission. Will\\\n        be triggered on UI interaction to indicate a loading action has been completed. Will return 400 if provided action id is not\\\n        current action.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /loading/{action_id}:\n    get:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Returns action with given ID\n      description: Returns action with given ID. If none is found returns 400. Intended for polling the status of a request action.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerActionStatus\"\n        \"400\":\n          description: Bad Request\n  /unloading:\n    post:\n      summary: Request a container is unloaded on to freight Vehicle.\n      description:\n        Provide ContainerRequest JSON to request a container with a given id be unloaded on a vehicle with a given id.\\\n        Also requires an action id to uniquely identify the requested action. If an action already exists for a given action id\\\n        request will be discarded as duplicate and result in 400 response.\n      requestBody:\n        description: Request contains container ID, Vehicle ID and an Action ID\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ContainerRequest\"\n      responses:\n        \"201\":\n          description: Created\n  /unloading/pending:\n    get:\n      summary: List of all pending unloading actions and status.\n      description:\n        Provides a list of ContainerActionStatus JSON describing the unloading actions waiting to be started.\\\n        Any action requested while there is a current action in progress will be added to this list. Actions in this list will\\\n        replace the current action after it is completed in a first-in first-out order.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActionStatusList\"\n  /unloading/start/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Start an unloading action.\n      description:\n        Will attempt to start current unloading action. This REST endpoint is only intended for UI form submission. Will\\\n        be triggered on UI interaction to indicate a unloading action has started. Will return 400 if provided action id is not current\\\n        action.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /unloading/complete/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Complete an unloading action.\n      description:\n        Will attempt to complete current unloading action. This REST endpoint is only intended for UI form submission. Will\\\n        be triggered on UI interaction to indicate an unloading action has been completed. Will return 400 if provided action id is not\\\n        current action.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /unloading/{action_id}:\n    get:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Returns action with given ID\n      description: Returns action with given ID. If none is found returns 400. Intended for polling the status of a request action.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContainerActionStatus\"\n        \"400\":\n          description: Bad Request\n  /inspection:\n    post:\n      summary: Request a container is inspected on to Freight Vehicle.\n      description:\n        Provide InspectionRequest JSON to request a container with a given id be inspected on a vehicle with a given id.\\\n        Also requires an action id to uniquely identify the requested action. If an action already exists for a given action id\\\n        request will be discarded as duplicate and result in 400 response.\n      requestBody:\n        description: Request contains container ID and Vehicle ID\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/InspectionRequest\"\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /inspection/holding/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Vehicle has arrive at Holding area an is waiting on inspection.\n      description:\n        After being instructed to proceed to holding area and navigating to holding area, vehicle will request further inspection at holding\\\n        area. This request will be sent from the PortDrayage V2X-Hub Plugin after receiving a vehicles arrival message at the holding area.\\\n        Will return 400 if not current action or status is not PROCEED_TO_HOLDING and discard request.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /inspection/pending:\n    get:\n      summary: List of all pending inspection actions and status.\n      description:\n        Provides a list of InspectionStatus JSON objects describing the inspection actions waiting to be started.\\\n        Any action requested while there is a current action in progress will be added to this list. Actions in this list will\\\n        replace the current action after it is completed in a first-in first-out order.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InspectionStatusList\"\n  /inspection/complete/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Complete an inspection action.\n      description:\n        Will attempt to complete current inspection. This REST endpoint is only intended for UI form submission. Will\\\n        be triggered on UI interaction to indicate an inspection has been completed. Will return 400 if provided action id is not\\\n        current action.\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /inspection/hold/{action_id}:\n    post:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Request vehicle proceed to holding area for further inspection\n      description: Will attempt to request vehicle proceed to holding area for further inspection. Will return 400 if no current action\n      responses:\n        \"201\":\n          description: Created\n        \"400\":\n          description: Bad Request\n  /inspection/{action_id}:\n    get:\n      parameters:\n        - in: path\n          name: action_id\n          schema:\n            type: string\n          required: true\n          description: ID of action\n      summary: Returns action with given ID\n      description: Returns action with given ID. If non is found returns 400. Intended for polling inspection status.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InspectionStatus\"\n        \"400\":\n          description: Bad Request\ncomponents:\n  schemas:\n    ContainerRequest:\n      title: Container Request\n      type: object\n      properties:\n        vehicle_id:\n          type: string\n          description: ID of vehicle\n        container_id:\n          type: string\n          description: ID of container\n        action_id:\n          type: string\n          description: ID of action\n      required:\n        - vehicle_id\n        - container_id\n        - action_id\n    ContainerActionStatus:\n      title: Container Action Status\n      type: object\n      properties:\n        vehicle_id:\n          type: string\n          description: ID of vehicle\n        container_id:\n          type: string\n          description: ID of container\n        action_id:\n          type: string\n          description: ID of action\n        status:\n          type: string\n          enum:\n            - LOADING\n            - UNLOADING\n            - LOADED\n            - UNLOADED\n            - PENDING\n            - ABORTED\n        requested:\n          type: integer\n          format: int64\n        completed:\n          type: integer\n          format: int64\n      required:\n        - vehicle_id\n        - container_id\n        - action_id\n        - status\n        - requested\n    ActionStatusList:\n      title: List of Container Action Status elements\n      type: object\n      properties:\n        actions:\n          type: array\n          items:\n            type: object\n            $ref: \"#/components/schemas/ContainerActionStatus\"\n    InspectionRequest:\n      title: Inspection Request\n      type: object\n      properties:\n        vehicle_id:\n          type: string\n          description: ID of vehicle\n        container_id:\n          type: string\n          description: ID of container\n        action_id:\n          type: string\n          description: ID of action\n      required:\n        - vehicle_id\n        - container_id\n        - action_id\n    InspectionStatus:\n      title: Inspection Status\n      type: object\n      properties:\n        vehicle_id:\n          type: string\n          description: ID of vehicle\n        container_id:\n          type: string\n          description: ID of container\n        action_id:\n          type: string\n          description: ID of action\n        status:\n          type: string\n          enum:\n            - PENDING\n            - PROCEED_TO_HOLDING\n            - PASSED\n            - FAILED\n            - HOLDING\n        requested:\n          type: integer\n          format: int64\n        completed:\n          type: integer\n          format: int64\n      required:\n        - vehicle_id\n        - container_id\n        - action_id\n        - status\n        - requested\n    InspectionStatusList:\n      title: List of Container Action Status elements\n      type: object\n      properties:\n        inspections:\n          type: array\n          items:\n            type: object\n            $ref: \"#/components/schemas/InspectionStatus\"\n",
			"canonicalURL": "/github.com/usdot-fhwa-OPS/V2X-Hub@0d829f35c8453a322acd719061d13410faf64762/-/blob/tools/port-drayage-webservice/src/main/resources/port-drayage-webservice.yml",
			"externalURLs": [
				{
					"url": "https://github.com/usdot-fhwa-OPS/V2X-Hub/blob/0d829f35c8453a322acd719061d13410faf64762/tools/port-drayage-webservice/src/main/resources/port-drayage-webservice.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}