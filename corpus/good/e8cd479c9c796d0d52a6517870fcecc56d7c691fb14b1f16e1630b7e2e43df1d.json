{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PacktPublishing/Hands-On-RESTful-Web-Services-with-TypeScript-3"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "Chapter06/openapi.yml",
			"byteSize": 10573,
			"content": "openapi: 3.0.0\n\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/biharck/hands-on/1.0.0\n  - description: The server description\n    url: https://localhost:3000/hands-on-store/1.0.0\ninfo:\n  description: |\n    This is a sample store server. You can find\n    out more about Swagger at\n    [http://Swagger.io](http://Swagger.io)\n  version: \"1.0.0\"\n  title: Swagger store\n  termsOfService: \"http://Swagger.io/terms/\"\n  contact:\n    email: biharck@gmail.com\n  license:\n    name: Apache 2.0\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\ntags:\n  - name: store\n    description: Access to store orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: \"http://Swagger.io\"\npaths:\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns user inventories from the store\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n      security:\n        - bearerAuth: []\n  /store/orders:\n    get:\n      tags:\n        - store\n      summary: Returns orders\n      description: Returns the orders\n      operationId: getOrder\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - store\n      summary: Place an order for a user\n      operationId: placeOrder\n      responses:\n        \"201\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the user\n        required: true\n  \"/store/orders/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003e= 1 and \u003c= 10.\\ \\ Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of user that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"404\":\n          description: Order not found\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with positive integer value.\\ \\\n        Negative or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"404\":\n          description: Order not found\n      security:\n        - bearerAuth: []\n  /users:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        \"201\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n  /users/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /users/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/users/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched. Use user1 for testing.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"404\":\n          description: User not found\n      security:\n        - bearerAuth: []\n    patch:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: Invalid user supplied\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"404\":\n          description: User not found\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n        \"400\":\n          description: Invalid username supplied\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n        \"404\":\n          description: User not found\n      security:\n        - bearerAuth: []\nexternalDocs:\n  description: Find out more about Swagger\n  url: \"http://Swagger.io\"\ncomponents:\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        userId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT # optional, arbitrary value for documentation purposes\n",
			"canonicalURL": "/github.com/PacktPublishing/Hands-On-RESTful-Web-Services-with-TypeScript-3@db87f83ce3536d823dd2d8436e26ea5a205d7404/-/blob/Chapter06/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/PacktPublishing/Hands-On-RESTful-Web-Services-with-TypeScript-3/blob/db87f83ce3536d823dd2d8436e26ea5a205d7404/Chapter06/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}