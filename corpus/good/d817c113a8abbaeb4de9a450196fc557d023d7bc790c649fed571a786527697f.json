{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/blaqkube/mysql-operator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "mysql-operator/agent/api/openapi.yaml",
			"byteSize": 14251,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    email: contact@blaqkube.io\n  description: |\n    Agent used by\n    [blaqkube MySQL operator](http://github.com/blaqkube/mysql-operator) to\n    manage MySQL backup/restore\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: http://blaqkube.io/terms/\n  title: blaqkube MySQL agent\n  version: 0.0.1\nexternalDocs:\n  description: Find out more about blaqkube MySQL operator\n  url: https://github.com/blaqkube/mysql-operator\nservers:\n- url: /\ntags:\n- description: data about your MySQL database\n  name: mysql\npaths:\n  /backup:\n    post:\n      operationId: CreateBackup\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BackupRequest'\n        description: Create a backup\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n          description: Backup Created\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n          description: Invalid input\n      security:\n      - api_key: []\n      summary: create an on-demand backup\n      tags:\n      - mysql\n  /backup/{uuid}:\n    get:\n      operationId: GetBackupByID\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Backup Internal ID\n        explode: false\n        in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n          description: Get Backup\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n          description: Not Found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n          description: Invalid input\n      security:\n      - api_key: []\n      summary: Get a backup on demand\n      tags:\n      - mysql\n  /database:\n    get:\n      operationId: getDatabases\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/listDatabases'\n          description: List of databases\n      security:\n      - api_key: []\n      summary: list all databases\n      tags:\n      - mysql\n    post:\n      operationId: createDatabase\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Database'\n        description: Create a Database\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Database'\n          description: Database Created\n      security:\n      - api_key: []\n      summary: create an on-demand database\n      tags:\n      - mysql\n  /database/{database}:\n    delete:\n      operationId: deleteDatabase\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Database to delete\n        explode: false\n        in: path\n        name: database\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid Database supplied\n        \"404\":\n          content: {}\n          description: Database not found\n      security:\n      - api_key: []\n      summary: Deletes a database\n      tags:\n      - mysql\n    get:\n      description: Returns the database properties\n      operationId: getDatabaseByName\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Name of the database to return\n        explode: false\n        in: path\n        name: database\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Database'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid Database supplied\n        \"404\":\n          content: {}\n          description: Database not found\n      security:\n      - api_key: []\n      summary: Get Database properties\n      tags:\n      - mysql\n  /user:\n    get:\n      operationId: getUsers\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/listUsers'\n          description: List of Users\n      security:\n      - api_key: []\n      summary: list all users\n      tags:\n      - mysql\n    post:\n      operationId: createUser\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Create a user\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: User Created\n      security:\n      - api_key: []\n      summary: create an on-demand user\n      tags:\n      - mysql\n  /user/{user}:\n    delete:\n      operationId: deleteUser\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: User to delete\n        explode: false\n        in: path\n        name: user\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid User supplied\n        \"404\":\n          content: {}\n          description: User not found\n      security:\n      - api_key: []\n      summary: Deletes a user\n      tags:\n      - mysql\n    get:\n      description: Returns the user properties\n      operationId: getUserByName\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Name of the user to return\n        explode: false\n        in: path\n        name: user\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid User supplied\n        \"404\":\n          content: {}\n          description: User not found\n      security:\n      - api_key: []\n      summary: Get user properties\n      tags:\n      - mysql\n  /user/{user}/database/{database}/grant:\n    get:\n      description: Returns the grant for a User and a Database\n      operationId: GetGrantByUserDatabase\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Name of the user to return the grant from\n        explode: false\n        in: path\n        name: user\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Name of the database to return the grant from\n        explode: false\n        in: path\n        name: database\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Grant'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid Database or User supplied\n        \"404\":\n          content: {}\n          description: Database or User not found\n        \"500\":\n          content: {}\n          description: Internal Error\n      security:\n      - api_key: []\n      summary: Get Database properties\n      tags:\n      - mysql\n    post:\n      description: Create a Grant for a User and Database\n      operationId: CreateGrantForUserDatabase\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Name of the database to return the grant from\n        explode: false\n        in: path\n        name: database\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Name of the user to return the grant from\n        explode: false\n        in: path\n        name: user\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Grant'\n        description: Create a user\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Grant'\n          description: successful operation\n        \"500\":\n          content: {}\n          description: Internal error\n      security:\n      - api_key: []\n      summary: Grant access to user and database\n      tags:\n      - mysql\ncomponents:\n  schemas:\n    EnvVar:\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n      required:\n      - name\n      - value\n      type: object\n    Backup:\n      description: output for a backup request\n      example:\n        bucket: backup.blaqkube.io\n        location: /blue/mybackup.dmp\n        id: abc\n      properties:\n        identifier:\n          type: string\n        bucket:\n          type: string\n        location:\n          type: string\n        start_time:\n          format: date-time\n          type: string\n        end_time:\n          format: date-time\n          nullable: true\n          type: string\n        status:\n          description: backup status\n          enum:\n          - Succeeded\n          - Failed\n          - Running\n          - Waiting\n          type: string\n      required:\n      - bucket\n      - identifier\n      - location\n      - start_time\n      - status\n      type: object\n    BackupList:\n      description: The List of backups\n      example:\n        size: 1\n        items:\n        - bucket: bucket\n          location: /blue/mybackup.dmp\n          id: abc\n      properties:\n        size:\n          type: integer\n        items:\n          items:\n            $ref: '#/components/schemas/Backup'\n          type: array\n      type: object\n    BackupRequest:\n      example:\n        backend: s3\n        bucket: backup.blaqkube.io\n        location: /blue/mybackup.dmp\n        env:\n        - name: AWS_REGION\n          value: eu-west-1\n      properties:\n        backend:\n          enum:\n          - s3\n          - blackhole\n          - gcp\n          type: string\n        bucket:\n          type: string\n        location:\n          type: string\n        envs:\n          items:\n            $ref: '#/components/schemas/EnvVar'\n          type: array\n      required:\n      - backend\n      - bucket\n      - location\n      type: object\n    Database:\n      example:\n        name: mydb\n      properties:\n        name:\n          type: string\n      required:\n      - name\n      type: object\n    Grant:\n      example:\n        accessMode: readwrite\n      properties:\n        accessMode:\n          enum:\n          - none\n          - readWrite\n          - readOnly\n          type: string\n      required:\n      - accessMode\n      type: object\n    listDatabases:\n      example:\n        size: 1\n        items:\n        - name: mydb\n      properties:\n        size:\n          type: integer\n        items:\n          items:\n            $ref: '#/components/schemas/Database'\n          type: array\n      type: object\n    listUsers:\n      example:\n        size: 1\n        items:\n        - username: me\n          password: '**'\n      properties:\n        size:\n          type: integer\n        items:\n          items:\n            $ref: '#/components/schemas/User'\n          type: array\n      type: object\n    Message:\n      example:\n        code: 200\n        message: Success\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n      required:\n      - code\n      type: object\n    User:\n      example:\n        username: myuser\n        password: changeme\n        grants:\n        - database: blue\n          accessMode: readwrite\n        - database: red\n          accessMode: readonly\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      required:\n      - password\n      - username\n      type: object\n  securitySchemes:\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n",
			"canonicalURL": "/github.com/blaqkube/mysql-operator@a735c6b6b5bcdc111232d8bfff74ca1e83e487c1/-/blob/mysql-operator/agent/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/blaqkube/mysql-operator/blob/a735c6b6b5bcdc111232d8bfff74ca1e83e487c1/mysql-operator/agent/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}