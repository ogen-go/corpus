{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/umdio/umdio"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 39801,
			"content": "openapi: 3.0.1\ninfo:\n  title: umd.io\n  description: \u003e-\n    Welcome to umd.io, the open-source API for University of Maryland data. If\n    you are building a University data-focused app, hack, or project, you’re in\n    the right place. This site will walk you through basic API use and document\n    all supported API calls.\n\n\n    umd.io is a GETful API. It follows RESTful conventions, but for now, you can\n    only get data – you can’t create, update, or destroy.\n\n\n    We're now in version 1! We might add new endpoints or more data to existing responses,\n    but we won't remove anything without a major version change.\n\n\n    If you're looking for the v0 docs, you can find them at https://docs.umd.io/.\n    Please note that v0 is deprecated. It will continue to be supported until at least 2021,\n    but will get no further feature updates, and will eventually be discontinued.\n\n\n    We are actively looking for contributors! Tweet, email, or otherwise get in\n    touch with us.\n  contact:\n    email: hi@umd.io\n  license:\n    name: MIT\n    url: \"https://github.com/umdio/umdio/blob/master/LICENSE\"\n  version: 1.0.0 Beta\nexternalDocs:\n  description: Github\n  url: \"https://github.com/umdio/umdio\"\nservers:\n  - url: \"https://api.umd.io/v1\"\ntags:\n  - name: courses\n    description: \u003e-\n      This set of endpoints lets you get data about university courses and their\n      sections. You can get one course or section at a time, several courses or\n      sections at a time, or a list of all the courses. All the data is scraped\n      from Testudo.\n\n  - name: professors\n    description: \u003e-\n      This endpoint contains information about university professors and the\n      courses they have taught.\n  - name: bus\n    description: \u003e-\n      This endpoint lets you get data about bus routes, schedules, stops,\n      locations, and predicted arrival times. The data is provided by NextBus,\n      which monitors buses and gives the data to us via their API. We think our\n      API is easier to use, but our data might be behind NextBus by a few\n      seconds. If your app requires to-the-second bus location info, you can go\n      right to the source. All bus data is copyright University of Maryland\n  - name: map\n    description: \u003e-\n      Data about things on campus, such as buildings, dining halls, and other\n      facilities.\n  - name: majors\n    description: \u003e-\n      Data about the various majors offered on campus.\npaths:\n  /courses:\n    get:\n      tags:\n        - courses\n      summary: List of courses\n      description: Returns paginated list of courses\n      operationId: getCourses\n      parameters:\n        - $ref: \"#/components/parameters/sortParam\"\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/perPageParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n        - $ref: \"#/components/parameters/creditsParam\"\n        - $ref: \"#/components/parameters/deptIdParam\"\n        - $ref: \"#/components/parameters/genEdParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Course\"\n  /courses/list:\n    get:\n      tags:\n        - courses\n      summary: List of minified courses\n      description: Returns list of all course codes and names\n      operationId: getCourseList\n      parameters:\n        - $ref: \"#/components/parameters/sortParam\"\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/perPageParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    course_id:\n                      type: string\n                    name:\n                      type: string\n  /courses/sections:\n    get:\n      tags:\n        - courses\n      summary: List of sections\n      description: Returns paginated list of sections\n      operationId: getSections\n      parameters:\n        - $ref: \"#/components/parameters/sortParam\"\n        - $ref: \"#/components/parameters/pageParam\"\n        - $ref: \"#/components/parameters/perPageParam\"\n        - $ref: \"#/components/parameters/courseIdParam\"\n        - $ref: \"#/components/parameters/seatsParam\"\n        - $ref: \"#/components/parameters/openSeatsParam\"\n        - $ref: \"#/components/parameters/waitlistParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Section\"\n  /courses/sections/{section_ids}:\n    get:\n      tags:\n        - courses\n      summary: View specific sections\n      description: Returns paginated list of sections\n      operationId: getSectionsByIds\n      parameters:\n        - $ref: \"#/components/parameters/sectionIdsParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Section\"\n        \"400\":\n          description: Malformed section id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown section id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /courses/{course_ids}:\n    get:\n      tags:\n        - courses\n      summary: View specific courses\n      description: Returns info about one or more courses\n      operationId: getCoursesById\n      parameters:\n        - $ref: \"#/components/parameters/courseIdsParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Course\"\n        \"400\":\n          description: Malformed course id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown course id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /courses/{course_ids}/sections:\n    get:\n      tags:\n        - courses\n      summary: View sections for a course\n      description: Returns info about one or more courses\n      operationId: getSectionsForCourse\n      parameters:\n        - $ref: \"#/components/parameters/courseIdsParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Section\"\n        \"400\":\n          description: Malformed course id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown course id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /courses/{course_ids}/sections/{section_ids}:\n    get:\n      tags:\n        - courses\n      summary: View specific sections for a course\n      description: Returns info about one or more courses\n      operationId: getCourseSectionsById\n      parameters:\n        - $ref: \"#/components/parameters/courseIdsParam\"\n        - $ref: \"#/components/parameters/sectionIdsParam\"\n        - $ref: \"#/components/parameters/semesterParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Section\"\n        \"400\":\n          description: Malformed course id or section id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown course id or section id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /courses/semesters:\n    get:\n      tags:\n        - courses\n      summary: List semesters\n      description: Returns list of all available semesters, each in format YYYYMM\n      operationId: getSemesters\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example: [\"201901\", \"201905\", \"201908\"]\n  /courses/departments:\n    get:\n      tags:\n        - courses\n      summary: List departments\n      description: Returns list of all available departments\n      operationId: getDepartments\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example: [\"AAST\", \"CMSC\", \"MATH\"]\n  /professors:\n    get:\n      tags:\n        - professors\n      summary: List professors\n      description: Returns list of all professors\n      operationId: getProfessors\n      parameters:\n        - $ref: \"#/components/parameters/nameParam\"\n        - $ref: \"#/components/parameters/courseIdParam\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Professor\"\n        \"400\":\n          description: \"Malformed query parameters\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: \"No Professors Found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /majors/list:\n    get:\n      tags:\n        - majors\n      summary: List majors\n      description: Get a list of all majors\n      operationId: getMajors\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Major\"\n  /map/buildings:\n    get:\n      tags:\n        - map\n      summary: List buildings\n      description: Get a list of the available buildings.\n      operationId: getBuildings\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Building\"\n  /map/buildings/{building_id}:\n    get:\n      tags:\n        - map\n      summary: Get buildings\n      description: \u003e-\n        Get location data about one or more buildings. Comma separated building\n        numbers are the parameters.\n      operationId: getBuildingById\n      parameters:\n        - in: path\n          name: building_id\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n            example: [\"226\"]\n          description: Numeric building ID\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Building\"\n                  count:\n                    type: number\n                    description: Number of buildings returned\n                    example: 1\n        \"400\":\n          description: Malformed building code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown building code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /bus/routes:\n    get:\n      tags:\n        - bus\n      summary: List routes\n      description: Get a list of the available routes.\n      operationId: getRoutes\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    route_id:\n                      type: string\n                    title:\n                      type: string\n  /bus/routes/{route_ids}:\n    get:\n      tags:\n        - bus\n      summary: View specific routes\n      description: Get route data for one or more routes\n      operationId: getRoutesById\n      parameters:\n        - in: path\n          name: route_ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          description: Route ids\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Route\"\n                  count:\n                    type: number\n                    description: Number of routes returned\n                    example: 1\n        \"400\":\n          description: Malformed route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /bus/stops:\n    get:\n      tags:\n        - bus\n      summary: List stops\n      description: Get a list of the available stops.\n      operationId: getStops\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    stop_id:\n                      type: string\n                    title:\n                      type: string\n  /bus/stops/{stop_ids}:\n    get:\n      tags:\n        - bus\n      summary: Get specific stops\n      description: Get data for one or more stops\n      operationId: getStopsById\n      parameters:\n        - in: path\n          name: stop_ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          description: Stop ids\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Stop\"\n                  count:\n                    type: number\n                    description: Number of routes returned\n                    example: 1\n        \"400\":\n          description: Malformed route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  #/bus/locations:\n  #  get:\n  #    tags:\n  #      - bus\n  #    summary: Current bus locations\n  #    description: Get bus locations\n  #    operationId: getLocations\n  #    responses:\n  #      \"200\":\n  #        description: Successful Operation\n  #        content:\n  #          application/json:\n  #            schema:\n  #              $ref: \"#/components/schemas/\"\n  /bus/routes/{route_id}/locations:\n    get:\n      tags:\n        - bus\n      summary: Current bus locations by route\n      description: Get bus locations for a route\n      operationId: getLocations\n      parameters:\n        - in: path\n          name: route_id\n          required: true\n          schema:\n            type: string\n          description: Route id\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Bus location object\n                properties:\n                  lastTime:\n                    type: object\n                    properties:\n                      time:\n                        type: string\n                        description: A unix timestamp\n                        example: \"1624045272049\"\n                  copyright:\n                    type: string\n        \"400\":\n          description: Malformed route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /bus/routes/{route_id}/schedules:\n    get:\n      tags:\n        - bus\n      summary: Bus schedules\n      description: Get bus schedules for a route\n      operationId: getSchedules\n      parameters:\n        - in: path\n          name: route_id\n          required: true\n          schema:\n            type: string\n          description: Route id\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/BusSchedule\"\n        \"400\":\n          description: Malformed route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown route code\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /bus/routes/{route_id}/arrivals/{stop_id}:\n    get:\n      tags:\n        - bus\n      summary: Get arrivals for a stop for a route\n      description: Get arrivals for a stop for a route\n      operationId: getArrival\n      parameters:\n        - in: path\n          name: route_id\n          required: true\n          schema:\n            type: string\n          description: Route id\n          explode: true\n        - in: path\n          name: stop_id\n          required: true\n          schema:\n            type: string\n          description: Stop id\n          explode: true\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n\n                  copyright:\n                    type: string\n                    example: All data copyright University of Maryland 2021.\n\n                  # TODO(don): This is not the correct schema - fix it; move it to schema object at bottom; reference it with $ref\n                  predictions:\n                    type: object\n                    properties:\n                      routeTag:\n                        type: string\n                        example: \"104\"\n                      stopTag:\n                        type: string\n                        example: regdrgar_d\n                      routeTitle:\n                        type: string\n                        example: 104 College Park Metro\n                      agencyTitle:\n                        type: string\n                        example: University of Maryland\n                      dirTitleBecauseNoPredictions:\n                        type: string\n                        example: College Park Metro\n                      message:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            text:\n                              type: string\n                            priority:\n                              type: string\n                              example: Normal\n\n        \"400\":\n          description: Malformed route id or stop id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Unknown route id or stop id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Route:\n      type: object\n      description: Bus route\n      properties:\n        route_id:\n          type: string\n          description: A unique three digit route number\n          example: \"701\"\n        title:\n          type: string\n          description: String name of the route\n          example: 701 UMB BioPark\n        stops:\n          type: array\n          description: Array of stops on the route\n          items:\n            $ref: \"#/components/schemas/Stop\"\n        directions:\n          type: array\n          description: Array of directions the bus travels\n          items:\n            description: A direction for a bus route. Many buses only have one direction, ‘loop’ , which has all stops on the route. Otherwise, there are usually two directions, mostly named for the final stop in that direction.\n            type: object\n            properties:\n              direction_id:\n                type: string\n                description: Unique (relative to the route) string titling the direction\n                example: ramsapts\n              title:\n                type: string\n                description: String name of the direction\n                example: Ramsay St Apts\n              stops:\n                type: array\n                description: Names of stops along the route\n                items:\n                  type: string\n        paths:\n          description: Lat/Long points to draw the route on a map\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n              properties:\n                lat:\n                  type: number\n                  format: float\n                long:\n                  type: number\n                  format: float\n        lat_max:\n          type: number\n          format: float\n          example: 39.2995236\n        lat_min:\n          type: number\n          format: float\n          example: 39.28301\n        long_max:\n          type: number\n          format: float\n          example: -76.620848\n        long_min:\n          type: number\n          format: float\n          example: -76.6320545\n\n    Stop:\n      type: object\n      description: Bus stop\n      properties:\n        stop_id:\n          type: string\n          description: Unique string identifier for a stop, should be mostly human-readable\n          example: laplat\n        title:\n          type: string\n          description: Full name of the stop\n          example: La Plata Hall\n        lat:\n          type: number\n          format: float\n          description: Latitude\n          example: -76.94563\n        long:\n          type: number\n          format: float\n          description: Longitude\n          example: 38.9922185\n\n    BusSchedule:\n      type: object\n      description: Each route has multiple schedules, because buses run differently on different days of the week\n      properties:\n        days:\n          type: string\n          description: The days the schedule runs\n          example: f\n        direction:\n          type: string\n          description: Direction id for the route. See Route object.\n        route:\n          type: string\n          description: Route id\n        stops:\n          description: Scheduled stops on the route.\n          type: array\n          items:\n            type: object\n            properties:\n              stop_id:\n                type: string\n                description: Stop id\n                example: laplat\n              name:\n                type: string\n                description: Full stop name\n                example: La Plata Hall\n        trips:\n          description: Scheduled stops for the route, and when busses should be stopping there.\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n              properties:\n                stop_id:\n                  type: string\n                  description: Stop id. See Stop object\n                arrival_time:\n                  type: string\n                  description: Arrival time, localized to hh:mm:ss in EST/EDT\n                arrival_time_secs:\n                  type: string\n                  description: Time in ms from start of the day\n\n    Course:\n      type: object\n      description: Represents a course on Testudo\n      properties:\n        course_id:\n          type: string\n          example: \"MATH140\"\n          description: A unique string ID with a four-letter dept_id followed by a three digit course number and an optional letter.\n        semester:\n          type: number\n          example: 202001\n          description: Numeric representation of the semester, in format YYYYMM\n        name:\n          type: string\n          example: \"Calculus I\"\n          description: String name of the course.\n        dept_id:\n          type: string\n          example: \"MATH\"\n          description: Four letter department code\n        department:\n          type: string\n          example: \"Mathematics\"\n          description: Full name of the department that offers the course.\n        credits:\n          type: string\n          example: \"4\"\n          description: The number of credits the course is worth.\n        description:\n          type: string\n          example: \"Introduction to calculus, including functions, limits, continuity, derivatives and applications of the derivative, sketching of graphs of functions, definite and indefinite integrals, and calculation of area. The course is especially recommended for science, engineering and mathematics majors.\"\n          description: String description of the course, as it appears on Testudo.\n        grading_method:\n          type: array\n          items:\n            type: string\n          example: [\"Regular\", \"Pass-Fail\", \"Audit\"]\n          description: Array of string grading options available. The possible options are “Regular”, “Pass-Fail”, “Audit”, and “Sat-Fail”\n        gen_ed:\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n          example: [[\"FSAR\", \"FSMA\"]]\n          description: Strings representing the General Education requirements the course fulfills. Note that this is an array of arrays of strings. The outmost \"layer\" represents \"or\", while the inner one represents an and relationship. Additionally, if a gened credit is granted only when taken with another class, this will be represented using a pipe (|) with that class name. For instance, \"X, Y or Z (if taken with C)\" on Testudo will be returned as [[X, Y], [Z|C]] here.\n        core:\n          type: array\n          items:\n            type: string\n          example: [\"MS\"]\n          description: Array of strings of CORE requirements filled by a course.\n        relationships:\n          type: object\n          properties:\n            coreqs:\n              type: string\n              nullable: true\n              example: null\n              description: courses that must be taken with this one.\n            prereqs:\n              type: string\n              nullable: true\n              example: \"Minimum grade of C- in MATH115.\"\n              description: Requirements for taking this course.\n            formerly:\n              type: string\n              nullable: true\n              example: null\n              description: Previous course codes that were the same course.\n            restrictions:\n              type: string\n              nullable: true\n              example: null\n              description: Additional restrictions/requirements for taking the course.\n            additional_info:\n              type: string\n              nullable: true\n              example: \"Or must have math eligibility of MATH140 or higher; and math eligibility is based on the Math Placement Test.  All sections will require the use of a TI graphics calculator. Instructor will use a TI-83, TI-83+, or TI-86 calculator. If purchasing used books additional software may be required.\"\n              description: Any additional information listed on Testudo\n            also_offered_as:\n              type: string\n              nullable: true\n              example: null\n              description: Other course codes representing the same course, like in the case of cross-listing\n            credit_granted_for:\n              type: string\n              nullable: true\n              example: \"MATH120, MATH130, MATH136, MATH140 or MATH220.\"\n              description: Courses that are equivalent in credit.\n        sections:\n          type: array\n          items:\n            oneOf:\n              - type: string\n              - $ref: \"#/components/schemas/Section\"\n          example:\n            [\n              \"MATH140-0111\",\n              \"MATH140-0121\",\n              \"MATH140-0131\",\n              \"MATH140-0141\",\n              \"MATH140-0211\",\n              \"MATH140-0221\",\n              \"MATH140-0231\",\n              \"MATH140-0241\",\n              \"MATH140-0311\",\n              \"MATH140-0321\",\n              \"MATH140-0112\",\n              \"MATH140-0113\",\n              \"MATH140-0122\",\n              \"MATH140-0123\",\n              \"MATH140-0132\",\n              \"MATH140-0142\",\n            ]\n          description: The sections of this course.\n\n    Section:\n      type: object\n      description: Represents a single section of a course.\n      properties:\n        course:\n          type: string\n          example: \"ENGL101\"\n          description: The associated course id\n        section_id:\n          type: string\n          example: \"ENGL101-0101\"\n          description: A unique section identifier, always the course_id with a four-digit section number appended to it.\n        semester:\n          type: number\n          example: 201501\n          description: Numeric representation of the semester, in format YYYYMM\n        number:\n          type: string\n          description: The other half of section_id\n        seats:\n          type: string\n          description: The number of seats for the section.\n        meetings:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Meeting\"\n          description: Array of section meetings.\n        open_seats:\n          type: string\n          description: The number of open seats for the section.\n        waitlist:\n          type: string\n          description: The number of people on the waitlist.\n        instructors:\n          type: array\n          description: An array of professor names for the section\n          items:\n            type: string\n\n    Meeting:\n      type: object\n      description: A Meeting for a section of a course\n      properties:\n        days:\n          type: string\n          description: The days of the week that a course meets. Will be some combination of M, Tu, W, Th, F in that order.\n        room:\n          type: string\n          description: The room number the meeting is in.\n        building:\n          type: string\n          description: The building the meeting is in.\n        classtype:\n          type: string\n          description: Lecutre, Discussion, Lab, etc.\n        start_time:\n          type: string\n          description: The time the meeting starts, in format (x)y:zw[a|p]m (e.g. 10:45am, or 6:30pm)\n        end_time:\n          type: string\n          description: The time the meeting ends, in format (x)y:zw[a|p]m (e.g. 10:45am, or 6:30pm)\n\n    Professor:\n      type: object\n      description: Represents a professor\n      properties:\n        name:\n          type: string\n          description: Professor's name on Testudo\n          example: Aaron Bartlett\n        taught:\n          type: array\n          description: An array of courses taught, along with the semester they were taught\n          items:\n            type: object\n            properties:\n              semester:\n                type: integer\n                example: 202001\n              course:\n                type: string\n                example: ENGL101\n\n    Major:\n      type: object\n      description: Represents a major\n      properties:\n        major_id:\n          type: number\n          description: Numeric id of a major. No real meaning here, just an ascending count.\n          example: 19\n        name:\n          type: string\n          description: The name of the major.\n          example: Behavioral and Community Health\n        college:\n          type: string\n          description: The college the major is under.\n          example: School of Public Health\n        url:\n          type: string\n          description: Home page for the major.\n          example: http://sph.umd.edu/department/bch/\n\n    Building:\n      type: object\n      description: Represents a building on campus.\n      properties:\n        name:\n          type: string\n          description: Name of the building\n          example: \"Edward St. John Learning and Teaching Center\"\n        code:\n          type: string\n          description: Shortened building code. Not all buildings have these.\n          example: \"ESJ\"\n        id:\n          type: string\n          description: Unique building id\n          example: \"226\"\n        long:\n          type: number\n          description: Longitude\n          example: -76.941914\n        lat:\n          type: number\n          description: Latitude\n          example: 38.986699\n\n    Error:\n      type: object\n      description: Represents an HTTP error\n      properties:\n        error_code:\n          type: number\n        message:\n          type: string\n        docs:\n          type: string\n\n  parameters:\n    courseIdsParam:\n      in: path\n      name: course_ids\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n        description: One or more comma separated course ids, in format DEPTNNN with up to 2 trailing characters.\n      explode: true\n      example: [\"ENGL101\", \"MATH140\", \"CMSC388F\"]\n\n    sectionIdsParam:\n      in: path\n      name: section_ids\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n        description: One or more comma separated section ids, of format DEPTNNN-XXXX.\n      explode: true\n      example: [\"ENGL101-0101\", \"MATH140-0201\"]\n\n    sortParam:\n      in: query\n      name: sort\n      schema:\n        type: string\n      description: a comma-separated list of course properties. Defaults to ASCENDING order, use a - (minus) prefix for DESCENDING order. For example, ?sort=course_id,-credits sorts the results ASCENDING by course_id and DESCENDING by credits.\n      example: course_id,-credits\n\n    pageParam:\n      in: query\n      name: page\n      schema:\n        type: number\n      description: For paginated responses, the page to view. 1-indexed. Defaults to 1 if omitted.\n      example: 3\n\n    perPageParam:\n      in: query\n      name: per_page\n      schema:\n        type: number\n      description: Endpoints that return a large amount of items are paginated to 30 items by default. You can use this parameter to set a page size up to 100.\n      example: 3\n\n    expandParam:\n      in: query\n      name: expand\n      schema:\n        type: boolean\n      description: Expands sections into full objects\n      example: 3\n\n    semesterParam:\n      in: query\n      name: semester\n      schema:\n        type: string\n      description: 6-digit semester ID to search, with optional comparator, separated by a pipe. Valid comparators are eq, leq, lt, gt, geq, neq.\n      example: 202008|leq\n\n    nameParam:\n      in: query\n      name: name\n      schema:\n        type: string\n      description: Professor's name.\n      example: \"Aaron Bartlett\"\n\n    courseIdParam:\n      in: query\n      name: course_id\n      schema:\n        type: string\n      description: 7 or 8 digit course id. See the course object for more info.\n      example: CMSC216\n\n    creditsParam:\n      in: query\n      name: credits\n      schema:\n        type: string\n      description: The number of credits to watch, with optional comparator, separated by a pipe. Valid comparators are eq, leq, lt, gt, geq, neq.\n      example: \"3|leq\"\n\n    deptIdParam:\n      in: query\n      name: dept_id\n      schema:\n        type: string\n      description: 4 Letter department code to search.\n      example: CMSC\n\n    genEdParam:\n      in: query\n      name: gen_ed\n      schema:\n        type: string\n      description: Gened requirement to search.\n      example: DSNS\n\n    seatsParam:\n      in: query\n      name: seats\n      schema:\n        type: string\n      description: Number of total seats in a section, with optional comparator, separated by a pipe. Valid comparators are eq, leq, lt, gt, geq, neq.\n      example: 200\n\n    openSeatsParam:\n      in: query\n      name: open_seats\n      schema:\n        type: string\n      description: Number of open seats in a section, with optional comparator, separated by a pipe. Valid comparators are eq, leq, lt, gt, geq, neq.\n      example: 5\n\n    waitlistParam:\n      in: query\n      name: waitlist\n      schema:\n        type: string\n      description: Number of people on the waitlist for a class, with optional comparator, separated by a pipe. Valid comparators are eq, leq, lt, gt, geq, neq.\n      example: 10\n\n    daysParam:\n      in: query\n      name: days\n      schema:\n        type: string\n      description: The days of the week that a course meets. Will be some combination of M, Tu, W, Th, F in that order.\n      example: MWF\n\n    roomParam:\n      in: query\n      name: room\n      schema:\n        type: string\n      description: The room a class meeting is in.\n      example: 0120\n\n    buildingParam:\n      in: query\n      name: building\n      schema:\n        type: string\n      description: The code for the building the class meeting is in.\n      example: KEY\n\n    classtypeParam:\n      in: query\n      name: classtype\n      schema:\n        type: string\n      description: Indicates type of meeting. Could be \"Lecture\", \"Discussion\", or \"Lab\"\n      example: Lecture\n\n    startTimeParam:\n      in: query\n      name: start_time\n      schema:\n        type: string\n      description: Start time of the meeting.\n      example: 9:00am\n\n    endTimeParam:\n      in: query\n      name: end_time\n      schema:\n        type: string\n      description: End time of the meeting.\n      example: 10:50am\n",
			"canonicalURL": "/github.com/umdio/umdio@f75cfb1f47d0eae033ec90f773131075828ff751/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/umdio/umdio/blob/f75cfb1f47d0eae033ec90f773131075828ff751/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}