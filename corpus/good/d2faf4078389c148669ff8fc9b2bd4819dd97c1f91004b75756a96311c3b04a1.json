{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/duluca/lemon-mart-server"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 6903,
			"content": "openapi: 3.0.1\ninfo:\n  title: LemonMart\n  description: LemonMart API\n  version: \"2.0.0\"\n\nservers:\n  - url: http://localhost:3000\n    description: Local environment\n  - url: https://mystagingserver.com\n    description: Staging environment\n  - url: https://myprodserver.com\n    description: Production environment\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    UnauthorizedError:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ServerMessage\"\n  schemas:\n    ServerMessage:\n      type: object\n      properties:\n        message:\n          type: string\n    Role:\n      type: string\n      enum: [none, clerk, cashier, manager]\n    PhoneType:\n      type: string\n      enum: [none, mobile, home, work]\n    Phone:\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/PhoneType\"\n        digits:\n          type: string\n      required:\n        - type\n        - digits\n    Name:\n      type: object\n      properties:\n        first:\n          type: string\n        middle:\n          type: string\n        last:\n          type: string\n      required:\n        - first\n        - last\n    User:\n      type: object\n      properties:\n        _id:\n          type: string\n        email:\n          type: string\n        name:\n          $ref: \"#/components/schemas/Name\"\n        picture:\n          type: string\n        role:\n          $ref: \"#/components/schemas/Role\"\n        userStatus:\n          type: boolean\n        dateOfBirth:\n          type: string\n          format: date\n        address:\n          type: object\n          properties:\n            line1:\n              type: string\n            line2:\n              type: string\n            city:\n              type: string\n            state:\n              type: string\n            zip:\n              type: string\n          required:\n            - line1\n            - city\n            - state\n            - zip\n        phones:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Phone\"\n      required:\n        - email\n        - name\n        - role\n        - userStatus\n  parameters:\n    filterParam:\n      in: query\n      name: filter\n      required: false\n      schema:\n        type: string\n      description: Search text to filter the result set by\n    skipParam:\n      in: query\n      name: skip\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before collecting the result set.\n    limitParam:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 10\n      description: The numbers of items to return.\n    sortKeyParam:\n      in: query\n      name: sortKey\n      required: false\n      schema:\n        type: string\n      description: Name of a column to sort ascending. Prepend column name with a dash to sort descending.\n\npaths:\n  /v1/login:\n    post:\n      description: |\n        Generates a JWT, given correct credentials.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              required:\n                - email\n                - password\n      responses:\n        '200': # Response\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  accessToken:\n                    type: string\n                description: JWT token that contains userId as subject, email and role as data payload.\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /v1/auth/me:\n   get:\n      description: Gets the `User` object of the logged in user\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /v2/users:\n    get:\n      description: |\n        Searches, sorts, paginates and returns a summary of `User` objects.\n      parameters:\n        - $ref: '#/components/parameters/filterParam'\n        - $ref: '#/components/parameters/skipParam'\n        - $ref: '#/components/parameters/limitParam'\n        - $ref: '#/components/parameters/sortKeyParam'\n      responses:\n        \"200\": # Response\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                        email:\n                          type: string\n                        fullName:\n                          type: string\n                        name:\n                          $ref: \"#/components/schemas/Name\"\n                        role:\n                          $ref: \"#/components/schemas/Role\"\n                      description: Summary of `User` object.\n    post:\n      summary: Create a new `User`\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n         '200':\n            description: OK\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/User'\n  /v2/users/{id}:\n    get:\n      description: Gets a `User` object by id\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n      responses:\n         '200':\n            description: OK\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/User'\n    put:\n      summary: Updates an existing `User`\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n         '200':\n            description: OK\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/User'",
			"canonicalURL": "/github.com/duluca/lemon-mart-server@475558d6f600855bd56a6782a8ff9cb9b090db56/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/duluca/lemon-mart-server/blob/475558d6f600855bd56a6782a8ff9cb9b090db56/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}