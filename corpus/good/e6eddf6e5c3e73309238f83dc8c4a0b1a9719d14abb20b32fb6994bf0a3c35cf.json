{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CN-UPB/Pishahang"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "src/gatekeeper/openapi.yml",
			"byteSize": 34221,
			"content": "openapi: 3.0.0\n\ninfo:\n  version: 1.0.0\n  title: Pishahang Gatekeeper API\n  description: The definition of the Gatekeeper's public API\n\nservers:\n  - url: /api/v3\n\nsecurity:\n  - bearerAuth: []\n\ntags:\n  - name: Authentication\n    description: User management and authentication\n  - name: VIMs\n    description: VIM settings\n  - name: Descriptors\n    description: Descriptors that have been uploaded and can be edited or onboarded\n  - name: Services\n    description: Services (onboarded service descriptors), their function descriptors, and their instances\n  - name: Plugins\n    description: List MANO plugins and control their lifecycle states\n\npaths:\n  # Authentication =================================================================================\n\n  /auth:\n    post:\n      tags:\n        - Authentication\n      summary: Create a new access token\n      description:\n        Given a username and a password, returns an access token and a refresh token or fails with\n        error 401 if the credentials are invalid.\n      operationId: gatekeeper.api.auth.createTokenFromCredentials\n      security: []\n      requestBody:\n        description: The username and password to create a new access token with\n        content:\n          application/json:\n            schema:\n              required:\n                - username\n                - password\n              properties:\n                username:\n                  type: string\n                  example: \"pishahang\"\n                password:\n                  type: string\n                  example: \"1234\"\n\n      responses:\n        \"200\":\n          description:\n            The provided credentials are valid and a new access token and refresh token have been\n            returned.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/AccessToken\"\n                  - $ref: \"#/components/schemas/RefreshToken\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    put:\n      tags:\n        - Authentication\n      summary: Refresh an access token\n      description:\n        Given a refresh token, returns a new access token or fails with error 401 if the given\n        refresh token is invalid.\n      operationId: gatekeeper.api.auth.refreshToken\n      security: []\n      requestBody:\n        description: The refresh token which was handed out by the `/auth` endpoint\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RefreshToken\"\n      responses:\n        \"200\":\n          description: The provided refresh token is valid and a new access token has been returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessToken\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # Users ==========================================================================================\n\n  /users:\n    get:\n      tags:\n        - Authentication\n      summary: Get a list of registered users (admin-only)\n      description: Returns a list of all registered users\n      operationId: gatekeeper.api.users.getUsers\n      responses:\n        \"200\":\n          description: The list of users was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"403\":\n          $ref: \"#/components/responses/Error403\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    post:\n      tags:\n        - Authentication\n      summary: Add a user (admin-only)\n      operationId: gatekeeper.api.users.addUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        \"200\":\n          description: The user is successfully added\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"403\":\n          $ref: \"#/components/responses/Error403\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /users/{id}:\n    get:\n      tags:\n        - Authentication\n      summary: Retrieve a single user (admin-only)\n      description: Returns a single user by its ID\n      operationId: gatekeeper.api.users.getUser\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the user to be retrieved\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The requested user was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"403\":\n          $ref: \"#/components/responses/Error403\"\n        \"404\":\n          $ref: \"#/components/responses/Error403\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n    delete:\n      tags:\n        - Authentication\n      summary: Delete a user (admin-only)\n      operationId: gatekeeper.api.users.deleteUser\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the user to be deleted\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The user has been deleted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"403\":\n          $ref: \"#/components/responses/Error403\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n    put:\n      tags:\n        - Authentication\n      summary: Update a given user (admin-only)\n      description:\n        Updates a given user's information. If the `password` field is empty, the user's password\n        won't be changed.\n      operationId: gatekeeper.api.users.updateUser\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the user to be updated\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        \"200\":\n          description: The user was successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"403\":\n          $ref: \"#/components/responses/Error403\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /current-user:\n    get:\n      tags:\n        - Authentication\n      summary: Get the current user\n      description: Returns the user data of the currently logged-in user\n      operationId: gatekeeper.api.users.getCurrentUser\n      responses:\n        \"200\":\n          description: The current user was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    put:\n      tags:\n        - Authentication\n      summary: Update the user data of the current user\n      description:\n        Updates the current user's information. If the `password` field is empty, the\n        user's password won't be changed. Note that the `isAdmin` field, while required\n        due to a\n        [shortcoming](https://json-schema.org/understanding-json-schema/reference/combining.html#allof)\n        in JsonSchema, is ignored for this endpoint.\n      operationId: gatekeeper.api.users.updateCurrentUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/User\"\n\n      responses:\n        \"200\":\n          description: The user data was successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # Descriptors ====================================================================================\n\n  /descriptors:\n    get:\n      tags:\n        - Descriptors\n      summary: Get a list of descriptors\n      description: Returns a list of all descriptors of a specified type\n      operationId: gatekeeper.api.descriptors.getDescriptorsByType\n      parameters:\n        - name: type\n          in: query\n          required: true\n          description: Specifies the descriptor type\n          schema:\n            $ref: \"#/components/schemas/DescriptorType\"\n      responses:\n        \"200\":\n          description: The list of descriptors was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Descriptors\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    post:\n      tags:\n        - Descriptors\n      summary: Upload a new descriptor\n      description: \u003e\n        Adds a new descriptor to the database. Note: The combination of a descriptor's vendor, name,\n        and version have to be unique.\n      operationId: gatekeeper.api.descriptors.addDescriptor\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Descriptor\"\n      responses:\n        \"201\":\n          description: The descriptor was successfully added to the database.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Descriptor\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /descriptors/{id}:\n    get:\n      tags:\n        - Descriptors\n      summary: Get a descriptor by its ID\n      operationId: gatekeeper.api.descriptors.getDescriptorById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the descriptor to be retrieved\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The descriptor was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Descriptor\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    put:\n      tags:\n        - Descriptors\n      summary: Update a descriptor by its ID\n      description: Updates the content of the descriptor specified by the given ID\n      operationId: gatekeeper.api.descriptors.updateDescriptor\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the descriptor to be updated\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - content\n              properties:\n                content:\n                  $ref: \"#/components/schemas/DescriptorContent\"\n                contentString:\n                  type: string\n                  description: \u003e\n                    The content of the descriptor as a string.\n                    It will not be used by the gatekeeper but stored for later client-side usage.\n      responses:\n        \"200\":\n          description: The descriptor was successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Descriptor\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    delete:\n      tags:\n        - Descriptors\n      summary: Delete a descriptor by its ID\n      description: Deletes the descriptor with the provided ID if it exists.\n      operationId: gatekeeper.api.descriptors.deleteDescriptorById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the descriptor to be deleted\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The descriptor was successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Descriptor\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # Services =======================================================================================\n\n  /services:\n    get:\n      tags:\n        - Services\n      summary: Get a list of available services\n      description: Returns a list of services available for instantiation\n      operationId: gatekeeper.api.services.getServices\n      responses:\n        \"200\":\n          description: The list of services was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Services\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    post:\n      tags:\n        - Services\n      summary: Add a service by onboarding a service descriptor\n      description: \u003e\n        Onboards a service descriptor by its ID, adding a new available service. Snapshots of the\n        service descriptor and all referenced descriptors are stored, which will be used for\n        instantiation. Later edits to the corresponding descriptors will not modify the snapshots.\n      operationId: gatekeeper.api.services.addService\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - id\n              properties:\n                id:\n                  type: string\n                  format: uuid\n      responses:\n        \"201\":\n          description: The service descriptor was successfully onboarded and can now be instantiated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /services/{id}:\n    get:\n      tags:\n        - Services\n      summary: Get a service by its ID\n      operationId: gatekeeper.api.services.getServiceById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The ID of the service to be retrieved\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: Details on the service were successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    delete:\n      tags:\n        - Services\n      summary: Delete a service by its ID\n      description: Deletes the service with the provided ID if it has no active instances.\n      operationId: gatekeeper.api.services.deleteServiceById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the service to be deleted\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The service was successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # Service instances ==============================================================================\n\n  /services/{serviceId}/instances:\n    get:\n      tags:\n        - Services\n      summary: List the instances of a service\n      operationId: gatekeeper.api.services.getServiceInstances\n      parameters:\n        - name: serviceId\n          in: path\n          required: true\n          description: The service ID\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: A list of service instances was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceInstances\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    post:\n      tags:\n        - Services\n      summary: Instantiate a service\n      description: \u003e\n        Requests the instantiation of the specified service, optionally providing lists of\n        ingresses and egresses.\n      operationId: gatekeeper.api.services.instantiateService\n      parameters:\n        - name: serviceId\n          in: path\n          required: true\n          description: The service ID\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ingresses:\n                  type: array\n                  items:\n                    type: string\n                egresses:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        \"201\":\n          description: \u003e\n            An instantiation request was successfully made, and the corresponding\n            ServiceInstance object was returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceInstance\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /services/{serviceId}/instances/{instanceId}:\n    delete:\n      tags:\n        - Services\n      summary: Terminate a service instance\n      operationId: gatekeeper.api.services.terminateServiceInstance\n      parameters:\n        - name: serviceId\n          in: path\n          required: true\n          description: The ID of the service that the instance belongs to\n          schema:\n            type: string\n            format: uuid\n        - name: instanceId\n          in: path\n          required: true\n          description: The ID of the service instance to be terminated\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: The service instance was successfully terminated.\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # VIMs ===========================================================================================\n\n  /vims:\n    get:\n      tags:\n        - VIMs\n      summary: Get a list of VIMs\n      operationId: gatekeeper.api.vims.getVims\n      responses:\n        \"200\":\n          description: The list of VIMs was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Vims\"\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    post:\n      tags:\n        - VIMs\n      summary: Add a VIM\n      operationId: gatekeeper.api.vims.addVim\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AnyVim\"\n      responses:\n        \"201\":\n          description: The VIM was successfully added.\n        \"400\":\n          $ref: \"#/components/responses/Error400\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n  /vims/{id}:\n    delete:\n      tags:\n        - VIMs\n      summary: Delete a VIM by its ID\n      description: Deletes the VIM with the provided ID if it exists.\n      operationId: gatekeeper.api.vims.deleteVim\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the VIM to be deleted\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: The VIM was successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Vims\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  # Plugins ========================================================================================\n\n  /plugins:\n    get:\n      tags:\n        - Plugins\n      summary: Get the list of registered plugins\n      operationId: gatekeeper.api.plugins.getPlugins\n      responses:\n        \"200\":\n          description: The list of plugins was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Plugins\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /plugins/{id}:\n    get:\n      tags:\n        - Plugins\n      summary: Get information about a single plugin\n      operationId: gatekeeper.api.plugins.getPluginById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the plugin to return information about\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: Information about the plugin was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Plugin\"\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n    delete:\n      tags:\n        - Plugins\n      summary: Shut down a plugin by its ID\n      operationId: gatekeeper.api.plugins.shutdownPluginById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the plugin to be shut down\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: The shutdown request was successfully made.\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\n  /plugins/{id}/lifecycle:\n    put:\n      tags:\n        - Plugins\n      summary: Manipulate the lifecycle state of a plugin\n      operationId: gatekeeper.api.plugins.changePluginStateById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the plugin whose state should be changed\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - targetState\n              properties:\n                targetState:\n                  type: string\n                  enum:\n                    - pause\n                    - start\n      responses:\n        \"204\":\n          description: The lifecycle manipulation request was successfully made.\n        \"401\":\n          $ref: \"#/components/responses/Error401\"\n        \"404\":\n          $ref: \"#/components/responses/Error404\"\n        \"500\":\n          $ref: \"#/components/responses/Error500\"\n\ncomponents:\n  schemas:\n    BaseEntity:\n      required:\n        - id\n        - createdAt\n        - updatedAt\n      properties:\n        id:\n          description: A randomly generated UUID\n          type: string\n          format: uuid\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n\n    DescriptorType:\n      type: string\n      enum: [service, openStack, kubernetes, aws]\n    DescriptorContent:\n      type: object\n      example:\n        descriptor_version: \"1.0\"\n        vendor: \"my.vendor\"\n        name: \"example-descriptor\"\n        version: \"1.0.0\"\n    Descriptor:\n      allOf:\n        - $ref: \"#/components/schemas/BaseEntity\"\n        - type: object\n          required:\n            - type\n            - content\n          properties:\n            type:\n              $ref: \"#/components/schemas/DescriptorType\"\n            content:\n              $ref: \"#/components/schemas/DescriptorContent\"\n            contentString:\n              type: string\n              description: \u003e\n                The content of the descriptor as a string.\n                It will not be used by the gatekeeper, but stored for later client-side usage.\n    Descriptors:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/Descriptor\"\n\n    Service:\n      allOf:\n        - $ref: \"#/components/schemas/BaseEntity\"\n        - type: object\n          required:\n            - descriptorSnapshots\n            - rootDescriptorId\n          properties:\n            descriptorSnapshots:\n              $ref: \"#/components/schemas/Descriptors\"\n            rootDescriptorId:\n              type: string\n              format: uuid\n            vendor:\n              type: string\n              example: \"my.vendor\"\n            name:\n              type: string\n              example: \"my-service\"\n            version:\n              type: string\n              example: \"1.0\"\n    Services:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/Service\"\n\n    ServiceInstance:\n      allOf:\n        - $ref: \"#/components/schemas/BaseEntity\"\n        - type: object\n          required:\n            - status\n          properties:\n            status:\n              type: string\n    ServiceInstances:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/ServiceInstance\"\n\n    ResourceUsageData:\n      type: \"object\"\n      required:\n        - used\n        - total\n      properties:\n        used:\n          type: number\n        total:\n          type: number\n    BaseVim:\n      required:\n        - id\n        - name\n        - country\n        - city\n        - resourceUtilization\n      properties:\n        id:\n          type: string\n          format: uuid\n          readOnly: true\n        name:\n          type: string\n        country:\n          type: string\n        city:\n          type: string\n        resourceUtilization:\n          readOnly: true\n          nullable: true # In case of VIM connection error\n          oneOf:\n            # OpenStack, Kubernetes\n            - type: object\n              required:\n                - cores\n                - memory\n              additionalProperties: false\n              properties:\n                cores:\n                  $ref: \"#/components/schemas/ResourceUsageData\"\n                memory:\n                  $ref: \"#/components/schemas/ResourceUsageData\"\n            # AWS (empty object)\n            - type: object\n              additionalProperties: false\n\n    OpenStackVim:\n      allOf:\n        - $ref: \"#/components/schemas/BaseVim\"\n        - type: object\n          required:\n            - address\n            - tenant\n            - username\n            - password\n            - type\n          properties:\n            type:\n              type: string\n              enum: [\"openstack\"]\n            address:\n              type: string\n            tenant:\n              type: object\n              required:\n                - id\n                - externalNetworkId\n                - externalRouterId\n              properties:\n                id:\n                  type: string\n                externalNetworkId:\n                  type: string\n                externalRouterId:\n                  type: string\n            username:\n              type: string\n            password:\n              type: string\n    KubernetesVim:\n      allOf:\n        - $ref: \"#/components/schemas/BaseVim\"\n        - type: object\n          required:\n            - address\n            - port\n            - serviceToken\n            - ccc\n            - type\n          properties:\n            type:\n              type: string\n              enum: [\"kubernetes\"]\n            address:\n              type: string\n            port:\n              type: number\n            serviceToken:\n              type: string\n            ccc:\n              type: string\n    AwsVim:\n      allOf:\n        - $ref: \"#/components/schemas/BaseVim\"\n        - type: object\n          required:\n            - type\n            - accessKey\n            - secretKey\n            - region\n          properties:\n            type:\n              type: string\n              enum: [\"aws\"]\n            accessKey:\n              type: string\n            secretKey:\n              type: string\n            region:\n              type: string\n    AnyVim:\n      oneOf:\n        - $ref: \"#/components/schemas/OpenStackVim\"\n        - $ref: \"#/components/schemas/KubernetesVim\"\n        - $ref: \"#/components/schemas/AwsVim\"\n      discriminator:\n        propertyName: type\n        mapping:\n          openstack: \"#/components/schemas/OpenStackVim\"\n          kubernetes: \"#/components/schemas/KubernetesVim\"\n          aws: \"#/components/schemas/AwsVim\"\n    Vims:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/BaseVim\"\n\n    User:\n      allOf:\n        - $ref: \"#/components/schemas/BaseEntity\"\n        - type: object\n          required:\n            - username\n            - password\n            - isAdmin\n            - fullName\n            - email\n          properties:\n            username:\n              type: string\n            password:\n              type: string\n              writeOnly: true\n            isAdmin:\n              type: boolean\n            fullName:\n              type: string\n            email:\n              type: string\n              format: email\n    Users:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/User\"\n\n    AccessToken:\n      required:\n        - accessToken\n        - accessTokenExpiresIn\n      properties:\n        accessToken:\n          type: string\n        accessTokenExpiresIn:\n          type: integer\n          readOnly: true\n    RefreshToken:\n      required:\n        - refreshToken\n        - refreshTokenExpiresIn\n      properties:\n        refreshToken:\n          type: string\n        refreshTokenExpiresIn:\n          type: integer\n          readOnly: true\n\n    Plugin:\n      required:\n        - id\n        - name\n        - version\n        - description\n        - state\n        - registeredAt\n        - lastHeartbeatAt\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        version:\n          type: string\n        description:\n          type: string\n        state:\n          type: string\n          enum:\n            - RUNNING\n            - PAUSED\n        registeredAt:\n          type: string\n          format: date-time\n        lastHeartbeatAt:\n          type: string\n          format: date-time\n    Plugins:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/Plugin\"\n\n    Message:\n      required:\n        - status\n        - detail\n      properties:\n        status:\n          type: integer\n        detail:\n          type: string\n\n  responses:\n    Error400:\n      description: The request is invalid.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n    Error401:\n      description: The access token is missing or invalid.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n    Error403:\n      description: The endpoint requires elevated privileges.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n    Error404:\n      description: The requested resource could not be found.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n    Error500:\n      description: An unexpected error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: gatekeeper.api.auth.getTokenInfo\n",
			"canonicalURL": "/github.com/CN-UPB/Pishahang@28a6852f529ac73fe28f4448597f455b2d2fe552/-/blob/src/gatekeeper/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/CN-UPB/Pishahang/blob/28a6852f529ac73fe28f4448597f455b2d2fe552/src/gatekeeper/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}