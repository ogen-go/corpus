{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/astarte-platform/astarte_flow"
		},
		"file": {
			"name": "astarte_flow_api.yaml",
			"size": 0,
			"path": "priv/static/astarte_flow_api.yaml",
			"byteSize": 15969,
			"content": "openapi: 3.0.1\nservers:\n  - url: '{base_url}/v1'\n    variables:\n      base_url:\n        default: https://astarte.example.com/flow\n        description: \u003e-\n          The base URL you're serving Astarte Flow from. This should point to the base\n          path from which Flow API is served. If you are using a standard Astarte 1.0\n          installation, with Flow deployed, it is most likely\n          `https://\u003cyour Astarte host\u003e/flow`.\ninfo:\n  description: \u003e-\n    This API allows interacting with Flow and all its resources (pipelines, blocks, flows).\n  version: 0.1.0\n  title: Flow API\n  contact:\n    email: info@ispirata.com\ntags:\n  - name: blocks\n    description: APIs for managing Blocks.\n  - name: pipelines\n    description: APIs for managing Pipelines.\n  - name: flows\n    description: APIs for managing Flows.\npaths:\n  /{realm_name}/blocks:\n    get:\n      tags:\n        - blocks\n      summary: Get all blocks\n      description: Returns a list of all existing blocks, both default and user-defined.\n      operationId: getBlocks\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  data:\n                    - my_custom_block\n                    - http_source\n                    - http_sink\n                    - lua_mapper\n    post:\n      tags:\n        - blocks\n      summary: Create a block\n      description: |\n        Creates a new user-defined block, using the provided source.\n\n        This block can be used as a normal block inside pipelines, and allows\n        the user to create small reusable pipelines usable as single block in\n        larger pipelines\n      operationId: createBlock\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/UserDefinedBlock'\n      requestBody:\n        $ref: '#/components/requestBodies/createBlockBody'\n  '/{realm_name}/blocks/{block_name}':\n    get:\n      tags:\n        - blocks\n      summary: Get block\n      description: Retrieves a blocks's JSON description.\n      operationId: getBlock\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: block_name\n          in: path\n          description: Block name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    oneOf:\n                      - $ref: '#/components/schemas/DefaultBlock'\n                      - $ref: '#/components/schemas/UserDefinedBlock'\n        '404':\n          description: Not found\n    delete:\n      tags:\n        - blocks\n      summary: Delete block\n      description: Deletes a user-defined block\n      operationId: deleteBlock\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: block_name\n          in: path\n          description: Block name\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n\n  '/{realm_name}/pipelines':\n    get:\n      tags:\n        - pipelines\n      summary: Get all pipelines\n      description: Returns a list of all existing pipelines\n      operationId: getPipelines\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  data:\n                    - my-first-pipeline\n                    - my-second-pipeline\n    post:\n      tags:\n        - pipelines\n      summary: Create a pipeline\n      description: |\n        Creates a new pipeline, using the provided source.\n\n        The source of the pipeline can contain parameters that will be defined\n        when instantiating a Flow using this pipeline. This makes it possible to\n        create reusable pipelines that can be specialized when instantiated in\n        a Flow.\n      operationId: createPipeline\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Pipeline'\n      requestBody:\n        $ref: '#/components/requestBodies/createPipelineBody'\n  '/{realm_name}/pipelines/{pipeline_name}':\n    get:\n      tags:\n        - pipelines\n      summary: Get pipeline\n      description: Retrieves an existing pipeline description in JSON format.\n      operationId: getPipeline\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: pipeline_name\n          in: path\n          description: Pipeline name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Pipeline'\n        '404':\n          description: Not found\n    delete:\n      tags:\n        - pipelines\n      summary: Delete pipeline\n      description: |\n        Deletes a pipeline.\n\n        Note that deleting a pipeline will not delete the Flows that are\n        currently using this pipeline, this must be done manually.\n      operationId: deletePipeline\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: pipeline_name\n          in: path\n          description: Pipeline name\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n  '/{realm_name}/flows':\n    get:\n      tags:\n        - flows\n      summary: Get all flows\n      description: Returns a list of all existing flows\n      operationId: getFlows\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  data:\n                    - my-first-flow\n                    - my-second-flow\n    post:\n      tags:\n        - flows\n      summary: Create a flow\n      description: |\n        Creates a new flow, using the provided pipeline and configuration.\n\n        A Flow is a specialized instance of a pipeline, with concrete values\n        for all the parameters defined in the pipeline.\n      operationId: createFlow\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Flow'\n      requestBody:\n        $ref: '#/components/requestBodies/createFlowBody'\n  '/{realm_name}/flows/{flow_name}':\n    get:\n      tags:\n        - flows\n      summary: Get flow\n      description: Retrieves an existing Flow description in JSON format.\n      operationId: getFlow\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: flow_name\n          in: path\n          description: Flow name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Flow'\n        '404':\n          description: Not found\n    delete:\n      tags:\n        - flows\n      summary: Delete flow\n      description: |\n        Deletes a flow, stopping its data processing.\n      operationId: deleteFlow\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the target realm.\n          required: true\n          schema:\n            type: string\n        - name: flow_name\n          in: path\n          description: Flow name\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\ncomponents:\n  securitySchemes:\n    JWT:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: \u003e\n        To access APIs a valid JWT token must be passed in all requests\n        in the `Authorization` header. This token should be signed with\n        the private key belonging to the target realm and should have\n        the appropriate `a_f` authorization claims to perform the\n        requested operation.\n\n        The following syntax must be used in the `Authorization` header :\n          `Bearer xxxxxx.yyyyyyy.zzzzzz`\n\n        Consult Astarte Flow documentation for more information about\n        the authentication and authorization mechanism.\n  requestBodies:\n    createBlockBody:\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/UserDefinedBlock'\n      description: A Block object.\n      required: true\n    createFlowBody:\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/Flow'\n      description: A Flow object.\n      required: true\n    createPipelineBody:\n      content:\n        application/json:\n          schema:\n            properties:\n              data:\n                $ref: '#/components/schemas/Pipeline'\n      description: A Pipeline object.\n      required: true\n  schemas:\n    BlockType:\n      type: string\n      description: The type of the block, i.e. its position in the pipeline.\n      enum:\n        - producer\n        - consumer\n        - producer_consumer\n    ConfigSchema:\n      type: object\n      description: \u003e-\n        A JSON Schema object (implementing this schema http://json-schema.org/draft-04/schema#)\n        used to validate a pipeline (or block) configuration.\n      example:\n        $id: https://example.com/specs/astarte_flow/blocks/my_custom_block.json\n        $schema: http://json-schema.org/draft-04/schema#\n        title: \"MyCustomBlockOptions\"\n        type: \"object\"\n        additionalProperties: false\n        required:\n          - webhook_url\n        properties:\n          webhook_url:\n            type: string\n            description: the target URL to send data to\n    DefaultBlock:\n      type: object\n      required:\n        - name\n        - beam_module\n        - type\n        - schema\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'\n          example: my_custom_block\n        beam_module:\n          type: string\n          example: Astarte.Flow.Blocks.Filter\n        type:\n          $ref: '#/components/schemas/BlockType'\n        schema:\n          $ref: '#/components/schemas/ConfigSchema'\n    Flow:\n      type: object\n      required:\n        - name\n        - pipeline\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            The name of the flow. Since this serves as id, it must be unique at the realm level.\n          pattern: '^[a-zA-Z][a-zA-Z0-9-]*$'\n          example: my-flow\n        pipeline:\n          type: string\n          description: \u003e-\n            The name of the pipeline this Flow will be an instance of.\n          example: my-pipeline\n        config:\n          type: object\n          description: \u003e-\n            The configuration value that will be used to populate the pipeline parameters.\n\n            If the pipeline defines a schema, the config will be validated against it.\n          example:\n            webhook_url: https://example.com/webhook\n    Pipeline:\n      type: object\n      required:\n        - name\n        - source\n      properties:\n        name:\n          type: string\n          description: \u003e-\n            The name of the pipeline. Since this serves as id, it must be unique at the realm level.\n          pattern: '^[a-zA-Z][a-zA-Z0-9-]*$'\n          example: my-pipeline\n        source:\n          $ref: '#/components/schemas/PipelineSource'\n        description:\n          type: string\n          description: An optional pipeline description.\n          example: This pipeline performs linear regression with the data from the last 7 days\n        schema:\n          $ref: '#/components/schemas/ConfigSchema'\n    PipelineSource:\n      type: string\n      description: |\n        A pipeline DSL source, which can also be used to define a custom block.\n\n        Special care must be taken to correctly escape double quotes inside the pipeline\n        source when embedding it inside a JSON. Newlines must be represented as `\\n`.\n      example: |\n        random_source\n        .key(\"test\")\n        | http_sink\n        .url(${$.config.webhook_url})\n    UserDefinedBlock:\n      type: object\n      required:\n        - name\n        - source\n        - type\n        - schema\n      properties:\n        name:\n          type: string\n          description:\n            The name of the block. Since this serves as id, it must be unique at the realm level.\n          pattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'\n          example: my_custom_block\n        source:\n          $ref: '#/components/schemas/PipelineSource'\n        type:\n          $ref: '#/components/schemas/BlockType'\n        schema:\n          $ref: '#/components/schemas/ConfigSchema'\n",
			"canonicalURL": "/github.com/astarte-platform/astarte_flow@2b870392d4cf7dff7e41aa3529da53237d7eaa76/-/blob/priv/static/astarte_flow_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/astarte-platform/astarte_flow/blob/2b870392d4cf7dff7e41aa3529da53237d7eaa76/priv/static/astarte_flow_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}