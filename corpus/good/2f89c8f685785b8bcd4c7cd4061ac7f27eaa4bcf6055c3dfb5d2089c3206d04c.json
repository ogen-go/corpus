{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SCADA-LTS/Scada-LTS"
		},
		"file": {
			"name": "EventsAPI.yaml",
			"size": 0,
			"path": "doc/EventsAPI.yaml",
			"byteSize": 23195,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'http://localhost:8080/ScadaBR/api'\n    description: 'Scada development Server'\n    variables: {}\ninfo:\n  version: 2.6.0\n  title: Scada-LTS API\n  description: 'Scada-LTS OpenAPI Specification. Description contains only a SMS and Email new feature REST API'\n  termsOfService: ''\n  contact:\n    name: 'Radek - SoftQ Developer'\n    email: 'rjajko@softq.pl'\n  license:\n    name: 'GPL-2.0'\npaths:\n  /eventHandler/getAll:\n    get:\n      tags:\n        - EventHandler API\n      summary: 'Get all Event Handlers'\n      description: 'Present Event Handler list of all type of Event Handlers'\n      operationId: 'eventHandlerGetAll'\n      responses:\n        '200':\n          description: 'Fetch successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventHandlerVO'\n          headers: {}\n  /eventHandler/getAllPlc:\n    get:\n      tags:\n        - EventHandler API\n      summary: 'Get all Event Handlers for PLC alarms'\n      description: 'This EventHandlers contain eventTypeId, EventTyepReference and mailing list recipients'\n      operationId: 'eventHandlerGetAllPlc'\n      responses:\n        '200':\n          description: 'Fetch successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventHandlerPlcDTO'\n          headers: {}\n  /eventHandler/get/{xid}:\n    get:\n      tags:\n        - EventHandler API\n      summary: 'Get Event Handler by Export ID'\n      description: 'Get Event Handler by Export ID'\n      operationId: 'eventHandlerGetByXid'\n      parameters:\n        - name: 'xid'\n          in: 'path'\n          required: true\n          schema:\n            type: 'string'\n      responses:\n        '200':\n          description: \"Get successful\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventHandlerVO'\n          headers: {}\n  /eventHandler/get/id/{id}:\n    get:\n      tags:\n        - EventHandler API\n      summary: 'Get Event Handler by EventHandler ID'\n      description: 'Get Event Handler by Event Handler ID'\n      operationId: 'eventHandlerGetById'\n      parameters:\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      responses:\n        '200':\n          description: \"Get successful\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventHandlerVO'\n          headers: {}\n  /eventHandler/get/plc/datapoint/{id}:\n    get:\n      tags:\n        - EventHandler API\n      summary: 'Get Event Handler by DataPoint ID'\n      description: 'Get Event Handler by Data point ID'\n      operationId: 'eventHandlerGetByDataPointId'\n      parameters:\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      responses:\n        '200':\n          description: \"Get successful\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventHandlerPlcDTO'\n          headers: {}\n  /eventHandler/set/{typeId}/{typeRef1}/{typeRef2}/1:\n    post:\n      tags:\n        - EventHandler API\n      summary: 'Create Point Event Handler'\n      description: 'Create a new Event Handler with Point type property'\n      operationId: 'eventHandlerSetEventHandlerPoint'\n      parameters:\n        - name: 'typeId'\n          description: \"Event Handler Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef1'\n          description: \"Data Point ID\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef2'\n          description: \"Event Detector Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Event Handler with Point properties\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: number\n                xid:\n                  type: string\n                alias:\n                  type: string\n                disabled:\n                  type: boolean\n                targetPointId:\n                  type: number\n                activeAction:\n                  type: number\n                activeValueToSet:\n                  type: string\n                activePointId:\n                  type: number\n                inactiveAction:\n                  type: number\n                inactiveValueToSet:\n                  type: string\n                inactivePointId:\n                  type: number\n      responses:\n        '200':\n          description: \"Get successful\"\n          headers: {}\n\n  /eventHandler/set/{typeId}/{typeRef1}/{typeRef2}/2:\n    post:\n      tags:\n        - EventHandler API\n      summary: 'Create Email Event Handler'\n      description: 'Create a new Event Handler with Email type property'\n      operationId: 'eventHandlerSetEventHandlerEmail'\n      parameters:\n        - name: 'typeId'\n          description: \"Event Handler Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef1'\n          description: \"Data Point ID\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef2'\n          description: \"Event Detector Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Event Handler with Point properties\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: number\n                xid:\n                  type: string\n                alias:\n                  type: string\n                disabled:\n                  type: boolean\n                activeRecipients:\n                  type: object\n                sendEscalation:\n                  type: boolean\n                escalationDelayType:\n                  type: number\n                escalationDelay:\n                  type: number\n                escalationRecipients:\n                  type: object\n                sendInactive:\n                  type: boolean\n                inactiveOverride:\n                  type: boolean\n                inactiveRecipients:\n                  type: object\n      responses:\n        '200':\n          description: \"Get successful\"\n          headers: {}\n\n  /eventHandler/set/{typeId}/{typeRef1}/{typeRef2}/3:\n    post:\n      tags:\n        - EventHandler API\n      summary: 'Create Process Event Handler'\n      description: 'Create a new Event Handler with Process type property'\n      operationId: 'eventHandlerSetEventHandlerProcess'\n      parameters:\n        - name: 'typeId'\n          description: \"Event Handler Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef1'\n          description: \"Data Point ID\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef2'\n          description: \"Event Detector Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Event Handler with Point properties\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: number\n                xid:\n                  type: string\n                alias:\n                  type: string\n                disabled:\n                  type: boolean\n                activeProcessCommand:\n                  type: string\n                inactiveProcessCommand:\n                  type: string\n      responses:\n        '200':\n          description: \"Get successful\"\n          headers: {}\n\n  /eventHandler/set/{typeId}/{typeRef1}/{typeRef2}/4:\n    post:\n      tags:\n        - EventHandler API\n      summary: 'Create Script Event Handler'\n      description: 'Create a new Event Handler with Script type property'\n      operationId: 'eventHandlerSetEventHandlerScript'\n      parameters:\n        - name: 'typeId'\n          description: \"Event Handler Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef1'\n          description: \"Data Point ID\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef2'\n          description: \"Event Detector Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Event Handler with Point properties\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: number\n                xid:\n                  type: string\n                alias:\n                  type: string\n                disabled:\n                  type: boolean\n                activeScriptCommand:\n                  type: number\n                inactiveScriptCommand:\n                  type: number\n      responses:\n        '200':\n          description: \"Get successful\"\n          headers: {}\n\n  /eventHandler/update/{typeId}/{typeRef1}/{typeRef2}:\n    put:\n      tags:\n        - EventHandler API\n      summary: 'Update Event Handler'\n      description: 'Update the Event Handler'\n      operationId: 'eventHandlerUpdateEventHandler'\n      parameters:\n        - name: 'typeId'\n          description: \"Event Handler Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef1'\n          description: \"Data Point ID\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'typeRef2'\n          description: \"Event Detector Type\"\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Event Handler with Point properties\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventHandlerVO'\n      responses:\n        '200':\n          description: \"Get successful\"\n          headers: {}\n  /eventHandler/delete/{xid}:\n    delete:\n      tags:\n        - EventHandler API\n      summary: 'Delete Event Handler by Export ID'\n      description: 'Delete Event Handler'\n      operationId: 'eventHandlerDeleteEventHandler'\n      parameters:\n        - name: 'xid'\n          in: 'path'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Delete successful'\n  /eventHandler/delete/id/{id}:\n    delete:\n      tags:\n        - EventHandler API\n      summary: 'Delete Event Handler by ID'\n      description: 'Delete Event Handler'\n      operationId: 'eventHandlerDeleteByID'\n      parameters:\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: 'Delete successful'\n\n  /eventDetector/getAll/{datapointXid}:\n    get:\n      tags:\n        - EventDetector API\n      summary: 'Get all Event Detectors for given DataPoint by its Export ID'\n      description: 'Get all Event Detectors for given DataPoint by its Export ID'\n      operationId: 'eventDetectorGetEventDetectorsByXid'\n      parameters:\n        - name: 'datapointXid'\n          in: 'path'\n          required: true\n          schema:\n            type: 'string'\n      responses:\n        '200':\n          description: 'Get successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PointEventDetectorVO'\n          headers: { }\n\n  /eventDetector/getAll/id/{datapointId}:\n    get:\n      tags:\n        - EventDetector API\n      summary: 'Get all Event Detectors for given DataPoint by its ID'\n      description: 'Get all Event Detectors for given DataPoint by its ID'\n      operationId: 'eventDetectorGetEventDetectorsById'\n      parameters:\n        - name: 'datapointId'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      responses:\n        '200':\n          description: 'Get successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PointEventDetectorVO'\n          headers: { }\n\n  /eventDetector/set/{datapointId}:\n    post:\n      tags:\n        - EventDetector API\n      summary: 'Create Point Event Detector'\n      description: 'Create a new Event Detector of specific type for DataPoint by its ID'\n      operationId: 'eventDetectorCreateEventDetector'\n      parameters:\n        - name: 'datapointId'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Point Event Detector with properties of one of detector type\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONPointEventDetectorVO'\n      responses:\n        '200':\n          description: \"Post successful\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONPointEventDetectorVO'\n          headers: { }\n\n  /eventDetector/update/{datapointId}/{id}:\n    put:\n      tags:\n        - EventDetector API\n      summary: 'Update Point Event Detector'\n      description: 'Update an existing Event Detector of given ID for Data Point'\n      operationId: 'eventDetectorUpdateEventDetector'\n      parameters:\n        - name: 'datapointId'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      requestBody:\n        description: Point Event Detector with properties of one of detector type\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONPointEventDetectorVO'\n      responses:\n        '200':\n          description: \"Put successful\"\n          headers: { }\n\n  /eventDetector/delete/{datapointId}/{id}:\n    delete:\n      tags:\n        - EventDetector API\n      summary: 'Delete Event Detector for given Point by ID'\n      description: 'Delete Event Detector'\n      operationId: 'eventDetectorDeleteEventHandlerById'\n      parameters:\n        - name: 'datapointId'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      responses:\n        '200':\n          description: 'Delete successful'\n\n  /mailingList/getAll:\n    get:\n      tags:\n        - MailingList API\n      summary: 'Get all MailingLists'\n      description: 'Get all MailingLists'\n      operationId: 'mailingListGetMailingLists'\n      responses:\n        '200':\n          description: 'Get successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MailingList'\n          headers: { }\n  /mailingList/get/id/{id}:\n    get:\n      tags:\n        - MailingList API\n      summary: 'Get MailingList by ID'\n      description: 'Get MailingList by ID'\n      operationId: 'mailingListGetMailingListsById'\n      parameters:\n        - name: 'id'\n          in: 'path'\n          required: true\n          schema:\n            type: 'number'\n      responses:\n        '200':\n          description: 'Get successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MailingList'\n          headers: { }\n  /mailingList/get/{xid}:\n    get:\n      tags:\n        - MailingList API\n      summary: 'Get MailingList by Export ID'\n      description: 'Get MailingList by Export ID'\n      operationId: 'mailingListGetMailingListsByXid'\n      parameters:\n        - name: 'xid'\n          in: 'path'\n          required: true\n          schema:\n            type: 'string'\n      responses:\n        '200':\n          description: 'Get successful'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MailingList'\n          headers: { }\ncomponents:\n  schemas:\n    EventHandlerPlcDTO:\n      type: object\n      properties:\n        id:\n          type: number\n        xid:\n          type: string\n        alias:\n          type: string\n        eventTypeId:\n          type: number\n        eventTypeRef1:\n          type: number\n        eventTypeRef2:\n          type: number\n        recipients:\n          type: array\n          items:\n            type: object\n            properties:\n              recipientType:\n                type: number\n              referenceId:\n                type: number\n              referenceAddress:\n                type: string\n    EventHandlerVO:\n      type: object\n      properties:\n        id:\n          type: number\n        xid:\n          type: string\n        alias:\n          type: string\n        handlerType:\n          type: number\n        disabled:\n          type: boolean\n        targetPointId:\n          type: number\n        activeAction:\n          type: number\n        activeValueToSet:\n          type: string\n        activePointId:\n          type:  number\n        inactiveAction:\n          type: number\n        inactiveValueToSet:\n          type: string\n        inactivePointId:\n          type: number\n        activeRecipients:\n          type: array\n          items:\n            type: object\n            properties:\n              recipientType:\n                type: number\n              referenceId:\n                type: number\n              referenceAddress:\n                type: string\n        sendEscalation:\n          type: boolean\n        escalationDelayType:\n          type: number\n        escalationDelay:\n          type: number\n        escalationRecipients:\n          type: array\n          items:\n            type: string\n        sendInactive:\n          type: boolean\n        inactiveOverride:\n          type: boolean\n        inactiveRecipients:\n          type: array\n          items:\n            type: string\n        activeProcessCommand:\n          type: string\n        inactiveProcessCommand:\n          type: string\n        activeScriptCommand:\n          type: number\n        inactiveScriptCommand:\n          type: number\n        typeKey:\n          type: string\n        message:\n          type: object\n          properties:\n            key:\n              type: string\n            args:\n              type: array\n              items:\n                type: string\n    PointEventDetectorVO:\n      type: object\n      properties:\n        id:\n          type: number\n        xid:\n          type: string\n        alias:\n          type: string\n        detectorType:\n          type: number\n        alarmLevel:\n          type: number\n        limit:\n          type: number\n        duration:\n          type: number\n        durationType:\n          type: number\n        binaryState:\n          type: boolean\n        multistateState:\n          type: number\n        changeCount:\n          type: number\n        alphanumericState:\n          type: number\n        weight:\n          type: number\n        description:\n          type: object\n          properties:\n            key:\n              type: string\n            args:\n              type: array\n              items:\n                type: string\n        eventType:\n          type: object\n          properties:\n            typeId:\n              type: number\n            typeRef1:\n              type: number\n            typeRef2:\n              type: number\n            description:\n              type: object\n              properties:\n                key:\n                  type: string\n                args:\n                  type: array\n                  items:\n                    type: string\n            handlers:\n              type: object\n            alarmLevel:\n              type: number\n            eventDetectorKey:\n              type: string\n        rtnApplicable:\n          type: boolean\n        eventDetectorKey:\n          type: string\n        def:\n          type: object\n          properties:\n            id:\n              type: number\n            name:\n              type: string\n            exportName:\n              type: string\n            nameKey:\n              type: string\n            supportedDataTypes:\n              type: array\n              items:\n                type: number\n        typeKey:\n          type: string\n        durationDescription:\n          type: object\n          properties:\n            key:\n              type: string\n            args:\n              type: array\n              items:\n                type: object\n    JSONPointEventDetectorVO:\n      type: object\n      properties:\n        id:\n          type: number\n        xid:\n          type: string\n        alias:\n          type: string\n        detectorType:\n          type: number\n        alarmLevel:\n          type: number\n        limit:\n          type: number\n        duration:\n          type: number\n        durationType:\n          type: number\n        binaryState:\n          type: boolean\n        multistateState:\n          type: number\n        changeCount:\n          type: number\n        alphanumericState:\n          type: number\n        weight:\n          type: number\n    MailingList:\n      type: object\n      properties:\n        id:\n          type: number\n        xid:\n          type: string\n        entries:\n          type: array\n          items:\n            type: object\n        inactiveIntervals:\n          type: array\n          items:\n            type: object\n        recipientType:\n          type: number\n        referenceId:\n          type: number\n        referenceAddress:\n          type: string\n  parameters:\n    Authorization:\n      name: Authorization\n      in: header\n      required: true\n      style: simple\n      schema:\n        type: string\n        example: Basic YWRtaW46YWRtaW4=\n      description: ''\n    Content-Type:\n      name: Content-Type\n      in: header\n      required: true\n      style: simple\n      schema:\n        type: string\n        example: application/json\nsecurity: []\ntags: []\nexternalDocs:\n  url: ''\n  description: ''",
			"canonicalURL": "/github.com/SCADA-LTS/Scada-LTS@1885ad51e0c44c629f6f4123c621a16f1b8bcbca/-/blob/doc/EventsAPI.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SCADA-LTS/Scada-LTS/blob/1885ad51e0c44c629f6f4123c621a16f1b8bcbca/doc/EventsAPI.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}