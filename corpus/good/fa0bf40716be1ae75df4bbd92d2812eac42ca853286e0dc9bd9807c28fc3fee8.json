{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/WorldModelers/ModelService"
		},
		"file": {
			"name": "model_service_api.yaml",
			"size": 0,
			"path": "model_service_api.yaml",
			"byteSize": 18919,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"ModelService API\"\n  description: \"This API specification is for the World Modelers Modeling Service System. The goal of this API is to provide a controller for model discovery and exploration, as well as for initializing and managing model runs.\"\n  version: \"1.0.0\"\n  \nservers:\n  - url: https://model-service.worldmodelers.com\n    description: Future (production) server\n  - url: http://localhost:8080\n    description: Local server for testing\n  \npaths:\n  /list_models:\n    post:\n      tags:\n      - \"exploration\"\n      summary: \"Obtain a list of current models\"\n      description: \"Request a list of currently available models.\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableModels'\n  /model_info/{ModelName}:\n    get:\n      tags:\n      - \"exploration\"\n      summary: \"Get basic metadata information for a specified model.\"\n      description: \"Submit a model name and receive metadata information about the model, such as its purpose, who maintains it, and how it can be run.\"\n      parameters:\n      - in: path\n        name: ModelName\n        description: \"The name of a model.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ModelName\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Model'\n  /model_outputs/{ModelName}:\n    get:\n      tags:\n      - \"exploration\"\n      summary: \"Obtain information on a given model's outputs.\"\n      description: \"Submit a model name and receive information about the output variables produced by this model.\"\n      parameters:\n      - in: path\n        name: ModelName\n        description: \"The name of a model.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ModelName\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: '#/components/schemas/Variable'\n  /model_parameters/{ModelName}:\n    get:\n      tags:\n      - \"exploration\"\n      summary: \"Obtain information about a model's parameters.\"\n      description: \"Submit a model name and receive information about the parameters used by this model. Specific parameters are used on a per-configuration basis.\"\n      parameters:\n      - in: path\n        name: ModelName\n        description: \"The name of a model.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ModelName\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: '#/components/schemas/Parameter'\n  /model_config/{ModelName}:\n    get:\n      tags:\n      - \"exploration\"\n      summary: \"Obtain configurations for a given model.\"\n      description: \"Submit a model name and receive all configurations for the given model.\"\n      parameters:\n      - in: path\n        name: ModelName\n        description: \"The name of a model.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ModelName\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelConfig'\n  /list_concepts:\n    get:\n      tags:\n      - \"concepts\"\n      summary: \"Obtain a list of available concepts\"\n      description: \u003e\n        Request a list of currently available concepts. These are derived from the list of \n        [UN indicators](https://github.com/WorldModelers/Ontologies/blob/master/performer_ontologies/un_to_indicators.tsv) and are tied to model output variables.\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableConcepts'\n  /concept_mapping:\n    get:\n      tags:\n      - \"concepts\"\n      summary: \"Obtain an array of models related to a concept.\"\n      description: \u003e\n        Submit a concept name and optional type and receive an array of concepts\n        related to that concept.      \n      parameters:\n      - in: query\n        name: concept\n        description: \"A concept name\"\n        required: false\n        schema:\n          $ref: \"#/components/schemas/ConceptName\"      \n      - in: query\n        name: concept_type\n        description: The type of concept objects to return\n        schema:\n          type: string\n          enum:\n            - \"model\"\n            - \"output\"\n            - \"parameter\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConceptMapping'   \n  /run_model:\n    post:\n      tags:\n      - \"execution\"\n      summary: \"Run a model for a given a configuration\"\n      description: \"Submit a configuration to run a specific model. Model is run asynchronously. Results are available through `/run_results` endpoint. Note that the `requestBody` must include a `config` object which should have as its `keys` the appropriate model `parameter` `labels`. Each `key` should have a corresponding `parameter` `value`. If a `parameter` is missing it will be defaulted.\"\n      requestBody:\n        description: \"Model and configuration parameters\"\n        required: true\n        content:\n          application/json:\n            schema: \n              $ref: \"#/components/schemas/ModelConfig\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunID\"\n  /run_status/{RunID}:\n    get:\n      tags:\n      - \"execution\"\n      summary: \"Obtain status for a given model run\"\n      description: \"Submit a `RunID` and receive the model run status\"\n      parameters:\n      - in: path\n        name: RunID\n        description: \"The `ID` for a given model run.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/RunID\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunStatus'\n  /run_results/{RunID}:\n    get:\n      tags:\n      - \"execution\"\n      summary: \"Obtain metadata about the results of a given model run\"\n      description: \"Submit a `RunID` and receive model run results metadata, including whether it succeeded or failed and where to access the result data.\"\n      parameters:\n      - in: path\n        name: RunID\n        description: \"The ID for a given model run.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/RunID\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunResults'\n  /list_runs/{ModelName}:\n    get:\n      tags:\n      - \"execution\"\n      summary: \"Obtain a list of runs for a given model\"\n      description: \"Submit a `ModelName` and receive an array of `RunID`s associated with the given model.\"\n      parameters:\n      - in: path\n        name: ModelName\n        description: \"A model name\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ModelName\"\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: '#/components/schemas/RunID'\n  /available_results:\n    get:\n      tags:\n      - \"execution\"\n      summary: \"Obtain a list of run results\"\n      description: \"Return a list of all available run results.\"\n      parameters:\n      - in: query\n        name: ModelName\n        description: \"A model name\"\n        required: false\n        schema:\n          $ref: \"#/components/schemas/ModelName\"      \n      - in: query\n        name: size\n        description: The maximum number of results to return.\n        schema:\n          type: integer\n      responses:\n        200:\n          description: \"SUCCESS\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: '#/components/schemas/RunResults'                   \n  /result_file/{ResultFileName}:\n    get:\n      tags:\n      - \"execution\"\n      summary: \"Obtain the result file for a given model run.\"\n      description: \"Submit a `ResultFileName` and receive model run result file.\"\n      parameters:\n      - in: path\n        name: ResultFileName\n        description: \"A file name of a result file.\"\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ResultFileName\"\n      responses:\n        '200':\n          description: A result file\n\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    ModelName:\n      type: \"string\"\n      description: \"A model's name\"\n      example: \"FSC\" \n    StandardName:\n      type: \"object\"\n      description: \"A standard name representation\"\n      required:\n        - \"standard_variable_id\"\n        - \"standard_variable_name\"\n        - \"standard_variable_uri\"\n      properties:\n        standard_variable_id:\n          type: \"string\"\n          description: \"The MINT UUID associated with the standard name\"\n          example: \"df1daca4-d727-5dc8-bfa4-fb20c717a32b\"\n        standard_variable_name:\n          type: \"string\"\n          description: \"The natural language name for a standard name\"\n          example: \"year\"\n        standard_variable_uri:\n          type: \"string\"\n          description: \"The URI associated with the standard name\"\n          example: \"http://www.geoscienceontology.org/svo/svl/property#year\"\n    Model:\n      type: \"object\"\n      required:\n      - \"name\"\n      - \"description\"\n      - \"maintainer\"\n      - \"label\"\n      description: \"An object defining high-level metadata about a model\"\n      properties:\n        name:\n          $ref: '#/components/schemas/ModelName'\n        label: \n          type: \"string\"\n          description: \"The human readable name of the model\"\n        versions:\n          type: \"array\"\n          items:\n            type: \"string\"\n          example: [\"1.1\", \"1.2\", \"LATEST\"]\n          description: \"Latest model version\"\n        maintainer:\n          type: \"string\"\n          description: \"Maintainer information for this model. Should include institution name and point of contact.\"\n          example: \"Michael Puma, Columbia University\"\n        description:\n          type: \"string\"\n          description: \"A basic overview of the model's purpose.\"\n          example: \"FSC single country shock configuration.\"\n        category: \n          # this may ultimately be an enumerated (fixed) string \n          # e.g. select from one of the following (from ontology)\n          type: \"array\"\n          description: \"The category for the given model.\"\n          items:\n            type: \"string\"\n          example: [\"Agriculture\", \"Economic\"]\n    AvailableModels:\n      type: \"array\"\n      items:\n        $ref: '#/components/schemas/Model'\n      uniqueItems: true\n      description: \"An array of available models\"\n    ModelConfig:\n      # this can be an example config, or a config submitted to execute\n      # a job. This is loosely defined for the time being.\n      # note that the `valid` and `error` fields should only be \n      # completed when associated with the `validate_config` endpoint\n      type: \"object\"\n      description: \"A model configuration file (JSON).\"\n      required:\n        - \"name\"\n        - \"config\"\n      properties:\n        name: \n          $ref: '#/components/schemas/ModelName'\n        config:\n          type: \"object\"\n    Variable:\n    # the variable can have arbitrary information stored in its metadata field\n      type: \"object\"\n      description: \"A variable used in a model input or output file.\"\n      required:\n        - \"name\"\n        - \"description\"\n      properties:\n        name: \n          type: \"string\"\n        description:\n          type: \"string\"\n        units:\n          type: \"string\"\n        metadata:\n          type: \"object\"\n    Parameter:\n      type: \"object\"\n      description: \"A user configurable model parameter\"\n      required:\n        - \"name\"\n        - \"description\"\n      properties:\n        name:\n          type: \"string\"\n          description: \"The name of the parameter\"\n          example: \"crop\"\n        description: \n          type: \"string\"\n          description: \"Natural language description of parameter\"\n          example: \"Choose the crop of interest from one of [millet, maize, wheat].\"\n        type:\n          type: \"string\"\n          description: \"The parameter's type\"\n          example: \"StringParameter\"\n          enum: \n            - NumberParameter\n            - ChoiceParameter\n            - TimeParameter\n            - GeoParameter\n            - StringParameter\n        default_value:\n          description: \"The parameter's default value. Type depends on the parameter's type.\"\n          example: \"maize\"\n        minimum:\n          description: \"The parameter's minimum allowed value. Type depends on the parameter's type.\"\n        maximum:\n          description: \"The parameter's maximum allowed value. Type depends on the parameter's type.\"\n        choices:\n          type: \"array\"\n          items:\n            oneOf:\n              - type: string\n              - type: integer\n          description: An array of choices available for a parameter of type ChoiceParameter\n          example: [\"millet\", \"maize\", \"wheat\"]\n    SearchResult:\n      type: \"array\"\n      description: \"The result of a search\"\n      items:\n        type: \"object\"\n    Query:\n      type: \"object\"\n      required:\n        - \"query_type\"\n        - \"result_type\"\n      discriminator: \n        propertyName: query_type\n      properties:\n        query_type:\n          type: \"string\"\n          description: \"Is this a geo, time or text query?\"\n          enum: [\"geo\", \"time\", \"text\"]\n        result_type:\n          type: \"string\"\n          description: \"Should the query return models, datasets, or variables?\"\n          enum: [\"models\", \"datasets\", \"variables\"]  \n    GeoQuery:\n      allOf: \n        - $ref: \"#/components/schemas/Query\"\n        - type: \"object\"\n          description: \"A geospatial bounding box search parameter is 4-elements in the WGS84 coordinate system: [xmin, ymin, xmax, ymax]. x is longitude, y is latitude\"\n          required:\n            - \"xmin\"\n            - \"xmax\"\n            - \"ymin\"\n            - \"ymax\"\n            - \"result_type\"\n          properties:\n            xmin:\n              description: \"Minimum longitude\"\n              type: \"number\"\n            xmax:\n              description: \"Maximum longitude\"\n              type: \"number\"\n            ymin:\n              description: \"Minimum latitude\"\n              type: \"number\"\n            ymax:\n              description: \"Maximum latitude\"\n              type: \"number\"\n    TimeQuery:\n      allOf:\n        - $ref: \"#/components/schemas/Query\"\n        - type: \"object\"      \n          description: \"A query defined by a start and end time.\"\n          required:\n            - \"start_time\"\n            - \"end_time\"\n          properties:\n            start_time:\n              description: \"Minimum time for search query.\"\n              type: \"string\"\n            end_time:\n              description: \"Maximum time for search query\"\n              type: \"string\"\n    TextQuery:\n      allOf:\n        - $ref: \"#/components/schemas/Query\"\n        - type: \"object\"      \n          description: \"A text string based query.\"\n          required:\n            - \"type\"\n            - \"term\"\n          properties:\n            type: \n              description: \"The type of query (either keyword or standard name)\"\n              type: \"string\"\n              enum:\n                - \"keyword\"\n                - \"standard name\"\n            term:\n              description: \"The search term of interest.\"\n              type: \"string\"\n    RunID:\n      type: \"string\"\n      description: \"ID associated with a model run. This is the SHA256 hash of the ModelConfig sent to the /run_model endpoint\"\n      example: \"3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04\"\n    ResultFileName:\n      type: \"string\"\n      description: \"The name of a model run result file.\"\n      example: \"3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04.csv\"      \n    RunStatus:\n      type: \"string\"\n      description: \"Status information about a model run.\"\n      enum:\n        - \"PENDING\"\n        - \"FAIL\"\n        - \"SUCCESS\"\n    RunResults:\n      type: \"object\"\n      description: \"Metadata about the results of a given model run.\"\n      required:\n        - \"config\"\n        - \"status\"\n        - \"output\"\n      properties:\n        config:\n          $ref: \"#/components/schemas/ModelConfig\"\n        status:\n          type: \"string\"\n          enum: [\"SUCCESS\", \"FAIL\", \"PENDING\"]\n        output:\n          type: \"string\"\n          description: \"URI for accessing output (for example, on S3)\"\n        auth_required:\n          description: \"Does accessing this model output require authentification? True if requires auth.\"\n          type: boolean\n        timestamp:\n          description: \"Epoch timestamp when the model run was initiated (epoch millis)\"\n          type: integer\n    Error:\n      type: \"object\"\n      description: \"Arbitrary error object.\"\n    ConceptName:\n      type: \"string\"\n      description: \"A concept's name\"\n      example: \"precipitation\"\n    Concept:\n      type: \"object\"\n      description: \"A model, parameter, or output variable related to a concept\"\n      required:\n        - \"name\"\n        - \"score\"\n        - \"type\"\n      properties:\n        name:\n          type: \"string\"\n          description: \"The object name\"\n        score:\n          type: \"number\"\n          description: \"The score for the object in relation to the concept (higher is closer match)\"\n        type:\n          type: \"string\"\n          description: \"Whether the object is related to a model, parameter, or output\"\n          enum: \n            - \"model\"\n            - \"output\"\n            - \"parameter\"\n    AvailableConcepts:\n      type: \"array\"\n      items:\n        $ref: \"#/components/schemas/ConceptName\"\n      uniqueItems: true\n      description: \"An array of available concept names\"\n    ConceptMapping:\n      type: \"array\"\n      description: \u003e\n        An array of objects (models, output variables, or parameters) that relate to a concept\n      items:\n        $ref: \"#/components/schemas/Concept\"",
			"canonicalURL": "/github.com/WorldModelers/ModelService@709326c1f7680baed643e3d47f74fe3525763c8b/-/blob/model_service_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/WorldModelers/ModelService/blob/709326c1f7680baed643e3d47f74fe3525763c8b/model_service_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}