{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/WorldModelers/ModelService"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "REST-Server/openapi_server/openapi/openapi.yaml",
			"byteSize": 21278,
			"content": "openapi: 3.0.0\ninfo:\n  description: This API specification is for the World Modelers Modeling Service System. The goal of this API is to provide a controller for model discovery and exploration, as well as for initializing and managing model runs.\n  title: ModelService API\n  version: 1.0.0\nservers:\n- description: Future (production) server\n  url: https://model-service.worldmodelers.com\n- description: Local server for testing\n  url: http://localhost:8080\npaths:\n  /list_models:\n    post:\n      description: Request a list of currently available models.\n      operationId: list_models_post\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableModels'\n          description: SUCCESS\n      summary: Obtain a list of current models\n      tags:\n      - exploration\n      x-openapi-router-controller: openapi_server.controllers.exploration_controller\n  /model_info/{ModelName}:\n    get:\n      description: Submit a model name and receive metadata information about the model, such as its purpose, who maintains it, and how it can be run.\n      operationId: model_info_model_name_get\n      parameters:\n      - description: The name of a model.\n        explode: false\n        in: path\n        name: ModelName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Model'\n          description: SUCCESS\n      summary: Get basic metadata information for a specified model.\n      tags:\n      - exploration\n      x-openapi-router-controller: openapi_server.controllers.exploration_controller\n  /model_outputs/{ModelName}:\n    get:\n      description: Submit a model name and receive information about the output variables produced by this model.\n      operationId: model_outputs_model_name_get\n      parameters:\n      - description: The name of a model.\n        explode: false\n        in: path\n        name: ModelName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Variable'\n                type: array\n          description: SUCCESS\n      summary: Obtain information on a given model's outputs.\n      tags:\n      - exploration\n      x-openapi-router-controller: openapi_server.controllers.exploration_controller\n  /model_parameters/{ModelName}:\n    get:\n      description: Submit a model name and receive information about the parameters used by this model. Specific parameters are used on a per-configuration basis.\n      operationId: model_parameters_model_name_get\n      parameters:\n      - description: The name of a model.\n        explode: false\n        in: path\n        name: ModelName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Parameter'\n                type: array\n          description: SUCCESS\n      summary: Obtain information about a model's parameters.\n      tags:\n      - exploration\n      x-openapi-router-controller: openapi_server.controllers.exploration_controller\n  /model_config/{ModelName}:\n    get:\n      description: Submit a model name and receive all configurations for the given model.\n      operationId: model_config_model_name_get\n      parameters:\n      - description: The name of a model.\n        explode: false\n        in: path\n        name: ModelName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelConfig'\n          description: SUCCESS\n      summary: Obtain configurations for a given model.\n      tags:\n      - exploration\n      x-openapi-router-controller: openapi_server.controllers.exploration_controller\n  /list_concepts:\n    get:\n      description: |\n        Request a list of currently available concepts. These are derived from the list of  [UN indicators](https://github.com/WorldModelers/Ontologies/blob/master/performer_ontologies/un_to_indicators.tsv) and are tied to model output variables.\n      operationId: list_concepts_get\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AvailableConcepts'\n          description: SUCCESS\n      summary: Obtain a list of available concepts\n      tags:\n      - concepts\n      x-openapi-router-controller: openapi_server.controllers.concepts_controller\n  /concept_mapping:\n    get:\n      description: \"Submit a concept name and optional type and receive an array of\\\n        \\ concepts related to that concept.      \\n\"\n      operationId: concept_mapping_get\n      parameters:\n      - description: A concept name\n        explode: true\n        in: query\n        name: concept\n        required: false\n        schema:\n          $ref: '#/components/schemas/ConceptName'\n        style: form\n      - description: The type of concept objects to return\n        explode: true\n        in: query\n        name: concept_type\n        required: false\n        schema:\n          enum:\n          - model\n          - output\n          - parameter\n          type: string\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConceptMapping'\n          description: SUCCESS\n      summary: Obtain an array of models related to a concept.\n      tags:\n      - concepts\n      x-openapi-router-controller: openapi_server.controllers.concepts_controller\n  /run_model:\n    post:\n      description: Submit a configuration to run a specific model. Model is run asynchronously. Results are available through `/run_results` endpoint. Note that the `requestBody` must include a `config` object which should have as its `keys` the appropriate model `parameter` `labels`. Each `key` should have a corresponding `parameter` `value`. If a `parameter` is missing it will be defaulted.\n      operationId: run_model_post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModelConfig'\n        description: Model and configuration parameters\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunID'\n          description: SUCCESS\n      summary: Run a model for a given a configuration\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\n  /run_status/{RunID}:\n    get:\n      description: Submit a `RunID` and receive the model run status\n      operationId: run_status_run_idget\n      parameters:\n      - description: The `ID` for a given model run.\n        explode: false\n        in: path\n        name: RunID\n        required: true\n        schema:\n          $ref: '#/components/schemas/RunID'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunStatus'\n          description: SUCCESS\n      summary: Obtain status for a given model run\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\n  /run_results/{RunID}:\n    get:\n      description: Submit a `RunID` and receive model run results metadata, including whether it succeeded or failed and where to access the result data.\n      operationId: run_results_run_idget\n      parameters:\n      - description: The ID for a given model run.\n        explode: false\n        in: path\n        name: RunID\n        required: true\n        schema:\n          $ref: '#/components/schemas/RunID'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunResults'\n          description: SUCCESS\n      summary: Obtain metadata about the results of a given model run\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\n  /list_runs/{ModelName}:\n    get:\n      description: Submit a `ModelName` and receive an array of `RunID`s associated with the given model.\n      operationId: list_runs_model_name_get\n      parameters:\n      - description: A model name\n        explode: false\n        in: path\n        name: ModelName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/RunID'\n                type: array\n          description: SUCCESS\n      summary: Obtain a list of runs for a given model\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\n  /available_results:\n    get:\n      description: Return a list of all available run results.\n      operationId: available_results_get\n      parameters:\n      - description: A model name\n        explode: true\n        in: query\n        name: ModelName\n        required: false\n        schema:\n          $ref: '#/components/schemas/ModelName'\n        style: form\n      - description: The maximum number of results to return.\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/RunResults'\n                type: array\n          description: SUCCESS\n      summary: Obtain a list of run results\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\n  /result_file/{ResultFileName}:\n    get:\n      description: Submit a `ResultFileName` and receive model run result file.\n      operationId: result_file_result_file_name_get\n      parameters:\n      - description: A file name of a result file.\n        explode: false\n        in: path\n        name: ResultFileName\n        required: true\n        schema:\n          $ref: '#/components/schemas/ResultFileName'\n        style: simple\n      responses:\n        200:\n          description: A result file\n      summary: Obtain the result file for a given model run.\n      tags:\n      - execution\n      x-openapi-router-controller: openapi_server.controllers.execution_controller\ncomponents:\n  schemas:\n    ModelName:\n      description: A model's name\n      example: FSC\n      type: string\n    StandardName:\n      description: A standard name representation\n      properties:\n        standard_variable_id:\n          description: The MINT UUID associated with the standard name\n          example: df1daca4-d727-5dc8-bfa4-fb20c717a32b\n          type: string\n        standard_variable_name:\n          description: The natural language name for a standard name\n          example: year\n          type: string\n        standard_variable_uri:\n          description: The URI associated with the standard name\n          example: http://www.geoscienceontology.org/svo/svl/property#year\n          type: string\n      required:\n      - standard_variable_id\n      - standard_variable_name\n      - standard_variable_uri\n      type: object\n    Model:\n      description: An object defining high-level metadata about a model\n      example:\n        versions:\n        - \"1.1\"\n        - \"1.2\"\n        - LATEST\n        name: FSC\n        description: FSC single country shock configuration.\n        label: label\n        category:\n        - Agriculture\n        - Economic\n        maintainer: Michael Puma, Columbia University\n      properties:\n        name:\n          description: A model's name\n          example: FSC\n          type: string\n        label:\n          description: The human readable name of the model\n          type: string\n        versions:\n          description: Latest model version\n          example:\n          - \"1.1\"\n          - \"1.2\"\n          - LATEST\n          items:\n            type: string\n          type: array\n        maintainer:\n          description: Maintainer information for this model. Should include institution name and point of contact.\n          example: Michael Puma, Columbia University\n          type: string\n        description:\n          description: A basic overview of the model's purpose.\n          example: FSC single country shock configuration.\n          type: string\n        category:\n          description: The category for the given model.\n          example:\n          - Agriculture\n          - Economic\n          items:\n            type: string\n          type: array\n      required:\n      - description\n      - label\n      - maintainer\n      - name\n      type: object\n    AvailableModels:\n      description: An array of available models\n      items:\n        $ref: '#/components/schemas/Model'\n      type: array\n      uniqueItems: true\n    ModelConfig:\n      description: A model configuration file (JSON).\n      example:\n        name: FSC\n        config: '{}'\n      properties:\n        name:\n          description: A model's name\n          example: FSC\n          type: string\n        config:\n          type: object\n      required:\n      - config\n      - name\n      type: object\n    Variable:\n      description: A variable used in a model input or output file.\n      example:\n        metadata: '{}'\n        name: name\n        description: description\n        units: units\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        units:\n          type: string\n        metadata:\n          type: object\n      required:\n      - description\n      - name\n      type: object\n    Parameter:\n      description: A user configurable model parameter\n      example:\n        name: crop\n        description: Choose the crop of interest from one of [millet, maize, wheat].\n        maximum: \"\"\n        default_value: maize\n        type: StringParameter\n        choices:\n        - millet\n        - maize\n        - wheat\n        minimum: \"\"\n      properties:\n        name:\n          description: The name of the parameter\n          example: crop\n          type: string\n        description:\n          description: Natural language description of parameter\n          example: Choose the crop of interest from one of [millet, maize, wheat].\n          type: string\n        type:\n          description: The parameter's type\n          enum:\n          - NumberParameter\n          - ChoiceParameter\n          - TimeParameter\n          - GeoParameter\n          - StringParameter\n          example: StringParameter\n          type: string\n        default_value:\n          description: The parameter's default value. Type depends on the parameter's type.\n          example: maize\n        minimum:\n          description: The parameter's minimum allowed value. Type depends on the parameter's type.\n        maximum:\n          description: The parameter's maximum allowed value. Type depends on the parameter's type.\n        choices:\n          description: An array of choices available for a parameter of type ChoiceParameter\n          example:\n          - millet\n          - maize\n          - wheat\n          items:\n            oneOf:\n            - type: string\n            - format: int32\n              type: integer\n          type: array\n      required:\n      - description\n      - name\n      type: object\n    SearchResult:\n      description: The result of a search\n      items:\n        type: object\n      type: array\n    Query:\n      discriminator:\n        propertyName: query_type\n      properties:\n        query_type:\n          description: Is this a geo, time or text query?\n          enum:\n          - geo\n          - time\n          - text\n          type: string\n        result_type:\n          description: Should the query return models, datasets, or variables?\n          enum:\n          - models\n          - datasets\n          - variables\n          type: string\n      required:\n      - query_type\n      - result_type\n      type: object\n    GeoQuery:\n      allOf:\n      - $ref: '#/components/schemas/Query'\n      - description: 'A geospatial bounding box search parameter is 4-elements in\n          the WGS84 coordinate system: [xmin, ymin, xmax, ymax]. x is longitude, y\n          is latitude'\n        properties:\n          xmin:\n            description: Minimum longitude\n            type: number\n          xmax:\n            description: Maximum longitude\n            type: number\n          ymin:\n            description: Minimum latitude\n            type: number\n          ymax:\n            description: Maximum latitude\n            type: number\n        required:\n        - result_type\n        - xmax\n        - xmin\n        - ymax\n        - ymin\n        type: object\n    TimeQuery:\n      allOf:\n      - $ref: '#/components/schemas/Query'\n      - description: A query defined by a start and end time.\n        properties:\n          start_time:\n            description: Minimum time for search query.\n            type: string\n          end_time:\n            description: Maximum time for search query\n            type: string\n        required:\n        - end_time\n        - start_time\n        type: object\n    TextQuery:\n      allOf:\n      - $ref: '#/components/schemas/Query'\n      - description: A text string based query.\n        properties:\n          type:\n            description: The type of query (either keyword or standard name)\n            enum:\n            - keyword\n            - standard name\n            type: string\n          term:\n            description: The search term of interest.\n            type: string\n        required:\n        - term\n        - type\n        type: object\n    RunID:\n      description: ID associated with a model run. This is the SHA256 hash of the ModelConfig sent to the /run_model endpoint\n      example: 3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04\n      type: string\n    ResultFileName:\n      description: The name of a model run result file.\n      example: 3A3B3E0AE57AD4A7EF658C1F7832774F55E403F01FDF44B68B355EC4587D7A04.csv\n      type: string\n    RunStatus:\n      description: Status information about a model run.\n      enum:\n      - PENDING\n      - FAIL\n      - SUCCESS\n      type: string\n    RunResults:\n      description: Metadata about the results of a given model run.\n      example:\n        output: output\n        auth_required: true\n        config:\n          name: FSC\n          config: '{}'\n        status: SUCCESS\n        timestamp: 0\n      properties:\n        config:\n          $ref: '#/components/schemas/ModelConfig'\n        status:\n          enum:\n          - SUCCESS\n          - FAIL\n          - PENDING\n          type: string\n        output:\n          description: URI for accessing output (for example, on S3)\n          type: string\n        auth_required:\n          description: Does accessing this model output require authentification? True if requires auth.\n          type: boolean\n        timestamp:\n          description: Epoch timestamp when the model run was initiated (epoch millis)\n          format: int32\n          type: integer\n      required:\n      - config\n      - output\n      - status\n      type: object\n    Error:\n      description: Arbitrary error object.\n      type: object\n    ConceptName:\n      description: A concept's name\n      example: precipitation\n      type: string\n    Concept:\n      description: A model, parameter, or output variable related to a concept\n      example:\n        score: 0.80082819046101150206595775671303272247314453125\n        name: name\n        type: model\n      properties:\n        name:\n          description: The object name\n          type: string\n        score:\n          description: The score for the object in relation to the concept (higher is closer match)\n          type: number\n        type:\n          description: Whether the object is related to a model, parameter, or output\n          enum:\n          - model\n          - output\n          - parameter\n          type: string\n      required:\n      - name\n      - score\n      - type\n      type: object\n    AvailableConcepts:\n      description: An array of available concept names\n      items:\n        $ref: '#/components/schemas/ConceptName'\n      type: array\n      uniqueItems: true\n    ConceptMapping:\n      description: |\n        An array of objects (models, output variables, or parameters) that relate to a concept\n      items:\n        $ref: '#/components/schemas/Concept'\n      type: array\n  securitySchemes:\n    BasicAuth:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/WorldModelers/ModelService@709326c1f7680baed643e3d47f74fe3525763c8b/-/blob/REST-Server/openapi_server/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/WorldModelers/ModelService/blob/709326c1f7680baed643e3d47f74fe3525763c8b/REST-Server/openapi_server/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	}
}