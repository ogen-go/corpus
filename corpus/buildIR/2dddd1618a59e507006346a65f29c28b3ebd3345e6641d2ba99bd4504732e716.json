{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ozonep/openapi-fastify-codegen"
		},
		"file": {
			"name": "challenge.yaml",
			"size": 0,
			"path": "tests/openapi3/challenge.yaml",
			"byteSize": 21332,
			"content": "openapi: 3.0.2\ninfo:\n  title: Challenge Service\n  version: 0.1.0\n  description: |\n    A Challenge consists of multiple exercises, that together lead\n    the user towards some meaningful goal. The goal may be to establish \n    a baseline of skills (assessment), or simply building something \n    interesting.\n\n    # Introduction\n    The Challenge service supplies data to our challenge catalog which\n    can be found on our landing page.\n\n    # Authentication\n    This API supports OAuth2, and more specifically, the implicit flow.\n\n\n    \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\n  contact:\n    name: Developer @Sci-Code\n    url: 'https://sci-code.com'\n    email: developer@sci-code.com\n  license:\n    name: Copyright © Sci-Code Inc. All Rights Reserved\n    url: 'https://sci-code.com'\ntags:\n  - name: Challenges\n    description: |-\n      The ```Challenge``` object holds the information that\n      describes a particular challenge.\npaths:\n  /challenges:\n    post:\n      operationId: createChallenge\n      summary: Create Challenge object\n      description: Creates a new Challenge object.\n      security:\n        - OAuth2:\n            - 'write:challenges'\n      tags:\n        - Challenges\n      responses:\n        '201':\n          description: Created\n          content:\n            multipart/form-data:\n              schema:\n                $ref: '#/components/schemas/RetrieveChallenge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateChallenge'\n    get:\n      operationId: getChallenges\n      summary: List all challenges\n      description: Returns a list of your challenges.\n      tags:\n        - Challenges\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RetrieveChallenge'\n      parameters: []\n  '/challenges/{id}':\n    get:\n      operationId: getChallenge\n      tags:\n        - Challenges\n      summary: Retrieve a Challenge\n      description: 'Retrieves the details of an existing challenge. Simply supply a unique challenge ID, and you''ll get the corresponding challenge information in return.'\n      parameters: []\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RetrieveChallenge'\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n    patch:\n      operationId: updateChallenge\n      summary: Update a Challenge\n      description: 'Updates specific details of an existing challenge. Simply supply a unique challenge ID, and a set of updates in the form of a [JSON Patch](http://jsonpatch.com/) document in the request body.'\n      security:\n        - OAuth2:\n            - 'write:challenges'\n      tags:\n        - Challenges\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchDocument'\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: diggit.eu.auth0.com\n          scopes:\n            'write:challenges': create or update challenges\n  schemas:\n    RetrieveChallenge:\n      allOf:\n        - $ref: '#/components/schemas/Challenge'\n    CreateChallenge:\n      title: CreateChallenge\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/RetrieveChallenge'\n    PatchDocument:\n      description: A JSONPatch document as defined by RFC 6902\n      required:\n        - op\n        - path\n      properties:\n        op:\n          type: string\n          description: The operation to be performed\n          enum:\n            - add\n            - remove\n            - replace\n            - move\n            - copy\n            - test\n        path:\n          type: string\n          description: A JSON-Pointer\n        value:\n          type: object\n          description: The value to be used within the operations.\n        from:\n          type: string\n          description: A string containing a JSON Pointer value.\n    id:\n      description: Unique identifier for the object.\n      type: string\n      example: _ZZrEOIjc2kK3159uVMqxdw\n    object:\n      description: String representing the object’s type. Objects of the same type share the same value.\n      type: string\n    timestamp:\n      description: Date and Time at which the object was created. Measured in seconds since the Unix epoch.\n      type: integer\n      format: int64\n      example: 1581554917050\n    url:\n      description: 'A universal resource identifier (URI), according to the [RFC3986](https://tools.ietf.org/html/rfc3986) standard.'\n      type: string\n      format: uri\n      example: 'https://example.com/some/path'\n    language:\n      description: 'A three-letter ISO code ([ISO 639-3](https://en.wikipedia.org/wiki/ISO_639-3)), representing the language.'\n      type: string\n      minLength: 3\n      maxLength: 3\n      example: eng\n    ExpressionTypes:\n      title: type\n      description: Different kinds of expressions.\n      enum:\n        - text\n        - math\n        - code\n        - image\n        - audio\n        - animation\n        - video\n      type: string\n    Expression:\n      title: Expression\n      description: An expression is a captured moment of menaingful communication - in a speficic medium and/or form.\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        created:\n          $ref: '#/components/schemas/timestamp'\n        type:\n          $ref: '#/components/schemas/ExpressionTypes'\n      required:\n        - created\n        - id\n        - type\n    TextExpression:\n      title: Text Expression\n      description: Expressions captured in rich text.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            content:\n              title: content\n              description: The content in ready-to-go cleartext format.\n              type: string\n              example: 'Hey ho, this is some text in *markdown* format.'\n            language:\n              $ref: '#/components/schemas/language'\n            format:\n              title: format\n              description: The text format.\n              enum:\n                - markdown\n                - plain text\n              type: string\n              default: markdown\n              example: markdown\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: text\n          required:\n            - content\n            - format\n            - language\n    MathExpression:\n      title: Math Expression\n      description: Expressions captured in mathematical notation.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            content:\n              title: content\n              description: The mathematics content.\n              type: string\n              example: '\\\\f{a} = \\\\int_{-\\\\infty}^\\\\infty \\\\hat \\\\f\\\\xi\\\\,e^{2 \\\\pi i \\\\xi x} \\\\,d\\\\xi'\n            format:\n              title: format\n              description: The mathematical notation format.\n              enum:\n                - katex\n                - tex\n              type: string\n              example: katex\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: math\n          required:\n            - content\n            - format\n    ProgrammingLanguage:\n      title: ProgrammingLanguage\n      description: A structure of the programming langague\n      type: object\n      properties:\n        name:\n          title: name\n          description: The name of the programming language.\n          type: string\n        logoUrl:\n          title: logoUrl\n          description: A url to the logo of the language.\n          type: string\n      required:\n        - logoUrl\n        - name\n    CodeExpression:\n      title: Code Expression\n      description: Expressions captured in various coding languages.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            content:\n              title: content\n              description: The code content.\n              type: string\n              example: 'function f(x,y) {\\n  return x+y;\\n}\\n'\n            programmingLanguage:\n              $ref: '#/components/schemas/ProgrammingLanguage'\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: code\n          required:\n            - programmingLanguage\n            - content\n    ImageExpression:\n      title: Image Expression\n      description: Expressions captured in image form.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            src:\n              $ref: '#/components/schemas/url'\n            fileFormat:\n              title: fileFormat\n              description: The specific information encoding method used.\n              enum:\n                - jpg\n                - png\n              type: string\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: image\n          required:\n            - fileFormat\n            - src\n    AudioExpression:\n      title: Audio Expression\n      description: Expressions captured in the form of sound.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            src:\n              $ref: '#/components/schemas/url'\n            fileFormat:\n              title: fileFormat\n              description: The specific information encoding method used.\n              enum:\n                - mp3\n                - ogg\n              type: string\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: audio\n          required:\n            - fileFormat\n            - src\n    AnimationExpression:\n      title: Animation Expression\n      description: Expressions captured in image sequence form; without sound.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            src:\n              $ref: '#/components/schemas/url'\n            fileFormat:\n              title: fileFormat\n              description: The specific information encoding method used.\n              enum:\n                - gif\n                - mp4\n              type: string\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: animation\n          required:\n            - fileFormat\n            - src\n    VideoExpression:\n      title: Video Expression\n      description: Expressions captured in video form.\n      allOf:\n        - $ref: '#/components/schemas/Expression'\n        - type: object\n          properties:\n            src:\n              $ref: '#/components/schemas/url'\n            fileFormat:\n              title: fileFormat\n              description: The specific information encoding method used.\n              type: string\n              enum:\n                - mp4\n            type:\n              allOf:\n                - $ref: '#/components/schemas/ExpressionTypes'\n                - example: video\n          required:\n            - fileFormat\n            - src\n    ExerciseTypes:\n      title: type\n      description: Different kinds of exercises.\n      type: string\n      enum:\n        - free_form\n        - multiple_choice\n        - fill_in_the_blank\n        - command_line\n        - code_snippet\n        - codebase\n        - database\n        - code_review\n    Exercise:\n      title: Exercise\n      description: 'An exercise introduces you to, and invites you to complete, a specific activity.'\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        created:\n          $ref: '#/components/schemas/timestamp'\n        promoImage:\n          allOf:\n            - $ref: '#/components/schemas/url'\n            - description: An image used to promote the exercise.\n        description:\n          title: description\n          description: A set of expressions combined to form a rich description of the activity requested.\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/TextExpression'\n              - $ref: '#/components/schemas/MathExpression'\n              - $ref: '#/components/schemas/CodeExpression'\n              - $ref: '#/components/schemas/ImageExpression'\n              - $ref: '#/components/schemas/AudioExpression'\n              - $ref: '#/components/schemas/AnimationExpression'\n              - $ref: '#/components/schemas/VideoExpression'\n        type:\n          $ref: '#/components/schemas/ExerciseTypes'\n      required:\n        - id\n        - created\n        - description\n        - type\n    OrganizationType:\n      title: type\n      description: The type of organization.\n      type: string\n      enum:\n        - company\n        - ngo\n        - igo\n        - non-profit\n        - government_department\n        - government_agency\n    File:\n      title: File\n      type: object\n      description: An object with information about a file.\n      properties:\n        id:\n          $ref: '#/components/schemas/timestamp'\n        created:\n          $ref: '#/components/schemas/timestamp'\n        title:\n          description: A user friendly title for the file.\n          maxLength: 280\n          nullable: true\n          type: string\n        filename:\n          description: 'A filename for the file, suitable for saving to a filesystem.'\n          nullable: true\n          type: string\n        type:\n          description: String representing the object's type. Objects of the same type share the same value.\n          enum:\n            - file\n          type: string\n          example: file\n        size:\n          description: The size in bytes of the file object.\n          type: integer\n        fileFormat:\n          title: fileFormat\n          description: The specific information encoding method used.\n          enum:\n            - jpg\n            - png\n          nullable: true\n          type: string\n        url:\n          description: The URL from which the file can be downloaded using your live secret API key.\n          type: string\n      required:\n        - id\n        - created\n        - type\n        - url\n        - size\n    OrganizationBranding:\n      title: Organization Branding\n      description: The branding associated with the organization.\n      properties:\n        icon:\n          description: An icon for the account. Must be square and at least 128px x 128px.\n          allOf:\n            - $ref: '#/components/schemas/File'\n            - nullable: true\n        logo:\n          description: A logo for the account that will be used in on pages. Must be at least 128px x 128px.\n          allOf:\n            - $ref: '#/components/schemas/File'\n            - nullable: true\n        primary_color:\n          description: A CSS hex color value representing the primary branding color for this account.\n          nullable: true\n          type: string\n    Organization:\n      title: Organization\n      description: 'An organized group of people with a particular purpose, such as a business, government agency, non-profit, etc.'\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        name:\n          description: The name of the orgnization.\n          type: string\n          example: Sci-Code AS\n        organizationNumber:\n          title: extra info\n          description: 'The number given, proving that the organization exists.'\n          type: string\n          example: Sci-Code AS\n        visionStatement:\n          description: 'A short, descriptive text of what future the organization aims to bring about.'\n          type: string\n          example: 'Sci-Code, as a company, is actively developing services, tools and technologies that contributes towards closing the gap between industry and education. The motivation and value upon which the Company has been built is usefulness. The key of any country’s societal development is based on Education. It is how a generation of people pass its knowledge, know-how and values to the next one. This is why we''re building a new educational system, pillared on the advances in technology that will enable exploratory learning, personalized learning experiences tailored to each individual, and the most  stimulating education in the world; verified by our algorithms. This system will serve as an alternative to the current education system, allowing for a seamless and gradual, piece-by-piece transition. And through building this new system, we allow for the change of our current societal dogma of school and learning being perceived as necessarily boring and hard, into school and learning being AWESOME.'\n        type:\n          $ref: '#/components/schemas/OrganizationType'\n        organizationBranding:\n          $ref: '#/components/schemas/OrganizationBranding'\n      required:\n        - id\n        - name\n        - type\n    Challenge:\n      title: Challenge\n      description: Basically a set of exercises combined for the purpose of testing skills.\n      type: object\n      properties:\n        id:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/id'\n        object:\n          title: value is \"challenge\"\n          allOf:\n            - $ref: '#/components/schemas/object'\n            - pattern: ^challenge$\n            - example: challenge\n            - readOnly: true\n        created:\n          allOf:\n            - $ref: '#/components/schemas/timestamp'\n            - readOnly: true\n        title:\n          description: A short text describing the challenge.\n          type: string\n          example: Build your first Form Component\n        tagline:\n          description: 'A short add-on text, adding more details to the title.'\n          type: string\n          example: Show your skills in React by building a simple form component\n        description:\n          description: A in-depth text describing the challenge.\n          type: array\n          items:\n            title: Challenge Description Section\n            type: object\n            properties:\n              headline:\n                description: The headline of the section.\n                type: string\n              bodycopy:\n                description: Approximately a paragraph of text describing the section.\n                type: string\n              label:\n                description: A piece of text describing the section.\n                type: string\n              featuredBlob:\n                description: A featured image or similar for the section.\n                allOf:\n                  - $ref: '#/components/schemas/url'\n        tags:\n          description: A set of keywords related to the challenge.\n          type: array\n          items:\n            type: string\n          example:\n            - react.js\n            - redux.js\n        promoImage:\n          description: A visual description of the challenge.\n          type: string\n        promoVideo:\n          description: In-depth stimulating descrpitionof the challenge.\n          type: string\n        availabilityRanges:\n          description: The durations where people will be able to take the challenge.\n          type: array\n          items:\n            type: object\n            properties:\n              open_time:\n                description: Date and Time when the challenge opens. Measured in seconds since the Unix epoch.\n                allOf:\n                  - $ref: '#/components/schemas/timestamp'\n              close_time:\n                description: Date and Time at which the challenge closes. Measured in seconds since the Unix epoch.\n                allOf:\n                  - $ref: '#/components/schemas/timestamp'\n        difficulty:\n          description: The difficulty level of the challenge.\n          enum:\n            - beginner\n            - intermediate\n            - advanced\n          type: string\n        langauges:\n          description: The supported languages for this challenge.\n          type: array\n          items:\n            $ref: '#/components/schemas/language'\n        exercises:\n          description: The exercises making up the challenge.\n          type: array\n          items:\n            $ref: '#/components/schemas/Exercise'\n          nullable: true\n        organizers:\n          description: The organization(s) hosting the challenge\n          type: array\n          items:\n            $ref: '#/components/schemas/Organization'\n          nullable: true\n        published:\n          description: 'If the challenge is published, it''ll be listed in the public challenge catalog.'\n          type: boolean\n          default: true\n          example: true\n      required:\n        - id\n        - created\n        - object\n"
		}
	},
	"Error": "buildIR: make ir: path \"/challenges\": get: responses: 200: contents: application/json: generate schema: item: allOf: field created: allOf: schema type mismatch: integer and "
}