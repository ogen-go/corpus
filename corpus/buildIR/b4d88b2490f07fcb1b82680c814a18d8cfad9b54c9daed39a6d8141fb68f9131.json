{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/salto-io/salto"
		},
		"file": {
			"name": "petstore_openapi.v3.yaml",
			"size": 0,
			"path": "packages/adapter-components/test/elements/swagger/petstore_openapi.v3.yaml",
			"byteSize": 21780,
			"content": "openapi: 3.0.1\ninfo:\n  title: Swagger Petstore\n  description: 'This is a sample server Petstore server.  You can find out more about     Swagger\n    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For\n    this sample, you can use the api key `special-key` to test the authorization     filters.'\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n- url: https://petstore.swagger.io/v2\n- url: http://petstore.swagger.io/v2\ntags:\n- name: pet\n  description: Everything about your Pets\n  externalDocs:\n    description: Find out more\n    url: http://swagger.io\n- name: store\n  description: Access to Petstore orders\n- name: user\n  description: Operations about user\n  externalDocs:\n    description: Find out more about our store\n    url: http://swagger.io\npaths:\n  /pet:\n    put:\n      tags:\n      - pet\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Pet not found\n          content: {}\n        405:\n          description: Validation exception\n          content: {}\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      x-codegen-request-body-name: body\n    post:\n      tags:\n      - pet\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        405:\n          description: Invalid input\n          content: {}\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      x-codegen-request-body-name: body\n  /pet/findByStatus:\n    get:\n      tags:\n      - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            default: available\n            enum:\n            - available\n            - pending\n            - sold\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        400:\n          description: Invalid status value\n          content: {}\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n      - pet\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma separated strings. Use         tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        400:\n          description: Invalid tag value\n          content: {}\n      deprecated: true\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n      - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Pet not found\n          content: {}\n      security:\n      - api_key: []\n    post:\n      tags:\n      - pet\n      summary: Updates a pet in the store with form data\n      operationId: updatePetWithForm\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be updated\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                name:\n                  type: string\n                  description: Updated name of the pet\n                status:\n                  type: string\n                  description: Updated status of the pet\n      responses:\n        405:\n          description: Invalid input\n          content: {}\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n    delete:\n      tags:\n      - pet\n      summary: Deletes a pet\n      operationId: deletePet\n      parameters:\n      - name: api_key\n        in: header\n        schema:\n          type: string\n      - name: petId\n        in: path\n        description: Pet id to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Pet not found\n          content: {}\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n      - pet\n      summary: uploads an image\n      operationId: uploadFile\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to update\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                additionalMetadata:\n                  type: string\n                  description: Additional data to pass to server\n                file:\n                  type: string\n                  description: file to upload\n                  format: binary\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /store/inventory:\n    get:\n      tags:\n      - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n      - api_key: []\n  /store/order:\n    post:\n      tags:\n      - store\n      summary: Place an order for a pet\n      operationId: placeOrder\n      requestBody:\n        description: order placed for purchasing the pet\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Order'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        400:\n          description: Invalid Order\n          content: {}\n      x-codegen-request-body-name: body\n  /store/order/{orderId}:\n    get:\n      tags:\n      - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value \u003e= 1 and \u003c= 10.         Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          maximum: 10\n          minimum: 1\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Order not found\n          content: {}\n    delete:\n      tags:\n      - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value.         Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of the order that needs to be deleted\n        required: true\n        schema:\n          minimum: 1\n          type: integer\n          format: int64\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: Order not found\n          content: {}\n  /user:\n    post:\n      tags:\n      - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: successful operation\n          content: {}\n      x-codegen-request-body-name: body\n  /user/createWithArray:\n    post:\n      tags:\n      - user\n      summary: Creates list of users with given input array\n      operationId: createUsersWithArrayInput\n      requestBody:\n        description: List of user object\n        content:\n          '*/*':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: successful operation\n          content: {}\n      x-codegen-request-body-name: body\n  /user/createWithList:\n    post:\n      tags:\n      - user\n      summary: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        description: List of user object\n        content:\n          '*/*':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: successful operation\n          content: {}\n      x-codegen-request-body-name: body\n  /user/login:\n    get:\n      tags:\n      - user\n      summary: Logs user into the system\n      operationId: loginUser\n      parameters:\n      - name: username\n        in: query\n        description: The user name for login\n        required: true\n        schema:\n          type: string\n      - name: password\n        in: query\n        description: The password for login in clear text\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        400:\n          description: Invalid username/password supplied\n          content: {}\n  /user/logout:\n    get:\n      tags:\n      - user\n      summary: Logs out current logged in user session\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n          content: {}\n  /user/{username}:\n    get:\n      tags:\n      - user\n      summary: Get user by user name\n      operationId: getUserByName\n      parameters:\n      - name: username\n        in: path\n        description: 'The name that needs to be fetched. Use user1 for testing. '\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Invalid username supplied\n          content: {}\n        404:\n          description: User not found\n          content: {}\n    put:\n      tags:\n      - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n      - name: username\n        in: path\n        description: name that need to be updated\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Updated user object\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        400:\n          description: Invalid user supplied\n          content: {}\n        404:\n          description: User not found\n          content: {}\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n      - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n      - name: username\n        in: path\n        description: The name that needs to be deleted\n        required: true\n        schema:\n          type: string\n      responses:\n        400:\n          description: Invalid username supplied\n          content: {}\n        404:\n          description: User not found\n          content: {}\n  /foodDetails:\n    get:\n      responses:\n        200:\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FoodAndCategory'\n  /foodOrCategory:\n    get:\n      responses:\n        200:\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FoodOrCategory'\n  /foodXorCategory:\n    get:\n      responses:\n        200:\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FoodXorCategory'\n  /food/{foodId}:\n    get:\n      parameters:\n      - name: foodId\n        in: path\n        description: ID of food to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Food'\n  /location/{locationName}:\n    get:\n      parameters:\n      - name: locationName\n        in: path\n        description: Name of location\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Location'\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n          default: false\n      additionalProperties: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Food:\n      allOf:\n      - type: object\n        properties:\n          id:\n            type: integer\n            format: int64\n          brand:\n            type: string\n          storage:\n            $ref: '#/components/schemas/FoodStorageType'\n          additionalProperties:\n            $ref: '#/components/schemas/Category'\n    FoodAndCategory:\n      allOf:\n      - $ref: '#/components/schemas/Food'\n      - $ref: '#/components/schemas/Category'\n    FoodOrCategory:\n      anyOf:\n      - $ref: '#/components/schemas/Food'\n      - $ref: '#/components/schemas/Category'\n    FoodXorCategory:\n      oneOf:\n      - $ref: '#/components/schemas/Food'\n      - $ref: '#/components/schemas/Category'\n    FoodStorageType:\n      type: array\n      items:\n        type: string\n    User:\n      allOf:\n      - type: object\n        properties:\n          id:\n            type: integer\n            format: int64\n          username:\n            type: string\n          firstName:\n            type: string\n          lastName:\n            type: string\n          email:\n            type: string\n          password:\n            type: string\n          phone:\n            type: string\n          userStatus:\n            type: integer\n            description: User Status\n            format: int32\n      - $ref: '#/components/schemas/UserAdditional1'\n      - $ref: '#/components/schemas/UserAdditional2'\n    UserAdditional1:\n      type: object\n      properties:\n        middleName:\n          type: string\n      additionalProperties:\n        $ref: '#/components/schemas/Order'\n    UserAdditional2:\n      additionalProperties:\n        $ref: '#/components/schemas/Order'\n      allOf:\n      - type: object\n        properties:\n          middleName2:\n            type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      required:\n      - name\n      - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Address:\n      type: object\n      properties:\n        city:\n          type: string\n        country:\n          type: string\n        street:\n          type: string\n        zip:\n          type: number\n    Location:\n      type: object\n      properties:\n        name:\n          type: string\n        address:\n          anyOf:\n            - type: string\n            - $ref: \"#/components/schemas/Address\"\n\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n"
		}
	},
	"Error": "buildIR: make ir: path \"/user/{username}\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch: object and ",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}