{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/featurehub-io/featurehub"
		},
		"file": {
			"name": "1.1.5.yaml",
			"size": 0,
			"path": "infra/api-bucket/files/mrapi/1.1.5.yaml",
			"byteSize": 83146,
			"content": "openapi: 3.0.1\ninfo: {title: ManagementResourceApi, description: This describes the API clients use for accessing features,\n  version: 1.1.5, x-version-api: fragment of version API}\npaths:\n  /mr-api/organization/{id}/group:\n    get:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      description: Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with\n      operationId: getSuperuserGroup\n      parameters:\n      - name: id\n        required: true\n        in: path\n        description: the id of the organisation\n        schema: {type: string, format: uuid}\n      responses:\n        200:\n          description: The superuser group presuming the organization exists\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n  /mr-api/portfolio:\n    parameters:\n    - name: includeGroups\n      description: Include groups for this this portfolio in results\n      in: query\n      schema: {type: boolean}\n    - name: includeApplications\n      description: Include applications for this portfolio in results\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [PortfolioService]\n      description: Gets a list of portfolios.\n      operationId: findPortfolios\n      parameters:\n      - name: order\n        in: query\n        description: how to order the results\n        schema: {$ref: '#/components/schemas/SortOrder'}\n      - name: filter\n        in: query\n        description: What to filter the results by\n        schema: {type: string}\n      - name: parentPortfolioId\n        in: query\n        description: The parent portfolio to search under. If none is provided, use the top level one\n        schema: {type: string}\n      responses:\n        200:\n          description: Gets all portfolios, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Portfolio'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [PortfolioService]\n      description: Create a new portfolio\n      operationId: createPortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Portfolio'}\n      responses:\n        200:\n          description: Resulting portfolio\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Portfolio'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden to create portfolio}\n        404: {description: unable to create portfolio}\n        409: {description: duplicate portfolio}\n  /mr-api/portfolio/{id}:\n    parameters:\n    - name: id\n      description: The id of the portfolio to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeGroups\n      description: Include groups for this this portfolio in results\n      in: query\n      schema: {type: boolean}\n    - name: includeApplications\n      description: Include applications for this portfolio in results\n      in: query\n      schema: {type: boolean}\n    - name: includeEnvironments\n      description: Include the environments inside the applications\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [PortfolioService]\n      description: Get portfolio\n      operationId: getPortfolio\n      responses:\n        200:\n          description: Resulting portfolio\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Portfolio'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [PortfolioService]\n      description: Update a portfolio\n      operationId: updatePortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Portfolio'}\n      responses:\n        200:\n          description: Resulting portfolio\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Portfolio'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: no permission to update portfolio}\n        404: {description: cannot find portfolio to update}\n        409: {description: duplicate portfolio name}\n        422: {description: updating old portfolio}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [PortfolioService]\n      description: Delete a portfolio\n      operationId: deletePortfolio\n      responses:\n        200:\n          description: How many portfolios were deleted.\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n  /mr-api/portfolio/{id}/application:\n    parameters:\n    - name: id\n      description: The id of the portfolio to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeEnvironments\n      in: query\n      description: Include the environments in the result\n      schema: {type: boolean}\n    - name: includeFeatures\n      in: query\n      description: Include the features in the result\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [ApplicationService]\n      description: Gets a list of applications.\n      operationId: findApplications\n      parameters:\n      - name: order\n        in: query\n        description: how to order the results\n        schema: {$ref: '#/components/schemas/SortOrder'}\n      - name: filter\n        in: query\n        description: What to filter the results by\n        schema: {type: string}\n      responses:\n        200:\n          description: Gets all portfolios, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Application'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: none found}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [ApplicationService]\n      description: Create a new application\n      operationId: createApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Application'}\n      responses:\n        200:\n          description: Resulting application\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Application'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        409: {description: duplicates}\n  /mr-api/portfolio/{id}/group:\n    parameters:\n    - name: id\n      description: The id of the portfolio to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includePeople\n      description: include people in each group\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      description: Gets a list of groups.\n      operationId: findGroups\n      parameters:\n      - name: order\n        in: query\n        description: how to order the results\n        schema: {$ref: '#/components/schemas/SortOrder'}\n      - name: filter\n        in: query\n        description: What to filter the results by\n        schema: {type: string}\n      responses:\n        200:\n          description: Gets groups, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      description: Create a new group\n      operationId: createGroup\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Group'}\n      responses:\n        200:\n          description: Resulting group\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: no permission}\n        409: {description: duplicate}\n  /mr-api/person:\n    parameters:\n    - name: includeGroups\n      description: Include groups in result\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [PersonService]\n      description: Gets a list of matching people.\n      operationId: findPeople\n      parameters:\n      - name: order\n        in: query\n        description: how to order the results\n        schema: {$ref: '#/components/schemas/SortOrder'}\n      - name: filter\n        in: query\n        description: What to filter the results by\n        schema: {type: string}\n      - name: startAt\n        in: query\n        description: Where in the results to start\n        schema: {type: integer}\n      - name: pageSize\n        in: query\n        description: How many results to return\n        schema: {type: integer}\n      - name: includeLastLoggedIn\n        in: query\n        description: Include last logged in timestamp\n        schema: {type: boolean}\n      responses:\n        200:\n          description: Gets all persons, alphabetically sorted\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/SearchPersonResult'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: only admins can call this API}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [PersonService]\n      description: Create a new person\n      operationId: createPerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/CreatePersonDetails'}\n      responses:\n        200:\n          description: Registration url\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RegistrationUrl'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden to only admins}\n        409: {description: person already exists}\n  /mr-api/person/{id}:\n    parameters:\n    - name: id\n      description: The id of the person to find\n      in: path\n      schema: {type: string}\n      required: true\n    - name: includeGroups\n      description: Include groups in result\n      in: query\n      schema: {type: boolean}\n    - name: includeAcls\n      description: include acls for each group\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [PersonService]\n      description: Get person\n      operationId: getPerson\n      parameters:\n      - name: includeGroups\n        description: Include the groups for the user\n        in: query\n        schema: {type: boolean}\n      responses:\n        200:\n          description: Resulting person\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Person'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [PersonService]\n      description: Update a person\n      operationId: updatePerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Person'}\n      responses:\n        200:\n          description: Resulting person\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Person'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden to update that person}\n        404: {description: person not found}\n        422: {description: attempting to update old person record}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [PersonService]\n      description: Delete a person\n      operationId: deletePerson\n      responses:\n        200:\n          description: How many people were deleted.\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n  /mr-api/authentication:\n    post:\n      tags: [AuthService]\n      description: Create a new user\n      operationId: registerPerson\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/PersonRegistrationDetails'}\n      responses:\n        200:\n          description: Tokenized person\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/TokenizedPerson'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: person already registered who is using this token or cannot find person to register}\n  /mr-api/external-provider/{provider}:\n    parameters:\n    - name: provider\n      in: path\n      required: true\n      schema: {type: string}\n    get:\n      tags: [AuthService]\n      description: Gets a login URL for this specified provider if it is supported by the server\n      operationId: getLoginUrlForProvider\n      responses:\n        200:\n          description: The information required to redirect\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ProviderRedirect'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n  /mr-api/login:\n    post:\n      tags: [AuthService]\n      description: Login to Feature Hub\n      operationId: login\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/UserCredentials'}\n      responses:\n        200:\n          description: Successfully logged in\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/TokenizedPerson'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: login is disabled for this instance}\n        404: {description: user is not found}\n  /mr-api/logout:\n    get:\n      security:\n      - bearerAuth: []\n      tags: [AuthService]\n      description: Get person by token\n      operationId: logout\n      responses:\n        204: {description: Token deactivated}\n        400: {description: Bad Request}\n        401: {description: no permission}\n  /mr-api/authentication/{id}/replaceTempPassword:\n    parameters:\n    - name: id\n      description: The id of the person to replace temporary password for\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    put:\n      tags: [AuthService]\n      description: Replace temporary password\n      x-java-annotations: '@io.featurehub.mr.api.AllowedDuringPasswordReset'\n      security:\n      - bearerAuth: []\n      operationId: replaceTempPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/PasswordReset'}\n      responses:\n        200:\n          description: Successfully reset temporary password\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/TokenizedPerson'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n  /mr-api/authentication/{email}/expiredTokenReset:\n    post:\n      security:\n      - bearerAuth: []\n      tags: [AuthService]\n      parameters:\n      - name: email\n        in: path\n        description: The email address of the person whose expired token to reset\n        schema: {type: string}\n        required: true\n      description: Allows an administrator to reset a user's expired token so they can login\n      operationId: resetExpiredToken\n      responses:\n        200:\n          description: The token of the expired person\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RegistrationUrl'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n  /mr-api/authentication/{id}/changePassword:\n    parameters:\n    - name: id\n      description: The id of the person to change password for\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    put:\n      security:\n      - bearerAuth: []\n      tags: [AuthService]\n      description: Change password\n      operationId: changePassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/PasswordUpdate'}\n      responses:\n        200:\n          description: Successfully updated password\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Person'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n  /mr-api/authentication/{token}:\n    get:\n      tags: [AuthService]\n      description: Get person by token\n      operationId: personByToken\n      parameters:\n      - name: token\n        in: path\n        schema: {type: string}\n        required: true\n      responses:\n        200:\n          description: Get user by token\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Person'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n  /mr-api/authentication/{id}/resetPassword:\n    parameters:\n    - name: id\n      description: The id of the person to reset password for\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    put:\n      tags: [AuthService]\n      security:\n      - bearerAuth: []\n      description: Reset password\n      operationId: resetPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/PasswordReset'}\n      responses:\n        200:\n          description: Successfully reset password\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Person'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/application/{appId}:\n    parameters:\n    - name: appId\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeEnvironments\n      in: query\n      description: Include the environments in the result\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [ApplicationService]\n      description: Get application\n      operationId: getApplication\n      responses:\n        200:\n          description: Resulting application\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Application'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: no application}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [ApplicationService]\n      description: Update an application\n      operationId: updateApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Application'}\n      responses:\n        200:\n          description: Resulting portfolio\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Application'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: app not found}\n        409: {description: Duplicate application}\n        422: {description: Trying to save old record}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [ApplicationService]\n      description: Delete an application\n      operationId: deleteApplication\n      responses:\n        200:\n          description: Did we delete the application\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/application/{appId}/rollout-strategy:\n    parameters:\n    - name: appId\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeWhoChanged\n      description: include who changed\n      in: query\n      schema: {type: boolean}\n      required: false\n    get:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      operationId: listApplicationRolloutStrategies\n      parameters:\n      - name: includeArchived\n        in: query\n        description: Include archived strategies\n        schema: {type: boolean}\n        required: false\n      responses:\n        200:\n          description: Get all strategies for this application, regardless if they are in use\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/RolloutStrategyInfo'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      operationId: createRolloutStrategy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/RolloutStrategy'}\n      responses:\n        '201':\n          description: The created rollout strategy for this application\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyInfo'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden to create}\n        409: {description: duplicate name}\n  /mr-api/application/{appId}/rollout-strategy-validation:\n    post:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      description: Provide server validation responses for this group of rollout strategies\n      parameters:\n      - name: appId\n        description: The id of the application to find\n        in: path\n        schema: {type: string, format: uuid}\n        required: true\n      operationId: validate\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/RolloutStrategyValidationRequest'}\n      responses:\n        200:\n          description: validation results\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyValidationResponse'}\n        400: {description: invalid body}\n        401: {description: no permission}\n  /mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}:\n    parameters:\n    - name: appId\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: strategyIdOrName\n      description: The id of the strategy or the unique name of it\n      in: path\n      schema: {type: string}\n      required: true\n    - name: includeWhoChanged\n      description: include who changed\n      in: query\n      schema: {type: boolean}\n      required: false\n    get:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      operationId: getRolloutStrategy\n      responses:\n        200:\n          description: The rollout strategy for this application\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyInfo'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: If there is no rollout strategy by that id or name}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      operationId: updateRolloutStrategy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/RolloutStrategy'}\n      responses:\n        200:\n          description: The created rollout strategy for this application\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyInfo'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n        409: {description: duplicate strategy name}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [RolloutStrategyService]\n      operationId: deleteRolloutStrategy\n      responses:\n        200:\n          description: The deleted rollout strategy for this application including its archive date\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyInfo'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: 'strategy not found, could not delete'}\n  /mr-api/application/{id}/features:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: get all features available in this application\n      operationId: getAllFeaturesForApplication\n      responses:\n        200:\n          description: Gets all features, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Feature'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: add a new feature to this application, returns all features.\n      operationId: createFeaturesForApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Feature'}\n      responses:\n        200:\n          description: All features, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Feature'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        409: {description: Duplicate feature}\n  /mr-api/application/{id}/features/{key}:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: key\n      description: The named unique key of the associated feature\n      in: path\n      schema: {type: string}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: get an individual feature\n      operationId: getFeatureByKey\n      responses:\n        200:\n          description: All features, alphabetically sorted\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Feature'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: updates all named features in this application, returns all features.\n      operationId: updateFeatureForApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Feature'}\n      responses:\n        200:\n          description: All features, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Feature'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n        409: {description: duplicate feature}\n        422: {description: other feature updated already}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: updates all named features in this application, returns all features.\n      operationId: deleteFeatureForApplication\n      responses:\n        200:\n          description: All features, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Feature'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: none found}\n  /mr-api/application/{id}/feature-environments/{key}:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: key\n      description: The key of the associated feature\n      in: path\n      schema: {type: string}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: Get a list of all environments and features and their values that this user has access to\n      operationId: getAllFeatureValuesByApplicationForKey\n      responses:\n        200:\n          description: Gets all feature values for all environments for an application\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/FeatureEnvironment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: Update a list of all environments and features and their values that this user has access to\n      operationId: updateAllFeatureValuesByApplicationForKey\n      parameters:\n      - name: removeValuesNotPassed\n        description: The id of the application to find\n        in: query\n        schema: {type: boolean}\n        required: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items: {$ref: '#/components/schemas/FeatureValue'}\n      responses:\n        200:\n          description: Gets all feature values for all environments for an application\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/FeatureEnvironment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        409: {description: 'Conflict in trying to save, someone else updated a record\n            first'}\n        422:\n          description: There were validation failures in the rollout strategies\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyValidationResponse'}\n  /mr-api/application/{id}/all-feature-environment:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [FeatureService]\n      description: Get a list of all environments and features and their values that this user has access to\n      operationId: findAllFeatureAndFeatureValuesForEnvironmentsByApplication\n      responses:\n        200:\n          description: Gets all portfolios, alphabetically sorted\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ApplicationFeatureValues'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: not found}\n  /mr-api/application/{id}/environment-ordering:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    post:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: this api is designed to update the ordering of environments. it will error on circular references or environments that don't exist.\n      operationId: environmentOrdering\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items: {$ref: '#/components/schemas/Environment'}\n      responses:\n        200:\n          description: returns all environments with no particular sort order.\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Environment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/application/{id}/environment:\n    parameters:\n    - name: id\n      description: The id of the application to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: Gets a list of environments.\n      operationId: findEnvironments\n      parameters:\n      - name: order\n        in: query\n        description: how to order the results\n        schema: {$ref: '#/components/schemas/SortOrder'}\n      - name: filter\n        in: query\n        description: What to filter the results by\n        schema: {type: string}\n      - name: includeAcls\n        description: Include the acls attached to this environment\n        in: query\n        schema: {type: boolean}\n      - name: includeFeatures\n        description: Include the features attached to this environment\n        in: query\n        schema: {type: boolean}\n      responses:\n        200:\n          description: Gets all portfolios, alphabetically sorted\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/Environment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: Create a new environment\n      operationId: createEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Environment'}\n      responses:\n        200:\n          description: Resulting environment\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Environment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: application not found}\n        409: {description: duplicate environment}\n  /mr-api/environment/{eid}:\n    parameters:\n    - name: eid\n      description: The id of the environment to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeAcls\n      description: Include the acls attached to this environment\n      in: query\n      schema: {type: boolean}\n    - name: includeFeatures\n      description: Include the features attached to this environment\n      in: query\n      schema: {type: boolean}\n    get:\n      parameters:\n      - name: includeSdkUrl\n        description: include the sdk url\n        in: query\n        schema: {type: boolean}\n      - name: includeServiceAccounts\n        description: Include the service accounts attached to this environment\n        in: query\n        schema: {type: boolean}\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: Get environment\n      operationId: getEnvironment\n      responses:\n        200:\n          description: Resulting environment\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Environment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: Update an environment\n      operationId: updateEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Environment'}\n      responses:\n        200:\n          description: Resulting portfolio\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Environment'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404: {description: 'No environment found to update TODO: fix, should be 404\n            or 403'}\n        409: {description: Duplicate environment}\n        422: {description: Updating old environment}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentService]\n      description: Delete an environment\n      operationId: deleteEnvironment\n      responses:\n        200:\n          description: Did we delete the environment.\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n  /mr-api/features/{eid}:\n    parameters:\n    - name: eid\n      description: The id of the environment to find features or 'latest'\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      parameters:\n      - name: filter\n        description: Filter the feature names by this filter.\n        in: query\n        schema: {type: string}\n        required: false\n      description: Get all features for this environment\n      operationId: getFeaturesForEnvironment\n      responses:\n        200:\n          description: Resulting features\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/EnvironmentFeaturesResult'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      description: Update all features for this environment\n      operationId: updateAllFeaturesForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items: {$ref: '#/components/schemas/FeatureValue'}\n      responses:\n        200:\n          description: Resulting features\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/FeatureValue'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: 'Forbidden, no permission to change role'}\n        404: {description: not found}\n        409: {description: 'Conflict in trying to save, someone else updated a record\n            first'}\n        422:\n          description: There were validation failures in the rollout strategies\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyValidationResponse'}\n  /mr-api/features/{eid}/feature/{key}:\n    parameters:\n    - name: eid\n      description: The id of the environment to find features\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: key\n      description: The key of the relevant feature\n      in: path\n      schema: {type: string}\n      required: true\n    get:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      description: Update a specific feature in this environment.\n      operationId: getFeatureForEnvironment\n      responses:\n        200:\n          description: Resulting feature\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/FeatureValue'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      description: Update a specific feature in this environment.\n      operationId: updateFeatureForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/FeatureValue'}\n      responses:\n        200:\n          description: Resulting features\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/FeatureValue'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        409: {description: 'Conflict in trying to save, someone else updated a record\n            first'}\n        422:\n          description: There were validation failures in the rollout strategies\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyValidationResponse'}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      description: Create a specific feature in this environment.\n      operationId: createFeatureForEnvironment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/FeatureValue'}\n      responses:\n        200:\n          description: Resulting features\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/FeatureValue'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: No permission to change role}\n        404: {description: No feature for that environment found}\n        409: {description: 'Conflict in trying to save, someone else updated a record\n            first'}\n        422:\n          description: There were validation failures in the rollout strategies\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/RolloutStrategyValidationResponse'}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [EnvironmentFeatureService]\n      description: Delete a specific feature in this environment.\n      operationId: deleteFeatureForEnvironment\n      responses:\n        204: {description: No data returned.}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/group/{gid}:\n    parameters:\n    - name: gid\n      description: The id of the group to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeMembers\n      description: include people in each group\n      in: query\n      schema: {type: boolean}\n    - name: includeGroupRoles\n      description: include environment and application roles in each group\n      in: query\n      schema: {type: boolean}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      parameters:\n      - name: byApplicationId\n        in: query\n        schema: {type: string, format: uuid}\n      description: Get group\n      operationId: getGroup\n      responses:\n        200:\n          description: Resulting group\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n    put:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      description: Update a group\n      operationId: updateGroup\n      parameters:\n      - name: updateMembers\n        description: update members, deleting those that are not passed\n        in: query\n        schema: {type: boolean}\n      - name: updateEnvironmentGroupRoles\n        description: update environment group roles, deleting any not passed\n        in: query\n        schema: {type: boolean}\n      - name: updateApplicationGroupRoles\n        description: update application group roles, deleting any not passed\n        in: query\n        schema: {type: boolean}\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/Group'}\n      responses:\n        200:\n          description: Resulting group\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n        409: {description: duplicate user or duplicate group}\n        422: {description: version conflict}\n    delete:\n      security:\n      - bearerAuth: []\n      tags: [GroupService]\n      description: Delete a group\n      operationId: deleteGroup\n      responses:\n        200:\n          description: Did we delete the group?\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/group/{gid}/person/{pId}:\n    parameters:\n    - name: gid\n      description: The id of the group to find\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: pId\n      description: The id of the person to add/delete\n      in: path\n      schema: {type: string, format: uuid}\n      required: true\n    - name: includeMembers\n      description: include people in each group\n      in: query\n      schema: {type: boolean}\n    post:\n      tags: [GroupService]\n      security:\n      - bearerAuth: []\n      description: Add a person to a group\n      operationId: addPersonToGroup\n      responses:\n        200:\n          description: Resulting group\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: group or person not found}\n    delete:\n      tags: [GroupService]\n      security:\n      - bearerAuth: []\n      description: Remove a person from a group\n      operationId: deletePersonFromGroup\n      responses:\n        200:\n          description: Resulting group\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/Group'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/portfolio/{id}/service-account:\n    parameters:\n    - name: id\n      description: the portfolio this service account belongs to\n      in: path\n      required: true\n      schema: {type: string, format: uuid}\n    - name: includePermissions\n      description: include permissions in return\n      in: query\n      schema: {type: boolean}\n    get:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      description: Get list of all service accounts this user can see\n      parameters:\n      - name: filter\n        description: include environments for each account\n        in: query\n        schema: {type: string}\n      - name: applicationId\n        description: Application ID to filter on\n        in: query\n        schema: {type: string, format: uuid}\n      - name: includeSdkUrls\n        description: Include the SDKs for environments the user has access to\n        in: query\n        schema: {type: boolean}\n      operationId: searchServiceAccountsInPortfolio\n      responses:\n        200:\n          description: List of service accounts found\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {$ref: '#/components/schemas/ServiceAccount'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n    post:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      description: Add a new service account\n      operationId: createServiceAccountInPortfolio\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/ServiceAccount'}\n      responses:\n        200:\n          description: Newly created service account\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ServiceAccount'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        409: {description: duplicate}\n  /mr-api/service-account/{id}:\n    parameters:\n    - name: id\n      description: the id for the service account to get\n      in: path\n      required: true\n      schema: {type: string, format: uuid}\n    - name: includePermissions\n      description: include permissions in return\n      in: query\n      schema: {type: boolean}\n    get:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      description: Get service account by id or 'self' if authenticated as this service account\n      operationId: getServiceAccount\n      parameters:\n      - name: byApplicationId\n        in: query\n        schema: {type: string, format: uuid}\n      responses:\n        200:\n          description: Details of service account\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ServiceAccount'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n    put:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/ServiceAccount'}\n      description: Update this service account, overwiting any attached environment permissions this user has access to\n      operationId: updateServiceAccount\n      responses:\n        200:\n          description: Details of service account\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ServiceAccount'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: trying to update SA that doesn't exist}\n        422: {description: trying to update old version}\n    delete:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      description: Delete this service account, cascade removes all permissions\n      operationId: deleteServiceAccount\n      responses:\n        200:\n          description: Details of service account\n          content:\n            application/json:\n              schema: {type: boolean}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/service-account/{id}/reset-api-key:\n    post:\n      tags: [ServiceAccountService]\n      security:\n      - bearerAuth: []\n      description: Causes a new API Key to be generated. Ensure you confirm this with the user.\n      operationId: resetApiKey\n      parameters:\n      - name: id\n        description: the id for the service account to get\n        required: true\n        in: path\n        schema: {type: string, format: uuid}\n      - name: apiKeyType\n        description: Type of the API key\n        in: query\n        required: false\n        schema: {$ref: '#/components/schemas/ResetApiKeyType'}\n      responses:\n        200:\n          description: Details of service account\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ServiceAccount'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        403: {description: forbidden}\n        404: {description: not found}\n  /mr-api/initialize:\n    get:\n      tags: [SetupService]\n      description: Ping Feature Hub\n      operationId: isInstalled\n      responses:\n        200:\n          description: Hello from Feature Hub\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/SetupResponse'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        404:\n          description: Feature Hub not found\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/SetupMissingResponse'}\n    post:\n      tags: [SetupService]\n      description: Setup site admin\n      operationId: setupSiteAdmin\n      responses:\n        200:\n          description: Successfully setup site admin\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/TokenizedPerson'}\n        400: {description: Bad Request}\n        401: {description: no permission}\n        409: {description: duplicate}\n      requestBody:\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/SetupSiteAdmin'}\n        description: setupSiteAdmin\n        required: true\n  /info/version:\n    get:\n      description: Gets information as to what this server is.\n      operationId: getInfoVersion\n      tags: [InfoService]\n      responses:\n        200:\n          description: The basic  information on this server\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/ApplicationVersionInfo'}\n  /mr-api/user-data/state/{appId}/hidden-environments:\n    parameters:\n    - name: appId\n      in: path\n      required: true\n      schema: {type: string, format: uuid}\n    get:\n      security:\n      - bearerAuth: []\n      tags: [UserStateService]\n      description: Gets information on which environments are hidden for this user\n      operationId: getHiddenEnvironments\n      responses:\n        '200':\n          description: the current set of hidden environments\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/HiddenEnvironments'}\n        '401': {description: no permission to anything}\n        '403': {description: no permission to environment}\n        '404': {description: no such application}\n        '422': {description: 'couldn''t process request, something wrong'}\n    post:\n      security:\n      - bearerAuth: []\n      tags: [UserStateService]\n      description: Saves information on which environments should be hidden for this user\n      operationId: saveHiddenEnvironments\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: {$ref: '#/components/schemas/HiddenEnvironments'}\n      responses:\n        '200':\n          description: the current set of hidden environments\n          content:\n            application/json:\n              schema: {$ref: '#/components/schemas/HiddenEnvironments'}\n        '401': {description: no permission to anything}\n        '403': {description: no permission to environment}\n        '404': {description: no such application}\n        422: {description: 'update invalid, old'}\ncomponents:\n  securitySchemes:\n    bearerAuth: {type: http, scheme: bearer, bearerFormat: JWT}\n  schemas:\n    EnvironmentFeaturesResult:\n      properties:\n        featureValues:\n          type: array\n          items: {$ref: '#/components/schemas/FeatureValue'}\n        environments:\n          type: array\n          items: {$ref: '#/components/schemas/Environment'}\n        applications:\n          type: array\n          items: {$ref: '#/components/schemas/Application'}\n        features:\n          type: array\n          items: {$ref: '#/components/schemas/Feature'}\n    SearchPersonResult:\n      required: [max, people]\n      properties:\n        max: {type: integer}\n        people:\n          type: array\n          items: {$ref: '#/components/schemas/Person'}\n        outstandingRegistrations:\n          type: array\n          items: {$ref: '#/components/schemas/OutstandingRegistration'}\n    OutstandingRegistration:\n      type: object\n      required: [id, token, expired]\n      properties:\n        id: {type: string, format: uuid}\n        token: {type: string}\n        expired: {type: boolean}\n    SetupSiteAdmin:\n      required: [organizationName, portfolio]\n      properties:\n        portfolio: {type: string}\n        organizationName: {type: string}\n        emailAddress: {description: User's email or blank if using oauth/saml, format: email,\n          type: string}\n        password: {description: User's password or blank if using oauth/saml, type: string}\n        name: {description: user's name. Will be take from external provider if using oauth/saml,\n          type: string}\n        authProvider: {description: 'If the site is using external providers, this\n            is the key of the provider chosen. If there is only one, it can be blank.',\n          type: string}\n      type: object\n    SetupResponse:\n      type: object\n      properties:\n        organization: {$ref: '#/components/schemas/Organization'}\n        providers:\n          type: array\n          items: {type: string}\n        providerInfo:\n          type: object\n          additionalProperties: {$ref: '#/components/schemas/IdentityProviderInfo'}\n        redirectUrl: {description: Set if there is only one external provider and no local. Allows immediate redirect to provider. It assumes it will be used immediate (e.g. state in oauth2 url),\n          type: string}\n    IdentityProviderInfo:\n      type: object\n      required: [buttonBackgroundColor, buttonIcon, buttonText]\n      properties:\n        buttonIcon: {type: string}\n        buttonBackgroundColor: {type: string}\n        buttonText: {type: string}\n    SetupMissingResponse:\n      type: object\n      properties:\n        providers:\n          type: array\n          items: {type: string}\n        providerInfo:\n          type: object\n          additionalProperties: {$ref: '#/components/schemas/IdentityProviderInfo'}\n    ProviderRedirect:\n      type: object\n      properties:\n        redirectUrl: {type: string}\n    TokenizedPerson:\n      properties:\n        accessToken: {type: string}\n        refreshToken: {type: string}\n        redirectUrl: {type: string}\n        person: {$ref: '#/components/schemas/Person'}\n    RegistrationUrl:\n      required: [token]\n      properties:\n        registrationUrl: {type: string}\n        token: {type: string}\n    PersonRegistrationDetails:\n      required: [name, email, password, confirmPassword, registrationToken]\n      properties:\n        name: {type: string, maxLength: 100, minLength: 1}\n        email: {type: string, maxLength: 100, minLength: 1, format: email}\n        password: {type: string, maxLength: 40, minLength: 1, format: password}\n        confirmPassword: {type: string, maxLength: 40, minLength: 1, format: password}\n        registrationToken: {type: string}\n    CreatePersonDetails:\n      required: [email]\n      properties:\n        email: {type: string, minLength: 1, maxLength: 100, format: email}\n        name: {type: string, minLength: 1, maxLength: 100}\n        groupIds:\n          type: array\n          items: {type: string, format: uuid}\n    UserCredentials:\n      required: [email, password]\n      properties:\n        email: {type: string, maxLength: 100, format: email}\n        password: {type: string, format: password, maxLength: 100}\n    PasswordReset:\n      required: [password]\n      properties:\n        password: {type: string}\n        reactivate: {type: boolean}\n    PasswordUpdate:\n      required: [oldPassword, newPassword]\n      properties:\n        oldPassword: {maxLength: 100, format: password, type: string}\n        newPassword: {maxLength: 100, format: password, type: string}\n    RolloutStrategyInfo:\n      required: [rolloutStrategy]\n      properties:\n        rolloutStrategy: {$ref: '#/components/schemas/RolloutStrategy'}\n        whenArchived: {type: string, format: date-time}\n        changedBy: {$ref: '#/components/schemas/Person'}\n    RolloutStrategyValidationRequest:\n      type: object\n      description: A collection of strategies to validate together to see if it violates any rules\n      properties:\n        customStrategies:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategy'}\n        sharedStrategies:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyInstance'}\n    CustomRolloutStrategyViolation:\n      type: object\n      properties:\n        strategy: {$ref: '#/components/schemas/RolloutStrategy'}\n        violations:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyViolation'}\n    SharedRolloutStrategyViolation:\n      type: object\n      properties:\n        strategy: {$ref: '#/components/schemas/RolloutStrategyInstance'}\n        violation:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyViolation'}\n    RolloutStrategyValidationResponse:\n      type: object\n      properties:\n        customStategyViolations:\n          type: array\n          items: {$ref: '#/components/schemas/CustomRolloutStrategyViolation'}\n        sharedStrategyViolations:\n          type: array\n          items: {$ref: '#/components/schemas/SharedRolloutStrategyViolation'}\n        violations:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyCollectionViolationType'}\n    RolloutStrategyViolation:\n      type: object\n      required: [violation]\n      properties:\n        id: {description: The id of the attribute (if any), type: string}\n        violation: {$ref: '#/components/schemas/RolloutStrategyViolationType'}\n    RolloutStrategyViolationType:\n      type: string\n      enum: [no_name, name_too_long, empty_match_criteria, negative_percentage, percentage_over_100_percent,\n        array_attribute_no_values, attr_invalid_well_known_enum, attr_missing_value,\n        attr_missing_conditional, attr_missing_field_name, attr_missing_field_type,\n        attr_val_not_semantic_version, attr_val_not_number, attr_val_not_date, attr_val_not_date_time,\n        attr_val_not_cidr, attr_unknown_failure]\n    RolloutStrategyCollectionViolationType:\n      type: string\n      enum: [percentage_adds_over_100_percent]\n    ResetApiKeyType:\n      type: string\n      enum: [client_eval_only, server_eval_only]\n    FeatureEnvironment:\n      properties:\n        environment: {$ref: '#/components/schemas/Environment'}\n        roles:\n          description: the roles of this person in this environment\n          type: array\n          items: {$ref: '#/components/schemas/RoleType'}\n        featureValue: {$ref: '#/components/schemas/FeatureValue'}\n        serviceAccounts:\n          type: array\n          items: {$ref: '#/components/schemas/ServiceAccount'}\n    ApplicationFeatureValues:\n      properties:\n        applicationId: {type: string, format: uuid}\n        features:\n          type: array\n          items: {$ref: '#/components/schemas/Feature'}\n        environments:\n          type: array\n          items: {$ref: '#/components/schemas/EnvironmentFeatureValues'}\n    EnvironmentFeatureValues:\n      properties:\n        environmentId: {type: string, format: uuid}\n        environmentName: {type: string}\n        priorEnvironmentId: {type: string, format: uuid}\n        features:\n          description: the values of the features depending on access\n          type: array\n          items: {$ref: '#/components/schemas/FeatureValue'}\n        roles:\n          description: the roles of this person in this environment\n          type: array\n          items: {$ref: '#/components/schemas/RoleType'}\n    Feature:\n      description: exists simply to hold the name of the feature as it exists across all environments\n      required: [name]\n      properties:\n        id: {type: string, format: uuid}\n        key: {type: string, description: Unique within this application}\n        alias: {type: string, description: 'use this in code, as then people cannot\n            guess your new features from their names'}\n        link: {type: string}\n        name: {type: string, description: description if any}\n        valueType: {$ref: '#/components/schemas/FeatureValueType'}\n        version: {description: used for optimistic locking when renaming a feature,\n          type: integer, format: int64}\n        whenArchived: {type: string, format: date-time}\n        secret: {type: boolean, description: should the config remain invisible to users without secret permission}\n    FeatureValue:\n      required: [key, locked]\n      properties:\n        id: {type: string, format: uuid}\n        key: {type: string}\n        locked: {type: boolean}\n        valueString: {description: default value if no strategy matches. interpreted by type in parent,\n          type: string}\n        valueNumber: {type: number}\n        valueBoolean: {type: boolean}\n        valueJson: {type: string}\n        retired: {type: boolean, description: 'if false or null, this feature will visible on edge. if true, it will not be passed to the client'}\n        rolloutStrategyInstances:\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyInstance'}\n        rolloutStrategies:\n          description: These are custom rollout strategies that only apply to this feature value.\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategy'}\n        sharedRolloutStrategies:\n          description: This is list is either provided empty (when publishing) or anemic so the MR will client will understand which shared strategies are attached without having to back-call. If provided then it will mirror rolloutStrategyInstances and only enabled ones will be passed back. The value from the rolloutStrategyInstance will be embedded. This field will _always_ be ignored when being sent back to the server, only rolloutStrategyInstances is used.\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategy'}\n        environmentId: {type: string, format: uuid}\n        version: {description: used for optimistic locking, type: integer, format: int64}\n        whoUpdated: {$ref: '#/components/schemas/Person'}\n        whenUpdated: {type: string, format: date-time}\n        whatUpdated: {type: string}\n    RolloutStrategyInstance:\n      properties:\n        name: {description: 'This is copied from the shared rollout strategy on return,\n            it is read only from the client perspective', type: string}\n        strategyId: {type: string, format: uuid}\n        value: {description: the value for this rollout strategy for this feature value}\n        disabled: {type: boolean}\n    Audit:\n      properties:\n        createdBy:\n          allOf:\n          - {$ref: '#/components/schemas/Person'}\n        updatedBy:\n          allOf:\n          - {$ref: '#/components/schemas/Person'}\n        whenCreated: {type: string, format: date-time}\n        whenUpdated: {type: string, format: date-time}\n    SortOrder:\n      type: string\n      enum: [ASC, DESC]\n    Portfolio:\n      allOf:\n      - {$ref: '#/components/schemas/Audit'}\n      - type: object\n        required: [name]\n        properties:\n          id: {type: string, format: uuid}\n          name: {type: string, minLength: 1, maxLength: 200}\n          description: {type: string, maxLength: 400}\n          version: {type: integer, format: int64}\n          organizationId: {type: string, format: uuid}\n          groups:\n            type: array\n            items: {$ref: '#/components/schemas/Group'}\n          applications:\n            type: array\n            items: {$ref: '#/components/schemas/Application'}\n          whenArchived: {type: string, format: date-time}\n    Application:\n      allOf:\n      - {$ref: '#/components/schemas/Audit'}\n      - type: object\n        required: [name]\n        properties:\n          id: {type: string, format: uuid}\n          name: {type: string, maxLength: 100}\n          description: {type: string, maxLength: 400}\n          portfolioId: {type: string, format: uuid}\n          version: {type: integer, format: int64}\n          groups:\n            type: array\n            items: {$ref: '#/components/schemas/Group'}\n          features:\n            type: array\n            items: {$ref: '#/components/schemas/Feature'}\n          environments:\n            type: array\n            items: {$ref: '#/components/schemas/Environment'}\n          whenArchived: {type: string, format: date-time}\n    Person:\n      type: object\n      properties:\n        id: {$ref: '#/components/schemas/PersonId'}\n        name: {type: string, minLength: 1, maxLength: 150}\n        email: {type: string, format: email, maxLength: 100}\n        other: {type: string}\n        source: {type: string}\n        version: {type: integer, format: int64}\n        passwordRequiresReset: {type: boolean}\n        groups:\n          type: array\n          items: {$ref: '#/components/schemas/Group'}\n        whenArchived: {type: string, format: date-time}\n        whenLastAuthenticated: {description: This is the timestamp in UTC when they last logged into the system,\n          type: string, format: date-time}\n        whenLastSeen: {description: This is the timestamp in UTC when they last made a request to the system on their most recent login. If it is null it means they have no current token or have never logged in.,\n          type: string, format: date-time}\n        additional:\n          type: array\n          items: {$ref: '#/components/schemas/PersonInfo'}\n    PersonInfo:\n      type: object\n      required: [key, value]\n      properties:\n        key: {type: string}\n        value: {type: string}\n    PersonId:\n      required: [id]\n      properties:\n        id: {type: string, format: uuid}\n    Environment:\n      allOf:\n      - {$ref: '#/components/schemas/Audit'}\n      - type: object\n        required: [name]\n        properties:\n          id: {type: string, format: uuid}\n          applicationId: {type: string, format: uuid}\n          name: {type: string, minLength: 1, maxLength: 150}\n          priorEnvironmentId: {type: string, format: uuid}\n          version: {type: integer, format: int64}\n          description: {type: string, maxLength: 400}\n          production: {description: 'is this a production environment?', type: boolean}\n          groupRoles:\n            type: array\n            items: {$ref: '#/components/schemas/EnvironmentGroupRole'}\n          features:\n            type: array\n            items: {$ref: '#/components/schemas/Feature'}\n          serviceAccountPermission:\n            type: array\n            items: {$ref: '#/components/schemas/ServiceAccountPermission'}\n          whenArchived: {type: string, format: date-time}\n    ServiceAccount:\n      required: [name]\n      properties:\n        id: {type: string, format: uuid}\n        name: {type: string, minLength: 1, maxLength: 70}\n        portfolioId: {type: string, format: uuid}\n        description: {type: string, maxLength: 400}\n        version: {type: integer, format: int64}\n        apiKeyClientSide: {type: string, description: 'this is a read only field,\n            it denotes an api key where the eval is done client side', maxLength: 400}\n        apiKeyServerSide: {type: string, description: 'this is a read only field,\n            it denotes an api key where the eval is done server side', maxLength: 400}\n        permissions:\n          type: array\n          items: {$ref: '#/components/schemas/ServiceAccountPermission'}\n        whenArchived: {type: string, format: date-time}\n    ServiceAccountPermission:\n      required: [permissions, environmentId]\n      properties:\n        id: {type: string, format: uuid}\n        permissions:\n          type: array\n          items: {$ref: '#/components/schemas/RoleType'}\n        serviceAccount: {description: The service account associated with this permission. Only filled in when coming from Environment,\n          $ref: '#/components/schemas/ServiceAccount'}\n        environmentId: {type: string, format: uuid}\n        sdkUrlClientEval: {description: Optional if they have chosen includeSdkUrl,\n          type: string}\n        sdkUrlServerEval: {description: Optional if they have chosen includeSdkUrl,\n          type: string}\n    Group:\n      allOf:\n      - {$ref: '#/components/schemas/Audit'}\n      - type: object\n        required: [name]\n        properties:\n          id: {type: string, format: uuid}\n          admin: {description: 'is this an admin group?', type: boolean}\n          portfolioId: {type: string, format: uuid}\n          organizationId: {description: 'this will be the organisation this group\n              belongs to at the top level, or if a portfolio group, the organisation\n              of the portfolio', type: string, format: uuid}\n          version: {type: integer, format: int64}\n          name: {type: string, minLength: 1, maxLength: 255}\n          members:\n            type: array\n            items: {$ref: '#/components/schemas/Person'}\n          applicationRoles:\n            type: array\n            items: {$ref: '#/components/schemas/ApplicationGroupRole'}\n          environmentRoles:\n            type: array\n            items: {$ref: '#/components/schemas/EnvironmentGroupRole'}\n          whenArchived: {type: string, format: date-time}\n    ApplicationGroupRole:\n      required: [applicationId, groupId, roles]\n      properties:\n        applicationId: {type: string, format: uuid}\n        groupId: {type: string, format: uuid}\n        roles:\n          type: array\n          items: {$ref: '#/components/schemas/ApplicationRoleType'}\n    ApplicationRoleType:\n      type: string\n      enum: [FEATURE_EDIT]\n    EnvironmentGroupRole:\n      required: [environmentId, groupId, roles]\n      properties:\n        environmentId: {type: string, format: uuid}\n        groupId: {type: string, format: uuid}\n        roles:\n          type: array\n          items: {$ref: '#/components/schemas/RoleType'}\n    Organization:\n      allOf:\n      - {$ref: '#/components/schemas/Audit'}\n      - type: object\n        required: [name]\n        properties:\n          id: {type: string, format: uuid}\n          version: {type: integer, format: int64}\n          name: {type: string, minLength: 1, maxLength: 255}\n          admin: {type: boolean}\n          authorizationUrl: {description: 'If provided, the browser should redirect\n              to this URL to authenticate', type: string}\n          orgGroup: {$ref: '#/components/schemas/Group'}\n          portfolios:\n            type: array\n            items: {$ref: '#/components/schemas/Portfolio'}\n          whenArchived: {type: string, format: date-time}\n    RolloutStrategyAttribute:\n      allOf:\n      - {$ref: '#/components/schemas/BaseRolloutStrategyAttribute'}\n      - type: object\n        properties:\n          id: {type: string, description: A temporary id used only when validating. Saving strips these out as they are not otherwise necessary}\n    RolloutStrategy:\n      allOf:\n      - {$ref: '#/components/schemas/BaseRolloutStrategy'}\n      - type: object\n        required: [name]\n        properties:\n          name: {description: names are unique in a case insensitive fashion, type: string}\n          colouring: {description: the colour used to display the strategy in the UI. indexed table of background/foreground combos.,\n            type: integer}\n          avatar: {type: string, description: url to avatar (if any). Not sent to SDK. Preferably a unicorn.,\n            maxLength: 200}\n          attributes:\n            type: array\n            items: {$ref: '#/components/schemas/RolloutStrategyAttribute'}\n    FeatureValueType:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [BOOLEAN, STRING, NUMBER, JSON]\n    RoleType:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [READ, LOCK, UNLOCK, CHANGE_VALUE]\n    BaseRolloutStrategy:\n      x-package: io.featurehub.mr.model\n      description: if the feature in an environment is different from its default, this will be the reason for it. a rollout strategy is defined at the Application level and then applied to a specific feature value. When they are copied to the cache layer they are cloned and the feature value for that strategy is inserted into the clone and those are published.\n      properties:\n        id: {type: string}\n        percentage: {description: value between 0 and 1000000 - for four decimal places,\n          type: integer}\n        percentageAttributes:\n          type: array\n          description: if you don't wish to apply percentage based on user id, you can use one or more attributes defined here\n          items: {type: string}\n        value: {description: when we attach the RolloutStrategy for Dacha or SSE this lets us push the value out. Only visible in SDK and SSE Edge.}\n        attributes:\n          type: array\n          items: {$ref: '#/components/schemas/BaseRolloutStrategyAttribute'}\n    BaseRolloutStrategyAttribute:\n      x-package: io.featurehub.mr.model\n      properties:\n        conditional: {$ref: '#/components/schemas/RolloutStrategyAttributeConditional'}\n        fieldName: {type: string}\n        values:\n          description: the value(s) associated with this rule\n          type: array\n          items: {$ref: '#/components/schemas/RolloutStrategyArrayType'}\n        type: {$ref: '#/components/schemas/RolloutStrategyFieldType'}\n    RolloutStrategyArrayType: {x-package: io.featurehub.mr.model, description: values depend on the field type}\n    RolloutStrategyFieldType:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [STRING, SEMANTIC_VERSION, NUMBER, DATE, DATETIME, BOOLEAN, IP_ADDRESS]\n    RolloutStrategyAttributeConditional:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [EQUALS, ENDS_WITH, STARTS_WITH, GREATER, GREATER_EQUALS, LESS, LESS_EQUALS,\n        NOT_EQUALS, INCLUDES, EXCLUDES, REGEX]\n    StrategyAttributeWellKnownNames:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [device, country, platform, userkey, session, version]\n    StrategyAttributeDeviceName:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [browser, mobile, desktop, server, watch, embedded]\n    StrategyAttributePlatformName:\n      x-package: io.featurehub.mr.model\n      type: string\n      enum: [linux, windows, macos, android, ios]\n    StrategyAttributeCountryName:\n      x-package: io.featurehub.mr.model\n      type: string\n      description: https://www.britannica.com/topic/list-of-countries-1993160 - we put these in API so everyone can have the same list\n      enum: [afghanistan, albania, algeria, andorra, angola, antigua_and_barbuda,\n        argentina, armenia, australia, austria, azerbaijan, the_bahamas, bahrain,\n        bangladesh, barbados, belarus, belgium, belize, benin, bhutan, bolivia, bosnia_and_herzegovina,\n        botswana, brazil, brunei, bulgaria, burkina_faso, burundi, cabo_verde, cambodia,\n        cameroon, canada, central_african_republic, chad, chile, china, colombia,\n        comoros, congo_democratic_republic_of_the, congo_republic_of_the, costa_rica,\n        cote_divoire, croatia, cuba, cyprus, czech_republic, denmark, djibouti, dominica,\n        dominican_republic, east_timor, ecuador, egypt, el_salvador, equatorial_guinea,\n        eritrea, estonia, eswatini, ethiopia, fiji, finland, france, gabon, the_gambia,\n        georgia, germany, ghana, greece, grenada, guatemala, guinea, guinea_bissau,\n        guyana, haiti, honduras, hungary, iceland, india, indonesia, iran, iraq, ireland,\n        israel, italy, jamaica, japan, jordan, kazakhstan, kenya, kiribati, korea_north,\n        korea_south, kosovo, kuwait, kyrgyzstan, laos, latvia, lebanon, lesotho, liberia,\n        libya, liechtenstein, lithuania, luxembourg, madagascar, malawi, malaysia,\n        maldives, mali, malta, marshall_islands, mauritania, mauritius, mexico, micronesia_federated_states_of,\n        moldova, monaco, mongolia, montenegro, morocco, mozambique, myanmar, namibia,\n        nauru, nepal, netherlands, new_zealand, nicaragua, niger, nigeria, north_macedonia,\n        norway, oman, pakistan, palau, panama, papua_new_guinea, paraguay, peru, philippines,\n        poland, portugal, qatar, romania, russia, rwanda, saint_kitts_and_nevis, saint_lucia,\n        saint_vincent_and_the_grenadines, samoa, san_marino, sao_tome_and_principe,\n        saudi_arabia, senegal, serbia, seychelles, sierra_leone, singapore, slovakia,\n        slovenia, solomon_islands, somalia, south_africa, spain, sri_lanka, sudan,\n        sudan_south, suriname, sweden, switzerland, syria, taiwan, tajikistan, tanzania,\n        thailand, togo, tonga, trinidad_and_tobago, tunisia, turkey, turkmenistan,\n        tuvalu, uganda, ukraine, united_arab_emirates, united_kingdom, united_states,\n        uruguay, uzbekistan, vanuatu, vatican_city, venezuela, vietnam, yemen, zambia,\n        zimbabwe]\n    ApplicationVersionInfo:\n      type: object\n      required: [name, version]\n      properties:\n        name: {type: string}\n        version: {type: string}\n    HiddenEnvironments:\n      type: object\n      properties:\n        environmentIds:\n          type: array\n          items: {type: string, format: uuid}\n",
			"canonicalURL": "/github.com/featurehub-io/featurehub@f17fd78dc173f080ddcf2900e81a9baf1b1634ca/-/blob/infra/api-bucket/files/mrapi/1.1.5.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/featurehub-io/featurehub/blob/f17fd78dc173f080ddcf2900e81a9baf1b1634ca/infra/api-bucket/files/mrapi/1.1.5.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/mr-api/application/{appId}/rollout-strategy\": get: responses: code 200: contents: application/json: generate schema: item: field rolloutStrategy: allOf: merge properties: try to merge conflicting property schemas: merge item schema: schema type mismatch:  and object"
}