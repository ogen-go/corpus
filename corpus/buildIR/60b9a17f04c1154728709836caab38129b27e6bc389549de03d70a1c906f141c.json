{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CenterEdge/Yardarm"
		},
		"file": {
			"name": "centeredge-cardsystemapi.yaml",
			"size": 0,
			"path": "src/main/Yardarm.CommandLine/centeredge-cardsystemapi.yaml",
			"byteSize": 58873,
			"content": "openapi: 3.0.2\ninfo:\n  version: 1.0.11\n  title: CenterEdge Software Card System Integration API\n  contact:\n    name: Brant Burnett\n    email: bburnett@centeredgesoftware.com\n  license:\n    name: See license agreement\n  x-logo:\n    url: \u003e-\n      https://raw.githubusercontent.com/CenterEdge/centeredge-resources/master/logo/centeredge_logo_color.svg\n  description: \u003e\n    This document represents an API to be implemented by a third-party card\n    system to allow integration with CenterEdge Advantage. The CenterEdge\n    Advantage system will make requests to this API and receive responses back.\n\n    This integration is designed to allow the source of truth for key card\n    system data to continue to reside with the card system, such as card\n    numbers, card balances, and transaction history.\n\n    Implementing this API is not the only requirement for an integration with\n    CenterEdge Advantage. Other potential requirements include:\n\n    - CenterEdge support for reading/parsing the card system's magstripes,\n    barcodes, or\n      NFC chips\n    - Integration from the card system to CenterEdge APIs to post card sales at\n    kiosks or\n      from other sales channels\n    - Testing and certification of the integration by CenterEdge\n\n    Authentication is managed using the `/login` endpoint, which returns a\n    bearer token. This token is supplied to subsequent requests using the\n    `Authorization` header, i.e. `Authorization: Bearer the-bearer-token`. The\n    token itself is opaque to CenterEdge, but may be something like a JSON Web\n    Token (JWT). It is expected that this token may expire at some point, after\n    which API calls should return a 401 Unauthorized. This will cause CenterEdge\n    to request a new token and try again.\ntags:\n  - name: Login\n    description: APIs related to authentication\n  - name: Capabilities\n    description: APIs to request capabilities of other APIs\n  - name: Cards\n    description: APIs to manage cards\n  - name: Games\n    description: APIs to get information about games\n  - name: Privileges\n    description: APIs related to privileges\n  - name: Time Play\n    description: APIs related to time plays\nservers:\n  - url: 'http://example.com/api/v1'\npaths:\n  /capabilities:\n    get:\n      tags:\n        - Capabilities\n      summary: Get interface capabilities\n      description: \u003e\n        Gets the capabilities of the API. This is used by CenterEdge Advantage\n        to make decisions\n\n        about functions to offer on the UI.\n      operationId: getCapabilities\n      security:\n        - bearer_auth: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capabilities'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /cards/bulkIssue:\n    post:\n      tags:\n        - Cards\n      summary: Bulk issue cards\n      description: \u003e\n        Bulk issues the same value onto a sequential range of cards. This\n        operation\n\n        should be atomic, meaning it either fails or succeeds for all cards.\n\n\n        A list of adjustments is provided in the body. These adjustments will\n        only be add-type\n\n        transactions, never remove. For example, a value and a time play may\n        both be added\n\n        to each card in the range. Note that this may create multiple\n        transactions for each card\n\n        in the card system, depending on how adjustments may or may not be\n        combined in the system.\n      operationId: bulkIssueCards\n      security:\n        - bearer_auth: []\n      responses:\n        '200':\n          description: Returns the new card balances of each card\n          content:\n            application/json:\n              schema:\n                type: array\n                minLength: 1\n                items:\n                  $ref: '#/components/schemas/Card'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                cards:\n                  oneOf:\n                    - type: object\n                      properties:\n                        startingCardNumber:\n                          $ref: '#/components/schemas/CardNumber'\n                        numberOfCards:\n                          type: integer\n                          description: \u003e-\n                            The number of cards to issue, beginning with the\n                            startingCardNumber, inclusive.\n                          minimum: 1\n                      required:\n                        - startingCardNumber\n                        - numberOfCards\n                    - type: object\n                      properties:\n                        cardNumbers:\n                          type: array\n                          description: List of card numbers to issue\n                          minLength: 1\n                          items:\n                            $ref: '#/components/schemas/CardNumber'\n                      required:\n                        - cardNumbers\n                operator:\n                  $ref: '#/components/schemas/Operator'\n                adjustments:\n                  type: array\n                  description: List of adjustments to apply to each card.\n                  minLength: 1\n                  items:\n                    $ref: '#/components/schemas/Adjustment'\n              required:\n                - cards\n                - transactions\n              example:\n                startingCardNumber: 80009100\n                numberOfCards: 100\n                operator:\n                  employeeNumber: 3\n                  employeeName: John Doe\n                  stationNumber: 1\n                  stationName: POS 1\n                adjustments:\n                  - type: addValue\n                    points:\n                      regularPoints: 100\n                  - type: addMinutes\n                    groupId: 1\n                    minutes: 60\n                    startTimePlay: true\n        description: Card transaction to create\n        required: true\n  '/cards/{cardNumber}':\n    get:\n      tags:\n        - Cards\n      summary: Get card\n      description: \u003e\n        Gets information about a card, such as its current balance. Returns a\n        404 not found\n\n        if the card doesn't exist (has never been sold, or has been wiped).\n      operationId: getCard\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n        '404':\n          $ref: '#/components/responses/CardNotFound'\n    post:\n      tags:\n        - Cards\n      summary: Create an empty card\n      description: \u003e\n        Creates an empty card with no balance. This may be used in scenarios\n        where a card is being\n\n        linked to a customer account without a sale, or where some other\n        entitlement is being added\n\n        to the card such as a season pass.\n      operationId: createEmptyCard\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                code: cardExists\n                description: Card already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                operator:\n                  $ref: '#/components/schemas/Operator'\n              required:\n                - operator\n        description: Create an empty card payload\n        required: true\n    delete:\n      tags:\n        - Cards\n      summary: Wipe a card\n      description: \u003e\n        Wipes a card, preparing it for reuse. Should remove any balance, time\n        plays, privileges,\n\n        and transaction history. Subsequent requests for this card should return\n        a 404 until a new\n\n        card is issued. If the card doesn't exist, this request should still\n        return success as a 204,\n\n        since HTTP DELETE requests are idempotent.\n      operationId: wipeCard\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n      responses:\n        '204':\n          description: No Content\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                operator:\n                  $ref: '#/components/schemas/Operator'\n              required:\n                - operator\n        description: Wipe card payload\n        required: true\n  '/cards/{cardNumber}/combine':\n    post:\n      tags:\n        - Cards\n      summary: Combine cards\n      description: \u003e\n        Moves balance, time play value, privileges, etc from one card to\n        another.\n\n\n        The destination card is the number in the path, and it may be a\n        preexisting card that already\n\n        has value, in which case the value from the source card is added to the\n        destination card.\n\n        If the destination card doesn't exist, it should be created.\n\n\n        If a preexisting destination card is not supported at all, this should\n        be indicated to CenterEdge\n\n        in the capabilities response.\n\n\n        The source card is left active in the system with no remaining balance.\n        It may still be\n\n        associated with a customer or have more value added.\n\n\n        This operation should be atomic, meaning that either both cards are\n        updated or neither is changed.\n      operationId: combineCards\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n      responses:\n        '200':\n          description: Returns the new card balance of the destination card\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sourceCardNumber:\n                  $ref: '#/components/schemas/CardNumber'\n                operator:\n                  $ref: '#/components/schemas/Operator'\n              required:\n                - sourceCardNumber\n                - operator\n        description: Information about the combine operation\n        required: true\n  '/cards/{cardNumber}/pin':\n    get:\n      tags:\n        - Cards\n      summary: Validate PIN\n      description: \u003e\n        Validates the PIN number for a given card and/or indicates if the card\n        number has a PIN.\n\n        The latter is used to decide if a PIN prompt should be offered on the UI\n        for a given card number.\n\n\n        | Situation | Response |\n\n        | --------- | -------- |\n\n        | Card number is not valid | 404 pinNotFound |\n\n        | Card number doesn't have a PIN | 404 pinNotFound |\n\n        | Card number has a PIN, but no `validate` on query string | 200\n        isPinValid = false |\n\n        | Card number has a PIN, but `validate` on query string doesn't match |\n        200 isPinValid = false |\n\n        | Card number has a PIN, and `validate` on query string does match | 200\n        isPinValid = true |\n      operationId: validateCardPin\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n        - name: validate\n          in: query\n          description: PIN number to validate against the stored value\n          required: false\n          schema:\n            type: string\n            example: '123'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cardNumber:\n                    $ref: '#/components/schemas/CardNumber'\n                  isPinValid:\n                    type: boolean\n                    description: \u003e-\n                      Set to true if the PIN on the query string was correct.\n                      Always false if PIN is not supplied.\n                required:\n                  - cardNumber\n                  - isPinValid\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          description: Card number is unknown or does not have an associated PIN\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                code: pinNotFound\n                description: PIN Not Found\n  '/cards/{cardNumber}/transactions':\n    get:\n      tags:\n        - Cards\n      summary: Get card transactions\n      description: \u003e\n        Returns a history of transactions on a card, since the last time the\n        card was wiped.\n\n        It should not include any transactions before the card was wiped or\n        issued originally.\n\n\n        This endpoint supports pagination, and transactions should be sorted in\n        *descending*\n\n        order (the most recent transaction first).\n      operationId: getCardTransactions\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n        - $ref: '#/components/parameters/skip'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cardNumber:\n                    $ref: '#/components/schemas/CardNumber'\n                  transactions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CardTransaction'\n                  skipped:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Number of skipped transactions before the transactions in\n                      the response.\n                  totalCount:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Total number of transactions on this card. Used to support\n                      pagination, but not required.\n                required:\n                  - cardNumber\n                  - transactions\n                  - skipped\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/CardNotFound'\n    post:\n      tags:\n        - Cards\n      summary: Create a card transaction\n      description: \u003e\n        Creates a card transaction. Should return 400 if the transaction is not\n        allowed, along with\n\n        a useful error code and message.\n\n\n        If the transaction succeeds, the card should be changed in the\n        appropriate way (i.e. updated balance)\n\n        and the transaction should be included on subsequent requests for\n        transaction history.\n\n\n        If the card doesn't exist, it should be created automatically if the\n        transaction is adding value.\n\n        A 404 response should only be returned if the card doesn't exist when\n        removing value.\n\n\n        If necessary due to internal implementation details, it is acceptable to\n        create multiple transactions\n\n        as a result of a single request to create a transaction. For example, if\n        the transaction is adding two\n\n        different types of points and your internal implementation requires a\n        transaction for each point type.\n\n        However, the transaction creation should still be atomic, meaning both\n        are created or both fail as a unit.\n\n\n        Creating a `gamePlay` transaction is only supported if the Capabilities\n        request returns `virtualPlay` as true.\n\n        This allows CenterEdge Advantage to emulate a specific game.\n\n\n        When creating `addMinutes` and `removeMinutes` transactions, they may be\n        rejected if not allowed based on current\n\n        time plays on the card. For example, adding minutes to an existing time\n        play but with a different time play group ID\n\n        may not be allowed and result in a 400 response. Adding a time play of a\n        different type the same time play group ID,\n\n        or adding more time plays to a card than allowed, may also result in a\n        400 response. However, `removeMinutes` should\n\n        be allowed if the number of minutes remaining is insufficient (i.e.\n        remove 10 minutes even though only 9 remain).\n\n        This allows for timing discrepencies between the systems.\n      operationId: createCardTransaction\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n      responses:\n        '201':\n          description: 'Created, returns the created transaction'\n          headers:\n            Location:\n              description: URI where the transaction was created\n              required: true\n              schema:\n                type: string\n                format: uri\n              example: /cards/12345678/transactions/123\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cardNumber:\n                    $ref: '#/components/schemas/CardNumber'\n                  transactions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CardTransaction'\n                  totalCount:\n                    type: number\n                    minimum: 1\n                    description: Total number of transactions created.\n                required:\n                  - cardNumber\n                  - transactions\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/CardNotFound'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCardTransaction'\n        description: Card transaction to create\n        required: true\n  '/cards/{cardNumber}/transactions/{transactionId}':\n    get:\n      tags:\n        - Cards\n      summary: Get card transaction\n      description: |\n        Returns a single card transaction\n      operationId: getCardTransaction\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/cardNumber'\n        - name: transactionId\n          in: path\n          description: Unique transaction ID.\n          required: true\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CardTransaction'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/CardNotFound'\n  /cardNumberFormats:\n    get:\n      tags:\n        - Capabilities\n      summary: Get card number formats\n      description: \u003e\n        Gets a list of all card number formats usable at this facility. This\n        allows CenterEdge\n\n        to prevalidate that a card is valid for a particular facility earlier in\n        the UI flow.\n\n\n        At least one format must be defined. Note that it is also preferable to\n        avoid a length of 14\n\n        characters in the format, as this decreases compatibility.\n      operationId: getCardNumberFormats\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/skip'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  formats:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CardNumberFormat'\n                  skipped:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Number of skipped formats before the format in the\n                      response.\n                  totalCount:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Total number of formats. Used to support pagination, but\n                      not required.\n                required:\n                  - games\n                  - skipped\n                example:\n                  formats:\n                    - minLength: 8\n                      maxLength: 8\n                      prefix: '05'\n                    - minLength: 8\n                      maxLength: 8\n                      prefix: '10'\n                  skipped: 0\n                  totalCount: 2\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /games:\n    get:\n      tags:\n        - Games\n      summary: Get a list of games\n      description: \u003e\n        Returns a list of games with their unique identifier. This will be used\n        by CenterEdge to populate\n\n        UIs. Possible usages include allowing management to configure where we\n        post sales for plays at specific games,\n\n        play privilege configuration, or virtual plays.\n      operationId: getGames\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/skip'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  games:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Game'\n                  skipped:\n                    type: number\n                    minimum: 0\n                    description: Number of skipped games before the games in the response.\n                  totalCount:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Total number of games. Used to support pagination, but not\n                      required.\n                required:\n                  - games\n                  - skipped\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /games/transactions:\n    get:\n      tags:\n        - Games\n      summary: Get transactions\n      description: \u003e\n        Returns a history of ALL game play transactions which have taken place\n        since a particular\n\n        transaction ID (exclusive of that ID).\n\n\n        This API allows CenterEdge to monitor the card system for game plays and\n        post transactions\n\n        to our sales reports based on those game plays. CenterEdge will track\n        the most recently posted\n\n        transaction and reuse that transaction ID in subsequent requests for\n        additional transactions.\n\n\n        When syncing at a new location for the first time, CenterEdge will start\n        with sinceId=0.\n\n\n        Transactions **must** be returned in ascending order by their\n        transaction ID, or sales data could\n\n        be lost.\n      operationId: getGameTransactions\n      security:\n        - bearer_auth: []\n      parameters:\n        - name: sinceId\n          in: query\n          required: true\n          description: \u003e-\n            Returns transactions starting immediately after this transaction ID,\n            but not including this ID.\n          schema:\n            $ref: '#/components/schemas/TransactionId'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  transactions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/GamePlayTransaction'\n                  sinceId:\n                    $ref: '#/components/schemas/TransactionId'\n                required:\n                  - transactions\n                  - sinceId\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /login:\n    post:\n      tags:\n        - Login\n      summary: Login\n      description: \u003e\n        Login and get a new bearer token. This token may expire, after which\n        subsequent requests will\n\n        return a 401. Returning a 401 response is the indication that a new\n        login should be performed\n\n        to acquire a new bearer token.\n      operationId: login\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bearerToken:\n                    type: string\n                required:\n                  - bearerToken\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                code: invalidLogin\n                message: Incorrect username or password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Login'\n        description: Card transaction to create\n        required: true\n  /privilegeGroups:\n    get:\n      tags:\n        - Privileges\n      summary: Get privilege groups\n      description: \u003e\n        If the card system supports privileges, it must return at least one\n        privilege group.\n\n        However, a card system may optionally support multiple privilege groups.\n\n\n        Privilege groups are logical groupings that control what games a\n        privilege may activate.\n\n        For many systems, the list returned will include the list of individual\n        games. However, it may also\n\n        include other groupings of multiple games defined in the card system.\n\n\n        The details of each privilege group's functionality aren't relevant to\n        CenterEdge. We will simply\n\n        allow the operator to choose a group when configuring a privilege\n        product, and will\n\n        supply that group to the card system when a privilege is purchased.\n      operationId: getPrivilegeGroups\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/skip'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  privilegeGroups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PrivilegeGroup'\n                  skipped:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Number of skipped  groups before the groups in the\n                      response.\n                  totalCount:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Total number of groups. Used to support pagination, but\n                      not required.\n                required:\n                  - privilegeGroups\n                  - skipped\n                example:\n                  privilegeGroups:\n                    - id: 0\n                      name: Cyclone\n                    - id: 1\n                      name: Big Bass Wheel\n                    - id: 100000\n                      name: Non-Redemption Games\n                  skipped: 0\n                  totalCount: 3\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n  /timePlayGroups:\n    get:\n      tags:\n        - Time Play\n      summary: Get time play groups\n      description: \u003e\n        If the card system supports time play, it must return at least one time\n        play group. However, a\n\n        card system may optionally support multiple time play groups.\n\n\n        Time play groups are logical groupings that control what privileges the\n        time play grants to the\n\n        guest. For example, it could control which games are accessible or\n        implement a particular pricing\n\n        model instead of free play.\n\n\n        The details of each time play group's functionality aren't relevant to\n        CenterEdge. We will simply\n\n        allow the operator to choose a time play group when configuring a time\n        play product, and will\n\n        supply that group to the card system when a time play is purchased.\n      operationId: getTimePlayGroups\n      security:\n        - bearer_auth: []\n      parameters:\n        - $ref: '#/components/parameters/skip'\n        - $ref: '#/components/parameters/take'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  timePlayGroups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TimePlayGroup'\n                  skipped:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Number of skipped time play groups before the groups in\n                      the response.\n                  totalCount:\n                    type: number\n                    minimum: 0\n                    description: \u003e-\n                      Total number of time play groups. Used to support\n                      pagination, but not required.\n                required:\n                  - timePlayGroups\n                  - skipped\n                example:\n                  timePlayGroups:\n                    - id: 0\n                      name: All Games\n                    - id: 1\n                      name: Non-redemption Games\n                  skipped: 0\n                  totalCount: 2\n        '401':\n          $ref: '#/components/responses/Unauthorized'\ncomponents:\n  securitySchemes:\n    bearer_auth:\n      type: http\n      scheme: bearer\n  schemas:\n    CapabilitiesPoints:\n      type: object\n      properties:\n        isSupported:\n          type: boolean\n          description: Is this point type supported\n        maxDecimalPlaces:\n          type: integer\n          description: Maximum number of decimal places supported\n          minimum: 0\n          maximum: 4\n    AdjustmentType:\n      description: Type of the adjustment.\n      type: string\n      enum:\n        - addValue\n        - removeValue\n        - addMinutes\n        - removeMinutes\n        - addPrivilege\n        - removePrivilege\n        - other\n    Capabilities:\n      type: object\n      properties:\n        systemName:\n          type: string\n          description: \u003e-\n            A unique, constant name for your card system. This should be\n            machine-readable.\n          minLength: 1\n          example: SuperCards\n        interfaceVersion:\n          type: string\n          description: \u003e\n            Your internal version number for this interface. This may be used to\n            support feature limiting\n\n            on the CenterEdge side to work around known bugs in older versions,\n            or feature rollout as new\n\n            features are validated as functional.\n          minLength: 1\n          pattern: '^\\d+(?:\\.\\d+){0,3}$'\n          example: 1.3\n        pointTypes:\n          type: object\n          description: \u003e-\n            Types of points supported, a missing property is equivalent to\n            false.\n          properties:\n            regularPoints:\n              $ref: '#/components/schemas/CapabilitiesPoints'\n            bonusPoints:\n              $ref: '#/components/schemas/CapabilitiesPoints'\n            redemptionTickets:\n              $ref: '#/components/schemas/CapabilitiesPoints'\n        adjustments:\n          type: object\n          description: Capabilities related to adjustments.\n          properties:\n            maximumAdjustmentsPerTransaction:\n              type: integer\n              minimum: 1\n              description: \u003e\n                The maximum number of adjustments allowed on a single adjustment\n                transaction.\n              example: 3\n            allowedAdjustmentCombinations:\n              type: array\n              description: \u003e\n                List of adjustment combinations allowed together on the same\n                transaction. Each item in the list is\n\n                a list of allowed adjustment types, forming a set. For any given\n                adjustment transactions, all adjustments\n\n                must match a least one set in this list. This restriction only\n                applies to transactions with multiple\n\n                adjusments, it is assumed that all adjustment types may be sent\n                individually.\n              uniqueItems: true\n              items:\n                type: array\n                minLength: 2\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/AdjustmentType'\n              example:\n                - - addValue\n                  - addMinutes\n                  - addPrivilege\n                - - removeValue\n                  - removeMinutes\n                  - removePrivilege\n          required:\n            - maximumAdjustmentsPerTransaction\n        timePlay:\n          type: object\n          description: Time play capabilities of the card system.\n          properties:\n            maximumTimePlaysPerCard:\n              type: integer\n              minimum: 1\n              description: \u003e\n                The maximum number of time plays allowed on a single card\n                number. Time plays are still limited\n\n                to one time play per time play group.\n            minutes:\n              type: object\n              description: Time plays which are valid for a specific number of minutes.\n              properties:\n                isSupported:\n                  type: boolean\n                canAddMinutes:\n                  type: boolean\n                  description: \u003e\n                    If true, minutes may be added to an existing time play.\n                    Support for removing minutes is\n\n                    required for any system supporting time plays.\n                canExpire:\n                  type: boolean\n                  description: \u003e-\n                    If true, a time play may be expired if it isn't started\n                    before an expiration date/time.\n                startTypes:\n                  type: array\n                  minLength: 1\n                  items:\n                    type: string\n                    enum:\n                      - startAtSale\n                      - startAtFirstUse\n                  example:\n                    - startAtSale\n                    - startAtFirstUse\n              required:\n                - isSupported\n                - startTypes\n          required:\n            - maximumTimePlaysPerCard\n        privileges:\n          type: object\n          description: Privilege capabilities of the card system.\n          properties:\n            isSupported:\n              type: boolean\n            canExpire:\n              type: boolean\n              description: \u003e-\n                If true, a privlege may be expired if it isn't used before an\n                expiration date/time.\n          required:\n            - isSupported\n        bulkIssue:\n          type: object\n          properties:\n            range:\n              type: boolean\n              description: \u003e-\n                Cards may be bulk issued in a range based on a starting card\n                number.\n            list:\n              type: boolean\n              description: Cards may be bulk issued based on a list of card numbers.\n        cardCombineToExistingCard:\n          type: boolean\n          description: Cards may be combined with a destination card that already exists.\n        wipeCard:\n          type: boolean\n          description: The value on a card may be wiped so the card may be reused.\n        virtualPlay:\n          type: boolean\n          description: \u003e-\n            An API call may be used to emulate a game play, charging a card for\n            that play.\n      required:\n        - systemName\n        - interfaceVersion\n        - pointTypes\n        - adjustments\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Error code\n          example: null\n          enum:\n            - cardNotFound\n            - cardExists\n            - pinNotFound\n            - badRequest\n            - invalidLogin\n            - unauthorized\n        message:\n          type: string\n          description: Human-readable error message\n          example: Error message\n      required:\n        - code\n        - message\n    CardNumber:\n      description: Unique card number\n      type: string\n      example: '12345678'\n      minLength: 6\n      maxLength: 20\n    Operator:\n      type: object\n      description: \u003e\n        Information which may be optionally used to track additional details\n        about the\n\n        CenterEdge Advantage employee and station that performs an operation.\n      properties:\n        employeeName:\n          type: string\n        employeeNumber:\n          type: integer\n        stationName:\n          type: string\n        stationNumber:\n          type: integer\n    AdjustmentBase:\n      type: object\n      description: \u003e\n        Abstract base for adjustments. There are several types of transactions\n        defined,\n\n        see the `AdjustmentType` model for details.\n      properties:\n        type:\n          $ref: '#/components/schemas/AdjustmentType'\n      required:\n        - type\n    Points:\n      type: object\n      description: \u003e\n        This may contain zero or more different point types. A missing property\n        is the equivalent of 0.\n      properties:\n        regularPoints:\n          type: number\n          description: Regular points usable for game plays or for POS payment.\n          minimum: 0\n        bonusPoints:\n          type: number\n          description: Bonus points only usable for game plays.\n          minimum: 0\n        redemptionTickets:\n          type: number\n          description: \u003e-\n            Redemption tickets won playing games, usable a the redemption\n            counter.\n          minimum: 0\n    ValueAdjustment:\n      description: An adjustment that is changing the point value of a card.\n      allOf:\n        - $ref: '#/components/schemas/AdjustmentBase'\n        - type: object\n          properties:\n            amount:\n              $ref: '#/components/schemas/Points'\n          required:\n            - amount\n    TimePlayGroupId:\n      type: integer\n      description: Time play group identifier\n      minimum: 0\n    TimePlayMinutesAdjustment:\n      type: object\n      description: Abstract base for adjustments adding or removing minutes.\n      allOf:\n        - $ref: '#/components/schemas/AdjustmentBase'\n        - type: object\n          properties:\n            groupId:\n              $ref: '#/components/schemas/TimePlayGroupId'\n            minutes:\n              type: integer\n              minimum: 1\n          required:\n            - groupId\n            - minutes\n    TimePlayAddMinutesAdjustment:\n      description: \u003e-\n        An adjustment which adds minutes to a time play, creating it if it\n        doesn't exist.\n      allOf:\n        - $ref: '#/components/schemas/TimePlayMinutesAdjustment'\n        - type: object\n          properties:\n            expirationDateTime:\n              type: string\n              format: date-time\n              description: 'If supplied, the date/time when the time play will expire.'\n              writeOnly: true\n            startTimePlay:\n              type: boolean\n              description: \u003e\n                If true, the clock should be started on the time play. This may\n                be during the sale of a new\n\n                time play, or when adding more minutes to an existing time play.\n                If the time play is already\n\n                started, this should be ignored. It is not required to return\n                this field on queries to get\n\n                transaction history.\n              writeOnly: true\n    TimePlayRemoveMinutesAdjustment:\n      description: An adjustment which removes minutes from an existing time play.\n      allOf:\n        - $ref: '#/components/schemas/TimePlayMinutesAdjustment'\n    PrivilegeGroupId:\n      type: integer\n      description: Privilege group identifier\n      minimum: 0\n    PrivilegeAdjustment:\n      type: object\n      description: \u003e-\n        Abstract base class for an adjusment which adds or removes privilege\n        uses.\n      allOf:\n        - $ref: '#/components/schemas/AdjustmentBase'\n        - type: object\n          properties:\n            groupId:\n              $ref: '#/components/schemas/PrivilegeGroupId'\n            count:\n              type: integer\n              minimum: 1\n              description: Number of privileges added/removed\n          required:\n            - groupId\n            - count\n    PrivilegeAddAdjustment:\n      type: object\n      description: \u003e-\n        An adjusment which adds uses to a privilege, creating it if it doesn't\n        exist.\n      allOf:\n        - $ref: '#/components/schemas/PrivilegeAdjustment'\n        - type: object\n          properties:\n            expirationDateTime:\n              type: string\n              format: date-time\n              description: 'If supplied, the date/time when the privilege will expire.'\n              writeOnly: true\n    PrivilegeRemoveAdjustment:\n      description: An adjustment which removes uses from a privilege.\n      allOf:\n        - $ref: '#/components/schemas/PrivilegeAdjustment'\n    Adjustment:\n      oneOf:\n        - $ref: '#/components/schemas/ValueAdjustment'\n        - $ref: '#/components/schemas/TimePlayAddMinutesAdjustment'\n        - $ref: '#/components/schemas/TimePlayRemoveMinutesAdjustment'\n        - $ref: '#/components/schemas/PrivilegeAddAdjustment'\n        - $ref: '#/components/schemas/PrivilegeRemoveAdjustment'\n      discriminator:\n        propertyName: type\n        mapping:\n          addValue: '#/components/schemas/ValueAdjustment'\n          removeValue: '#/components/schemas/ValueAdjustment'\n          addMinutes: '#/components/schemas/TimePlayAddMinutesAdjustment'\n          removeMinutes: '#/components/schemas/TimePlayRemoveMinutesAdjustment'\n          addPrivilege: '#/components/schemas/PrivilegeAddAdjustment'\n          removePrivilege: '#/components/schemas/PrivilegeRemoveAdjustment'\n    TimePlayType:\n      type: string\n      enum:\n        - minutes\n    TimePlayBase:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/TimePlayType'\n        groupId:\n          $ref: '#/components/schemas/TimePlayGroupId'\n        expirationDateTime:\n          type: string\n          format: date-time\n      required:\n        - type\n        - groupId\n    TimePlayMinutes:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/TimePlayBase'\n        - type: object\n          properties:\n            started:\n              type: boolean\n              description: 'If true, the clock is currently running on the number of minutes'\n            minutesRemaining:\n              type: integer\n              minimum: 0\n          required:\n            - started\n            - minutesRemaining\n    TimePlay:\n      description: \u003e\n        Information about the time play currently on a card. The time play may\n        be inactive or active. Inactive\n\n        time plays are typically for a specific number of minutes that weren't\n        started immediately, and will\n\n        start on first use.\n\n\n        On a Card object, null would indicate the card does not have a time\n        play.\n      oneOf:\n        - $ref: '#/components/schemas/TimePlayMinutes'\n      discriminator:\n        propertyName: type\n        mapping:\n          minutes: '#/components/schemas/TimePlayMinutes'\n    Privilege:\n      type: object\n      properties:\n        groupId:\n          $ref: '#/components/schemas/PrivilegeGroupId'\n        count:\n          type: integer\n          description: Number of privileges remaining\n          minimum: 1\n        expirationDateTime:\n          type: string\n          format: date-time\n          description: Optional date/time when this privilege will expire if unused\n      required:\n        - groupId\n        - count\n    Card:\n      type: object\n      description: |\n        Provides information about the current state of a './CardNumber.yaml'\n\n        `timePlay` should be null if the card doesn't have a time play assigned.\n      properties:\n        cardNumber:\n          $ref: '#/components/schemas/CardNumber'\n        issuedAtTime:\n          description: Date and time when the card was issued.\n          type: string\n          format: date-time\n          example: '2020-05-01T15:00:00.000-04:00'\n        balance:\n          $ref: '#/components/schemas/Points'\n        timePlays:\n          type: array\n          description: \u003e\n            List of time plays currently available to the cardholder. There may\n            be only\n\n            one time play per time play group. This list *should not* include\n            any time plays\n\n            which have expired and are no longer available.\n          items:\n            $ref: '#/components/schemas/TimePlay'\n        privileges:\n          type: array\n          description: List of privileges currently available to the cardholder.\n          items:\n            $ref: '#/components/schemas/Privilege'\n      required:\n        - cardNumber\n        - issuedAtTime\n        - balance\n    TransactionIdReadOnly:\n      type: integer\n      format: int64\n      description: Unique transaction id\n      minimum: 0\n      readOnly: true\n    TransactionType:\n      description: \u003e\n        Type of the transaction. `adjustment` indicates a change in balance,\n        usually due to things\n\n        like a sale or refund. `gamePlay` indicates that a game was activated.\n      type: string\n      enum:\n        - adjustment\n        - gamePlay\n        - other\n    TransactionBase:\n      type: object\n      description: \u003e\n        Abstract base for transactions. There are two primary types of\n        transactions defined, `adjustment` and\n\n        `gamePlay`. See the `TransactionType` model for details.\n      properties:\n        id:\n          $ref: '#/components/schemas/TransactionIdReadOnly'\n        cardNumber:\n          $ref: '#/components/schemas/CardNumber'\n        type:\n          $ref: '#/components/schemas/TransactionType'\n        transactionTime:\n          description: \u003e-\n            Date and time of the transaction, in ISO 8601 format with accurate\n            time zone information.\n          type: string\n          format: date-time\n          example: '2020-05-01T15:00:00.000-04:00'\n          readOnly: true\n      required:\n        - id\n        - transactionTime\n        - cardNumber\n    AdjustmentTransaction:\n      description: \u003e\n        Provides details about a transaction performed against a card. It may\n        contain one or more `adjustments`\n\n        which indicates changes that occurred on the card as part of this\n        transaction. Depending on the card\n\n        system's design, there may be limits on how many adjustments or what\n        adjustments may be combined in a\n\n        single transaction. These limitations are detailed by the capabilities\n        endpoint.\n\n\n        If available, information about the CenterEdge Advantage employee and\n        station where a transaction is\n\n        performed is provided in the `operator` property. CenterEdge will supply\n        this when creating a transaction.\n\n        The card system may optionally persist it and return it on subsequent\n        transaction history requests.\n      allOf:\n        - $ref: '#/components/schemas/TransactionBase'\n        - type: object\n          properties:\n            operator:\n              $ref: '#/components/schemas/Operator'\n            adjustments:\n              type: array\n              minLength: 1\n              description: List of adjustments performed as part of this transaction.\n              items:\n                $ref: '#/components/schemas/Adjustment'\n          required:\n            - actions\n    GameId:\n      description: 'Unique game identifier, must remain constant over time.'\n      type: string\n      example: 12345678\n      minLength: 1\n      maxLength: 20\n    GamePlayTransaction:\n      description: \u003e\n        A transaction which indicates the activation of a game with a card. This\n        may also indicate an emulated\n\n        game transactions posted via an endpoint.\n      allOf:\n        - $ref: '#/components/schemas/TransactionBase'\n        - type: object\n          properties:\n            gameId:\n              $ref: '#/components/schemas/GameId'\n            gameDescription:\n              type: string\n            amount:\n              $ref: '#/components/schemas/Points'\n            usedTimePlay:\n              type: boolean\n              description: \u003e-\n                True if a time play was used as part of this game play. This\n                would typically mean the transaction has no amount.\n              readOnly: true\n            usedPlayPrivilege:\n              type: boolean\n              description: \u003e-\n                True if a play privilege was used as part of this game play.\n                This would typically mean the transaction has no amount.\n              readOnly: true\n          required:\n            - gameId\n            - gameDescription\n    CardTransaction:\n      oneOf:\n        - $ref: '#/components/schemas/AdjustmentTransaction'\n        - $ref: '#/components/schemas/GamePlayTransaction'\n      discriminator:\n        propertyName: type\n        mapping:\n          adjustment: '#/components/schemas/AdjustmentTransaction'\n          gamePlay: '#/components/schemas/GamePlayTransaction'\n    CreateTransactionBase:\n      type: object\n      description: \u003e\n        Abstract base for creating a new transaction. There are two primary\n        types of transactions defined, `adjustment` and\n\n        `gamePlay`. See the `TransactionType` model for details.\n      properties:\n        type:\n          $ref: '#/components/schemas/TransactionType'\n      required:\n        - type\n    CreateAdjustmentTransaction:\n      description: \u003e\n        Provides details about a transaction performed against a card. It may\n        contain one or more `adjustments`\n\n        which indicates changes that occurred on the card as part of this\n        transaction. Depending on the card\n\n        system's design, there may be limits on how many adjustments or what\n        adjustments may be combined in a\n\n        single transaction. These limitations are detailed by the capabilities\n        endpoint.\n\n\n        If available, information about the CenterEdge Advantage employee and\n        station where a transaction is\n\n        performed is provided in the `operator` property. CenterEdge will supply\n        this when creating a transaction.\n\n        The card system may optionally persist it and return it on subsequent\n        transaction history requests.\n      allOf:\n        - $ref: '#/components/schemas/CreateTransactionBase'\n        - type: object\n          properties:\n            operator:\n              $ref: '#/components/schemas/Operator'\n            adjustments:\n              type: array\n              minLength: 1\n              description: List of adjustments performed as part of this transaction.\n              items:\n                $ref: '#/components/schemas/Adjustment'\n          required:\n            - actions\n    CreateGamePlayTransaction:\n      description: \u003e\n        A transaction which indicates the activation of a game with a card. This\n        may also indicate an emulated\n\n        game transactions posted via an endpoint.\n      allOf:\n        - $ref: '#/components/schemas/CreateTransactionBase'\n        - type: object\n          properties:\n            gameId:\n              $ref: '#/components/schemas/GameId'\n            amount:\n              $ref: '#/components/schemas/Points'\n          required:\n            - gameId\n    CreateCardTransaction:\n      oneOf:\n        - $ref: '#/components/schemas/CreateAdjustmentTransaction'\n        - $ref: '#/components/schemas/CreateGamePlayTransaction'\n      discriminator:\n        propertyName: type\n        mapping:\n          adjustment: '#/components/schemas/CreateAdjustmentTransaction'\n          gamePlay: '#/components/schemas/CreateGamePlayTransaction'\n    TransactionId:\n      type: integer\n      format: int64\n      description: Unique transaction id\n      minimum: 0\n    CardNumberFormat:\n      type: object\n      properties:\n        minLength:\n          type: integer\n          description: Minimum length of the card number\n          minimum: 6\n          maximum: 20\n        maxLength:\n          type: integer\n          description: Maximum length of the card number\n          minimum: 6\n          maximum: 20\n        prefix:\n          type: string\n          description: Prefix a the beginning of the number\n          minLength: 1\n          maxLength: 19\n        suffix:\n          type: string\n          description: Suffix at the end of the number\n          minLength: 1\n          maxLength: 19\n        regex:\n          type: string\n          description: \u003e-\n            Regular expression applied to the number, by default requires all\n            numeric\n          default: ^\\d+$\n      required:\n        - minLength\n        - maxLength\n      example:\n        minLength: 8\n        maxLength: 8\n        prefix: '05'\n    Game:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/GameId'\n        name:\n          type: string\n          description: Human-readable name of the game.\n        virtualPlayEnabled:\n          type: boolean\n          description: 'If true, this game supports virtual plays from CenterEdge.'\n      required:\n        - id\n        - name\n    Login:\n      type: object\n      properties:\n        username:\n          type: string\n          minLength: 1\n          description: The username for login\n        passwordHash:\n          type: string\n          minLength: 1\n          description: \u003e\n            The SHA-1 hash of the following concatenated strings (UTF-8):\n            username, password, and requestTimestamp\n\n            (exactly as formatted in the request). This hash is then Base64\n            encoded to make the password hash.\n\n\n            For example, if username is `CenterEdge`, password is `MyPassword`,\n            and requestTimestamp is\n\n            `2020-05-26T13:00:05.102Z`, then\n            `CenterEdgeMyPassword2020-05-26T13:00:05.102Z` is UTF-8 encoded,\n\n            SHA-1 hashed, and Base64 encoded to make\n            `GIetRQYzgeq/ChZ2CdH9g9E+8IM=`.\n        requestTimestamp:\n          type: string\n          format: date-time\n          description: \u003e\n            The date/time when this login request is being made. This is\n            designed to help prevent\n\n            replay attacks. It is used when validating the passwordHash, and\n            should also be compared\n\n            to the real time within a window (i.e. +/- 5 minutes). If the\n            incoming requestTimestamp is outside\n\n            the window, the login should be declined. The timestamp should be\n            UTC.\n      required:\n        - username\n        - passwordHash\n        - requestTimestamp\n    PrivilegeGroup:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/PrivilegeGroupId'\n        name:\n          type: string\n          description: Human-readable privilege group name\n      required:\n        - id\n        - name\n    TimePlayGroup:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/TimePlayGroupId'\n        name:\n          type: string\n          description: Human-readable time play group name\n      required:\n        - id\n        - name\n  responses:\n    Unauthorized:\n      description: No authentication token was supplied or the token is invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: unauthorized\n            message: Unauthorized\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: badRequest\n            message: Bad Request\n    CardNotFound:\n      description: \u003e-\n        Card number does not exist or has not yet been issued. This includes\n        wiped cards.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: cardNotFound\n            message: Card Not Found\n  parameters:\n    cardNumber:\n      name: cardNumber\n      in: path\n      description: Unique card number.\n      required: true\n      schema:\n        $ref: '#/components/schemas/CardNumber'\n    skip:\n      name: skip\n      in: query\n      description: Skip this number of records in the result. Used for pagination.\n      schema:\n        type: integer\n        minimum: 0\n        default: 0\n    take:\n      name: take\n      in: query\n      description: Return up to this number of records in the result. Used for pagination.\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 100\n",
			"canonicalURL": "/github.com/CenterEdge/Yardarm@e4f02b4b265210477a5e1bbb5eae3743e02288f2/-/blob/src/main/Yardarm.CommandLine/centeredge-cardsystemapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CenterEdge/Yardarm/blob/e4f02b4b265210477a5e1bbb5eae3743e02288f2/src/main/Yardarm.CommandLine/centeredge-cardsystemapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/cards/{cardNumber}\": get: responses: code 200: contents: media: \"application/json\": generate schema: field timePlays: item: oneOf: discriminator: unable to map \"minutes\" to \"https://raw.githubusercontent.com/CenterEdge/Yardarm/e4f02b4b265210477a5e1bbb5eae3743e02288f2/src/main/Yardarm.CommandLine/centeredge-cardsystemapi.yaml#/components/schemas/TimePlayMinutes\"",
	"NotImplemented": [
		"complex schema merging"
	]
}