{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/link-it/govway"
		},
		"file": {
			"name": "parser.yaml",
			"size": 0,
			"path": "tools/utils/src/org/openspcoop2/utils/openapi/parser.yaml",
			"byteSize": 12888,
			"content": "openapi: 3.0.3\nservers:\n  - url: http://petstore.swagger.io/api\n    description: esempio\n\ninfo:\n  x-api-id: https://esempioId\n  title: Document Retrieve\n  x-summary: Servizio demo che consente di comprendere le varie modalità di scambio degli allegati\n  description: Servizio demo che consente di comprendere le varie modalità di scambio degli allegati\n  version: \"0.1\"\n  contact:\n    email: info@link.it\n  license:\n    name: GPL v3.0\n    url: 'https://www.gnu.org/licenses/gpl-3.0.txt'\n\ntags:\n  - name: discriminator\n    description: test su discriminator  \n    \npaths:\n   \n  /pets1:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/Cat'\n                - $ref: '#/components/schemas/Dog'\n              discriminator:\n                propertyName: pet_type\n      responses:\n        '200':\n          description: Updated\n\n  /pets2:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet2'\n      responses:\n        '200':\n          description: Updated\n\n  /pets3:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet3'\n      responses:\n        '200':\n          description: Updated\n\n  /pets4:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet4'\n      responses:\n        '200':\n          description: Updated\n\n  /pets5:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet5'\n      responses:\n        '200':\n          description: Updated\n\n  /pets6:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet6'\n      responses:\n        '200':\n          description: Updated\n\n  /pets7:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet7'\n      responses:\n        '200':\n          description: Updated\n\n  /pets8:\n    patch:\n      tags:\n       - discriminator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet8'\n      responses:\n        '200':\n          description: Updated\n          \ncomponents:\n        \n  schemas:\n\n    # NotDefined\n    Pet:\n      type: object\n      required:\n        - pet_typeERRORE1\n      properties:\n        pet_typeERRORE1:\n          type: string\n      discriminator:\n        propertyName: pet_type\n    Dog:     # \"Dog\" is a value for the pet_type property (the discriminator value)\n      allOf: # Combines the main `Pet` schema with `Dog`-specific properties \n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Dog`\n          properties:\n            bark:\n              type: boolean\n            breed:\n              type: string\n              enum: [Dingo, Husky, Retriever, Shepherd]\n    Cat:     # \"Cat\" is a value for the pet_type property (the discriminator value)\n      allOf: # Combines the main `Pet` schema with `Cat`-specific properties \n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Cat`\n          properties:\n            hunts:\n              type: boolean\n            age:\n              type: integer\n\n    # NotDefined allOf\n    Pet2:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog2'\n            - $ref: '#/components/schemas/Cat2'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'dog': '#/components/schemas/Dog2'\n              'cat': '#/components/schemas/Cat2'\n    Dog2Base:\n      type: object\n      required:\n        - bark\n        - breed\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n      additionalProperties: false\n    Dog2:\n      allOf:\n        - $ref: '#/components/schemas/Dog2Base'\n        - type: object\n          required:\n            - pet_typeERRORE2\n          properties:\n            pet_typeERRORE2: \n              type: string\n          additionalProperties: false\n    Cat2:\n      type: object\n      required:\n        - pet_type\n        - hunts\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n    \n    # NotDefined allOf+properties  \n    Pet3:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog3'\n            - $ref: '#/components/schemas/Cat3'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'dog': '#/components/schemas/Dog3'\n              'cat': '#/components/schemas/Cat3'\n    Dog3BaseA:\n      type: object\n      required:\n        - bark\n        - breed\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n      additionalProperties: false\n    Dog3BaseB:\n      type: object\n      required:\n        - pet_typeERRORE3\n      properties: \n        pet_typeERRORE3: \n           type: string\n      additionalProperties: false\n    Dog3:\n      allOf:\n        - $ref: '#/components/schemas/Dog3BaseA'\n        - $ref: '#/components/schemas/Dog3BaseB'\n    Cat3:\n      type: object\n      required:\n        - pet_type\n        - hunts\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n      \n    # NotRequired (errore non rilevato se sono presenti altri errori. Viene appunto usato parser2.yaml per verificare questo errore in attesa di altri)\n    Pet4:\n      type: object\n      required:\n         - altro4\n         - pet4\n      properties:\n        altro4:\n          type: string\n        pet4:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog4'\n            - $ref: '#/components/schemas/Cat4'\n          discriminator:\n            propertyName: pet_type4\n            mapping:\n              'dog4': '#/components/schemas/Dog4'\n              'cat4': '#/components/schemas/Cat4'\n              \n    Dog4:\n      type: object\n      required:\n        - bark4\n        - breed4\n        - pet_type4\n      properties:\n        bark4:\n          type: boolean\n        breed4:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd] \n        pet_type4: \n           type: string\n      additionalProperties: false\n    Cat4:\n      type: object\n      required:\n        - hunts4\n        - age4\n      properties:\n        pet_type4: \n          type: string\n        hunts4:\n          type: boolean\n        age4:\n          type: integer\n      additionalProperties: false\n      \n    # NotRequired in allOf+properties\n    Pet5:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog5'\n            - $ref: '#/components/schemas/Cat5'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'dog': '#/components/schemas/Dog5'\n              'cat': '#/components/schemas/Cat5'\n    Dog5Base:\n      type: object\n      required:\n        - bark\n        - breed\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n      additionalProperties: false\n    Dog5:\n      allOf:\n        - $ref: '#/components/schemas/Dog5Base'\n        - type: object\n          properties:\n            pet_type: \n              type: string\n          additionalProperties: false\n    Cat5:\n      type: object\n      required:\n        - pet_type\n        - hunts\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n      \n    # NotRequired in allOf\n    Pet6:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog6'\n            - $ref: '#/components/schemas/Cat6'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'dog': '#/components/schemas/Dog6'\n              'cat': '#/components/schemas/Cat6'\n    Dog6BaseA:\n      type: object\n      required:\n        - bark\n        - breed\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n      additionalProperties: false\n    Dog6BaseB:\n      type: object\n      properties: \n        pet_type: \n           type: string\n      additionalProperties: false\n    Dog6:\n      allOf:\n        - $ref: '#/components/schemas/Dog6BaseA'\n        - $ref: '#/components/schemas/Dog6BaseB'\n    Cat6:\n      type: object\n      required:\n        - pet_type\n        - hunts\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n      \n    # NotDefined in allOf ricorsiva\n    Pet7:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog7'\n            - $ref: '#/components/schemas/Cat7'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'Dog': '#/components/schemas/Dog7'\n              'Cat': '#/components/schemas/Cat7'     \n    Dog7:\n      type: \"object\"\n      allOf:\n      - $ref: \"#/components/schemas/Dog7BaseA\"\n      - type: \"object\"\n        properties:\n          altraProprieta:\n            type: string\n    Dog7BaseA:\n      type: \"object\"\n      allOf:\n      - $ref: \"#/components/schemas/Dog7BaseB\"\n      - type: \"object\"\n        required:\n        - pet_typeERRORE\n        properties:\n          pet_typeERRORE: \n            type: string\n    Dog7BaseB:\n      type: object\n      required:\n        - bark\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n    Cat7:\n      type: object\n      required:\n        - pet_type\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n      \n      \n    # NotRequired in allOf ricorsiva\n    Pet8:\n      type: object\n      required:\n         - altro\n         - pet\n      properties:\n        altro:\n          type: string\n        pet:\n          type: object\n          oneOf:\n            - $ref: '#/components/schemas/Dog8'\n            - $ref: '#/components/schemas/Cat8'\n          discriminator:\n            propertyName: pet_type\n            mapping:\n              'Dog': '#/components/schemas/Dog8'\n              'Cat': '#/components/schemas/Cat8'     \n    Dog8:\n      type: \"object\"\n      allOf:\n      - $ref: \"#/components/schemas/Dog8BaseA\"\n      - type: \"object\"\n        properties:\n          altraProprieta:\n            type: string\n    Dog8BaseA:\n      type: \"object\"\n      allOf:\n      - $ref: \"#/components/schemas/Dog8BaseB\"\n      - type: \"object\"\n        properties:\n          pet_type: \n            type: string\n    Dog8BaseB:\n      type: object\n      required:\n        - bark\n      properties: \n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n    Cat8:\n      type: object\n      required:\n        - pet_type\n        - age\n      properties:\n        pet_type: \n          type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      additionalProperties: false\n"
		}
	},
	"Error": "buildIR: make ir: path \"/pets4\": patch: requestBody: contents: application/json: schema: field pet4: oneOf: discriminator: unable to map cat4 to #/components/schemas/Cat4",
	"NotImplemented": [
		"allOf"
	]
}