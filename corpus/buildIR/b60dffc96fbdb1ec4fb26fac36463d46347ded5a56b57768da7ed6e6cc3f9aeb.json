{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/finos/symphony-api-spec"
		},
		"file": {
			"name": "community-connect-public-api.yaml",
			"size": 0,
			"path": "community-connect/community-connect-public-api.yaml",
			"byteSize": 17673,
			"content": "openapi: 3.0.1\ninfo:\n  title: Community Connect API\n  description: 'Community Connect public API'\n  version: 1.3.0\ntags:\n  - name: channelco\n    description: Public API for channelco\n\npaths:\n  /v1/onboarding/tenant:\n    get:\n      tags:\n        - channelco\n      security:\n        - ApiKeyAuth: [ ]\n      summary: Get user's pod and availability for onboarding\n      operationId: getUserOnboardingAvailability\n      parameters:\n        - name: email\n          in: query\n          schema:\n            type: string\n          required: true\n          description: The user email\n          example: user@companyDomain.com\n      responses:\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserOnboardingAvaibilityResponse'\n              example: \"Company is already on Symphony but user needs access\"\n  /v1/channelco/user:\n    get:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: [ ]\n      summary: Search channelco user\n      operationId: searchUser\n      parameters:\n        - name: email\n          in: query\n          schema:\n            type: string\n          required: true\n          description: user's email\n          example: user@comcocompany.com\n      responses:\n        200:\n          description: body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelCoUserAndCompany'\n        404:\n          description: The user do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    post:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: []\n      summary: Create channelco user\n      operationId: createUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChannelCoUsersListRequest'\n      responses:\n        201:\n          description: body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelCoUsersListResponse'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /v1/channelco/company/{companyId}/user/{userId}/roles/add:\n    post:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: [ ]\n      summary: Adds a role to a channelco user's account\n      operationId: addRole\n      parameters:\n        - name: userId\n          in: path\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: symphony user id\n          example: 123456789\n        - name: companyId\n          in: path\n          schema:\n            type: string\n          required: true\n          description: company Id of the user\n          example: \"10\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        200:\n          description: body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiInfo'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        404:\n          description: The user do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n  /v1/channelco/company/{companyId}/user/{userId}:\n    get:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: [ ]\n      summary: Get channelco user by companyId and userId\n      operationId: getUser\n      parameters:\n        - name: userId\n          in: path\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: symphony user id\n          example: 123456789\n        - name: companyId\n          in: path\n          schema:\n            type: string\n          required: true\n          description: company Id of the user\n          example: \"10\"\n      responses:\n        200:\n          description: body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelCoUserAndCompany'\n        404:\n          description: The user do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    put:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: [ ]\n      summary: Update channelco user\n      operationId: updateUser\n      parameters:\n        - name: userId\n          in: path\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: symphony user id\n          example: 123456789\n        - name: companyId\n          in: path\n          schema:\n            type: string\n          required: true\n          description: company Id of the user\n          example: \"10\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateChannelCoUserRequest'\n      responses:\n        200:\n          description: body\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelCoUser'\n        404:\n          description: The user do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n    delete:\n      tags:\n        - channelco\n      security:\n        - JwtAuth: [ ]\n      summary: Disable channelco user\n      operationId: disableUser\n      parameters:\n        - name: userId\n          in: path\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: symphony user id\n          example: 123456789\n        - name: companyId\n          in: path\n          schema:\n            type: string\n          required: true\n          description: company Id of the user\n          example: \"10\"\n      responses:\n        204:\n          description: The user was disabled successfully.\n        404:\n          description: The user do not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        400:\n          description: Something was wrong about the request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n        401:\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n\ncomponents:\n  schemas:\n    ApiError:\n      type: object\n      properties:\n        code:\n          type: string\n          description: error code\n        message:\n          type: string\n          description: Human readable details about the error\n        details:\n          description: Full details about error, usefull for 400\n          type: object\n    ApiInfo:\n      type: object\n      properties:\n        code:\n          type: string\n          description: info code\n        message:\n          type: string\n          description: Human readable details about the information the api is returning\n        details:\n          description: Full details about info\n          type: object\n    Config:\n      type: object\n      properties:\n        id:\n          type: string\n          description: config key\n        value:\n          type: string\n          description: config value\n      required:\n        - id\n    ChannelCoPartner:\n      type: object\n      properties:\n        id:\n          type: string\n          description: partner id\n        name:\n          type: string\n          description: partner name\n        appName:\n          type: string\n          description: app name (visible in user invitation email)\n        supportSso:\n          type: boolean\n          description: support sso or not\n        ssoUrl:\n          type: string\n          description: if support sso enabled, the sso url\n        ssoType:\n          type: string\n          enum: [SAML, OAUTH]\n        defaultEmailLanguage:\n          type: string\n          description: Invitation email language used. It will work only if the template for the specified language is configured, if no custom language are configured, leave it empty\n        idp:\n          type: string\n          description: identity provider for partner\n      required:\n        - id\n        - name\n        - idp\n    UserOnboardingAvaibilityResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiInfo'\n        - type: object\n          properties:\n            podUrl:\n              type: string\n              example: ces4-dev.symphony.com\n\n    ChannelCoUserRequest:\n      type: object\n      description: payload to onboard a channelco user account\n      properties:\n        email:\n          type: string\n          format: email\n          example: foo@example.com\n        firstName:\n          type: string\n          example: Paul\n          maxLength: 64\n        lastName:\n          type: string\n          example: Smith\n          maxLength: 64\n        displayName:\n          type: string\n          example: Paul Smith\n          maxLength: 128\n          description: if omitted, it will be generated with the pattern \u003cfirstName lastName\u003e\n        phoneNumber:\n          type: string\n          example: +33612345678\n        department:\n          type: string\n          example: Product Engineering\n          maxLength: 256\n        title:\n          type: string\n          example: Engineering manager\n          maxLength: 256\n        location:\n          type: string\n          description: country\n      required:\n        - email\n        - firstName\n        - lastName\n    ChannelCoUsersListRequest:\n      type: object\n      description: payload to onboard channelco users\n      properties:\n        companyName:\n          type: string\n          description: This field is mandatory only if a company with same domain (taken from email) does not exist yet\n          example: Symphony\n          maxLength: 64\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelCoUserRequest'\n      required:\n        - companyName\n        - users\n    UpdateChannelCoUserRequest:\n      type: object\n      description: payload to update a channelco user account\n      properties:\n        email:\n          type: string\n          format: email\n          example: foo@example.com\n        firstName:\n          type: string\n          example: Paul\n          maxLength: 64\n        lastName:\n          type: string\n          example: Smith\n          maxLength: 64\n        displayName:\n          type: string\n          example: Paul Smith\n        phoneNumber:\n          type: string\n          example: +33612345678\n        department:\n          type: string\n          example: Product Engineering\n          maxLength: 256\n        title:\n          type: string\n          example: Engineering manager\n          maxLength: 256\n        location:\n          type: string\n          description: country\n    ChannelCoUser:\n      allOf:\n        - $ref: '#/components/schemas/ChannelCoUserRequest'\n        - type: object\n          properties:\n            userId:\n              type: integer\n              format: int64\n              description: Member's user id\n            username:\n              type: string\n              description: Member's username generated by API. If there is no naming conflict it is \u003cfirstName.lastName\u003e (in lower case)\n    ChannelCoUserAndCompany:\n      allOf:\n        - $ref: '#/components/schemas/ChannelCoUser'\n        - type: object\n          properties:\n            companyId:\n              type: string\n              description: company Id of the user\n              example: \"10\"\n            companyName:\n              type: string\n              description: company name of the user\n              example: Symphony\n              maxLength: 64\n    ChannelCoUserResponse:\n      allOf:\n        - $ref: '#/components/schemas/ChannelCoUserRequest'\n        - type: object\n          properties:\n            userId:\n              type: integer\n              format: int64\n              description: Member's user id\n            username:\n              type: string\n              description: Member's username generated by API. It is expected to be the same as email\n            code:\n              type: string\n              description: info code\n              example:\n                newCompany:\n                  value: USER_ADDED_NEW_COMPANY\n                  description: new company created and user added into it\n                existingCompany:\n                  value: USER_ADDED_EXISTING_COMPANY\n                  description: company already exists, user added into it\n                mismatchCompany:\n                  value: USER_ADDED_TO_DIFFERENT_COMPANY_NAME\n                  description: company already exists (lookup by domain name), but the name is different. User is added in the existing one\n            message:\n              type: string\n              description: Human readable details about the information the api is returning\n    ChannelCoUserErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/ChannelCoUserRequest'\n        - type: object\n          properties:\n            code:\n              type: string\n              description: error code\n              example:\n                alreadyExisting:\n                  value: USER_ALREADY_EXISTS\n                  description: user already existing belong a pod (error message will provide detail about pod url)\n                existingCompany:\n                  value: COMPANY_ALREADY_EXISTS_USER_NEEDS_ACCESS\n                  description: company already exists and the user need access (error message will provide detail about pod url)\n                existingComCoCompany:\n                  value: COMCO_COMPANY_ALREADY_EXISTS_USER_NEED_ACCESS\n                  description: comco company already exists and the user need access\n                mismatchCompany:\n                  value: UNEXPECTED_ERROR\n            message:\n              type: string\n              description: Human readable details about the information the api is returning\n    ChannelCoUsersListResponse:\n      type: object\n      properties:\n        companyId:\n          type: string\n          description: company Id of the users\n          example: \"10\"\n        companyName:\n          type: string\n          description: company name of the users\n          example: Symphony\n          maxLength: 64\n        success:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelCoUserResponse'\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelCoUserErrorResponse'\n    Role:\n      type: object\n      properties:\n        id:\n          type: string\n          description: role Id\n          example: COMPLIANCE_OFFICER\n      required:\n        - id\n  securitySchemes:\n    JwtAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: ExtApp JWT\n    ApiKeyAuth:\n      type: apiKey\n      in: query\n      name: token\n    CommonJwtAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Common JWT\nsecurity:\n  - JwtAuth: []\n  - ApiKeyAuth: []\n",
			"canonicalURL": "/github.com/finos/symphony-api-spec@b52eb2a8cb5242bef5f0d24517f364bfcc39328f/-/blob/community-connect/community-connect-public-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/finos/symphony-api-spec/blob/b52eb2a8cb5242bef5f0d24517f364bfcc39328f/community-connect/community-connect-public-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/v1/channelco/company/{companyId}/user/{userId}\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: schema type mismatch:  and object"
}