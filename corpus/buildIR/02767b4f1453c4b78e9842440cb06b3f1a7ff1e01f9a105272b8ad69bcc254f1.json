{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackrox/acs-fleet-manager"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
			"byteSize": 21289,
			"content": "openapi: 3.0.0\ninfo:\n  description: Red Hat Advanced Cluster Security (RHACS) Service Fleet Manager Admin\n    APIs that can be used by RHACS Managed Service Operations Team.\n  title: Red Hat Advanced Cluster Security Service Fleet Manager Admin API\n  version: 0.0.3\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- name: Admin APIs\npaths:\n  /api/rhacs/v1/admin/centrals:\n    get:\n      operationId: getCentrals\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the following `centralRequests` fields:\n\n          * centralUIURL\n          * centralDataURL\n          * cloud_provider\n          * cluster_id\n          * created_at\n          * href\n          * id\n          * instance_type\n          * multi_az\n          * name\n          * organisation_id\n          * owner\n          * region\n          * status\n          * updated_at\n          * version\n\n          For example, to return all Central instances ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Central instances ordered by their name _and_ created date, use the following syntax:\n\n          ```sql\n          name asc, created_at asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of an\n          SQL statement. Allowed fields in the search are `cloud_provider`, `name`, `owner`, `region`, and `status`. Allowed comparators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed joins are `AND` and `OR`. However, you can use a maximum of 10 joins in a search query.\n\n          Examples:\n\n          To return a Central instance with the name `my-central` and the region `aws`, use the following syntax:\n\n          ```\n          name = my-central and cloud_provider = aws\n          ```[p-]\n\n          To return a Central instance with a name that starts with `my`, use the following syntax:\n\n          ```\n          name like my%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Central instances\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = my-central and cloud_provider = aws\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CentralList'\n          description: Return a list of Central instances. This endpoint will return\n            all Central instances that are stored in the database and the are not\n            filtered based on user ids or org ids.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of Centrals\n    post:\n      description: |\n        Creates a new Central that is owned by the user and organisation authenticated for the request.\n        Each Central has a single owner organisation and a single owner user.\n        This API allows providing custom resource settings for the new Central instance.\n      operationId: createCentral\n      parameters:\n      - description: Perform the action in an asynchronous manner\n        explode: true\n        in: query\n        name: async\n        required: true\n        schema:\n          type: boolean\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CentralRequestPayload'\n        description: Central data\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CentralRequest'\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation errors occurred\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User forbidden either because the user is not authorized to\n            access the service or because the maximum number of instances that can\n            be created by this user has been reached.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: A conflict has been detected in the creation of this resource\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: An unexpected error occurred while creating the Central request\n      security:\n      - Bearer: []\n      summary: Creates a Central request\n  /api/rhacs/v1/admin/centrals/{id}:\n    delete:\n      operationId: deleteCentralById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Perform the action in an asynchronous manner\n        explode: true\n        in: query\n        name: async\n        required: true\n        schema:\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Central'\n          description: Central updated by ID\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Central found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a Central by ID\n    get:\n      operationId: getCentralById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Central'\n          description: Central found by ID\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Central found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Return the details of Central instance by ID\n    patch:\n      operationId: updateCentralById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CentralUpdateRequest'\n        description: Central update data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Central'\n          description: Central updated by ID\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Central found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Update a Central instance by ID\ncomponents:\n  schemas:\n    Central:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - required:\n        - central_operator_upgrading\n        - central_upgrading\n        - multi_az\n      - $ref: '#/components/schemas/Central_allOf'\n    CentralList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/CentralList_allOf'\n    CentralUpdateRequest:\n      example:\n        central_operator_version: central_operator_version\n        central:\n          resources:\n            requests:\n              key: requests\n            limits:\n              key: limits\n        scanner:\n          analyzer:\n            scaling:\n              maxReplicas: 1\n              autoScaling: autoScaling\n              minReplicas: 1\n              replicas: 1\n            resources:\n              requests:\n                key: requests\n              limits:\n                key: limits\n          db:\n            resources:\n              requests:\n                key: requests\n              limits:\n                key: limits\n        central_version: central_version\n      properties:\n        central_operator_version:\n          type: string\n        central_version:\n          type: string\n        central:\n          $ref: '#/components/schemas/CentralSpec'\n        scanner:\n          $ref: '#/components/schemas/ScannerSpec'\n      type: object\n    Error:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/Error_allOf'\n    ObjectReference:\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n      type: object\n    CentralRequestPayload:\n      description: Schema for the request body sent to /centrals POST\n      example:\n        central:\n          resources:\n            requests:\n              key: requests\n            limits:\n              key: limits\n        multi_az: true\n        name: name\n        scanner:\n          analyzer:\n            scaling:\n              maxReplicas: 1\n              autoScaling: autoScaling\n              minReplicas: 1\n              replicas: 1\n            resources:\n              requests:\n                key: requests\n              limits:\n                key: limits\n          db:\n            resources:\n              requests:\n                key: requests\n              limits:\n                key: limits\n        cloud_provider: cloud_provider\n        region: region\n      properties:\n        cloud_provider:\n          description: The cloud provider where the Central component will be created\n            in\n          type: string\n        multi_az:\n          description: Set this to true to configure the Central component to be multiAZ\n          type: boolean\n        name:\n          description: The name of the Central component. It must consist of lower-case\n            alphanumeric characters or '-', start with an alphabetic character, and\n            end with an alphanumeric character, and can not be longer than 32 characters.\n          type: string\n        region:\n          description: The region where the Central component cluster will be created\n            in\n          type: string\n        central:\n          $ref: '#/components/schemas/CentralSpec'\n        scanner:\n          $ref: '#/components/schemas/ScannerSpec'\n      required:\n      - name\n      type: object\n    CentralSpec:\n      example:\n        resources:\n          requests:\n            key: requests\n          limits:\n            key: limits\n      properties:\n        resources:\n          $ref: '#/components/schemas/ResourceRequirements'\n      type: object\n    ResourceRequirements:\n      example:\n        requests:\n          key: requests\n        limits:\n          key: limits\n      properties:\n        requests:\n          additionalProperties:\n            type: string\n          type: object\n        limits:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    ResourceList:\n      additionalProperties:\n        type: string\n      type: object\n    ScannerSpec:\n      example:\n        analyzer:\n          scaling:\n            maxReplicas: 1\n            autoScaling: autoScaling\n            minReplicas: 1\n            replicas: 1\n          resources:\n            requests:\n              key: requests\n            limits:\n              key: limits\n        db:\n          resources:\n            requests:\n              key: requests\n            limits:\n              key: limits\n      properties:\n        analyzer:\n          $ref: '#/components/schemas/ScannerSpec_analyzer'\n        db:\n          $ref: '#/components/schemas/ScannerSpec_db'\n      type: object\n    CentralRequest:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/CentralRequest_allOf'\n    List:\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n      required:\n      - items\n      - kind\n      - page\n      - size\n      - total\n      type: object\n    Central_allOf_routes:\n      properties:\n        domain:\n          type: string\n        router:\n          type: string\n    Central_allOf:\n      properties:\n        status:\n          description: 'Values: [accepted, preparing, provisioning, ready, failed,\n            deprovision, deleting] '\n          type: string\n        cloud_provider:\n          description: Name of Cloud used to deploy. For example AWS\n          type: string\n        multi_az:\n          type: boolean\n        region:\n          description: 'Values will be regions of specific cloud provider. For example:\n            us-east-1 for AWS'\n          type: string\n        owner:\n          type: string\n        name:\n          type: string\n        host:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        failed_reason:\n          type: string\n        actual_central_version:\n          type: string\n        actual_central_operator_version:\n          type: string\n        desired_central_version:\n          type: string\n        desired_central_operator_version:\n          type: string\n        central_upgrading:\n          type: boolean\n        central_operator_upgrading:\n          type: boolean\n        organisation_id:\n          type: string\n        subscription_id:\n          type: string\n        owner_account_id:\n          type: string\n        account_number:\n          type: string\n        instance_type:\n          type: string\n        quota_type:\n          type: string\n        routes:\n          items:\n            $ref: '#/components/schemas/Central_allOf_routes'\n          type: array\n        routes_created:\n          type: boolean\n        cluster_id:\n          type: string\n        namespace:\n          type: string\n        central:\n          $ref: '#/components/schemas/CentralSpec'\n        scanner:\n          $ref: '#/components/schemas/ScannerSpec'\n    CentralList_allOf:\n      properties:\n        items:\n          items:\n            allOf:\n            - $ref: '#/components/schemas/Central'\n          type: array\n    Error_allOf:\n      properties:\n        code:\n          type: string\n        reason:\n          type: string\n        operation_id:\n          type: string\n    ScannerSpec_analyzer_scaling:\n      example:\n        maxReplicas: 1\n        autoScaling: autoScaling\n        minReplicas: 1\n        replicas: 1\n      properties:\n        autoScaling:\n          type: string\n        replicas:\n          format: int32\n          minimum: 1\n          type: integer\n        minReplicas:\n          format: int32\n          minimum: 1\n          type: integer\n        maxReplicas:\n          format: int32\n          minimum: 1\n          type: integer\n    ScannerSpec_analyzer:\n      example:\n        scaling:\n          maxReplicas: 1\n          autoScaling: autoScaling\n          minReplicas: 1\n          replicas: 1\n        resources:\n          requests:\n            key: requests\n          limits:\n            key: limits\n      properties:\n        resources:\n          $ref: '#/components/schemas/ResourceRequirements'\n        scaling:\n          $ref: '#/components/schemas/ScannerSpec_analyzer_scaling'\n    ScannerSpec_db:\n      example:\n        resources:\n          requests:\n            key: requests\n          limits:\n            key: limits\n      properties:\n        resources:\n          $ref: '#/components/schemas/ResourceRequirements'\n    CentralRequest_allOf:\n      example: '{\"$ref\":\"#/components/examples/CentralRequestExample\"}'\n      properties:\n        status:\n          description: 'Values: [accepted, preparing, provisioning, ready, failed,\n            deprovision, deleting] '\n          type: string\n        cloud_provider:\n          description: Name of Cloud used to deploy. For example AWS\n          type: string\n        multi_az:\n          type: boolean\n        region:\n          description: 'Values will be regions of specific cloud provider. For example:\n            us-east-1 for AWS'\n          type: string\n        owner:\n          type: string\n        name:\n          type: string\n        centralUIURL:\n          type: string\n        centralDataURL:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        failed_reason:\n          type: string\n        version:\n          type: string\n        instance_type:\n          type: string\n      required:\n      - multi_az\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/stackrox/acs-fleet-manager@aab298397d9907c4fdefc9d7bc2e0be4d6ca13b6/-/blob/internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackrox/acs-fleet-manager/blob/aab298397d9907c4fdefc9d7bc2e0be4d6ca13b6/internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/rhacs/v1/admin/centrals\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: field items: item: allOf: allOf: schema type mismatch: object and "
}