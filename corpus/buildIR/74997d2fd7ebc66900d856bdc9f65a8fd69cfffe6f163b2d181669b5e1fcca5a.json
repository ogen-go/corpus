{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/finos/symphony-api-spec"
		},
		"file": {
			"name": "agent-api-public-deprecated.yaml",
			"size": 0,
			"path": "agent/agent-api-public-deprecated.yaml",
			"byteSize": 254899,
			"content": "openapi: 3.0.1\ninfo:\n  title: Agent API\n  description: |\n    This document refers to Symphony API calls to send and receive messages\n    and content. They need the on-premise Agent installed to perform\n    decryption/encryption of content.\n\n    - sessionToken and keyManagerToken can be obtained by calling the\n    authenticationAPI on the symphony back end and the key manager\n    respectively. Refer to the methods described in authenticatorAPI.yaml.\n    - Actions are defined to be atomic, ie will succeed in their entirety\n    or fail and have changed nothing.\n    - If it returns a 40X status then it will have sent no message to any\n    stream even if a request to some subset of the requested streams\n    would have succeeded.\n    - If this contract cannot be met for any reason then this is an error\n    and the response code will be 50X.\n    - MessageML is a markup language for messages. See reference here:\n    https://rest-api.symphony.com/docs/messagemlv2\n    - **Real Time Events**: The following events are returned when reading\n    from a real time messages and events stream (\"datafeed\"). These\n    events will be returned for datafeeds created with the v5 endpoints.\n    To know more about the endpoints, refer to Create Messages/Events\n    Stream and Read Messages/Events Stream. Unless otherwise specified,\n    all events were added in 1.46.\n  version: '22.9.1'\nservers:\n  - url: /\npaths:\n  /v3/health:\n    get:\n      tags:\n        - System\n      summary: Checks health status\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        Returns the connectivity status of your Agent server. If your Agent server is started and running, the status value will be `UP`\n      operationId: v3Health\n      responses:\n        200:\n          description: Agent application is alive.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3Health'\n  /v3/health/extended:\n    get:\n      tags:\n        - System\n      summary: Checks health status of services and users\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        Returns the connectivity status of the Agent services (**pod**, **key manager** and **datafeed**) as well as users\n        connectivity (**agentservice** and **ceservice**).\n\n        The global status will be set to `DOWN` if at least one of the sub-status is also `DOWN`.\n      operationId: v3ExtendedHealth\n      responses:\n        200:\n          description: Agent is healthy, all components are `UP`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3Health'\n        503:\n          description: Agent is unhealthy, some components are `DOWN`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3Health'\n  /v4/message/import:\n    post:\n      tags:\n        - Messages\n      summary: Import messages from other systems into Symphony.\n      description: |\n        Sends a message to be imported into the system.\n        Allows you to override the timestamp and author of the message with your desired values.\n        The requesting user must have the Content Management role.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n        Optionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V4MessageImportList'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4ImportResponseList'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: messageList\n  /v4/message/blast:\n    post:\n      tags:\n        - Messages\n      summary: Post a message to multiple existing streams.\n      description: |\n        Post a new message to the given list of streams. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        You may include an attachment on the message.\n\n        The message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\n        The optional parameter \"data\" can be used to provide a JSON payload containing entity data.\n        If the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\n        this parameter is required.\n\n        If the message is in MessageML and fails schema validation a client error results\n\n        This endpoint is idempotent, it means that a 200 response will be returned even if the message has not been\n        delivered to some streams. Check the `errors` map from the response in order to see on which stream(s) the\n        message has not been delivered.\n\n        The maximum number of streams where the message can be sent is limitted to 100.\n\n        Regarding authentication, you must either use the sessionToken which was created for delegated app access\n        or both the sessionToken and keyManagerToken together.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Authorization token used to make delegated calls.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - sids\n              properties:\n                sids:\n                  type: array\n                  description: A comma-separated list of Stream IDs\n                  items:\n                    type: string\n                message:\n                  type: string\n                  description: The message payload in MessageML.\n                data:\n                  type: string\n                  description: Optional message data in EntityJSON.\n                version:\n                  type: string\n                  description: |\n                    Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.\n                attachment:\n                  type: string\n                  description: Optional file attachment.\n                  format: binary\n                preview:\n                  type: string\n                  description: Optional attachment preview.\n                  format: binary\n      responses:\n        200:\n          description: Blast message sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4MessageBlastResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        451:\n          description: Compliance Issues found in message or file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/message/{id}:\n    get:\n      tags:\n        - Messages\n      summary: Get a message by ID\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Message ID as a URL-safe string\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4Message'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/message/search:\n    get:\n      tags:\n        - Messages\n      summary: Search messages\n      description: |\n        Search messages according to the specified criteria. The \"query\" parameter takes a search query defined as\n        \"field:value\" pairs combined by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields are\n         (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\", \"mention\", \"signal\", \"fromDate\", \"toDate\",\n         \"streamId\", \"streamType\".\n         \"text\" search requires a \"streamId\" to be specified.\n         \"streamType\" accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"mim\", \"chatroom\", \"post\".\n         \"signal\" queries can only be combined with \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n      parameters:\n        - name: query\n          in: query\n          description: The search query. See above for the query syntax.\n          required: true\n          schema:\n            type: string\n        - name: skip\n          in: query\n          description: No. of results to skip.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Max no. of results to return. If no value is provided, 50 is the default.\n          schema:\n            type: integer\n        - name: scope\n          in: query\n          description: |\n            Describes where content should be searched for that query.\n            It can exclusively apply to Symphony content or to one Connector.\n          schema:\n            type: string\n        - name: sortDir\n          in: query\n          description: |\n            Messages sort direction : ASC or DESC (default to DESC)\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n    post:\n      tags:\n        - Messages\n      summary: Search messages\n      description: Search messages according to the specified criteria.\n      parameters:\n        - name: skip\n          in: query\n          description: No. of results to skip.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Max no. of results to return. If no value is provided, 50 is the default.\n          schema:\n            type: integer\n        - name: scope\n          in: query\n          description: |\n            Describes where content should be searched for that query.\n            It can exclusively apply to Symphony content or to one Connector.\n          schema:\n            type: string\n        - name: sortDir\n          in: query\n          description: |\n            Messages sort direction : ASC or DESC (default to DESC)\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The search query. See above for the query syntax.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MessageSearchQuery'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: query\n  /v1/stream/{sid}/attachment:\n    get:\n      tags:\n        - Attachments\n      summary: Download an attachment.\n      description: Downloads the attachment body by the attachment ID, stream ID, and message ID.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: fileId\n          in: query\n          description: The attachment ID (Base64-encoded)\n          required: true\n          schema:\n            type: string\n        - name: messageId\n          in: query\n          description: The ID of the message containing the attachment\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Attachment body as Base64 encoded string.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: byte\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v4/stream/{sid}/message:\n    get:\n      tags:\n        - Messages\n      summary: Get messages from an existing stream.\n      description: |\n        A caller can fetch all unseen messages by passing the timestamp of\n        the last message seen as the since parameter and the number of messages\n        with the same timestamp value already seen as the skip parameter. This\n        means that every message will be seen exactly once even in the case that\n        an additional message is processed with the same timestamp as the last\n        message returned by the previous call, and the case where there are\n        more than maxMessages with the same timestamp value.\n\n        This method is intended for historic queries and is generally reliable\n        but if guaranteed delivery of every message in real time is required\n        then the equivilent firehose method should be called.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: since\n          in: query\n          description: |\n            Timestamp of first required message.\n            \n            This is a long integer value representing milliseconds since\n            Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: skip\n          in: query\n          description: No. of messages to skip.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: |\n            Max No. of messages to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v4/stream/{sid}/message/create:\n    post:\n      tags:\n        - Messages\n      summary: Post a message to one existing stream.\n      description: |\n        Post a new message to the given stream. The stream can be a chatroom,,an IM or a multiparty IM.\n\n        You may include an attachment on the message.\n\n        The message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\n        The optional parameter \"data\" can be used to provide a JSON payload containing entity data.\n        If the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\n        this parameter is required.\n\n        If the message is in MessageML and fails schema validation a client error will be returned.\n\n        If the message is sent then 200 is returned.\n\n        Regarding authentication, you must either use the sessionToken which was created for delegated app access\n        or both the sessionToken and keyManagerToken together.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Authorization token used to make delegated calls.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                message:\n                  type: string\n                  description: The message payload in MessageML.\n                data:\n                  type: string\n                  description: Optional message data in EntityJSON.\n                version:\n                  type: string\n                  description: |\n                    Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.\n                attachment:\n                  type: string\n                  description: Optional file attachment.\n                  format: binary\n                preview:\n                  type: string\n                  description: Optional attachment preview.\n                  format: binary\n      responses:\n        200:\n          description: Message sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        451:\n          description: Compliance Issues found in message or file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v4/stream/{sid}/message/{mid}/update:\n    post:\n      tags:\n        - Messages\n      summary: Update an existing message.\n      description: |\n        Update an existing message. The existing message must be a valid social message, that has not been deleted.\n\n        The message can be provided as MessageMLV2 or PresentationML. Both formats support Freemarker templates.\n\n        The optional parameter \"data\" can be used to provide a JSON payload containing entity data.\n        If the message contains explicit references to entity data (in \"data-entity-id\" element attributes),\n        this parameter is required.\n\n        If the message is in MessageML and fails schema validation\n        a client error results\n\n        If the message is updated then 200 is returned.\n\n        Regarding authentication, you must either use the sessionToken which was created for delegated app access\n        or both the sessionToken and keyManagerToken together.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: mid\n          in: path\n          description: Parent message ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Authorization token used to make delegated calls.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                message:\n                  type: string\n                  description: The message payload in MessageML.\n                data:\n                  type: string\n                  description: Optional message data in EntityJSON.\n                version:\n                  type: string\n                  description: |\n                    Optional message version in the format \"major.minor\". If empty, defaults to the latest supported version.\n                silent:\n                  type: string\n                  description: |\n                    Optional boolean field that will determine if the user/s should receive the message as read or not (true by default)\n      responses:\n        200:\n          description: Message sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        451:\n          description: Compliance Issues found in message or file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v3/stream/{sid}/share:\n    post:\n      tags:\n        - Share\n      summary: PROVISIONAL -  Share a piece of content into Symphony\n      description: |\n        Given a 3rd party content (eg. news article), it can share to the given stream.\n        The stream can be a chatroom, an IM or a multiparty IM.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShareContent'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: shareContent\n  /v1/util/echo:\n    post:\n      tags:\n        - Util\n      summary: Test endpoint, returns input.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Message in plain text\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SimpleMessage'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMessage'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: echoInput\n  /v1/signals/list:\n    get:\n      tags:\n        - Signals\n      summary: |\n        List signals for the requesting user. This includes signals that the user has created and public signals\n        to which they subscribed.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: skip\n          in: query\n          description: No. of signals to skip.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: |\n            Max no. of signals to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n      responses:\n        200:\n          description: List of signals for the requesting user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignalList'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/signals/{id}/get:\n    get:\n      tags:\n        - Signals\n      summary: Get details of the requested signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The ID of the signal to display.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of signals for the requesting user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Signal'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/signals/create:\n    post:\n      tags:\n        - Signals\n      summary: Create a signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        description: Signal definition.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseSignal'\n        required: true\n      responses:\n        200:\n          description: Signal created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Signal'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        451:\n          description: Compliance Issues found in signal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: signal\n  /v1/signals/{id}/update:\n    post:\n      tags:\n        - Signals\n      summary: Update a signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the signal.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Signal definition.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseSignal'\n        required: true\n      responses:\n        200:\n          description: Signal updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Signal'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        451:\n          description: Compliance Issues found in signal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: signal\n  /v1/signals/{id}/delete:\n    post:\n      tags:\n        - Signals\n      summary: Delete a signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the signal.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Signal deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/signals/{id}/subscribe:\n    post:\n      tags:\n        - Signals\n      summary: Subscribe to a Signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the signal.\n          required: true\n          schema:\n            type: string\n        - name: pushed\n          in: query\n          description: Prevent the user to unsubscribe (only for bulk subscription)\n          schema:\n            type: boolean\n      requestBody:\n        description: UserIds to subscribe (only for bulk subscription)\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n                format: int64\n        required: false\n      responses:\n        200:\n          description: Signal subscribed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelSubscriptionResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: users\n  /v1/signals/{id}/unsubscribe:\n    post:\n      tags:\n        - Signals\n      summary: Unsubscribe to a Signal.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the signal.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UserIds to unsubscribe (only for bulk unsubscription)\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n                format: int64\n        required: false\n      responses:\n        200:\n          description: Signal unsubscribed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelSubscriptionResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: users\n  /v1/signals/{id}/subscribers:\n    get:\n      tags:\n        - Signals\n      summary: Get the subscribers of a signal\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the signal.\n          required: true\n          schema:\n            type: string\n        - name: skip\n          in: query\n          description: No. of results to skip.\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: Max No. of subscribers to return. If no value is provided, 100\n            is the default.\n          schema:\n            type: integer\n            default: 100\n      responses:\n        200:\n          description: Signal Subscribers.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelSubscriberResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/info:\n    get:\n      tags:\n        - Signals\n      summary: Get information about the Agent\n      responses:\n        200:\n          description: Agent info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AgentInfo'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v1/dlp/policies:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get all policies\n      description: Get all policies\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Optional parameter to specify which page to return (default is 0)\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: |\n            Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50.\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPoliciesCollectionResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Creates a policy\n      description: |\n        Creates a new policy with dictionary references.\n\n        At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.\n\n        Note - You need to enable the policy after creation to start enforcing the policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Details about the policy that should be created.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1DLPPolicyRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /v1/dlp/policies/{policyId}:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get a policy\n      description: Get a policy\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n        - name: policyVersion\n          in: query\n          description: |\n            Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. \n            Otherwise, return the latest policy.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Updates a policy. Cannot be used for creation.\n      description: |\n        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\n        Warning: If you send empty list of dictionaries during the update operation, then all the\n        dictionaries for this policy are deleted and policy is automatically disabled.\n        Note: The policy should already exist.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1DLPPolicyRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Delete a policy\n      description: |\n        Delete a policy.\n        Note: Only disabled policy can be deleted\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/policies/{policyId}/enable:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Enables a policy.\n      description: Enables a policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/policies/{policyId}/disable:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Disables a policy.\n      description: Disables a policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/dictionaries:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get all dictionary metadatas\n      description: |\n        Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Optional parameter to specify which page to return (default is 0)\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: |\n            Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50.\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataCollectionResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Create a dictionary\n      description: |\n        Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1DLPDictionaryMetadataCreateRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /v1/dlp/dictionaries/{dictId}:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get dictionary metadata\n      description: Get basic information for a dictionary.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: dictId\n          in: path\n          description: Unique dictionary identifier\n          required: true\n          schema:\n            type: string\n        - name: dictVersion\n          in: query\n          description: |\n            If set to be valid dictionary version number, will return dictionary metadata with specified version. \n            Otherwise, return the latest dictionary metadata.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Updates a dictionary\n      description: |\n        Updates the dictionary's basic metadata without content.\n        This API cannot be used for creating a new dictionary.\n        In case of update only \"name\" can be changed.\n        Note: All related policies will also have versions updated.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: dictId\n          in: path\n          description: Unique dictionary identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1DLPDictionaryMetadataUpdateRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Delete a dictionary\n      description: |\n        Deletes a dictionary.\n        Note: All related policies will be affected.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: dictId\n          in: path\n          description: Unique dictionary identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/dictionaries/{dictId}/data/download:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Downloads Base 64 encoded dictionary content.\n      description: Downloads Base 64 encoded dictionary content.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: dictId\n          in: path\n          description: Unique dictionary identifier\n          required: true\n          schema:\n            type: string\n        - name: dictVersion\n          in: query\n          description: |\n            If set to be valid dictionary version number, will return dictionary with specified version. \n            Otherwise, return the latest dictionary.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Attachment body as Base64 encoded string.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: byte\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/dictionaries/{dictId}/data/upload:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Override dictionary content with provided content.\n      description: Override dictionary content with provided content.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: dictId\n          in: path\n          description: Unique dictionary identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - data\n              properties:\n                data:\n                  type: string\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPDictionaryMetadataResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/violations/message:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on messages.\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPViolationMessageResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/violations/stream:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on streams.\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPViolationStreamResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/dlp/violations/signal:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on signals.\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1DLPViolationSignalResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/policies:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get all policies\n      description: Get all policies\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Optional parameter to specify which page to return (default is 0)\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: |\n            Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50.\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPoliciesCollectionResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Creates a policy\n      description: |\n        Creates a new policy with dictionary references.\n        At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type.\n        The rest of the information is populated automatically.\n        Note - You need to enable the policy after creation to start enforcing the policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Details about the policy that should be created.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V3DLPPolicyRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /v3/dlp/policies/{policyId}:\n    get:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Get a policy\n      description: Get a policy\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n        - name: policyVersion\n          in: query\n          description: |\n            Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. \n            Otherwise, return the latest policy.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/policies/{policyId}/update:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Updates a policy. Cannot be used for creation.\n      description: |\n        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy.\n        Warning: If you send empty list of dictionaries during the update operation, then all the\n        dictionaries for this policy are deleted and policy is automatically disabled.\n        Note: The policy should already exist.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V3DLPPolicyRequest'\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /v3/dlp/policies/{policyId}/delete:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Delete a policy\n      description: |\n        Delete a policy.\n        Note: Only disabled policy can be deleted\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          description: Unique dictionary identifier.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/policies/{policyId}/enable:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Enables a policy.\n      description: Enables a policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/policies/{policyId}/disable:\n    post:\n      tags:\n        - DLP Policies and Dictionary Management\n      summary: Disables a policy.\n      description: Disables a policy.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: policyId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPPolicyResponse'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/violations/message:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on messages.\n      description: Retrieves DLP v3 message related violations for a given time range\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPViolationMessageResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/violations/stream:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on streams.\n      description: Retrieves DLP v3 signal related violations for a given time range\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPViolationStreamResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/violations/signal:\n    get:\n      tags:\n        - Violations\n      summary: Get violations as a result of policy enforcement on signals.\n      description: Retrieves DLP v3 signal related violations for a given time range\n      parameters:\n        - name: startTime\n          in: query\n          description: |\n            Timestamp of the first required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTime\n          in: query\n          description: |\n            Timestamp of the last required violation.\n            This is a long integer value representing milliseconds since Jan 1 1970\n            If unspecified, it will default to current time of the request.\n          schema:\n            type: integer\n            format: int64\n        - name: next\n          in: query\n          description: Offset of the next chunk of violations. Value is null for the first request.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default. The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V3DLPViolationSignalResponse'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v3/dlp/violation/attachment:\n    get:\n      tags:\n        - Violations\n      summary: Get attachments that were sent as part of messages that were flagged by the DLP System.\n      description: Retrieves attachments from related message violations as a base64 encoded String.\n      parameters:\n        - name: fileId\n          in: query\n          description: ID of attachment that will be downloaded.\n          required: true\n          schema:\n            type: string\n        - name: violationId\n          in: query\n          description: ID of violation that corresponds to the flagged message that contains the attachment\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Attachment body as Base64 encoded string.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: byte\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Resource not found.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/audittrail/privilegeduser:\n    get:\n      tags:\n        - AuditTrail\n      summary: Get a list of  actions performed by a privileged account acting as\n        privileged user given a period of time.\n      description: Get a list of actions performed by a privileged account acting\n        as privileged user given a period of time.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: startTimestamp\n          in: query\n          description: Start timestamp in unix timestamp in millseconds.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: endTimestamp\n          in: query\n          description: End timestamp in unix timestamp in millseconds. If not specified, it assumes to be current time.\n          schema:\n            type: integer\n            format: int64\n        - name: before\n          in: query\n          description: Return results from an opaque “before” cursor value as presented via a response cursor.\n          schema:\n            type: string\n        - name: after\n          in: query\n          description: Return results from an opaque “after” cursor value as presented via a response cursor.\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: |\n            Max No. of violations to return. If no value is provided, 50 is the default.\n            Some maximums for limit may be enforced for performance reasons.\n            The maximum supported value is 500.\n          schema:\n            type: integer\n        - name: initiatorId\n          in: query\n          description: If present, only the initiator with this initiator \u003cuser id\u003e will be returned.\n          schema:\n            type: integer\n            format: int64\n        - name: role\n          in: query\n          description: |\n            If present, only the audit trail initiated by s user with privileged role acting as\n            privileged user will be returned.\n            Privileged eliglible roles:\n            User Provisioning (USER_PROVISIONING),\n            Content Management (CONTENT_MANAGEMENT),\n            Expression Filter Policy Management (EF_POLICY_MANAGEMENT),\n            SCO (SUPER_COMPLIANCE_OFFICER),\n            CO (COMPLIANCE_OFFICER),\n            Super admin (SUPER_ADMINISTRATOR),\n            Admin (ADMINISTRATOR),\n            L1 (L1_SUPPORT),\n            L2 (L2_SUPPORT),\n            Scope Manager (SCOPE_MANAGEMENT)\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1AuditTrailInitiatorList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v5/datafeeds:\n    get:\n      tags:\n        - Datafeed\n      summary: Read list of real time messages / events stream (\"datafeed\").\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        The datafeed provides messages and events from all conversations that the user\n        is in. The types of events surfaced in the datafeed can be found in the [Real Time Events](./docs/real-time-events.md) list.\n\n        Returns the list of the datafeeds for the user.\n        Any datafeed ID of the list can then be used as input to the Read Messages/Events Stream v4 endpoint.\n      operationId: listDatafeed\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: A unique identifier to ensure uniqueness of the datafeed. Used\n            to restrict search.\n          schema:\n            maxLength: 100\n            type: string\n      responses:\n        200:\n          description: Datafeed sucessfully created.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/V5Datafeed'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n    post:\n      tags:\n        - Datafeed\n      summary: Create a new real time messages / events stream (\"datafeed\").\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        The datafeed provides messages and events from all conversations that the user\n        is in. The types of events surfaced in the datafeed can be found in the Real Time Events list.\n        (see definition on top of the file)\n\n        Returns the ID of the datafeed that has just been created.\n        This ID should then be used as input to the Read Messages/Events Stream v4 endpoint.\n      operationId: createDatafeed\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V5DatafeedCreateBody'\n        required: false\n      responses:\n        201:\n          description: Datafeed sucessfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V5Datafeed'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: body\n  /v5/datafeeds/{datafeedId}:\n    delete:\n      tags:\n        - Datafeed\n      summary: Delete the specified real time message / event stream (\"datafeed\").\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        The datafeed provides messages and events from all conversations that the user\n        is in. The types of events surfaced in the datafeed can be found in the Real Time Events list.\n        (see definition on top of the file)\n\n        Delete the specified datafeed.\n      operationId: deleteDatafeed\n      parameters:\n        - name: datafeedId\n          in: path\n          description: ID of the datafeed\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Datafeed successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n  /v5/datafeeds/{datafeedId}/read:\n    post:\n      tags:\n        - Datafeed\n      summary: Read the specified real time message / event stream (\"datafeed\").\n      description: |\n        _Available on Agent 2.57.0 and above._\n\n        The datafeed provides messages and events from all conversations that the user\n        is in. The types of events surfaced in the datafeed can be found in the Real Time Events list.\n        (see definition on top of the file)\n\n        Read the specified datafeed.\n\n        The ackId sent as parameter can be empty for the first call. In the response an ackId will be sent back and it can be used for\n        the next call: in this way you acknowledge that you have received the events that came with that ackId; datafeed will remove the events\n        associated with that ackId from your queue\n      operationId: readDatafeed\n      parameters:\n        - name: datafeedId\n          in: path\n          description: ID of the datafeed\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: ackId received from last POST Base64 encoded.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AckId'\n        required: false\n      responses:\n        200:\n          description: Datafeed successfully read.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V5EventList'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: ackId\n  /v5/events/read:\n    post:\n      tags:\n        - Datafeed\n      summary: Read Real Time Events from an event stream (aka datafeed)\n      description: |\n        _Available on Agent 22.5.1 and above.This endpoint provides\n        messages and events from all conversations that the user is in or events\n        from the whole pod depending on the \"type\" field value.\n        When \"type\":\"fanout\" is provided in the body, then only events from streams \n        the accountbelongs to are returned. Otherwise, if \"type\": \"datahose\" is provided\n        in the body, then events returned are not limited to the streams user\n        belongs to. In this case, at least one event type must be provided in the\n        \"filters\" field. In case you are using a datahose feed and retrieving\n        SOCIALMESSAGE events, ceservice account must be properly configured in\n        the Agent.The types of events returned can be found in the Real Time\n        Events list (see definition on top of the file). The ackId sent as parameter\n        can be empty for the first call. In the response an ackId will be sent back\n        and it can be used for the next call: in this way you acknowledge that\n        you have received the events that came with that ackId.\n        If you have several instances of the same bot, they must share the same feed so \n        that events are spread across all bot instances. To do so, you must: share the same \n        service account provide the same \"tag\" and same \"filters\" values\n      operationId: readEvents\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: body containing all information of events to be fetched\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V5EventsReadBody'\n        required: true\n      responses:\n        200:\n          description: Datafeed successfully read.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V5EventList'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: Unauthorized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: Forbidden.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      x-codegen-request-body-name: body\n  #\n  # Deprecated paths\n  #\n  /v1/datafeed/create:\n    post:\n      tags:\n        - Datafeed\n      summary: Create a new real time message event stream.\n      description: |\n        A datafeed provides the messages in all conversations that a user is in.\n        System messages like new users joining a chatroom are not part of the datafeed.\n        \n        A datafeed will expire after if it isn't read before its capacity is reached.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Datafeed'\n        400:\n          description: Client error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        503:\n          description: Max number of data feeds reached.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v1/datafeed/{id}/read:\n    get:\n      tags:\n        - Datafeed\n      summary: Read a given datafeed.\n      description: |\n        Read messages from the given datafeed. If no more messages are available then this method will block.\n        It is intended that the client should re-call this method as soon as it has processed the messages\n        received in the previous call. If the client is able to consume messages more quickly than they become\n        available then each call will initially block, there is no need to delay before re-calling this method.\n\n        A datafeed will expire if its unread capacity is reached.\n        A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n      parameters:\n        - name: id\n          in: path\n          description: Datafeed ID\n          required: true\n          schema:\n            type: string\n        - name: maxMessages\n          in: query\n          description: Max No. of messages to return.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of messages that have occurred since last time this URL\n            was polled. If the list is empty, it means the request has reached its\n            timeout, and the client should poll again.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v1/HealthCheck:\n    get:\n      tags:\n        - System\n      summary: Checks the health of the Agent.\n      description: |\n        Used to validate the configuration of the agent.\n        Makes a request to the HealthCheck on the Symphony cloud.\n        Makes a request to the HealthCheck on the Key Manager service.\n      responses:\n        200:\n          description: The Agent is functioning properly.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1HealthCheckResponse'\n      deprecated: true\n  /v2/HealthCheck:\n    get:\n      tags:\n        - System\n      summary: Checks the health of the Agent.\n      description: |\n        [deprecated] : This endpoint is deprecated.\n        The health check endpoint to be used instead is '/v3/health/extended'.\n        Unlike this deprecated endpoint, the extended health check endpoint provides status on external component such as pod, key manager, ceservice, agentservice...\n      parameters:\n        - name: showFirehoseErrors\n          in: query\n          description: |\n            [deprecated] Firehose Service has never been deployed. However, this request parameter has been kept here\n            for specs backward compatibility.\n          schema:\n            type: boolean\n        - name: failOnPodConnectivity\n          in: query\n          description: |\n            Defines the HealthCheck status code response whenever the Pod connectivity fails. When set to \"true\",\n            in case of Pod connectivity failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: failOnKeyManagerConnectivity\n          in: query\n          description: |\n            Defines the HealthCheck status code response whenever the Key Manager connectivity fails. When set to \"true\",\n            in case of Key Manager connectivity failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: failOnAgentServiceUser\n          in: query\n          description: |\n            Defines the HealthCheck status code response whenever the Agent Service User connectivity fails. When set to \"true\",\n            in case of Agent Service connectivity failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: failOnCeServiceUser\n          in: query\n          description: |\n            This query parameter is not used as the ceservice is deprecated and it is kept for backward compatibility.\n            Default value is \"false\" but it will not change the response status code if set to true.\n          schema:\n            type: boolean\n        - name: failOnEncryptDecryptSuccess\n          in: query\n          description: |\n            Defines the status code response whenever the Encrypt/Decrypt message check fails. When set to \"true\",\n            in case of Encrypt or Decrypt failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: failOnAny\n          in: query\n          description: |\n            Defines the status code response whenever at least one of the checks fails. When set to \"true\",\n            in case of any failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: failOnDatafeedConnectivity\n          in: query\n          description: |\n            Defines the HealthCheck status code response whenever the Datafeed2 connectivity fails. When set to \"true\",\n            in case of Datafeed connectivity failure, the response status code will be 503; otherwise, it will be 200.\n            Default value is \"false\".\n          schema:\n            type: boolean\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      responses:\n        200:\n          description: The Agent is functioning properly.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2HealthCheckResponse'\n      deprecated: true\n  /v2/datafeed/{id}/read:\n    get:\n      tags:\n        - Datafeed\n      summary: Read a given datafeed.\n      description: |\n        Read messages from the given datafeed. If no more messages are available then this method will block.\n        It is intended that the client should re-call this method as soon as it has processed the messages\n        received in the previous call. If the client is able to consume messages more quickly than they become\n        available then each call will initially block, there is no need to delay before re-calling this method.\n\n        A datafeed will expire if its unread capacity is reached.\n        A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n      parameters:\n        - name: id\n          in: path\n          description: Datafeed ID\n          required: true\n          schema:\n            type: string\n        - name: maxMessages\n          in: query\n          description: Max No. of messages to return.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of messages that have occurred since last time this URL\n            was polled. If the list is empty, it means the request has reached its\n            timeout, and the client should poll again.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v4/datafeed/create:\n    post:\n      tags:\n        - Datafeed\n      summary: |\n        (Deprecated - Datafeed v1 will be fully replaced by the datafeed 2\n        service in the future. Please consider migrating over to datafeed 2 APIs\n        /agent/v5/datafeeds. For more information on the timeline as well as on\n        the benefits of datafeed 2, please reach out to your Technical Account Manager\n        or to our developer documentation https://docs.developers.symphony.com/building-bots-on-symphony/datafeed)\n        Create a new real time message event stream.\n      description: |\n        A datafeed provides the messages in all conversations that a user is in.\n        This also includes system messages like new users joining a chatroom.\n\n        A datafeed will expire if it isn't read before its capacity is reached.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Datafeed'\n        400:\n          description: Client error.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        503:\n          description: Max number of data feeds reached.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      deprecated: true\n  /v4/datafeed/{id}/read:\n    get:\n      tags:\n        - Datafeed\n      summary: |\n        (Deprecated - Datafeed v1 will be fully replaced by the datafeed 2\n        service in the future.  Please consider migrating over to datafeed 2 APIs\n        /agent/v5/datafeeds/{id}/read. For more information on the timeline as\n        well as on the benefits of datafeed 2, please reach out to your Technical\n        Account Manager or to our developer documentation https://docs.developers.symphony.com/building-bots-on-symphony/datafeed)\n        Read a given datafeed.\n      description: |\n        Read messages from the given datafeed. If no more messages are available then this method will block.\n        It is intended that the client should re-call this method as soon as it has processed the messages\n        received in the previous call. If the client is able to consume messages more quickly than they become\n        available then each call will initially block, there is no need to delay before re-calling this method.\n\n        A datafeed will expire if its unread capacity is reached.\n        A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.\n      parameters:\n        - name: id\n          in: path\n          description: Datafeed ID\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Max No. of messages to return.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of messages that have occurred since last time this URL\n            was polled. If the list is empty, it means the request has reached its\n            timeout, and the client should poll again.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V4EventList'\n        204:\n          description: No Messages.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n        500:\n          description: Server error, see response body for further details.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Error'\n      deprecated: true\n  /v1/message/import:\n    post:\n      tags:\n        - Messages\n      summary: Import messages from other systems into Symphony.\n      description: |\n        Sends a message to be imported into the system.\n        Allows you to override the timestamp and author of the message with your desired values.\n        The requesting user must have the Content Management role.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MessageImportList'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportResponseList'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: messageList\n  /v2/message/import:\n    post:\n      tags:\n        - Messages\n      summary: Import messages from other systems into Symphony.\n      description: |\n        Sends a message to be imported into the system.\n        Allows you to override the timestamp and author of the message with your desired values.\n        The requesting user must have the Content Management role.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n        Optionally the original message ID can be specified to identify the imported message for the purpose of repeat imports.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V2MessageImportList'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2ImportResponseList'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: messageList\n  /v1/stream/{sid}/attachment/create:\n    post:\n      tags:\n        - Attachments\n      summary: Upload an attachment.\n      description: |\n        Upload an attachment to the given stream. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        Once uploaded, you can use this attachment on a message you send in that stream.\n\n        If the attachment is uploaded then 200 is returned.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - file\n              properties:\n                file:\n                  type: string\n                  description: The attachment body.\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: Upload successful, return the attachment ID.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentInfo'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: 'Unprocessable entity: The submitted data could not be processed.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v3/stream/{sid}/attachment/create:\n    post:\n      tags:\n        - Attachments\n      summary: PROVISIONAL - Upload an attachment.\n      description: |\n        Upload an attachment to the given stream. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        Once uploaded, you can use this attachment on a message you send in that stream.\n\n        If the attachment is uploaded then 200 is returned.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - file\n              properties:\n                file:\n                  type: string\n                  description: The attachment body.\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: Upload successful, return the attachment ID.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AttachmentInfo'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        422:\n          description: 'Unprocessable entity: The submitted data could not be processed.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v1/stream/{sid}/message:\n    get:\n      tags:\n        - Messages\n      summary: Get messages from an existing stream.\n      description: |\n        A caller can fetch all unseen messages by passing the timestamp of\n        the last message seen as the since parameter and the number of messages\n        with the same timestamp value already seen as the skip parameter. This\n        means that every message will be seen exactly once even in the case that\n        an additional message is processed with the same timestamp as the last\n        message returned by the previous call, and the case where there are\n        more than maxMessages with the same timestamp value.\n\n        This method is intended for historic queries and is generally reliable\n        but if guaranteed delivery of every message in real time is required\n        then the equivilent firehose method should be called.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: since\n          in: query\n          description: |\n            Timestamp of first required message.\n            \n            This is a long integer value representing milliseconds since\n            Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: offset\n          in: query\n          description: No. of messages to skip.\n          schema:\n            type: integer\n        - name: maxMessages\n          in: query\n          description: Max No. of messages to return. If no value is provided, 50 is the default.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v2/stream/{sid}/message:\n    get:\n      tags:\n        - Messages\n      summary: Get messages from an existing stream.\n      description: |\n        A caller can fetch all unseen messages by passing the timestamp of\n        the last message seen as the since parameter and the number of messages\n        with the same timestamp value already seen as the skip parameter. This\n        means that every message will be seen exactly once even in the case that\n        an additional message is processed with the same timestamp as the last\n        message returned by the previous call, and the case where there are\n        more than maxMessages with the same timestamp value.\n\n        This method is intended for historic queries and is generally reliable\n        but if guaranteed delivery of every message in real time is required\n        then the equivilent firehose method should be called.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: since\n          in: query\n          description: |\n            Timestamp of first required message.\n            \n            This is a long integer value representing milliseconds since\n            Jan 1 1970\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: offset\n          in: query\n          description: No. of messages to skip.\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Max No. of messages to return. If no value is provided, 50 is the default.\n          schema:\n            type: integer\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2MessageList'\n        204:\n          description: No Messages.\n          content: {}\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n  /v1/stream/{sid}/message/create:\n    post:\n      tags:\n        - Messages\n      summary: Post a message to one existing stream.\n      description: |\n        Post a new message to the given stream. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        If the message parameter type is TEXT then the message contains plain\n        text and cannot include formating, hash tags, mentions etc.\n\n        If the message parameter type is MessageML then the message contains\n        MessageML which allows for these entities.\n\n        If the message is in MessageML and fails schema validation\n        a client error results\n\n        If the message is sent then 200 is returned.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MessageSubmission'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: message\n  /v2/stream/{sid}/message/create:\n    post:\n      tags:\n        - Messages\n      summary: Post a message to one existing stream.\n      description: |\n        Post a new message to the given stream. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        You may include an attachment on the message (see the V2MessageSubmission parameter).\n\n        If the message parameter type is TEXT then the message contains plain\n        text and cannot include formating, hash tags, mentions etc.\n\n        If the message parameter type is MessageML then the message contains\n        MessageML which allows for these entities.\n\n        If the message is in MessageML and fails schema validation\n        a client error results\n\n        If the message is sent then 200 is returned.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V2MessageSubmission'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: message\n  /v3/stream/{sid}/message/create:\n    post:\n      tags:\n        - Messages\n      summary: PROVISIONAL - Post a message to one existing stream.\n      description: |\n        Post a new message to the given stream. The stream can be a chatroom,\n        an IM or a multiparty IM.\n\n        You may include an attachment on the message (see the V2MessageSubmission parameter).\n\n        If the message parameter type is TEXT then the message contains plain\n        text and cannot include formating, hash tags, mentions etc.\n\n        If the message parameter type is MessageML then the message contains\n        MessageML which allows for these entities.\n\n        If the message is in MessageML and fails schema validation\n        a client error results\n\n        If the message is sent then 200 is returned.\n\n        Regarding authentication, you must either use the sessionToken which was created for delegated app access\n        or both the sessionToken and keyManagerToken together.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Authorization token used to make delegated calls.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V2MessageSubmission'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: message\n  /v1/stream/{sid}/share:\n    post:\n      tags:\n        - Share\n      summary: Share a piece of content into Symphony\n      description: |\n        Given a 3rd party content (eg. news article), it can share to the given stream.\n        The stream can be a chatroom, an IM or a multiparty IM.\n      parameters:\n        - name: sid\n          in: path\n          description: Stream ID\n          required: true\n          schema:\n            type: string\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShareContent'\n        required: true\n      responses:\n        200:\n          description: Success\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V2Message'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: shareContent\n  /v1/util/obsolete:\n    post:\n      tags:\n        - Util\n      summary: Example of a deprecated endpoint, returns input.\n      parameters:\n        - name: sessionToken\n          in: header\n          description: Session authentication token.\n          required: true\n          schema:\n            type: string\n        - name: keyManagerToken\n          in: header\n          description: Key Manager authentication token.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Message in plain text\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SimpleMessage'\n        required: true\n      responses:\n        200:\n          description: Message sent.\n          headers:\n            X-Warning:\n              description: This method is deprecated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMessage'\n        400:\n          description: Client error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: 'Unauthorized: Session tokens invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        403:\n          description: 'Forbidden: Caller lacks necessary entitlement.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        420:\n          description: Gone. Returned when the option to hard fail deprecated methods\n            is enabled\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Server error, see response body for further details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      deprecated: true\n      x-codegen-request-body-name: echoInput\ncomponents:\n  schemas:\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    V2Error:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        details:\n          type: object\n    SuccessResponse:\n      type: object\n      properties:\n        format:\n          type: string\n          enum:\n            - TEXT\n            - XML\n        message:\n          type: string\n    V2BaseMessage:\n      required:\n        - streamId\n        - timestamp\n        - v2messageType\n      type: object\n      properties:\n        id:\n          type: string\n          description: The messageId is assigned by the ingestor service when a message is sent.\n        timestamp:\n          type: string\n        v2messageType:\n          type: string\n        streamId:\n          type: string\n      discriminator:\n        propertyName: v2messageType\n    V2Message:\n      description: A representation of a message sent by a user of Symphony.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - required:\n            - fromUserId\n            - message\n            - attachments\n          type: object\n          properties:\n            message:\n              type: string\n              description: Message text in MessageML\n              format: MessageML\n            fromUserId:\n              type: integer\n              description: the Symphony userId of the user who sent the message. This\n                will be populated by the server (and actually ignored if included when\n                sending a message).\n              format: int64\n            attachments:\n              type: array\n              items:\n                $ref: '#/components/schemas/AttachmentInfo'\n    RoomCreatedMessage:\n      description: Generated when a room is created.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          required:\n            - keywords\n          properties:\n            creationDate:\n              type: integer\n              format: int64\n            name:\n              type: string\n            keywords:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoomTag'\n            description:\n              type: string\n            createdByUserId:\n              type: integer\n              description: The Symphony userId of the user who created the room.\n              format: int64\n            readOnly:\n              type: boolean\n            discoverable:\n              type: boolean\n            public:\n              type: boolean\n            membersCanInvite:\n              type: boolean\n            copyProtected:\n              type: boolean\n    RoomDeactivatedMessage:\n      description: Generated when a room is deactivated.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            deactivatedByUserId:\n              type: integer\n              format: int64\n    RoomReactivatedMessage:\n      description: Generated when a room is reactivated.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            reactivatedByUserId:\n              type: integer\n              format: int64\n    RoomUpdatedMessage:\n      description: Generated when a room is updated.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          required:\n            - keywords\n          properties:\n            oldName:\n              type: string\n            newName:\n              type: string\n            keywords:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoomTag'\n            oldDescription:\n              type: string\n            newDescription:\n              type: string\n            membersCanInvite:\n              type: boolean\n            discoverable:\n              type: boolean\n            readOnly:\n              type: boolean\n            copyProtected:\n              type: boolean\n    UserJoinedRoomMessage:\n      description: Generated when a user joins a room.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            addedByUserId:\n              type: integer\n              format: int64\n            memberAddedUserId:\n              type: integer\n              format: int64\n    UserLeftRoomMessage:\n      description: Generated when a user leaves a room.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            removedByUserId:\n              type: integer\n              format: int64\n            memberLeftUserId:\n              type: integer\n              format: int64\n            informationBarrierRemediation:\n              type: boolean\n    RoomMemberPromotedToOwnerMessage:\n      description: Generated when a room member is promoted to owner.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            promotedByUserId:\n              type: integer\n              format: int64\n            promotedUserId:\n              type: integer\n              format: int64\n    RoomMemberDemotedFromOwnerMessage:\n      description: Generated when a room member is promoted to owner.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            demotedByUserId:\n              type: integer\n              format: int64\n            demotedUserId:\n              type: integer\n              format: int64\n    ConnectionRequestMessage:\n      description: Generated when a connection request is sent.\n      allOf:\n        - $ref: '#/components/schemas/V2BaseMessage'\n        - type: object\n          properties:\n            requestingUserId:\n              type: integer\n              format: int64\n            targetUserId:\n              type: integer\n              format: int64\n            firstRequestedAt:\n              type: integer\n              format: int64\n            updatedAt:\n              type: integer\n              format: int64\n            requestCounter:\n              type: integer\n            status:\n              type: string\n    AttachmentInfo:\n      required:\n        - id\n        - name\n        - size\n      type: object\n      properties:\n        id:\n          type: string\n          description: The attachment ID.\n        name:\n          type: string\n          description: The file name.\n        size:\n          type: integer\n          description: Size in bytes.\n          format: int64\n    V2MessageList:\n      type: array\n      items:\n        $ref: '#/components/schemas/V2BaseMessage'\n    SimpleMessage:\n      type: object\n      properties:\n        message:\n          type: string\n      description: A string wrapped in a JSON object.\n    RoomTag:\n      required:\n        - key\n        - value\n      type: object\n      properties:\n        key:\n          type: string\n          description: A unique label of the Tag.\n        value:\n          type: string\n          description: The value of this Tag's label.\n      description: Room Tag object. A key:value pair describing additional properties\n        of the room.\n    ShareArticle:\n      required:\n        - appId\n        - author\n        - publisher\n        - title\n      type: object\n      properties:\n        articleId:\n          type: string\n          description: |\n            An ID for this article that should be unique to the calling application. \n            Either an articleId or an articleUrl is required.\n        title:\n          type: string\n          description: The title of the article\n        subTitle:\n          type: string\n          description: The subtitle of the article\n        message:\n          type: string\n          description: The message text that can be send along with the shared article\n        publisher:\n          type: string\n          description: Publisher of the article\n        publishDate:\n          type: integer\n          description: Article publish date in unix timestamp\n          format: int64\n        thumbnailUrl:\n          type: string\n          description: Url to the thumbnail image\n        author:\n          type: string\n          description: Author of the article\n        articleUrl:\n          type: string\n          description: Url to the article\n        summary:\n          type: string\n          description: Preview summary of the article\n        appId:\n          type: string\n          description: App ID of the calling application\n        appName:\n          type: string\n          description: App name of the calling application\n        appIconUrl:\n          type: string\n          description: App icon url of the calling application\n    ShareContent:\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of content to be shared.  Currently only support \"com.symphony.sharing.article\"\n        content:\n          $ref: '#/components/schemas/ShareArticle'\n    V2HealthCheckResponse:\n      type: object\n      properties:\n        podConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to the Pod\n        podConnectivityError:\n          type: string\n          description: Error details in case of no Pod connectivity\n        keyManagerConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to the Key Manager\n        keyManagerConnectivityError:\n          type: string\n          description: Error details in case of no Key Manager connectivity\n        firehoseConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to Firehose Service\n        firehoseConnectivityError:\n          type: string\n          description: Error details in case of no Firehose connectivity\n        datafeedConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to Datafeed V2 Service\n        datafeedConnectivityError:\n          type: string\n          description: Error details in case of no Datafeed V2 connectivity\n        datafeedVersion:\n          type: string\n          description: Indicates the Datafeed V2 version\n        encryptDecryptSuccess:\n          type: boolean\n          description: Indicates whether the Agent can successfully decrypt and encrypt messages\n        encryptDecryptError:\n          type: string\n          description: Error details in case of the encryption or decryption of the message fails\n        podVersion:\n          type: string\n          description: The version number of the pod\n        agentVersion:\n          type: string\n          description: The version number of the Agent server\n        agentServiceUser:\n          type: boolean\n          description: Indicates whether agent service user is setup correctly.\n        agentServiceUserError:\n          type: string\n          description: Error details in case agent service user is setup incorrectly.\n        ceServiceUser:\n          type: boolean\n          description: Indicates whether CEService user is setup correctly.\n        ceServiceUserError:\n          type: string\n          description: Error details in case CEService user is setup incorrectly.\n    MessageSearchQuery:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Search for messages containing this text. Requires streamId\n            to be specified.\n        streamId:\n          type: string\n          description: Search for messages sent to this stream\n        streamType:\n          type: string\n          description: |\n            Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST.\n        author:\n          type: integer\n          description: Search for messages sent by this user ID\n          format: int64\n        hashtag:\n          type: string\n          description: Search for messages containing this hashtag\n        cashtag:\n          type: string\n          description: Search for messages containing this cashtag\n        mention:\n          type: integer\n          description: Search for messages mentioning this user ID\n          format: int64\n        signal:\n          type: string\n          description: |\n            Search for messages matching this signal. Can only be combined with date filtering and paging parameters.\n        fromDate:\n          type: integer\n          description: Search for messages sent on or after this timestamp\n          format: int64\n        toDate:\n          type: integer\n          description: Search for messages sent before this timestamp\n          format: int64\n    V4MessageImportList:\n      type: array\n      description: |\n        An ordered list of historic messages to be imported.\n        A list of import responses will be returned in the same order.\n      items:\n        $ref: '#/components/schemas/V4ImportedMessage'\n    V4ImportedMessage:\n      required:\n        - intendedMessageFromUserId\n        - intendedMessageTimestamp\n        - message\n        - originatingSystemId\n        - streamId\n      type: object\n      properties:\n        message:\n          type: string\n          description: Message text in MessageMLV2\n          format: MessageML\n        data:\n          type: string\n          description: Entity data in EntityJSON\n          format: JSON\n        intendedMessageTimestamp:\n          type: integer\n          description: |\n            The timestamp representing the time when the message was sent in the original system\n            in milliseconds since Jan 1st 1970.\n          format: int64\n        intendedMessageFromUserId:\n          type: integer\n          description: The long integer userid of the Symphony user who you intend to show sent the message.\n          format: int64\n        originatingSystemId:\n          type: string\n          description: The ID of the system through which the message was originally sent.\n        originalMessageId:\n          type: string\n          description: The ID of the message in the original system.\n        streamId:\n          type: string\n        attachments:\n          type: array\n          description: List of message attachments. Since Agent 20.14.\n          items:\n            $ref: '#/components/schemas/V4ImportedMessageAttachment'\n          x-since: 20.14\n        previews:\n          type: array\n          description: List of attachments previews. Since Agent 20.14.\n          items:\n            $ref: '#/components/schemas/V4ImportedMessageAttachment'\n          x-since: 20.14\n      description: |\n        A historic message to be imported into the system.\n        The importing user must have the Content Management role.\n        Also, the importing user must be a member of the conversation it is importing into.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n        By design, imported messages do not stream to datafeed or firehose endpoints.\n    V4ImportedMessageAttachment:\n      type: object\n      properties:\n        filename:\n          type: string\n          description: Attachment filename\n          example: car.png\n        content:\n          type: string\n          description: Attachment content as Base64 encoded string\n    V4ImportResponseList:\n      type: array\n      items:\n        $ref: '#/components/schemas/V4ImportResponse'\n    V4ImportResponse:\n      type: object\n      properties:\n        messageId:\n          type: string\n          description: |\n            If the message was successfully imported then the message ID in the system\n            of the newly created message.\n        originatingSystemId:\n          type: string\n          description: The ID of the system through which the message was originally sent.\n        originalMessageId:\n          type: string\n          description: The ID of the message in the original system.\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            message import failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n    V4AttachmentInfo:\n      required:\n        - id\n        - name\n        - size\n        - images\n      type: object\n      properties:\n        id:\n          type: string\n          description: The attachment ID.\n        name:\n          type: string\n          description: The file name.\n        size:\n          type: integer\n          description: Size in bytes.\n          format: int64\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/V4ThumbnailInfo'\n    V4ThumbnailInfo:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The thumbnail ID.\n        dimension:\n          type: string\n          description: The thumbnail pixel size.\n    V4MessageList:\n      type: array\n      items:\n        $ref: '#/components/schemas/V4Message'\n    V4Message:\n      type: object\n      required:\n        - attachments\n      properties:\n        messageId:\n          type: string\n          description: Id of the message\n        parentMessageId:\n          type: string\n          description: Id of the parent message, set when the message is a reply to\n            another message or a forwarded message. Since Agent 20.14.\n          x-since: 20.14\n        timestamp:\n          type: integer\n          description: Timestamp of the message in milliseconds since Jan 1 1970\n          format: int64\n        message:\n          type: string\n          description: Message content in MessageMLV2\n          format: MessageMLV2\n        sharedMessage:\n          $ref: '#/components/schemas/V4Message'\n        data:\n          type: string\n          description: Message data in EntityJSON\n          format: JSON\n        attachments:\n          type: array\n          description: Message attachments\n          items:\n            $ref: '#/components/schemas/V4AttachmentInfo'\n        user:\n          $ref: '#/components/schemas/V4User'\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        externalRecipients:\n          type: boolean\n          description: Indicates if the message have external recipients. Only present\n            on real time messaging.\n        diagnostic:\n          type: string\n          description: |\n            Details if event failed to parse for any reason.  The contents of this field may not be useful,\n            depending on the nature of the error. Only present when error occurs.\n        userAgent:\n          type: string\n          description: |\n            User agent string for client that sent the message.  Allows callers to identify which client sent the\n            origin message (e.g. API Agent, SFE Client, mobile, etc)\n        originalFormat:\n          type: string\n          description: |\n            Indicates the format in which the message was originally sent.  This could have been either:\n            - com.symphony.markdown - Markdown OR Message ML V1\n            - com.symphony.messageml.v2 - Message ML V2\n        disclaimer:\n          type: string\n          description: |\n            Message that may be sent along with a regular message if configured for the POD,\n            usually the first message sent in a room that day.\n        sid:\n          type: string\n          description: |\n            Unique session identifier from where the message was created.\n          example: fa691cd3-484a-4109-aeb2-57c05b78c95b\n        replacing:\n          type: string\n          description: Id of the message that the current message is replacing (present only if set)\n        replacedBy:\n          type: string\n          description: Id of the message that the current message is being replaced with (present only if set)\n        initialTimestamp:\n          type: integer\n          description: |\n            Timestamp of when the initial message has been created in milliseconds since \n            Jan 1 1970 (present only if set)\n          format: int64\n        initialMessageId:\n          type: string\n          description: Id the the initial message that has been updated (present only if set)\n        silent:\n          type: boolean\n          description: When false the user/s will receive the message update as unread (true by default)\n          x-since: 20.14\n      description: A representation of a message sent by a user of Symphony\n    V4MessageBlastResponse:\n      type: object\n      required:\n        - messages\n        - errors\n      properties:\n        messages:\n          type: array\n          description: List of messages successfully sent\n          items:\n            $ref: '#/components/schemas/V4Message'\n        errors:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Error'\n          description: List of streams where the messages ingestion has failed\n      description: Wrapper response for a single message sent to multiple streams\n    V4User:\n      type: object\n      properties:\n        userId:\n          type: integer\n          description: Id of user\n          format: int64\n        firstName:\n          type: string\n          description: First name of user\n        lastName:\n          type: string\n          description: Last name of user\n        displayName:\n          type: string\n          description: User display name\n        email:\n          type: string\n          description: Email of user\n        username:\n          type: string\n          description: Applicable only to internal users\n    V4Stream:\n      type: object\n      properties:\n        streamId:\n          type: string\n          description: Id of stream\n        streamType:\n          type: string\n          description: |\n            Stream type, possible values are:\n              - IM\n              - MIM\n              - ROOM\n              - POST\n        roomName:\n          type: string\n          description: Applicable only to rooms\n        members:\n          type: array\n          description: Applicable only to IM Created\n          items:\n            $ref: '#/components/schemas/V4User'\n        external:\n          type: boolean\n        crossPod:\n          type: boolean\n    V4RoomProperties:\n      type: object\n      required:\n        - keywords\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        creatorUser:\n          $ref: '#/components/schemas/V4User'\n        createdDate:\n          type: integer\n          description: Timestamp\n          format: int64\n        external:\n          type: boolean\n        crossPod:\n          type: boolean\n        public:\n          type: boolean\n        copyProtected:\n          type: boolean\n        readOnly:\n          type: boolean\n        discoverable:\n          type: boolean\n        membersCanInvite:\n          type: boolean\n        keywords:\n          type: array\n          items:\n            $ref: '#/components/schemas/V4KeyValuePair'\n        canViewHistory:\n          type: boolean\n    V4KeyValuePair:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    V4MessageSent:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/V4Message'\n    V4Initiator:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/V4User'\n    V4SharedPost:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/V4Message'\n        sharedMessage:\n          $ref: '#/components/schemas/V4Message'\n    V4InstantMessageCreated:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n    V4RoomCreated:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        roomProperties:\n          $ref: '#/components/schemas/V4RoomProperties'\n    V4RoomUpdated:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        newRoomProperties:\n          $ref: '#/components/schemas/V4RoomProperties'\n    V4RoomDeactivated:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n    V4RoomReactivated:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n    V4UserJoinedRoom:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        affectedUser:\n          $ref: '#/components/schemas/V4User'\n    V4UserLeftRoom:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        affectedUser:\n          $ref: '#/components/schemas/V4User'\n    V4RoomMemberPromotedToOwner:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        affectedUser:\n          $ref: '#/components/schemas/V4User'\n    V4RoomMemberDemotedFromOwner:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        affectedUser:\n          $ref: '#/components/schemas/V4User'\n    V4ConnectionRequested:\n      type: object\n      properties:\n        toUser:\n          $ref: '#/components/schemas/V4User'\n    V4ConnectionAccepted:\n      type: object\n      properties:\n        fromUser:\n          $ref: '#/components/schemas/V4User'\n    V4MessageSuppressed:\n      type: object\n      properties:\n        messageId:\n          type: string\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n    V4SymphonyElementsAction:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        formMessageId:\n          type: string\n          description: The id of the message that contains the Form\n        formId:\n          type: string\n          description: The id of the Form element\n        formValues:\n          type: object\n          description: The values (in JSON format) answered on the Form\n    V4UserRequestedToJoinRoom:\n      type: object\n      properties:\n        stream:\n          $ref: '#/components/schemas/V4Stream'\n        affectedUsers:\n          type: array\n          description: List of affected users by the action (i.e. owners of the room)\n          items:\n            $ref: '#/components/schemas/V4User'\n    V4Payload:\n      type: object\n      properties:\n        messageSent:\n          $ref: '#/components/schemas/V4MessageSent'\n        sharedPost:\n          $ref: '#/components/schemas/V4SharedPost'\n        instantMessageCreated:\n          $ref: '#/components/schemas/V4InstantMessageCreated'\n        roomCreated:\n          $ref: '#/components/schemas/V4RoomCreated'\n        roomUpdated:\n          $ref: '#/components/schemas/V4RoomUpdated'\n        roomDeactivated:\n          $ref: '#/components/schemas/V4RoomDeactivated'\n        roomReactivated:\n          $ref: '#/components/schemas/V4RoomReactivated'\n        userJoinedRoom:\n          $ref: '#/components/schemas/V4UserJoinedRoom'\n        userLeftRoom:\n          $ref: '#/components/schemas/V4UserLeftRoom'\n        roomMemberPromotedToOwner:\n          $ref: '#/components/schemas/V4RoomMemberPromotedToOwner'\n        roomMemberDemotedFromOwner:\n          $ref: '#/components/schemas/V4RoomMemberDemotedFromOwner'\n        connectionRequested:\n          $ref: '#/components/schemas/V4ConnectionRequested'\n        connectionAccepted:\n          $ref: '#/components/schemas/V4ConnectionAccepted'\n        messageSuppressed:\n          $ref: '#/components/schemas/V4MessageSuppressed'\n        symphonyElementsAction:\n          $ref: '#/components/schemas/V4SymphonyElementsAction'\n        userRequestedToJoinRoom:\n          $ref: '#/components/schemas/V4UserRequestedToJoinRoom'\n    V4Event:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Event ID\n        messageId:\n          type: string\n          description: Message ID\n        timestamp:\n          type: integer\n          description: Timestamp of event\n          format: int64\n        type:\n          type: string\n          description: |\n            Event type, possible events are:\n              - MESSAGESENT\n              - SHAREDPOST\n              - INSTANTMESSAGECREATED\n              - ROOMCREATED\n              - ROOMUPDATED\n              - ROOMDEACTIVATED\n              - ROOMREACTIVATED\n              - USERJOINEDROOM\n              - USERLEFTROOM\n              - ROOMMEMBERPROMOTEDTOOWNER\n              - ROOMMEMBERDEMOTEDFROMOWNER\n              - CONNECTIONREQUESTED\n              - CONNECTIONACCEPTED\n              - MESSAGESUPPRESSED\n              - SYMPHONYELEMENTSACTION\n              - USERREQUESTEDTOJOINROOM\n        diagnostic:\n          type: string\n          description: |\n            Details if event failed to parse for any reason.  The contents of this field may not be useful,\n            depending on the nature of the error. Only present when error occurs.\n        initiator:\n          $ref: '#/components/schemas/V4Initiator'\n        payload:\n          $ref: '#/components/schemas/V4Payload'\n    V4EventList:\n      type: array\n      items:\n        $ref: '#/components/schemas/V4Event'\n    BaseSignal:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Signal name\n        query:\n          type: string\n          description: |\n            The query used to define this signal. The query is defined as \"field:value\" pairs combined by the operators\n            \"AND\" or \"OR\". Supported fields are (case-insensitive): \"author\", \"hashtag\" and \"cashtag\".\n            MUST contain at least one \"hashtag\" or \"cashtag\" definition.\n        visibleOnProfile:\n          type: boolean\n          description: Whether the signal is visible on its creator's profile\n        companyWide:\n          type: boolean\n          description: Whether the signal is a push signal\n    Signal:\n      allOf:\n        - $ref: '#/components/schemas/BaseSignal'\n        - type: object\n          properties:\n            id:\n              type: string\n              description: Signal ID\n            timestamp:\n              type: integer\n              description: Timestamp when the signal was created, in milliseconds since\n                Jan 1 1970\n              format: int64\n            companyWide:\n              type: boolean\n              description: Whether the signal is a push signal\n    SignalList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Signal'\n    ChannelSubscriptionResponse:\n      type: object\n      properties:\n        requestedSubscription:\n          type: integer\n          description: The number of requested userIds to subscribe\n          format: int64\n        successfulSubscription:\n          type: integer\n          description: The number of successful subscriptions done\n          format: int64\n        failedSubscription:\n          type: integer\n          description: The number of subscription failures\n          format: int64\n        subscriptionErrors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelSubscriptionError'\n    ChannelSubscriptionError:\n      type: object\n      properties:\n        userId:\n          type: integer\n          description: The userId on which failure happened\n          format: int64\n        code:\n          type: string\n          description: subscription failure code\n        message:\n          type: string\n          description: subscription failure message\n    ChannelSubscriberResponse:\n      type: object\n      properties:\n        offset:\n          type: integer\n          description: The number of subscribers skipped\n          format: int64\n        hasMore:\n          type: boolean\n          description: True if there are more subscribers\n        total:\n          type: integer\n          description: The total number of subscribers\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelSubscriber'\n    ChannelSubscriber:\n      type: object\n      properties:\n        subscriptionId:\n          type: string\n        pushed:\n          type: boolean\n          description: True if the subscriber is allowed to unsubscribe\n          default: false\n        owner:\n          type: boolean\n          description: True if the subscriber is the creator\n          default: false\n        subscriberName:\n          type: string\n          description: User display name\n        userId:\n          type: integer\n          description: The user ID of the subscriber\n          format: int64\n        timestamp:\n          type: integer\n          description: Timestamp when the signal was subscribed, in milliseconds since\n            Jan 1 1970\n          format: int64\n    AgentInfo:\n      type: object\n      properties:\n        ipAddress:\n          type: string\n          description: The IP address of the Agent server.\n        hostname:\n          type: string\n          description: The hostname of the Agent server.\n        serverFqdn:\n          type: string\n          description: The fully-qualified domain name of the Agent server. Must be\n            set by the user at startup.\n        version:\n          type: string\n          description: The version of the Agent.\n        url:\n          type: string\n          description: The URL under which the Agent is available.\n        onPrem:\n          type: boolean\n          description: Whether this is an on-prem or cloud installation.\n        mt:\n          type: boolean\n          description: Whether this is a multi tenant instance.\n        commitId:\n          type: string\n          description: The Git commit ID of the running revision.\n    V1DLPPoliciesCollectionResponse:\n      type: object\n      required:\n        - policies\n      properties:\n        policies:\n          type: array\n          description: List of policies\n          items:\n            $ref: '#/components/schemas/V1DLPPolicy'\n        page:\n          type: integer\n          description: Page number of current page\n          format: int32\n        pageCount:\n          type: integer\n          description: Total number of pages available\n          format: int32\n      description: List of policies\n    V1DLPPolicy:\n      required:\n        - contentTypes\n        - name\n        - scopes\n        - dictionaryRefs\n        - type\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: Indicate whether the policy is active or not\n        contentTypes:\n          type: array\n          description: |\n            The list of content types that policy should apply to. Cannot be empty. Policy content types could be either of \"Messages\", \"RoomMeta\", \"SignalMeta\".\n            Default is set to [\"Messages\"] if not specified.\n          items:\n            type: string\n        creationDate:\n          type: integer\n          description: Creation time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        creatorId:\n          type: string\n          description: Numeric userId of the creator\n        dictionaryRefs:\n          type: array\n          description: List of dictionaries.\n          items:\n            $ref: '#/components/schemas/V1DLPDictionaryRef'\n        lastDisabledDate:\n          type: integer\n          description: Recent disable time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        lastUpdatedDate:\n          type: integer\n          description: Recent update time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        name:\n          type: string\n          description: Unique name of a policy, max 30 characters. Cannot be empty.\n            All the leading and trailing blank spaces are trimmed.\n        policyId:\n          type: string\n          description: Policy Id\n        scopes:\n          type: array\n          description: |\n            List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations).\n            You can apply both scopes if you set it to [\"Internal\", \"External\"].\n          items:\n            type: string\n        type:\n          type: string\n          description: Type of policy. Possible values \"Block\" or \"Warn\".\n        version:\n          type: string\n          description: |\n            The version of a dictionary, in format \"major.minor\". Initial value will set by backend as \"1.0\" when created.\n            Whenever the dictionary version needs to be changed, the minor version by 1 unless minor == 999, then the major version is increased by 1 until it reaches 999.\n      description: The policy object for expression filter, one policy can have multiple\n        dictionaries\n    V1DLPPolicyRequest:\n      required:\n        - contentTypes\n        - name\n        - scopes\n        - type\n      type: object\n      properties:\n        contentTypes:\n          type: array\n          description: |\n            The list of content types that policy should apply to. Cannot be empty. Policy content types could be either of \"Messages\", \"RoomMeta\", \"SignalMeta\".\n            Default is set to [\"Messages\"] if not specified.\n          items:\n            type: string\n        dictionaryIds:\n          type: array\n          description: List of dictionaries Ids for the policy.\n          items:\n            type: string\n        name:\n          type: string\n          description: Unique name of a policy, max 30 characters. Cannot be empty.\n            All the leading and trailing blank spaces are trimmed.\n        scopes:\n          type: array\n          description: |\n            List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations).\n            You can apply both scopes if you set it to [\"Internal\", \"External\"].\n          items:\n            type: string\n        type:\n          type: string\n          description: Type of policy. Possible values \"Block\" or \"Warn\".\n      description: The policy object to use for creating/updating a policy.\n    V1DLPPolicyResponse:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/V1DLPPolicy'\n      description: Policy Response\n    V1DLPDictionary:\n      required:\n        - dictionaryMetadata\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/V1DLPDictionaryContent'\n        dictionaryMetadata:\n          $ref: '#/components/schemas/V1DLPDictionaryMetadata'\n      description: Dictionary object\n    V1DLPDictionaryContent:\n      type: object\n      properties:\n        data:\n          type: string\n          description: A comma separated string which contains a lot of keywords/regexes.\n        numKeywords:\n          type: integer\n          description: Number of Keywords in dictionary\n          format: int32\n        md5:\n          type: string\n          description: MD5 value of the content\n      description: Content of a dictionary\n    V1DLPDictionaryMetadataCollectionResponse:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          description: List of dictionary metadata\n          items:\n            $ref: '#/components/schemas/V1DLPDictionaryMetadata'\n        page:\n          type: integer\n          description: Page number of current page\n          format: int32\n        pageCount:\n          type: integer\n          description: Total number of pages available\n          format: int32\n      description: List of dictionary metadata.\n    V1DLPDictionaryMetadataResponse:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/V1DLPDictionaryMetadata'\n      description: Dictionary response containing dictionary metadata.\n    V1DLPDictionaryMetadataCreateRequest:\n      required:\n        - name\n        - type\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            The name of dictionary\n        type:\n          type: string\n          description: |\n            The type of dictionary, which specify the content is a list of words or a list of regexes.\n            By default set to \"Word\" if not specified. Possible values - Word, Regex\n      description: Dictionary's metadata (excluding content) to use for dictionary\n        create operations.\n    V1DLPDictionaryMetadataUpdateRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of dictionary\n      description: Dictionary's metadata (excluding content) to use for dictionary\n        update operations.\n    V1DLPDictionaryMetadata:\n      required:\n        - dictRef\n        - type\n      type: object\n      properties:\n        creationDate:\n          type: integer\n          description: Creation time of the dictionary in milliseconds elapsed as\n            of epoch time.\n          format: int64\n        creatorId:\n          type: string\n          description: Numeric userId of the creator\n        dictRef:\n          $ref: '#/components/schemas/V1DLPDictionaryRef'\n        lastUpdatedDate:\n          type: integer\n          description: The recent update time of the dictionary in milliseconds\n          format: int64\n        type:\n          type: string\n          description: |\n            The type of dictionary, which specify the content is a list of words or a list of regexes.\n            By default set to \"Word\" if not specified. Possible values - Word, Regex\n      description: Dictionary's metadata (excluding content)\n    V1DLPDictionaryRef:\n      required:\n        - name\n      type: object\n      properties:\n        dictId:\n          type: string\n          description: Unique dictionary id\n        name:\n          type: string\n          description: Unique name of a dictionary, max 30 characters, with trimmed\n            leading and trailing blank spaces.\n        version:\n          type: string\n          description: |\n            The version of a dictionary, in format \"major.minor\".\n            Initial value will set by backend as \"1.0\" when created.\n            Whenever the dictionary version needs to be changed, the minor version by 1 unless minor == 999, then the major version is increased by 1 until it reaches 999.\n      description: Basic information needed to identify a dictionary\n    V1DLPViolationMessageResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          description: A representation of list of violations due to messages sent\n            by a user of Symphony\n          items:\n            $ref: '#/components/schemas/V1DLPViolationMessage'\n        nextOffset:\n          type: string\n          description: Offset for the next chunk of violations to be submitted in\n            the next request.  Value is null if there are no further violations.\n    V1DLPViolationStreamResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          items:\n            $ref: '#/components/schemas/V1DLPViolationStream'\n        nextOffset:\n          type: string\n          description: Offset for the next chunk of violations to be submitted in\n            the next request.  Value is null if there are no further violations.\n    V1DLPViolationSignalResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          description: A representation of list of violations due to signal creation/update\n            sent by a user of Symphony\n          items:\n            $ref: '#/components/schemas/V1DLPViolationSignal'\n        nextOffset:\n          type: string\n          description: Offset for the next chunk of violations to be submitted in\n            the next request.  Value is null if there are no further violations.\n    V1DLPViolationMessage:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V1DLPViolation'\n        message:\n          $ref: '#/components/schemas/V4Message'\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event there are parsing errors.\n            May also be present in the case of a successful call if there is useful narrative to return.\n    V1DLPViolationStream:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V1DLPViolation'\n        stream:\n          $ref: '#/components/schemas/V1DLPStream'\n    V1DLPViolationSignal:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V1DLPViolation'\n        signal:\n          $ref: '#/components/schemas/V1DLPSignal'\n    V1DLPViolation:\n      type: object\n      properties:\n        enforcementEventID:\n          type: string\n          description: Enforcement event ID. Unique ID that identifies this enforcement.\n        entityID:\n          type: string\n          description: Entity ID is the content Id of the violation, for example,\n            for messages, its the Id of the message\n        createTime:\n          type: integer\n          description: Timestamp of the violation in milliseconds since Jan 1 1970\n          format: int64\n        lastModified:\n          type: integer\n          description: Timestamp of the last modification of violation in milliseconds\n            since Jan 1 1970\n          format: int64\n        requesterId:\n          type: integer\n          description: Id of the requester responsible for the message/stream/signal\n          format: int64\n        matchedPolicies:\n          $ref: '#/components/schemas/V1DLPMatchedPolicyList'\n        action:\n          type: string\n          description: action taken such as BLOCK or WARN.  See outcome for a more\n            detailed description of the outcome this action.\n        outcome:\n          $ref: '#/components/schemas/V1DLPOutcome'\n        contentType:\n          $ref: '#/components/schemas/V1DLPContentType'\n        version:\n          type: string\n          description: Version of application which processed the message and produced\n            this violation.\n        ignoreDLPwarning:\n          type: boolean\n          description: Did the user chose to ignore DLP warning that was presented?\n      description: A representation of a violation due to a message sent by a user\n        of Symphony\n    V1DLPMatchedPolicyList:\n      type: array\n      description: List of policies that matched the violation.\n      items:\n        $ref: '#/components/schemas/V1DLPMatchedPolicy'\n    V1DLPMatchedPolicy:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Id of the policy\n        version:\n          type: string\n          description: Version of the policy\n        policyName:\n          type: string\n          description: Name of the policy\n        type:\n          type: string\n          description: Whether BLOCK or WARN\n        terms:\n          type: string\n          description: List of decrypted matched keywords in the policy\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            decryption of terms failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n      description: A representation of policy that matched the violation with a list\n        of matched keywords in the policy\n    V1DLPOutcome:\n      type: object\n      properties:\n        type:\n          type: string\n          description: Outcome of DLP enforcement\n      description: A representation of outcome of DLP message/stream/signal sent by\n        a user of Symphony\n    V1DLPContentType:\n      type: object\n      properties:\n        type:\n          type: string\n          description: content type\n      description: A representation of content type of message sent by a user of Symphony\n        (message/stream/signal)\n    V1DLPStream:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the Stream/Room.\n        creatorPrettyName:\n          type: string\n          description: Name of the creator of the Room.\n        publicRoom:\n          type: boolean\n          description: Is this a public room?\n        crossPod:\n          type: boolean\n          description: Is this a cross pod scenario?\n        allowExternal:\n          type: boolean\n          description: Is external messaging allowed\n        creatorId:\n          type: string\n          description: Id of the creator of the Room.\n        roomDescription:\n          type: string\n          description: Description of the Room.\n        streamId:\n          type: string\n          description: ThreadId of the Room.\n        state:\n          type: string\n          description: State of the Room (example CREATED etc)\n        type:\n          type: string\n          description: Type of the Room (example ROOM (or IM or Wall))\n        lastDisabled:\n          type: integer\n          description: Timestamp of last time the room is Disabled\n          format: int64\n        memberAddUserEnabled:\n          type: boolean\n          description: Is memberAddUserEnabled\n        active:\n          type: boolean\n          description: Is Room Active\n        discoverable:\n          type: boolean\n          description: Is Room discoverable\n        readOnly:\n          type: boolean\n          description: Is Room read-only\n        copyDisabled:\n          type: boolean\n          description: Is Room copyDisabled\n        externalOwned:\n          type: boolean\n          description: Is Room externalOwned\n        sendMessageDisabled:\n          type: boolean\n          description: Is sendMessage Disabled for this Room\n        moderated:\n          type: boolean\n          description: Is room moderated\n        shareHistoryEnabled:\n          type: boolean\n          description: Is room shareHistoryEnabled\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            stream retrieval failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n      description: Room details in the context of violation.\n    V1DLPSignal:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the Signal\n        rules:\n          type: string\n          description: Signal rules decrypted.\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            signal decryption failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n      description: Signal details\n    V3DLPPolicyRequest:\n      required:\n        - appliesTo\n        - name\n        - scopes\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            Unique name of a policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.\n        scopes:\n          type: array\n          description: |\n            List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations).\n            You can apply both scopes if you set it to [\"Internal\", \"External\"].\n          items:\n            type: string\n        appliesTo:\n          type: array\n          items:\n            $ref: '#/components/schemas/V3DLPPolicyAppliesTo'\n      description: Request to be used to get policies.\n    V3DLPPolicy:\n      type: object\n      required:\n        - appliesTo\n      properties:\n        id:\n          type: string\n          description: Unique identifier for policy.\n        policyId:\n          type: string\n          description: Policy Id.\n        version:\n          type: string\n          description: |\n            The version of the policy, in format \"major.minor\". Initial value will set by backend as \"3.0\" when created.\n            Whenever the policy version needs to be changed, the minor version by 1 unless minor == 999,\n            then the major version is increased by 1 until it reaches 999.\n        name:\n          type: string\n          description: |\n            Unique name of policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.\n        creatorId:\n          type: integer\n          description: Numeric userId of the creator.\n          format: int64\n        scopes:\n          type: array\n          description: |\n            List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations).\n            You can apply both scopes if you set it to [\"Internal\", \"External\"].\n          items:\n            type: string\n        appliesTo:\n          type: array\n          items:\n            $ref: '#/components/schemas/V3DLPPolicyAppliesTo'\n        active:\n          type: boolean\n          description: Indicate whether the policy is active or not.\n        deleted:\n          type: boolean\n          description: Indicate whether the policy is deleted or not.\n        creationDate:\n          type: integer\n          description: Creation time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        lastUpdatedDate:\n          type: integer\n          description: Recent update time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        lastDisabledDate:\n          type: integer\n          description: Recent disable time of the policy in milliseconds elapsed as of epoch time.\n          format: int64\n        systemPolicy:\n          type: boolean\n      description: |\n        A policy is the main entity of V3 policy/rule system. It is responsible to define rules and add scope constraints to the engine.\n    V3DLPRule:\n      required:\n        - name\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n          description: Type of a rule used by policy. Can be [\"UNKNOWN\", \"TEXT_MATCH\",\n            \"FILE_EXTENSION\", \"FILE_SIZE\", \"FILE_PASSWORD\", \"FILE_CLASSIFIER\"].\n        name:\n          type: string\n          description: Name for rule.\n        textMatchConfig:\n          $ref: '#/components/schemas/V3DLPTextMatchConfig'\n        fileSizeConfig:\n          $ref: '#/components/schemas/V3DLPFileSizeConfig'\n        fileExtensionConfig:\n          $ref: '#/components/schemas/V3DLPFileExtensionConfig'\n        filePasswordConfig:\n          $ref: '#/components/schemas/V3DLPFilePasswordConfig'\n        fileClassifierConfig:\n          $ref: '#/components/schemas/V3DLPFileClassifierConfig'\n      description: |\n        A Rule defines the actual matching specification for policies. It holds a type and a configuration\n        for the rule, these properties should be used to build the corresponding matching implementation.\n        Only one of the configuration property should be set [textMatchConfig, fileSizeConfig, fileExtensionConfig, filePasswordConfig, fileClassifierConfig].\n    V3DLPFilePasswordConfig:\n      required:\n        - applicableFileTypes\n        - matchCriteria\n      type: object\n      properties:\n        applicableFileTypes:\n          type: array\n          description: File types that can be applied. Can be [\"PDF\", \"WORD\", \"EXCEL\",\n            \"POWERPOINT\", \"ZIP\", \"CSV\", \"TXT\"].\n          items:\n            type: string\n        matchCriteria:\n          type: string\n          description: |\n            Based on the criteria, whether a file is password protected or not means a match.\n            Can be [\"PASSWORD_PROTECTED\", \"NOT_PASSWORD_PROTECTED\"]. The default is \"NOT_PASSWORD_PROTECTED\".\n      description: Password protected detection config for files that are password\n        protected or not.\n    V3DLPFileExtensionConfig:\n      required:\n        - allowLists\n        - blockLists\n      type: object\n      properties:\n        allowLists:\n          type: array\n          description: File extensions that are allowed.\n          items:\n            type: string\n        blockLists:\n          type: array\n          description: File extensions that are blocked.\n          items:\n            type: string\n      description: Extension detection config for allowed and blocked types of file\n        extensions.\n    V3DLPFileSizeConfig:\n      type: object\n      properties:\n        sizeLimit:\n          type: integer\n          format: int32\n      description: File size config defines maximum allowed size of file. Default max size limit is 20 MB.\n    V3DLPTextMatchConfig:\n      type: object\n      required:\n        - dictionaries\n        - applicableFileTypes\n      properties:\n        dictionaries:\n          type: array\n          items:\n            $ref: '#/components/schemas/V3DLPDictionaryMeta'\n        countUniqueOccurrences:\n          type: integer\n          format: int32\n        applicableFileTypes:\n          type: array\n          description: |\n            File types must be applied only for rule type \"FileContent\", otherwise must be empty.\n            Can be [\"PDF\", \"WORD\", \"EXCEL\", \"POWERPOINT\", \"ZIP\", \"CSV\", \"TXT\"].\n          items:\n            type: string\n      description: |\n        This is a configuration that can be used to match text or regex.\n        Configuration that can be used by a rule. This is a configuration that can be used to match text or regex.\n        This configuration also corresponds to V2 TextMatch/RegexMatch of dictionaries.\n    V3DLPDictionaryMeta:\n      required:\n        - dictId\n        - name\n        - version\n      type: object\n      properties:\n        dictId:\n          type: string\n        version:\n          type: string\n        name:\n          type: string\n      description: Identity of a dictionary.\n    V3DLPFileClassifierConfig:\n      required:\n        - applicableFileTypes\n        - classifiers\n      type: object\n      properties:\n        classifiers:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            Classifier is defined as a Key and its Value: e.g.: \"classification\": \"Internal\".\n            Name and value can contain UTF-8 characters. Neither the name nor value cannot be left empty.\n            Maximum 30 characters for the name and value, case insensitive.\n            If files contains k-v pairs in the classifers map, it means a match. Maximum 30 classifiers per policy.\n        applicableFileTypes:\n          type: array\n          description: File types that can be applied. Can be [\"PDF\", \"WORD\", \"EXCEL\", \"POWERPOINT\", \"ZIP\", \"CSV\", \"TXT\"].\n          items:\n            type: string\n    V3DLPPolicyAppliesTo:\n      required:\n        - action\n        - dataType\n        - rules\n      type: object\n      properties:\n        dataType:\n          type: string\n          description: |\n            The list of data types that policy should apply to. Can't be empty.\n            Can be [\"Messages\",\"RoomMeta\", \"SignalMeta\", \"FileContent\", \"FileMeta\"].\n        action:\n          type: string\n          description: |\n            Action to be taken on violation detection.\n            Can be [\"Block\", \"Warn\", \"LogOnly\"]. The default is \"LogOnly\".\n        rules:\n          type: array\n          items:\n            $ref: '#/components/schemas/V3DLPRule'\n    V3DLPPolicyResponse:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/V3DLPPolicy'\n      description: Policy Response.\n    V3DLPPoliciesCollectionResponse:\n      type: object\n      required:\n        - policies\n      properties:\n        policies:\n          type: array\n          description: List of policies.\n          items:\n            $ref: '#/components/schemas/V3DLPPolicy'\n        page:\n          type: integer\n          description: The starting page for pagination.\n          format: int32\n        size:\n          type: integer\n          description: Size of policies displayed per page.\n          format: int32\n        pageCount:\n          type: integer\n          description: Total number of pages available.\n          format: int32\n      description: List of policies.\n    V3DLPViolationMessageResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          description: A representation of list of violations due to messages sent\n            by a user of Symphony\n          items:\n            $ref: '#/components/schemas/V3DLPViolationMessage'\n        nextOffset:\n          type: string\n          description: |\n            Offset for the next chunk of violations to be submitted in the next request. \n            Value is null if there are no further violations.\n    V3DLPViolationStreamResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          items:\n            $ref: '#/components/schemas/V3DLPViolationStream'\n        nextOffset:\n          type: string\n          description: |\n            Offset for the next chunk of violations to be submitted in the next request.\n            Value is null if there are no further violations.\n    V3DLPViolationSignalResponse:\n      type: object\n      required:\n        - violations\n      properties:\n        violations:\n          type: array\n          description: A representation of list of violations due to signal creation/update sent by a user of Symphony\n          items:\n            $ref: '#/components/schemas/V3DLPViolationSignal'\n        nextOffset:\n          type: string\n          description: |\n            Offset for the next chunk of violations to be submitted in the next request.\n            Value is null if there are no further violations.\n    V3DLPViolationMessage:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V3DLPViolation'\n        message:\n          $ref: '#/components/schemas/V4Message'\n        sharedMessage:\n          $ref: '#/components/schemas/V4Message'\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event there are parsing errors.\n            May also be present in the case of a successful call if there is useful narrative to return.\n    V3DLPViolationStream:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V3DLPViolation'\n        stream:\n          $ref: '#/components/schemas/V1DLPStream'\n    V3DLPViolationSignal:\n      type: object\n      properties:\n        violation:\n          $ref: '#/components/schemas/V3DLPViolation'\n        signal:\n          $ref: '#/components/schemas/V1DLPSignal'\n    V3DLPViolation:\n      type: object\n      properties:\n        enforcementEventID:\n          type: string\n          description: Enforcement event ID. Unique ID that identifies this enforcement.\n        entityID:\n          type: string\n          description: Entity ID is the content Id of the violation. For example, for messages it's the Id of the message\n        createTime:\n          type: integer\n          description: Timestamp of the violation in milliseconds since Jan 1 1970\n          format: int64\n        lastModified:\n          type: integer\n          description: Timestamp of the last modification of violation in milliseconds\n            since Jan 1 1970\n          format: int64\n        requesterId:\n          type: integer\n          description: Id of the requester responsible for the message/stream/signal\n          format: int64\n        details:\n          type: array\n          description: JSON representation of the details of the violation.\n          items:\n            type: object\n        action:\n          type: string\n          description: action taken such as BLOCK or WARN.  See outcome for a more detailed description of the outcome this action.\n        outcome:\n          $ref: '#/components/schemas/V1DLPOutcome'\n        version:\n          type: string\n          description: Version of application which processed the message and produced\n            this violation.\n        ignoreDLPwarning:\n          type: boolean\n          description: Did the user chose to ignore DLP warning that was presented?\n      description: A representation of a violation due to an event created by a user\n        of Symphony\n    Pagination:\n      required:\n        - cursors\n      type: object\n      properties:\n        cursors:\n          type: object\n          properties:\n            before:\n              type: string\n              description: |\n                This is the opaque url-safe string that points to the start of the page of data\n                that has been returned.\n              example: MTAxNTExOTQ1MjAwNzI5NDE=\n            after:\n              type: string\n              description: |\n                This is the opaque url-safe string that points to the end of the page of data\n                that has been returned.\n              example: NDMyNzQyODI3OTQw\n        previous:\n          type: string\n          description: |\n            API endpoint that will return the previous page of data. If not included, this is\n            the first page of data.\n          example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25\u0026before=MTAxNTExOTQ1MjAwNzI5NDE=\n        next:\n          type: string\n          description: |\n            API endpoint that will return the next page of data. If not included, this is the\n            last page of data. Due to how pagination works with visibility and privacy, it is\n            possible that a page may be empty but contain a 'next' paging link. Stop paging when\n            the 'next' link no longer appears.\n          example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25\u0026after=NDMyNzQyODI3OTQw\n    V1AuditTrailInitiatorResponse:\n      type: object\n      properties:\n        action:\n          type: string\n          description: The audit trail action that has peformed\n        actionName:\n          type: string\n          description: The audit trail action name that has peformed\n        timestamp:\n          type: string\n          description: The timestamp when the action has occurred\n        initiatorId:\n          type: string\n          description: The user's id that has performed the action\n        initiatorUsername:\n          type: string\n          description: The username that has performed the action\n        initiatorEmailAddress:\n          type: string\n          description: The user's e-mail address that has performed the action\n      description: |\n        Audit Trail Initiator object response.\n        The attributes may vary according to the action.\n        There are different types of action and each action could have specific attributes.\n    V1AuditTrailInitiatorList:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/V1AuditTrailInitiatorResponse'\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n    V5Datafeed:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the datafeed\n        createdAt:\n          type: integer\n          description: |\n            [deprecated] Datafeed creation timestamp\n          format: int64\n          deprecated: true\n        type:\n          type: string\n          description: type of the feed. Known values are \"fanout\" and \"datahose\"\n      description: Container for the feed ID\n      example:\n        id: 371f465fb97b5d1027d20a5e7085863a_f\n        type: fanout\n    V5DatafeedCreateBody:\n      type: object\n      properties:\n        tag:\n          maxLength: 100\n          type: string\n          description: A unique identifier to ensure uniqueness of the datafeed.\n    AckId:\n      type: object\n      properties:\n        ackId:\n          type: string\n          description: |\n            A unique id for events that can be deleted from a client's.\n            Empty for the first read. If set to null or missing, it will be considered empty feed.\n        updatePresence:\n          type: boolean\n          description: Set to false to avoid updating the user's presence when reading events. Default is true.\n          default: true\n      description: |\n        An object containing the ackId (and parameters) associated with \n        events that the client has received through an individual feed.\n    V5EventList:\n      type: object\n      required:\n        - events\n      properties:\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/V4Event'\n        ackId:\n          type: string\n          description: |\n            The ackId which acknowledges that the current batch of messages \n            have been successfully received by the client\n    V5EventsReadBody:\n      required:\n        - tag\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of the feed. Allowed values are \"fanout\" and \"datahose\"\n        tag:\n          maxLength: 80\n          minLength: 1\n          type: string\n          description: A unique identifier to ensure uniqueness of the datafeed.\n        eventTypes:\n          type: array\n          description: |\n            At least one value is required if the type of feed is \"datahose\". Values must be a valid Real-Time Event type, i.e. one of:\n            * MESSAGESENT\n            * MESSAGESUPPRESSED\n            * SYMPHONYELEMENTSACTION\n            * SHAREDPOST\n            * INSTANTMESSAGECREATED\n            * ROOMCREATED\n            * ROOMUPDATED\n            * ROOMDEACTIVATED\n            * ROOMREACTIVATED\n            * USERREQUESTEDTOJOINROOM\n            * USERJOINEDROOM\n            * USERLEFTROOM\n            * ROOMMEMBERPROMOTEDTOOWNER\n            * ROOMMEMBERDEMOTEDFROMOWNER\n            * CONNECTIONREQUESTED\n            * CONNECTIONACCEPTED\n          items:\n            type: string\n          x-since: 22.7\n        ackId:\n          type: string\n          description: |\n            Should be empty for the first call, acknowledges that the current\n            batch of messages have been successfully received by the client.\n        updatePresence:\n          type: boolean\n          description: |\n            Whether to update the presence status of the account to AVAILABLE \n            when calling the endpoint. Default value is true.\n          default: true\n    V3Health:\n      type: object\n      properties:\n        services:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/V3HealthComponent'\n        status:\n          $ref: '#/components/schemas/V3HealthStatus'\n        users:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/V3HealthComponent'\n        version:\n          type: string\n          description: Required Agent verison\n    V3HealthAuthType:\n      type: string\n      description: Type of authentication\n      enum:\n        - RSA\n        - CERT\n    V3HealthComponent:\n      type: object\n      properties:\n        authType:\n          $ref: '#/components/schemas/V3HealthAuthType'\n        message:\n          type: string\n          description: An error message, if the component status is DOWN\n        status:\n          $ref: '#/components/schemas/V3HealthStatus'\n        version:\n          type: string\n          description: Optional component version\n    V3HealthStatus:\n      type: string\n      description: Application health status.\n      enum:\n        - UP\n        - DOWN  #\n    # Deprecated definitions\n    #\n    MessageSubmission:\n      type: object\n      properties:\n        format:\n          type: string\n          enum:\n            - TEXT\n            - MESSAGEML\n        message:\n          type: string\n    V2MessageSubmission:\n      type: object\n      required:\n        - attachments\n      properties:\n        format:\n          type: string\n          enum:\n            - TEXT\n            - MESSAGEML\n        message:\n          type: string\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/AttachmentInfo'\n    MessageImportList:\n      type: array\n      description: |\n        An ordered list of historic messages to be imported.\n        A list of import responsees will be returned in the same order.\n      items:\n        $ref: '#/components/schemas/ImportedMessage'\n    ImportedMessage:\n      required:\n        - intendedMessageFromUserId\n        - intendedMessageTimestamp\n        - message\n        - originatingSystemId\n        - streamId\n      type: object\n      properties:\n        message:\n          type: string\n          description: Message text in MessageML\n          format: MessageML\n        format:\n          type: string\n          enum:\n            - TEXT\n            - MESSAGEML\n        intendedMessageTimestamp:\n          type: integer\n          description: |\n            The timestamp representing the time when the message was sent in the original system\n            in milliseconds since Jan 1st 1970.\n          format: int64\n        intendedMessageFromUserId:\n          type: integer\n          description: The long integer userid of the Symphony user who you intend to show sent the message.\n          format: int64\n        originatingSystemId:\n          type: string\n          description: The ID of the system through which the message was originally sent.\n        streamId:\n          type: string\n      description: |\n        A historic message to be imported into the system.\n        The importing user must have the Content Management role.\n        Also, the importing user must be a member of the conversation it is importing into.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n        By design, imported messages do not stream to datafeed or firehose endpoints.\n    V2MessageImportList:\n      type: array\n      description: |\n        An ordered list of historic messages to be imported.\n        A list of import responsees will be returned in the same order.\n      items:\n        $ref: '#/components/schemas/V2ImportedMessage'\n    V2ImportedMessage:\n      required:\n        - intendedMessageFromUserId\n        - intendedMessageTimestamp\n        - message\n        - originatingSystemId\n        - streamId\n      type: object\n      properties:\n        message:\n          type: string\n          description: Message text in MessageML\n          format: MessageML\n        format:\n          type: string\n          enum:\n            - TEXT\n            - MESSAGEML\n        intendedMessageTimestamp:\n          type: integer\n          description: |\n            The timestamp representing the time when the message was sent in the original system\n            in milliseconds since Jan 1st 1970.\n          format: int64\n        intendedMessageFromUserId:\n          type: integer\n          description: The long integer userid of the Symphony user who you intend to show sent the message.\n          format: int64\n        originatingSystemId:\n          type: string\n          description: The ID of the system through which the message was originally sent.\n        originalMessageId:\n          type: string\n          description: The ID of the message in the original system.\n        streamId:\n          type: string\n      description: |\n        A historic message to be imported into the system.\n        The importing user must have the Content Management role.\n        Also, the importing user must be a member of the conversation it is importing into.\n        The user that the message is intended to have come from must also be present in the conversation.\n        The intended message timestamp must be a valid time from the past. It cannot be a future timestamp.\n        By design, imported messages do not stream to datafeed or firehose endpoints.\n    ImportResponseList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ImportResponse'\n    ImportResponse:\n      type: object\n      properties:\n        messageId:\n          type: string\n          description: |\n            If the message was successfully imported then the message ID in the system\n            of the newly created message.\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            message import failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n    V2ImportResponseList:\n      type: array\n      items:\n        $ref: '#/components/schemas/V2ImportResponse'\n    V2ImportResponse:\n      type: object\n      properties:\n        messageId:\n          type: string\n          description: |\n            If the message was successfully imported then the message ID in the system\n            of the newly created message.\n        originatingSystemId:\n          type: string\n          description: The ID of the system through which the message was originally sent.\n        originalMessageId:\n          type: string\n          description: The ID of the message in the original system.\n        diagnostic:\n          type: string\n          description: |\n            A diagnostic message containing an error message in the event that the\n            message import failed. May also be present in the case of a successful\n            call if there is useful narrative to return.\n    BaseMessage:\n      required:\n        - messageType\n        - streamId\n        - timestamp\n      type: object\n      properties:\n        id:\n          type: string\n          description: The messageId is assigned by the ingestor service when a message is sent.\n        timestamp:\n          type: string\n        messageType:\n          type: string\n        streamId:\n          type: string\n      discriminator:\n        propertyName: messageType\n    V1HealthCheckResponse:\n      type: object\n      properties:\n        podConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to the Pod\n        podConnectivityError:\n          type: string\n          description: Error details in case of no Pod connectivity\n        keyManagerConnectivity:\n          type: boolean\n          description: Indicates whether the Agent server can connect to the Key Manager\n        keyManagerConnectivityError:\n          type: string\n          description: Error details in case of no Key Manager connectivity\n        version:\n          type: string\n          description: The version number of the Agent server\n    Message:\n      description: A representation of a message sent by a user of Symphony.\n      allOf:\n        - $ref: '#/components/schemas/BaseMessage'\n        - required:\n            - fromUserId\n            - message\n          type: object\n          properties:\n            message:\n              type: string\n              description: Message text in MessageML\n              format: MessageML\n            fromUserId:\n              type: integer\n              description: the Symphony userId of the user who sent the message. This\n                will be populated by the server (and actually ignored if included when\n                sending a message).\n              format: int64\n    MessageList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Message'\n    Datafeed:\n      type: object\n      properties:\n        id:\n          type: string\n",
			"canonicalURL": "/github.com/finos/symphony-api-spec@b52eb2a8cb5242bef5f0d24517f364bfcc39328f/-/blob/agent/agent-api-public-deprecated.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/finos/symphony-api-spec/blob/b52eb2a8cb5242bef5f0d24517f364bfcc39328f/agent/agent-api-public-deprecated.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: anonymous type name conflict: \"MessageListHeaders\"",
	"NotImplemented": [
		"complex application/octet-stream"
	]
}