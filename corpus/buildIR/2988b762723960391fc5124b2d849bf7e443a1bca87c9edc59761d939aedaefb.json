{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcSpark/carp"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "docs/bin/openapi.json",
			"byteSize": 36426,
			"content": "{\n    \"components\": {\n        \"examples\": {},\n        \"headers\": {},\n        \"parameters\": {},\n        \"requestBodies\": {},\n        \"responses\": {},\n        \"schemas\": {\n            \"CredentialHex\": {\n                \"type\": \"string\",\n                \"example\": \"8200581c8baf48931c5187cd59fde553f4e7da2e1a2aa9202ec6e67815cb3f8a\",\n                \"pattern\": \"[0-9a-fA-F]{64}\"\n            },\n            \"Bech32FullAddress\": {\n                \"type\": \"string\",\n                \"example\": \"stake1ux236z4g4r4pztn5v69txyj2yq6a3esq5x4p4stxydra7zsnv25ue\"\n            },\n            \"Bech32Credential\": {\n                \"type\": \"string\",\n                \"example\": \"script1ffv7hkf75573h0mlsg3jc7cpyuq2pn6tk7xc08dtkx3q5ah7h47\"\n            },\n            \"Base58Address\": {\n                \"type\": \"string\",\n                \"example\": \"Ae2tdPwUPEZHu3NZa6kCwet2msq4xrBXKHBDvogFKwMsF18Jca8JHLRBas7\"\n            },\n            \"Address\": {\n                \"anyOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/CredentialHex\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Bech32FullAddress\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Bech32Credential\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Base58Address\"\n                    }\n                ],\n                \"example\": \"addr1qxzksn47upfu4fwqfmxx29rn5znlkw3ag98ul8rgndwm79aaql88xw6ez84k2ln6lawnt79sdqh7qwq0wcs672auktmsawshfe\",\n                \"description\": \"Supported types:\\n- Credential hex (8200581c...) - note this is not a keyhash (it contains a credential type prefix)\\n- Bech32 full address (`addr` / `addr_test` / `stake` / `stake_test`)\\n- Bech32 credentials ( `addr_vkh`, `script`, etc.) - this is the recommended approach\\n- Legacy Byron format (Ae2, Dd, etc.)\\n\\nNote: we recommend avoiding to query base addresses history using bech32\\nAs Cardano UTXO spendability depends only on the payment credential and not the full base address\\nThe result will also miss transactions that are only related to the payment key of the address\\nex: the payment key is used in a multisig\\n\\nNote: using two different address representations in the same query will hurt performance (ex: addr1 and addr_vkh1)\\nThis because under-the-hood this will run multiple independent SQL queries for the different formats\\n\\nWarning: querying reward bech32 addresses is equivalent to querying the stake credential inside it\\nThis may return more results than expected (ex: a multisig containing the staking key of the wallet)\"\n            },\n            \"AddressUsedResponse\": {\n                \"properties\": {\n                    \"addresses\": {\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Address\"\n                        },\n                        \"type\": \"array\"\n                    }\n                },\n                \"required\": [\n                    \"addresses\"\n                ],\n                \"type\": \"object\"\n            },\n            \"BlockTxPair\": {\n                \"properties\": {\n                    \"tx\": {\n                        \"type\": \"string\",\n                        \"description\": \"tx hash\",\n                        \"example\": \"336d520af58ff440b2f20210ddb5ef5b2c035e0ec7ec258bae4b519a87fa1696\",\n                        \"pattern\": \"[0-9a-fA-F]{64}\"\n                    },\n                    \"block\": {\n                        \"type\": \"string\",\n                        \"description\": \"block hash\",\n                        \"example\": \"2548ad5d0d9d33d50ab43151f574474454017a733e307229fa509c4987ca9782\",\n                        \"pattern\": \"[0-9a-fA-F]{64}\"\n                    }\n                },\n                \"required\": [\n                    \"tx\",\n                    \"block\"\n                ],\n                \"type\": \"object\"\n            },\n            \"AfterBlockPagination\": {\n                \"properties\": {\n                    \"after\": {\n                        \"$ref\": \"#/components/schemas/BlockTxPair\",\n                        \"description\": \"Omitting \\\"after\\\" means you query starting from the genesis block.\\n\\nNote: the reason you have to specify both a tx hash AND a block hash in the \\\"after\\\" for pagination\\nis because this is the only way to make sure your pagination doesn't get affected by rollbacks.\\nex: a rollback could cause a tx to be removed from one block and appear in a totally different block.\\nSpecifying the block hash as well allows making sure you're paginating on the right tx in the right block.\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"UntilBlockPagination\": {\n                \"properties\": {\n                    \"untilBlock\": {\n                        \"type\": \"string\",\n                        \"description\": \"block hash - inclusive\",\n                        \"example\": \"cf8c63a909d91776e27f7d05457e823a9dba606a7ab499ac435e7904ee70d7c8\",\n                        \"pattern\": \"[0-9a-fA-F]{64}\"\n                    }\n                },\n                \"required\": [\n                    \"untilBlock\"\n                ],\n                \"type\": \"object\"\n            },\n            \"Pagination\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/AfterBlockPagination\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/UntilBlockPagination\"\n                    }\n                ]\n            },\n            \"AddressUsedRequest\": {\n                \"allOf\": [\n                    {\n                        \"properties\": {\n                            \"addresses\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/Address\"\n                                },\n                                \"type\": \"array\"\n                            }\n                        },\n                        \"required\": [\n                            \"addresses\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Pagination\"\n                    }\n                ]\n            },\n            \"ErrorShape\": {\n                \"properties\": {\n                    \"reason\": {\n                        \"type\": \"string\"\n                    },\n                    \"code\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\"\n                    }\n                },\n                \"required\": [\n                    \"reason\",\n                    \"code\"\n                ],\n                \"type\": \"object\"\n            },\n            \"BlockSubset\": {\n                \"properties\": {\n                    \"slot\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\",\n                        \"example\": 4924800\n                    },\n                    \"epoch\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\",\n                        \"example\": 209\n                    },\n                    \"height\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\",\n                        \"example\": 4512067\n                    },\n                    \"hash\": {\n                        \"type\": \"string\",\n                        \"description\": \"[0-9a-fA-F]{64}\",\n                        \"example\": \"cf8c63a909d91776e27f7d05457e823a9dba606a7ab499ac435e7904ee70d7c8\"\n                    },\n                    \"era\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\",\n                        \"example\": 1\n                    }\n                },\n                \"required\": [\n                    \"slot\",\n                    \"epoch\",\n                    \"height\",\n                    \"hash\",\n                    \"era\"\n                ],\n                \"type\": \"object\"\n            },\n            \"BlockLatestResponse\": {\n                \"properties\": {\n                    \"block\": {\n                        \"$ref\": \"#/components/schemas/BlockSubset\"\n                    }\n                },\n                \"required\": [\n                    \"block\"\n                ],\n                \"type\": \"object\"\n            },\n            \"BlockLatestRequest\": {\n                \"properties\": {\n                    \"offset\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\",\n                        \"description\": \"Note: an offset of -1 is treated the same as an offset of +1\\n\\nIt's usually best to avoid pagination on the latest block as in Cardano, small rollbacks of 1~2 block are very frequent and expected (read Ouroboros for why)\\nThat means that using this block for pagination will often lead to your pagination being invalidated by a rollback\\nTo avoid this, you can pass an `offset` from the tip for more stable pagination\"\n                    }\n                },\n                \"required\": [\n                    \"offset\"\n                ],\n                \"type\": \"object\"\n            },\n            \"PageInfo\": {\n                \"properties\": {\n                    \"pageInfo\": {\n                        \"properties\": {\n                            \"hasNextPage\": {\n                                \"type\": \"boolean\",\n                                \"example\": false\n                            }\n                        },\n                        \"required\": [\n                            \"hasNextPage\"\n                        ],\n                        \"type\": \"object\"\n                    }\n                },\n                \"required\": [\n                    \"pageInfo\"\n                ],\n                \"type\": \"object\"\n            },\n            \"CredentialAddressResponse\": {\n                \"allOf\": [\n                    {\n                        \"properties\": {\n                            \"addresses\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/Bech32FullAddress\"\n                                },\n                                \"type\": \"array\"\n                            }\n                        },\n                        \"required\": [\n                            \"addresses\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/PageInfo\"\n                    }\n                ]\n            },\n            \"Credential\": {\n                \"anyOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/CredentialHex\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Bech32Credential\"\n                    }\n                ]\n            },\n            \"CredentialAddressRequest\": {\n                \"allOf\": [\n                    {\n                        \"properties\": {\n                            \"after\": {\n                                \"$ref\": \"#/components/schemas/Bech32FullAddress\"\n                            },\n                            \"credentials\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/Credential\"\n                                },\n                                \"type\": \"array\"\n                            }\n                        },\n                        \"required\": [\n                            \"credentials\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/UntilBlockPagination\"\n                    }\n                ]\n            },\n            \"Cip25Metadata\": {\n                \"type\": \"string\",\n                \"example\": \"a365636f6c6f72672330303030383065696d616765783a697066733a2f2f697066732f516d534b593167317a5375506b3536635869324b38524e766961526b44485633505a756a7474663755676b343379646e616d656a4265727279204e617679\",\n                \"pattern\": \"[0-9a-fA-F]*\"\n            },\n            \"Cip25Response\": {\n                \"properties\": {\n                    \"cip25\": {\n                        \"properties\": {},\n                        \"additionalProperties\": {\n                            \"properties\": {},\n                            \"additionalProperties\": {\n                                \"$ref\": \"#/components/schemas/Cip25Metadata\"\n                            },\n                            \"type\": \"object\"\n                        },\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"b863bc7369f46136ac1048adb2fa7dae3af944c3bbb2be2f216a8d4f\": {\n                                \"42657272794e617679\": \"a365636f6c6f72672330303030383065696d616765783a697066733a2f2f697066732f516d534b593167317a5375506b3536635869324b38524e766961526b44485633505a756a7474663755676b343379646e616d656a4265727279204e617679\"\n                            }\n                        }\n                    }\n                },\n                \"required\": [\n                    \"cip25\"\n                ],\n                \"type\": \"object\"\n            },\n            \"AssetName\": {\n                \"type\": \"string\",\n                \"example\": \"42657272794e617679\",\n                \"pattern\": \"[0-9a-fA-F]{0,64}\"\n            },\n            \"PolicyIdAssetMapType\": {\n                \"properties\": {\n                    \"assets\": {\n                        \"properties\": {},\n                        \"additionalProperties\": {\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/AssetName\"\n                            },\n                            \"type\": \"array\"\n                        },\n                        \"type\": \"object\",\n                        \"example\": {\n                            \"b863bc7369f46136ac1048adb2fa7dae3af944c3bbb2be2f216a8d4f\": [\n                                \"42657272794e617679\"\n                            ]\n                        }\n                    }\n                },\n                \"required\": [\n                    \"assets\"\n                ],\n                \"type\": \"object\"\n            },\n            \"BlockInfo\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/BlockSubset\"\n                    },\n                    {\n                        \"properties\": {\n                            \"isValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"indexInBlock\": {\n                                \"type\": \"number\",\n                                \"format\": \"double\",\n                                \"description\": \"index of tx in block\"\n                            }\n                        },\n                        \"required\": [\n                            \"isValid\",\n                            \"indexInBlock\"\n                        ],\n                        \"type\": \"object\"\n                    }\n                ]\n            },\n            \"TransactionInfo\": {\n                \"properties\": {\n                    \"payload\": {\n                        \"type\": \"string\",\n                        \"description\": \"cbor-encoded transaction\",\n                        \"example\": \"84a500818258209cb4f8c2eecccc9f1e13768046f37ef56dcb5a4dc44f58907fe4ae21d7cf621d020181825839019cb581f4337a6142e477af6e00fe41b1fc4a5944a575681b8499a3c0bd07ce733b5911eb657e7aff5d35f8b0682fe0380f7621af2bbcb2f71b0000000586321393021a0002a389031a004b418c048183028200581cbd07ce733b5911eb657e7aff5d35f8b0682fe0380f7621af2bbcb2f7581c53215c471b7ac752e3ddf8f2c4c1e6ed111857bfaa675d5e31ce8bcea1008282582073e584cda9fe483fbefb81c251e616018a2b493ef56820f0095b63adede54ff758404f13df42ef1684a3fd55255d8368c9ecbd15b55e2761a2991cc4f401a753c16d6da1da158e84b87b4de9715af7d9adc0d79a7c1f2c3097228e02b20be4616a0c82582066c606974819f457ceface78ee3c4d181a84ca9927a3cfc92ef8c0b6dd4576e8584014ae9ee9ed5eb5700b6c5ac270543671f5d4f943d4726f4614dc061174ee29db44b9e7fc58e6c98c13fad8594f2633c5ec70a9a87f5cbf130308a42edb553001f5f6\",\n                        \"pattern\": \"[0-9a-fA-F]*\"\n                    },\n                    \"hash\": {\n                        \"type\": \"string\",\n                        \"description\": \"Strictly speaking, you can calculate this by hashing the payload\\nIt's just provided for convenience\",\n                        \"example\": \"011b86557367525891331b4bb985545120efc335b606d6a1c0d5a35fb330f421\",\n                        \"pattern\": \"[0-9a-fA-F]{64}\"\n                    }\n                },\n                \"required\": [\n                    \"payload\",\n                    \"hash\"\n                ],\n                \"type\": \"object\"\n            },\n            \"TxAndBlockInfo\": {\n                \"properties\": {\n                    \"transaction\": {\n                        \"$ref\": \"#/components/schemas/TransactionInfo\"\n                    },\n                    \"block\": {\n                        \"$ref\": \"#/components/schemas/BlockInfo\"\n                    }\n                },\n                \"required\": [\n                    \"transaction\",\n                    \"block\"\n                ],\n                \"type\": \"object\"\n            },\n            \"TransactionHistoryResponse\": {\n                \"properties\": {\n                    \"transactions\": {\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/TxAndBlockInfo\"\n                        },\n                        \"type\": \"array\"\n                    }\n                },\n                \"required\": [\n                    \"transactions\"\n                ],\n                \"type\": \"object\"\n            },\n            \"RelationFilter\": {\n                \"type\": \"number\",\n                \"format\": \"double\",\n                \"example\": 255,\n                \"description\": \"Filter which uses of the address are considered relevant for the query.\\n\\nThis is a bitmask, so you can combine multiple options\\nex: `RelationFilterType.Input \u0026 RelationFilterType.Output`\\n\\nNote: relations only apply to credentials and not to full bech32 addresses\",\n                \"pattern\": \"([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\"\n            },\n            \"TransactionHistoryRequest\": {\n                \"allOf\": [\n                    {\n                        \"properties\": {\n                            \"limit\": {\n                                \"type\": \"number\",\n                                \"format\": \"double\",\n                                \"description\": \"Defaults to `ADDRESS_LIMIT.RESPONSE`\"\n                            },\n                            \"relationFilter\": {\n                                \"$ref\": \"#/components/schemas/RelationFilter\",\n                                \"description\": \"Defaults to `RelationFilterType.NO_FILTER`\"\n                            },\n                            \"addresses\": {\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/Address\"\n                                },\n                                \"type\": \"array\"\n                            }\n                        },\n                        \"required\": [\n                            \"addresses\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/Pagination\"\n                    }\n                ]\n            },\n            \"UtxoPointer\": {\n                \"properties\": {\n                    \"index\": {\n                        \"type\": \"number\",\n                        \"format\": \"double\"\n                    },\n                    \"txHash\": {\n                        \"type\": \"string\",\n                        \"example\": \"011b86557367525891331b4bb985545120efc335b606d6a1c0d5a35fb330f421\",\n                        \"pattern\": \"[0-9a-fA-F]{64}\"\n                    }\n                },\n                \"required\": [\n                    \"index\",\n                    \"txHash\"\n                ],\n                \"type\": \"object\"\n            },\n            \"UtxoAndBlockInfo\": {\n                \"properties\": {\n                    \"utxo\": {\n                        \"allOf\": [\n                            {\n                                \"$ref\": \"#/components/schemas/UtxoPointer\"\n                            },\n                            {\n                                \"properties\": {\n                                    \"payload\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"825839019cb581f4337a6142e477af6e00fe41b1fc4a5944a575681b8499a3c0bd07ce733b5911eb657e7aff5d35f8b0682fe0380f7621af2bbcb2f71b0000000586321393\",\n                                        \"pattern\": \"[0-9a-fA-F]*\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"payload\"\n                                ],\n                                \"type\": \"object\"\n                            }\n                        ]\n                    },\n                    \"block\": {\n                        \"$ref\": \"#/components/schemas/BlockInfo\"\n                    }\n                },\n                \"required\": [\n                    \"utxo\",\n                    \"block\"\n                ],\n                \"type\": \"object\"\n            },\n            \"TransactionOutputResponse\": {\n                \"properties\": {\n                    \"utxos\": {\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/UtxoAndBlockInfo\"\n                        },\n                        \"type\": \"array\"\n                    }\n                },\n                \"required\": [\n                    \"utxos\"\n                ],\n                \"type\": \"object\"\n            },\n            \"TransactionOutputRequest\": {\n                \"properties\": {\n                    \"utxoPointers\": {\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/UtxoPointer\"\n                        },\n                        \"type\": \"array\"\n                    }\n                },\n                \"required\": [\n                    \"utxoPointers\"\n                ],\n                \"type\": \"object\"\n            }\n        },\n        \"securitySchemes\": {}\n    },\n    \"info\": {\n        \"title\": \"carp\",\n        \"version\": \"1.0.0\",\n        \"description\": \"API for the Postgres database generated by Carp\",\n        \"license\": {\n            \"name\": \"MIT\"\n        },\n        \"contact\": {\n            \"name\": \"https://github.com/dcSpark\"\n        }\n    },\n    \"openapi\": \"3.0.0\",\n    \"paths\": {\n        \"/address/used\": {\n            \"post\": {\n                \"operationId\": \"AddressUsed\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/AddressUsedResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"409\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Ordered lexicographically (order is not maintained)\\n\\nWarning: the pagination on this endpoint is NOT whether or not an address was used during this block interval,\\nbut rather whether or not the address was first used within this interval.\\n\\nNote: this endpoint only returns addresses that are in a block. Use another tool to see mempool information\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/AddressUsedRequest\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/block/latest\": {\n            \"post\": {\n                \"operationId\": \"BlockLatest\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/BlockLatestResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"409\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Get the latest block. Useful for checking synchronization process and pagination\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/BlockLatestRequest\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/credential/address\": {\n            \"post\": {\n                \"operationId\": \"AddressesForCredential\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/CredentialAddressResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Ordered by the first time the address was seen on-chain\\n\\nNote: this endpoint only returns addresses that are in a block. Use another tool to see mempool information\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/CredentialAddressRequest\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/metadata/nft\": {\n            \"post\": {\n                \"operationId\": \"MetadataNft\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Cip25Response\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Gets the CIP25 metadata for given \u003cpolicy, asset_name\u003e pairs\\n\\nNote: policy IDs and asset names MUST be in hex strings. Do not use UTF8 asset names.\\n\\nNote: This endpoint returns the NFT metadata as a CBOR object and NOT JSON.\\nYou may expect a JSON object, but actually Cardano has no concept of on-chain JSON.\\nIn fact, on-chain JSON is not even possible!\\nInstead, Cardano stores metadata as CBOR which can then be converted to JSON\\nThe conversion of CBOR to JSON is project-dependent, and so Carp instead returns the raw cbor\\nIt's up to you to choose how you want to do the JSON conversion.\\nThe common case is handled inside the Carp client library.\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/PolicyIdAssetMapType\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/transaction/history\": {\n            \"post\": {\n                \"operationId\": \"TransactionHistory\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/TransactionHistoryResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"409\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Ordered by `\u003cblock.height, transaction.tx_index\u003e`\\n\\nNote: this endpoint only returns txs that are in a block. Use another tool to see mempool for txs not in a block\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/TransactionHistoryRequest\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/transaction/output\": {\n            \"post\": {\n                \"operationId\": \"TransactionOutput\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/TransactionOutputResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ErrorShape\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Get the outputs for given `\u003ctx hash, output index\u003e` pairs.\\n\\nThis endpoint will return both used AND unused outputs\\n\\nNote: this endpoint only returns txs that are in a block. Use another tool to see mempool for txs not in a block\",\n                \"security\": [],\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/TransactionOutputRequest\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"servers\": [\n        {\n            \"url\": \"/\"\n        }\n    ]\n}\n",
			"canonicalURL": "/github.com/dcSpark/carp@405bb373469ab7e3d906e7ac9ffb00493eb9d559/-/blob/docs/bin/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/dcSpark/carp/blob/405bb373469ab7e3d906e7ac9ffb00493eb9d559/docs/bin/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/transaction/history\": post: requestBody: contents: application/json: generate schema: allOf: schema type mismatch: object and "
}