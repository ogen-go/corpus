{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/penguin-judge/PenguinJudge"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "backend/penguin_judge/schema.yaml",
			"byteSize": 24969,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: PenguinJudge API Specification\n  version: \"0.0.1\"\nsecurity:\n  - {}\n  - BearerAuth: []\n  - ApiToken: []\n  - CookieToken: []\npaths:\n  /auth:\n    post:\n      operationId: authenticate\n      security: []\n      summary: Authenticate user with id/password to get token.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Login\"\n      responses:\n        '200':\n          description: Responses token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n    delete:\n      operationId: deleteToken\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      summary: delete/revoke token\n      responses:\n        '204':\n          description: deleted\n  /user:\n    get:\n      operationId: getCurrentUser\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      summary: Gets currently authenticated user info\n      responses:\n        '200':\n          description: Responses authenticated user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  /users:\n    post:\n      operationId: registerUser\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserRegistration\"\n      responses:\n        '201':\n          description: user registration successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n  /users/{user_id}:\n    get:\n      operationId: getUser\n      parameters:\n        - $ref: \"#/components/parameters/UserID\"\n      responses:\n        '200':\n          description: Responses user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        '404':\n          description: not found\n    patch:\n      operationId: updateUser\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/UserID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserUpdate\"\n      responses:\n        '200':\n          description: Responses user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        '404':\n          description: not found\n  /environments:\n    get:\n      operationId: listEnvironments\n      summary: List code compile/execute environments\n      responses:\n        '200':\n          description: Responses environment list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environments\"\n    post:\n      operationId: registerEnvironment\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EnvironmentCreation\"\n      responses:\n        '201':\n          description: registered environment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n  /environments/{environment_id}:\n    patch:\n      operationId: updateEnvironment\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/EnvironmentID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Environment\"\n      responses:\n        '200':\n          description: updated environment info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        '404':\n          description: not found\n    delete:\n      operationId: deleteEnvironment\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/EnvironmentID\"\n      responses:\n        '204':\n          description: deleted\n        '404':\n          description: not found\n  /contests:\n    get:\n      operationId: listContests\n      parameters:\n        - $ref: \"#/components/parameters/PageParams\"\n        - $ref: \"#/components/parameters/PerPageParams\"\n        - $ref: \"#/components/parameters/ContestStatusFilter\"\n      responses:\n        '200':\n          description: Responses contest list\n          headers:\n            X-Total:\n              $ref: \"#/components/headers/TotalItemsHeader\"\n            X-Total-Pages:\n              $ref: \"#/components/headers/TotalPagesHeader\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contests\"\n    post:\n      operationId: createContest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ContestCreation\"\n      responses:\n        '201':\n          description: 作成したコンテスト情報\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contest\"\n  /contests/{contest_id}:\n    get:\n      operationId: getContest\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      responses:\n        '200':\n          description: Responses specific contest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contest\"\n        '404':\n          description: not found\n    patch:\n      operationId: updateContest\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Contest\"\n      responses:\n        '201':\n          description: 作成したコンテスト情報\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contest\"\n        '404':\n          description: not found\n  /contests/{contest_id}/submissions:\n    get:\n      operationId: listSubmissions\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/PageParams\"\n        - $ref: \"#/components/parameters/PerPageParams\"\n        - $ref: \"#/components/parameters/ProblemFilter\"\n        - $ref: \"#/components/parameters/EnvironmentFilter\"\n        - $ref: \"#/components/parameters/JudgeStatusFilter\"\n        - $ref: \"#/components/parameters/UserNameFilter\"\n        - $ref: \"#/components/parameters/SubmissionSortKey\"\n      responses:\n        '200':\n          description: Responses submissions\n          headers:\n            X-Total:\n              $ref: \"#/components/headers/TotalItemsHeader\"\n            X-Total-Pages:\n              $ref: \"#/components/headers/TotalPagesHeader\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submissions\"\n        '404':\n          description: not found\n    post:\n      operationId: postSubmission\n      description: \"解答を投稿する\"\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Submission\"\n      responses:\n        '201':\n          description: Responses submission info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubmissionSummary\"\n        '403':\n          description: 開催中はログインが必要\n        '404':\n          description: not found contest_id or problem_id\n  /contests/{contest_id}/submissions/{submission_id}:\n    get:\n      operationId: getSubmission\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/SubmissionID\"\n      responses:\n        '200':\n          description: Responses submission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        '404':\n          description: not found content_id or problem_id. またはコンテスト開始前\n  /contests/{contest_id}/problems:\n    get:\n      operationId: listProblems\n      description: コンテストの問題一覧を取得\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      responses:\n        '200':\n          description: 問題一覧\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Problems\"\n        '403':\n          description: コンテスト開始前\n        '404':\n          description: not found\n    post:\n      operationId: createProblem\n      description: コンテストの問題を作成する\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProblemCreation\"\n      responses:\n        '201':\n          description: 問題詳細\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Problem\"\n  /contests/{contest_id}/problems/{problem_id}:\n    get:\n      operationId: getProblem\n      description: コンテストの問題の詳細情報を取得\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      responses:\n        '200':\n          description: 問題の詳細情報\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Problem\"\n        '404':\n          description: not found. またはコンテスト開始前\n    patch:\n      operationId: updateProblem\n      description: コンテストの問題を修正する\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Problem\"\n      responses:\n        '200':\n          description: 修正後の問題情報\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Problem\"\n        '404':\n          description: not found\n    delete:\n      operationId: deleteProblem\n      description: コンテストの問題を削除する\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      responses:\n        '204':\n          description: 削除成功\n  /contests/{contest_id}/problems/{problem_id}/tests:\n    get:\n      operationId: listTests\n      description: 問題のテスト用入出力データセットの一覧を返却します\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      responses:\n        '200':\n          description: 一覧\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    put:\n      operationId: replaceTestDataset\n      description: 問題のテスト用入出力データセットを置き換えます。zipで圧縮し、ファイル名はテスト名、拡張子.inが入力、.outが出力のデータとなるようにします\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      responses:\n        '200':\n          description: 一覧\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /contests/{contest_id}/problems/{problem_id}/tests/{test_id}/in:\n    get:\n      operationId: getTestInData\n      description: 問題のテスト用入力データを返却します\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n        - $ref: \"#/components/parameters/TestID\"\n      responses:\n        '200':\n          description: データ\n          content:\n            '*/*': {}\n  /contests/{contest_id}/problems/{problem_id}/tests/{test_id}/out:\n    get:\n      operationId: getTestOutData\n      description: 問題のテスト用出力データを返却します\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n        - $ref: \"#/components/parameters/TestID\"\n      responses:\n        '200':\n          description: データ\n          content:\n            '*/*': {}\n  /contests/{contest_id}/problems/{problem_id}/rejudge:\n    post:\n      operationId: rejudge\n      description: リジャッジします\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n        - $ref: \"#/components/parameters/ProblemID\"\n      responses:\n        '200':\n          description: リジャッジ開始\n  /contests/{contest_id}/rankings:\n    get:\n      operationId: listRankings\n      description: コンテストの順位表を取得する\n      parameters:\n        - $ref: \"#/components/parameters/ContestID\"\n      responses:\n        '200':\n          description: 順位表\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rankings\"\n        '403':\n          description: コンテスト開催前です\n        '404':\n          description: not found\n  /status:\n    get:\n      operationId: getStatus\n      description: 状態を取得(管理者のみ)\n      security:\n        - BearerAuth: []\n        - ApiToken: []\n        - CookieToken: []\n      responses:\n        '200':\n          description: 状態\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\ncomponents:\n  schemas:\n    Token:\n      type: object\n      properties:\n        token:\n          type: string\n        expires_in:\n          type: integer\n    UserID:\n      type: integer\n    LoginID:\n      type: string\n      minLength: 3\n      maxLength: 256\n    Password:\n      type: string\n      minLength: 6\n      maxLength: 256\n    UserName:\n      type: string\n      minLength: 3\n      maxLength: 256\n    Login:\n      type: object\n      required:\n        - login_id\n        - password\n      properties:\n        login_id:\n          $ref: \"#/components/schemas/LoginID\"\n        password:\n          $ref: \"#/components/schemas/Password\"\n    User:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/UserID\"\n        name:\n          $ref: \"#/components/schemas/UserName\"\n        created:\n          type: string\n          format: date-time\n        admin:\n          type: boolean\n    Users:\n      type: array\n      items:\n        $ref: \"#/components/schemas/User\"\n    UserRegistration:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - $ref: \"#/components/schemas/Login\"\n        - required:\n          - name\n    UserUpdate:\n      type: object\n      properties:\n        login_id:\n          $ref: \"#/components/schemas/LoginID\"\n        old_password:\n          $ref: \"#/components/schemas/Password\"\n        new_password:\n          $ref: \"#/components/schemas/Password\"\n        name:\n          $ref: \"#/components/schemas/UserName\"\n    Environment:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        active:\n          type: boolean\n          description: 新規に投稿可能な言語かどうか\n        published:\n          type: boolean\n          description: 管理者のみ参照可能\n        compile_image_name:\n          type: string\n          description: 管理者のみ参照可能\n        test_image_name:\n          type: string\n          description: 管理者のみ参照可能\n    EnvironmentCreation:\n      allOf:\n        - $ref: \"#/components/schemas/Environment\"\n        - required:\n            - name\n            - test_image_name\n    Environments:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Environment\"\n    ContestProblemID:\n      type: string\n      pattern: '[^\\~]\\w*'\n    ContestSummary:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ContestProblemID\"\n        title:\n          type: string\n        start_time:\n          type: string\n          format: date-time\n        end_time:\n          type: string\n          format: date-time\n        penalty:\n          type: number\n        published:\n          type: boolean\n    Contests:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ContestSummary\"\n    Contest:\n      allOf:\n        - $ref: \"#/components/schemas/ContestSummary\"\n        - properties:\n            description:\n              type: string\n            problems:\n              $ref: \"#/components/schemas/Problems\"\n    ContestCreation:\n      allOf:\n        - $ref: \"#/components/schemas/Contest\"\n        - required:\n          - id\n          - title\n          - start_time\n          - end_time\n          - description\n    Problem:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ContestProblemID\"\n        contest_id:\n          $ref: \"#/components/schemas/ContestProblemID\"\n        title:\n          type: string\n        time_limit:\n          description: \"[sec]\"\n          type: integer\n        memory_limit:\n          description: \"[MiB]\"\n          type: integer\n        description:\n          type: string\n        score:\n          type: integer\n    ProblemCreation:\n      allOf:\n        - $ref: \"#/components/schemas/Problem\"\n        - required:\n          - id\n          - title\n          - time_limit\n          - description\n          - score\n    Problems:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Problem\"\n    SubmissionSummary:\n      type: object\n      properties:\n        contest_id:\n          type: string\n        problem_id:\n          type: string\n        id:\n          type: integer\n        user_id:\n          $ref: \"#/components/schemas/UserID\"\n        user_name:\n          $ref: \"#/components/schemas/UserName\"\n        environment_id:\n          type: integer\n        status:\n          $ref: \"#/components/schemas/JudgeStatus\"\n        code_bytes:\n          type: integer\n          nullable: true\n        max_time:\n          type: number\n          nullable: true\n        max_memory:\n          type: integer\n          nullable: true\n        created:\n          type: string\n          format: date-time\n    Submissions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/SubmissionSummary\"\n    Submission:\n      allOf:\n        - $ref: \"#/components/schemas/SubmissionSummary\"\n        - properties:\n            code:\n              type: string\n            tests:\n              $ref: \"#/components/schemas/TestResults\"\n          required:\n            - problem_id\n            - environment_id\n            - code\n    Ranking:\n      type: object\n      properties:\n        ranking:\n          type: integer\n        user_id:\n          $ref: \"#/components/schemas/UserID\"\n        user_name:\n          $ref: \"#/components/schemas/UserName\"\n        user_name:\n          $ref: \"#/components/schemas/UserName\"\n        score:\n          type: integer\n        time:\n          type: number\n          format: double\n        penalties:\n          type: integer\n        adjusted_time:\n          description: ペナルティを加算後の所要時間\n          type: number\n          format: double\n        problems:\n          type: object\n          description: keyは問題ID\n          additionalProperties:\n            type: object\n            properties:\n              score:\n                type: integer\n              time:\n                type: number\n                format: double\n              penalties:\n                type: integer\n              pending:\n                description: ジャッジ中(Waiting/Running)の投稿がある場合はTrueとなる\n                type: boolean\n    Rankings:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Ranking\"\n    JudgeStatus:\n      type: string\n      enum:\n        - Waiting\n        - Running\n        - Accepted\n        - CompilationError\n        - RuntimeError\n        - WrongAnswer\n        - MemoryLimitExceeded\n        - TimeLimitExceeded\n        - OutputLimitExceeded\n        - InternalError\n    TestResult:\n      type: object\n      properties:\n        id:\n          type: string\n        status:\n          $ref: \"#/components/schemas/JudgeStatus\"\n        time:\n          type: number\n          format: double\n          description: コンテスト後にのみ得られます\n        memory:\n          type: number\n          description: コンテスト後にのみ得られます\n    TestResults:\n      type: array\n      items:\n        $ref: \"#/components/schemas/TestResult\"\n    Status:\n      type: object\n      properties:\n        queued:\n          type: integer\n          description: ジャッジキューに積まれているタスクの数\n        workers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/WorkerStatus\"\n    WorkerStatus:\n      type: object\n      properties:\n        hostname:\n          type: string\n        pid:\n          type: integer\n        startup_time:\n          type: string\n          format: date-time\n        last_contact:\n          type: string\n          format: date-time\n        processed:\n          type: integer\n        errors:\n          type: integer\n  parameters:\n    UserID:\n      name: user_id\n      in: path\n      required: true\n      schema:\n        $ref: \"#/components/schemas/UserID\"\n    ContestID:\n      name: contest_id\n      in: path\n      required: true\n      schema:\n        type: string\n    ProblemID:\n      name: problem_id\n      in: path\n      required: true\n      schema:\n        type: string\n    SubmissionID:\n      name: submission_id\n      in: path\n      required: true\n      schema:\n        type: integer\n    TestID:\n      name: test_id\n      in: path\n      required: true\n      schema:\n        type: string\n    EnvironmentID:\n      name: environment_id\n      in: path\n      required: true\n      schema:\n        type: integer\n    PageParams:\n      name: page\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        default: 1\n    PerPageParams:\n      name: per_page\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        default: 20\n        maximum: 100\n    ContestStatusFilter:\n      name: status\n      in: query\n      schema:\n        type: string\n        enum:\n          - scheduled\n          - running\n          - finished\n    ProblemFilter:\n      name: problem_id\n      in: query\n      schema:\n        type: string\n    EnvironmentFilter:\n      name: environment_id\n      in: query\n      schema:\n        type: integer\n    JudgeStatusFilter:\n      name: status\n      in: query\n      schema:\n        $ref: \"#/components/schemas/JudgeStatus\"\n    UserNameFilter:\n      name: user_name\n      in: query\n      schema:\n        type: string\n    SubmissionSortKey:\n      name: sort\n      in: query\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - created\n            - -created\n            - code_bytes\n            - -code_bytes\n            - max_time\n            - -max_time\n            - max_memory\n            - -max_memory\n  headers:\n    TotalItemsHeader:\n      schema:\n        type: integer\n    TotalPagesHeader:\n      schema:\n        type: integer\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n    ApiToken:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\n    CookieToken:\n      type: apiKey\n      in: cookie\n      name: AuthToken\n"
		}
	},
	"Error": "buildIR: make ir: path \"/contests/{contest_id}/problems\": post: requestBody: contents: application/json: generate schema: allOf: schema type mismatch: object and ",
	"NotImplemented": [
		"cookie security"
	]
}