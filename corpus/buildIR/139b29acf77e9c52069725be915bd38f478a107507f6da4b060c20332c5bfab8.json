{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/sakari/openapi.yaml",
			"byteSize": 79666,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n- description: Sakari Production\n  url: https://api.sakari.io/v1\ninfo:\n  x-ballerina-display:\n    label: Sakari\n    iconPath: \"icon.png\"\n  description: \u003e\n    This is a generated connector from [Sakari](https://sakari.io/) OpenAPI Specification.\n\n    Sakari provides an advanced platform to drive large scale customized SMS communication\n\n    To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).\n\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n    \n    Please create a [Sakari account](https://api.sakari.io) and obtain tokens following [this guide](https://developer.sakari.io/docs#section/Finding-your-client-id-client-secret-and-account-id)\n\n  version: \"1.0.1\"\n  title: Sakari\n  termsOfService: 'https://sakari.io/terms-service.html'\n  contact:\n    email: support@sakari.io\n    # x-logo:\n    # url: 'https://sakari.io/assets/images/sakari_logo.svg'\ntags:\n- name: authentication\n  description: |\n    Sakari uses OAuth2 for authentication. After you have created an account at [https://hub.sakari.io](https://hub.sakari.io), you can retrieve your client id and secret from the 'Account Details' screen (click on the 'cog' icon in the top right corner and scroll down to API Credentials)\n\n    Using your client id and secret, you can exchange these for a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token))\n\n    The JWT should then be used when accessing any of the core API's. It should be passed in the `Authorization` header.\n\n    For example:\n\n    ``Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImt....``\n\n- name: contacts\n  description: Create, modify or delete contacts\n    # externalDocs:\n    # description: Find out more\n  # url: 'https://sakari.io'\n- name: messages\n  description: Send or track messages to one contact, a group of contacts or your entire address book\n- name: templates\n  description: Define reusable message or web templates\n- name: campaigns\n  description: Define reusable message campaigns with a predefined contact list/filter, template and schedule\n- name: conversations\n  description: Conversations group your message history with each contact into one thread\n- name: tools\n  description: Tools to assist with sending and receiving messages, such as file sharing, translation, etc.\n- name: webhooks\n  description: Webhooks allow your own system to be automatically notified upon certin events, such as a new message received from one of your contacts or a status change notification for your messages\n\npaths:\n  /oauth2/token:\n    post:\n      tags:\n      - authentication\n      summary: Get token for accessing APIs\n      operationId: auth.token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n        description: \"Request payload for obtaining token\"      \n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/oauth2/token \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": \"12345678-1234-1234-1234-123456789012\",\n            \"client_secret\": \"87654321-4321-4321-4321-098765432121\"\n          }'\n      - lang: JavaScript\n        source: |\n          var settings = {\n            \"async\": true,\n            \"crossDomain\": true,\n            \"url\": \"https://api.sakari.io/oauth2/token\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"processData\": false,\n            \"data\": \"{\\n\\t\\\"grant_type\\\": \\\"client_credentials\\\",\\n\\t\\\"client_id\\\": \\\"12345678-1234-1234-1234-123456789012\\\",\\n\\t\\\"client_secret\\\": \\\"87654321-4321-4321-4321-098765432121\\\"\\n}\"\n          }\n\n          $.ajax(settings).done(function (response) {\n            console.log(response);\n          });\n      - lang: PHP\n        source: |\n          \u003c?php\n\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/oauth2/token');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"grant_type\": \"client_credentials\",\n              \"client_id\": \"12345678-1234-1234-123456789012\",\n              \"client_secret\": \"87654321-4321-4321-898765432121\"\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/contacts:\n    get:\n      tags:\n      - contacts\n      summary: Fetch contacts\n      operationId: fetchAllContacts\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/firstNameFilter'\n      - $ref: '#/components/parameters/lastNameFilter'\n      - $ref: '#/components/parameters/mobileFilter'\n      - $ref: '#/components/parameters/emailFilter'\n      - $ref: '#/components/parameters/tagsFilter'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactsResponse'\n        4XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        5XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n    post:\n      tags:\n      - contacts\n      summary: Create contact\n      operationId: createContact\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: mergeStrategy\n        in: query\n        description: Determines how existing contacts with matching mobile numbers are treated\n        required: false\n        schema:\n          type: string\n          # TODO add enum descriptions\n          enum:\n          - append\n          - core\n          - remove\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContactRequest'\n          text/csv:\n            #description: Bulk upload using CSV file\n            schema:\n              type: string\n              example: \u003e\n                country,firstName,lastName,email,mobile,jobTitle,Address,City,State,ZipCode\n                US,Joe,Bloggs,joebloggs@sakari.co,123-456-7890,mover,123 Text Street,San Francisco,CA,12345\n        description: \"Create contact request payload\"      \n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/ContactsResponse'\n                - $ref: '#/components/schemas/ContactUploadResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"firstName\": \"Chris\",\n            \"lastName\": \"Thomson\",\n            \"mobile\": {\n              \"number\": \"+1234567890\",\n              \"country\": \"US\"\n            }\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n            headers: {\n               Authorization: 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body:\n             { firstName: 'Chris',\n               lastName: 'Thomson',\n               mobile: { number: '+1234567890', country: 'US' } },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"firstName\": \"Chris\",\n              \"lastName\": \"Thomson\",\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/contacts/{contactId}:\n    get:\n      tags:\n      - contacts\n      summary: Fetch contact by ID\n      operationId: fetchContact\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: contactId\n        in: path\n        description: ID of contact to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    put:\n      tags:\n      - contacts\n      summary: Updates a contact\n      operationId: contacts.update\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: contactId\n        in: path\n        description: ID of contact\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X PUT \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"firstName\": \"Bob\",\n            \"lastName\": \"Thomson\",\n            \"mobile\": {\n              \"number\": \"+1234567890\",\n              \"country\": \"US\"\n            }\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'PUT',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n            headers:\n             { 'Authorization': 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body:\n             { firstName: 'Bob',\n               lastName: 'Thomson',\n               mobile: { number: '+1234567890', country: 'US' } },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n            $request-\u003esetMethod(HTTP_METH_PUT);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"firstName\": \"Bob\",\n              \"lastName\": \"Thomson\",\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    delete:\n      tags:\n      - contacts\n      summary: Deletes a contact\n      operationId: removeContact\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: contactId\n        in: path\n        description: Contact id to delete\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X DELETE \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'DELETE',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n            headers:\n             { 'Authorization': 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n            $request-\u003esetMethod(HTTP_METH_DELETE);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"firstName\": \"Chris\",\n              \"lastName\": \"Thomson\",\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n  /accounts/{accountId}/messages:\n    get:\n      tags:\n      - messages\n      summary: Fetch messages\n      operationId: fetchAllMessages\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/contactIdFilter'\n      - $ref: '#/components/parameters/conversationIdFilter'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessagesResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var settings = {\n            \"async\": true,\n            \"crossDomain\": true,\n            \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages\",\n            \"method\": \"GET\",\n            \"headers\": {\n              \"Authorization\": \"Bearer {{TOKEN}}\"\n            }\n          }\n\n          $.ajax(settings).done(function (response) {\n            console.log(response);\n          });\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    post:\n      tags:\n      - messages\n      summary: Send Messages\n      operationId: sendMessage\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendMessagesRequest'\n        description: \"Send message request payload\"      \n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SendMessagesResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n            -H 'Accept: application/json' \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"contacts\": [{\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }],\n            \"template\": \"Congratulations! You just sent your first message\"\n          } '\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages',\n            headers:\n             { 'Authorization': 'Bearer {{TOKEN}}',\n               Accept: 'application/json',\n               'Content-Type': 'application/json' },\n            body:\n             { contacts: [ { mobile: { number: '+1234567890', country: 'US' } } ],\n               template: 'Congratulations! You just sent your first message' },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Accept' =\u003e 'application/json',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"contacts\": [{\n                \"mobile\": {\n                  \"number\": \"+1234567890\",\n                  \"country\": \"US\"\n                }\n              }],\n              \"template\": \"Congratulations! You just sent your first message\"\n            } ');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/messages/{messageId}:\n    get:\n      tags:\n      - messages\n      summary: Fetch message by id\n      description: Returns a single messag\n      operationId: fetchMessages\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: messageId\n        in: path\n        description: ID of message to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}',\n            headers:\n             { 'Authorization': 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n\n  /accounts/{accountId}/templates:\n    get:\n      tags:\n      - templates\n      summary: Fetch templates\n      operationId: fetchAllTemplates\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/nameFilter'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplatesResponse'\n        4XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        5XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n            headers:\n             { 'Authorization': 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n    post:\n      tags:\n      - templates\n      summary: Create template\n      operationId: createTemplate\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateRequest'\n        description: \"Create template request payload.\"      \n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplatesResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"name\": \"Test Template\",\n            \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n            \"type\": \"SMS\"\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n            headers:\n             { 'Content-Type': 'application/json' },\n            body:\n             { name: 'Test Template',\n               template: 'Hi {{ firstName }}, Welcome to Sakari!',\n               type: 'SMS' },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"name\": \"Test Template\",\n              \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n              \"type\": \"SMS\"\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/templates/{templateId}:\n    get:\n      tags:\n      - templates\n      summary: Fetch template by ID\n      operationId: fetchTemplate\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: templateId\n        in: path\n        description: ID of template to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    put:\n      tags:\n      - templates\n      summary: Updates a template\n      operationId: updateTemplate\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: templateId\n        in: path\n        description: ID of template\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TemplateResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X PUT \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"name\": \"Test Template\",\n            \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n            \"type\": \"SMS\"\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n\n          var options = { method: 'PUT',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body:\n             { name: 'Test Template',\n               template: 'Hi {{ firstName }}, Welcome to Sakari!',\n               type: 'SMS' },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n            $request-\u003esetMethod(HTTP_METH_PUT);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"name\": \"Test Template\",\n              \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n              \"type\": \"SMS\"\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    delete:\n      tags:\n      - templates\n      summary: Deletes a template\n      operationId: removeTemplate\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: templateId\n        in: path\n        description: Template id to delete\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X DELETE \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n\n          var options = { method: 'DELETE',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n            $request-\u003esetMethod(HTTP_METH_DELETE);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n  /accounts/{accountId}/campaigns:\n    get:\n      tags:\n      - campaigns\n      summary: Fetch campaigns\n      operationId: fetchAllCampaigns\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/nameFilter'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CampaignsResponse'\n        4XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        5XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n    post:\n      tags:\n      - campaigns\n      summary: Create campaign\n      operationId: createCampaigns\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CampaignRequest'\n        description: \"Create campaign request payload\"      \n      responses:\n        201:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CampaignResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"name\": \"Marketing Campaign\",\n            \"trigger\": {\n              \"code\":\"M\"\n            },\n            \"template\":\"Hi {{{contact.firstName}}}\",\n            \"reporting\":{\"when\":\"NoReport\"}\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body:\n             { name: 'Marketing Campaign',\n               trigger: { code: 'M' },\n               template: 'Hi {{{contact.firstName}}}',\n               reporting: { when: 'NoReport' } },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"name\": \"Marketing Campaign\",\n              \"trigger\": {\n                \"code\":\"M\"\n              },\n              \"template\":\"Hi {{{contact.firstName}}}\",\n              \"reporting\":{\"when\":\"NoReport\"}\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/campaigns/{campaignId}:\n    get:\n      tags:\n      - campaigns\n      summary: Fetch campaign by ID\n      operationId: fetchCampaign\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: campaignId\n        in: path\n        description: ID of campaign to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CampaignResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    put:\n      tags:\n      - campaigns\n      summary: Updates a campaign\n      operationId: updateCampaign\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: campaignId\n        in: path\n        description: ID of campaign\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CampaignResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"name\": \"Marketing Campaign\",\n            \"trigger\": {\n              \"code\":\"M\"\n            },\n            \"template\":\"Hi {{{contact.firstName}}}\",\n            \"reporting\":{\"when\":\"NoReport\"}\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body:\n             { name: 'Marketing Campaign',\n               trigger: { code: 'M' },\n               template: 'Hi {{{contact.firstName}}}',\n               reporting: { when: 'NoReport' } },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"name\": \"Marketing Campaign\",\n              \"trigger\": {\n                \"code\":\"M\"\n              },\n              \"template\":\"Hi {{{contact.firstName}}}\",\n              \"reporting\":{\"when\":\"NoReport\"}\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    delete:\n      tags:\n      - campaigns\n      summary: Deletes a campaign\n      operationId: removeCampaign\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: campaignId\n        in: path\n        description: Campaign id to delete\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X DELETE \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'DELETE',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n            $request-\u003esetMethod(HTTP_METH_DELETE);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n  /accounts/{accountId}/conversations:\n    get:\n      tags:\n      - conversations\n      summary: Fetch conversations\n      operationId: fetchAllConversations\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/limit'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConversationsResponse'\n        4XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        5XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n  /accounts/{accountId}/conversations/{conversationId}:\n    get:\n      tags:\n      - conversations\n      summary: Fetch conversation by ID\n      operationId: fetchConversation\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: conversationId\n        in: path\n        description: ID of template to return\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConversationResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/conversations/{conversationId}/close:\n    put:\n      tags:\n      - conversations\n      summary: Closes a conversation\n      operationId: closeConversation\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: conversationId\n        in: path\n        description: ID of conversation\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConversationResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'GET',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' } };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close');\n            $request-\u003esetMethod(HTTP_METH_PUT);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"name\": \"Test Template\",\n              \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n              \"type\": \"SMS\"\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n\n  /tools/sharefile:\n    post:\n      tags:\n      - tools\n      summary: Share file - use to host a file and generate a short link to be used directly in a message or as a link to media for a MMS\n      operationId: shareFile\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                media:\n                  type: string\n                  format: binary\n        description: \"Binary form of the file\"          \n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareFileResponse'\n        4XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        5XX:\n          description: invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      security:\n      - sakari_auth: []\n\n\n\n\n  /accounts/{accountId}/webhooks:\n    get:\n      tags:\n      - webhooks\n      summary: Fetch active webhooks\n      description: When messages are acknowledge by carriers, a notification is sent to the specified URL\n      operationId: fetchAllWebhooks\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhooksResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X GET \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -d '{\n            \"url\": \"https://requestbin.io\"\n          }'\n      - lang: JavaScript\n        source: |\n          var settings = {\n            \"async\": true,\n            \"crossDomain\": true,\n            \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks\",\n            \"method\": \"GET\",\n            \"headers\": {\n              \"Authorization\": \"Bearer {{TOKEN}}\"\n            },\n            \"data\": \"{\\n\\t\\\"url\\\": \\\"https://requestbin.io\\\"\\n}\"\n          }\n\n          $.ajax(settings).done(function (response) {\n            console.log(response);\n          });\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n            $request-\u003esetMethod(HTTP_METH_GET);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            $request-\u003esetBody('{\n              \"url\": \"https://requestbin.io\"\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n    post:\n      tags:\n      - webhooks\n      summary: Subscribe to message events\n      description: When messages are acknowledge by carriers, a notification is sent to the specified URL\n      operationId: subscribeWebhooks\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url: # Callback URL\n                  type: string\n                  format: uri\n                  example: https://myserver.com/send/callback/here\n                eventTypes:\n                  type: array\n                  items:\n                    type: string\n              required:\n              - callbackUrl\n        description: \"Message event subscribe request payload\"      \n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookResponse'\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X POST \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n            -H 'Authorization: Bearer {{TOKEN}}' \\\n            -H 'Content-Type: application/json' \\\n            -d '{\n            \"url\": \"https://requestbin.io\",\n            \"eventTypes\": [\"message-received\"]\n          }'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'POST',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}',\n               'Content-Type': 'application/json' },\n            body: { url: 'https://requestbin.io', eventTypes: [ 'message-received' ] },\n            json: true };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n            $request-\u003esetMethod(HTTP_METH_POST);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}',\n              'Content-Type' =\u003e 'application/json'\n            ));\n\n            $request-\u003esetBody('{\n              \"url\": \"https://requestbin.io\",\n              \"eventTypes\": [\"message-received\"]\n            }');\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n  /accounts/{accountId}/webhooks/{url}:\n    delete:\n      tags:\n      - webhooks\n      summary: Unsubscribe to message events\n      description: Delete subscription for receiving notifications\n      operationId: unsubscribeWebhooks\n      parameters:\n      - $ref: '#/components/parameters/accountId'\n      - name: url\n        in: path\n        description: Account to apply operations to\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: successful operation\n      security:\n      - sakari_auth: []\n      x-code-samples:\n      - lang: CURL\n        source: |\n          curl -X DELETE \\\n            https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}} \\\n            -H 'Authorization: Bearer {{TOKEN}}'\n      - lang: JavaScript\n        source: |\n          var request = require(\"request\");\n          var options = { method: 'DELETE',\n            url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}',\n            headers:\n             { Authorization: 'Bearer {{TOKEN}}' };\n\n          request(options, function (error, response, body) {\n            if (error) throw new Error(error);\n\n            console.log(body);\n          });\n\n      - lang: PHP\n        source: |\n          \u003c?php\n            $request = new HttpRequest();\n            $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}');\n            $request-\u003esetMethod(HTTP_METH_DELETE);\n\n            $request-\u003esetHeaders(array(\n              'Authorization' =\u003e 'Bearer {{TOKEN}}'\n            ));\n\n            try {\n              $response = $request-\u003esend();\n\n              echo $response-\u003egetBody();\n            } catch (HttpException $ex) {\n              echo $ex;\n            }\n\n      callbacks:\n        event: # Event name\n          '{$request.body#/callbackUrl}': # The callback URL, Refers to the passed URL\n            post:\n              requestBody: # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/Event'\n              responses: # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n\n\nexternalDocs:\n  description: Find out more about Sakari\n  url: 'https://sakari.io'\n\ncomponents:\n\n  parameters:\n    accountId:\n      name: accountId\n      in: path\n      description: Account to apply operations to\n      required: true\n      schema:\n        type: string\n\n    offset:\n      name: offset\n      in: query\n      description: Results to skip when paginating through a result set\n      required: false\n      schema:\n        type: integer\n        format: int64\n        minimum: 0\n    limit:\n      name: limit\n      in: query\n      description: Maximum number of results to return\n      required: false\n      schema:\n        type: integer\n        format: int64\n        minimum: 1\n        maximum: 100\n\n    contactIdFilter:\n      name: contactId\n      in: query\n      description: ID of contact\n      required: false\n      schema:\n        type: string\n    firstNameFilter:\n      name: firstName\n      in: query\n      description: Filter by first name or part of\n      required: false\n      schema:\n        type: string\n    lastNameFilter:\n      name: lastName\n      in: query\n      description: Filter by last name or part of\n      required: false\n      schema:\n        type: string\n    nameFilter:\n      name: name\n      in: query\n      description: Filter by name or part of\n      required: false\n      schema:\n        type: string\n    mobileFilter:\n      name: mobile\n      in: query\n      description: Filter by mobile or part of\n      required: false\n      schema:\n        type: string\n    emailFilter:\n      name: email\n      in: query\n      description: Filter by email or part of\n      required: false\n      schema:\n        type: string\n    tagsFilter:\n      name: tags\n      in: query\n      description: Filter by tag(s)\n      required: false\n      schema:\n        type: string\n\n    conversationIdFilter:\n      name: conversationId\n      in: query\n      description: ID of conversation\n      required: false\n      schema:\n        type: string\n\n    firstName:\n      name: firstName\n      in: query\n      description: First name of contact\n      required: false\n      schema:\n        type: string\n    lastName:\n      name: lastName\n      in: query\n      description: Last name of contact\n      required: false\n      schema:\n        type: string\n    mobile:\n      name: mobile\n      in: query\n      description: Mobile of contact\n      required: false\n      schema:\n        type: string\n    email:\n      name: email\n      in: query\n      description: Email of contact\n      required: false\n      schema:\n        type: string\n    tags:\n      name: tags\n      in: query\n      description: Tag of contact\n      required: false\n      schema:\n        type: string\n\n    # eventType:\n    #   type: string\n    #   example: message\n    #   enum:\n    #   - account\n    #   - message\n\n  schemas:\n    TokenRequest:\n      type: object\n      description: Get token for accessing the API\n      properties:\n        grant_type:\n          type: string\n          description: Grant type\n          example: client_credentials\n        client_id:\n          type: string\n          description: Client Id\n          example: 00000000-0000-0000-0000-00000000000\n        client_secret:\n          type: string\n          description: Client secret\n          example: 00000000-0000-0000-0000-00000000000\n\n    TokenResponse:\n      type: object\n      properties:\n        access_token:\n          type: string\n          description: Access token\n        token_type:\n          type: string\n          description: Token type\n\n    AccountId:\n      type: string\n      description: Id of the account to apply operations to\n\n    EventType:\n      type: string\n      description: Type of the event\n      example: message\n      enum:\n      - account\n      - messageStatus\n      - messageIncoming\n\n    Updated:\n      type: object\n      description: Represent resource update details\n      properties:\n        at:\n          type: string\n          description: Updated date time\n          format: date-time\n        by:\n          type: object\n          description: Updated by \n          properties:\n            id:\n              type: string\n              description: Id of the update author\n            firstName:\n              type: string\n              description: First name of the update author\n              example: 'Joe'\n            lastName:\n              type: string\n              description: Last name of the update author\n              example: 'Bloggs'\n\n    Error:\n      type: object\n      description: Represent API error\n      properties:\n        code:\n          type: string\n          description: Error code\n          example: 'CONT-010'\n        description:\n          type: string\n          description: Error message\n          example: 'Contact has requested no further communication'\n\n    PhoneNumber:\n      type: object\n      description: Phone number resource\n      properties:\n        country:\n          type: string\n          description: Country code\n        number:\n          type: string\n          description: Phone number\n        active:\n          type: boolean\n          description: Whether phone number is active\n\n    ContactIdentifiers:\n      type: object\n      description: Contact information\n      properties:\n        id:\n          type: string\n          description: Contact information Id\n        email:\n          type: string\n          description: Email address\n          example: chris@sakari.io\n        firstName:\n          type: string\n          description: First name\n          example: Chris\n        lastName:\n          type: string\n          description: Last name\n          example: Bloggs\n        mobile:\n          type: object\n          description: Mobile number\n          properties:\n            country:\n              type: string\n              description: Country code\n            number:\n              type: string\n              description: Mobile number\n              example: 123-456-7890\n\n    ContactRequest:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/ContactIdentifiers'\n      - type: object\n        properties:\n          tags:\n            type: array\n            items:\n              $ref: '#/components/schemas/Tag'\n          attributes:\n            type: object\n\n    Contact:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/ContactRequest'\n      - type: object\n        properties:\n          valid:\n            type: boolean\n            description: Validity\n          error:\n            $ref: '#/components/schemas/Error'\n          created:\n            $ref: '#/components/schemas/Updated'\n          updated:\n            $ref: '#/components/schemas/Updated'\n\n    Tag:\n      type: object\n      description: Filter by tag(s)\n      properties:\n        tag:\n          type: string\n          description: Tag type\n        visible:\n          type: boolean\n          description: Whether visible\n\n    ErrorResponse:\n      type: object\n      description: Represent response error\n      properties:\n        success:\n          type: boolean\n          description: Whether the request is success\n          default: false\n          example: false\n        error:\n          type: object\n          description: Represent error \n          properties:\n            code:\n              type: string\n              description: Error code\n              example: 'CONV-001'\n            message:\n              type: string\n              description: Error message\n              example: 'Invalid conversation id'\n\n    PaginatedResponse:\n      type: object\n      description: Pagination response\n      properties:\n        success:\n          type: boolean\n          description: Success\n        pagination:\n          type: object\n          properties:\n            totalCount:\n              type: integer\n              description: Total record count\n            limit:\n              type: integer\n              description: Per page count\n            offset:\n              type: integer\n              description: Page offset\n        error:\n          type: object\n          description: Represent an API pagination error\n          properties:\n            code:\n              type: string\n              description: Error code\n            message:\n              type: string\n              description: Error message\n\n    ContactsResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Contact'\n\n    ContactResponse:\n      type: object\n      description: Contact response\n      properties:\n        success:\n          type: boolean\n          description: Whether the request is success or not\n          default: true\n        data:\n          $ref: '#/components/schemas/Contact'\n\n    ContactUploadResponse:\n      type: object\n      description: Contact upload response\n      properties:\n        success:\n          type: boolean\n          description: Whether the request is success\n          default: true\n        data:\n          type: object\n          properties:\n            contacts:\n              type: array\n              items:\n                $ref: '#/components/schemas/Contact'\n              description: 'Uploaded contacts'\n            errors:\n              type: array\n              items:\n                $ref: '#/components/schemas/Contact'\n              description: 'Contacts that failed validation'\n            #filters:\n            #  type: '#/components/schemas/ContactFilter'\n            submitted:\n              type: integer #TODO review\n            inserted:\n              type: integer #TODO review\n            updated:\n              type: integer #TODO review\n            success:\n              type: integer #TODO review\n\n    SendMessagesRequest:\n      type: object\n      properties:\n        #TODO consider using 'oneOf'\n        conversations:\n          type: array\n          description: List of conversation ids to send messages to\n          items:\n            type: string\n        contacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactRequest'\n        filters:\n          type: object\n          properties:\n            tags:\n              type: array\n              items:\n                type: string\n            attributes:\n              type: array\n              items:\n                type: object\n        template:\n          type: string\n        type:\n          type: string\n          enum:\n          - SMS\n          - MMS\n        media:\n          type: array\n          description: List of media objects to attach to message\n          items:\n            type: object\n            properties:\n              url:\n                type: string\n        conversationStrategy:\n          type: string\n          # TODO enum\n\n    SendMessagesResponse:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            messages:\n              type: array\n              items:\n                $ref: '#/components/schemas/Message'\n            jobId:\n              type: string\n            queued:\n              type: integer\n            estimatedPrice:\n              type: number\n              format: double\n\n    Message:\n      type: object\n      properties:\n        id:\n          type: string\n        contact:\n          $ref: '#/components/schemas/ContactIdentifiers'\n        conversation:\n          type: object\n          properties:\n            id:\n              type: string\n        message:\n          type: string\n        template:\n          type: string\n        outgoing:\n          type: boolean\n        phoneNumber:\n          type: string\n          example: '+1234567890'\n        price:\n          type: number\n        segments:\n          type: number\n        read:\n          type: boolean\n        status:\n          type: string\n          #TODO enum\n        media:\n          type: array\n          description: List of media objects attached to message\n          items:\n            type: object\n            properties:\n              url:\n                type: string\n              type:\n                type: string\n              filename:\n                type: string\n        error:\n          $ref: '#/components/schemas/Error'\n        created:\n          $ref: '#/components/schemas/Updated'\n        updated:\n          $ref: '#/components/schemas/Updated'\n\n    MessagesResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Message'\n\n    MessageResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          $ref: '#/components/schemas/Message'\n\n    TemplateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n          example: SMS\n          enum:\n          - SMS\n          - Web\n        template:\n          type: string\n          example: Hi {{{firstName}}}. Grab 20% off today only at ABC Shoes\n\n    Template:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/TemplateRequest'\n      - type: object\n        properties:\n          id:\n            type: string\n\n    TemplatesResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Template'\n\n    TemplateResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          $ref: '#/components/schemas/Template'\n\n    Conversation:\n      type: object\n      properties:\n        id:\n          type: string\n        contact:\n          $ref: '#/components/schemas/ContactIdentifiers'\n        closed:\n          type: boolean\n        lastMessage:\n          $ref: '#/components/schemas/Message'\n        phoneNumber:\n          $ref: '#/components/schemas/PhoneNumber'\n        unread:\n          type: array\n          items:\n            type: string\n        created:\n          $ref: '#/components/schemas/Updated'\n        updated:\n          $ref: '#/components/schemas/Updated'\n\n    ConversationsResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Conversation'\n\n    ConversationResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          $ref: '#/components/schemas/Conversation'\n\n    CampaignRequest:\n      type: object\n      properties:\n        trigger:\n          type: object\n          properties:\n            code:\n              type: string\n              description: \u003e\n                Campaign type specifies how it sources contacts and what event triggers its execution\n                Sort order\n                  * `M` - Manual\n                  * `S` - Scheduled\n                  * `FU` - File Upload\n              enum:\n              - M\n              - S\n              - FU\n        filters:\n          type: object\n          properties:\n            contacts:\n              type: array\n              items:\n                type: string\n            tags:\n              type: array\n              items:\n                type: string\n            attributes:\n              type: array\n              items:\n                type: string\n        template:\n          type: string\n\n    AttributeFilter:\n      type: object\n      properties:\n        name:\n          type: string\n        comparator:\n          type: string\n        value:\n          type: string\n\n    AccountEvent:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/EventType'\n        accountId:\n          $ref: '#/components/schemas/AccountId'\n\n    Campaign:\n      type: object\n      properties:\n        id:\n          type: string\n\n    CampaignsResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Campaign'\n\n    CampaignResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          $ref: '#/components/schemas/Campaign'\n\n    ShareFileResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          type: object\n          properties:\n            link:\n              type: string\n            expires:\n              type: string\n              format: date-time\n\n\n    Webhook:\n      type: object\n      properties:\n        url:\n          type: string\n        eventTypes:\n          type: array\n          items:\n            type: string\n            enum:\n            - message-received\n            - message-status\n            - message-sent\n            - conversation-closed\n            - contact-created\n            - contact-updated\n            - contact-removed\n\n    WebhooksResponse:\n      allOf:     # Combines the BasicErrorModel and the inline model\n      - $ref: '#/components/schemas/PaginatedResponse'\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              $ref: '#/components/schemas/Webhook'\n\n    WebhookResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          $ref: '#/components/schemas/Webhook'\n\n\n    Event:\n      type: object\n      properties:\n        eventId:\n          type: string\n        type:\n          $ref: '#/components/schemas/EventType'\n        accountId:\n          $ref: '#/components/schemas/AccountId'\n        data:\n          oneOf:\n          - $ref: '#/components/schemas/AccountEventPayload'\n          - $ref: '#/components/schemas/MessageEventPayload'\n\n    AccountEventPayload:\n      type: object\n      properties:\n        balance:\n          type: number\n          format: double\n\n    MessageEventPayload:\n      type: object\n      properties:\n        contact:\n          $ref: '#/components/schemas/ContactIdentifiers'\n        message:\n          type: string\n        status:\n          type: string\n        error:\n          type: string\n\n  requestBodies:\n    Contact:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ContactRequest'\n      description: Pet object that needs to be added to the store\n      required: true\n    Contacts:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ContactRequest'\n      description: List of contacts\n      required: true\n\n  securitySchemes:\n    sakari_auth:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: 'https://api.sakari.io/oauth2/token'\n          scopes:\n            'messages:send': Send messages",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/sakari/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/sakari/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/accounts/{accountId}/contacts/{contactId}\": get: responses: 200: contents: application/json: generate schema: field data: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"HTTP code pattern",
		"oauth2 security"
	]
}