{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/melchor629/youtubedl-audio-api"
		},
		"file": {
			"name": "oas.yaml",
			"size": 0,
			"path": "ytdl_audio_api/oas.yaml",
			"byteSize": 8242,
			"content": "openapi: 3.0.1\ninfo:\n  title: Youtube-DL API\n  description: |\n    A simple API that talks to [`yt-dlp`](https://github.com/yt-dlp/yt-dlp) to extract some metadata and URLs for Youtube videos.\n  version: 1.0.0\n\nservers:\n  - url: http://127.0.0.1:5000\n\ntags:\n  - name: video\n    description: Video APIs\n\npaths:\n  /api/{id}/formats:\n    get:\n      tags:\n        - video\n      summary: Gets a list of video and audio formats for that video\n      description: |\n        Returns a list of different audio and video formats available in the servers to play directly. The `id` field can be\n        used in the upper section in `{formatId}` path field.\n      operationId: getFormats\n      parameters:\n        - $ref: '#/components/parameters/VideoId'\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Formats'\n  /api/{id}:\n    get:\n      tags:\n        - video\n      summary: Gets audio and video URLs alongside with video metadata for the best quality\n      description: |\n        Gets the video and audio URLs, the title and the thumbnail of the video in the best video/audio quality (or almost).\n        The urls may differ between calls. The first URL corresponds to the video, and the second one to the audio.\n        The qualities selected are the latest in the list of audio (usually the best Opus quality) and the latest video in\n        the list (usually the largest in video resolution). If another quality is preferred, use below endpoints with\n        explicit quality ID and the formats endpoint to get a list of available qualities.\n      operationId: getUrlsForBestQuality\n      parameters:\n        - $ref: '#/components/parameters/VideoId'\n      responses:\n        200:\n          description: Succesful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n  /api/{id}/{formatId}:\n    get:\n      tags:\n        - video\n      summary: Gets the URL for the requested format (either video or audio) alongside with the video metadata\n      description: |\n        Gets the video or audio URLs, the title and the thumbnail of the video of the selected format.\n        The response will only contain one URL which corresponds to the selected format. The `formatId` must be\n        one of the list of availables (see formats endpoint).\n      operationId: getUrlForFormat\n      parameters:\n        - $ref: '#/components/parameters/VideoId'\n        - name: formatId\n          in: path\n          description: The format id\n          required: true\n          example: 140\n          schema:\n            type: number\n            format: int32\n      responses:\n        200:\n          description: Succesful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n  /api/{id}/{formatId1},{formatId2}:\n    get:\n      tags:\n        - video\n      summary: Gets the URL for the requested formats (either video and audio) alongside with the video metadata\n      description: |\n        Gets the video or audio URLs, the title and the thumbnail of the video for the selected format. The response\n        will contain two URLs:\n          - first corresponding to the `{formatId1}`\n          - the second one corresponding to `{formatId2}`.\n\n        The idea is to put a video and audio formats, but nothing prevents you to put two videos or two audio formats.\n        The `formatId` must be one of the list of availables (see formats endpoint).\n      operationId: getUrlForFormats\n      parameters:\n        - $ref: '#/components/parameters/VideoId'\n        - name: formatId1\n          in: path\n          description: The first format id\n          required: true\n          example: 140\n          schema:\n            type: number\n            format: int32\n        - name: formatId2\n          in: path\n          description: The second format id\n          required: true\n          example: 137\n          schema:\n            type: number\n            format: int32\n      responses:\n        200:\n          description: Succesful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n  /api/{id}/{formatId}/passthrough:\n    get:\n      tags:\n        - video\n      summary: Gets the bytes for the requested format through the API acting as a proxy\n      operationId: getStreamForFormat\n      parameters:\n        - $ref: '#/components/parameters/VideoId'\n        - name: formatId\n          in: path\n          description: The format id\n          required: true\n          schema:\n            type: number\n            format: int32\n      responses:\n        200:\n          description: Stream\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: bytes\n  /api/health:\n    get:\n      summary: Health check\n      operationId: health\n      responses:\n        200:\n          description: Cool health check\n          content:\n            text/plain:\n              schema:\n                type: string\n                enum: ['OK']\n\ncomponents:\n  parameters:\n    VideoId:\n      name: id\n      in: path\n      description: The ID of the video, which is the part that follows after `youtube.com/watch?v=\u003cid\u003e` or `youtu.be/\u003cid\u003e`.\n      required: true\n      example: '0RLvtm0EghQ'\n      schema:\n        type: string\n  schemas:\n    Formats:\n      type: object\n      properties:\n        audio:\n          type: array\n          items:\n            $ref: '#/components/schemas/AudioFormat'\n        video:\n          type: array\n          items:\n            $ref: '#/components/schemas/VideoFormat'\n    AudioFormat:\n      type: object\n      required:\n        - id\n        - container\n        - bps\n        - sampleRate\n        - size\n        - codec\n      properties:\n        id:\n          type: number\n          format: int64\n        container:\n          type: string\n          example: 'webm'\n        bps:\n          type: number\n        sampleRate:\n          type: number\n          format: int64\n          example: 48000\n        size:\n          type: number\n          format: int64\n        codec:\n          type: string\n          example: 'opus'\n    VideoFormat:\n      type: object\n      required:\n        - id\n        - container\n        - width\n        - height\n        - resolutionName\n        - bps\n        - codec\n        - fps\n        - size\n        - hdr\n      properties:\n        id:\n          type: number\n          format: int64\n        container:\n          type: string\n          example: 'webm'\n        width:\n          type: number\n          format: int64\n        height:\n          type: number\n          format: int64\n        resolutionName:\n          type: string\n          example: '2160p'\n        bps:\n          type: number\n        codec:\n          type: string\n          example: 'vp9'\n        fps:\n          type: number\n          format: int64\n        size:\n          type: number\n          format: int64\n        hdr:\n          type: boolean\n    Metadata:\n      type: object\n      required:\n        - title\n        - description\n        - thumbnail\n        - likes\n        - dislikes\n        - views\n        - urls\n      properties:\n        title:\n          type: string\n        description:\n          type: string\n        duration:\n          type: number\n          format: int64\n        thumbnail:\n          type: string\n          format: url\n        likes:\n          type: number\n          format: int64\n        dislikes:\n          type: number\n          format: int64\n        views:\n          type: number\n          format: int64\n        urls:\n          type: object\n          title: URLs for each requested format\n          description: Each property refers to the requested format id and the value is the URL to access to that resource\n          minProperties: 1\n          maxProperties: 2\n          additionalProperties:\n            type: string\n            format: url\n            title: URL for the resource\n          example:\n            251: 'https://example.com'\n            313: 'https://example.com'\n"
		}
	},
	"Error": "buildIR: make ir: path \"/api/{id}/{formatId}/passthrough\": get: responses: 200: contents: application/octet-stream: octet stream with schema not supported",
	"NotImplemented": [
		"unsupported content types"
	]
}