{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CartoDB/CartoDB-SQL-API"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/reference/swagger.yaml",
			"byteSize": 22054,
			"content": "openapi: 3.0.0\ninfo:\n  title: SQL API\n  description: \u003e\n    # Introduction\n\n    CARTOâ€™s SQL API allows you to interact with your tables and data inside\n    CARTO, as if you were running SQL statements against a normal database.\n\n\n    You can execute single SQL statements or even a batch of long-running ones.\n    Refer to the SQL API guide to learn more.\n\n    # Authorization\n\n    In order to access SQL API you must provide an API key. The CARTO\n    Authorization guide explains how these keys are sent (TLDR: _HTTP basic\n    auth_ or _query string param_ with the API key token). Depending on the\n    permissions granted to the provided API key, the request will be authorized\n    or not.\n  version: 0.0.1\n  contact:\n    name: Have you found an error? Github issues\n    url: 'https://github.com/CartoDB/CartoDB-SQL-API/issues'\nservers:\n  - url: 'https://{user}.{domain}/api/v2/'\n    description: Production server (uses live data)\n    variables:\n      domain:\n        default: carto.com\n        description: 'If on premise, change it to your domain'\n      user:\n        default: username\n        description: Your username\ntags:\n  - name: Single SQL Statement\n    description: Run a single SQL statement\n    externalDocs:\n      url: 'http://doc.carto.com/pet-operations.htm'\n  - name: Batch Queries\n    description: \u003e-\n      A Batch Queries Job enables you to request statements with long-running\n      CPU processing times\n    externalDocs:\n      url: 'http://doc.carto.com/pet-operations.htm'\npaths:\n  /sql:\n    get:\n      summary: Using GET\n      description: |\n        Runs a single SQL statement using the GET endpoint:\n        - SELECT, INSERT, UPDATE, DELETE,\n        - CREATE TABLE, ALTER TABLE, DROP TABLE\n        - CREATE INDEX\n\n\n        **NOTICE:** If the database detects an error when it's already streaming data the status code will be 200. Make sure to check if the **optional** *error* property is set in the response.\n      tags:\n        - Single SQL Statement\n      operationId: getSQLStatement\n      parameters:\n        - in: query\n          name: q\n          description: SQL statement\n          schema:\n            $ref: '#/components/schemas/SQLStatementString'\n          required: true\n        - in: query\n          name: filename\n          description: Output filename\n          schema:\n            type: string\n          required: false\n        - in: query\n          name: format\n          schema:\n            $ref: '#/components/schemas/OutputFormat'\n          required: false\n      responses:\n        '200':\n          description: Ok (Check if `error` property is present)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementResult'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementErrorResult'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X GET \\\n            https://username.carto.com/api/v2/sql?q=SELECT count(*) FROM cities\n    post:\n      summary: Using POST\n      description: \u003e\n        Runs a single SQL statement using the POST endpoint:\n\n        - SELECT, INSERT, UPDATE, DELETE,\n\n        - CREATE TABLE, ALTER TABLE, DROP TABLE\n\n        - CREATE INDEX\n\n\n        Offers the same functionality as the GET endpoint. This version may come\n        handy when dealing with complex/long statments.\n\n\n        **NOTICE:** If the database detects an error when it's already streaming data the status code will be 200. Make sure to check if the **optional** *error* property is set in the response.\n      tags:\n        - Single SQL Statement\n      operationId: postSQLStatement\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                q:\n                  $ref: '#/components/schemas/SQLStatementString'\n                filename:\n                  type: string\n                  description: Output filename\n                format:\n                  $ref: '#/components/schemas/OutputFormat'\n              required:\n                - q\n            example:\n              q: SELECT count(*) FROM cities\n              filename: number_of_cities.json\n      responses:\n        '200':\n          description: Ok (Check if `error` property is present)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementResult'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementErrorResult'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"q\": \"SELECT count(*) FROM cities\",\n              \"filename\": \"number_of_cities.json\"\n            }\n\n            curl -X POST -H \"Content-Type: application/json\" -d @body.json \"https://username.carto.com/api/v2/sql\"\n\n  /sql/copyfrom:\n    post:\n      summary: Runs a copy command to ingest data\n      description: |\n        Runs a single COPY command:\n        - COPY mytable (col1, col2) FROM stdin WITH (FORMAT CSV)\n      tags:\n        - Single COPY command\n      operationId: postCopyFromStatement\n      parameters:\n        - in: query\n          name: q\n          description: COPY statement\n          schema:\n            $ref: '#/components/schemas/SQLStatementString'\n          required: true\n          example: COPY upload_example (the_geom,name,age) FROM stdin WITH (FORMAT csv,HEADER true)\n        - in: header\n          name: Transfer-Encoding\n          schema:\n            type: string\n            enum:\n              - chunked\n          required: true\n        - in: header\n          name: Content-Encoding\n          schema:\n            type: string\n            enum:\n              - gzip\n          required: false\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CopyFromStatement'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl -X POST -H 'Content-Encoding: gzip' -H 'Transfer-Encoding: chunked' -H 'Content-Type: application/octet-stream' --data-binary @upload_example.csv.gz 'https://{username}.carto.com/api/v2/sql/copyfrom?q=COPY upload_example (the_geom,name,age) FROM stdin WITH (FORMAT csv,HEADER true)\u0026api_key={api_key}'\n\n  /sql/copyto:\n    get:\n      summary: Runs a copy command to extract data\n      description: |\n        Runs a single COPY command:\n        - COPY mytable TO stdout WITH (FORMAT CSV)\n      tags:\n        - Single COPY command\n      operationId: getCopyToStatement\n      parameters:\n        - in: query\n          name: q\n          description: COPY statement\n          schema:\n            $ref: '#/components/schemas/SQLStatementString'\n          required: true\n        - in: query\n          name: filename\n          description: Sets the content-disposition file name header\n          schema:\n            type: string\n          required: false\n      responses:\n        '200':\n          description: Ok.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            curl --output upload_example_dl.csv --compressed  \"https://{username}.carto.com/api/v2/sql/copyto?q=COPY upload_example (the_geom,name,age) TO stdout WITH(FORMAT csv,HEADER true)\u0026api_key={api_key}\"\n\n  /sql/job:\n    post:\n      summary: Create a Job\n      description: Creates a Batch Queries Job\n      tags:\n        - Batch Queries\n      operationId: createJob\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateJobQueryField'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n              example:\n                job_id: de305d54-75b4-431b-adb2-eb6b9e546014\n                user: username\n                status: pending\n                query: UPDATE nasdaq SET price = '$101.00' WHERE company = 'CARTO'\n                created_at: '2017-12-15T07:36:25Z'\n                updated_at: '2017-12-15T07:36:25Z'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"query\": \"UPDATE nasdaq SET price = '$101.00' WHERE company = 'CARTO'\",\n            }\n\n            curl -X POST -H \"Content-Type: application/json\" -d @body.json \"https://username.carto.com/api/v2/sql/job\"\n\n  '/sql/job/{job_id}':\n    parameters:\n      - $ref: '#/components/parameters/jobId'\n    get:\n      summary: Get a Job\n      description: Returns a Batch Queries Job based on it's ID.\n      tags:\n        - Batch Queries\n      operationId: getJob\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n              example:\n                job_id: de305d54-75b4-431b-adb2-eb6b9e546014\n                user: username\n                status: pending\n                query: UPDATE nasdaq SET price = '$101.00' WHERE company = 'CARTO'\n                created_at: '2017-12-15T07:36:25Z'\n                updated_at: '2017-12-15T07:36:25Z'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -X GET \\\n\n            https://username.carto.com/api/v2/sql/job/de305d54-75b4-431b-adb2-eb6b9e546014\n    put:\n      summary: Update a Job\n      description: |\n        Updates the query of a Batch Queries Job.\n\n        **Notice:** Only the _query_ property can be updated\n      tags:\n        - Batch Queries\n      operationId: updateJob\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateJobQueryField'\n            example:\n              q: UPDATE nasdaq SET price = '$999.00' WHERE company = 'CARTO'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n              example:\n                job_id: de305d54-75b4-431b-adb2-eb6b9e546014\n                user: username\n                status: pending\n                query: UPDATE nasdaq SET price = '999.00' WHERE company = 'CARTO'\n                created_at: '2017-12-15T07:36:25Z'\n                updated_at: '2017-12-16T12:52:13Z'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: |\n            # body.json\n            {\n              \"query\": \"UPDATE nasdaq SET price = '$999.00' WHERE company = 'CARTO'\",\n            }\n\n            curl -X PUT -H \"Content-Type: application/json\" -d @body.json\n            \"https://username.carto.com/api/v2/sql/job/de305d54-75b4-431b-adb2-eb6b9e546014\"\n    delete:\n      summary: Cancel a Job\n      description: \u003e\n        Canceles a Batch Queries Job based on it's ID. The Job doesn't get\n        deleted, just it's status is set as _canceled_.\n\n        Only jobs whose status are _pending_ or _running_ can be canceled.\n\n        * **pending**: the job will never be executed\n\n        * **running**: the job will be terminated immediately\n      tags:\n        - Batch Queries\n      operationId: cancelJob\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n              example:\n                job_id: de305d54-75b4-431b-adb2-eb6b9e546014\n                user: username\n                status: canceled\n                query: UPDATE nasdaq SET price = '999.00' WHERE company = 'CARTO'\n                created_at: '2017-12-15T07:36:25Z'\n                updated_at: '2017-12-16T12:52:13Z'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/PlatformLimits'\n      security:\n        - ApiKeyHTTPBasicAuth: []\n        - ApiKeyQueryParam: []\n      x-code-samples:\n        - lang: Curl\n          source: \u003e\n            curl -X DELETE \\\n\n            https://username.carto.com/api/v2/sql/job/de305d54-75b4-431b-adb2-eb6b9e546014\ncomponents:\n  schemas:\n    CopyFromStatement:\n      type: object\n      properties:\n        time:\n          type: number\n          format: float\n          description: time in seconds it has taken to run the statement\n        total_rows:\n          type: number\n          format: integer\n          description: number of rows copied into the database\n      example:\n        time: 2.3\n        total_rows: 142012\n    StatementResult:\n      type: object\n      properties:\n        error:\n          type: array\n          items:\n            type: string\n            description: (Optional) List of errors produced by the query. If this property is present, the query has failed.\n        time:\n          type: number\n          format: float\n          description: time in seconds it has taken to run the statement\n        total_rows:\n          type: number\n          format: integer\n          description: number of rows returned\n        rows:\n          type: array\n          items:\n            type: object\n            description: the structure/data depends on the statement\n      example:\n        time: 0.007\n        total_rows: 1\n        rows:\n          - count: 4994\n    StatementErrorResult:\n      type: object\n      properties:\n        error:\n          type: array\n          items:\n            type: string\n            description: List of errors produced by the query.\n        hint:\n          type: string\n          description: (Optional) Hint about the errors\n      example:\n        error: [\"function st_buffer(geometry) does not exist\"]\n        hint: No function matches the given name and argument types. You might need to add explicit type casts\n    Job:\n      allOf:\n        - $ref: '#/components/schemas/SQLGeneralStatment'\n        - type: object\n          properties:\n            job_id:\n              type: string\n              format: uuid\n              description: a Job's universally unique identifier (uuid).\n            user:\n              type: string\n              description: 'user identifier, as displayed by the username.'\n            status:\n              $ref: '#/components/schemas/JobStatus'\n            failed_reason:\n              description: 'displays the database error message, if something went wrong.'\n              type: string\n        - $ref: '#/components/schemas/Timestamps'\n      example:\n        job_id: de305d54-75b4-431b-adb2-eb6b9e546014\n        user: username\n        status: pending\n        query: UPDATE nasdaq SET price = '$101.00' WHERE company = 'CARTO'\n        created_at: '2017-12-15T07:36:25Z'\n        updated_at: '2017-12-15T07:36:25Z'\n    OutputFormat:\n      title: Output format\n      type: string\n      enum:\n        - GPKG\n        - CSV\n        - SHP\n        - SVG\n        - KML\n        - SpatiaLite\n        - GeoJSON\n      description: Output format\n    JobStatus:\n      title: Job status\n      type: string\n      enum:\n        - pending\n        - running\n        - done\n        - failed\n        - canceled\n        - unknown\n      description: displays the result of the long-running statement\n    SQLStatementString:\n      title: SQL statement\n      type: string\n    SQLSingleStatement:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/SQLStatementString'\n      required:\n        - query\n    CreateJobQueryField:\n      type: object\n      properties:\n        query:\n          oneOf:\n            - $ref: '#/components/schemas/SQLStatementString'\n            - $ref: '#/components/schemas/ArrayOfSQLStatements'\n            - $ref: '#/components/schemas/CreateJobQueryFieldWithFallbacks'\n          description: long-running SQL statement(s).\n      required:\n        - query\n      example:\n        query: UPDATE nasdaq SET price = '$101.00' WHERE company = 'CARTO'\n    ArrayOfSQLStatements:\n      title: Array of SQL statements\n      type: array\n      items:\n        $ref: '#/components/schemas/SQLStatementString'\n    CreateJobQueryFieldWithFallbacks:\n      title: Array of SQL statements with Fallbacks\n      allOf:\n        - $ref: '#/components/schemas/Fallbacks'\n        - type: object\n          properties:\n            query:\n              type: array\n              items:\n                allOf:\n                  - type: object\n                    properties:\n                      query:\n                        $ref: '#/components/schemas/SQLStatementString'\n                  - $ref: '#/components/schemas/Fallbacks'\n      required:\n        - query\n    SQLMultipleStatements:\n      type: array\n      items:\n        $ref: '#/components/schemas/StatementAndStatus'\n    SQLMultipleStatementsWithFallbacks:\n      allOf:\n        - type: object\n          properties:\n            query:\n              type: array\n              items:\n                $ref: '#/components/schemas/StatementAndStatusAndFallbacks'\n        - $ref: '#/components/schemas/Fallbacks'\n    StatementAndStatus:\n      title: SQL statement and status\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/SQLStatementString'\n        status:\n          $ref: '#/components/schemas/JobStatus'\n    StatementAndStatusAndFallbacks:\n      allOf:\n        - $ref: '#/components/schemas/StatementAndStatus'\n        - $ref: '#/components/schemas/Fallbacks'\n    Fallbacks:\n      type: object\n      properties:\n        onsuccess:\n          $ref: '#/components/schemas/SQLStatementString'\n        onerror:\n          $ref: '#/components/schemas/SQLStatementString'\n    SQLGeneralStatment:\n      type: object\n      properties:\n        query:\n          oneOf:\n            - $ref: '#/components/schemas/SQLStatementString'\n            - $ref: '#/components/schemas/SQLMultipleStatements'\n            - $ref: '#/components/schemas/SQLMultipleStatementsWithFallbacks'\n          description: long-running SQL statement(s).\n    JobQueryField:\n      type: object\n      properties:\n        query:\n          oneOf:\n            - $ref: '#/components/schemas/SQLStatementString'\n            - $ref: '#/components/schemas/SQLMultipleStatements'\n    Timestamps:\n      type: object\n      properties:\n        created_at:\n          type: string\n          format: date-time\n          description: the date and time when the job schema was created\n        updated_at:\n          type: string\n          format: date-time\n          description: \u003e-\n            the date and time of when the job schema was last updated, or\n            modified.\n  securitySchemes:\n    ApiKeyHTTPBasicAuth:\n      type: http\n      scheme: basic\n    ApiKeyQueryParam:\n      type: apiKey\n      in: header\n      name: api_key\n  parameters:\n    jobId:\n      in: path\n      name: job_id\n      required: true\n      schema:\n        type: string\n        format: uuid\n      description: the job universally unique identifier (uuid).\n  responses:\n    NotFound:\n      description: The specified resource was not found\n    Unauthorized:\n      description: Unauthorized. No authentication provided.\n    Forbidden:\n      description: Forbidden. The API key does not authorize this request.\n    BadInput:\n      description: Request's parameters error\n    PlatformLimits:\n      description: You are over platform's limits.\n"
		}
	},
	"Error": "buildIR: make ir: path \"/sql/copyfrom\": post: requestBody: contents: application/octet-stream: octet stream with \"string\" schema not supported",
	"NotImplemented": [
		"allOf"
	]
}