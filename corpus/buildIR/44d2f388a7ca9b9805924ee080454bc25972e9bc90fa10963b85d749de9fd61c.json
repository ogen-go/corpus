{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hirose31/connexion-tiny-petstore"
		},
		"file": {
			"name": "tiny-petstore.yaml",
			"size": 0,
			"path": "tiny-petstore.yaml",
			"byteSize": 10521,
			"content": "openapi: 3.0.2\ninfo:\n  title: Tiny Pet Store\n  version: 3.0.0\n  contact:\n    email: hirose31@gmail.com\n  description: |\n    This is a yet another example pet store API server using\n    [Connexion](https://github.com/zalando/connexion) .\n\n    - [Repository](https://github.com/hirose31/connexion-tiny-petstore)\n\n    # search resource expression\n\n    ## examples\n\n\n    ```jsonc\n    // WHERE name = 'foo' AND age \u003e 20\n    {\n        \"name\": \"foo\",\n        \"age\": {\"\u003e\": 20}\n    }\n    ```\n\n    ```jsonc\n    // WHERE addresses.email like \"%@example.org\"\n    {\n        \"addresses.email\": {\"like\": \"%@example.org\"}\n    }\n    ```\n\n    ```jsonc\n    // WHERE age \u003e= 6 AND age \u003c= 12\n    {\n        \"age\": [\"and\", {\"\u003e=\": 6}, {\"\u003c=\": 12}]\n    }\n    ```\n\n    ## rules\n\n    ```\n    // FILTER\n    {\n        ATTR: EXPR,\n        ATTR: EXPR,\n        ...\n    }\n    ```\n\n    ```\n    // ATTR\n    column_name\n    joined_table.column_name\n    ```\n\n    ```\n    // EXPR\n    // comparison expr\n    { OP: VALUE }\n    { OP: [VALUE, VALUE, ...] }\n    VALUE # shorthand for { \"==\": VALUE }\n\n    // boolean expr\n    [\"or\", EXPR, EXPR, ...]\n    [\"and\", EXPR, EXPR, ...]\n    ```\n\n    ```\n    // OP\n    ==\n    !=\n    in\n    !in\n    \u003e\n    \u003e=\n    \u003c\n    \u003c=\n    like\n    !like\n    ```\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/mit-license.php'\n\ntags:\n  - name: pet\n    description: Everything about your Pets\n  - name: store\n    description: Access to Pet store\n\nservers:\n  - url: /v3\n\npaths:\n  /pets:\n    get:\n      tags:\n        - pet\n      summary: Returns pets\n      description: |\n        Returns all pets.\n      operationId: fetchAllPets\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: ''\n      operationId: createPet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetNew'\n        description: Pet object that needs to be added to the store\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Bad Request\n  '/pets/{id}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: fetchPet\n      parameters:\n        - name: id\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n    patch:\n      tags:\n        - pet\n      summary: Updates a pet\n      description: ''\n      operationId: updatePet\n      parameters:\n        - name: id\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetUpdate'\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: id\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: successful operation (No Content)\n        '400':\n          description: Invalid pet value\n  /search/pets:\n    post:\n      tags:\n        - pet\n      summary: Returns pets matched search conditions\n      description: |\n        Returns pets which matched by search conditions.\n      operationId: searchPets\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                store.name:\n                  like: '%Pet%'\n                status:\n                  in:\n                    - pending\n                    - sold\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n  /stores:\n    get:\n      tags:\n        - store\n      summary: Returns stores\n      description: |\n        Returns all stores.\n      operationId: fetchAllStores\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Store'\n    post:\n      tags:\n        - store\n      summary: Add a new store to the store\n      description: ''\n      operationId: createStore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoreNew'\n        description: Store object that needs to be added to the store\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Store'\n        '400':\n          description: Bad Request\n  '/stores/{id}':\n    get:\n      tags:\n        - store\n      summary: Find store by ID\n      description: Returns a single store\n      operationId: fetchStore\n      parameters:\n        - name: id\n          in: path\n          description: ID of store to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Store'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Store not found\n    patch:\n      tags:\n        - store\n      summary: Updates a store\n      description: ''\n      operationId: updateStore\n      parameters:\n        - name: id\n          in: path\n          description: ID of store that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoreUpdate'\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Store'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - store\n      summary: Deletes a store\n      description: ''\n      operationId: deleteStore\n      parameters:\n        - name: id\n          in: path\n          description: Store id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: successful operation (No Content)\n        '400':\n          description: Invalid store value\n  /search/stores:\n    post:\n      tags:\n        - store\n      summary: Returns stores matched search conditions\n      description: |\n        Returns stores which matched by search conditions.\n      operationId: searchStores\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name:\n                  like: '%Pet%'\n                address:\n                  ==: Tokyo\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Store'\n\ncomponents:\n  schemas:\n    PetCore:\n      type: object\n      properties:\n        name:\n          type: string\n          pattern: '^[A-Za-z0-9]'\n          example: tama\n        status:\n          type: string\n          description: pet status in the store\n          default: pending\n          enum:\n            - available\n            - pending\n            - sold\n          example: available\n    PetNew:\n      allOf:\n        - $ref: '#/components/schemas/PetCore'\n        - $ref: '#/components/schemas/StoreRef'\n        - required:\n          - name\n          - store.name\n    Pet:\n      allOf:\n        - $ref: '#/components/schemas/PetCore'\n        - properties:\n            id:\n              type: integer\n              format: int64\n              example: 1\n            store:\n              $ref: '#/components/schemas/Store'\n    PetUpdate:\n      allOf:\n        - $ref: '#/components/schemas/PetCore'\n        - $ref: '#/components/schemas/StoreRef'\n\n    StoreCore:\n      type: object\n      properties:\n        name:\n          type: string\n          pattern: '^[A-Za-z0-9]'\n          example: The Pet Mansion\n        address:\n          type: string\n          example: Tokyo\n    StoreNew:\n      allOf:\n        - $ref: '#/components/schemas/StoreCore'\n        - required:\n          - name\n          - address\n    Store:\n      allOf:\n        - $ref: '#/components/schemas/StoreCore'\n        - properties:\n            id:\n              type: integer\n              format: int64\n              example: 1\n    StoreUpdate:\n      allOf:\n        - $ref: '#/components/schemas/StoreCore'\n    StoreRef:\n      type: object\n      properties:\n        store.name:\n          type: string\n          pattern: '^[A-Za-z0-9]'\n          example: The Pet Mansion\n"
		}
	},
	"Error": "buildIR: make ir: path \"/stores\": post: requestBody: contents: application/json: generate schema: allOf: schema type mismatch: object and "
}