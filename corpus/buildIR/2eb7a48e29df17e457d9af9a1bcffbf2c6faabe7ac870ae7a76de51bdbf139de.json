{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/flatapi/openapi.yaml",
			"byteSize": 222981,
			"content": "openapi: 3.0.2\ninfo:\n  x-ballerina-display:\n    label: Flat API\n    iconPath: \"icon.png\"\n  title: Flat API\n  description: |-\n    This is a generated connector for [Flat API v2.13.0](https://flat.io/developers/docs/api/) OpenAPI specification.\n    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:\n    * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files\n    * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI)\n    * Managing educational resources with Flat for Education: creating \u0026 updating the organization accounts, the classes, rosters and assignments.\n    The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.\n    The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/).\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).\n    You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).\n    Getting Started and learn more:\n    * [API Overview and introduction](https://flat.io/developers/docs/api/)\n    * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html)\n    * [SDKs](https://flat.io/developers/docs/api/sdks.html)\n    * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html)\n    * [Changelog](https://flat.io/developers/docs/api/changelog.html)\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n    \n    Create an [Flat Platform Account](https://flat.io/auth/signup) and obtain tokens following [this guide](https://flat.io/developers/docs/api/authentication.html).\n  termsOfService: 'https://flat.io/legal'\n  contact:\n    name: Flat\n    url: 'https://flat.io/developers/docs/api/'\n    email: developers@flat.io\n  version: 2.13.0\n  x-logo:\n    url: 'https://flat.io/img/logo-flat.svg'\nservers:\n  - url: 'https://api.flat.io/v2'\ntags:\n  - name: Account\n    description: \u003e\n      These API endpoints are related to the Flat account you are currently\n      using. When using an OAuth2 access token, you can use [`GET\n      /me`](#operation/getAuthenticatedUser) to get information about the\n      account.\n    x-displayName: Flat Account\n  - name: Score\n    description: |\n      Sheet music is the main API object type available for all Flat account.\n      Here is a typical lifecycle for a music score document on Flat:\n        - An end user can **create a music score** or **import a document** using our [web interface](https://flat.io) or a third-party website/app (e.g. Google Drive) using this API (see [`POST /v2/scores`](#operation/createScore). The creation and import of music scores can be done with this single API endpoint. This one currently supports the [MusicXML](http://www.musicxml.com/) (compressed or not) and [MIDI](https://www.midi.org/specifications).\n        - **List scores**:\n          - The **owned scores** can be listed using the [collections API methods](#tag/Collection), especially [`GET /collections/{collection}/scores`](#operation/listCollectionScores).\n          - The scores from a public account can be listed with [`GET /users/{user}/scores`](#operation/getUserScores).\n          - Scores shared with a specific group can be listed with [`GET /groups/{group}/scores`](#operation/getGroupScores).\n        - The metadata of a single score can be retrieved with [`GET /scores/{score}`](#operation/getScore).\n        - Scores on Flat have **one or multiple revisions**: creating a new score will create a first revision. These **revisions can be listed** using [`GET /scores/{score}/revisions`](#operation/getScoreRevisions) and a specific **revision data can be downloaded** with [`GET /scores/{score}/revisions/{revision}/{format}`](#operation/getScoreRevisionData). New revisions can be created using our [sheet music editor](https://flat.io) or using [`POST /scores/{score}/revisions`](#operation/createScoreRevision) (this endpoint has similar parameters than during the score creation). The last revision of a document may not directly reflect the really last version of a music score: recent modifications can be made offline or not yet consolidated into a new revision. In average, a new revision is created every 100 modifications made with our editor.\n        - Scores can be **shared publicly** by changing the privacy option with [`POST /scores/{score}`](#operation/editScore), or **individually shared** using the different collaborators API endpoints (see [`POST /scores/{score}/collaborators`](#operation/addScoreCollaborator)).\n    x-displayName: Music scores\n  - name: Collection\n    description: \u003e\n      Collections let you organize your content in a Flat account. They work\n      like a regular _folder_ with some specificities:\n        - Our design goal here is to create a system similar to a _book_ or a _playlist of songs_.\n        - Collections can't have children collections (except the `trash` and `sharedWithMe` that are special collections).\n        - Any score can be added to one or multiple collections. For example, you can have a single private score in two or more collections, or add any public or shared scores to one of your collections.\n\n      All the collections don't have the same capabilities. Capabilities depend\n      on the `type` of collection and the `rights` you have on a collection.\n      They are available when [listing the\n      collection](#operation/listCollections) or [retrieving the collection\n      details](#operation/getCollection).\n\n\n      At this time, only `private` privacy mode is widely available. Privacy\n      modes `public`, `organizationPublic` and `privateLink`, and 1:1 sharing\n      will be available in an upcoming update later this year.\n    x-displayName: Collections of music scores\n  - name: User\n    description: Flat users\n  - name: Organization\n    description: Flat for Education organizations\n  - name: Class\n    description: Flat for Education classes\n  - name: Group\n    description: Flat Groups\npaths:\n  /me:\n    get:\n      tags:\n        - Account\n      summary: Get current user profile\n      description: |\n        Get details about the current authenticated User.\n      operationId: getAuthenticatedUser\n      parameters:\n        - name: onlyId\n          in: query\n          description: Only return the user id\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Current user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - account.public_profile\n            - account.education_profile\n      x-code-samples:\n        - lang: JavaScript\n          source: \u003e\n            var FlatApi = require('flat-api');\n\n            FlatApi.ApiClient.instance.authentications.OAuth2.accessToken =\n            process.env.FLAT_ACCESS_TOKEN;\n\n\n            flatAccountApi.getAuthenticatedUser(function(error, data, response)\n            {\n              if (error) {\n                console.error(error);\n              }\n              else {\n                console.log('Successfully retrieved user profile: ', data);\n              }\n            });\n        - lang: PHP\n          source: \u003e\n            \u003c?php\n\n            require_once(__DIR__ . '/vendor/autoload.php');\n\n\n            // Configure OAuth2 access token\n\n            Flat\\APIClient\\Configuration::getDefaultConfiguration()-\u003esetAccessToken($_ENV['FLAT_ACCESS_TOKEN']);\n\n\n            $api = new Flat\\APIClient\\Api\\AccountApi();\n\n\n            try {\n                $result = $api-\u003egetAuthenticatedUser();\n                print_r($result);\n            } catch (Exception $e) {\n                echo 'Exception when calling AccountApi-\u003egetAuthenticatedUser: ', $e-\u003egetMessage(), PHP_EOL;\n            }\n        - lang: Python\n          source: |\n            from pprint import pprint\n            import os\n\n            import flat_api\n            from flat_api.rest import ApiException\n\n            configuration = flat_api.Configuration()\n            configuration.access_token = os.environ['FLAT_ACCESS_TOKEN']\n            flat_api_client = flat_api.ApiClient(configuration)\n            try:\n                pprint(flat_api.AccountApi(flat_api_client).get_authenticated_user())\n            except ApiException as e:\n                print e\n  /scores:\n    post:\n      tags:\n        - Score\n      summary: Create a new score\n      description: \u003e\n        Use this API method to **create a new music score in the current User\n        account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or\n        `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3,\n        GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the\n        new Flat document.\n\n\n        This API call will automatically create the first revision of the\n        document, the score can be modified by the using our web application or\n        by uploading a new revision of this file (`POST\n        /v2/scores/{score}/revisions/{revision}`).\n\n\n        The currently authenticated user will be granted owner of the file and\n        will be able to add other collaborators (users and groups).\n\n\n        If no `collection` is specified, the API will create the score in the\n        most appropriate collection. This can be the `root` collection or a\n        different collection based on the user's settings or API authentication\n        method.\n\n        If a `collection` is specified and this one has more public privacy\n        settings than the score (e.g. `public` vs `private` for the score), the\n        privacy settings of the created score will be adjusted to the collection\n        ones.\n\n        You can check the adjusted privacy settings in the returned score\n        `privacy`, and optionally adjust these settings if needed using `PUT\n        /scores/{score}`.\n      operationId: createScore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreCreation'\n        required: true\n      responses:\n        '200':\n          description: Score created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreDetails'\n        '400':\n          description: Bad score creation request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n      x-code-samples:\n        - lang: JavaScript\n          source: \u003e\n            var request = require('request');\n\n            var FlatApi = require('flat-api');\n\n\n            FlatApi.ApiClient.instance.authentications.OAuth2.accessToken =\n            process.env.FLAT_ACCESS_TOKEN;\n\n\n            var scoreToImport =\n            'https://gist.githubusercontent.com/gierschv/938479bec2bbe8c39eebbc9e19d027a0/raw/2caa4fa312184412d0d544feb361f918869ceaa5/hello-world.xml';\n\n\n            // Download a MusicXML \"Hello World\"\n\n            request(scoreToImport, function (error, response, body) {\n              // Create the document and print the meta returned by the API\n              new FlatApi.ScoreApi().createScore({\n                title: 'Hello world',\n                privacy: 'private',\n                data: body\n              }, function (error, data, response) {\n                if (error) {\n                  console.error(error);\n                }\n                else {\n                  console.log('Successfully create the document:', data);\n                }\n              });\n            });\n        - lang: PHP\n          source: \u003e\n            \u003c?php\n\n            require_once(__DIR__ . '/vendor/autoload.php');\n\n\n            // Configure OAuth2 access token\n\n            Flat\\APIClient\\Configuration::getDefaultConfiguration()-\u003esetAccessToken($_ENV['FLAT_ACCESS_TOKEN']);\n\n\n            $musicXml =\n            file_get_contents('https://gist.githubusercontent.com/gierschv/938479bec2bbe8c39eebbc9e19d027a0/raw/2caa4fa312184412d0d544feb361f918869ceaa5/hello-world.xml');\n\n\n            try {\n                $body = new \\Flat\\APIClient\\Model\\ScoreCreation();\n                $body-\u003esetTitle('Hello world');\n                $body-\u003esetPrivacy('private');\n                $body-\u003esetData($musicXml);\n\n                $scoreApi = new Flat\\APIClient\\Api\\ScoreApi();\n                $result = $scoreApi-\u003ecreateScore($body);\n                print_r($result);\n            } catch (Exception $e) {\n                echo 'Exception when calling ScoreApi-\u003ecreateScore: ', $e-\u003egetMessage(), PHP_EOL;\n            }\n        - lang: Python\n          source: \u003e\n            from pprint import pprint\n\n            import os, urllib2\n\n\n            import flat_api\n\n            from flat_api.rest import ApiException\n\n\n            SCORE_TO_IMPORT='https://gist.githubusercontent.com/gierschv/938479bec2bbe8c39eebbc9e19d027a0/raw/2caa4fa312184412d0d544feb361f918869ceaa5/hello-world.xml'\n\n\n            configuration = flat_api.Configuration()\n\n            configuration.access_token = os.environ['FLAT_ACCESS_TOKEN']\n\n            flat_api_client = flat_api.ApiClient(configuration)\n\n\n            try:\n                # Download a MusicXML \"Hello World\"\n                hello_world = urllib2.urlopen(SCORE_TO_IMPORT).read()\n\n                # The new score meta, including the MusicXML file as `data`\n                new_score = flat_api.ScoreCreation(\n                    title='Hello World',\n                    privacy='private',\n                    data=hello_world\n                )\n\n                # Create the document and print the meta returned by the API\n                pprint(flat_api.ScoreApi(flat_api_client).create_score(new_score))\n            except (ApiException, urllib2.HTTPError) as e:\n                print e\n  '/scores/{score}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: Get a score's metadata\n      description: \u003e\n        Get the details of a score identified by the `score` parameter in the\n        URL.\n\n        The currently authenticated user must have at least a read access to the\n        document to use this API call.\n      operationId: getScore\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreDetails'\n        '402':\n          description: Account overquota and this document is out of the granted quota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n    put:\n      tags:\n        - Score\n      summary: Edit a score's metadata\n      description: \u003e\n        This API method allows you to change the metadata of a score document\n        (e.g. its `title` or `privacy`), all the properties are optional.\n\n\n        To edit the file itself, create a new revision using the appropriate\n        method (`POST /v2/scores/{score}/revisions/{revision}`).\n\n\n        When editing the `title`, `subtitle`, `composer`, `lyricist`, `arranger`\n        or `licenseText`, the metadatas will be instantly be updated, and a\n        real-time action will be pushed to update the document lazily.\n\n        This pending document modification will be automatically be saved as a\n        new version by either a connected client or our internal versioning\n        service.\n      operationId: editScore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreModification'\n        required: false\n      responses:\n        '200':\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreDetails'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Score\n      summary: Delete a score\n      description: \u003e\n        This method can be used by the owner/admin (`aclAdmin` rights) of a\n        score as well as regular collaborators.\n\n\n        When called by an owner/admin, it will schedule the deletion of the\n        score, its revisions, and complete history.\n\n        The score won't be accessible anymore after calling this method and the\n        user's quota will directly be updated.\n\n\n        When called by a regular collaborator (`aclRead` / `aclWrite`), the\n        score will be unshared (i.e. removed from the account \u0026 own\n        collections).\n      operationId: deleteScore\n      parameters:\n        - name: now\n          in: query\n          description: 'If `true`, the score deletion will be scheduled to be done ASAP'\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '204':\n          description: The score has been removed\n        '403':\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n  '/scores/{score}/untrash':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Score\n      summary: Untrash a score\n      description: \u003e\n        This method will remove the score from the `trash` collection and from\n        the deletion queue, and add it back to the original collections.\n      operationId: untrashScore\n      responses:\n        '204':\n          description: The score has been untrashed\n        '403':\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n  '/scores/{score}/submissions':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n        - Class\n      summary: List submissions related to the score\n      description: \u003e\n        This API call will list the different assignments submissions where the\n        score is attached. This method can be used by anyone that are part of\n        the organization and have at least read access to the document.\n      operationId: getScoreSubmissions\n      responses:\n        '200':\n          description: List of submissions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n  '/scores/{score}/fork':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Score\n        - Class\n      summary: Fork a score\n      description: \u003e\n        This API call will make a copy of the last revision of the specified\n        score and create a new score. The copy of the score will have a privacy\n        set to `private`.\n\n\n        When using a [Flat for Education](https://flat.io/edu) account, the\n        inline and contextualized comments will be accessible in the child\n        document.\n      operationId: forkScore\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreFork'\n        required: true\n      responses:\n        '200':\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreDetails'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n  '/scores/{score}/collaborators':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: List the collaborators\n      description: \u003e\n        This API call will list the different collaborators of a score and their\n        rights on the document. The returned list will at least contain the\n        owner of the document.\n\n\n        Collaborators can be a single user (the object `user` will be populated)\n        or a group (the object `group` will be populated).\n      operationId: getScoreCollaborators\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of collaborators\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ResourceCollaborator'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.readonly\n            - scores\n    post:\n      tags:\n        - Score\n      summary: Add a new collaborator\n      description: \u003e\n        Share a score with a single user or a group. This API call allows to\n        add, invite and update the collaborators of a resource.\n\n        - To add an existing Flat user to the resource, specify its unique\n        identifier in the `user` property.\n\n        - To invite an external user to the resource, specify its email in the\n        `userEmail` property.\n\n        - To add a Flat group to the resource, specify its unique identifier in\n        the `group` property.\n\n        - To update an existing collaborator, process the same request with\n        different rights.\n      operationId: addScoreCollaborator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourceCollaboratorCreation'\n        required: true\n      responses:\n        '200':\n          description: The newly added collaborator metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceCollaborator'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n  '/scores/{score}/collaborators/{collaborator}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: collaborator\n        in: path\n        description: \u003e\n          Unique identifier of a **collaborator permission**, or unique\n          identifier of a **User**, or unique identifier of a **Group**\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: Get a collaborator\n      description: |\n        Get the information about a collaborator (User or Group).\n      operationId: getScoreCollaborator\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Collaborator information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceCollaborator'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or collaborator not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.readonly\n    delete:\n      tags:\n        - Score\n      summary: Delete a collaborator\n      description: |\n        Remove the specified collaborator from the score\n      operationId: removeScoreCollaborator\n      responses:\n        '204':\n          description: The collaborator has been removed\n        '403':\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or collaborator not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n  '/scores/{score}/tracks':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: List the audio or video tracks linked to a score\n      operationId: listScoreTracks\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n        - name: assignment\n          in: query\n          description: \u003e\n            An assignment id with which all the tracks returned will be related\n            to\n          schema:\n            type: string\n        - name: listAutoTrack\n          in: query\n          description: \u003e\n            If true, and if available, return last automatically synchronized\n            Flat's mp3 export as an additional track\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of tracks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreTrack'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n    post:\n      tags:\n        - Score\n      summary: Add a new video or audio track to the score\n      description: \u003e\n        Use this method to add new track to the score. This track can then be\n        played on flat.io or in an embedded score.\n\n        This API method support medias hosted on SoundCloud, YouTube and Vimeo.\n      operationId: addScoreTrack\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreTrackCreation'\n        required: true\n      responses:\n        '200':\n          description: Created track\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreTrack'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n  '/scores/{score}/tracks/{track}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: track\n        in: path\n        description: |\n          Unique identifier of a score audio track\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: Retrieve the details of an audio or video track linked to a score\n      operationId: getScoreTrack\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Track details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreTrack'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n    put:\n      tags:\n        - Score\n      summary: Update an audio or video track linked to a score\n      operationId: updateScoreTrack\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreTrackUpdate'\n        required: true\n      responses:\n        '200':\n          description: Updated track\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreTrack'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Score\n      summary: Remove an audio or video track linked to the score\n      operationId: deleteScoreTrack\n      responses:\n        '204':\n          description: Track removed\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n  '/scores/{score}/comments':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: List comments\n      description: \u003e-\n        This method lists the different comments added on a music score\n        (documents and inline) sorted by their post dates.\n      operationId: getScoreComments\n      parameters:\n        - name: type\n          in: query\n          description: Filter the comments by type\n          schema:\n            type: string\n            enum:\n              - document\n              - inline\n        - name: sort\n          in: query\n          description: Sort\n          schema:\n            type: string\n            enum:\n              - date\n        - name: direction\n          in: query\n          description: Sort direction\n          schema:\n            type: string\n            enum:\n              - asc\n              - desc\n      responses:\n        '200':\n          description: The comments of the score\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreComment'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.readonly\n            - scores.social\n            - scores\n    post:\n      tags:\n        - Score\n      summary: Post a new comment\n      description: \u003e\n        Post a document or a contextualized comment on a document.\n\n\n        Please note that this method includes an anti-spam system for public\n        scores. We don't guarantee that your comments will be accepted and\n        displayed to end-user. Comments are be blocked by returning a `403` HTTP\n        error and hidden from other users when the `spam` property is `true`.\n      operationId: postScoreComment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreCommentCreation'\n        required: true\n      responses:\n        '200':\n          description: The new comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreComment'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: \u003e-\n            Not granted to access to this score, to post a comment, or your API\n            call triggered our spam filter.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      x-codegen-request-body-name: body\n  '/scores/{score}/comments/{comment}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: comment\n        in: path\n        description: |\n          Unique identifier of a sheet music comment\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    put:\n      tags:\n        - Score\n      summary: Update an existing comment\n      operationId: updateScoreComment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreCommentUpdate'\n        required: true\n      responses:\n        '200':\n          description: The edited comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreComment'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: \u003e-\n            Not granted to access to this score or not the original comment\n            creator\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Score\n      summary: Delete a comment\n      operationId: deleteScoreComment\n      responses:\n        '204':\n          description: The comment has been deleted\n        '403':\n          description: \u003e-\n            Not granted to access to this score or not the original comment\n            creator\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n  '/scores/{score}/comments/{comment}/resolved':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: comment\n        in: path\n        description: |\n          Unique identifier of a sheet music comment\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    put:\n      tags:\n        - Score\n      summary: Mark the comment as resolved\n      operationId: markScoreCommentResolved\n      responses:\n        '204':\n          description: The comment has been marked as resolved\n        '403':\n          description: Not granted to mark this comment as resolved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n    delete:\n      tags:\n        - Score\n      summary: Mark the comment as unresolved\n      operationId: markScoreCommentUnresolved\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '204':\n          description: The comment has been unmarked as resolved\n        '403':\n          description: Not granted to unmark this comment as resolved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n  '/scores/{score}/revisions':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: List the revisions\n      description: \u003e\n        When creating a score or saving a new version of a score, a revision is\n        created in our storage. This method allows you to list all of them,\n        sorted by last modification.\n\n\n        Depending the plan of the account, this list can be trunked to the few\n        last revisions.\n      operationId: getScoreRevisions\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of revisions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreRevision'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n    post:\n      tags:\n        - Score\n      summary: Create a new revision\n      description: |\n        Update a score by uploading a new revision for this one.\n      operationId: createScoreRevision\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScoreRevisionCreation'\n        required: true\n      responses:\n        '200':\n          description: The new created revision metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreRevision'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to modify this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n      x-codegen-request-body-name: body\n  '/scores/{score}/revisions/{revision}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: revision\n        in: path\n        description: \u003e\n          Unique identifier of a score revision. You can use `last` to fetch the\n          information related to the last version created.\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    get:\n      tags:\n        - Score\n      summary: Get a score revision\n      description: \u003e\n        When creating a score or saving a new version of a score, a revision is\n        created in our storage. This method allows you to get a specific\n\n        revision metadata.\n      operationId: getScoreRevision\n      responses:\n        '200':\n          description: Revision metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreRevision'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n  '/scores/{score}/revisions/{revision}/{format}':\n    parameters:\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: revision\n        in: path\n        description: \u003e\n          Unique identifier of a score revision. You can use `last` to fetch the\n          information related to the last version created.\n        required: true\n        schema:\n          type: string\n      - name: format\n        in: path\n        description: The format of the file you will retrieve\n        required: true\n        schema:\n          type: string\n          enum:\n            - json\n            - mxl\n            - xml\n            - mp3\n            - wav\n            - midi\n            - thumbnail.png\n            - synchronizationPoints\n    get:\n      tags:\n        - Score\n      summary: Get a score revision data\n      description: \u003e\n        Retrieve the file corresponding to a score revision (the following\n        formats are available): Flat JSON/Adagio JSON `json`, MusicXML\n\n        `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, a tumbnail of the first\n        page `thumbnail.png` or auto sync points `synchronizationPoints`.\n      operationId: getScoreRevisionData\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n        - name: parts\n          in: query\n          description: \u003e\n            An optional a set of parts uuid to be exported. This parameter must\n            be composed of parts uuids\n\n            separated by commas. For example\n            \"59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\".\n          schema:\n            type: string\n        - name: onlyCached\n          in: query\n          description: |\n            Only return files already generated and cached in Flat's production\n            cache. If the file is not availabe, a 404 will be returned\n          schema:\n            type: boolean\n        - name: url\n          in: query\n          description: |\n            Returns a json with the `url` in it instead of redirecting\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Revision data\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                type: string\n                format: binary\n            application/vnd.recordare.musicxml:\n              schema:\n                type: string\n                format: binary\n            audio/mp3:\n              schema:\n                type: string\n                format: binary\n            audio/wav:\n              schema:\n                type: string\n                format: binary\n            audio/midi:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '403':\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score or associated file not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n  /collections:\n    get:\n      tags:\n        - Collection\n      summary: List the collections\n      description: \u003e\n        Use this method to list the user's collections contained in `parent` (by\n        default in the `root` collection).\n\n        If no sort option is provided, the collections are sorted by\n        `creationDate` `desc`.\n\n\n        Note that this method will not include the `parent` collection in the\n        listing.\n\n        For example, if you need the details of the `root` collection, you can\n        use `GET /v2/collections/root`.\n      operationId: listCollections\n      parameters:\n        - name: parent\n          in: query\n          description: \u003e\n            List the collection contained in this `parent` collection.\n\n\n            This option doesn't provide a complete multi-level collection\n            support.\n\n            When sharing a collection with someone, this one will have as\n            `parent` `sharedWithMe`.\n          schema:\n            type: string\n            default: root\n        - name: sort\n          in: query\n          description: Sort\n          schema:\n            type: string\n            enum:\n              - creationDate\n              - title\n        - name: direction\n          in: query\n          description: Sort direction\n          schema:\n            type: string\n            enum:\n              - asc\n              - desc\n        - name: limit\n          in: query\n          description: This is the maximum number of objects that may be returned\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n            default: 25\n        - name: next\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the next page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n        - name: previous\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the previous page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of collections\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Collection'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n            - collections.readonly\n    post:\n      tags:\n        - Collection\n      summary: Create a new collection\n      description: \u003e\n        This method will create a new collection and add it to your `root`\n        collection.\n      operationId: createCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionCreation'\n        required: true\n      responses:\n        '200':\n          description: Collection created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n        '400':\n          description: Bad collection creation request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n      x-codegen-request-body-name: body\n  '/collections/{collection}':\n    parameters:\n      - name: collection\n        in: path\n        description: \u003e\n          Unique identifier of the collection.\n\n          The following aliases are supported:\n\n          - `root`: The root collection of the account\n\n          - `sharedWithMe`: Automatically contains new resources that have been\n          shared individually\n\n          - `trash`: Automatically contains resources that have been deleted\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Collection\n      summary: Get collection details\n      operationId: getCollection\n      parameters:\n        - name: sharingKey\n          in: query\n          description: \u003e\n            This sharing key must be specified to access to a score or\n            collection with a `privacy` mode set to `privateLink` and the\n            current user is not a collaborator of the document.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Collection details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n        '403':\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n            - collections.readonly\n    put:\n      tags:\n        - Collection\n      summary: Update a collection's metadata\n      operationId: editCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionModification'\n        required: false\n      responses:\n        '200':\n          description: Collection details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n        '403':\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Collection\n      summary: Delete the collection\n      description: \u003e\n        This method will schedule the deletion of the collection. Until deleted,\n        the collection will be available in the `trash`.\n      operationId: deleteCollection\n      responses:\n        '204':\n          description: Collection deleted\n        '403':\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n  '/collections/{collection}/untrash':\n    parameters:\n      - name: collection\n        in: path\n        description: \u003e\n          Unique identifier of the collection.\n\n          The following aliases are supported:\n\n          - `root`: The root collection of the account\n\n          - `sharedWithMe`: Automatically contains new resources that have been\n          shared individually\n\n          - `trash`: Automatically contains resources that have been deleted\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Collection\n      summary: Untrash a collection\n      description: \u003e\n        This method will restore the collection by removing it from the `trash`\n        and add it back to the `root` collection.\n      operationId: untrashCollection\n      responses:\n        '204':\n          description: The score has been untrashed\n        '403':\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n  '/collections/{collection}/scores':\n    parameters:\n      - name: collection\n        in: path\n        description: \u003e\n          Unique identifier of the collection.\n\n          The following aliases are supported:\n\n          - `root`: The root collection of the account\n\n          - `sharedWithMe`: Automatically contains new resources that have been\n          shared individually\n\n          - `trash`: Automatically contains resources that have been deleted\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    get:\n      tags:\n        - Collection\n      summary: List the scores contained in a collection\n      description: \u003e\n        Use this method to list the scores contained in a collection.\n\n        If no sort option is provided, the scores are sorted by\n        `modificationDate` `desc`.\n      operationId: listCollectionScores\n      parameters:\n        - name: sort\n          in: query\n          description: Sort\n          schema:\n            type: string\n            enum:\n              - creationDate\n              - modificationDate\n              - title\n        - name: direction\n          in: query\n          description: Sort direction\n          schema:\n            type: string\n            enum:\n              - asc\n              - desc\n        - name: limit\n          in: query\n          description: This is the maximum number of objects that may be returned\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n            default: 25\n        - name: next\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the next page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n        - name: previous\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the previous page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of scores\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n  '/collections/{collection}/scores/{score}':\n    parameters:\n      - name: collection\n        in: path\n        description: \u003e\n          Unique identifier of the collection.\n\n          The following aliases are supported:\n\n          - `root`: The root collection of the account\n\n          - `sharedWithMe`: Automatically contains new resources that have been\n          shared individually\n\n          - `trash`: Automatically contains resources that have been deleted\n        required: true\n        schema:\n          type: string\n      - name: score\n        in: path\n        description: \u003e\n          Unique identifier of the score document. This can be a Flat Score\n          unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a\n          Google Drive file, the Drive file unique identifier prefixed with\n          `drive-` (e.g. `drive-0B000000000`).\n        required: true\n        schema:\n          type: string\n      - name: sharingKey\n        in: query\n        description: \u003e\n          This sharing key must be specified to access to a score or collection\n          with a `privacy` mode set to `privateLink` and the current user is not\n          a collaborator of the document.\n        schema:\n          type: string\n    put:\n      tags:\n        - Collection\n      summary: Add a score to the collection\n      description: \u003e\n        This operation will add a score to a collection. The default behavior\n        will make the score available across multiple collections.\n\n        You must have the capability `canAddScores` on the provided `collection`\n        to perform the action.\n      operationId: addScoreToCollection\n      responses:\n        '200':\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreDetails'\n        '403':\n          description: Not granted to access to this collection or score\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Collection or score not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n            - collections.add_scores\n    delete:\n      tags:\n        - Collection\n      summary: Delete a score from the collection\n      description: \u003e\n        This method will delete a score from the collection. Unlike [`DELETE\n        /scores/{score}`](#operation/deleteScore), this score will not remove\n        the score from your account, but only from the collection.\n\n        This can be used to *move* a score from one collection to another, or\n        simply remove a score from one collection when this one is contained in\n        multiple collections.\n      operationId: deleteScoreFromCollection\n      responses:\n        '204':\n          description: Score removed from the collection\n        '403':\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - collections\n  '/users/{user}':\n    parameters:\n      - name: user\n        in: path\n        description: \u003e\n          This route parameter is the unique identifier of the user. You can\n          specify an email instead of an unique identifier. If you are executing\n          this request authenticated, you can use `me` as a value instead of the\n          current User unique identifier to work on the current authenticated\n          user.\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - User\n      summary: Get a public user profile\n      description: |\n        Get a public profile of a Flat User.\n      operationId: getUser\n      responses:\n        '200':\n          description: The user public details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPublic'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - account.public_profile\n            - account.education_profile\n  '/users/{user}/likes':\n    parameters:\n      - name: user\n        in: path\n        description: \u003e\n          Unique identifier of a Flat user. If you authenticated, you can use\n          `me` to refer to the current user.\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - User\n        - Score\n      summary: List liked scores\n      operationId: gerUserLikes\n      parameters:\n        - name: ids\n          in: query\n          description: Return only the identifiers of the scores\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of liked scores\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - account.public_profile\n  '/users/{user}/scores':\n    parameters:\n      - name: user\n        in: path\n        description: \u003e\n          Unique identifier of a Flat user. If you authenticated, you can use\n          `me` to refer to the current user.\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - User\n        - Score\n      summary: List user's scores\n      description: \u003e\n        Get the list of public scores owned by a User.\n\n\n        **DEPRECATED**: Please note that the current behavior will be\n        deprecrated on **2019-01-01**.\n\n        This method will no longer list private and shared scores, but only\n        public scores of a Flat account.\n\n        If you want to access to private scores, please use the [Collections\n        API](#tag/Collection) instead.\n      operationId: getUserScores\n      parameters:\n        - name: parent\n          in: query\n          description: Filter the score forked from the score id `parent`\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The user scores\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      x-code-samples:\n        - lang: JavaScript\n          source: \u003e\n            var FlatApi = require('flat-api');\n\n            FlatApi.ApiClient.instance.authentications.OAuth2.accessToken =\n            process.env.FLAT_ACCESS_TOKEN;\n\n\n            // List the scores for the current authenticated user (\"me\"):\n\n            new FlatApi.ScoreApi().getUserScores('me', {}, function (error,\n            data, response) {\n              if (error) {\n                console.error(error);\n              }\n              else {\n                console.log('Successfully create the document:', data);\n              }\n            });\n        - lang: PHP\n          source: \u003e\n            \u003c?php\n\n            require_once(__DIR__ . '/vendor/autoload.php');\n\n\n            // Configure OAuth2 access token\n\n            Flat\\APIClient\\Configuration::getDefaultConfiguration()-\u003esetAccessToken($_ENV['FLAT_ACCESS_TOKEN']);\n\n\n            $api = new Flat\\APIClient\\Api\\ScoreApi();\n\n\n            try {\n                $result = $api-\u003egetUserScores();\n                print_r($result);\n            } catch (Exception $e) {\n                echo 'Exception when calling ScoreApi-\u003egetUserScores: ', $e-\u003egetMessage(), PHP_EOL;\n            }\n  /organizations/users:\n    get:\n      tags:\n        - Organization\n      summary: List the organization users\n      operationId: listOrganizationUsers\n      parameters:\n        - name: sort\n          in: query\n          description: The order to sort the user list\n          schema:\n            type: string\n            items:\n              type: string\n              enum:\n                - firstname\n                - lastname\n                - lastActivityDate\n                - licenseExpirationDate\n        - $ref: '#/components/parameters/sortDirection'\n        - $ref: '#/components/parameters/next'\n        - $ref: '#/components/parameters/previous'\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/searchInputQuery'\n        - $ref: '#/components/parameters/groupIds'\n        - $ref: '#/components/parameters/noActiveLicense'\n        - name: licenseExpirationDate\n          in: query\n          description: Filter users by license expiration date or `active` / `notActive`\n          schema:\n            type: array\n            items:\n              type: string\n        - name: onlyIds\n          in: query\n          description: Return only user ids\n          schema:\n            type: boolean\n        - name: limit\n          in: query\n          description: This is the maximum number of objects that may be returned\n          schema:\n            maximum: 1000\n            minimum: 1\n            type: integer\n            default: 25\n      responses:\n        '200':\n          description: List of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserDetailsAdmin'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n    post:\n      tags:\n        - Organization\n      summary: Create a new user account\n      operationId: createOrganizationUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreation'\n        required: false\n      responses:\n        '200':\n          description: New user created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetailsAdmin'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      x-codegen-request-body-name: body\n  /organizations/users/count:\n    get:\n      tags:\n        - Organization\n      summary: Count the organization users using the provided filters\n      operationId: countOrgaUsers\n      parameters:\n        - $ref: '#/components/parameters/role'\n        - $ref: '#/components/parameters/searchInputQuery'\n        - $ref: '#/components/parameters/groupIds'\n        - $ref: '#/components/parameters/noActiveLicense'\n      responses:\n        '200':\n          description: Number of users\n          content:\n            application/json:\n              schema:\n                type: integer\n                items:\n                  $ref: '#/components/schemas/UserDetailsAdmin'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n  '/organizations/users/{user}':\n    parameters:\n      - name: user\n        in: path\n        description: |\n          Unique identifier of the Flat account\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - Organization\n      summary: Update account information\n      operationId: updateOrganizationUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserAdminUpdate'\n        required: true\n      responses:\n        '200':\n          description: User updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetailsAdmin'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Organization\n      summary: Remove an account from Flat\n      description: \u003e\n        This operation removes an account from Flat and its data, including:\n\n        * The music scores created by this user (documents, history, comments,\n        collaboration information)\n\n        * Education related data (assignments and classroom information)\n      operationId: removeOrganizationUser\n      parameters:\n        - name: convertToIndividual\n          in: query\n          description: \u003e\n            If `true`, the account will be only removed from the organization\n            and converted into an individual account on our public website,\n            https://flat.io.\n\n            This operation will remove the education-related data from the\n            account.\n\n            Before realizing this operation, you need to be sure that the user\n            is at least 13 years old and that this one has read and agreed to\n            the Individual Terms of Services of Flat available on\n            https://flat.io/legal.\n          schema:\n            type: boolean\n      responses:\n        '204':\n          description: User deleted\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n  /organizations/invitations:\n    get:\n      tags:\n        - Organization\n      summary: List the organization invitations\n      operationId: listOrganizationInvitations\n      parameters:\n        - name: role\n          in: query\n          description: Filter users by role\n          schema:\n            type: string\n            enum:\n              - user\n              - teacher\n              - admin\n        - name: limit\n          in: query\n          description: This is the maximum number of objects that may be returned\n          schema:\n            maximum: 1000\n            minimum: 1\n            type: integer\n            default: 50\n        - name: next\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the next page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n        - name: previous\n          in: query\n          description: \u003e\n            An opaque string cursor to fetch the previous page of data.\n\n            The paginated API URLs are returned in the `Link` header when\n            requesting the API. These URLs will contain a `next` and `previous`\n            cursor based on the available data.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of invitations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizationInvitation'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n    post:\n      tags:\n        - Organization\n      summary: Create a new invitation to join the organization\n      description: \u003e\n        This method creates and sends invitation for teachers and admins.\n\n\n        Invitations can only be used by new Flat users or users who are not part\n        of the organization yet.\n\n\n        If the email of the user is already associated to a user of your\n        organization, the API will simply update the role of the existing user\n        and won't send an invitation. In this case, the property `usedBy` will\n        be directly filled with the uniquer identifier of the corresponding\n        user.\n      operationId: createOrganizationInvitation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationInvitationCreation'\n        required: false\n      responses:\n        '200':\n          description: New invitation created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationInvitation'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      x-codegen-request-body-name: body\n  '/organizations/invitations/{invitation}':\n    parameters:\n      - name: invitation\n        in: path\n        description: Unique identifier of the invitation\n        required: true\n        schema:\n          type: string\n    delete:\n      tags:\n        - Organization\n      summary: Remove an organization invitation\n      operationId: removeOrganizationInvitation\n      responses:\n        '204':\n          description: The invitation has been removed\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n  /organizations/lti/credentials:\n    get:\n      tags:\n        - Organization\n      summary: List LTI 1.x credentials\n      operationId: listLtiCredentials\n      responses:\n        '200':\n          description: The list of LTI Credentials\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LtiCredentials'\n        '403':\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n            - edu.admin.lti.readonly\n    post:\n      tags:\n        - Organization\n      summary: Create a new couple of LTI 1.x credentials\n      description: \u003e\n        Flat for Education is a Certified LTI Provider. You can use these API\n        methods to automate the creation of LTI credentials. You can read more\n        about our LTI implementation, supported components and LTI Endpoints in\n        our [Developer Documentation](https://flat.io/developers/docs/lti/).\n      operationId: createLtiCredentials\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LtiCredentialsCreation'\n        required: true\n      responses:\n        '200':\n          description: The LTI Credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LtiCredentials'\n        '403':\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n      x-codegen-request-body-name: body\n  '/organizations/lti/credentials/{credentials}':\n    parameters:\n      - name: credentials\n        in: path\n        description: |\n          Credentials unique identifier\n        required: true\n        schema:\n          type: string\n    delete:\n      tags:\n        - Organization\n      summary: Revoke LTI 1.x credentials\n      operationId: revokeLtiCredentials\n      responses:\n        '204':\n          description: Credentials revoked\n        '403':\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Credentials not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n  /classes:\n    get:\n      tags:\n        - Class\n      summary: List the classes available for the current user\n      operationId: listClasses\n      parameters:\n        - name: state\n          in: query\n          description: Filter the classes by state\n          schema:\n            type: string\n            default: active\n            enum:\n              - active\n              - inactive\n              - archived\n      responses:\n        '200':\n          description: The list of classes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n    post:\n      tags:\n        - Class\n      summary: Create a new class\n      description: \u003e\n        Classrooms on Flat allow you to create activities with assignments and\n        post content to a specific group.\n\n\n        When creating a class, Flat automatically creates two groups: one for\n        the teachers of the course, one for the students. The creator of this\n        class is automatically added to the teachers group.\n\n\n        If the classsroom is synchronized with another application like Google\n        Classroom, some of the meta information will automatically be updated.\n\n\n        You can add users to this class using `PUT\n        /classes/{class}/users/{user}`, they will automatically added to the\n        group based on their role on Flat. Users can also enroll themselves to\n        this class using `POST /classes/enroll/{enrollmentCode}` and the\n        `enrollmentCode` returned in the `ClassDetails` response.\n      operationId: createClass\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClassCreation'\n        required: true\n      responses:\n        '200':\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        '402':\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n      x-codegen-request-body-name: body\n  '/classes/{class}':\n    parameters:\n      - $ref: '#/components/parameters/class'\n    get:\n      tags:\n        - Class\n      summary: Get the details of a single class\n      operationId: getClass\n      responses:\n        '200':\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n    put:\n      tags:\n        - Class\n      summary: Update the class\n      description: |\n        Update the meta information of the class\n      operationId: updateClass\n      requestBody:\n        description: Details of the Class\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClassUpdate'\n        required: false\n      responses:\n        '200':\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n      x-codegen-request-body-name: body\n  '/classes/{class}/archive':\n    parameters:\n      - $ref: '#/components/parameters/class'\n    post:\n      tags:\n        - Class\n      summary: Archive the class\n      description: \u003e\n        Mark the class as `archived`. When this course is synchronized with\n        another app, like Google Classroom, this state will be automatically be\n        updated.\n      operationId: archiveClass\n      responses:\n        '200':\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n    delete:\n      tags:\n        - Class\n      summary: Unarchive the class\n      description: \u003e\n        Mark the class as `active`. When this course is synchronized with\n        another app, like Google Classroom, this state will be automatically be\n        updated.\n      operationId: unarchiveClass\n      responses:\n        '200':\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n  '/classes/{class}/activate':\n    parameters:\n      - $ref: '#/components/parameters/class'\n    post:\n      tags:\n        - Class\n      summary: Activate the class\n      description: \u003e\n        Mark the class as `active`. This is mainly used for classes synchronized\n        from Clever that are initially with an `inactive` state and hidden in\n        the UI.\n      operationId: activateClass\n      responses:\n        '200':\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n  '/classes/{class}/users/{user}':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - name: user\n        in: path\n        description: Unique identifier of the user\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - Class\n      summary: Add a user to the class\n      description: \u003e\n        This method can be used by a teacher of the class to enroll another Flat\n        user into the class.\n\n\n        Only users that are part of your Organization can be enrolled in a class\n        of this same Organization.\n\n\n        When enrolling a user in the class, Flat will automatically add this\n        user to the corresponding Class group, based on this role in the\n        Organization.\n      operationId: addClassUser\n      responses:\n        '204':\n          description: The user has been added to the class\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n    delete:\n      tags:\n        - Class\n      summary: Remove a user from the class\n      description: \u003e\n        This method can be used by a teacher to remove a user from the class, or\n        by a student to leave the classroom.\n\n\n        Warning: Removing a user from the class will remove the associated\n        resources, including the submissions and feedback related to these\n        submissions.\n      operationId: deleteClassUser\n      responses:\n        '204':\n          description: The user has been removed from the class\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n  '/classes/{class}/students/{user}/submissions':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - name: user\n        in: path\n        description: Unique identifier of the user\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Class\n      summary: List the submissions for a student\n      description: \u003e\n        Use this method as a teacher to list all the assignment submissions sent\n        by a student of the class\n      operationId: listClassStudentSubmissions\n      responses:\n        '200':\n          description: The list of submissions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n  '/classes/{class}/assignments':\n    parameters:\n      - $ref: '#/components/parameters/class'\n    get:\n      tags:\n        - Class\n      summary: Assignments listing\n      operationId: listAssignments\n      responses:\n        '200':\n          description: List of assignments for the class\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Assignment'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n    post:\n      tags:\n        - Class\n      summary: Assignment creation\n      description: \u003e\n        Use this method as a teacher to create and post a new assignment to a\n        class.\n\n\n        If the class is synchronized with Google Classroom, the assignment will\n        be automatically posted to your Classroom course.\n      operationId: createAssignment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentCreation'\n        required: false\n      responses:\n        '200':\n          description: The assignment has been created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Assignment'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      x-codegen-request-body-name: body\n  '/classes/{class}/assignments/{assignment}/copy':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n    post:\n      tags:\n        - Class\n      summary: Copy an assignment\n      description: \u003e\n        Copy an assignment to a specified class.\n\n\n        If the original assignment has a due date in the past, this new\n        assingment will be created without a due date.\n\n\n        If the new class is synchronized with an external app (e.g. Google\n        Classroom), the copied assignment will also be posted on the external\n        app.\n      operationId: copyAssignment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentCopy'\n        required: true\n      responses:\n        '200':\n          description: The new created assingment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Assignment'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      x-codegen-request-body-name: body\n  '/classes/{class}/assignments/{assignment}/archive':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n    post:\n      tags:\n        - Class\n      summary: Archive the assignment\n      description: |\n        Archive the assignment\n      operationId: archiveAssignment\n      responses:\n        '200':\n          description: The assignment details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Assignment'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n    delete:\n      tags:\n        - Class\n      summary: Unarchive the assignment.\n      description: |\n        Mark the assignment as `active`.\n      operationId: unarchiveAssignment\n      responses:\n        '200':\n          description: The assignment details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Assignment'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n  '/classes/{class}/assignments/{assignment}/submissions':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n    get:\n      tags:\n        - Class\n      summary: List the students' submissions\n      operationId: getSubmissions\n      responses:\n        '200':\n          description: The submissions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n    put:\n      tags:\n        - Class\n      summary: Create or edit a submission\n      description: \u003e\n        Use this method as a student to create, update and submit a submission\n        related to an assignment.\n\n        Students can only set `attachments` and `submit`.\n\n        Teachers can use `PUT\n        /classes/{class}/assignments/{assignment}/submissions/{submission}` to\n        update a submission by id.\n      operationId: createSubmission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentSubmissionUpdate'\n        required: true\n      responses:\n        '200':\n          description: The submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      x-codegen-request-body-name: body\n  '/classes/{class}/assignments/{assignment}/submissions/csv':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n    get:\n      tags:\n        - Class\n      summary: CSV Grades exports\n      description: Export list of submissions grades to a CSV file\n      operationId: exportSubmissionsReviewsAsCsv\n      responses:\n        '200':\n          description: List of submissions\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n        default:\n          description: Error\n          content:\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n  '/classes/{class}/assignments/{assignment}/submissions/excel':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n    get:\n      tags:\n        - Class\n      summary: Excel Grades exports\n      description: Export list of submissions grades to an Excel file\n      operationId: exportSubmissionsReviewsAsExcel\n      responses:\n        '200':\n          description: List of submissions\n          content:\n            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:\n              schema:\n                type: string\n                format: binary\n        default:\n          description: Error\n          content:\n            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n  '/classes/{class}/assignments/{assignment}/submissions/{submission}':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n      - $ref: '#/components/parameters/submission'\n    get:\n      tags:\n        - Class\n      summary: Get a student submission\n      operationId: getSubmission\n      responses:\n        '200':\n          description: A submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n    put:\n      tags:\n        - Class\n      summary: Edit a submission\n      description: \u003e\n        Use this method as a teacher to update the different submission and give\n        feedback.\n\n        Teachers can only set `return`, `draftGrade` and `grade`\n      operationId: editSubmission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentSubmissionUpdate'\n        required: true\n      responses:\n        '200':\n          description: The submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssignmentSubmission'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Class\n      summary: Delete a submission\n      description: \u003e\n        Use this method as a teacher to delete a submission and allow student to\n        start over the assignment\n      operationId: deleteSubmission\n      parameters:\n        - $ref: '#/components/parameters/class'\n        - $ref: '#/components/parameters/assignment'\n        - $ref: '#/components/parameters/submission'\n      responses:\n        '204':\n          description: The submission has been deleted\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      x-codegen-request-body-name: body\n  '/classes/{class}/assignments/{assignment}/submissions/{submission}/history':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n      - $ref: '#/components/parameters/submission'\n    get:\n      tags:\n        - Class\n      operationId: getSubmissionHistory\n      summary: Get the history of the submission\n      description: \u003e\n        For teachers only. Returns a detailed history of the submission. This\n        currently includes state and grade histories.\n      security:\n        - OAuth2:\n            - edu.assignments\n            - edu.assignments.readonly\n      responses:\n        '200':\n          description: The history of the submission\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssignmentSubmissionHistory'\n        '403':\n          description: Not granted to access to this submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Submission not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n  '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n      - $ref: '#/components/parameters/submission'\n    get:\n      tags:\n        - Class\n      operationId: getSubmissionComments\n      summary: List the feedback comments of a submission\n      security:\n        - OAuth2:\n            - edu.assignments\n            - edu.assignments.readonly\n      responses:\n        '200':\n          description: The comments of the score\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssignmentSubmissionComment'\n        '403':\n          description: Not granted to access to this submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Submission not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n    post:\n      tags:\n        - Class\n      operationId: postSubmissionComment\n      summary: Add a feedback comment to a submission\n      security:\n        - OAuth2:\n            - edu.assignments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentSubmissionCommentCreation'\n        required: true\n      responses:\n        '200':\n          description: The comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssignmentSubmissionComment'\n        '403':\n          description: Not granted to access to this submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Submission not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n  '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}':\n    parameters:\n      - $ref: '#/components/parameters/class'\n      - $ref: '#/components/parameters/assignment'\n      - $ref: '#/components/parameters/submission'\n      - $ref: '#/components/parameters/comment'\n    put:\n      tags:\n        - Class\n      operationId: updateSubmissionComment\n      summary: Update a feedback comment to a submission\n      security:\n        - OAuth2:\n            - edu.assignments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignmentSubmissionCommentCreation'\n        required: true\n      responses:\n        '200':\n          description: The comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssignmentSubmissionComment'\n        '403':\n          description: Not granted to access to this submission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        '404':\n          description: Submission not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n    delete:\n      tags:\n        - Class\n      operationId: deleteSubmissionComment\n      summary: Delete a feedback comment to a submission\n      security:\n        - OAuth2:\n            - edu.assignments\n      responses:\n        '204':\n          description: The comment has been deleted\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n  '/classes/enroll/{enrollmentCode}':\n    parameters:\n      - name: enrollmentCode\n        in: path\n        description: |\n          The enrollment code, available to the teacher in `ClassDetails`\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Class\n      summary: Join a class\n      description: \u003e\n        Use this method to join a class using an enrollment code given one of\n        the teacher of this class. This code is also available in the\n        `ClassDetails` returned to the teachers when creating the class or\n        listing / fetching a specific class.\n\n\n        Flat will automatically add the user to the corresponding class group\n        based on this role in the organization.\n      operationId: enrollClass\n      responses:\n        '200':\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClassDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.classes\n  '/groups/{group}':\n    parameters:\n      - $ref: '#/components/parameters/group'\n    get:\n      tags:\n        - Group\n      summary: Get group information\n      operationId: getGroupDetails\n      responses:\n        '200':\n          description: The group details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n            - edu.classes\n            - edu.classes.readonly\n  '/groups/{group}/users':\n    parameters:\n      - $ref: '#/components/parameters/group'\n    get:\n      tags:\n        - Group\n      summary: List group's users\n      operationId: listGroupUsers\n      parameters:\n        - name: source\n          in: query\n          description: |\n            Filter the users by their source\n          schema:\n            type: string\n            enum:\n              - googleClassroom\n              - microsoftGraph\n              - clever\n      responses:\n        '200':\n          description: The list of users member of the group\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserPublic'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n            - edu.classes\n            - edu.classes.readonly\n  '/groups/{group}/scores':\n    parameters:\n      - $ref: '#/components/parameters/group'\n    get:\n      tags:\n        - Group\n        - Score\n      summary: List group's scores\n      description: |\n        Get the list of scores shared with a group.\n      operationId: getGroupScores\n      parameters:\n        - name: parent\n          in: query\n          description: Filter the score forked from the score id `parent`\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The group's scores\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScoreDetails'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlatErrorResponse'\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      description: \u003e\n        OAuth 2.0 authentication for your app or. Please only request the most\n        restrictive and needed scopes. Using some of the scopes may require an\n        additional review from our team. The Flat API supports **authorization\n        code** and **implicit** flows.\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://flat.io/auth/oauth'\n          tokenUrl: 'https://api.flat.io/oauth/access_token'\n          scopes:\n            account.public_profile: \u003e\n              Provides access to the basic person's public profile. Education\n              profiles may be anonymized with this scope, you can request the\n              scope `education_profile` to access to the a basic education\n              account profile.\n            account.email: |\n              Provices access to the person's email.\n            account.education_profile: \u003e\n              Provides access to the basic person's education profile and public\n              organization information.\n            scores.readonly: \u003e\n              Allows read-only access to all a user's scores. You won't need\n              this scope to read public scores.\n            scores.social: |\n              Allow to post comments and like scores\n            scores: |\n              Full, permissive scope to access all of a user's scores.\n            collections.readonly: Allow read-only access to a user's collections.\n            collections.add_scores: Allow to add scores to a user's collections.\n            collections: 'Full, permissive scope to access all of a user''s collections.'\n            edu.classes: 'Full, permissive scope to manage the classes.'\n            edu.classes.readonly: Read-only access to the classes.\n            edu.assignments: Read-write access to the assignments and submissions.\n            edu.assignments.readonly: Read-only access to the assignments and submissions.\n            edu.admin: 'Full, permissive scope to manage all the admin of an organization.'\n            edu.admin.lti: Access and manage the LTI Credentials for an organization.\n            edu.admin.lti.readonly: Read-only access to the LTI Credentials of an organization.\n            edu.admin.users: Access and manage the users and invitations of the organization.\n            edu.admin.users.readonly: Read-only access to the users and invitations of the organization.\n  schemas:\n    FlatLocales:\n      type: string\n      description: The user language\n      default: en\n      enum:\n        - en\n        - en-GB\n        - es\n        - fr\n        - de\n        - it\n        - ja\n        - ko\n        - nl\n        - pl\n        - pt\n        - pt-BR\n        - ro\n        - ru\n        - sv\n        - tr\n        - zh-Hans\n    OrganizationRoles:\n      type: string\n      nullable: true\n      description: User's Organization Role (for Edu users only)\n      enum:\n        - admin\n        - billing\n        - teacher\n        - user\n    ClassRoles:\n      type: string\n      nullable: true\n      description: User's Class Role (for Edu users only)\n      enum:\n        - teacher\n        - student\n    LicenseMode:\n      type: string\n      description: Mode of the license\n      enum:\n        - credit\n        - site\n    LicenseSources:\n      type: string\n      description: Source of the license\n      default: order\n      enum:\n        - order\n        - trial\n        - voucher\n        - distributor\n        - subscription\n        - appStore\n    UserBasics:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The user unique identifier\n        type:\n          type: string\n          description: The type of user account\n          enum:\n            - user\n            - guest\n        username:\n          type: string\n          description: The user name (unique for the organization)\n        printableName:\n          type: string\n          description: \u003e-\n            The name that can be directly printed (name, firstname \u0026 lastname,\n            or username)\n        firstname:\n          type: string\n          description: Firstname of the user (for education users)\n        lastname:\n          type: string\n          description: Lastname of the user (for education users)\n        name:\n          type: string\n          description: A displayable name for the user (for consumer users)\n        picture:\n          type: string\n          nullable: true\n          description: The URL of the picture to display\n        isPowerUser:\n          type: boolean\n          description: User license status. 'true' if user is an individual Power user\n        isFlatTeam:\n          type: boolean\n          description: Will be 'true' if user is part of the Flat Team\n      example:\n        id: '000000000000000000000001'\n        username: flat\n        name: Flat Team\n        printableName: Flat Team\n        picture: 'https://flat.io/img/logo_flat.svg'\n        isPowerUser: true\n        isFlatTeam: true\n      discriminator:\n        propertyName: type\n    UserPublicSummary:\n      description: Public User details summary\n      allOf:\n        - $ref: '#/components/schemas/UserBasics'\n        - type: object\n          properties:\n            organization:\n              type: string\n              description: Organization ID (for Edu users only)\n            organizationRole:\n              $ref: '#/components/schemas/OrganizationRoles'\n            classRole:\n              $ref: '#/components/schemas/ClassRoles'\n            htmlUrl:\n              type: string\n              description: Link to user profile (for Indiv. users only)\n    UserPublic:\n      description: Public User details\n      allOf:\n        - $ref: '#/components/schemas/UserPublicSummary'\n        - type: object\n          properties:\n            bio:\n              type: string\n              description: User's biography\n            registrationDate:\n              type: string\n              description: Date the user signed up\n              format: date-time\n            likedScoresCount:\n              type: integer\n              description: Number of the scores liked by the user\n            followersCount:\n              type: integer\n              description: Number of followers the user have\n            followingCount:\n              type: integer\n              description: Number of people the user follow\n            ownedPublicScoresCount:\n              type: integer\n              description: Number of public scores the user have\n            coverPicture:\n              type: string\n              description: Cover picture (backgroud) for the profile\n            profileTheme:\n              type: string\n              description: Theme (background) for the profile\n            instruments:\n              type: array\n              description: \u003e\n                An array of the instrument identifiers.\n\n                The format of the strings is\n                `{instrument-group}.{instrument-id}`.\n              items:\n                type: string\n    UserDetailsAdmin:\n      description: User details (view for organization teacher / admin)\n      allOf:\n        - $ref: '#/components/schemas/UserPublicSummary'\n        - type: object\n          properties:\n            email:\n              type: string\n              description: Email of the user\n              format: email\n            lastActivityDate:\n              type: string\n              description: Date of the last user activity\n              format: date-time\n            license:\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: ID of the current license\n                expirationDate:\n                  type: string\n                  description: Date when the license expires\n                  format: date-time\n                source:\n                  $ref: '#/components/schemas/LicenseSources'\n                mode:\n                  $ref: '#/components/schemas/LicenseMode'\n                active:\n                  type: boolean\n                  description: ID of the current license\n              description: Current active license of the user\n    UserCreation:\n      required:\n        - password\n        - username\n      type: object\n      properties:\n        username:\n          maxLength: 30\n          minLength: 1\n          pattern: '^[A-Za-z0-9\\-_.]+$'\n          type: string\n          description: Username of the new account\n        firstname:\n          maxLength: 60\n          type: string\n          description: First name of the user\n        lastname:\n          maxLength: 60\n          type: string\n          description: Last name of the user\n        email:\n          type: string\n          description: Email of the new account\n          format: email\n        password:\n          minLength: 6\n          maxLength: 1000\n          type: string\n          description: Password of the new account\n          format: password\n        locale:\n          $ref: '#/components/schemas/FlatLocales'\n      description: User creation\n    UserAdminUpdate:\n      type: object\n      properties:\n        password:\n          minLength: 6\n          maxLength: 1000\n          type: string\n          description: Password of the account\n          format: password\n        organizationRole:\n          $ref: '#/components/schemas/OrganizationRoles'\n        username:\n          maxLength: 30\n          minLength: 1\n          pattern: '^[A-Za-z0-9\\-_.]+$'\n          type: string\n          description: Username of the account\n        firstname:\n          maxLength: 60\n          type: string\n          description: First name of the user\n        lastname:\n          maxLength: 60\n          type: string\n          description: Last name of the user\n        email:\n          type: string\n          description: Email of the account\n          format: email\n      description: User update as an organization admin\n    UserDetails:\n      description: User details\n      allOf:\n        - $ref: '#/components/schemas/UserPublic'\n        - type: object\n          properties:\n            id:\n              type: string\n              description: Identifier of the user\n            type:\n              type: string\n              description: The type of account\n              enum:\n                - user\n                - guest\n            privateProfile:\n              type: boolean\n              description: \u003e-\n                Tell either this user profile is private or not (individual\n                accounts only)\n            locale:\n              $ref: '#/components/schemas/FlatLocales'\n            pictureFile:\n              type: string\n              nullable: true\n              description: The ID of the user profile picture\n            coverPictureFile:\n              type: string\n              nullable: true\n              description: The ID of the user profile cover picture\n    Group:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the group\n        name:\n          type: string\n          description: The display name of the group\n        type:\n          type: string\n          description: \u003e\n            The type of the group:\n\n            * `generic`: A group created by a Flat user\n\n            * `classTeachers`: A group created automaticaly by Flat that\n            contains\n              the teachers of a class\n            * `classStudents`: A group created automaticaly by Flat that\n            contains\n              the studnets of a class\n          enum:\n            - generic\n            - classTeachers\n            - classStudents\n        usersCount:\n          type: number\n          description: The number of users in this group\n        readOnly:\n          type: boolean\n          description: |\n            `True` if the group is set in read-only\n        organization:\n          type: string\n          description: |\n            If the group is related to an organization, this field will contain\n            the unique identifier of the organization\n        creationDate:\n          type: string\n          description: The creation date of the group\n          format: date-time\n      description: A group of users\n      example:\n        id: '0000000000000000000000043'\n        name: 5th grade\n        type: classTeachers\n        userCount: 24\n        readOnly: true\n        organization: '0000000000000000000000042'\n        creationDate: '2015-01-19T00:22:02.387Z'\n    ResourceRights:\n      type: object\n      properties:\n        aclRead:\n          type: boolean\n          description: |\n            `True` if the current user can read the current document\n          default: false\n        aclWrite:\n          type: boolean\n          description: \u003e\n            `True` if the current user can modify the current document.\n\n\n            If this is a right of a Collection, the capabilities of the\n            associated user can be lower than this permission, check out the\n            `capabilities` property as the end-user to have the complete\n            possibilities with the collection.\n          default: false\n        aclAdmin:\n          type: boolean\n          description: \u003e\n            `True` if the current user can manage the current document (i.e.\n            share, delete)\n\n\n            If this is a right of a Collection, the capabilities of the\n            associated user can be lower than this permission, check out the\n            `capabilities` property as the end-user to have the complete\n            possibilities with the collection.\n          default: false\n        isCollaborator:\n          type: boolean\n          description: \u003e\n            `True` if the current user is a collaborator of the current document\n            (direct or via group).\n          default: false\n      description: The rights of the current user on a score or collection\n      example:\n        aclRead: true\n        aclWrite: true\n        aclAdmin: true\n        isCollaborator: true\n    ResourceCollaborator:\n      description: \u003e\n        A collaborator of a score. The `userEmail` and `group` are only\n        available if the requesting user is a collaborator of the related score\n        (in this case these permissions will eventualy not be listed and exposed\n        publicly).\n      allOf:\n        - $ref: '#/components/schemas/ResourceRights'\n        - type: object\n          properties:\n            id:\n              type: string\n              description: The unique identifier of the permission\n            score:\n              type: string\n              description: \u003e-\n                If this object is a permission of a score, this property will\n                contain the unique identifier of the score\n            collection:\n              type: string\n              description: \u003e-\n                If this object is a permission of a collection, this property\n                will contain the unique identifier of the collection\n            user:\n              $ref: '#/components/schemas/UserPublic'\n            group:\n              $ref: '#/components/schemas/Group'\n            userEmail:\n              type: string\n              description: \u003e\n                If the collaborator is not a user of Flat yet, this field will\n                contain his email.\n            invited:\n              type: boolean\n              description: |\n                If this property is `true`, this is still a pending invitation\n    ResourceCollaboratorCreation:\n      type: object\n      properties:\n        user:\n          type: string\n          description: The unique identifier of a Flat user\n        group:\n          type: string\n          description: The unique identifier of a Flat group\n        userEmail:\n          type: string\n          description: |\n            Fill this field to invite an individual user by email.\n        userToken:\n          type: string\n          description: |\n            Token received in an invitation to join the score.\n        aclRead:\n          type: boolean\n          description: \u003e\n            `True` if the related user can read the score. (probably true if the\n            user has a permission on the document).\n          default: true\n        aclWrite:\n          type: boolean\n          description: |\n            `True` if the related user can modify the score.\n          default: false\n        aclAdmin:\n          type: boolean\n          description: \u003e\n            `True` if the related user can can manage the current document, i.e.\n            changing the document permissions and deleting the document\n          default: false\n      description: Add a collaborator to a resource.\n      example:\n        userEmail: jdoe@flat.io\n        aclRead: true\n        aclWrite: true\n        aclAdmin: false\n    ScoreSummary:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the score\n        sharingKey:\n          type: string\n          description: \u003e-\n            The private sharing key of the score (available when the `privacy`\n            mode is set to `privateLink`)\n        title:\n          type: string\n          description: The title of the score\n        privacy:\n          $ref: '#/components/schemas/ScorePrivacy'\n        user:\n          $ref: '#/components/schemas/UserPublicSummary'\n        htmlUrl:\n          type: string\n          description: The url where the score can be viewed in a web browser\n          format: url\n      description: A summary of the score details\n      example:\n        id: '000000000000000000000000'\n        title: My score\n        privacy: private\n        user:\n          id: '000000000000000000000001'\n          username: flat\n          name: Flat Team\n          printableName: Flat Team\n          picture: 'https://flat.io/img/logo_flat.svg'\n        htmlUrl: 'https://flat.io/score/000000000000000000000000'\n    ScoreLicense:\n      type: string\n      description: \u003e\n        License of the creation. Read more about the Creative Commons licenses\n        on https://creativecommons.org/licenses/\n      enum:\n        - copyright\n        - cc0\n        - cc-by\n        - cc-by-sa\n        - cc-by-nd\n        - cc-by-nc\n        - cc-by-nc-sa\n        - cc-by-nc-nd\n    ScoreCreationType:\n      type: string\n      description: 'The type of creation (an orginal, an arrangement)'\n      enum:\n        - original\n        - arrangement\n        - other\n    ScoreDetails:\n      description: The score and all its details\n      allOf:\n        - $ref: '#/components/schemas/ScoreSummary'\n        - type: object\n          properties:\n            subtitle:\n              type: string\n              description: Subtitle of the score\n            lyricist:\n              type: string\n              description: Lyricist of the score\n            arranger:\n              type: string\n              description: Arranger of the score\n            composer:\n              type: string\n              description: Composer of the score\n            description:\n              type: string\n              description: Description of the creation\n            tags:\n              type: array\n              description: Tags describing the score\n              items:\n                pattern: '^[a-zA-Z0-9]{1,30}$'\n                type: string\n            creationType:\n              $ref: '#/components/schemas/ScoreCreationType'\n            license:\n              $ref: '#/components/schemas/ScoreLicense'\n            licenseText:\n              type: string\n              description: Additional license text written on the exported/printed score\n            durationTime:\n              type: number\n              description: 'In seconds, an approximative duration of the score'\n            numberMeasures:\n              type: integer\n              description: The number of measures in the score\n            mainTempoQpm:\n              type: number\n              description: The main tempo of the score (in QPM)\n            rights:\n              $ref: '#/components/schemas/ResourceRights'\n            collaborators:\n              type: array\n              description: The list of the collaborators of the score\n              items:\n                $ref: '#/components/schemas/ResourceCollaborator'\n            creationDate:\n              type: string\n              description: The date when the score was created\n              format: date-time\n            modificationDate:\n              type: string\n              description: The date of the last revision of the score\n              format: date-time\n            publicationDate:\n              type: string\n              description: The date when the score was published on Flat\n              format: date-time\n            organization:\n              type: string\n              description: \u003e\n                If the score has been created in an organization, the identifier\n                of this organization. This property is especially used with the\n                score privacy `organizationPublic`.\n            parentScore:\n              type: string\n              description: \u003e\n                If the score has been forked, the unique identifier of the\n                parent score.\n            instruments:\n              type: array\n              description: \u003e\n                An array of the instrument identifiers used in the last version\n                of the score. This is mainly used to display a list of the\n                instruments in the Flat's UI or instruments icons. The format of\n                the strings is `{instrument-group}.{instrument-id}`.\n              items:\n                type: string\n            samples:\n              type: array\n              description: \u003e\n                An array of the audio samples identifiers used the different\n                score parts.\n\n                The format of the strings is `{instrument-group}.{sample-id}`.\n              items:\n                type: string\n            googleDriveFileId:\n              type: string\n              description: \u003e\n                If the user uses Google Drive and the score exists on Google\n                Drive, this field will contain the unique identifier of the Flat\n                score on Google Drive. You can access the document using the\n                url: `https://drive.google.com/open?id={googleDriveFileId}`\n            likes:\n              $ref: '#/components/schemas/ScoreLikesCounts'\n            comments:\n              $ref: '#/components/schemas/ScoreCommentsCounts'\n            views:\n              $ref: '#/components/schemas/ScoreViewsCounts'\n            plays:\n              $ref: '#/components/schemas/ScorePlaysCounts'\n            collections:\n              type: array\n              description: \u003e-\n                The List of parent collections, which includes all the\n                collections this score is included. Please note that you might\n                not have access to all of them.\n              items:\n                type: string\n    ScorePrivacy:\n      type: string\n      description: |\n        The score main privacy mode(public, private, privateLink and organizationPublic).\n      enum:\n        - public\n        - private\n        - organizationPublic\n        - privateLink\n    ScoreTrack:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the score track\n        title:\n          type: string\n          description: Title of the track\n        score:\n          type: string\n          description: The unique identifier of the score\n        creator:\n          type: string\n          description: The unique identifier of the track creator\n        creationDate:\n          type: string\n          description: The creation date of the track\n          format: date-time\n        modificationDate:\n          type: string\n          description: The modification date of the track\n          format: date-time\n        default:\n          type: boolean\n          description: True if the track should be used as default audio source\n        state:\n          $ref: '#/components/schemas/ScoreTrackState'\n        type:\n          $ref: '#/components/schemas/ScoreTrackType'\n        url:\n          type: string\n          description: The URL of the track\n        mediaId:\n          type: string\n          description: \u003e\n            The unique identifier of the track when hosted on an external\n            service.\n\n            For example, if the url is\n            `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be\n            `dQw4w9WgXcQ`\n        synchronizationPoints:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScoreTrackPoint'\n      description: An audio track for a score\n      example:\n        id: 59ecb20e563736b1e1f75dce\n        title: Rick Astley - Never Gonna Give You Up\n        type: youtube\n        url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n        mediaId: dQw4w9WgXcQ\n        creationDate: '2017-10-22T14:58:22.753Z'\n        modificationDate: '2017-10-22T14:58:33.424Z'\n        default: true\n        state: completed\n        creator: 5815d4b53269d90d2c80b71c\n        score: 59a29d96f35a6411d7508bdd\n        synchronizationPoints:\n          - type: measure\n            time: 0\n            measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n          - type: end\n            time: 213\n    ScoreTrackCreation:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the track\n        default:\n          type: boolean\n          description: True if the track should be used as default audio source\n        state:\n          $ref: '#/components/schemas/ScoreTrackState'\n        url:\n          type: string\n          description: The URL of the track\n        synchronizationPoints:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScoreTrackPoint'\n      description: \u003e\n        Creation of a new track. This one must contain the URL of the track or\n        the corresponding file\n      example:\n        title: Rick Astley - Never Gonna Give You Up\n        url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n        default: true\n        state: draft\n        synchronizationPoints:\n          - type: measure\n            time: 0\n            measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n          - type: end\n            time: 213\n    ScoreTrackUpdate:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the track\n        default:\n          type: boolean\n          description: True if the track should be used as default audio source\n        state:\n          $ref: '#/components/schemas/ScoreTrackState'\n        synchronizationPoints:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScoreTrackPoint'\n      description: |\n        Update an existing track.\n      example:\n        title: Rick Astley - Never Gonna Give You Up\n        url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n        default: true\n        state: draft\n        synchronizationPoints:\n          - type: measure\n            time: 0\n            measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n          - type: end\n            time: 213\n    ScoreTrackPoint:\n      required:\n        - time\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e-\n            The type of the synchronization point. If the type is `measure`, the\n            measure uuid must be present in `measureUuid`\n          enum:\n            - measure\n            - end\n        measureUuid:\n          type: string\n          description: The measure unique identifier\n          format: uuid\n        time:\n          type: number\n          description: The corresponding time in seconds\n      description: A track synchronization point\n      example:\n        type: measure\n        time: 0\n        measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n    ScoreTrackType:\n      type: string\n      description: The type of an audio track\n      enum:\n        - audio\n        - soundcloud\n        - youtube\n        - vimeo\n    ScoreTrackState:\n      type: string\n      description: State of the track\n      default: draft\n      enum:\n        - draft\n        - completed\n        - deleted\n    ScoreLikesCounts:\n      type: object\n      properties:\n        total:\n          type: number\n          description: The total number of likes of the score\n        weekly:\n          type: number\n          description: The number of new likes during the last week\n        monthly:\n          type: number\n          description: The number of new likes during the last month\n      description: |\n        A computed version of the weekly, monthly and total of number of likes\n        for a score\n      example:\n        total: 42\n        weekly: 10\n        monthly: 30\n    ScoreCommentsCounts:\n      type: object\n      properties:\n        total:\n          type: number\n          description: The total number of comments added to the score\n        unique:\n          type: number\n          description: The unique (1/user) number of comments added to the score\n        weekly:\n          type: number\n          description: The weekly unique number of comments added to the score\n        monthly:\n          type: number\n          description: The monthly unique number of comments added to the score\n      description: |\n        A computed version of the total, unique, weekly and monthly number of\n        comments added on the documents (this doesn't include inline comments).\n      example:\n        total: 42\n        unique: 35\n        weekly: 10\n        monthly: 30\n    ScoreViewsCounts:\n      type: object\n      properties:\n        total:\n          type: number\n          description: The total number of views of the score\n        weekly:\n          type: number\n          description: The weekly number of views of the score\n        monthly:\n          type: number\n          description: The monthly number of views of the score\n      description: |\n        A computed version of the total, weekly, and monthly number of views of\n        the score\n      example:\n        total: 42\n        weekly: 10\n        monthly: 30\n    ScorePlaysCounts:\n      type: object\n      properties:\n        total:\n          type: number\n          description: The total number of plays of the score\n        weekly:\n          type: number\n          description: The weekly number of plays of the score\n        monthly:\n          type: number\n          description: The monthly number of plays of the score\n      description: |\n        A computed version of the total, weekly, and monthly number of plays of\n        the score\n      example:\n        total: 42\n        weekly: 10\n        monthly: 30\n    ScoreRevisionStatistics:\n      type: object\n      properties:\n        additions:\n          type: number\n          description: The number of additions operations in the last revision\n        deletions:\n          type: number\n          description: The number of deletions operations in the last revision\n      description: |\n        The statistics related to the score revision (additions and deletions)\n      example:\n        additions: 24\n        deletions: 5\n    ScoreSource:\n      type: object\n      properties:\n        googleDrive:\n          type: string\n          description: \u003e\n            If the score is a file on Google Drive, this field property must\n            contain its identifier. To use this method, the Drive file must be\n            public or the Flat Drive App must have access to the file.\n      example:\n        googleDrive: 0B-0000000000000001\n    ScoreCreation:\n      required:\n        - privacy\n      type: object\n      properties:\n        title:\n          type: string\n          description: \u003e\n            The title of the new score. If the title is too long, the API may\n            trim this one.\n\n\n            If this title is not specified, the API will try to (in this order):\n              - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).\n              - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property\n              - Set a default title (e.g. \"New Music Score\")\n        filename:\n          type: string\n          description: 'If this is an imported file, its filename'\n        privacy:\n          $ref: '#/components/schemas/ScorePrivacy'\n        data:\n          type: string\n          description: \u003e\n            The data of the score file. It must be a MusicXML 3 file\n            (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI\n            file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\n\n            Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be\n            encoded in Base64, in this case the `dataEncoding` property must\n            match the encoding used for the API request.\n          example: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        dataEncoding:\n          type: string\n          description: \u003e-\n            The optional encoding of the score data. This property must match\n            the encoding used for the `data` property.\n          enum:\n            - base64\n        source:\n          $ref: '#/components/schemas/ScoreSource'\n        collection:\n          type: string\n          description: \u003e\n            Unique identifier of a collection where the score will be created.\n\n            If no collection identifier is provided, the score will be stored in\n            the `root` directory.\n        googleDriveFolder:\n          type: string\n          description: \u003e\n            If the user uses Google Drive and this properties is specified, the\n            file will be created in this directory. The currently user creating\n            the file must be granted to write in this directory.\n      description: A new created score\n      example:\n        title: My new score\n        privacy: private\n        data: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        googleDriveFolder: 0B-0000000000000000\n    ScoreFork:\n      type: object\n      properties:\n        collection:\n          type: string\n          default: root\n          description: \u003e\n            Unique identifier of a collection where the score will be copied.\n\n            If no collection identifier is provided, the score will be stored in\n            the `root` directory.\n      description: Options to fork the score\n    ScoreModification:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title of the score\n        subtitle:\n          type: string\n          description: The subtitle of the score\n        composer:\n          type: string\n          description: The composer of the score\n        lyricist:\n          type: string\n          description: The lyricist of the score\n        arranger:\n          type: string\n          description: The arranger of the score\n        privacy:\n          $ref: '#/components/schemas/ScorePrivacy'\n        sharingKey:\n          pattern: '^[a-f0-9]{128}$'\n          type: string\n          description: \u003e-\n            When using the `privacy` mode `privateLink`, this property can be\n            used to set a custom sharing key, otherwise a new key will be\n            generated.\n        description:\n          maxLength: 2000\n          type: string\n          description: Description of the creation\n        tags:\n          type: array\n          description: Tags describing the score\n          items:\n            type: string\n        creationType:\n          $ref: '#/components/schemas/ScoreCreationType'\n        license:\n          $ref: '#/components/schemas/ScoreLicense'\n        licenseText:\n          type: string\n          description: The rights info written on the score\n      description: Edit the score metadata\n      example:\n        privacy: private\n    Collection:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the collection\n        title:\n          type: string\n          description: The title of the collection\n        htmlUrl:\n          type: string\n          description: The url where the collection can be viewed in a web browser\n          format: url\n        type:\n          $ref: '#/components/schemas/CollectionType'\n        privacy:\n          $ref: '#/components/schemas/CollectionPrivacy'\n        sharingKey:\n          type: string\n          description: \u003e-\n            The private sharing key of the collection (available when the\n            `privacy` mode is set to `privateLink`)\n        app:\n          type: string\n          description: \u003e-\n            If this directory is dedicated to an app, the unique idenfier of\n            this app\n        creationDate:\n          type: string\n          description: The date when the collection was created\n          format: date-time\n        user:\n          $ref: '#/components/schemas/UserPublicSummary'\n        rights:\n          $ref: '#/components/schemas/ResourceRights'\n        collaborators:\n          type: array\n          description: The list of the collaborators of the collection\n          items:\n            $ref: '#/components/schemas/ResourceCollaborator'\n        capabilities:\n          type: object\n          properties:\n            canEdit:\n              type: boolean\n              description: \u003e\n                Whether the current user can modify the metadata for the\n                collection\n            canShare:\n              type: boolean\n              description: \u003e\n                Whether the current user can modify the sharing settings for the\n                collection\n            canDelete:\n              type: boolean\n              description: |\n                Whether the current user can delete the collection\n            canAddScores:\n              type: boolean\n              description: \u003e\n                Whether the current user can add scores to the collection\n\n\n                If this collection has the `type` `trash`, this property will be\n                set to `false`. Use `DELETE /v2/scores/{score}` to trash a\n                score.\n            canDeleteScores:\n              type: boolean\n              description: \u003e\n                Whether the current user can delete scores from the collection\n\n\n                If this collection has the `type` `trash`, this property will be\n                set to `false`. Use `POST /v2/scores/{score}/untrash` to restore\n                a score.\n          description: \u003e-\n            Capabilities the current user has on this collection. Each\n            capability corresponds to a fine-grained action that a user may\n            take.\n        collections:\n          type: array\n          description: \u003e-\n            The List of parent collections, which includes all the collections\n            this score is included. Please note that you might not have access\n            to all of them.\n          items:\n            type: string\n      description: Collection of scores\n    CollectionCreation:\n      required:\n        - privacy\n        - title\n      type: object\n      properties:\n        title:\n          maxLength: 300\n          minLength: 1\n          type: string\n          description: The title of the collection\n        privacy:\n          $ref: '#/components/schemas/CollectionPrivacy'\n      example:\n        title: Jazz scores\n        privacy: private\n    CollectionType:\n      type: string\n      description: |-\n        Type of the collection that influence the capabilitied available on the collections and how this collection is/can be populated.\n      enum:\n        - root\n        - regular\n        - sharedWithMe\n        - sharedWithGroup\n        - trash\n    CollectionPrivacy:\n      type: string\n      description: The collection main privacy mode(private).\n      enum:\n        - private\n    CollectionModification:\n      type: object\n      properties:\n        title:\n          maxLength: 300\n          minLength: 1\n          type: string\n          description: The title of the collection\n        privacy:\n          $ref: '#/components/schemas/CollectionPrivacy'\n      description: Edit the collection metadata\n    ScoreRevision:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the revision.\n        user:\n          type: string\n          description: The user identifier who created the revision\n        collaborators:\n          type: array\n          items:\n            type: string\n            description: |\n              The list of user identifier or collaborators who worked on this\n              revision. This is list is built from the history of the revision\n              specified during the creation of the revision.\n        creationDate:\n          type: string\n          description: The date when this revision was created\n          format: date-time\n        event:\n          type: string\n          description: The last event (action id) of the revision\n        description:\n          type: string\n          description: A description associated to the revision\n        autosave:\n          type: boolean\n          description: |\n            True if this revision was automatically generated by Flat and not on\n            purpose by the user.\n        statistics:\n          $ref: '#/components/schemas/ScoreRevisionStatistics'\n      description: A score revision metadata\n      example:\n        user: '000000000000000000000020'\n        collaborators:\n          - '000000000000000000000010'\n          - '000000000000000000000020'\n        description: New revision\n        creationDate: '2017-01-26T20:29:10.622Z'\n        autosave: true\n    ScoreRevisionCreation:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: string\n          description: \u003e\n            The data of the score file. It must be a MusicXML 3 file\n            (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI\n            file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\n\n            Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be\n            encoded in Base64, in this case the `dataEncoding` property must\n            match the encoding used for the API request.\n          example: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        dataEncoding:\n          type: string\n          description: \u003e-\n            The optional encoding of the score data. This property must match\n            the encoding used for the `data` property.\n          enum:\n            - base64\n        autosave:\n          type: boolean\n          description: |\n            Must be set to `true` if the revision was created automatically.\n        description:\n          type: string\n          description: A description associated to the revision\n      description: A new created revision\n      example:\n        data: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        history:\n          - id: b278ad43-2e99-4e60-a782-ac119b294ab8\n            userId: '000000000000000000000010'\n            fnc: action.AddMeasure\n            args:\n              previousUuid: 888cb742-2110-a050-ba71-28300ba6d61f\n              measureUuid: 0be9f739-3213-f312-bb0a-00ad0c787ef7\n        autosave: true\n        description: New revision\n    ScoreCommentContext:\n      required:\n        - measureUuids\n        - partUuid\n        - startDpq\n        - startTimePos\n        - stopDpq\n        - stopTimePos\n      type: object\n      properties:\n        partUuid:\n          type: string\n          description: The unique identifier (UUID) of the score part\n        staffIdx:\n          type: number\n          description: '(Deprecated, use `staffUuid`) The identififer of the staff'\n        staffUuid:\n          type: string\n          description: The unique identififer (UUID) of the staff\n        measureUuids:\n          type: array\n          description: The list of measure UUIds\n          items:\n            type: string\n        startTimePos:\n          type: number\n        stopTimePos:\n          type: number\n        startDpq:\n          type: number\n        stopDpq:\n          type: number\n      description: \u003e\n        The context of the comment (for inline/contextualized comments). A\n        context will include all the information related to the location of the\n        comment (i.e. score parts, range of measure, time position).\n      example:\n        partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n        staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n        measureUuids:\n          - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n          - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n          - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n        startDpq: 1\n        stopDpq: 1\n        startTimePos: 2\n        stopTimePos: 3\n    ScoreCommentCreation:\n      required:\n        - comment\n      type: object\n      properties:\n        revision:\n          type: string\n          description: \u003e\n            The unique indentifier of the revision of the score where the\n            comment was added. If this property is unspecified or contains\n            \"last\", the API will automatically take the last revision created.\n        comment:\n          type: string\n          description: \u003e\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n        rawComment:\n          type: string\n          description: \u003e\n            A raw version of the comment, that can be displayed without the\n            mentions. If you use mentions, this property must be set.\n        mentions:\n          type: array\n          description: The list of user identifiers mentioned in this comment\n          items:\n            type: string\n        replyTo:\n          type: string\n          description: \u003e\n            When the comment is a reply to another comment, the unique\n            identifier of the parent comment\n        context:\n          $ref: '#/components/schemas/ScoreCommentContext'\n      description: Creation of a comment\n      example:\n        revision: '000000000000000000000010'\n        comment: '@[000000000000000000000000:flat] Great work!'\n        rawComment: '@flat: Great work!'\n        mentions:\n          - '000000000000000000000000'\n        replyTo: '000000000000000000000000'\n        context:\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          startDpq: 1\n          stopDpq: 1\n          startTimePos: 2\n          stopTimePos: 3\n    ScoreCommentUpdate:\n      type: object\n      properties:\n        revision:\n          type: string\n          description: \u003e\n            The unique indentifier of the revision of the score where the\n            comment was added. If this property is unspecified or contains\n            \"last\", the API will automatically take the last revision created.\n        comment:\n          maxLength: 10000\n          minLength: 1\n          type: string\n          description: \u003e\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n        rawComment:\n          maxLength: 10000\n          minLength: 1\n          type: string\n          description: \u003e\n            A raw version of the comment, that can be displayed without the\n            mentions. If you use mentions, this property must be set.\n        context:\n          $ref: '#/components/schemas/ScoreCommentContext'\n      description: Update of a comment\n      example:\n        revision: '000000000000000000000011'\n        comment: '@[000000000000000000000000:flat] Great work!'\n        rawComment: '@flat: Great work!'\n        mentions:\n          - '000000000000000000000000'\n        replyTo: '000000000000000000000000'\n        context:\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          startDpq: 1\n          stopDpq: 1\n          startTimePos: 2\n          stopTimePos: 3\n    ScoreComment:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The comment unique identifier\n        type:\n          type: string\n          description: The type of the comment\n          enum:\n            - document\n            - inline\n        user:\n          type: string\n          description: The author unique identifier\n        score:\n          type: string\n          description: The unique identifier of the score where the comment was posted\n        revision:\n          type: string\n          description: The unique identifier of revision the comment was posted\n        replyTo:\n          type: string\n          description: \u003e\n            When the comment is a reply to another comment, the unique\n            identifier of the parent comment\n        date:\n          type: string\n          description: The date when the comment was posted\n          format: date-time\n        modificationDate:\n          type: string\n          description: The date of the last comment modification\n          format: date-time\n        comment:\n          type: string\n          description: |\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n        rawComment:\n          type: string\n          description: |\n            A raw version of the comment, that can be displayed without parsing\n            the mentions.\n        context:\n          $ref: '#/components/schemas/ScoreCommentContext'\n        mentions:\n          type: array\n          description: The list of user identifier mentioned on the score\n          items:\n            type: string\n        resolved:\n          type: boolean\n          description: \u003e\n            For inline comments, the comment can be marked as resolved and will\n            be hidden in the future responses\n        resolvedBy:\n          type: string\n          description: \u003e\n            If the user is marked as resolved, this will contain the unique\n            identifier of the User who marked this comment as resolved\n        spam:\n          type: boolean\n          description: \u003e\n            `true  if the message has been detected as spam and hidden from\n            other users\n      description: Comment added on a sheet music\n      example:\n        id: '000000000000000000000010'\n        type: inline\n        user: '000000000000000000000001'\n        score: '000000000000000000000042'\n        revision: '000000000000000000000011'\n        replyTo: '000000000000000000000000'\n        date: '2017-01-26T20:29:10.622Z'\n        modificationDate: '2017-01-26T21:29:10.622Z'\n        comment: '@[000000000000000000000000:flat] Great work!'\n        rawComment: '@flat: Great work!'\n        context:\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          startDpq: 1\n          stopDpq: 1\n          startTimePos: 2\n          stopTimePos: 3\n        mentions:\n          - '000000000000000000000000'\n        resolved: true\n        resolvedBy: '000000000000000000000000'\n        spam: false\n    OrganizationInvitationCreation:\n      type: object\n      properties:\n        email:\n          type: string\n          description: The email address you want to send the invitation to\n        organizationRole:\n          $ref: '#/components/schemas/OrganizationRoles'\n      description: The parameters to create an organization invitation\n      example:\n        email: edu@flat.io\n        organizationRole: teacher\n    OrganizationInvitation:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The invitation unique identifier\n        organization:\n          type: string\n          description: The unique identifier of the Organization owning this class\n        organizationRole:\n          $ref: '#/components/schemas/OrganizationRoles'\n        customCode:\n          type: string\n          description: Enrollment code to use when joining this organization\n        email:\n          type: string\n          description: The email address this invitation was sent to\n        invitedBy:\n          type: string\n          description: The unique identifier of the User who created this invitation\n        usedBy:\n          type: string\n          description: The unique identifier of the User who used this invitation\n      description: Details of an invitation to join an organization\n      example:\n        creationDate: '2017-07-02T15:05:15.576Z'\n        customCode: u5raQ7pZ\n        email: edu@flat.io\n        id: 59590bab53b1af260610000\n        invitedBy: 55b8d8f395c8db031ed00000\n        organization: 55df29a6694e4a3953100000\n        organizationRole: teacher\n    LmsName:\n      type: string\n      description: LMS name\n      enum:\n        - canvas\n        - moodle\n        - schoology\n        - blackboard\n        - desire2learn\n        - sakai\n        - schoolbox\n        - other\n    LtiCredentialsCreation:\n      required:\n        - lms\n        - name\n      type: object\n      properties:\n        name:\n          maxLength: 300\n          type: string\n          description: Name of the couple of credentials\n        lms:\n          $ref: '#/components/schemas/LmsName'\n      description: Creation of a couple of LTI 1.x OAuth credentials\n      example:\n        name: My couple of credentials for Canvas\n        lms: canvas\n    LtiCredentials:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of this couple of credentials\n        name:\n          type: string\n          description: Name of the couple of credentials\n        lms:\n          $ref: '#/components/schemas/LmsName'\n        organization:\n          type: string\n          description: \u003e-\n            The unique identifier of the Organization associated to these\n            credentials\n        creator:\n          type: string\n          description: Unique identifier of the user who created these credentials\n        creationDate:\n          type: string\n          description: The creation date of thse credentials\n          format: date-time\n        lastUsage:\n          type: string\n          description: The last time these credentials were used\n          format: date-time\n        consumerKey:\n          type: string\n          description: OAuth 1 Consumer Key\n        consumerSecret:\n          type: string\n          description: OAuth 1 Consumer Secret\n      description: A couple of LTI 1.x OAuth credentials\n      example:\n        id: 59368be5c66caf895ee02387\n        name: My couple of credentials for Canvas\n        lms: canvas\n        organization: 5832c801a4bedc05f4fb4993\n        creator: 5832bf149995c4024bd6de7d\n        creationDate: '2017-06-06T11:03:01.955Z'\n        lastUsage: '2017-06-13T16:02:34.324Z'\n        consumerKey: 200082F5-FAFD-4C6E-BB19-7DAB5D6264D4\n        consumerSecret: 168b6181c05eae14298176a274273e4ebef0d15555fe3e80c6a98ccd57d0c3b6\n    ClassCreation:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          maxLength: 255\n          type: string\n          description: The name of the new class\n        section:\n          maxLength: 255\n          type: string\n          description: The section of the new class\n      description: Creation of a classroom\n      example:\n        name: Music Theory Course\n        section: Music Theory 101\n    ClassUpdate:\n      type: object\n      properties:\n        name:\n          maxLength: 255\n          type: string\n          description: The name of the class\n        section:\n          maxLength: 255\n          type: string\n          description: The section of the class\n      description: Update of a classroom\n      example:\n        name: Music Theory Course\n        section: Music Theory 101\n    ClassDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the class\n        state:\n          $ref: '#/components/schemas/ClassState'\n        name:\n          type: string\n          description: The name of the class\n        section:\n          type: string\n          description: The section of the class\n        description:\n          type: string\n          description: An optionnal description for this class\n        organization:\n          type: string\n          description: The unique identifier of the Organization owning this class\n        owner:\n          type: string\n          description: The unique identifier of the User owning this class\n        creationDate:\n          type: string\n          description: The date when the class was create\n          format: date-time\n        enrollmentCode:\n          type: string\n          description: \u003e\n            [Teachers only] The enrollment code that can be used by the students\n            to join the class\n        theme:\n          type: string\n          description: The theme identifier using in Flat User Interface\n        assignmentsCount:\n          type: number\n          description: The number of assignments created in the class\n        studentsGroup:\n          $ref: '#/components/schemas/GroupDetails'\n        teachersGroup:\n          $ref: '#/components/schemas/GroupDetails'\n        issues:\n          type: object\n          description: Detected issues for this class\n          properties:\n            sync:\n              type: array\n              description: Synchronization issues for the class\n              items:\n                type: object\n                description: A sync issue\n                properties:\n                  id:\n                    type: string\n                    description: The account user identifier\n                  email:\n                    type: string\n                    description: The email address of the user concerned by this sync issue\n                  reason:\n                    type: string\n                    enum:\n                      - otherOrgnanization\n                      - personalSubscription\n                    description: The reason why the account cannot be synced\n        googleClassroom:\n          type: object\n          properties:\n            id:\n              type: string\n              description: The course identifier on Google Classroom\n            alternateLink:\n              type: string\n              description: Absolute link to this course in the Classroom web UI\n          description: Google Classroom course-related information\n        googleDrive:\n          type: object\n          properties:\n            teacherFolderId:\n              type: string\n              description: \u003e\n                [Teachers only] The Drive directory identifier of the teachers'\n                folder\n            teacherFolderAlternateLink:\n              type: string\n              description: |\n                [Teachers only] The Drive URL of the teachers' folder\n          description: Google Drive course-related information provided by Google Classroom\n        microsoftGraph:\n          type: object\n          properties:\n            id:\n              type: string\n              description: The course identifier on Microsoft Graph\n        lti:\n          type: object\n          properties:\n            contextId:\n              type: string\n              description: Unique context identifier provided\n            contextTitle:\n              type: string\n              description: Context title\n            contextLabel:\n              type: string\n              description: Context label\n          description: Meta information provided by the LTI consumer\n        canvas:\n          type: object\n          properties:\n            id:\n              type: string\n              description: Unique identifier of the course on Canvas\n            domain:\n              type: string\n              description: Canvas instance domain (e.g. \"canvas.instructure.com\")\n          description: Meta information provided by Canvs LMS\n        mfc:\n          type: object\n          properties:\n            id:\n              type: string\n              description: Unique identifier of the course on MusicFirst Classroom\n            alternateLink:\n              type: string\n              description: Link to MusicFirst Classroom class\n          description: Meta information provided by Canvs LMS\n        clever:\n          type: object\n          properties:\n            id:\n              type: string\n              description: Clever section unique identifier\n            creationDate:\n              type: string\n              description: The creation date of the section on clever\n              format: date-time\n            modificationDate:\n              type: string\n              description: The last modification date of the section on clever\n              format: date-time\n            subject:\n              type: string\n              description: Normalized subject of the course\n              enum:\n                - english/language arts\n                - math\n                - science\n                - social studies\n                - language\n                - homeroom/advisory\n                - interventions/online learning\n                - technology and engineering\n                - PE and health\n                - arts and music\n                - other\n            termName:\n              type: string\n              description: Name of the term when this course happens\n            termStartDate:\n              type: string\n              description: Beginning date of the term\n              format: date-time\n            termEndDate:\n              type: string\n              description: End date of the term\n              format: date-time\n          description: Clever.com section-related information\n      description: A classroom\n      example:\n        id: '100000000000000000000001'\n        state: active\n        name: Music Theory 101\n        section: Music Theory 101\n        organization: '100000000000000000000002'\n        owner: '100000000000000000000003'\n        enrollmentCode: jm447ear\n        theme: blue-8\n        assignmentsCount: 10\n        creationTime: '2017-01-25T09:47:34.544Z'\n        googleClassroom:\n          id: '00000000'\n          alternateLink: 'http://classroom.google.com/c/music-theory'\n        microsoftGraph:\n          id: 00000000-0000-0000-0000-000000000000\n        googleDrive:\n          teacherFolderAlternateLink: 'https://drive.google.com/drive/folders/0B-0000000000000000'\n          teacherFolderId: 0B-0000000000000000\n        lti:\n          contextId: '042'\n          contextLabel: MUSIC\n          contextTitle: Music Theory 101\n        canvas:\n          id: '000000000'\n    ClassAttachmentCreation:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of the attachment posted\n          enum:\n            - flat\n            - link\n            - googleDrive\n            - worksheet\n        score:\n          type: string\n          description: \u003e\n            A unique Flat score identifier. The user creating the assignment\n            must at least have read access to the document. If the user has\n            admin rights, new group permissions will be automatically added for\n            the\n\n            teachers and students of the class.\n        worksheet:\n          type: string\n          description: An unique worksheet identifier\n        sharingMode:\n          $ref: '#/components/schemas/MediaScoreSharingMode'\n        lockScoreTemplate:\n          type: boolean\n          description: \u003e-\n            To be used with a score attached in `sharingMode` `copy` (score used\n            as template). If true, students won't be able to change the original\n            notes of the template.\n        url:\n          type: string\n          description: The URL of the attachment.\n        googleDriveFileId:\n          type: string\n          description: The ID of the Google Drive File\n      description: \u003e\n        Attachment creation for an assignment or stream post.\n\n        This attachment must contain a `score` or an `url`, all the details of\n        this one will be resolved and returned as `ClassAttachment` once the\n        assignment or stream post is created.\n      example:\n        type: flat\n        score: '000000000000000001'\n        sharingMode: copy\n    AssignmentCreation:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/AssignmentType'\n        state:\n          type: string\n          description: State of the assignment\n          enum:\n            - draft\n            - active\n        title:\n          type: string\n          description: Title of the assignment\n        description:\n          type: string\n          description: Description and content of the assignment\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClassAttachmentCreation'\n        dueDate:\n          type: string\n          nullable: true\n          description: \u003e\n            The due date of this assignment, late submissions will be marked as\n            paste due. If not set, the assignment won't have a due date.\n          format: date-time\n        scheduledDate:\n          type: string\n          nullable: true\n          description: \u003e\n            The publication (scheduled) date of the assignment.\n\n            If this one is specified, the assignment will only be listed to the\n            teachers of the class.\n          format: date-time\n        nbPlaybackAuthorized:\n          type: number\n          nullable: true\n          description: The number of playback authorized on the scores of the assignment.\n        toolset:\n          type: string\n          nullable: true\n          description: The id of the associated toolset\n        coverFile:\n          type: string\n          nullable: true\n          description: The id of the cover to display\n        cover:\n          type: string\n          nullable: true\n          description: The URL of the cover to display\n        maxPoints:\n          type: number\n          nullable: true\n          minimum: 0\n          maximum: 100\n          description: \u003e\n            If set, the grading will be enabled for the assignement with this\n            value as the maximum of points\n        googleClassroom:\n          type: object\n          description: Google Classroom options for this assignment\n          properties:\n            topicId:\n              type: string\n              nullable: true\n              description: Identifier of the topic where the assignment is created\n        microsoftGraph:\n          type: object\n          description: Microsoft Graph options for this assignment\n          properties:\n            categories:\n              description: List of categories this assignment belongs to\n              type: array\n              nullable: true\n              items:\n                type: string\n        assigneeMode:\n          type: string\n          description: Possible modes of assigning assignments\n          enum:\n            - everyone\n            - selected\n        assignedStudents:\n          type: array\n          items:\n            type: string\n          description: Identifiers for the students that have access to the assignment\n      description: Assignment creation details\n      example:\n        title: First assignment\n        description: Get started with Flat\n        maxPoints: 100\n        attachments:\n          - type: flat\n            score: '0000000000000000'\n          - type: link\n            url: 'https://flat.io/developers'\n        scheduledDate: '2017-06-20T13:56:19.613Z'\n        dueDate: '2017-07-12T13:56:19.613Z'\n    AssignmentCopy:\n      type: object\n      properties:\n        classroom:\n          type: string\n          description: The destination classroom where the assignment will be copied\n        assignment:\n          type: string\n          description: \u003e-\n            An optional destination assignment where the original assignement\n            will be copied. Must be a draft.\n        scheduledDate:\n          type: string\n          description: \u003e\n            The publication (scheduled) date of the assignment.\n\n            If this one is specified, the assignment will only be listed to the\n            teachers of the class.\n\n            Alternatively the existing `scheduledDate` from the copied\n            assignment will be used.\n          format: date-time\n      description: Assignment copy operation\n      example:\n        classroom: '0000000000000000'\n    AssignmentType:\n      type: string\n      description: Type of the assignment\n      enum:\n        - none\n        - newScore\n        - scoreTemplate\n        - sharedWriting\n        - worksheet\n        - performance\n    Assignment:\n      type: object\n      properties:\n        state:\n          type: string\n          description: State of the assignment\n          enum:\n            - draft\n            - active\n            - archived\n        type:\n          $ref: '#/components/schemas/AssignmentType'\n        title:\n          type: string\n          description: Title of the assignment\n        classroom:\n          type: string\n          description: The unique identifier of the class where this assignment was posted\n        description:\n          type: string\n          description: Description and content of the assignment\n        cover:\n          type: string\n          description: The URL of the cover to display\n        coverFile:\n          type: string\n          description: The id of the cover to display\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MediaAttachment'\n        submissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssignmentSubmission'\n        creator:\n          type: string\n          description: |\n            The User unique identifier of the creator of this assignment\n        creationDate:\n          type: string\n          description: The creation date of this assignment\n          format: date-time\n        scheduledDate:\n          type: string\n          description: \u003e\n            The publication (scheduled) date of the assignment.\n\n            If this one is specified, the assignment will only be listed to the\n            teachers of the class.\n          format: date-time\n        dueDate:\n          type: string\n          description: |\n            The due date of this assignment, late submissions will be marked as\n            paste due.\n          format: date-time\n        maxPoints:\n          type: number\n          description: |\n            If set, the grading will be enabled for the assignement\n        googleClassroom:\n          $ref: '#/components/schemas/GoogleClassroomCoursework'\n        microsoftGraph:\n          $ref: '#/components/schemas/MicrosoftGraphAssignment'\n        mfc:\n          type: object\n          description: A MusicFirst Classroom assignment\n          properties:\n            id:\n              type: string\n              description: Unique identifier of the course on MusicFirst Task\n            alternateLink:\n              type: string\n              description: Link to MusicFirst Classroom task\n        canvas:\n          type: object\n          description: A Canvas LMS assignment\n          properties:\n            id:\n              type: string\n              description: Unique identifier of the course on Canvas assignment\n            alternateLink:\n              type: string\n              description: Link to Canvas assignment\n        lti:\n          type: object\n          description: An LTI assignment\n          properties:\n            id:\n              type: string\n              description: Resource ID in the LMS\n      description: Assignment details\n      example:\n        title: My first assignment\n        description: Get started with Flat\n        state: active\n        creator: 5832bf149995c4024bd6de7d\n        classroom: 58c4725345cd836264f0b29e\n        creationDate: '2017-06-12T13:56:19.613Z'\n        dueDate: '2017-07-12T13:56:19.613Z'\n        scheduledDate: '2017-06-18T13:56:19.613Z'\n        maxPoints: 100\n        attachments:\n          - type: flat\n            score: '0000000000000000'\n          - type: link\n            url: 'https://flat.io/developers'\n          - type: video\n            url: 'https://www.youtube.com/watch?v=SNbRUiBZ4Uw'\n            title: Flat - The online collaborative music notation software\n            description: 'Discover Flat on https://flat.io'\n            html: \u003e-\n              \u003ciframe width=\"560\" height=\"315\"\n              src=\"https://www.youtube.com/embed/SNbRUiBZ4Uw\" frameborder=\"0\"\n              allowfullscreen\u003e\u003c/iframe\u003e\n            thumbnailUrl: 'https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg'\n            thumbnailHeight: 1052\n            thumbnailWidth: 1868\n            authorName: Flat\n            authorUrl: 'https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw'\n        googleClassroom:\n          id: '1235665432'\n          alternateLink: 'http://classroom.google.com/c/music-theory/a/first-assignment/detail'\n        lti:\n          id: '12345'\n        canvas:\n          id: '12345'\n          alternateLink: 'https://canvas.instructure.com/courses/00000/assignments/12345'\n        submissions:\n          - id: 58c4955c226ffff257211a90\n            classroom: 58c4725345cd836264f0b29e\n            assignment: 58c49068524c03ec576ca43c\n            creator: 559eb5c7f0d4d5e46d03781d\n            creationDate: '2017-03-12T00:25:00.748Z'\n            submissionDate: '2017-03-12T00:25:22.748Z'\n            attachments:\n              - type: flat\n                score: 58c4955a226ffff257211a8d\n                title: Hello - Student\n            googleClassroom:\n              id: CgsI-00000000000\n              state: turned_in\n              alternateLink: \u003e-\n                http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n    AssignmentSubmissionUpdate:\n      type: object\n      properties:\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClassAttachmentCreation'\n        submit:\n          type: boolean\n          description: 'If `true`, the submission will be marked as done'\n        draftGrade:\n          type: number\n          nullable: true\n          minimum: 0\n          maximum: 100\n          description: \u003e-\n            Optional grade. If unset, no grade was set. This value is only\n            visible by the teacher, and we will be set to `grade` once the\n            teacher returns the submission\n        grade:\n          type: number\n          nullable: true\n          minimum: 0\n          maximum: 100\n          description: 'Optional grade. If unset, no grade was set.'\n        return:\n          type: boolean\n          description: 'If `true`, the submission will be marked as done'\n        comments:\n          type: object\n          properties:\n            total:\n              type: number\n              description: The total number of comments added to the submission\n            unread:\n              type: number\n              description: The number of unread comments for the current user\n      description: Assignment Submission creation\n      example:\n        attachments:\n          - type: flat\n            score: 58c4955a226ffff257211a8d\n            title: Hello - Student\n        submit: true\n    AssignmentSubmissionState:\n      type: string\n      description: State of the submission\n      enum:\n        - created\n        - turnedIn\n        - returned\n    AssignmentSubmission:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique identifier of the submission\n        state:\n          $ref: '#/components/schemas/AssignmentSubmissionState'\n        classroom:\n          type: string\n          description: |\n            Unique identifier of the classroom where the assignment was posted\n        assignment:\n          type: string\n          description: Unique identifier of the assignment\n        creator:\n          type: string\n          description: The User identifier of the student who created the submission\n        creationDate:\n          type: string\n          description: The date when the submission was created\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MediaAttachment'\n        submissionDate:\n          type: string\n          description: The date when the student submitted his work\n        returnDate:\n          type: string\n          description: The date when the teacher returned the work\n        returnCreator:\n          type: string\n          description: \u003e\n            The User unique identifier of the teacher who returned the\n            submission\n        grade:\n          type: number\n          nullable: true\n          description: 'Optional grade. If unset, no grade was set.'\n        draftGrade:\n          type: number\n          nullable: true\n          description: \u003e-\n            Optional grade. If unset, no grade was set. This value is only\n            visible by the teacher, and we will be set to `grade` once the\n            teacher returns the submission\n        maxPoints:\n          type: number\n          description: \u003e-\n            Optional max points for the grade. If set, a corresponding\n            `draftGrade` or `grade` will be set.\n        googleClassroom:\n          $ref: '#/components/schemas/GoogleClassroomSubmission'\n        microsoftGraph:\n          $ref: '#/components/schemas/MicrosoftGraphSubmission'\n      description: Assignment Submission\n      example:\n        id: 58c4955c226ffff257211a90\n        classroom: 58c4725345cd836264f0b29e\n        assignment: 58c49068524c03ec576ca43c\n        creator: 559eb5c7f0d4d5e46d03781d\n        creationDate: '2020-08-12T00:25:00.748Z'\n        submissionDate: '2020-08-12T00:45:22.748Z'\n        attachments:\n          - type: flat\n            score: 58c4955a226ffff257211a8d\n            title: Hello - Student\n        returnDate: '2020-08-15T00:25:00.748Z'\n        returnCreator: 559eb5c7f0d4d5e46d000000\n        grade: 80\n        draftGrade: 82\n        googleClassroom:\n          id: CgsI-00000000000\n          state: turned_in\n          alternateLink: \u003e-\n            http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n    AssignmentSubmissionComment:\n      description: Feedback comment added to an assignment submission\n      type: object\n      properties:\n        id:\n          type: string\n          description: The comment unique identifier\n        user:\n          type: string\n          description: The author unique identifier\n        submission:\n          type: string\n          description: The submission unique identifier\n        date:\n          type: string\n          description: The date when the comment was posted\n          format: date-time\n        modificationDate:\n          type: string\n          description: The date of the last comment modification\n          format: date-time\n        comment:\n          type: string\n          description: The comment text\n        unread:\n          type: boolean\n          description: True if the comment is unread by the current user\n    AssignmentSubmissionCommentCreation:\n      description: Creation of a assignment submission comment\n      required:\n        - comment\n      type: object\n      properties:\n        comment:\n          type: string\n          description: The comment text\n    AssignmentSubmissionHistory:\n      description: History item of the submission\n      type: object\n      properties:\n        date:\n          description: The date when the submission was changed\n          type: string\n          format: date-time\n        users:\n          description: The user(s) unique identifier(s) who made the change\n          type: array\n          items:\n            type: string\n        state:\n          $ref: '#/components/schemas/AssignmentSubmissionState'\n        draftGrade:\n          type: number\n          description: \u003e-\n            The numerator of the grade at this time in the submission grade\n            history\n        grade:\n          type: number\n          description: \u003e-\n            The numerator of the grade at this time in the submission grade\n            history\n        maxPoints:\n          type: number\n          description: \u003e-\n            The denominator of the grade at this time in the submission grade\n            history\n        attachment:\n          type: object\n          properties:\n            score:\n              type: string\n              description: The score identifier that changed\n            revision:\n              type: string\n              description: The revision identifier that changed\n    MicrosoftGraphAssignment:\n      type: object\n      description: A Microsoft Teams asignment\n      properties:\n        id:\n          type: string\n          description: Identifier of the assignement assigned by Microsoft Teams\n        state:\n          type: string\n          description: State of the assignment\n        alternateLink:\n          type: string\n          description: Absolute link to this assignement in the Microsoft Teams web UI\n        categories:\n          type: array\n          description: List of categories where this assignment is published under\n          items:\n            type: string\n            description: A Microsoft Teams assignment category ID\n      example:\n        id: 8e460d32-d2d4-46b3-8e1a-9b7677a48fda\n        state: draft\n        alternateLink: 'https://teams.microsoft.com/l/entity'\n        categories:\n          - 0a012acd-6e78-4cd0-89a9-80d296e48f82\n    MicrosoftGraphSubmission:\n      type: object\n      description: A Microsoft Teams submission\n      properties:\n        id:\n          type: string\n          description: Identifier of the submission assigned by Microsoft Teams\n        state:\n          type: string\n          description: State of the submission\n        alternateLink:\n          type: string\n          description: Absolute link to this submission in the Microsoft Teams web UI\n      example:\n        id: 8e460d32-d2d4-46b3-8e1a-9b7677a48fda\n        state: returned\n        alternateLink: 'https://teams.microsoft.com/l/entity'\n    GoogleClassroomCoursework:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Identifier of the coursework assigned by Classroom\n        state:\n          type: string\n          description: State of the coursework\n        alternateLink:\n          type: string\n          description: Absolute link to this coursework in the Classroom web UI\n        topicId:\n          type: string\n          nullable: true\n          description: Identifier of the topic where the assignment is created\n      description: A coursework on Google Classroom\n      example:\n        id: '1235665432'\n        state: draft\n        alternateLink: 'http://classroom.google.com/c/music-theory/a/first-assignment/detail'\n    GoogleClassroomSubmission:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Identifier of the coursework submission assigned by Classroom\n        state:\n          type: string\n          description: State of the submission on Google Classroom\n        alternateLink:\n          type: string\n          description: Absolute link to this coursework in the Classroom web UI\n      description: A coursework submission on Google Classroom\n      example:\n        id: CgsI-00000000000\n        state: turned_in\n        alternateLink: \u003e-\n          http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n    GroupDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the group\n        name:\n          type: string\n          description: The displayable name of the group\n        type:\n          $ref: '#/components/schemas/GroupType'\n        organization:\n          type: string\n          description: The unique identifier of the Organization owning the group\n        creationDate:\n          type: string\n          description: The date when the group was create\n          format: date-time\n        usersCount:\n          type: number\n          description: The number of students in this group\n        readOnly:\n          type: boolean\n          description: \u003e\n            `true` if the properties and members of this group are in in\n            read-only\n      description: The details of a group\n      example:\n        id: 58c4955c226ffff257211a00\n        name: 5th Grade - Teachers\n        type: classTeachers\n        organization: '0000000000000000000000042'\n        creationDate: '2017-07-02T15:02:40.207Z'\n        usersCount: 2\n        readOnly: false\n    GroupType:\n      type: string\n      description: The type of the group\n      enum:\n        - generic\n        - classTeachers\n        - classStudents\n    ClassState:\n      type: string\n      description: The state of a classroom\n      enum:\n        - active\n        - inactive\n        - archived\n    MediaScoreSharingMode:\n      type: string\n      description: The sharing mode of the score for classes post and assignments\n      default: read\n      enum:\n        - read\n        - write\n        - copy\n        - performance\n    MediaAttachment:\n      type: object\n      properties:\n        type:\n          type: string\n          description: \u003e\n            The type of the assignment resolved:\n\n            * `rich`, `photo`, `video` are attachment types that are\n            automatically resolved from a `link` attachment.\n\n            * A `flat` attachment is a score document where the unique\n            identifier will be specified in the `score` property. Its sharing\n            mode will be provided in the `sharingMode` property.\n          enum:\n            - rich\n            - photo\n            - video\n            - link\n            - flat\n            - googleDrive\n            - worksheet\n            - performance\n        score:\n          type: string\n          description: An unique Flat score identifier\n        revision:\n          type: string\n          description: An unique revision identifier of a score\n        worksheet:\n          type: string\n          description: An unique worksheet identifier\n        track:\n          type: string\n          description: A unique track identifier\n        sharingMode:\n          $ref: '#/components/schemas/MediaScoreSharingMode'\n        lockScoreTemplate:\n          type: boolean\n          description: \u003e-\n            To be used with a score attached in `sharingMode` `copy` (score used\n            as template). If true, students won't be able to change the original\n            notes of the template.\n        title:\n          type: string\n          description: The resolved title of the attachment\n        description:\n          type: string\n          description: The resolved description of the attachment\n        html:\n          type: string\n          description: |\n            If the attachment type is `rich` or `video`, the HTML code of the\n            media to display\n        htmlWidth:\n          type: string\n          description: 'If the `html` is available, the width of the widget'\n        htmlHeight:\n          type: string\n          description: 'If the `html` is available, the height of the widget'\n        url:\n          type: string\n          description: The url of the attachment\n        thumbnailUrl:\n          type: string\n          description: |\n            If the attachment type is `rich`, `video`, `photo` or `link`, a\n            displayable thumbnail for this attachment\n        thumbnailWidth:\n          type: integer\n          description: |\n            If the `thumbnailUrl` is available, the width of the thumbnail\n        thumbnailHeight:\n          type: integer\n          description: |\n            If the `thumbnailUrl` is available, the width of the thumbnail\n        authorName:\n          type: string\n          description: The resolved author name of the attachment\n        authorUrl:\n          type: string\n          description: The resolved author url of the attachment\n        iconUrl:\n          type: string\n          description: The URL of the icon\n        mimeType:\n          type: string\n          description: The mine type of the file\n        googleDriveFileId:\n          type: string\n          description: The ID of the Google Drive File\n      description: \u003e\n        Media attachment. The API will automatically resolve the details,\n        oEmbed,\n\n        and media available if possible and return them in this object\n      example:\n        type: video\n        url: 'https://www.youtube.com/watch?v=SNbRUiBZ4Uw'\n        title: Flat - The online collaborative music notation software\n        description: 'Discover Flat on https://flat.io'\n        html: \u003e-\n          \u003ciframe width=\"560\" height=\"315\"\n          src=\"https://www.youtube.com/embed/SNbRUiBZ4Uw\" frameborder=\"0\"\n          allowfullscreen\u003e\u003c/iframe\u003e\n        thumbnailUrl: 'https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg'\n        thumbnailHeight: 1052\n        thumbnailWidth: 1868\n        authorName: Flat\n        authorUrl: 'https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw'\n    FlatErrorResponse:\n      description: An API Error response\n      type: object\n      properties:\n        code:\n          type: string\n          description: A corresponding code for this error\n        message:\n          type: string\n          description: A printable message for this message\n        id:\n          type: string\n          description: An unique error identifier generated for the request\n        param:\n          type: string\n          description: The related parameter that caused the error\n      example:\n        code: CLIENT_ERROR\n        message: Invalid request\n        id: '123456789'\n  parameters:\n    limit:\n      name: limit\n      in: query\n      description: This is the maximum number of objects that may be returned\n      schema:\n        maximum: 1000\n        minimum: 1\n        type: integer\n        default: 50\n    next:\n      name: next\n      in: query\n      description: \u003e\n        An opaque string cursor to fetch the next page of data.\n\n        The paginated API URLs are returned in the `Link` header when requesting\n        the API. These URLs will contain a `next` and `previous` cursor based on\n        the available data.\n      schema:\n        type: string\n    previous:\n      name: previous\n      in: query\n      description: \u003e\n        An opaque string cursor to fetch the previous page of data.\n\n        The paginated API URLs are returned in the `Link` header when requesting\n        the API. These URLs will contain a `next` and `previous` cursor based on\n        the available data.\n      schema:\n        type: string\n    sortDirection:\n      name: direction\n      in: query\n      description: Sort direction\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n    group:\n      name: group\n      in: path\n      description: |\n        Unique identifier of a Flat group\n      required: true\n      schema:\n        type: string\n    class:\n      name: class\n      in: path\n      description: Unique identifier of the class\n      required: true\n      schema:\n        type: string\n    assignment:\n      name: assignment\n      in: path\n      description: Unique identifier of the assignment\n      required: true\n      schema:\n        type: string\n    submission:\n      name: submission\n      in: path\n      description: Unique identifier of the submission\n      required: true\n      schema:\n        type: string\n    post:\n      name: post\n      in: path\n      description: Unique identifier of the post\n      required: true\n      schema:\n        type: string\n    comment:\n      name: comment\n      in: path\n      description: Unique identifier of the comment\n      required: true\n      schema:\n        type: string\n    role:\n      name: role\n      in: query\n      description: Filter users by role\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - user\n            - teacher\n            - admin\n    searchInputQuery:\n      name: q\n      in: query\n      description: The query to search\n      schema:\n        type: string\n    groupIds:\n      name: group\n      in: query\n      description: Filter users by group\n      schema:\n        type: array\n        items:\n          type: string\n    noActiveLicense:\n      name: noActiveLicense\n      in: query\n      description: Filter users who don't have an active license\n      schema:\n        type: boolean\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/flatapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/flatapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/groups/{group}/scores\": get: responses: code 200: contents: application/json: generate schema: item: allOf: field collaborators: item: allOf: field user: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"oauth2 security"
	]
}