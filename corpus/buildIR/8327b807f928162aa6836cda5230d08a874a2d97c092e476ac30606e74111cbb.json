{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "microsoft.com-cognitiveservices-ComputerVision-2.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/microsoft.com-cognitiveservices-ComputerVision-2.0-swagger.yaml",
			"byteSize": 67205,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: microsoft\n  description: The Computer Vision API provides state-of-the-art algorithms to process\n    images and return information. For example, it can be used to determine if\n    an image contains mature content, or it can be used to find all the faces in\n    an image.  It also has other features like estimating dominant and accent\n    colors, categorizing the content of images, and describing an image with\n    complete English sentences.  Additionally, it can also intelligently\n    generate images thumbnails for displaying large images effectively.\n  title: Computer Vision Client\n  version: \"2.0\"\n  x-apisguru-categories:\n    - cloud\n  x-logo:\n    url: https://twitter.com/microsoft/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/ComputerVision/stable/v2.0/ComputerVision.json\n      version: \"2.0\"\n  x-preferred: false\n  x-providerName: microsoft.com\n  x-serviceName: cognitiveservices-ComputerVision\n  x-tags:\n    - Microsoft\nsecurity:\n  - apim_key: []\npaths:\n  /analyze:\n    post:\n      description: \"This operation extracts a rich set of visual features based on the\n        image content.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL. Within your request, there is an optional\n        parameter to allow you to choose which features to return. By default,\n        image categories are returned in the response.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: AnalyzeImage\n      parameters:\n        - $ref: \"#/components/parameters/VisualFeatures\"\n        - description: \"A string indicating which domain-specific details to return.\n            Multiple values should be comma-separated. Valid visual feature\n            types include: Celebrities - identifies celebrities if detected in\n            the image, Landmarks - identifies notable landmarks in the image.\"\n          in: query\n          name: details\n          required: false\n          x-nullable: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              enum:\n                - Celebrities\n                - Landmarks\n              type: string\n              x-ms-enum:\n                modelAsString: false\n                name: Details\n              nullable: false\n          examples:\n            Successful AnalyzeImage request:\n              value:\n                - Celebrities\n                - Landmarks\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: \"The response include the extracted features in JSON format. Here is\n            the definitions for enumeration types:\\r\n\n            \\ ClipartType\\r\n\n            \\ Non - clipart = 0, ambiguous = 1, normal - clipart =\n            2, good - clipart = 3. LineDrawingTypeNon - LineDrawing = 0,\n            LineDrawing = 1.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageAnalysis\"\n              examples:\n                Successful AnalyzeImage request:\n                  $ref: \"#/components/examples/Successful_AnalyzeImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /areaOfInterest:\n    post:\n      description: \"This operation returns a bounding box around the most important area of\n        the image.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response contains an error code and a message to help\n        determine what went wrong.\\r\n\n        Upon failure, the error code and an error message are returned.\n        The error code could be one of InvalidImageUrl, InvalidImageFormat,\n        InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or\n        InternalServerError.\"\n      operationId: GetAreaOfInterest\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: The response includes the extracted area of interest in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AreaOfInterestResult\"\n              examples:\n                Successful GetAreaOfInterest request:\n                  $ref: \"#/components/examples/Successful_GetAreaOfInterest_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /describe:\n    post:\n      description: \"This operation generates a description of an image in human readable\n        language with complete sentences. The description is based on a\n        collection of content tags, which are also returned by the operation.\n        More than one description can be generated for each image. Descriptions\n        are ordered by their confidence score. All descriptions are in\n        English.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: DescribeImage\n      parameters:\n        - description: Maximum number of candidate descriptions to be returned.  The\n            default is 1.\n          in: query\n          name: maxCandidates\n          required: false\n          x-nullable: true\n          schema:\n            type: integer\n            format: int32\n            default: 1\n          examples:\n            Successful DescribeImage request:\n              value: 1\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: Image description object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageDescription\"\n              examples:\n                Successful DescribeImage request:\n                  $ref: \"#/components/examples/Successful_DescribeImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /detect:\n    post:\n      description: \"Performs object detection on the specified image.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: DetectObjects\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: The response include the detected objects in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DetectResult\"\n              examples:\n                Successful DetectObjects request:\n                  $ref: \"#/components/examples/Successful_DetectObjects_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /generateThumbnail:\n    post:\n      description: \"This operation generates a thumbnail image with the user-specified\n        width and height. By default, the service analyzes the image, identifies\n        the region of interest (ROI), and generates smart cropping coordinates\n        based on the ROI. Smart cropping helps when you specify an aspect ratio\n        that differs from that of the input image.\\r\n\n        A successful response contains the thumbnail image binary. If\n        the request failed, the response contains an error code and a message to\n        help determine what went wrong.\\r\n\n        Upon failure, the error code and an error message are returned.\n        The error code could be one of InvalidImageUrl, InvalidImageFormat,\n        InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n        FailedToProcess, Timeout, or InternalServerError.\"\n      operationId: GenerateThumbnail\n      parameters:\n        - description: Width of the thumbnail, in pixels. It must be between 1 and 1024.\n            Recommended minimum of 50.\n          in: query\n          name: width\n          required: true\n          x-nullable: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 1024\n          examples:\n            Successful GenerateThumbnail request:\n              value: \"500\"\n        - description: Height of the thumbnail, in pixels. It must be between 1 and 1024.\n            Recommended minimum of 50.\n          in: query\n          name: height\n          required: true\n          x-nullable: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 1024\n          examples:\n            Successful GenerateThumbnail request:\n              value: \"500\"\n        - description: Boolean flag for enabling smart cropping.\n          in: query\n          name: smartCropping\n          required: false\n          x-nullable: true\n          schema:\n            type: boolean\n            default: false\n          examples:\n            Successful GenerateThumbnail request:\n              value: true\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: The generated thumbnail in binary format.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n              examples:\n                Successful GenerateThumbnail request:\n                  $ref: \"#/components/examples/Successful_GenerateThumbnail_request\"\n        default:\n          description: Error response.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /models:\n    get:\n      description: \"This operation returns the list of domain-specific models that are\n        supported by the Computer Vision API. Currently, the API supports\n        following domain-specific models: celebrity recognizer, landmark\n        recognizer.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: ListModels\n      responses:\n        \"200\":\n          description: List of available domain models.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListModelsResult\"\n              examples:\n                Successful ListModels request:\n                  $ref: \"#/components/examples/Successful_ListModels_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  \"/models/{model}/analyze\":\n    post:\n      description: \"This operation recognizes content within an image by applying a\n        domain-specific model. The list of domain-specific models that are\n        supported by the Computer Vision API can be retrieved using the /models\n        GET request. Currently, the API provides following domain-specific\n        models: celebrities, landmarks.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON.\\r\n\n        If the request failed, the response will contain an error code\n        and a message to help understand what went wrong.\"\n      operationId: AnalyzeImageByDomain\n      parameters:\n        - description: The domain-specific content to recognize.\n          in: path\n          name: model\n          required: true\n          x-nullable: true\n          schema:\n            type: string\n          examples:\n            Successful AnalyzeImageByDomain request:\n              value: Celebrities\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: Analysis result based on the domain model.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DomainModelResults\"\n              examples:\n                Successful AnalyzeImageByDomain request:\n                  $ref: \"#/components/examples/Successful_AnalyzeImageByDomain_requ\\\n                    est\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /ocr:\n    post:\n      description: \"Optical Character Recognition (OCR) detects text in an image and\n        extracts the recognized characters into a machine-usable character\n        stream.\\r\n\n        Upon success, the OCR results will be returned.\\r\n\n        Upon failure, the error code together with an error message will\n        be returned. The error code can be one of InvalidImageUrl,\n        InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n        NotSupportedLanguage, or InternalServerError.\"\n      operationId: RecognizePrintedText\n      parameters:\n        - $ref: \"#/components/parameters/DetectOrientation\"\n        - $ref: \"#/components/parameters/OcrLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: The OCR results in the hierarchy of region/line/word. The results\n            include text, bounding box for regions, lines and words. The angle,\n            in degrees, of the detected text with respect to the closest\n            horizontal or vertical direction. After rotating the input image\n            clockwise by this angle, the recognized text lines become horizontal\n            or vertical. In combination with the orientation property it can be\n            used to overlay recognition results correctly on the original image,\n            by rotating either the original image or recognition results by a\n            suitable angle around the center of the original image. If the angle\n            cannot be confidently detected, this property is not present. If the\n            image contains text at different angles, only part of the text will\n            be recognized correctly.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OcrResult\"\n              examples:\n                Successful RecognizePrintedText request:\n                  $ref: \"#/components/examples/Successful_RecognizePrintedText_requ\\\n                    est\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /tag:\n    post:\n      description: \"This operation generates a list of words, or tags, that are relevant to\n        the content of the supplied image. The Computer Vision API can return\n        tags based on objects, living beings, scenery or actions found in\n        images. Unlike categories, tags are not organized according to a\n        hierarchical classification system, but correspond to image content.\n        Tags may contain hints to avoid ambiguity or provide context, for\n        example the tag \\\"cello\\\" may be accompanied by the hint \\\"musical\n        instrument\\\". All tags are in English.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: TagImage\n      parameters:\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ImageUrl\"\n      responses:\n        \"200\":\n          description: Image tags object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagResult\"\n              examples:\n                Successful TagImage request:\n                  $ref: \"#/components/examples/Successful_TagImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\nx-ms-paths:\n  /analyze?overload=stream:\n    post:\n      description: \"This operation extracts a rich set of visual features based on the\n        image content.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL. Within your request, there is an optional\n        parameter to allow you to choose which features to return. By default,\n        image categories are returned in the response.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: AnalyzeImageInStream\n      parameters:\n        - $ref: \"#/components/parameters/VisualFeatures\"\n        - description: \"A string indicating which domain-specific details to return.\n            Multiple values should be comma-separated. Valid visual feature\n            types include: Celebrities - identifies celebrities if detected in\n            the image, Landmarks - identifies notable landmarks in the image.\"\n          in: query\n          name: details\n          required: false\n          x-nullable: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              enum:\n                - Celebrities\n                - Landmarks\n              type: string\n              x-ms-enum:\n                modelAsString: false\n                name: Details\n              nullable: false\n          examples:\n            Successful AnalyzeImage request:\n              value:\n                - Celebrities\n                - Landmarks\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: \"The response include the extracted features in JSON format. Here is\n            the definitions for enumeration types:\\r\n\n            \\ ClipartType\\r\n\n            \\ Non - clipart = 0, ambiguous = 1, normal - clipart =\n            2, good - clipart = 3. LineDrawingTypeNon - LineDrawing = 0,\n            LineDrawing = 1.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageAnalysis\"\n              examples:\n                Successful AnalyzeImage request:\n                  $ref: \"#/components/examples/Successful_AnalyzeImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /areaOfInterest?overload=stream:\n    post:\n      description: \"This operation returns a bounding box around the most important area of\n        the image.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response contains an error code and a message to help\n        determine what went wrong.\\r\n\n        Upon failure, the error code and an error message are returned.\n        The error code could be one of InvalidImageUrl, InvalidImageFormat,\n        InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or\n        InternalServerError.\"\n      operationId: GetAreaOfInterestInStream\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: The response includes the extracted area of interest in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AreaOfInterestResult\"\n              examples:\n                Successful GetAreaOfInterest request:\n                  $ref: \"#/components/examples/Successful_GetAreaOfInterest_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /describe?overload=stream:\n    post:\n      description: \"This operation generates a description of an image in human readable\n        language with complete sentences. The description is based on a\n        collection of content tags, which are also returned by the operation.\n        More than one description can be generated for each image. Descriptions\n        are ordered by their confidence score. All descriptions are in\n        English.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: DescribeImageInStream\n      parameters:\n        - description: Maximum number of candidate descriptions to be returned.  The\n            default is 1.\n          in: query\n          name: maxCandidates\n          required: false\n          x-nullable: true\n          schema:\n            type: integer\n            format: int32\n            default: 1\n          examples:\n            Successful DescribeImage request:\n              value: 1\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: Image description object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageDescription\"\n              examples:\n                Successful DescribeImage request:\n                  $ref: \"#/components/examples/Successful_DescribeImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /detect?overload=stream:\n    post:\n      description: \"Performs object detection on the specified image.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: DetectObjectsInStream\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: The response include the detected objects in JSON format.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DetectResult\"\n              examples:\n                Successful DetectObjects request:\n                  $ref: \"#/components/examples/Successful_DetectObjects_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /generateThumbnail?overload=stream:\n    post:\n      description: \"This operation generates a thumbnail image with the user-specified\n        width and height. By default, the service analyzes the image, identifies\n        the region of interest (ROI), and generates smart cropping coordinates\n        based on the ROI. Smart cropping helps when you specify an aspect ratio\n        that differs from that of the input image.\\r\n\n        A successful response contains the thumbnail image binary. If\n        the request failed, the response contains an error code and a message to\n        help determine what went wrong.\\r\n\n        Upon failure, the error code and an error message are returned.\n        The error code could be one of InvalidImageUrl, InvalidImageFormat,\n        InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,\n        FailedToProcess, Timeout, or InternalServerError.\"\n      operationId: GenerateThumbnailInStream\n      parameters:\n        - description: Width of the thumbnail, in pixels. It must be between 1 and 1024.\n            Recommended minimum of 50.\n          in: query\n          name: width\n          required: true\n          x-nullable: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 1024\n          examples:\n            Successful GenerateThumbnail request:\n              value: \"500\"\n        - description: Height of the thumbnail, in pixels. It must be between 1 and 1024.\n            Recommended minimum of 50.\n          in: query\n          name: height\n          required: true\n          x-nullable: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 1024\n          examples:\n            Successful GenerateThumbnail request:\n              value: \"500\"\n        - description: Boolean flag for enabling smart cropping.\n          in: query\n          name: smartCropping\n          required: false\n          x-nullable: true\n          schema:\n            type: boolean\n            default: false\n          examples:\n            Successful GenerateThumbnail request:\n              value: true\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: The generated thumbnail in binary format.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n              examples:\n                Successful GenerateThumbnail request:\n                  $ref: \"#/components/examples/Successful_GenerateThumbnail_request\"\n        default:\n          description: Error response.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  \"/models/{model}/analyze?overload=stream\":\n    post:\n      description: \"This operation recognizes content within an image by applying a\n        domain-specific model. The list of domain-specific models that are\n        supported by the Computer Vision API can be retrieved using the /models\n        GET request. Currently, the API provides following domain-specific\n        models: celebrities, landmarks.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON.\\r\n\n        If the request failed, the response will contain an error code\n        and a message to help understand what went wrong.\"\n      operationId: AnalyzeImageByDomainInStream\n      parameters:\n        - description: The domain-specific content to recognize.\n          in: path\n          name: model\n          required: true\n          x-nullable: true\n          schema:\n            type: string\n          examples:\n            Successful AnalyzeImageByDomain request:\n              value: Celebrities\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: Analysis result based on the domain model.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DomainModelResults\"\n              examples:\n                Successful AnalyzeImageByDomain request:\n                  $ref: \"#/components/examples/Successful_AnalyzeImageByDomain_requ\\\n                    est\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /ocr?overload=stream:\n    post:\n      description: \"Optical Character Recognition (OCR) detects text in an image and\n        extracts the recognized characters into a machine-usable character\n        stream.\\r\n\n        Upon success, the OCR results will be returned.\\r\n\n        Upon failure, the error code together with an error message will\n        be returned. The error code can be one of InvalidImageUrl,\n        InvalidImageFormat, InvalidImageSize, NotSupportedImage,\n        NotSupportedLanguage, or InternalServerError.\"\n      operationId: RecognizePrintedTextInStream\n      parameters:\n        - $ref: \"#/components/parameters/DetectOrientation\"\n        - $ref: \"#/components/parameters/OcrLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: The OCR results in the hierarchy of region/line/word. The results\n            include text, bounding box for regions, lines and words. The angle,\n            in degrees, of the detected text with respect to the closest\n            horizontal or vertical direction. After rotating the input image\n            clockwise by this angle, the recognized text lines become horizontal\n            or vertical. In combination with the orientation property it can be\n            used to overlay recognition results correctly on the original image,\n            by rotating either the original image or recognition results by a\n            suitable angle around the center of the original image. If the angle\n            cannot be confidently detected, this property is not present. If the\n            image contains text at different angles, only part of the text will\n            be recognized correctly.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OcrResult\"\n              examples:\n                Successful RecognizePrintedText request:\n                  $ref: \"#/components/examples/Successful_RecognizePrintedText_requ\\\n                    est\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\n  /tag?overload=stream:\n    post:\n      description: \"This operation generates a list of words, or tags, that are relevant to\n        the content of the supplied image. The Computer Vision API can return\n        tags based on objects, living beings, scenery or actions found in\n        images. Unlike categories, tags are not organized according to a\n        hierarchical classification system, but correspond to image content.\n        Tags may contain hints to avoid ambiguity or provide context, for\n        example the tag \\\"cello\\\" may be accompanied by the hint \\\"musical\n        instrument\\\". All tags are in English.\\r\n\n        Two input methods are supported -- (1) Uploading an image or (2)\n        specifying an image URL.\\r\n\n        A successful response will be returned in JSON. If the request\n        failed, the response will contain an error code and a message to help\n        understand what went wrong.\"\n      operationId: TagImageInStream\n      parameters:\n        - $ref: \"#/components/parameters/ServiceLanguage\"\n      requestBody:\n        $ref: \"#/components/requestBodies/AnalyzeImageInStreamImage\"\n      responses:\n        \"200\":\n          description: Image tags object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagResult\"\n              examples:\n                Successful TagImage request:\n                  $ref: \"#/components/examples/Successful_TagImage_request\"\n        default:\n          description: Error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionError\"\nservers:\n  - url: https://westcentralus.api.cognitive.microsoft.com/vision/v2.0\n  - url: \"{Endpoint}/vision/v2.0\"\n    variables:\n      Endpoint:\n        description: Supported Cognitive Services endpoints.\n        x-ms-parameter-location: client\n        x-ms-skip-url-encoding: true\n        default: \"\"\ncomponents:\n  examples:\n    Successful_AnalyzeImage_request:\n      value:\n        adult:\n          adultScore: 0.0934349000453949\n          isAdultContent: false\n          isRacyContent: false\n          racyScore: 0.06861349195241928\n        brands:\n          - confidence: 0.857\n            name: Pepsi\n            rectangle:\n              h: 177\n              w: 161\n              x: 489\n              y: 79\n          - confidence: 0.893\n            name: Coca-Cola\n            rectangle:\n              h: 372\n              w: 171\n              x: 216\n              y: 55\n        categories:\n          - name: abstract_\n            score: 0.00390625\n          - detail:\n              celebrities:\n                - confidence: 0.999028444\n                  faceRectangle:\n                    height: 248\n                    left: 597\n                    top: 162\n                    width: 248\n                  name: Satya Nadella\n              landmarks:\n                - confidence: 0.9978346\n                  name: Forbidden City\n            name: people_\n            score: 0.83984375\n        color:\n          accentColor: 873B59\n          dominantColorBackground: Brown\n          dominantColorForeground: Brown\n          dominantColors:\n            - Brown\n            - Black\n          isBWImg: false\n        description:\n          captions:\n            - confidence: 0.48293603002174407\n              text: Satya Nadella sitting on a bench\n          tags:\n            - person\n            - man\n            - outdoor\n            - window\n            - glasses\n        faces:\n          - age: 44\n            faceRectangle:\n              height: 250\n              left: 593\n              top: 160\n              width: 250\n            gender: Male\n        imageType:\n          clipArtType: 0\n          lineDrawingType: 0\n        metadata:\n          format: Jpeg\n          height: 1000\n          width: 1500\n        objects:\n          - confidence: 0.9\n            object: tree\n            parent:\n              confidence: 0.95\n              object: plant\n            rectangle:\n              h: 50\n              w: 50\n              x: 0\n              y: 0\n        requestId: 0dbec5ad-a3d3-4f7e-96b4-dfd57efe967d\n        tags:\n          - confidence: 0.9897908568382263\n            name: person\n          - confidence: 0.9449388980865479\n            name: man\n          - confidence: 0.938492476940155\n            name: outdoor\n          - confidence: 0.8951393961906433\n            name: window\n          - confidence: 0.7250059783791661\n            hint: mammal\n            name: pangolin\n    Successful_GetAreaOfInterest_request:\n      value:\n        areaOfInterest:\n          h: 951\n          w: 950\n          x: 160\n          y: 0\n        metadata:\n          format: Jpeg\n          height: 951\n          width: 1378\n        requestId: ed2de1c6-fb55-4686-b0da-4da6e05d283f\n    Successful_DescribeImage_request:\n      value:\n        description:\n          captions:\n            - confidence: 0.48293603002174407\n              text: Satya Nadella sitting on a bench\n            - confidence: 0.4003700681542283\n              text: Satya Nadella is sitting on a bench\n            - confidence: 0.38035155997373377\n              text: Satya Nadella sitting in front of a building\n          tags:\n            - person\n            - man\n            - outdoor\n            - window\n            - glasses\n        metadata:\n          format: Jpeg\n          height: 1000\n          width: 1500\n        requestId: ed2de1c6-fb55-4686-b0da-4da6e05d283f\n    Successful_DetectObjects_request:\n      value:\n        metadata:\n          format: Jpeg\n          height: 100\n          width: 100\n        objects:\n          - confidence: 0.9\n            object: tree\n            parent:\n              confidence: 0.95\n              object: plant\n            rectangle:\n              h: 50\n              w: 50\n              x: 0\n              y: 0\n        requestId: 1ad0e45e-b7b4-4be3-8042-53be96103337\n    Successful_GenerateThumbnail_request:\n      value: \"{binary}\"\n    Successful_ListModels_request:\n      value:\n        models:\n          - categories:\n              - people_\n            name: celebrities\n          - categories:\n              - building_\n            name: landmarks\n    Successful_AnalyzeImageByDomain_request:\n      value:\n        metadata:\n          format: Jpeg\n          height: 1000\n          width: 1500\n        requestId: f0027b4b-dc0d-4082-9228-1545ed246b03\n        result:\n          celebrities:\n            - confidence: 0.999028444\n              faceRectangle:\n                height: 248\n                left: 597\n                top: 162\n                width: 248\n              name: Satya Nadella\n    Successful_RecognizePrintedText_request:\n      value:\n        language: en\n        orientation: Up\n        regions:\n          - boundingBox: 462,379,497,258\n            lines:\n              - boundingBox: 462,379,497,74\n                words:\n                  - boundingBox: 462,379,41,73\n                    text: A\n                  - boundingBox: 523,379,153,73\n                    text: GOAL\n                  - boundingBox: 694,379,265,74\n                    text: WITHOUT\n              - boundingBox: 565,471,289,74\n                words:\n                  - boundingBox: 565,471,41,73\n                    text: A\n                  - boundingBox: 626,471,150,73\n                    text: PLAN\n                  - boundingBox: 801,472,53,73\n                    text: IS\n              - boundingBox: 519,563,375,74\n                words:\n                  - boundingBox: 519,563,149,74\n                    text: JUST\n                  - boundingBox: 683,564,41,72\n                    text: A\n                  - boundingBox: 741,564,153,73\n                    text: WISH\n        textAngle: -2.0000000000000338\n    Successful_TagImage_request:\n      value:\n        metadata:\n          format: Jpeg\n          height: 400\n          width: 400\n        requestId: 1ad0e45e-b7b4-4be3-8042-53be96103337\n        tags:\n          - confidence: 0.9999997615814209\n            name: grass\n          - confidence: 0.9999706745147705\n            name: outdoor\n          - confidence: 0.9992897510528564\n            name: sky\n          - confidence: 0.9964632391929626\n            name: building\n          - confidence: 0.9927980303764343\n            name: house\n          - confidence: 0.8226802945137024\n            name: lawn\n          - confidence: 0.6412225365638733\n            name: green\n          - confidence: 0.31403225660324097\n            name: residential\n  parameters:\n    DetectOrientation:\n      description: Whether detect the text orientation in the image. With\n        detectOrientation=true the OCR service tries to detect the image\n        orientation and correct it before further processing (e.g. if it's\n        upside-down).\n      in: query\n      name: detectOrientation\n      required: true\n      x-ms-parameter-location: method\n      schema:\n        type: boolean\n        default: true\n      examples:\n        Successful RecognizePrintedText request:\n          value: \"true\"\n    Endpoint:\n      description: Supported Cognitive Services endpoints.\n      in: path\n      name: Endpoint\n      required: true\n      x-ms-parameter-location: client\n      x-ms-skip-url-encoding: true\n      schema:\n        type: string\n    OcrLanguage:\n      description: The BCP-47 language code of the text to be detected in the image. The\n        default value is 'unk'.\n      in: query\n      name: language\n      required: false\n      x-ms-enum:\n        modelAsString: false\n        name: OcrLanguages\n      x-ms-parameter-location: method\n      x-nullable: false\n      schema:\n        type: string\n        enum:\n          - unk\n          - zh-Hans\n          - zh-Hant\n          - cs\n          - da\n          - nl\n          - en\n          - fi\n          - fr\n          - de\n          - el\n          - hu\n          - it\n          - ja\n          - ko\n          - nb\n          - pl\n          - pt\n          - ru\n          - es\n          - sv\n          - tr\n          - ar\n          - ro\n          - sr-Cyrl\n          - sr-Latn\n          - sk\n        default: unk\n      examples:\n        Successful RecognizePrintedText request:\n          value: en\n    ServiceLanguage:\n      description: The desired language for output generation. If this parameter is not\n        specified, the default value is \u0026quot;en\u0026quot;.Supported languages:en -\n        English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh -\n        Simplified Chinese.\n      in: query\n      name: language\n      required: false\n      x-ms-parameter-location: method\n      x-nullable: false\n      schema:\n        type: string\n        enum:\n          - en\n          - es\n          - ja\n          - pt\n          - zh\n        default: en\n      examples:\n        Successful AnalyzeImage request:\n          value: en\n    VisualFeatures:\n      description: \"A string indicating what visual feature types to return. Multiple\n        values should be comma-separated. Valid visual feature types include:\n        Categories - categorizes image content according to a taxonomy defined\n        in documentation. Tags - tags the image with a detailed list of words\n        related to the image content. Description - describes the image content\n        with a complete English sentence. Faces - detects if faces are present.\n        If present, generate coordinates, gender and age. ImageType - detects if\n        image is clipart or a line drawing. Color - determines the accent color,\n        dominant color, and whether an image is black\u0026white. Adult - detects if\n        the image is pornographic in nature (depicts nudity or a sex\n        act).  Sexually suggestive content is also detected. Objects - detects\n        various objects within an image, including the approximate location. The\n        Objects argument is only available in English. Brands - detects various\n        brands within an image, including the approximate location. The Brands\n        argument is only available in English.\"\n      in: query\n      name: visualFeatures\n      required: false\n      x-ms-parameter-location: method\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          enum:\n            - ImageType\n            - Faces\n            - Adult\n            - Categories\n            - Color\n            - Tags\n            - Description\n            - Objects\n            - Brands\n          type: string\n          x-ms-enum:\n            modelAsString: false\n            name: VisualFeatureTypes\n          nullable: false\n      examples:\n        Successful AnalyzeImage request:\n          value:\n            - Categories\n            - Adult\n            - Tags\n            - Description\n            - Faces\n            - Color\n            - ImageType\n            - Objects\n            - Brands\n  requestBodies:\n    AnalyzeImageInStreamImage:\n      content:\n        application/octet-stream:\n          schema:\n            format: file\n            type: object\n        multipart/form-data:\n          schema:\n            format: file\n            type: object\n      description: An image stream.\n      required: true\n      x-ms-parameter-location: method\n    ImageUrl:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ImageUrl\"\n      description: A JSON document with a URL pointing to the image that is to be analyzed.\n      required: true\n      x-ms-client-flatten: true\n      x-ms-parameter-location: method\n  securitySchemes:\n    apim_key:\n      in: header\n      name: Ocp-Apim-Subscription-Key\n      type: apiKey\n  schemas:\n    AdultInfo:\n      description: An object describing whether the image contains adult-oriented content\n        and/or is racy.\n      properties:\n        adultScore:\n          description: Score from 0 to 1 that indicates how much the content is considered\n            adult-oriented within the image.\n          format: double\n          type: number\n          nullable: false\n        isAdultContent:\n          description: A value indicating if the image contains adult-oriented content.\n          type: boolean\n          nullable: false\n        isRacyContent:\n          description: A value indicating if the image is racy.\n          type: boolean\n          nullable: false\n        racyScore:\n          description: Score from 0 to 1 that indicates how suggestive is the image.\n          format: double\n          type: number\n          nullable: false\n      type: object\n      nullable: true\n    AreaOfInterestResult:\n      description: Result of AreaOfInterest operation.\n      properties:\n        areaOfInterest:\n          $ref: \"#/components/schemas/BoundingRect\"\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    BoundingRect:\n      description: A bounding box for an area inside an image.\n      properties:\n        h:\n          description: Height measured from the top-left point of the area, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        w:\n          description: Width measured from the top-left point of the area, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        x:\n          description: X-coordinate of the top left point of the area, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        y:\n          description: Y-coordinate of the top left point of the area, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n      type: object\n      nullable: false\n    Category:\n      description: An object describing identified category.\n      properties:\n        detail:\n          $ref: \"#/components/schemas/CategoryDetail\"\n        name:\n          description: Name of the category.\n          type: string\n          nullable: true\n        score:\n          description: Scoring of the category.\n          format: double\n          type: number\n          nullable: false\n      type: object\n      nullable: true\n    CategoryDetail:\n      description: An object describing additional category details.\n      properties:\n        celebrities:\n          description: An array of celebrities if any identified.\n          items:\n            $ref: \"#/components/schemas/CelebritiesModel\"\n          type: array\n          nullable: true\n        landmarks:\n          description: An array of landmarks if any identified.\n          items:\n            $ref: \"#/components/schemas/LandmarksModel\"\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    CelebritiesModel:\n      description: An object describing possible celebrity identification.\n      properties:\n        confidence:\n          description: Confidence level for the celebrity recognition as a value ranging\n            from 0 to 1.\n          format: double\n          type: number\n          nullable: false\n        faceRectangle:\n          $ref: \"#/components/schemas/FaceRectangle\"\n        name:\n          description: Name of the celebrity.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    CelebrityResults:\n      description: Result of domain-specific classifications for the domain of celebrities.\n      properties:\n        celebrities:\n          description: List of celebrities recognized in the image.\n          items:\n            $ref: \"#/components/schemas/CelebritiesModel\"\n          type: array\n          nullable: true\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ColorInfo:\n      description: An object providing additional metadata describing color attributes.\n      properties:\n        accentColor:\n          description: Possible accent color.\n          type: string\n          nullable: true\n        dominantColorBackground:\n          description: Possible dominant background color.\n          type: string\n          nullable: true\n        dominantColorForeground:\n          description: Possible dominant foreground color.\n          type: string\n          nullable: true\n        dominantColors:\n          description: An array of possible dominant colors.\n          items:\n            type: string\n            nullable: true\n          type: array\n          nullable: true\n        isBWImg:\n          description: A value indicating if the image is black and white.\n          type: boolean\n          nullable: false\n      type: object\n      nullable: true\n    ComputerVisionError:\n      description: Details about the API request error.\n      properties:\n        code:\n          description: The error code.\n          enum:\n            - InvalidImageFormat\n            - UnsupportedMediaType\n            - InvalidImageUrl\n            - NotSupportedFeature\n            - NotSupportedImage\n            - Timeout\n            - InternalServerError\n            - InvalidImageSize\n            - BadArgument\n            - DetectFaceError\n            - NotSupportedLanguage\n            - InvalidThumbnailSize\n            - InvalidDetails\n            - InvalidModel\n            - CancelledRequest\n            - NotSupportedVisualFeature\n            - FailedToProcess\n            - Unspecified\n            - StorageException\n          x-ms-enum:\n            modelAsString: true\n            name: ComputerVisionErrorCodes\n        message:\n          description: A message explaining the error reported by the service.\n          type: string\n        requestId:\n          description: A unique request identifier.\n          type: string\n      required:\n        - code\n        - message\n      type: object\n    DetectResult:\n      description: Result of a DetectImage call.\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        objects:\n          description: An array of detected objects.\n          items:\n            $ref: \"#/components/schemas/DetectedObject\"\n          readOnly: true\n          type: array\n          nullable: true\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    DetectedBrand:\n      description: A brand detected in an image.\n      properties:\n        confidence:\n          description: Confidence score of having observed the brand in the image, as a\n            value ranging from 0 to 1.\n          format: double\n          readOnly: true\n          type: number\n          nullable: false\n        name:\n          description: Label for the brand.\n          readOnly: true\n          type: string\n          nullable: true\n        rectangle:\n          $ref: \"#/components/schemas/BoundingRect\"\n      type: object\n      nullable: true\n    DetectedObject:\n      description: An object detected in an image.\n      properties:\n        confidence:\n          description: Confidence score of having observed the object in the image, as a\n            value ranging from 0 to 1.\n          format: double\n          type: number\n          nullable: false\n        object:\n          description: Label for the object.\n          type: string\n          nullable: true\n        parent:\n          $ref: \"#/components/schemas/ObjectHierarchy\"\n        rectangle:\n          $ref: \"#/components/schemas/BoundingRect\"\n      type: object\n      nullable: true\n    DomainModelResults:\n      description: Result of image analysis using a specific domain model including\n        additional metadata.\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n        result:\n          description: Model-specific response.\n          type: object\n          x-ms-client-flatten: true\n      type: object\n      nullable: true\n    FaceDescription:\n      description: An object describing a face identified in the image.\n      properties:\n        age:\n          description: Possible age of the face.\n          format: int32\n          type: integer\n          nullable: false\n        faceRectangle:\n          $ref: \"#/components/schemas/FaceRectangle\"\n        gender:\n          description: Possible gender of the face.\n          enum:\n            - Male\n            - Female\n          type: string\n          x-ms-enum:\n            modelAsString: false\n            name: Gender\n          nullable: true\n      type: object\n      nullable: true\n    FaceRectangle:\n      description: An object describing face rectangle.\n      properties:\n        height:\n          description: Height measured from the top-left point of the face, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        left:\n          description: X-coordinate of the top left point of the face, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        top:\n          description: Y-coordinate of the top left point of the face, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        width:\n          description: Width measured from the top-left point of the face, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n      type: object\n      nullable: true\n    ImageAnalysis:\n      description: Result of AnalyzeImage operation.\n      properties:\n        adult:\n          $ref: \"#/components/schemas/AdultInfo\"\n        brands:\n          description: Array of brands detected in the image.\n          items:\n            $ref: \"#/components/schemas/DetectedBrand\"\n          type: array\n          nullable: true\n        categories:\n          description: An array indicating identified categories.\n          items:\n            $ref: \"#/components/schemas/Category\"\n          type: array\n          nullable: true\n        color:\n          $ref: \"#/components/schemas/ColorInfo\"\n        description:\n          $ref: \"#/components/schemas/ImageDescriptionDetails\"\n        faces:\n          description: An array of possible faces within the image.\n          items:\n            $ref: \"#/components/schemas/FaceDescription\"\n          type: array\n          nullable: true\n        imageType:\n          $ref: \"#/components/schemas/ImageType\"\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        objects:\n          description: Array of objects describing what was detected in the image.\n          items:\n            $ref: \"#/components/schemas/DetectedObject\"\n          type: array\n          nullable: true\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n        tags:\n          description: A list of tags with confidence level.\n          items:\n            $ref: \"#/components/schemas/ImageTag\"\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    ImageCaption:\n      description: An image caption, i.e. a brief description of what the image depicts.\n      properties:\n        confidence:\n          description: The level of confidence the service has in the caption.\n          format: double\n          type: number\n          nullable: false\n        text:\n          description: The text of the caption.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ImageDescription:\n      description: A collection of content tags, along with a list of captions sorted by\n        confidence level, and image metadata.\n      properties:\n        description:\n          $ref: \"#/components/schemas/ImageDescriptionDetails\"\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ImageDescriptionDetails:\n      description: A collection of content tags, along with a list of captions sorted by\n        confidence level, and image metadata.\n      properties:\n        captions:\n          description: A list of captions, sorted by confidence level.\n          items:\n            $ref: \"#/components/schemas/ImageCaption\"\n          type: array\n          nullable: true\n        tags:\n          description: A collection of image tags.\n          items:\n            type: string\n            nullable: true\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    ImageMetadata:\n      description: Image metadata.\n      properties:\n        format:\n          description: Image format.\n          type: string\n          nullable: true\n        height:\n          description: Image height, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n        width:\n          description: Image width, in pixels.\n          format: int32\n          type: integer\n          nullable: false\n      type: object\n      nullable: true\n    ImageTag:\n      description: An entity observation in the image, along with the confidence score.\n      properties:\n        confidence:\n          description: The level of confidence that the entity was observed.\n          format: double\n          type: number\n          nullable: false\n        hint:\n          description: Optional hint/details for this tag.\n          type: string\n          nullable: true\n        name:\n          description: Name of the entity.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ImageType:\n      description: An object providing possible image types and matching confidence levels.\n      properties:\n        clipArtType:\n          description: Confidence level that the image is a clip art.\n          format: int32\n          type: integer\n          nullable: false\n        lineDrawingType:\n          description: Confidence level that the image is a line drawing.\n          format: int32\n          type: integer\n          nullable: false\n      type: object\n      nullable: true\n    ImageUrl:\n      properties:\n        url:\n          description: Publicly reachable URL of an image.\n          type: string\n      required:\n        - url\n      type: object\n    LandmarkResults:\n      description: Result of domain-specific classifications for the domain of landmarks.\n      properties:\n        landmarks:\n          description: List of landmarks recognized in the image.\n          items:\n            $ref: \"#/components/schemas/LandmarksModel\"\n          type: array\n          nullable: true\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    LandmarksModel:\n      description: A landmark recognized in the image.\n      properties:\n        confidence:\n          description: Confidence level for the landmark recognition as a value ranging\n            from 0 to 1.\n          format: double\n          type: number\n          nullable: false\n        name:\n          description: Name of the landmark.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ListModelsResult:\n      description: Result of the List Domain Models operation.\n      properties:\n        models:\n          description: An array of supported models.\n          items:\n            $ref: \"#/components/schemas/ModelDescription\"\n          readOnly: true\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    ModelDescription:\n      description: An object describing supported model by name and categories.\n      properties:\n        categories:\n          description: Categories of the model.\n          items:\n            type: string\n            nullable: true\n          type: array\n          nullable: true\n        name:\n          description: The name of the model.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    ObjectHierarchy:\n      description: An object detected inside an image.\n      properties:\n        confidence:\n          description: Confidence score of having observed the object in the image, as a\n            value ranging from 0 to 1.\n          format: double\n          type: number\n          nullable: false\n        object:\n          description: Label for the object.\n          type: string\n          nullable: true\n        parent:\n          $ref: \"#/components/schemas/ObjectHierarchy\"\n      type: object\n      nullable: true\n    OcrLine:\n      description: An object describing a single recognized line of text.\n      properties:\n        boundingBox:\n          description: Bounding box of a recognized line. The four integers represent the\n            x-coordinate of the left edge, the y-coordinate of the top edge,\n            width, and height of the bounding box, in the coordinate system of\n            the input image, after it has been rotated around its center\n            according to the detected text angle (see textAngle property), with\n            the origin at the top-left corner, and the y-axis pointing down.\n          type: string\n          nullable: true\n        words:\n          description: An array of objects, where each object represents a recognized word.\n          items:\n            $ref: \"#/components/schemas/OcrWord\"\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    OcrRegion:\n      description: A region consists of multiple lines (e.g. a column of text in a\n        multi-column document).\n      properties:\n        boundingBox:\n          description: Bounding box of a recognized region. The four integers represent the\n            x-coordinate of the left edge, the y-coordinate of the top edge,\n            width, and height of the bounding box, in the coordinate system of\n            the input image, after it has been rotated around its center\n            according to the detected text angle (see textAngle property), with\n            the origin at the top-left corner, and the y-axis pointing down.\n          type: string\n          nullable: true\n        lines:\n          description: An array of recognized lines of text.\n          items:\n            $ref: \"#/components/schemas/OcrLine\"\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n    OcrResult:\n      properties:\n        language:\n          description: The BCP-47 language code of the text in the image.\n          type: string\n          nullable: true\n        orientation:\n          description: Orientation of the text recognized in the image. The value (up,\n            down, left, or right) refers to the direction that the top of the\n            recognized text is facing, after the image has been rotated around\n            its center according to the detected text angle (see textAngle\n            property).\n          type: string\n          nullable: true\n        regions:\n          description: An array of objects, where each object represents a region of\n            recognized text.\n          items:\n            $ref: \"#/components/schemas/OcrRegion\"\n          type: array\n          nullable: true\n        textAngle:\n          description: The angle, in degrees, of the detected text with respect to the\n            closest horizontal or vertical direction. After rotating the input\n            image clockwise by this angle, the recognized text lines become\n            horizontal or vertical. In combination with the orientation property\n            it can be used to overlay recognition results correctly on the\n            original image, by rotating either the original image or recognition\n            results by a suitable angle around the center of the original image.\n            If the angle cannot be confidently detected, this property is not\n            present. If the image contains text at different angles, only part\n            of the text will be recognized correctly.\n          format: double\n          type: number\n          nullable: false\n      type: object\n      nullable: true\n    OcrWord:\n      description: Information on a recognized word.\n      properties:\n        boundingBox:\n          description: Bounding box of a recognized word. The four integers represent the\n            x-coordinate of the left edge, the y-coordinate of the top edge,\n            width, and height of the bounding box, in the coordinate system of\n            the input image, after it has been rotated around its center\n            according to the detected text angle (see textAngle property), with\n            the origin at the top-left corner, and the y-axis pointing down.\n          type: string\n          nullable: true\n        text:\n          description: String value of a recognized word.\n          type: string\n          nullable: true\n      type: object\n      nullable: true\n    TagResult:\n      description: The results of a image tag operation, including any tags and image\n        metadata.\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/ImageMetadata\"\n        requestId:\n          description: Id of the REST API request.\n          type: string\n          nullable: true\n        tags:\n          description: A list of tags with confidence level.\n          items:\n            $ref: \"#/components/schemas/ImageTag\"\n          type: array\n          nullable: true\n      type: object\n      nullable: true\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/microsoft.com-cognitiveservices-ComputerVision-2.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/microsoft.com-cognitiveservices-ComputerVision-2.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/generateThumbnail\": post: responses: default: contents: application/octet-stream: octet stream with \"object\" schema not supported"
}