{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/readmeio/api-explorer"
		},
		"file": {
			"name": "types.json",
			"size": 0,
			"path": "example/swagger-files/types.json",
			"byteSize": 20422,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"servers\": [\n    {\n      \"url\": \"https://httpbin.org\"\n    }\n  ],\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"An example of how we render different data types\"\n  },\n  \"paths\": {\n    \"/anything/object-in-query-params\": {\n      \"post\": {\n        \"summary\": \"Supplying an object in a query param (currently unsupported)\",\n        \"parameters\": [\n          {\n            \"name\": \"object in query param\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"string property\": {\n                  \"type\": \"string\"\n                },\n                \"array property\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/primitive-types\": {\n      \"post\": {\n        \"summary\": \"Primitive data types\",\n        \"parameters\": [\n          {\n            \"name\": \"array_of_freeform_objects\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"string\": {\n                    \"type\": \"string\",\n                    \"description\": \"This is a string with a description\"\n                  },\n                  \"string with markdown description\": {\n                    \"type\": \"string\",\n                    \"description\": \"This is a string with a **markdown** description: [link](ref:action-object)\"\n                  },\n                  \"string without description\": {\n                    \"type\": \"string\",\n                    \"example\": \"Example content\"\n                  },\n                  \"string with default value\": {\n                    \"type\": \"string\",\n                    \"default\": \"default value\"\n                  },\n                  \"string (format: binary)\": {\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  },\n                  \"string (format: blob)\": {\n                    \"description\": \"Strings with `format: blob` should render a `\u003ctextarea\u003e`.\",\n                    \"type\": \"string\",\n                    \"format\": \"blob\",\n                    \"example\": \"This is some example content for this parameter.\"\n                  },\n                  \"string (format: date)\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"string (format: date, with pattern)\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\",\n                    \"description\": \"This accepts a pattern of matching `(\\\\d{4})-(\\\\d{2})-(\\\\d{2})`\",\n                    \"pattern\": \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\"\n                  },\n                  \"string (format: date-time)\": {\n                    \"description\": \"Unsupported due to the varying ways that `date-time` is utilized in API definitions for representing dates, the [lack of wide browser support for the input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Browser_compatibility), and that it's not [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant.\",\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                  },\n                  \"string (format: html)\": {\n                    \"description\": \"Strings with `format: html` should render a `\u003ctextarea\u003e`.\",\n                    \"type\": \"string\",\n                    \"format\": \"html\"\n                  },\n                  \"string (format: json)\": {\n                    \"description\": \"This is a special ReadMe type to render a `\u003ctextarea\u003e` to be parsed as JSON\",\n                    \"type\": \"string\",\n                    \"format\": \"json\"\n                  },\n                  \"string (format: string)\": {\n                    \"type\": \"string\",\n                    \"format\": \"string\"\n                  },\n                  \"string (format: password, minLength: 5, maxLength: 20)\": {\n                    \"type\": \"string\",\n                    \"format\": \"password\",\n                    \"minLength\": 5,\n                    \"maxLength\": 20\n                  },\n                  \"string (format: url)\": {\n                    \"type\": \"string\",\n                    \"format\": \"url\"\n                  },\n                  \"string (format: unknown-format)\": {\n                    \"type\": \"string\",\n                    \"format\": \"unknown-format\"\n                  },\n                  \"string (enum)\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"]\n                  },\n                  \"string (enum, with default)\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"default\": \"available\"\n                  },\n                  \"integer\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\",\n                    \"description\": \"This is an integer with a description\"\n                  },\n                  \"integer without description\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"integer (format: int8)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int8\"\n                  },\n                  \"integer (format: uint8)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint8\"\n                  },\n                  \"integer (format: int16)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int16\"\n                  },\n                  \"integer (format: uint16)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint16\"\n                  },\n                  \"integer (format: int32)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"integer (format: int32) with multipleOf 2\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"multipleOf\": 2\n                  },\n                  \"integer (format: uint32)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint32\"\n                  },\n                  \"integer (format: int64)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"integer (format: uint64)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\"\n                  },\n                  \"integer without `format`\": {\n                    \"type\": \"integer\"\n                  },\n                  \"number (format: float)\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"number (format: double)\": {\n                    \"type\": \"number\",\n                    \"format\": \"double\"\n                  },\n                  \"number without `format`\": {\n                    \"type\": \"number\"\n                  },\n                  \"boolean\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"This is an boolean with a description\"\n                  },\n                  \"boolean without description\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"array (of mixed content)\": {\n                    \"type\": \"array\",\n                    \"items\": {}\n                  },\n                  \"array (of mixed content, no `items` property)\": {\n                    \"type\": \"array\",\n                    \"description\": \"Techncally this is a malformed schema, but we support it and repair it to have `items: {}`\"\n                  },\n                  \"array (of strings)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"array (of strings, loaded via a $ref)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"$ref\": \"#/components/schemas/string_enum\"\n                    }\n                  },\n                  \"array (of objects)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"string\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  },\n                  \"array (of objects, freeform)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"additionalProperties\": true\n                    }\n                  },\n                  \"array (of array of objects)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"string\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    }\n                  },\n                  \"object\": {\n                    \"type\": \"object\",\n                    \"description\": \"This is an object with a description\",\n                    \"properties\": {\n                      \"string inside object\": {\n                        \"type\": \"string\",\n                        \"description\": \"This is a string with a description\"\n                      },\n                      \"nested object\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"string\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"array inside object\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  },\n                  \"object without description\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"string inside object without description\": {\n                        \"type\": \"string\"\n                      }\n                    }\n                  },\n                  \"object without type\": {\n                    \"description\": \"Updated status of the pet\",\n                    \"properties\": {\n                      \"property1\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"property2\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      }\n                    }\n                  },\n                  \"object with `additionalProperties: true`\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  },\n                  \"object without `properties`\": {\n                    \"type\": \"object\"\n                  }\n                }\n              },\n              \"examples\": {\n                \"distinctName\": {\n                  \"value\": {\n                    \"string\": \"Example content\",\n                    \"array (of strings)\": [\"https://example.com/image.png\"]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/arrays\": {\n      \"post\": {\n        \"summary\": \"Arrays of different data types\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"array of strings\": {\n                    \"type\": \"array\",\n                    \"description\": \"This is an array of strings with a description\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"array without description\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"array of integers\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    }\n                  },\n                  \"array of booleans\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"boolean\"\n                    }\n                  },\n                  \"array of objects\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"id\": {\n                          \"type\": \"integer\",\n                          \"format\": \"int64\"\n                        },\n                        \"name\": {\n                          \"type\": \"string\"\n                        },\n                        \"object\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"a\": {\n                              \"type\": \"string\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/circular-reference\": {\n      \"post\": {\n        \"summary\": \"Circular reference inside object\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"circular\": {\n                    \"$ref\": \"#/components/schemas/Circular\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-string\": {\n      \"post\": {\n        \"summary\": \"Top level string property\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-string-json\": {\n      \"post\": {\n        \"summary\": \"Top level string property with JSON format\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\",\n                \"format\": \"json\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-integer\": {\n      \"post\": {\n        \"summary\": \"Top level integer property\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-boolean\": {\n      \"post\": {\n        \"summary\": \"Top level boolean property\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-array-of-objects\": {\n      \"post\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    },\n                    \"name\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-array-of-primitives\": {\n      \"post\": {\n        \"summary\": \"Top level array of primitives\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-circular-reference\": {\n      \"post\": {\n        \"summary\": \"Top level circular reference\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Circular\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-using-raw-body-string\": {\n      \"post\": {\n        \"summary\": \"RAW_BODY string\",\n        \"description\": \"This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"RAW_BODY\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/top-level-using-raw-body-json\": {\n      \"post\": {\n        \"summary\": \"RAW_BODY json\",\n        \"description\": \"This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        },\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"RAW_BODY\": {\n                    \"type\": \"string\",\n                    \"format\": \"json\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"string_enum\": {\n        \"enum\": [\n          \"available\",\n          \"pending\",\n          \"sold\"\n        ],\n        \"type\": \"string\"\n      },\n      \"Circular\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"string\": {\n            \"type\": \"string\"\n          },\n          \"children\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Circular\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"x-readme\": {\n    \"explorer-enabled\": true,\n    \"samples-enabled\": true,\n    \"samples-languages\": [\"curl\", \"node\", \"ruby\", \"javascript\", \"python\"]\n  }\n}\n"
		}
	},
	"Error": "buildIR: make ir: path \"/anything/object-in-query-params\": post: parameters: field \"ArrayProperty\": nested arrays not allowed",
	"NotImplemented": [
		"object with additionalProperties"
	]
}