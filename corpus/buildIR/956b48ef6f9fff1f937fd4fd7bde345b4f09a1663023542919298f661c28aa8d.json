{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/telegram.org/5.0.0/openapi.yaml",
			"byteSize": 459525,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.telegram.org/bot{token}\n    variables:\n      token:\n        default: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n        description: Each bot is given a unique authentication token when it is created.\ninfo:\n  description: Auto-generated OpenAPI schema\n  title: Telegram Bot API\n  version: 5.0.0\n  x-apisguru-categories:\n    - messaging\n  x-origin:\n    - format: openapi\n      url: https://josxa.stoplight.io/api/v1/projects/josxa/bot-api/nodes/openapi.json?branch=main\n      version: \"3.0\"\n  x-providerName: telegram.org\nexternalDocs:\n  description: The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.\n  url: https://core.telegram.org/bots/api\npaths:\n  /addStickerToSet:\n    post:\n      description: Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#addstickertoset\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                emojis:\n                  description: One or more emoji corresponding to the sticker\n                  type: string\n                mask_position:\n                  $ref: \"#/components/schemas/MaskPosition\"\n                name:\n                  description: Sticker set name\n                  type: string\n                png_sticker:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: \"**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\\\\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n                tgs_sticker:\n                  $ref: \"#/components/schemas/InputFile\"\n                user_id:\n                  description: User identifier of sticker set owner\n                  type: integer\n              required:\n                - user_id\n                - name\n                - emojis\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /answerCallbackQuery:\n    post:\n      description: |-\n        Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.\n\n        Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#answercallbackquery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                cache_time:\n                  default: 0\n                  description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.\n                  type: integer\n                callback_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n                show_alert:\n                  default: false\n                  description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.\n                  type: boolean\n                text:\n                  description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters\n                  type: string\n                url:\n                  description: |-\n                    URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\n                    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n                  type: string\n              required:\n                - callback_query_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                cache_time:\n                  default: 0\n                  description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.\n                  type: integer\n                callback_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n                show_alert:\n                  default: false\n                  description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.\n                  type: boolean\n                text:\n                  description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters\n                  type: string\n                url:\n                  description: |-\n                    URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\n                    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n                  type: string\n              required:\n                - callback_query_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                cache_time:\n                  default: 0\n                  description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.\n                  type: integer\n                callback_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n                show_alert:\n                  default: false\n                  description: If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.\n                  type: boolean\n                text:\n                  description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters\n                  type: string\n                url:\n                  description: |-\n                    URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.  \n\n                    Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n                  type: string\n              required:\n                - callback_query_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /answerInlineQuery:\n    post:\n      description: |-\n        Use this method to send answers to an inline query. On success, *True* is returned.  \n        No more than **50** results per query are allowed.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#answerinlinequery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                cache_time:\n                  default: 300\n                  description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\n                  type: integer\n                inline_query_id:\n                  description: Unique identifier for the answered query\n                  type: string\n                is_personal:\n                  description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query\n                  type: boolean\n                next_offset:\n                  description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\n                  type: string\n                results:\n                  description: A JSON-serialized array of results for the inline query\n                  items:\n                    $ref: \"#/components/schemas/InlineQueryResult\"\n                  type: array\n                switch_pm_parameter:\n                  description: |-\n                    [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n                    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n                  type: string\n                switch_pm_text:\n                  description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*\n                  type: string\n              required:\n                - inline_query_id\n                - results\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                cache_time:\n                  default: 300\n                  description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\n                  type: integer\n                inline_query_id:\n                  description: Unique identifier for the answered query\n                  type: string\n                is_personal:\n                  description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query\n                  type: boolean\n                next_offset:\n                  description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\n                  type: string\n                results:\n                  description: A JSON-serialized array of results for the inline query\n                  items:\n                    $ref: \"#/components/schemas/InlineQueryResult\"\n                  type: array\n                switch_pm_parameter:\n                  description: |-\n                    [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n                    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n                  type: string\n                switch_pm_text:\n                  description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*\n                  type: string\n              required:\n                - inline_query_id\n                - results\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                cache_time:\n                  default: 300\n                  description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\n                  type: integer\n                inline_query_id:\n                  description: Unique identifier for the answered query\n                  type: string\n                is_personal:\n                  description: Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query\n                  type: boolean\n                next_offset:\n                  description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\n                  type: string\n                results:\n                  description: A JSON-serialized array of results for the inline query\n                  items:\n                    $ref: \"#/components/schemas/InlineQueryResult\"\n                  type: array\n                switch_pm_parameter:\n                  description: |-\n                    [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.  \n\n                    *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n                  type: string\n                switch_pm_text:\n                  description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\\_pm\\_parameter*\n                  type: string\n              required:\n                - inline_query_id\n                - results\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /answerPreCheckoutQuery:\n    post:\n      description: Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\\_checkout\\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#answerprecheckoutquery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.\n                  type: boolean\n                pre_checkout_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - pre_checkout_query_id\n                - ok\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.\n                  type: boolean\n                pre_checkout_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - pre_checkout_query_id\n                - ok\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.\n                  type: boolean\n                pre_checkout_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - pre_checkout_query_id\n                - ok\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /answerShippingQuery:\n    post:\n      description: If you sent an invoice requesting a shipping address and the parameter *is\\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#answershippingquery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n                  type: boolean\n                shipping_options:\n                  description: Required if *ok* is True. A JSON-serialized array of available shipping options.\n                  items:\n                    $ref: \"#/components/schemas/ShippingOption\"\n                  type: array\n                shipping_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - shipping_query_id\n                - ok\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n                  type: boolean\n                shipping_options:\n                  description: Required if *ok* is True. A JSON-serialized array of available shipping options.\n                  items:\n                    $ref: \"#/components/schemas/ShippingOption\"\n                  type: array\n                shipping_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - shipping_query_id\n                - ok\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                error_message:\n                  description: Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n                  type: string\n                ok:\n                  description: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n                  type: boolean\n                shipping_options:\n                  description: Required if *ok* is True. A JSON-serialized array of available shipping options.\n                  items:\n                    $ref: \"#/components/schemas/ShippingOption\"\n                  type: array\n                shipping_query_id:\n                  description: Unique identifier for the query to be answered\n                  type: string\n              required:\n                - shipping_query_id\n                - ok\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /close:\n    post:\n      description: Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#close\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /copyMessage:\n    post:\n      description: Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#copymessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the new caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the new caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the new caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/MessageId\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /createNewStickerSet:\n    post:\n      description: Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\\_sticker* or *tgs\\_sticker*. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#createnewstickerset\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                contains_masks:\n                  description: Pass *True*, if a set of mask stickers should be created\n                  type: boolean\n                emojis:\n                  description: One or more emoji corresponding to the sticker\n                  type: string\n                mask_position:\n                  $ref: \"#/components/schemas/MaskPosition\"\n                name:\n                  description: Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in *“\\_by\\_\u003cbot username\u003e”*. *\u003cbot\\_username\u003e* is case insensitive. 1-64 characters.\n                  type: string\n                png_sticker:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: \"**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\\\\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n                tgs_sticker:\n                  $ref: \"#/components/schemas/InputFile\"\n                title:\n                  description: Sticker set title, 1-64 characters\n                  type: string\n                user_id:\n                  description: User identifier of created sticker set owner\n                  type: integer\n              required:\n                - user_id\n                - name\n                - title\n                - emojis\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /deleteChatPhoto:\n    post:\n      description: Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#deletechatphoto\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /deleteChatStickerSet:\n    post:\n      description: Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#deletechatstickerset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /deleteMessage:\n    post:\n      description: |-\n        Use this method to delete a message, including service messages, with the following limitations:  \n        \\- A message can only be deleted if it was sent less than 48 hours ago.  \n        \\- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.  \n        \\- Bots can delete outgoing messages in private chats, groups, and supergroups.  \n        \\- Bots can delete incoming messages in private chats.  \n        \\- Bots granted *can\\_post\\_messages* permissions can delete outgoing messages in channels.  \n        \\- If the bot is an administrator of a group, it can delete any message there.  \n        \\- If the bot has *can\\_delete\\_messages* permission in a supergroup or a channel, it can delete any message there.  \n        Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#deletemessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the message to delete\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the message to delete\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the message to delete\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /deleteStickerFromSet:\n    post:\n      description: Use this method to delete a sticker from a set created by the bot. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#deletestickerfromset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /deleteWebhook:\n    post:\n      description: Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#deletewebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                drop_pending_updates:\n                  description: Pass *True* to drop all pending updates\n                  type: boolean\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                drop_pending_updates:\n                  description: Pass *True* to drop all pending updates\n                  type: boolean\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                drop_pending_updates:\n                  description: Pass *True* to drop all pending updates\n                  type: boolean\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /editMessageCaption:\n    post:\n      description: Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#editmessagecaption\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                caption:\n                  description: New caption of the message, 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                caption:\n                  description: New caption of the message, 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                caption:\n                  description: New caption of the message, 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /editMessageLiveLocation:\n    post:\n      description: Use this method to edit live location messages. A location can be edited until its *live\\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#editmessagelivelocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                heading:\n                  description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                latitude:\n                  description: Latitude of new location\n                  type: number\n                longitude:\n                  description: Longitude of new location\n                  type: number\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                proximity_alert_radius:\n                  description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - latitude\n                - longitude\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                heading:\n                  description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                latitude:\n                  description: Latitude of new location\n                  type: number\n                longitude:\n                  description: Longitude of new location\n                  type: number\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                proximity_alert_radius:\n                  description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - latitude\n                - longitude\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                heading:\n                  description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                latitude:\n                  description: Latitude of new location\n                  type: number\n                longitude:\n                  description: Longitude of new location\n                  type: number\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                proximity_alert_radius:\n                  description: Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - latitude\n                - longitude\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /editMessageMedia:\n    post:\n      description: Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#editmessagemedia\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                media:\n                  $ref: \"#/components/schemas/InputMedia\"\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - media\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /editMessageReplyMarkup:\n    post:\n      description: Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#editmessagereplymarkup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /editMessageText:\n    post:\n      description: Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#editmessagetext\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                text:\n                  description: New text of the message, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - text\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                text:\n                  description: New text of the message, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - text\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                text:\n                  description: New text of the message, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /exportChatInviteLink:\n    post:\n      description: Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#exportchatinvitelink\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    type: string\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /forwardMessage:\n    post:\n      description: Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#forwardmessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                from_chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)\n                message_id:\n                  description: Message identifier in the chat specified in *from\\_chat\\_id*\n                  type: integer\n              required:\n                - chat_id\n                - from_chat_id\n                - message_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getChat:\n    post:\n      description: Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getchat\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Chat\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getChatAdministrators:\n    post:\n      description: Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getchatadministrators\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    items:\n                      $ref: \"#/components/schemas/ChatMember\"\n                    type: array\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getChatMember:\n    post:\n      description: Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getchatmember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/ChatMember\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getChatMembersCount:\n    post:\n      description: Use this method to get the number of members in a chat. Returns *Int* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getchatmemberscount\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    type: integer\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getFile:\n    post:\n      description: Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e`, where `\u003cfile_path\u003e` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getfile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                file_id:\n                  description: File identifier to get info about\n                  type: string\n              required:\n                - file_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                file_id:\n                  description: File identifier to get info about\n                  type: string\n              required:\n                - file_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                file_id:\n                  description: File identifier to get info about\n                  type: string\n              required:\n                - file_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/File\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getGameHighScores:\n    post:\n      description: |-\n        Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.\n\n        This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getgamehighscores\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                user_id:\n                  description: Target user id\n                  type: integer\n              required:\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                user_id:\n                  description: Target user id\n                  type: integer\n              required:\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                user_id:\n                  description: Target user id\n                  type: integer\n              required:\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    items:\n                      $ref: \"#/components/schemas/GameHighScore\"\n                    type: array\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getMe:\n    post:\n      description: A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getme\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/User\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getMyCommands:\n    post:\n      description: Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getmycommands\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    items:\n                      $ref: \"#/components/schemas/BotCommand\"\n                    type: array\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getStickerSet:\n    post:\n      description: Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getstickerset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: Name of the sticker set\n                  type: string\n              required:\n                - name\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                name:\n                  description: Name of the sticker set\n                  type: string\n              required:\n                - name\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                name:\n                  description: Name of the sticker set\n                  type: string\n              required:\n                - name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/StickerSet\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getUpdates:\n    post:\n      description: Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getupdates\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allowed_updates:\n                  description: |-\n                    A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\n                    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.\n                  items:\n                    type: string\n                  type: array\n                limit:\n                  default: 100\n                  description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.\n                  type: integer\n                timeout:\n                  default: 0\n                  description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.\n                  type: integer\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allowed_updates:\n                  description: |-\n                    A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\n                    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.\n                  items:\n                    type: string\n                  type: array\n                limit:\n                  default: 100\n                  description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.\n                  type: integer\n                timeout:\n                  default: 0\n                  description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.\n                  type: integer\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allowed_updates:\n                  description: |-\n                    A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n\n                    Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.\n                  items:\n                    type: string\n                  type: array\n                limit:\n                  default: 100\n                  description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.\n                  type: integer\n                timeout:\n                  default: 0\n                  description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.\n                  type: integer\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    items:\n                      $ref: \"#/components/schemas/Update\"\n                    type: array\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getUserProfilePhotos:\n    post:\n      description: Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getuserprofilephotos\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                limit:\n                  default: 100\n                  description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Sequential number of the first photo to be returned. By default, all photos are returned.\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                limit:\n                  default: 100\n                  description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Sequential number of the first photo to be returned. By default, all photos are returned.\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                limit:\n                  default: 100\n                  description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n                  maximum: 100\n                  minimum: 1\n                  type: integer\n                offset:\n                  description: Sequential number of the first photo to be returned. By default, all photos are returned.\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/UserProfilePhotos\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /getWebhookInfo:\n    post:\n      description: Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#getwebhookinfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/WebhookInfo\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /kickChatMember:\n    post:\n      description: Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#kickchatmember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n                until_date:\n                  description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n                until_date:\n                  description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n                until_date:\n                  description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /leaveChat:\n    post:\n      description: Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#leavechat\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /logOut:\n    post:\n      description: Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#logout\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /pinChatMessage:\n    post:\n      description: Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#pinchatmessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.\n                  type: boolean\n                message_id:\n                  description: Identifier of a message to pin\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.\n                  type: boolean\n                message_id:\n                  description: Identifier of a message to pin\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.\n                  type: boolean\n                message_id:\n                  description: Identifier of a message to pin\n                  type: integer\n              required:\n                - chat_id\n                - message_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /promoteChatMember:\n    post:\n      description: Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#promotechatmember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                can_change_info:\n                  description: Pass True, if the administrator can change chat title, photo and other settings\n                  type: boolean\n                can_delete_messages:\n                  description: Pass True, if the administrator can delete messages of other users\n                  type: boolean\n                can_edit_messages:\n                  description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only\n                  type: boolean\n                can_invite_users:\n                  description: Pass True, if the administrator can invite new users to the chat\n                  type: boolean\n                can_pin_messages:\n                  description: Pass True, if the administrator can pin messages, supergroups only\n                  type: boolean\n                can_post_messages:\n                  description: Pass True, if the administrator can create channel posts, channels only\n                  type: boolean\n                can_promote_members:\n                  description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)\n                  type: boolean\n                can_restrict_members:\n                  description: Pass True, if the administrator can restrict, ban or unban chat members\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                is_anonymous:\n                  description: Pass *True*, if the administrator's presence in the chat is hidden\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                can_change_info:\n                  description: Pass True, if the administrator can change chat title, photo and other settings\n                  type: boolean\n                can_delete_messages:\n                  description: Pass True, if the administrator can delete messages of other users\n                  type: boolean\n                can_edit_messages:\n                  description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only\n                  type: boolean\n                can_invite_users:\n                  description: Pass True, if the administrator can invite new users to the chat\n                  type: boolean\n                can_pin_messages:\n                  description: Pass True, if the administrator can pin messages, supergroups only\n                  type: boolean\n                can_post_messages:\n                  description: Pass True, if the administrator can create channel posts, channels only\n                  type: boolean\n                can_promote_members:\n                  description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)\n                  type: boolean\n                can_restrict_members:\n                  description: Pass True, if the administrator can restrict, ban or unban chat members\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                is_anonymous:\n                  description: Pass *True*, if the administrator's presence in the chat is hidden\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                can_change_info:\n                  description: Pass True, if the administrator can change chat title, photo and other settings\n                  type: boolean\n                can_delete_messages:\n                  description: Pass True, if the administrator can delete messages of other users\n                  type: boolean\n                can_edit_messages:\n                  description: Pass True, if the administrator can edit messages of other users and can pin messages, channels only\n                  type: boolean\n                can_invite_users:\n                  description: Pass True, if the administrator can invite new users to the chat\n                  type: boolean\n                can_pin_messages:\n                  description: Pass True, if the administrator can pin messages, supergroups only\n                  type: boolean\n                can_post_messages:\n                  description: Pass True, if the administrator can create channel posts, channels only\n                  type: boolean\n                can_promote_members:\n                  description: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)\n                  type: boolean\n                can_restrict_members:\n                  description: Pass True, if the administrator can restrict, ban or unban chat members\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                is_anonymous:\n                  description: Pass *True*, if the administrator's presence in the chat is hidden\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /restrictChatMember:\n    post:\n      description: Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#restrictchatmember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n                until_date:\n                  description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - permissions\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n                until_date:\n                  description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - permissions\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n                until_date:\n                  description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever\n                  type: integer\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - permissions\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendAnimation:\n    post:\n      description: Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendanimation\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                animation:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Animation to send. Pass a file\\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                caption:\n                  description: Animation caption (may also be used when resending animation by *file\\_id*), 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                duration:\n                  description: Duration of sent animation in seconds\n                  type: integer\n                height:\n                  description: Animation height\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\_attach\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\_attach\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                width:\n                  description: Animation width\n                  type: integer\n              required:\n                - chat_id\n                - animation\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendAudio:\n    post:\n      description: |-\n        Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\n        For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendaudio\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                audio:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Audio file to send. Pass a file\\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                caption:\n                  description: Audio caption, 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                duration:\n                  description: Duration of the audio in seconds\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                performer:\n                  description: Performer\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\_attach\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\_attach\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                title:\n                  description: Track name\n                  type: string\n              required:\n                - chat_id\n                - audio\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendChatAction:\n    post:\n      description: |-\n        Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.\n\n        Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.\n\n        We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendchataction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                action:\n                  description: \"Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).\"\n                  type: string\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n                - action\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                action:\n                  description: \"Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).\"\n                  type: string\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n                - action\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                action:\n                  description: \"Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\\\\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\\\\_video* or *upload\\\\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\\\\_voice* or *upload\\\\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\\\\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\\\\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\\\\_video\\\\_note* or *upload\\\\_video\\\\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).\"\n                  type: string\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n                - action\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendContact:\n    post:\n      description: Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendcontact\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                first_name:\n                  description: Contact's first name\n                  type: string\n                last_name:\n                  description: Contact's last name\n                  type: string\n                phone_number:\n                  description: Contact's phone number\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                vcard:\n                  description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes\n                  type: string\n              required:\n                - chat_id\n                - phone_number\n                - first_name\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                first_name:\n                  description: Contact's first name\n                  type: string\n                last_name:\n                  description: Contact's last name\n                  type: string\n                phone_number:\n                  description: Contact's phone number\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                vcard:\n                  description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes\n                  type: string\n              required:\n                - chat_id\n                - phone_number\n                - first_name\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                first_name:\n                  description: Contact's first name\n                  type: string\n                last_name:\n                  description: Contact's last name\n                  type: string\n                phone_number:\n                  description: Contact's phone number\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                vcard:\n                  description: Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes\n                  type: string\n              required:\n                - chat_id\n                - phone_number\n                - first_name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendDice:\n    post:\n      description: Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#senddice\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                emoji:\n                  default: 🎲\n                  description: Emoji on which the dice throw animation is based. Currently, must be one of “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, or “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Dice can have values 1-6 for “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, values 1-5 for “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, and values 1-64 for “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Defaults to “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”\n                  enum:\n                    - 🎲\n                    - 🎯\n                    - 🏀\n                    - ⚽\n                    - 🎰\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                emoji:\n                  default: 🎲\n                  description: Emoji on which the dice throw animation is based. Currently, must be one of “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, or “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Dice can have values 1-6 for “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, values 1-5 for “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, and values 1-64 for “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Defaults to “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”\n                  enum:\n                    - 🎲\n                    - 🎯\n                    - 🏀\n                    - ⚽\n                    - 🎰\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                emoji:\n                  default: 🎲\n                  description: Emoji on which the dice throw animation is based. Currently, must be one of “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e”, “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, or “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Dice can have values 1-6 for “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e”, values 1-5 for “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e”, and values 1-64 for “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e”. Defaults to “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e”\n                  enum:\n                    - 🎲\n                    - 🎯\n                    - 🏀\n                    - ⚽\n                    - 🎰\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendDocument:\n    post:\n      description: Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#senddocument\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: Document caption (may also be used when resending documents by *file\\_id*), 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_content_type_detection:\n                  description: Disables automatic server-side content type detection for files uploaded using multipart/form-data\n                  type: boolean\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                document:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: File to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                parse_mode:\n                  description: Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\_attach\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\_attach\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n              required:\n                - chat_id\n                - document\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendGame:\n    post:\n      description: Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendgame\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target chat\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                game_short_name:\n                  description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - game_short_name\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target chat\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                game_short_name:\n                  description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - game_short_name\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target chat\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                game_short_name:\n                  description: Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - game_short_name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendInvoice:\n    post:\n      description: Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendinvoice\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target private chat\n                  type: integer\n                currency:\n                  description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)\n                  type: string\n                description:\n                  description: Product description, 1-255 characters\n                  type: string\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                is_flexible:\n                  description: Pass *True*, if the final price depends on the shipping method\n                  type: boolean\n                need_email:\n                  description: Pass *True*, if you require the user's email address to complete the order\n                  type: boolean\n                need_name:\n                  description: Pass *True*, if you require the user's full name to complete the order\n                  type: boolean\n                need_phone_number:\n                  description: Pass *True*, if you require the user's phone number to complete the order\n                  type: boolean\n                need_shipping_address:\n                  description: Pass *True*, if you require the user's shipping address to complete the order\n                  type: boolean\n                payload:\n                  description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n                  type: string\n                photo_height:\n                  description: Photo height\n                  type: integer\n                photo_size:\n                  description: Photo size\n                  type: integer\n                photo_url:\n                  description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.\n                  type: string\n                photo_width:\n                  description: Photo width\n                  type: integer\n                prices:\n                  description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)\n                  items:\n                    $ref: \"#/components/schemas/LabeledPrice\"\n                  type: array\n                provider_data:\n                  description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\n                  type: string\n                provider_token:\n                  description: Payments provider token, obtained via [Botfather](https://t.me/botfather)\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                send_email_to_provider:\n                  description: Pass *True*, if user's email address should be sent to provider\n                  type: boolean\n                send_phone_number_to_provider:\n                  description: Pass *True*, if user's phone number should be sent to provider\n                  type: boolean\n                start_parameter:\n                  description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter\n                  type: string\n                title:\n                  description: Product name, 1-32 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n                - description\n                - payload\n                - provider_token\n                - start_parameter\n                - currency\n                - prices\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target private chat\n                  type: integer\n                currency:\n                  description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)\n                  type: string\n                description:\n                  description: Product description, 1-255 characters\n                  type: string\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                is_flexible:\n                  description: Pass *True*, if the final price depends on the shipping method\n                  type: boolean\n                need_email:\n                  description: Pass *True*, if you require the user's email address to complete the order\n                  type: boolean\n                need_name:\n                  description: Pass *True*, if you require the user's full name to complete the order\n                  type: boolean\n                need_phone_number:\n                  description: Pass *True*, if you require the user's phone number to complete the order\n                  type: boolean\n                need_shipping_address:\n                  description: Pass *True*, if you require the user's shipping address to complete the order\n                  type: boolean\n                payload:\n                  description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n                  type: string\n                photo_height:\n                  description: Photo height\n                  type: integer\n                photo_size:\n                  description: Photo size\n                  type: integer\n                photo_url:\n                  description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.\n                  type: string\n                photo_width:\n                  description: Photo width\n                  type: integer\n                prices:\n                  description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)\n                  items:\n                    $ref: \"#/components/schemas/LabeledPrice\"\n                  type: array\n                provider_data:\n                  description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\n                  type: string\n                provider_token:\n                  description: Payments provider token, obtained via [Botfather](https://t.me/botfather)\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                send_email_to_provider:\n                  description: Pass *True*, if user's email address should be sent to provider\n                  type: boolean\n                send_phone_number_to_provider:\n                  description: Pass *True*, if user's phone number should be sent to provider\n                  type: boolean\n                start_parameter:\n                  description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter\n                  type: string\n                title:\n                  description: Product name, 1-32 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n                - description\n                - payload\n                - provider_token\n                - start_parameter\n                - currency\n                - prices\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  description: Unique identifier for the target private chat\n                  type: integer\n                currency:\n                  description: Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)\n                  type: string\n                description:\n                  description: Product description, 1-255 characters\n                  type: string\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                is_flexible:\n                  description: Pass *True*, if the final price depends on the shipping method\n                  type: boolean\n                need_email:\n                  description: Pass *True*, if you require the user's email address to complete the order\n                  type: boolean\n                need_name:\n                  description: Pass *True*, if you require the user's full name to complete the order\n                  type: boolean\n                need_phone_number:\n                  description: Pass *True*, if you require the user's phone number to complete the order\n                  type: boolean\n                need_shipping_address:\n                  description: Pass *True*, if you require the user's shipping address to complete the order\n                  type: boolean\n                payload:\n                  description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n                  type: string\n                photo_height:\n                  description: Photo height\n                  type: integer\n                photo_size:\n                  description: Photo size\n                  type: integer\n                photo_url:\n                  description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.\n                  type: string\n                photo_width:\n                  description: Photo width\n                  type: integer\n                prices:\n                  description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)\n                  items:\n                    $ref: \"#/components/schemas/LabeledPrice\"\n                  type: array\n                provider_data:\n                  description: A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\n                  type: string\n                provider_token:\n                  description: Payments provider token, obtained via [Botfather](https://t.me/botfather)\n                  type: string\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                send_email_to_provider:\n                  description: Pass *True*, if user's email address should be sent to provider\n                  type: boolean\n                send_phone_number_to_provider:\n                  description: Pass *True*, if user's phone number should be sent to provider\n                  type: boolean\n                start_parameter:\n                  description: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter\n                  type: string\n                title:\n                  description: Product name, 1-32 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n                - description\n                - payload\n                - provider_token\n                - start_parameter\n                - currency\n                - prices\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendLocation:\n    post:\n      description: Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendlocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                heading:\n                  description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                latitude:\n                  description: Latitude of the location\n                  type: number\n                live_period:\n                  description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.\n                  type: integer\n                longitude:\n                  description: Longitude of the location\n                  type: number\n                proximity_alert_radius:\n                  description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - latitude\n                - longitude\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                heading:\n                  description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                latitude:\n                  description: Latitude of the location\n                  type: number\n                live_period:\n                  description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.\n                  type: integer\n                longitude:\n                  description: Longitude of the location\n                  type: number\n                proximity_alert_radius:\n                  description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - latitude\n                - longitude\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                heading:\n                  description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n                  type: integer\n                horizontal_accuracy:\n                  description: The radius of uncertainty for the location, measured in meters; 0-1500\n                  type: number\n                latitude:\n                  description: Latitude of the location\n                  type: number\n                live_period:\n                  description: Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.\n                  type: integer\n                longitude:\n                  description: Longitude of the location\n                  type: number\n                proximity_alert_radius:\n                  description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n                  type: integer\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - latitude\n                - longitude\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendMediaGroup:\n    post:\n      description: Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendmediagroup\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                media:\n                  description: A JSON-serialized array describing messages to be sent, must include 2-10 items\n                  items:\n                    anyOf:\n                      - $ref: \"#/components/schemas/InputMediaAudio\"\n                      - $ref: \"#/components/schemas/InputMediaDocument\"\n                      - $ref: \"#/components/schemas/InputMediaPhoto\"\n                      - $ref: \"#/components/schemas/InputMediaVideo\"\n                  type: array\n                reply_to_message_id:\n                  description: If the messages are a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - media\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    items:\n                      $ref: \"#/components/schemas/Message\"\n                    type: array\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendMessage:\n    post:\n      description: Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendmessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                text:\n                  description: Text of the message to be sent, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - chat_id\n                - text\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                text:\n                  description: Text of the message to be sent, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - chat_id\n                - text\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                disable_web_page_preview:\n                  description: Disables link previews for links in this message\n                  type: boolean\n                entities:\n                  description: List of special entities that appear in message text, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                parse_mode:\n                  description: Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                text:\n                  description: Text of the message to be sent, 1-4096 characters after entities parsing\n                  type: string\n              required:\n                - chat_id\n                - text\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendPhoto:\n    post:\n      description: Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendphoto\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: Photo caption (may also be used when resending photos by *file\\_id*), 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                parse_mode:\n                  description: Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                photo:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Photo to send. Pass a file\\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n              required:\n                - chat_id\n                - photo\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendPoll:\n    post:\n      description: Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendpoll\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                allows_multiple_answers:\n                  description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                close_date:\n                  description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.\n                  type: integer\n                correct_option_id:\n                  description: 0-based identifier of the correct answer option, required for polls in quiz mode\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                explanation:\n                  description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing\n                  type: string\n                explanation_entities:\n                  description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                explanation_parse_mode:\n                  description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                is_anonymous:\n                  description: True, if the poll needs to be anonymous, defaults to *True*\n                  type: boolean\n                is_closed:\n                  description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.\n                  type: boolean\n                open_period:\n                  description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.\n                  type: integer\n                options:\n                  description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n                  items:\n                    type: string\n                  type: array\n                question:\n                  description: Poll question, 1-300 characters\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                type:\n                  description: Poll type, “quiz” or “regular”, defaults to “regular”\n                  type: string\n              required:\n                - chat_id\n                - question\n                - options\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                allows_multiple_answers:\n                  description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                close_date:\n                  description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.\n                  type: integer\n                correct_option_id:\n                  description: 0-based identifier of the correct answer option, required for polls in quiz mode\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                explanation:\n                  description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing\n                  type: string\n                explanation_entities:\n                  description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                explanation_parse_mode:\n                  description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                is_anonymous:\n                  description: True, if the poll needs to be anonymous, defaults to *True*\n                  type: boolean\n                is_closed:\n                  description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.\n                  type: boolean\n                open_period:\n                  description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.\n                  type: integer\n                options:\n                  description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n                  items:\n                    type: string\n                  type: array\n                question:\n                  description: Poll question, 1-300 characters\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                type:\n                  description: Poll type, “quiz” or “regular”, defaults to “regular”\n                  type: string\n              required:\n                - chat_id\n                - question\n                - options\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                allows_multiple_answers:\n                  description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                close_date:\n                  description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.\n                  type: integer\n                correct_option_id:\n                  description: 0-based identifier of the correct answer option, required for polls in quiz mode\n                  type: integer\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                explanation:\n                  description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing\n                  type: string\n                explanation_entities:\n                  description: List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                explanation_parse_mode:\n                  description: Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                is_anonymous:\n                  description: True, if the poll needs to be anonymous, defaults to *True*\n                  type: boolean\n                is_closed:\n                  description: Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.\n                  type: boolean\n                open_period:\n                  description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.\n                  type: integer\n                options:\n                  description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n                  items:\n                    type: string\n                  type: array\n                question:\n                  description: Poll question, 1-300 characters\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                type:\n                  description: Poll type, “quiz” or “regular”, defaults to “regular”\n                  type: string\n              required:\n                - chat_id\n                - question\n                - options\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendSticker:\n    post:\n      description: Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendsticker\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                sticker:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Sticker to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n              required:\n                - chat_id\n                - sticker\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendVenue:\n    post:\n      description: Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendvenue\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                address:\n                  description: Address of the venue\n                  type: string\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                foursquare_id:\n                  description: Foursquare identifier of the venue\n                  type: string\n                foursquare_type:\n                  description: Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)\n                  type: string\n                google_place_id:\n                  description: Google Places identifier of the venue\n                  type: string\n                google_place_type:\n                  description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\n                  type: string\n                latitude:\n                  description: Latitude of the venue\n                  type: number\n                longitude:\n                  description: Longitude of the venue\n                  type: number\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                title:\n                  description: Name of the venue\n                  type: string\n              required:\n                - chat_id\n                - latitude\n                - longitude\n                - title\n                - address\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                address:\n                  description: Address of the venue\n                  type: string\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                foursquare_id:\n                  description: Foursquare identifier of the venue\n                  type: string\n                foursquare_type:\n                  description: Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)\n                  type: string\n                google_place_id:\n                  description: Google Places identifier of the venue\n                  type: string\n                google_place_type:\n                  description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\n                  type: string\n                latitude:\n                  description: Latitude of the venue\n                  type: number\n                longitude:\n                  description: Longitude of the venue\n                  type: number\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                title:\n                  description: Name of the venue\n                  type: string\n              required:\n                - chat_id\n                - latitude\n                - longitude\n                - title\n                - address\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                address:\n                  description: Address of the venue\n                  type: string\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                foursquare_id:\n                  description: Foursquare identifier of the venue\n                  type: string\n                foursquare_type:\n                  description: Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)\n                  type: string\n                google_place_id:\n                  description: Google Places identifier of the venue\n                  type: string\n                google_place_type:\n                  description: Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\n                  type: string\n                latitude:\n                  description: Latitude of the venue\n                  type: number\n                longitude:\n                  description: Longitude of the venue\n                  type: number\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                title:\n                  description: Name of the venue\n                  type: string\n              required:\n                - chat_id\n                - latitude\n                - longitude\n                - title\n                - address\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendVideo:\n    post:\n      description: Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendvideo\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: Video caption (may also be used when resending videos by *file\\_id*), 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                duration:\n                  description: Duration of sent video in seconds\n                  type: integer\n                height:\n                  description: Video height\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                supports_streaming:\n                  description: Pass *True*, if the uploaded video is suitable for streaming\n                  type: boolean\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\_attach\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\_attach\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                video:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Video to send. Pass a file\\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                width:\n                  description: Video width\n                  type: integer\n              required:\n                - chat_id\n                - video\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendVideoNote:\n    post:\n      description: As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendvideonote\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                duration:\n                  description: Duration of sent video in seconds\n                  type: integer\n                length:\n                  description: Video width and height, i.e. diameter of the video message\n                  type: integer\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\_attach\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\_attach\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n                video_note:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Video note to send. Pass a file\\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported\n              required:\n                - chat_id\n                - video_note\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /sendVoice:\n    post:\n      description: Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sendvoice\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allow_sending_without_reply:\n                  description: Pass *True*, if the message should be sent even if the specified replied-to message is not found\n                  type: boolean\n                caption:\n                  description: Voice message caption, 0-1024 characters after entities parsing\n                  type: string\n                caption_entities:\n                  description: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*\n                  items:\n                    $ref: \"#/components/schemas/MessageEntity\"\n                  type: array\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                disable_notification:\n                  description: Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.\n                  type: boolean\n                duration:\n                  description: Duration of the voice message in seconds\n                  type: integer\n                parse_mode:\n                  description: Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\n                  type: string\n                reply_markup:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardMarkup\"\n                    - $ref: \"#/components/schemas/ReplyKeyboardRemove\"\n                    - $ref: \"#/components/schemas/ForceReply\"\n                  description: Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.\n                reply_to_message_id:\n                  description: If the message is a reply, ID of the original message\n                  type: integer\n                voice:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: Audio file to send. Pass a file\\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n              required:\n                - chat_id\n                - voice\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Message\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatAdministratorCustomTitle:\n    post:\n      description: Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchatadministratorcustomtitle\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                custom_title:\n                  description: New custom title for the administrator; 0-16 characters, emoji are not allowed\n                  type: string\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - custom_title\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                custom_title:\n                  description: New custom title for the administrator; 0-16 characters, emoji are not allowed\n                  type: string\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - custom_title\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                custom_title:\n                  description: New custom title for the administrator; 0-16 characters, emoji are not allowed\n                  type: string\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n                - custom_title\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatDescription:\n    post:\n      description: Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchatdescription\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                description:\n                  description: New chat description, 0-255 characters\n                  type: string\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                description:\n                  description: New chat description, 0-255 characters\n                  type: string\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                description:\n                  description: New chat description, 0-255 characters\n                  type: string\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatPermissions:\n    post:\n      description: Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\\_restrict\\_members* admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchatpermissions\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n              required:\n                - chat_id\n                - permissions\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n              required:\n                - chat_id\n                - permissions\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                permissions:\n                  $ref: \"#/components/schemas/ChatPermissions\"\n              required:\n                - chat_id\n                - permissions\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatPhoto:\n    post:\n      description: Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchatphoto\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                photo:\n                  $ref: \"#/components/schemas/InputFile\"\n              required:\n                - chat_id\n                - photo\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatStickerSet:\n    post:\n      description: Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchatstickerset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                sticker_set_name:\n                  description: Name of the sticker set to be set as the group sticker set\n                  type: string\n              required:\n                - chat_id\n                - sticker_set_name\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                sticker_set_name:\n                  description: Name of the sticker set to be set as the group sticker set\n                  type: string\n              required:\n                - chat_id\n                - sticker_set_name\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)\n                sticker_set_name:\n                  description: Name of the sticker set to be set as the group sticker set\n                  type: string\n              required:\n                - chat_id\n                - sticker_set_name\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setChatTitle:\n    post:\n      description: Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setchattitle\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                title:\n                  description: New chat title, 1-255 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                title:\n                  description: New chat title, 1-255 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                title:\n                  description: New chat title, 1-255 characters\n                  type: string\n              required:\n                - chat_id\n                - title\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setGameScore:\n    post:\n      description: Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setgamescore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                disable_edit_message:\n                  description: Pass True, if the game message should not be automatically edited to include the current scoreboard\n                  type: boolean\n                force:\n                  description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\n                  type: boolean\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                score:\n                  description: New score, must be non-negative\n                  type: integer\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - score\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                disable_edit_message:\n                  description: Pass True, if the game message should not be automatically edited to include the current scoreboard\n                  type: boolean\n                force:\n                  description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\n                  type: boolean\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                score:\n                  description: New score, must be non-negative\n                  type: integer\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - score\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat\n                  type: integer\n                disable_edit_message:\n                  description: Pass True, if the game message should not be automatically edited to include the current scoreboard\n                  type: boolean\n                force:\n                  description: Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\n                  type: boolean\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the sent message\n                  type: integer\n                score:\n                  description: New score, must be non-negative\n                  type: integer\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - score\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setMyCommands:\n    post:\n      description: Use this method to change the list of the bot's commands. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setmycommands\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                commands:\n                  description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n                  items:\n                    $ref: \"#/components/schemas/BotCommand\"\n                  type: array\n              required:\n                - commands\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                commands:\n                  description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n                  items:\n                    $ref: \"#/components/schemas/BotCommand\"\n                  type: array\n              required:\n                - commands\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                commands:\n                  description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n                  items:\n                    $ref: \"#/components/schemas/BotCommand\"\n                  type: array\n              required:\n                - commands\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setPassportDataErrors:\n    post:\n      description: |-\n        Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.\n\n        Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setpassportdataerrors\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                errors:\n                  description: A JSON-serialized array describing the errors\n                  items:\n                    $ref: \"#/components/schemas/PassportElementError\"\n                  type: array\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - errors\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                errors:\n                  description: A JSON-serialized array describing the errors\n                  items:\n                    $ref: \"#/components/schemas/PassportElementError\"\n                  type: array\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - errors\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                errors:\n                  description: A JSON-serialized array describing the errors\n                  items:\n                    $ref: \"#/components/schemas/PassportElementError\"\n                  type: array\n                user_id:\n                  description: User identifier\n                  type: integer\n              required:\n                - user_id\n                - errors\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setStickerPositionInSet:\n    post:\n      description: Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setstickerpositioninset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                position:\n                  description: New sticker position in the set, zero-based\n                  type: integer\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n                - position\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                position:\n                  description: New sticker position in the set, zero-based\n                  type: integer\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n                - position\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                position:\n                  description: New sticker position in the set, zero-based\n                  type: integer\n                sticker:\n                  description: File identifier of the sticker\n                  type: string\n              required:\n                - sticker\n                - position\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setStickerSetThumb:\n    post:\n      description: Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setstickersetthumb\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                name:\n                  description: Sticker set name\n                  type: string\n                thumb:\n                  anyOf:\n                    - $ref: \"#/components/schemas/InputFile\"\n                    - type: string\n                  description: A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.\n                user_id:\n                  description: User identifier of the sticker set owner\n                  type: integer\n              required:\n                - name\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /setWebhook:\n    post:\n      description: |-\n        Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.\n\n        If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/\u003ctoken\u003e`. Since nobody else knows your bot's token, you can be pretty sure it's us.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#setwebhook\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                allowed_updates:\n                  description: |-\n                    A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\\_channel\\_post”, “callback\\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.  \n                    Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.\n                  items:\n                    type: string\n                  type: array\n                certificate:\n                  $ref: \"#/components/schemas/InputFile\"\n                drop_pending_updates:\n                  description: Pass *True* to drop all pending updates\n                  type: boolean\n                ip_address:\n                  description: The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS\n                  type: string\n                max_connections:\n                  default: 40\n                  description: Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.\n                  type: integer\n                url:\n                  description: HTTPS url to send updates to. Use an empty string to remove webhook integration\n                  type: string\n              required:\n                - url\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /stopMessageLiveLocation:\n    post:\n      description: Use this method to stop updating a live location message before *live\\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#stopmessagelivelocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message with live location to stop\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message with live location to stop\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                inline_message_id:\n                  description: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message\n                  type: string\n                message_id:\n                  description: Required if *inline\\_message\\_id* is not specified. Identifier of the message with live location to stop\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    anyOf:\n                      - $ref: \"#/components/schemas/Message\"\n                      - default: true\n                        type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /stopPoll:\n    post:\n      description: Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#stoppoll\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the original message with the poll\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - chat_id\n                - message_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the original message with the poll\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - chat_id\n                - message_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of the original message with the poll\n                  type: integer\n                reply_markup:\n                  $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n              required:\n                - chat_id\n                - message_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/Poll\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /unbanChatMember:\n    post:\n      description: Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\\_if\\_banned*. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#unbanchatmember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)\n                only_if_banned:\n                  description: Do nothing if the user is not banned\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)\n                only_if_banned:\n                  description: Do nothing if the user is not banned\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)\n                only_if_banned:\n                  description: Do nothing if the user is not banned\n                  type: boolean\n                user_id:\n                  description: Unique identifier of the target user\n                  type: integer\n              required:\n                - chat_id\n                - user_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /unpinAllChatMessages:\n    post:\n      description: Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#unpinallchatmessages\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /unpinChatMessage:\n    post:\n      description: Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\\_pin\\_messages' admin right in a supergroup or 'can\\_edit\\_messages' admin right in a channel. Returns *True* on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#unpinchatmessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.\n                  type: integer\n              required:\n                - chat_id\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.\n                  type: integer\n              required:\n                - chat_id\n              type: object\n          multipart/form-data:\n            schema:\n              properties:\n                chat_id:\n                  anyOf:\n                    - type: integer\n                    - type: string\n                  description: Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n                message_id:\n                  description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.\n                  type: integer\n              required:\n                - chat_id\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    default: true\n                    type: boolean\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\n  /uploadStickerFile:\n    post:\n      description: Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#uploadstickerfile\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                png_sticker:\n                  $ref: \"#/components/schemas/InputFile\"\n                user_id:\n                  description: User identifier of sticker file owner\n                  type: integer\n              required:\n                - user_id\n                - png_sticker\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  ok:\n                    default: true\n                    type: boolean\n                  result:\n                    $ref: \"#/components/schemas/File\"\n                required:\n                  - ok\n                  - result\n                type: object\n          description: \"\"\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: \"\"\ncomponents:\n  schemas:\n    Animation:\n      description: This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#animation\n      properties:\n        duration:\n          description: Duration of the video in seconds as defined by sender\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_name:\n          description: \"*Optional*. Original animation filename as defined by sender\"\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        height:\n          description: Video height as defined by sender\n          type: integer\n        mime_type:\n          description: \"*Optional*. MIME type of the file as defined by sender\"\n          type: string\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n        width:\n          description: Video width as defined by sender\n          type: integer\n      required:\n        - file_id\n        - file_unique_id\n        - width\n        - height\n        - duration\n      type: object\n    Audio:\n      description: This object represents an audio file to be treated as music by the Telegram clients.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#audio\n      properties:\n        duration:\n          description: Duration of the audio in seconds as defined by sender\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_name:\n          description: \"*Optional*. Original filename as defined by sender\"\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        mime_type:\n          description: \"*Optional*. MIME type of the file as defined by sender\"\n          type: string\n        performer:\n          description: \"*Optional*. Performer of the audio as defined by sender or by audio tags\"\n          type: string\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n        title:\n          description: \"*Optional*. Title of the audio as defined by sender or by audio tags\"\n          type: string\n      required:\n        - file_id\n        - file_unique_id\n        - duration\n      type: object\n    BotCommand:\n      description: This object represents a bot command.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#botcommand\n      properties:\n        command:\n          description: Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.\n          type: string\n        description:\n          description: Description of the command, 3-256 characters.\n          type: string\n      required:\n        - command\n        - description\n      type: object\n    CallbackGame:\n      description: A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#callbackgame\n    CallbackQuery:\n      description: This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\\_message\\_id* will be present. Exactly one of the fields *data* or *game\\_short\\_name* will be present.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#callbackquery\n      properties:\n        chat_instance:\n          description: Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).\n          type: string\n        data:\n          description: \"*Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.\"\n          type: string\n        from:\n          $ref: \"#/components/schemas/User\"\n        game_short_name:\n          description: \"*Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game\"\n          type: string\n        id:\n          description: Unique identifier for this query\n          type: string\n        inline_message_id:\n          description: \"*Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.\"\n          type: string\n        message:\n          $ref: \"#/components/schemas/Message\"\n      required:\n        - id\n        - from\n        - chat_instance\n      type: object\n    Chat:\n      description: This object represents a chat.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#chat\n      properties:\n        bio:\n          description: \"*Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: string\n        can_set_sticker_set:\n          description: \"*Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: boolean\n        description:\n          description: \"*Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: string\n        first_name:\n          description: \"*Optional*. First name of the other party in a private chat\"\n          type: string\n        id:\n          description: Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\n          type: integer\n        invite_link:\n          description: \"*Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: string\n        last_name:\n          description: \"*Optional*. Last name of the other party in a private chat\"\n          type: string\n        linked_chat_id:\n          description: \"*Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: integer\n        location:\n          $ref: \"#/components/schemas/ChatLocation\"\n        permissions:\n          $ref: \"#/components/schemas/ChatPermissions\"\n        photo:\n          $ref: \"#/components/schemas/ChatPhoto\"\n        pinned_message:\n          $ref: \"#/components/schemas/Message\"\n        slow_mode_delay:\n          description: \"*Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: integer\n        sticker_set_name:\n          description: \"*Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).\"\n          type: string\n        title:\n          description: \"*Optional*. Title, for supergroups, channels and group chats\"\n          type: string\n        type:\n          description: Type of chat, can be either “private”, “group”, “supergroup” or “channel”\n          enum:\n            - private\n            - group\n            - supergroup\n            - channel\n          type: string\n        username:\n          description: \"*Optional*. Username, for private chats, supergroups and channels if available\"\n          type: string\n      required:\n        - id\n        - type\n      type: object\n    ChatLocation:\n      description: Represents a location to which a chat is connected.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#chatlocation\n      properties:\n        address:\n          description: Location address; 1-64 characters, as defined by the chat owner\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n      required:\n        - location\n        - address\n      type: object\n    ChatMember:\n      description: This object contains information about one member of a chat.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#chatmember\n      properties:\n        can_add_web_page_previews:\n          description: \"*Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages\"\n          type: boolean\n        can_be_edited:\n          description: \"*Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user\"\n          type: boolean\n        can_change_info:\n          description: \"*Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings\"\n          type: boolean\n        can_delete_messages:\n          description: \"*Optional*. Administrators only. True, if the administrator can delete messages of other users\"\n          type: boolean\n        can_edit_messages:\n          description: \"*Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only\"\n          type: boolean\n        can_invite_users:\n          description: \"*Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat\"\n          type: boolean\n        can_pin_messages:\n          description: \"*Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only\"\n          type: boolean\n        can_post_messages:\n          description: \"*Optional*. Administrators only. True, if the administrator can post in the channel; channels only\"\n          type: boolean\n        can_promote_members:\n          description: \"*Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)\"\n          type: boolean\n        can_restrict_members:\n          description: \"*Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members\"\n          type: boolean\n        can_send_media_messages:\n          description: \"*Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes\"\n          type: boolean\n        can_send_messages:\n          description: \"*Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues\"\n          type: boolean\n        can_send_other_messages:\n          description: \"*Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots\"\n          type: boolean\n        can_send_polls:\n          description: \"*Optional*. Restricted only. True, if the user is allowed to send polls\"\n          type: boolean\n        custom_title:\n          description: \"*Optional*. Owner and administrators only. Custom title for this user\"\n          type: string\n        is_anonymous:\n          description: \"*Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden\"\n          type: boolean\n        is_member:\n          description: \"*Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request\"\n          type: boolean\n        status:\n          description: The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”\n          enum:\n            - creator\n            - administrator\n            - member\n            - restricted\n            - left\n            - kicked\n          type: string\n        until_date:\n          description: \"*Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time\"\n          type: integer\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - user\n        - status\n      type: object\n    ChatPermissions:\n      description: Describes actions that a non-administrator user is allowed to take in a chat.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#chatpermissions\n      properties:\n        can_add_web_page_previews:\n          description: \"*Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\\\_send\\\\_media\\\\_messages\"\n          type: boolean\n        can_change_info:\n          description: \"*Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups\"\n          type: boolean\n        can_invite_users:\n          description: \"*Optional*. True, if the user is allowed to invite new users to the chat\"\n          type: boolean\n        can_pin_messages:\n          description: \"*Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups\"\n          type: boolean\n        can_send_media_messages:\n          description: \"*Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\\\_send\\\\_messages\"\n          type: boolean\n        can_send_messages:\n          description: \"*Optional*. True, if the user is allowed to send text messages, contacts, locations and venues\"\n          type: boolean\n        can_send_other_messages:\n          description: \"*Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\\\_send\\\\_media\\\\_messages\"\n          type: boolean\n        can_send_polls:\n          description: \"*Optional*. True, if the user is allowed to send polls, implies can\\\\_send\\\\_messages\"\n          type: boolean\n      type: object\n    ChatPhoto:\n      description: This object represents a chat photo.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#chatphoto\n      properties:\n        big_file_id:\n          description: File identifier of big (640x640) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.\n          type: string\n        big_file_unique_id:\n          description: Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        small_file_id:\n          description: File identifier of small (160x160) chat photo. This file\\_id can be used only for photo download and only for as long as the photo is not changed.\n          type: string\n        small_file_unique_id:\n          description: Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n      required:\n        - small_file_id\n        - small_file_unique_id\n        - big_file_id\n        - big_file_unique_id\n      type: object\n    ChosenInlineResult:\n      description: Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#choseninlineresult\n      properties:\n        from:\n          $ref: \"#/components/schemas/User\"\n        inline_message_id:\n          description: \"*Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.\"\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n        query:\n          description: The query that was used to obtain the result\n          type: string\n        result_id:\n          description: The unique identifier for the result that was chosen\n          type: string\n      required:\n        - result_id\n        - from\n        - query\n      type: object\n    Contact:\n      description: This object represents a phone contact.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#contact\n      properties:\n        first_name:\n          description: Contact's first name\n          type: string\n        last_name:\n          description: \"*Optional*. Contact's last name\"\n          type: string\n        phone_number:\n          description: Contact's phone number\n          type: string\n        user_id:\n          description: \"*Optional*. Contact's user identifier in Telegram\"\n          type: integer\n        vcard:\n          description: \"*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)\"\n          type: string\n      required:\n        - phone_number\n        - first_name\n      type: object\n    Dice:\n      description: This object represents an animated emoji that displays a random value.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#dice\n      properties:\n        emoji:\n          description: Emoji on which the dice throw animation is based\n          type: string\n        value:\n          description: Value of the dice, 1-6 for “\u003cimg alt=\"🎲\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"🎯\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" /\u003e” base emoji, 1-5 for “\u003cimg alt=\"🏀\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" /\u003e” and “\u003cimg alt=\"⚽\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" /\u003e” base emoji, 1-64 for “\u003cimg alt=\"🎰\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" /\u003e” base emoji\n          type: integer\n      required:\n        - emoji\n        - value\n      type: object\n    Document:\n      description: This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#document\n      properties:\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_name:\n          description: \"*Optional*. Original filename as defined by sender\"\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        mime_type:\n          description: \"*Optional*. MIME type of the file as defined by sender\"\n          type: string\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n      required:\n        - file_id\n        - file_unique_id\n      type: object\n    EncryptedCredentials:\n      description: Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#encryptedcredentials\n      properties:\n        data:\n          description: Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication\n          type: string\n        hash:\n          description: Base64-encoded data hash for data authentication\n          type: string\n        secret:\n          description: Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption\n          type: string\n      required:\n        - data\n        - hash\n        - secret\n      type: object\n    EncryptedPassportElement:\n      description: Contains information about documents or other Telegram Passport elements shared with the bot by the user.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#encryptedpassportelement\n      properties:\n        data:\n          description: \"*Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\\\_details”, “passport”, “driver\\\\_license”, “identity\\\\_card”, “internal\\\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).\"\n          type: string\n        email:\n          description: \"*Optional*. User's verified email address, available only for “email” type\"\n          type: string\n        files:\n          description: \"*Optional*. Array of encrypted files with documents provided by the user, available for “utility\\\\_bill”, “bank\\\\_statement”, “rental\\\\_agreement”, “passport\\\\_registration” and “temporary\\\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).\"\n          items:\n            $ref: \"#/components/schemas/PassportFile\"\n          type: array\n        front_side:\n          $ref: \"#/components/schemas/PassportFile\"\n        hash:\n          description: Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)\n          type: string\n        phone_number:\n          description: \"*Optional*. User's verified phone number, available only for “phone\\\\_number” type\"\n          type: string\n        reverse_side:\n          $ref: \"#/components/schemas/PassportFile\"\n        selfie:\n          $ref: \"#/components/schemas/PassportFile\"\n        translation:\n          description: \"*Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\\\_license”, “identity\\\\_card”, “internal\\\\_passport”, “utility\\\\_bill”, “bank\\\\_statement”, “rental\\\\_agreement”, “passport\\\\_registration” and “temporary\\\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).\"\n          items:\n            $ref: \"#/components/schemas/PassportFile\"\n          type: array\n        type:\n          description: Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.\n          enum:\n            - personal_details\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n            - address\n            - utility_bill\n            - bank_statement\n            - rental_agreement\n            - passport_registration\n            - temporary_registration\n            - phone_number\n            - email\n          type: string\n      required:\n        - type\n        - hash\n      type: object\n    Error:\n      properties:\n        description:\n          type: string\n        error_code:\n          type: integer\n        ok:\n          default: false\n          type: boolean\n        parameters:\n          $ref: \"#/components/schemas/ResponseParameters\"\n      required:\n        - ok\n        - error_code\n        - description\n      type: object\n    File:\n      description: |-\n        This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).\n\n        Maximum file size to download is 20 MB\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#file\n      properties:\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_path:\n          description: \"*Optional*. File path. Use `https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e` to get the file.\"\n          type: string\n        file_size:\n          description: \"*Optional*. File size, if known\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n      required:\n        - file_id\n        - file_unique_id\n      type: object\n    ForceReply:\n      description: Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#forcereply\n      properties:\n        force_reply:\n          description: Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'\n          type: boolean\n        selective:\n          description: \"*Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\\\_to\\\\_message\\\\_id*), sender of the original message.\"\n          type: boolean\n      required:\n        - force_reply\n      type: object\n    Game:\n      description: This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#game\n      properties:\n        animation:\n          $ref: \"#/components/schemas/Animation\"\n        description:\n          description: Description of the game\n          type: string\n        photo:\n          description: Photo that will be displayed in the game message in chats.\n          items:\n            $ref: \"#/components/schemas/PhotoSize\"\n          type: array\n        text:\n          description: \"*Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.\"\n          type: string\n        text_entities:\n          description: \"*Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        title:\n          description: Title of the game\n          type: string\n      required:\n        - title\n        - description\n        - photo\n      type: object\n    GameHighScore:\n      description: This object represents one row of the high scores table for a game.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#gamehighscore\n      properties:\n        position:\n          description: Position in high score table for the game\n          type: integer\n        score:\n          description: Score\n          type: integer\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - position\n        - user\n        - score\n      type: object\n    InlineKeyboardButton:\n      description: This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinekeyboardbutton\n      properties:\n        callback_data:\n          description: \"*Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes\"\n          type: string\n        callback_game:\n          $ref: \"#/components/schemas/CallbackGame\"\n        login_url:\n          $ref: \"#/components/schemas/LoginUrl\"\n        pay:\n          description: |-\n            *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).  \n\n            **NOTE:** This type of button **must** always be the first button in the first row.\n          type: boolean\n        switch_inline_query:\n          description: |-\n            *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.  \n\n            **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.\n          type: string\n        switch_inline_query_current_chat:\n          description: |-\n            *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.  \n\n            This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.\n          type: string\n        text:\n          description: Label text on the button\n          type: string\n        url:\n          description: \"*Optional*. HTTP or tg:// url to be opened when button is pressed\"\n          type: string\n      required:\n        - text\n      type: object\n    InlineKeyboardMarkup:\n      description: This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinekeyboardmarkup\n      properties:\n        inline_keyboard:\n          description: Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects\n          items:\n            items:\n              $ref: \"#/components/schemas/InlineKeyboardButton\"\n            type: array\n          type: array\n      required:\n        - inline_keyboard\n      type: object\n    InlineQuery:\n      description: This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequery\n      properties:\n        from:\n          $ref: \"#/components/schemas/User\"\n        id:\n          description: Unique identifier for this query\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n        offset:\n          description: Offset of the results to be returned, can be controlled by the bot\n          type: string\n        query:\n          description: Text of the query (up to 256 characters)\n          type: string\n      required:\n        - id\n        - from\n        - query\n        - offset\n      type: object\n    InlineQueryResult:\n      anyOf:\n        - $ref: \"#/components/schemas/InlineQueryResultCachedAudio\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedDocument\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedGif\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedMpeg4Gif\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedPhoto\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedSticker\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedVideo\"\n        - $ref: \"#/components/schemas/InlineQueryResultCachedVoice\"\n        - $ref: \"#/components/schemas/InlineQueryResultArticle\"\n        - $ref: \"#/components/schemas/InlineQueryResultAudio\"\n        - $ref: \"#/components/schemas/InlineQueryResultContact\"\n        - $ref: \"#/components/schemas/InlineQueryResultGame\"\n        - $ref: \"#/components/schemas/InlineQueryResultDocument\"\n        - $ref: \"#/components/schemas/InlineQueryResultGif\"\n        - $ref: \"#/components/schemas/InlineQueryResultLocation\"\n        - $ref: \"#/components/schemas/InlineQueryResultMpeg4Gif\"\n        - $ref: \"#/components/schemas/InlineQueryResultPhoto\"\n        - $ref: \"#/components/schemas/InlineQueryResultVenue\"\n        - $ref: \"#/components/schemas/InlineQueryResultVideo\"\n        - $ref: \"#/components/schemas/InlineQueryResultVoice\"\n      description: \"This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:\"\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresult\n    InlineQueryResultArticle:\n      description: Represents a link to an article or web page.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultarticle\n      properties:\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        hide_url:\n          description: \"*Optional*. Pass *True*, if you don't want the URL to be shown in the message\"\n          type: boolean\n        id:\n          description: Unique identifier for this result, 1-64 Bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_height:\n          description: \"*Optional*. Thumbnail height\"\n          type: integer\n        thumb_url:\n          description: \"*Optional*. Url of the thumbnail for the result\"\n          type: string\n        thumb_width:\n          description: \"*Optional*. Thumbnail width\"\n          type: integer\n        title:\n          description: Title of the result\n          type: string\n        type:\n          description: Type of the result, must be *article*\n          type: string\n        url:\n          description: \"*Optional*. URL of the result\"\n          type: string\n      required:\n        - type\n        - id\n        - title\n        - input_message_content\n      type: object\n    InlineQueryResultAudio:\n      description: Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the audio.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultaudio\n      properties:\n        audio_duration:\n          description: \"*Optional*. Audio duration in seconds\"\n          type: integer\n        audio_url:\n          description: A valid URL for the audio file\n          type: string\n        caption:\n          description: \"*Optional*. Caption, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        performer:\n          description: \"*Optional*. Performer\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: Title\n          type: string\n        type:\n          description: Type of the result, must be *audio*\n          type: string\n      required:\n        - type\n        - id\n        - audio_url\n        - title\n      type: object\n    InlineQueryResultCachedAudio:\n      description: Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the audio.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedaudio\n      properties:\n        audio_file_id:\n          description: A valid file identifier for the audio file\n          type: string\n        caption:\n          description: \"*Optional*. Caption, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        type:\n          description: Type of the result, must be *audio*\n          type: string\n      required:\n        - type\n        - id\n        - audio_file_id\n      type: object\n    InlineQueryResultCachedDocument:\n      description: Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcacheddocument\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        document_file_id:\n          description: A valid file identifier for the file\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: Title for the result\n          type: string\n        type:\n          description: Type of the result, must be *document*\n          type: string\n      required:\n        - type\n        - id\n        - title\n        - document_file_id\n      type: object\n    InlineQueryResultCachedGif:\n      description: Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with specified content instead of the animation.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedgif\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        gif_file_id:\n          description: A valid file identifier for the GIF file\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *gif*\n          type: string\n      required:\n        - type\n        - id\n        - gif_file_id\n      type: object\n    InlineQueryResultCachedMpeg4Gif:\n      description: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedmpeg4gif\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        mpeg4_file_id:\n          description: A valid file identifier for the MP4 file\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *mpeg4\\_gif*\n          type: string\n      required:\n        - type\n        - id\n        - mpeg4_file_id\n      type: object\n    InlineQueryResultCachedPhoto:\n      description: Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the photo.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedphoto\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        photo_file_id:\n          description: A valid file identifier of the photo\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *photo*\n          type: string\n      required:\n        - type\n        - id\n        - photo_file_id\n      type: object\n    InlineQueryResultCachedSticker:\n      description: Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the sticker.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedsticker\n      properties:\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        sticker_file_id:\n          description: A valid file identifier of the sticker\n          type: string\n        type:\n          description: Type of the result, must be *sticker*\n          type: string\n      required:\n        - type\n        - id\n        - sticker_file_id\n      type: object\n    InlineQueryResultCachedVideo:\n      description: Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the video.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedvideo\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: Title for the result\n          type: string\n        type:\n          description: Type of the result, must be *video*\n          type: string\n        video_file_id:\n          description: A valid file identifier for the video file\n          type: string\n      required:\n        - type\n        - id\n        - video_file_id\n        - title\n      type: object\n    InlineQueryResultCachedVoice:\n      description: Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the voice message.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcachedvoice\n      properties:\n        caption:\n          description: \"*Optional*. Caption, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: Voice message title\n          type: string\n        type:\n          description: Type of the result, must be *voice*\n          type: string\n        voice_file_id:\n          description: A valid file identifier for the voice message\n          type: string\n      required:\n        - type\n        - id\n        - voice_file_id\n        - title\n      type: object\n    InlineQueryResultContact:\n      description: Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the contact.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultcontact\n      properties:\n        first_name:\n          description: Contact's first name\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 Bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        last_name:\n          description: \"*Optional*. Contact's last name\"\n          type: string\n        phone_number:\n          description: Contact's phone number\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_height:\n          description: \"*Optional*. Thumbnail height\"\n          type: integer\n        thumb_url:\n          description: \"*Optional*. Url of the thumbnail for the result\"\n          type: string\n        thumb_width:\n          description: \"*Optional*. Thumbnail width\"\n          type: integer\n        type:\n          description: Type of the result, must be *contact*\n          type: string\n        vcard:\n          description: \"*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes\"\n          type: string\n      required:\n        - type\n        - id\n        - phone_number\n        - first_name\n      type: object\n    InlineQueryResultDocument:\n      description: Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultdocument\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        document_url:\n          description: A valid URL for the file\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        mime_type:\n          description: Mime type of the content of the file, either “application/pdf” or “application/zip”\n          enum:\n            - application/pdf\n            - application/zip\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_height:\n          description: \"*Optional*. Thumbnail height\"\n          type: integer\n        thumb_url:\n          description: \"*Optional*. URL of the thumbnail (jpeg only) for the file\"\n          type: string\n        thumb_width:\n          description: \"*Optional*. Thumbnail width\"\n          type: integer\n        title:\n          description: Title for the result\n          type: string\n        type:\n          description: Type of the result, must be *document*\n          type: string\n      required:\n        - type\n        - id\n        - title\n        - document_url\n        - mime_type\n      type: object\n    InlineQueryResultGame:\n      description: Represents a [Game](https://core.telegram.org/bots/api/#games).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultgame\n      properties:\n        game_short_name:\n          description: Short name of the game\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        type:\n          description: Type of the result, must be *game*\n          type: string\n      required:\n        - type\n        - id\n        - game_short_name\n      type: object\n    InlineQueryResultGif:\n      description: Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultgif\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        gif_duration:\n          description: \"*Optional*. Duration of the GIF\"\n          type: integer\n        gif_height:\n          description: \"*Optional*. Height of the GIF\"\n          type: integer\n        gif_url:\n          description: A valid URL for the GIF file. File size must not exceed 1MB\n          type: string\n        gif_width:\n          description: \"*Optional*. Width of the GIF\"\n          type: integer\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_mime_type:\n          default: image/jpeg\n          description: \"*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”\"\n          enum:\n            - image/jpeg\n            - image/gif\n            - video/mp4\n          type: string\n        thumb_url:\n          description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result\n          type: string\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *gif*\n          type: string\n      required:\n        - type\n        - id\n        - gif_url\n        - thumb_url\n      type: object\n    InlineQueryResultLocation:\n      description: Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the location.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultlocation\n      properties:\n        heading:\n          description: \"*Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\"\n          type: integer\n        horizontal_accuracy:\n          description: \"*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500\"\n          type: number\n        id:\n          description: Unique identifier for this result, 1-64 Bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        latitude:\n          description: Location latitude in degrees\n          type: number\n        live_period:\n          description: \"*Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.\"\n          type: integer\n        longitude:\n          description: Location longitude in degrees\n          type: number\n        proximity_alert_radius:\n          description: \"*Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\"\n          type: integer\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_height:\n          description: \"*Optional*. Thumbnail height\"\n          type: integer\n        thumb_url:\n          description: \"*Optional*. Url of the thumbnail for the result\"\n          type: string\n        thumb_width:\n          description: \"*Optional*. Thumbnail width\"\n          type: integer\n        title:\n          description: Location title\n          type: string\n        type:\n          description: Type of the result, must be *location*\n          type: string\n      required:\n        - type\n        - id\n        - latitude\n        - longitude\n        - title\n      type: object\n    InlineQueryResultMpeg4Gif:\n      description: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultmpeg4gif\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        mpeg4_duration:\n          description: \"*Optional*. Video duration\"\n          type: integer\n        mpeg4_height:\n          description: \"*Optional*. Video height\"\n          type: integer\n        mpeg4_url:\n          description: A valid URL for the MP4 file. File size must not exceed 1MB\n          type: string\n        mpeg4_width:\n          description: \"*Optional*. Video width\"\n          type: integer\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_mime_type:\n          default: image/jpeg\n          description: \"*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”\"\n          enum:\n            - image/jpeg\n            - image/gif\n            - video/mp4\n          type: string\n        thumb_url:\n          description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result\n          type: string\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *mpeg4\\_gif*\n          type: string\n      required:\n        - type\n        - id\n        - mpeg4_url\n        - thumb_url\n      type: object\n    InlineQueryResultPhoto:\n      description: Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the photo.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultphoto\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        photo_height:\n          description: \"*Optional*. Height of the photo\"\n          type: integer\n        photo_url:\n          description: A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB\n          type: string\n        photo_width:\n          description: \"*Optional*. Width of the photo\"\n          type: integer\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_url:\n          description: URL of the thumbnail for the photo\n          type: string\n        title:\n          description: \"*Optional*. Title for the result\"\n          type: string\n        type:\n          description: Type of the result, must be *photo*\n          type: string\n      required:\n        - type\n        - id\n        - photo_url\n        - thumb_url\n      type: object\n    InlineQueryResultVenue:\n      description: Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the venue.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultvenue\n      properties:\n        address:\n          description: Address of the venue\n          type: string\n        foursquare_id:\n          description: \"*Optional*. Foursquare identifier of the venue if known\"\n          type: string\n        foursquare_type:\n          description: \"*Optional*. Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)\"\n          type: string\n        google_place_id:\n          description: \"*Optional*. Google Places identifier of the venue\"\n          type: string\n        google_place_type:\n          description: \"*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\"\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 Bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        latitude:\n          description: Latitude of the venue location in degrees\n          type: number\n        longitude:\n          description: Longitude of the venue location in degrees\n          type: number\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_height:\n          description: \"*Optional*. Thumbnail height\"\n          type: integer\n        thumb_url:\n          description: \"*Optional*. Url of the thumbnail for the result\"\n          type: string\n        thumb_width:\n          description: \"*Optional*. Thumbnail width\"\n          type: integer\n        title:\n          description: Title of the venue\n          type: string\n        type:\n          description: Type of the result, must be *venue*\n          type: string\n      required:\n        - type\n        - id\n        - latitude\n        - longitude\n        - title\n        - address\n      type: object\n    InlineQueryResultVideo:\n      description: |-\n        Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the video.\n\n        If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\\_message\\_content*.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultvideo\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        description:\n          description: \"*Optional*. Short description of the result\"\n          type: string\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        mime_type:\n          description: Mime type of the content of video url, “text/html” or “video/mp4”\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        thumb_url:\n          description: URL of the thumbnail (jpeg only) for the video\n          type: string\n        title:\n          description: Title for the result\n          type: string\n        type:\n          description: Type of the result, must be *video*\n          type: string\n        video_duration:\n          description: \"*Optional*. Video duration in seconds\"\n          type: integer\n        video_height:\n          description: \"*Optional*. Video height\"\n          type: integer\n        video_url:\n          description: A valid URL for the embedded video player or video file\n          type: string\n        video_width:\n          description: \"*Optional*. Video width\"\n          type: integer\n      required:\n        - type\n        - id\n        - video_url\n        - mime_type\n        - thumb_url\n        - title\n      type: object\n    InlineQueryResultVoice:\n      description: Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the the voice message.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inlinequeryresultvoice\n      properties:\n        caption:\n          description: \"*Optional*. Caption, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique identifier for this result, 1-64 bytes\n          type: string\n        input_message_content:\n          $ref: \"#/components/schemas/InputMessageContent\"\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        title:\n          description: Recording title\n          type: string\n        type:\n          description: Type of the result, must be *voice*\n          type: string\n        voice_duration:\n          description: \"*Optional*. Recording duration in seconds\"\n          type: integer\n        voice_url:\n          description: A valid URL for the voice recording\n          type: string\n      required:\n        - type\n        - id\n        - voice_url\n        - title\n      type: object\n    InputContactMessageContent:\n      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputcontactmessagecontent\n      properties:\n        first_name:\n          description: Contact's first name\n          type: string\n        last_name:\n          description: \"*Optional*. Contact's last name\"\n          type: string\n        phone_number:\n          description: Contact's phone number\n          type: string\n        vcard:\n          description: \"*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes\"\n          type: string\n      required:\n        - phone_number\n        - first_name\n      type: object\n    InputFile:\n      description: This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputfile\n    InputLocationMessageContent:\n      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputlocationmessagecontent\n      properties:\n        heading:\n          description: \"*Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\"\n          type: integer\n        horizontal_accuracy:\n          description: \"*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500\"\n          type: number\n        latitude:\n          description: Latitude of the location in degrees\n          type: number\n        live_period:\n          description: \"*Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.\"\n          type: integer\n        longitude:\n          description: Longitude of the location in degrees\n          type: number\n        proximity_alert_radius:\n          description: \"*Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\"\n          type: integer\n      required:\n        - latitude\n        - longitude\n      type: object\n    InputMedia:\n      anyOf:\n        - $ref: \"#/components/schemas/InputMediaAnimation\"\n        - $ref: \"#/components/schemas/InputMediaDocument\"\n        - $ref: \"#/components/schemas/InputMediaAudio\"\n        - $ref: \"#/components/schemas/InputMediaPhoto\"\n        - $ref: \"#/components/schemas/InputMediaVideo\"\n      description: This object represents the content of a media message to be sent. It should be one of\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmedia\n    InputMediaAnimation:\n      description: Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmediaanimation\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        duration:\n          description: \"*Optional*. Animation duration\"\n          type: integer\n        height:\n          description: \"*Optional*. Animation height\"\n          type: integer\n        media:\n          description: File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile\\_attach\\_name\u003e” to upload a new one using multipart/form-data under \u003cfile\\_attach\\_name\u003e name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        thumb:\n          anyOf:\n            - $ref: \"#/components/schemas/InputFile\"\n            - type: string\n          description: \"*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\\\_attach\\\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\\\_attach\\\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n        type:\n          description: Type of the result, must be *animation*\n          type: string\n        width:\n          description: \"*Optional*. Animation width\"\n          type: integer\n      required:\n        - type\n        - media\n      type: object\n    InputMediaAudio:\n      description: Represents an audio file to be treated as music to be sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmediaaudio\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        duration:\n          description: \"*Optional*. Duration of the audio in seconds\"\n          type: integer\n        media:\n          description: File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile\\_attach\\_name\u003e” to upload a new one using multipart/form-data under \u003cfile\\_attach\\_name\u003e name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        performer:\n          description: \"*Optional*. Performer of the audio\"\n          type: string\n        thumb:\n          anyOf:\n            - $ref: \"#/components/schemas/InputFile\"\n            - type: string\n          description: \"*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\\\_attach\\\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\\\_attach\\\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n        title:\n          description: \"*Optional*. Title of the audio\"\n          type: string\n        type:\n          description: Type of the result, must be *audio*\n          type: string\n      required:\n        - type\n        - media\n      type: object\n    InputMediaDocument:\n      description: Represents a general file to be sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmediadocument\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        disable_content_type_detection:\n          description: \"*Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.\"\n          type: boolean\n        media:\n          description: File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile\\_attach\\_name\u003e” to upload a new one using multipart/form-data under \u003cfile\\_attach\\_name\u003e name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        thumb:\n          anyOf:\n            - $ref: \"#/components/schemas/InputFile\"\n            - type: string\n          description: \"*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\\\_attach\\\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\\\_attach\\\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n        type:\n          description: Type of the result, must be *document*\n          type: string\n      required:\n        - type\n        - media\n      type: object\n    InputMediaPhoto:\n      description: Represents a photo to be sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmediaphoto\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        media:\n          description: File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile\\_attach\\_name\u003e” to upload a new one using multipart/form-data under \u003cfile\\_attach\\_name\u003e name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        type:\n          description: Type of the result, must be *photo*\n          type: string\n      required:\n        - type\n        - media\n      type: object\n    InputMediaVideo:\n      description: Represents a video to be sent.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmediavideo\n      properties:\n        caption:\n          description: \"*Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        duration:\n          description: \"*Optional*. Video duration\"\n          type: integer\n        height:\n          description: \"*Optional*. Video height\"\n          type: integer\n        media:\n          description: File to send. Pass a file\\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile\\_attach\\_name\u003e” to upload a new one using multipart/form-data under \u003cfile\\_attach\\_name\u003e name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n        supports_streaming:\n          description: \"*Optional*. Pass *True*, if the uploaded video is suitable for streaming\"\n          type: boolean\n        thumb:\n          anyOf:\n            - $ref: \"#/components/schemas/InputFile\"\n            - type: string\n          description: \"*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://\u003cfile\\\\_attach\\\\_name\u003e” if the thumbnail was uploaded using multipart/form-data under \u003cfile\\\\_attach\\\\_name\u003e. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)\"\n        type:\n          description: Type of the result, must be *video*\n          type: string\n        width:\n          description: \"*Optional*. Video width\"\n          type: integer\n      required:\n        - type\n        - media\n      type: object\n    InputMessageContent:\n      anyOf:\n        - $ref: \"#/components/schemas/InputTextMessageContent\"\n        - $ref: \"#/components/schemas/InputLocationMessageContent\"\n        - $ref: \"#/components/schemas/InputVenueMessageContent\"\n        - $ref: \"#/components/schemas/InputContactMessageContent\"\n      description: \"This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:\"\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputmessagecontent\n    InputTextMessageContent:\n      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputtextmessagecontent\n      properties:\n        disable_web_page_preview:\n          description: \"*Optional*. Disables link previews for links in the sent message\"\n          type: boolean\n        entities:\n          description: \"*Optional*. List of special entities that appear in message text, which can be specified instead of *parse\\\\_mode*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        message_text:\n          description: Text of the message to be sent, 1-4096 characters\n          type: string\n        parse_mode:\n          description: \"*Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.\"\n          type: string\n      required:\n        - message_text\n      type: object\n    InputVenueMessageContent:\n      description: Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#inputvenuemessagecontent\n      properties:\n        address:\n          description: Address of the venue\n          type: string\n        foursquare_id:\n          description: \"*Optional*. Foursquare identifier of the venue, if known\"\n          type: string\n        foursquare_type:\n          description: \"*Optional*. Foursquare type of the venue, if known. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)\"\n          type: string\n        google_place_id:\n          description: \"*Optional*. Google Places identifier of the venue\"\n          type: string\n        google_place_type:\n          description: \"*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\"\n          type: string\n        latitude:\n          description: Latitude of the venue in degrees\n          type: number\n        longitude:\n          description: Longitude of the venue in degrees\n          type: number\n        title:\n          description: Name of the venue\n          type: string\n      required:\n        - latitude\n        - longitude\n        - title\n        - address\n      type: object\n    Invoice:\n      description: This object contains basic information about an invoice.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#invoice\n      properties:\n        currency:\n          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code\n          type: string\n        description:\n          description: Product description\n          type: string\n        start_parameter:\n          description: Unique bot deep-linking parameter that can be used to generate this invoice\n          type: string\n        title:\n          description: Product name\n          type: string\n        total_amount:\n          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).\n          type: integer\n      required:\n        - title\n        - description\n        - start_parameter\n        - currency\n        - total_amount\n      type: object\n    KeyboardButton:\n      description: This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\\_contact*, *request\\_location*, and *request\\_poll* are mutually exclusive.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#keyboardbutton\n      properties:\n        request_contact:\n          description: \"*Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only\"\n          type: boolean\n        request_location:\n          description: \"*Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only\"\n          type: boolean\n        request_poll:\n          $ref: \"#/components/schemas/KeyboardButtonPollType\"\n        text:\n          description: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed\n          type: string\n      required:\n        - text\n      type: object\n    KeyboardButtonPollType:\n      description: This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#keyboardbuttonpolltype\n      properties:\n        type:\n          description: \"*Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.\"\n          type: string\n      type: object\n    LabeledPrice:\n      description: This object represents a portion of the price for goods or services.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#labeledprice\n      properties:\n        amount:\n          description: Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).\n          type: integer\n        label:\n          description: Portion label\n          type: string\n      required:\n        - label\n        - amount\n      type: object\n    Location:\n      description: This object represents a point on the map.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#location\n      properties:\n        heading:\n          description: \"*Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.\"\n          type: integer\n        horizontal_accuracy:\n          description: \"*Optional*. The radius of uncertainty for the location, measured in meters; 0-1500\"\n          type: number\n        latitude:\n          description: Latitude as defined by sender\n          type: number\n        live_period:\n          description: \"*Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.\"\n          type: integer\n        longitude:\n          description: Longitude as defined by sender\n          type: number\n        proximity_alert_radius:\n          description: \"*Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.\"\n          type: integer\n      required:\n        - longitude\n        - latitude\n      type: object\n    LoginUrl:\n      description: |-\n        This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:\n\n        Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).\n\n        Sample bot: [@discussbot](https://t.me/discussbot)\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#loginurl\n      properties:\n        bot_username:\n          description: \"*Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.\"\n          type: string\n        forward_text:\n          description: \"*Optional*. New text of the button in forwarded messages.\"\n          type: string\n        request_write_access:\n          description: \"*Optional*. Pass True to request the permission for your bot to send messages to the user.\"\n          type: boolean\n        url:\n          description: |-\n            An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).  \n\n            **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).\n          type: string\n      required:\n        - url\n      type: object\n    MaskPosition:\n      description: This object describes the position on faces where a mask should be placed by default.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#maskposition\n      properties:\n        point:\n          description: The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.\n          enum:\n            - forehead\n            - eyes\n            - mouth\n            - chin\n          type: string\n        scale:\n          description: Mask scaling coefficient. For example, 2.0 means double size.\n          type: number\n        x_shift:\n          description: Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.\n          type: number\n        y_shift:\n          description: Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.\n          type: number\n      required:\n        - point\n        - x_shift\n        - y_shift\n        - scale\n      type: object\n    Message:\n      description: This object represents a message.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#message\n      properties:\n        animation:\n          $ref: \"#/components/schemas/Animation\"\n        audio:\n          $ref: \"#/components/schemas/Audio\"\n        author_signature:\n          description: \"*Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator\"\n          type: string\n        caption:\n          description: \"*Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters\"\n          type: string\n        caption_entities:\n          description: \"*Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        channel_chat_created:\n          description: \"*Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\\\\_to\\\\_message if someone replies to a very first message in a channel.\"\n          type: boolean\n        chat:\n          $ref: \"#/components/schemas/Chat\"\n        connected_website:\n          description: \"*Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)\"\n          type: string\n        contact:\n          $ref: \"#/components/schemas/Contact\"\n        date:\n          description: Date the message was sent in Unix time\n          type: integer\n        delete_chat_photo:\n          description: \"*Optional*. Service message: the chat photo was deleted\"\n          type: boolean\n        dice:\n          $ref: \"#/components/schemas/Dice\"\n        document:\n          $ref: \"#/components/schemas/Document\"\n        edit_date:\n          description: \"*Optional*. Date the message was last edited in Unix time\"\n          type: integer\n        entities:\n          description: \"*Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        forward_date:\n          description: \"*Optional*. For forwarded messages, date the original message was sent in Unix time\"\n          type: integer\n        forward_from:\n          $ref: \"#/components/schemas/User\"\n        forward_from_chat:\n          $ref: \"#/components/schemas/Chat\"\n        forward_from_message_id:\n          description: \"*Optional*. For messages forwarded from channels, identifier of the original message in the channel\"\n          type: integer\n        forward_sender_name:\n          description: \"*Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages\"\n          type: string\n        forward_signature:\n          description: \"*Optional*. For messages forwarded from channels, signature of the post author if present\"\n          type: string\n        from:\n          $ref: \"#/components/schemas/User\"\n        game:\n          $ref: \"#/components/schemas/Game\"\n        group_chat_created:\n          description: \"*Optional*. Service message: the group has been created\"\n          type: boolean\n        invoice:\n          $ref: \"#/components/schemas/Invoice\"\n        left_chat_member:\n          $ref: \"#/components/schemas/User\"\n        location:\n          $ref: \"#/components/schemas/Location\"\n        media_group_id:\n          description: \"*Optional*. The unique identifier of a media message group this message belongs to\"\n          type: string\n        message_id:\n          description: Unique message identifier inside this chat\n          type: integer\n        migrate_from_chat_id:\n          description: \"*Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\"\n          type: integer\n        migrate_to_chat_id:\n          description: \"*Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\"\n          type: integer\n        new_chat_members:\n          description: \"*Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)\"\n          items:\n            $ref: \"#/components/schemas/User\"\n          type: array\n        new_chat_photo:\n          description: \"*Optional*. A chat photo was change to this value\"\n          items:\n            $ref: \"#/components/schemas/PhotoSize\"\n          type: array\n        new_chat_title:\n          description: \"*Optional*. A chat title was changed to this value\"\n          type: string\n        passport_data:\n          $ref: \"#/components/schemas/PassportData\"\n        photo:\n          description: \"*Optional*. Message is a photo, available sizes of the photo\"\n          items:\n            $ref: \"#/components/schemas/PhotoSize\"\n          type: array\n        pinned_message:\n          $ref: \"#/components/schemas/Message\"\n        poll:\n          $ref: \"#/components/schemas/Poll\"\n        proximity_alert_triggered:\n          $ref: \"#/components/schemas/ProximityAlertTriggered\"\n        reply_markup:\n          $ref: \"#/components/schemas/InlineKeyboardMarkup\"\n        reply_to_message:\n          $ref: \"#/components/schemas/Message\"\n        sender_chat:\n          $ref: \"#/components/schemas/Chat\"\n        sticker:\n          $ref: \"#/components/schemas/Sticker\"\n        successful_payment:\n          $ref: \"#/components/schemas/SuccessfulPayment\"\n        supergroup_chat_created:\n          description: \"*Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\\\\_to\\\\_message if someone replies to a very first message in a directly created supergroup.\"\n          type: boolean\n        text:\n          description: \"*Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters\"\n          type: string\n        venue:\n          $ref: \"#/components/schemas/Venue\"\n        via_bot:\n          $ref: \"#/components/schemas/User\"\n        video:\n          $ref: \"#/components/schemas/Video\"\n        video_note:\n          $ref: \"#/components/schemas/VideoNote\"\n        voice:\n          $ref: \"#/components/schemas/Voice\"\n      required:\n        - message_id\n        - date\n        - chat\n      type: object\n    MessageEntity:\n      description: This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#messageentity\n      properties:\n        language:\n          description: \"*Optional*. For “pre” only, the programming language of the entity text\"\n          type: string\n        length:\n          description: Length of the entity in UTF-16 code units\n          type: integer\n        offset:\n          description: Offset in UTF-16 code units to the start of the entity\n          type: integer\n        type:\n          description: Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\\_link” (for clickable text URLs), “text\\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))\n          enum:\n            - mention\n            - hashtag\n            - cashtag\n            - bot_command\n            - url\n            - email\n            - phone_number\n            - bold\n            - italic\n            - underline\n            - strikethrough\n            - code\n            - pre\n            - text_link\n            - text_mention\n          type: string\n        url:\n          description: \"*Optional*. For “text\\\\_link” only, url that will be opened after user taps on the text\"\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - type\n        - offset\n        - length\n      type: object\n    MessageId:\n      description: This object represents a unique message identifier.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#messageid\n      properties:\n        message_id:\n          description: Unique message identifier\n          type: integer\n      required:\n        - message_id\n      type: object\n    OrderInfo:\n      description: This object represents information about an order.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#orderinfo\n      properties:\n        email:\n          description: \"*Optional*. User email\"\n          type: string\n        name:\n          description: \"*Optional*. User name\"\n          type: string\n        phone_number:\n          description: \"*Optional*. User's phone number\"\n          type: string\n        shipping_address:\n          $ref: \"#/components/schemas/ShippingAddress\"\n      type: object\n    PassportData:\n      description: Contains information about Telegram Passport data shared with the bot by the user.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportdata\n      properties:\n        credentials:\n          $ref: \"#/components/schemas/EncryptedCredentials\"\n        data:\n          description: Array with information about documents and other Telegram Passport elements that was shared with the bot\n          items:\n            $ref: \"#/components/schemas/EncryptedPassportElement\"\n          type: array\n      required:\n        - data\n        - credentials\n      type: object\n    PassportElementError:\n      anyOf:\n        - $ref: \"#/components/schemas/PassportElementErrorDataField\"\n        - $ref: \"#/components/schemas/PassportElementErrorFrontSide\"\n        - $ref: \"#/components/schemas/PassportElementErrorReverseSide\"\n        - $ref: \"#/components/schemas/PassportElementErrorSelfie\"\n        - $ref: \"#/components/schemas/PassportElementErrorFile\"\n        - $ref: \"#/components/schemas/PassportElementErrorFiles\"\n        - $ref: \"#/components/schemas/PassportElementErrorTranslationFile\"\n        - $ref: \"#/components/schemas/PassportElementErrorTranslationFiles\"\n        - $ref: \"#/components/schemas/PassportElementErrorUnspecified\"\n      description: \"This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:\"\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerror\n    PassportElementErrorDataField:\n      description: Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrordatafield\n      properties:\n        data_hash:\n          description: Base64-encoded data hash\n          type: string\n        field_name:\n          description: Name of the data field which has the error\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *data*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the error, one of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”\n          enum:\n            - personal_details\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n            - address\n          type: string\n      required:\n        - source\n        - type\n        - field_name\n        - data_hash\n        - message\n      type: object\n    PassportElementErrorFile:\n      description: Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorfile\n      properties:\n        file_hash:\n          description: Base64-encoded file hash\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *file*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”\n          enum:\n            - utility_bill\n            - bank_statement\n            - rental_agreement\n            - passport_registration\n            - temporary_registration\n          type: string\n      required:\n        - source\n        - type\n        - file_hash\n        - message\n      type: object\n    PassportElementErrorFiles:\n      description: Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorfiles\n      properties:\n        file_hashes:\n          description: List of base64-encoded file hashes\n          items:\n            type: string\n          type: array\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *files*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the issue, one of “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”\n          enum:\n            - utility_bill\n            - bank_statement\n            - rental_agreement\n            - passport_registration\n            - temporary_registration\n          type: string\n      required:\n        - source\n        - type\n        - file_hashes\n        - message\n      type: object\n    PassportElementErrorFrontSide:\n      description: Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorfrontside\n      properties:\n        file_hash:\n          description: Base64-encoded hash of the file with the front side of the document\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *front\\_side*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”\n          enum:\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n          type: string\n      required:\n        - source\n        - type\n        - file_hash\n        - message\n      type: object\n    PassportElementErrorReverseSide:\n      description: Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorreverseside\n      properties:\n        file_hash:\n          description: Base64-encoded hash of the file with the reverse side of the document\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *reverse\\_side*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the issue, one of “driver\\_license”, “identity\\_card”\n          enum:\n            - driver_license\n            - identity_card\n          type: string\n      required:\n        - source\n        - type\n        - file_hash\n        - message\n      type: object\n    PassportElementErrorSelfie:\n      description: Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorselfie\n      properties:\n        file_hash:\n          description: Base64-encoded hash of the file with the selfie\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *selfie*\n          type: string\n        type:\n          description: The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”\n          enum:\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n          type: string\n      required:\n        - source\n        - type\n        - file_hash\n        - message\n      type: object\n    PassportElementErrorTranslationFile:\n      description: Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrortranslationfile\n      properties:\n        file_hash:\n          description: Base64-encoded file hash\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *translation\\_file*\n          type: string\n        type:\n          description: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”\n          enum:\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n            - utility_bill\n            - bank_statement\n            - rental_agreement\n            - passport_registration\n            - temporary_registration\n          type: string\n      required:\n        - source\n        - type\n        - file_hash\n        - message\n      type: object\n    PassportElementErrorTranslationFiles:\n      description: Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrortranslationfiles\n      properties:\n        file_hashes:\n          description: List of base64-encoded file hashes\n          items:\n            type: string\n          type: array\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *translation\\_files*\n          type: string\n        type:\n          description: Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”\n          enum:\n            - passport\n            - driver_license\n            - identity_card\n            - internal_passport\n            - utility_bill\n            - bank_statement\n            - rental_agreement\n            - passport_registration\n            - temporary_registration\n          type: string\n      required:\n        - source\n        - type\n        - file_hashes\n        - message\n      type: object\n    PassportElementErrorUnspecified:\n      description: Represents an issue in an unspecified place. The error is considered resolved when new data is added.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportelementerrorunspecified\n      properties:\n        element_hash:\n          description: Base64-encoded element hash\n          type: string\n        message:\n          description: Error message\n          type: string\n        source:\n          description: Error source, must be *unspecified*\n          type: string\n        type:\n          description: Type of element of the user's Telegram Passport which has the issue\n          type: string\n      required:\n        - source\n        - type\n        - element_hash\n        - message\n      type: object\n    PassportFile:\n      description: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#passportfile\n      properties:\n        file_date:\n          description: Unix time when the file was uploaded\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_size:\n          description: File size\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n      required:\n        - file_id\n        - file_unique_id\n        - file_size\n        - file_date\n      type: object\n    PhotoSize:\n      description: This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#photosize\n      properties:\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        height:\n          description: Photo height\n          type: integer\n        width:\n          description: Photo width\n          type: integer\n      required:\n        - file_id\n        - file_unique_id\n        - width\n        - height\n      type: object\n    Poll:\n      description: This object contains information about a poll.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#poll\n      properties:\n        allows_multiple_answers:\n          description: True, if the poll allows multiple answers\n          type: boolean\n        close_date:\n          description: \"*Optional*. Point in time (Unix timestamp) when the poll will be automatically closed\"\n          type: integer\n        correct_option_id:\n          description: \"*Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.\"\n          type: integer\n        explanation:\n          description: \"*Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters\"\n          type: string\n        explanation_entities:\n          description: \"*Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*\"\n          items:\n            $ref: \"#/components/schemas/MessageEntity\"\n          type: array\n        id:\n          description: Unique poll identifier\n          type: string\n        is_anonymous:\n          description: True, if the poll is anonymous\n          type: boolean\n        is_closed:\n          description: True, if the poll is closed\n          type: boolean\n        open_period:\n          description: \"*Optional*. Amount of time in seconds the poll will be active after creation\"\n          type: integer\n        options:\n          description: List of poll options\n          items:\n            $ref: \"#/components/schemas/PollOption\"\n          type: array\n        question:\n          description: Poll question, 1-255 characters\n          type: string\n        total_voter_count:\n          description: Total number of users that voted in the poll\n          type: integer\n        type:\n          description: Poll type, currently can be “regular” or “quiz”\n          type: string\n      required:\n        - id\n        - question\n        - options\n        - total_voter_count\n        - is_closed\n        - is_anonymous\n        - type\n        - allows_multiple_answers\n      type: object\n    PollAnswer:\n      description: This object represents an answer of a user in a non-anonymous poll.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#pollanswer\n      properties:\n        option_ids:\n          description: 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.\n          items:\n            type: integer\n          type: array\n        poll_id:\n          description: Unique poll identifier\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - poll_id\n        - user\n        - option_ids\n      type: object\n    PollOption:\n      description: This object contains information about one answer option in a poll.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#polloption\n      properties:\n        text:\n          description: Option text, 1-100 characters\n          type: string\n        voter_count:\n          description: Number of users that voted for this option\n          type: integer\n      required:\n        - text\n        - voter_count\n      type: object\n    PreCheckoutQuery:\n      description: This object contains information about an incoming pre-checkout query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#precheckoutquery\n      properties:\n        currency:\n          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code\n          type: string\n        from:\n          $ref: \"#/components/schemas/User\"\n        id:\n          description: Unique query identifier\n          type: string\n        invoice_payload:\n          description: Bot specified invoice payload\n          type: string\n        order_info:\n          $ref: \"#/components/schemas/OrderInfo\"\n        shipping_option_id:\n          description: \"*Optional*. Identifier of the shipping option chosen by the user\"\n          type: string\n        total_amount:\n          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).\n          type: integer\n      required:\n        - id\n        - from\n        - currency\n        - total_amount\n        - invoice_payload\n      type: object\n    ProximityAlertTriggered:\n      description: This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#proximityalerttriggered\n      properties:\n        distance:\n          description: The distance between the users\n          type: integer\n        traveler:\n          $ref: \"#/components/schemas/User\"\n        watcher:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - traveler\n        - watcher\n        - distance\n      type: object\n    ReplyKeyboardMarkup:\n      description: This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#replykeyboardmarkup\n      properties:\n        keyboard:\n          description: Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects\n          items:\n            items:\n              $ref: \"#/components/schemas/KeyboardButton\"\n            type: array\n          type: array\n        one_time_keyboard:\n          default: false\n          description: \"*Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.\"\n          type: boolean\n        resize_keyboard:\n          default: false\n          description: \"*Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.\"\n          type: boolean\n        selective:\n          description: |-\n            *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.  \n\n            *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.\n          type: boolean\n      required:\n        - keyboard\n      type: object\n    ReplyKeyboardRemove:\n      description: Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#replykeyboardremove\n      properties:\n        remove_keyboard:\n          description: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))\n          type: boolean\n        selective:\n          description: |-\n            *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.  \n\n            *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.\n          type: boolean\n      required:\n        - remove_keyboard\n      type: object\n    ResponseParameters:\n      description: Contains information about why a request was unsuccessful.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#responseparameters\n      properties:\n        migrate_to_chat_id:\n          description: \"*Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.\"\n          type: integer\n        retry_after:\n          description: \"*Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated\"\n          type: integer\n      type: object\n    ShippingAddress:\n      description: This object represents a shipping address.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#shippingaddress\n      properties:\n        city:\n          description: City\n          type: string\n        country_code:\n          description: ISO 3166-1 alpha-2 country code\n          type: string\n        post_code:\n          description: Address post code\n          type: string\n        state:\n          description: State, if applicable\n          type: string\n        street_line1:\n          description: First line for the address\n          type: string\n        street_line2:\n          description: Second line for the address\n          type: string\n      required:\n        - country_code\n        - state\n        - city\n        - street_line1\n        - street_line2\n        - post_code\n      type: object\n    ShippingOption:\n      description: This object represents one shipping option.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#shippingoption\n      properties:\n        id:\n          description: Shipping option identifier\n          type: string\n        prices:\n          description: List of price portions\n          items:\n            $ref: \"#/components/schemas/LabeledPrice\"\n          type: array\n        title:\n          description: Option title\n          type: string\n      required:\n        - id\n        - title\n        - prices\n      type: object\n    ShippingQuery:\n      description: This object contains information about an incoming shipping query.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#shippingquery\n      properties:\n        from:\n          $ref: \"#/components/schemas/User\"\n        id:\n          description: Unique query identifier\n          type: string\n        invoice_payload:\n          description: Bot specified invoice payload\n          type: string\n        shipping_address:\n          $ref: \"#/components/schemas/ShippingAddress\"\n      required:\n        - id\n        - from\n        - invoice_payload\n        - shipping_address\n      type: object\n    Sticker:\n      description: This object represents a sticker.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#sticker\n      properties:\n        emoji:\n          description: \"*Optional*. Emoji associated with the sticker\"\n          type: string\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        height:\n          description: Sticker height\n          type: integer\n        is_animated:\n          description: \"*True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)\"\n          type: boolean\n        mask_position:\n          $ref: \"#/components/schemas/MaskPosition\"\n        set_name:\n          description: \"*Optional*. Name of the sticker set to which the sticker belongs\"\n          type: string\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n        width:\n          description: Sticker width\n          type: integer\n      required:\n        - file_id\n        - file_unique_id\n        - width\n        - height\n        - is_animated\n      type: object\n    StickerSet:\n      description: This object represents a sticker set.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#stickerset\n      properties:\n        contains_masks:\n          description: \"*True*, if the sticker set contains masks\"\n          type: boolean\n        is_animated:\n          description: \"*True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)\"\n          type: boolean\n        name:\n          description: Sticker set name\n          type: string\n        stickers:\n          description: List of all set stickers\n          items:\n            $ref: \"#/components/schemas/Sticker\"\n          type: array\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n        title:\n          description: Sticker set title\n          type: string\n      required:\n        - name\n        - title\n        - is_animated\n        - contains_masks\n        - stickers\n      type: object\n    SuccessfulPayment:\n      description: This object contains basic information about a successful payment.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#successfulpayment\n      properties:\n        currency:\n          description: Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code\n          type: string\n        invoice_payload:\n          description: Bot specified invoice payload\n          type: string\n        order_info:\n          $ref: \"#/components/schemas/OrderInfo\"\n        provider_payment_charge_id:\n          description: Provider payment identifier\n          type: string\n        shipping_option_id:\n          description: \"*Optional*. Identifier of the shipping option chosen by the user\"\n          type: string\n        telegram_payment_charge_id:\n          description: Telegram payment identifier\n          type: string\n        total_amount:\n          description: Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).\n          type: integer\n      required:\n        - currency\n        - total_amount\n        - invoice_payload\n        - telegram_payment_charge_id\n        - provider_payment_charge_id\n      type: object\n    Update:\n      description: |-\n        This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.  \n        At most **one** of the optional parameters can be present in any given update.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#update\n      properties:\n        callback_query:\n          $ref: \"#/components/schemas/CallbackQuery\"\n        channel_post:\n          $ref: \"#/components/schemas/Message\"\n        chosen_inline_result:\n          $ref: \"#/components/schemas/ChosenInlineResult\"\n        edited_channel_post:\n          $ref: \"#/components/schemas/Message\"\n        edited_message:\n          $ref: \"#/components/schemas/Message\"\n        inline_query:\n          $ref: \"#/components/schemas/InlineQuery\"\n        message:\n          $ref: \"#/components/schemas/Message\"\n        poll:\n          $ref: \"#/components/schemas/Poll\"\n        poll_answer:\n          $ref: \"#/components/schemas/PollAnswer\"\n        pre_checkout_query:\n          $ref: \"#/components/schemas/PreCheckoutQuery\"\n        shipping_query:\n          $ref: \"#/components/schemas/ShippingQuery\"\n        update_id:\n          description: The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.\n          type: integer\n      required:\n        - update_id\n      type: object\n    User:\n      description: This object represents a Telegram user or bot.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#user\n      properties:\n        can_join_groups:\n          description: \"*Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).\"\n          type: boolean\n        can_read_all_group_messages:\n          description: \"*Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).\"\n          type: boolean\n        first_name:\n          description: User's or bot's first name\n          type: string\n        id:\n          description: Unique identifier for this user or bot\n          type: integer\n        is_bot:\n          description: True, if this user is a bot\n          type: boolean\n        language_code:\n          description: \"*Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language\"\n          type: string\n        last_name:\n          description: \"*Optional*. User's or bot's last name\"\n          type: string\n        supports_inline_queries:\n          description: \"*Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).\"\n          type: boolean\n        username:\n          description: \"*Optional*. User's or bot's username\"\n          type: string\n      required:\n        - id\n        - is_bot\n        - first_name\n      type: object\n    UserProfilePhotos:\n      description: This object represent a user's profile pictures.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#userprofilephotos\n      properties:\n        photos:\n          description: Requested profile pictures (in up to 4 sizes each)\n          items:\n            items:\n              $ref: \"#/components/schemas/PhotoSize\"\n            type: array\n          type: array\n        total_count:\n          description: Total number of profile pictures the target user has\n          type: integer\n      required:\n        - total_count\n        - photos\n      type: object\n    Venue:\n      description: This object represents a venue.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#venue\n      properties:\n        address:\n          description: Address of the venue\n          type: string\n        foursquare_id:\n          description: \"*Optional*. Foursquare identifier of the venue\"\n          type: string\n        foursquare_type:\n          description: \"*Optional*. Foursquare type of the venue. (For example, “arts\\\\_entertainment/default”, “arts\\\\_entertainment/aquarium” or “food/icecream”.)\"\n          type: string\n        google_place_id:\n          description: \"*Optional*. Google Places identifier of the venue\"\n          type: string\n        google_place_type:\n          description: \"*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)\"\n          type: string\n        location:\n          $ref: \"#/components/schemas/Location\"\n        title:\n          description: Name of the venue\n          type: string\n      required:\n        - location\n        - title\n        - address\n      type: object\n    Video:\n      description: This object represents a video file.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#video\n      properties:\n        duration:\n          description: Duration of the video in seconds as defined by sender\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_name:\n          description: \"*Optional*. Original filename as defined by sender\"\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        height:\n          description: Video height as defined by sender\n          type: integer\n        mime_type:\n          description: \"*Optional*. Mime type of a file as defined by sender\"\n          type: string\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n        width:\n          description: Video width as defined by sender\n          type: integer\n      required:\n        - file_id\n        - file_unique_id\n        - width\n        - height\n        - duration\n      type: object\n    VideoNote:\n      description: This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#videonote\n      properties:\n        duration:\n          description: Duration of the video in seconds as defined by sender\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        length:\n          description: Video width and height (diameter of the video message) as defined by sender\n          type: integer\n        thumb:\n          $ref: \"#/components/schemas/PhotoSize\"\n      required:\n        - file_id\n        - file_unique_id\n        - length\n        - duration\n      type: object\n    Voice:\n      description: This object represents a voice note.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#voice\n      properties:\n        duration:\n          description: Duration of the audio in seconds as defined by sender\n          type: integer\n        file_id:\n          description: Identifier for this file, which can be used to download or reuse the file\n          type: string\n        file_size:\n          description: \"*Optional*. File size\"\n          type: integer\n        file_unique_id:\n          description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.\n          type: string\n        mime_type:\n          description: \"*Optional*. MIME type of the file as defined by sender\"\n          type: string\n      required:\n        - file_id\n        - file_unique_id\n        - duration\n      type: object\n    WebhookInfo:\n      description: Contains information about the current status of a webhook.\n      externalDocs:\n        url: https://core.telegram.org/bots/api/#webhookinfo\n      properties:\n        allowed_updates:\n          description: \"*Optional*. A list of update types the bot is subscribed to. Defaults to all update types\"\n          items:\n            type: string\n          type: array\n        has_custom_certificate:\n          description: True, if a custom certificate was provided for webhook certificate checks\n          type: boolean\n        ip_address:\n          description: \"*Optional*. Currently used webhook IP address\"\n          type: string\n        last_error_date:\n          description: \"*Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook\"\n          type: integer\n        last_error_message:\n          description: \"*Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook\"\n          type: string\n        max_connections:\n          description: \"*Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery\"\n          type: integer\n        pending_update_count:\n          description: Number of updates awaiting delivery\n          type: integer\n        url:\n          description: Webhook URL, may be empty if webhook is not set up\n          type: string\n      required:\n        - url\n        - has_custom_certificate\n        - pending_update_count\n      type: object\n"
		}
	},
	"Error": "buildIR: make ir: path \"/answerShippingQuery\": post: requestBody: contents: application/x-www-form-urlencoded: form parameter \"shipping_options\": nested objects not allowed",
	"NotImplemented": [
		"complex anyOf",
		"sum type parameter",
		"unsupported content types"
	]
}