{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apscan/indexer"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/doc/v0/openapi.yaml",
			"byteSize": 57225,
			"content": "openapi: 3.0.3\ninfo:\n  title: Aptos Dev API Specification\n  description: \u003e\n    The Aptos Node API is a RESTful API for client applications to interact with the Aptos blockchain.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.1.2\n  contact:\n    name: Aptos\n    url: https://github.com/aptos-labs/aptos-core\ntags:\n  - name: general\n    description: General information\n  - name: transactions\n    description: Access to transactions\n  - name: accounts\n    description: Access to account resources and modules\n  - name: events\n    description: Access to events\npaths:\n  /:\n    get:\n      summary: Ledger information\n      operationId: get_ledger_info\n      tags:\n        - general\n      responses:\n        \"200\":\n          description: Returns the latest ledger information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LedgerInfo'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /spec.html:\n    get:\n      summary: API document\n      operationId: get_spec_html\n      tags:\n        - general\n      responses:\n        \"200\":\n          description: Returns OpenAPI specification html document.\n        \"400\":\n          description: Bad Request\n  /openapi.yaml:\n    get:\n      summary: OpenAPI specification\n      operationId: get_spec_yaml\n      tags:\n        - general\n      responses:\n        \"200\":\n          description: Returns OpenAPI specification YAML document.\n        \"400\":\n          description: Bad Request\n  /accounts/{address}:\n    get:\n      summary: Get account\n      operationId: get_account\n      tags:\n        - accounts\n        - state\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n      responses:\n        \"200\":\n          description: Returns the latest account core data resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/resources:\n    get:\n      summary: Get account resources\n      operationId: get_account_resources\n      tags:\n        - accounts\n        - state\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - $ref: '#/components/parameters/LedgerVersion'\n      responses:\n        \"200\":\n          description: |\n            This API returns account resources for a specific ledger version (AKA transaction version).\n            If not present, the latest version is used.\n\n            The Aptos nodes prune account state history, via a configurable time window (link).\n\n            If the requested data has been pruned, the server responds with a 404\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccountResource'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/resource/{resource_type}:\n    get:\n      summary: Get resource by account address and resource type.\n      operationId: get_account_resource # TODO: make it query_resource if query path is supported\n      description: |\n        This API renders a resource identified by the owner account\n        `address` and the `resource_type`, at a ledger version (AKA\n        transaction version) specified as a query param, otherwise the\n        latest version is used.\n      tags:\n        - accounts\n        - state\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - name: resource_type\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/MoveStructTagId'\n          example: \"0x1::account::Account\"\n        - $ref: '#/components/parameters/LedgerVersion'\n      responses:\n        \"200\":\n          description: Returns a resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountResource'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/modules:\n    get:\n      summary: Get account modules\n      operationId: get_account_modules\n      tags:\n        - accounts\n        - state\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - $ref: '#/components/parameters/LedgerVersion'\n      responses:\n        \"200\":\n          description: |\n            This API returns account modules for a specific ledger version (AKA transaction version).\n            If not present, the latest version is used.\n\n            The Aptos nodes prune account state history, via a configurable time window (link).\n\n            If the requested data has been pruned, the server responds with a 404\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MoveModule'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/module/{module_name}:\n    get:\n      summary: Get module by module id.\n      operationId: get_account_module\n      description: |\n        This API renders a Move module identified by the module id. A\n        module id consists of the module owner `address` and the\n        `module_name`. The module is rendered at a ledger version (AKA\n        transaction version) specified as a query param, otherwise the\n        latest version is used.\n      tags:\n        - accounts\n        - state\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - name: module_name\n          in: path\n          required: true\n          description: The name of the module.\n          schema:\n            type: string\n          example: \"GUID\"\n        - $ref: '#/components/parameters/LedgerVersion'\n      responses:\n        \"200\":\n          description: Returns a move module.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MoveModule'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /transactions:\n    get:\n      summary: Get transactions\n      operationId: get_transactions\n      tags:\n        - transactions\n      parameters:\n        - $ref: '#/components/parameters/StartVersion'\n        - $ref: '#/components/parameters/Limit'\n      responses:\n        \"200\":\n          description: Returns on-chain transactions, paginated.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OnChainTransaction'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n    post:\n      summary: Submit transaction\n      operationId: submit_transaction\n      description: |\n        **Submit transaction using JSON without additional tools**\n\n          * Send [POST /transactions/signing_message](#operation/create-signing-message) to create transaction signing message.\n          * Sign the transaction signing message and create transaction signature.\n          * Submit the user transaction request with the transaction siganture. The request header \"Content-Type\" must set to \"application/json\".\n\n      tags:\n        - transactions\n      requestBody:\n        description: |\n          User transaction request with transaction sender's signature.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitTransactionRequest'\n      responses:\n        \"202\":\n          description: Transaction is accepted and submitted to mempool.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingTransaction'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"413\":\n          $ref: '#/components/responses/413'\n        \"415\":\n          $ref: '#/components/responses/415'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /transactions/simulate:\n    post:\n      summary: Simulate transaction\n      operationId: simulate_transaction\n      description: |\n        **Submit transaction for simulation result using JSON **\n\n          * Create a SignedTransaction with zero-padded signature\n          * Submit the user transaction request with the zero-padded siganture.\n          * The request header \"Content-Type\" must set to \"application/json\".\n\n      tags:\n        - transactions\n      requestBody:\n        description: |\n          User transaction request with transaction sender's signature.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmitTransactionRequest'\n      responses:\n        \"200\":\n          description: Transaction simulation completed.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OnChainTransaction'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"413\":\n          $ref: '#/components/responses/413'\n        \"415\":\n          $ref: '#/components/responses/415'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/transactions:\n    get:\n      summary: Get account transactions\n      operationId: get_account_transactions\n      tags:\n        - transactions\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - $ref: '#/components/parameters/StartVersion'\n        - $ref: '#/components/parameters/Limit'\n      responses:\n        \"200\":\n          description: Returns on-chain transactions, paginated.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OnChainTransaction'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /transactions/{txn_hash_or_version}:\n    get:\n      summary: Get transaction\n      description: |\n        There are two types of transaction identifiers:\n          1. Transaction hash: included in any transaction JSON respond from server.\n          2. Transaction version: included in on-chain transaction JSON respond from server.\n\n        When given transaction hash, server first looks up on-chain transaction by hash;\n        if no on-chain transaction found, then look up transaction by hash in the mempool\n        (pending) transactions.\n\n        When given a transaction version, server looks up the transaction on-chain by version.\n\n        To create a transaction hash:\n          1. Create hash message bytes: \"APTOS::RawTransaction\" bytes + BCS bytes of [Transaction](https://aptos-labs.github.io/aptos-core/aptos_types/transaction/enum.Transaction.html).\n          2. Apply hash algorithm `SHA3-256` to the hash message bytes.\n          3. Hex-encode the hash bytes with `0x` prefix.\n      operationId: get_transaction\n      tags:\n        - transactions\n      parameters:\n        - name: txn_hash_or_version\n          in: path\n          required: true\n          description: |\n            * Transaction hash should be hex-encoded bytes string with `0x` prefix.\n            * Transaction version is an `uint64` number.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: |\n            Returns a pending / on-chain transaction.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /transactions/signing_message:\n    post:\n      summary: Create transaction signing message\n      description: |\n        This API creates transaction signing message for client to create\n        transaction signature.\n\n        The success response contains hex-encoded signing message bytes.\n\n        **To sign the message**\n\n          1. Client first needs to HEX decode the `message` into bytes.\n          2. Then sign the bytes to create signature.\n      operationId: create_signing_message\n      tags:\n        - transactions\n      requestBody:\n        description: User create signing message request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreateSigningMessageRequest'\n      responses:\n        \"200\":\n          description: |\n            Returns hex-encoded transaction signing message bytes.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - message\n                properties:\n                  message:\n                    $ref: '#/components/schemas/HexEncodedBytes'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"413\":\n          $ref: '#/components/responses/413'\n        \"415\":\n          $ref: '#/components/responses/415'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /events/{event_key}:\n    get:\n      summary: Get events by event key\n      operationId: get_events_by_event_key\n      tags:\n        - events\n      parameters:\n        - name: event_key\n          in: path\n          required: true\n          description: |\n            Event key for an event stream.\n            It is BCS serialized bytes of `guid` field in the Move struct `EventHandle`.\n          schema:\n            $ref: '#/components/schemas/HexEncodedBytes'\n      responses:\n        \"200\":\n          description: |\n            Returns events\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /accounts/{address}/events/{event_handle_struct}/{field_name}:\n    get:\n      summary: Get events by event handle\n      operationId: get_events_by_event_handle\n      description: |\n        This API extracts event key from the account resource identified\n        by the `event_handle_struct` and `field_name`, then returns\n        events identified by the event key.\n      tags:\n        - events\n      parameters:\n        - $ref: '#/components/parameters/AccountAddress'\n        - name: event_handle_struct\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/MoveStructTagId'\n          example: \"0x1::account::Account\"\n        - name: field_name\n          in: path\n          required: true\n          description: |\n            The field name of the `EventHandle` in the struct.\n          schema:\n            type: string\n          example: \"sent_events\"\n        - $ref: '#/components/parameters/EventStart'\n        - $ref: '#/components/parameters/EventLimit'\n      responses:\n        \"200\":\n          description: |\n            Returns events\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"500\":\n          $ref: '#/components/responses/500'\n  /tables/{table_handle}/item:\n    post:\n      summary: Get table item by handle and key.\n      description: |\n        Gets a table item for a table identified by the handle and the key for the item.\n        Key and value types need to be passed in to help with key serialization and value deserialization.\n      operationId: get_table_item\n      tags:\n        - state\n        - table\n      parameters:\n        - name: table_handle\n          in: path\n          required: true\n          schema:\n            title: Table Handle\n            type: string\n            format: uint128\n            description: the table handle\n          example: \"1283023094380\"\n      requestBody:\n        description: Table item request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TableItemRequest'\n      responses:\n        \"200\":\n          description: Returns the table item value rendered in JSON.\n          content:\n            application/json:\n              schema:\n                type: object\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"413\":\n          $ref: '#/components/responses/413'\n        \"415\":\n          $ref: '#/components/responses/415'\n        \"500\":\n          $ref: '#/components/responses/500'\ncomponents:\n  parameters:\n    AccountAddress:\n      name: address\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/Address'\n    LedgerVersion:\n      name: version\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/LedgerVersion'\n    StartVersion:\n      name: start\n      in: query\n      required: false\n      description: The start transaction version of the page. Default is the latest ledger version.\n      example: 1\n      schema:\n        type: integer\n    Limit:\n      name: limit\n      in: query\n      required: false\n      description: The max number of transactions should be returned for the page. Default is 25.\n      example: 25\n      schema:\n        type: integer\n    EventStart:\n      name: start\n      in: query\n      required: false\n      description: |\n        The start sequence number in the EVENT STREAM, defaulting to the latest event.\n        The events are returned in the reverse order of sequence numbers.\n      schema:\n        type: integer\n    EventLimit:\n      name: limit\n      in: query\n      required: false\n      description: The number of events to be returned for the page default is 5\n      example: 25\n      schema:\n        type: integer\n  responses:\n    \"400\":\n      description: |\n        Bad request due to a client error: invalid request headers, parameters or body.\n        Client should not retry the request without modification.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/AptosError\"\n            example:\n              code: 400\n              message: \"invalid parameter\"\n    \"404\":\n      description: |\n        Resource or data not found.\n        Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/AptosError\"\n            example:\n              code: 404\n              message: \"resource not found\"\n              aptos_ledger_version: \"37829327\"\n    \"413\":\n      description: |\n        The request payload is too large.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/AptosError\"\n            example:\n              code: 413\n              message: \"The request payload is too large\"\n    \"415\":\n      description: |\n        The request's content-type is not supported.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/AptosError\"\n            example:\n              code: 415\n              message: \"The request's content-type is not supported\"\n    \"500\":\n      description: |\n        Server internal error, caused by unexpected issues.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/AptosError\"\n            example:\n              code: 500\n              message: \"unexpected internal error\"\n  schemas:\n    AptosError:\n      title: Response Error\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n        aptos_ledger_version:\n          $ref: '#/components/schemas/LedgerVersion'\n    Uint64:\n      title: uint64\n      type: string\n      format: uint64\n      description: Unsigned int64 type value\n      example: \"32425224034\"\n    Address:\n      title: Account Address\n      type: string\n      format: address\n      description: |\n        Hex-encoded 16 bytes Aptos account address.\n\n        Prefixed with `0x` and leading zeros are trimmed.\n\n        See [doc](https://diem.github.io/move/address.html) for more details.\n      example: \"0xdd\"\n    HexEncodedBytes:\n      title: Hex-encoded Bytes\n      type: string\n      format: hex\n      description: |\n        All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n        two hex digits per byte.\n\n        Different with `Address` type, hex-encoded bytes should not trim any zeros.\n      example: \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\"\n    TimestampSec:\n      title: Timestamp in Seconds\n      type: string\n      format: uint64\n      description: |\n        Timestamp in seconds, e.g. transaction expiration timestamp.\n      example: \"1635447454\"\n    TimestampUsec:\n      title: Timestamp in Microseconds\n      type: string\n      format: uint64\n      description: |\n        Timestamp in microseconds, e.g. ledger / block creation timestamp.\n      example: \"1632507671675208\"\n    LedgerVersion:\n      title: Ledger Version\n      type: string\n      format: uint64\n      description: |\n        The version of the latest transaction in the ledger.\n      example: \"52635485\"\n    EventKey:\n      title: Event Key\n      type: string\n      format: hex\n      description: |\n        Event key is a global index for an event stream.\n\n        It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is\n        a combination of a `uint64` creation number and account address\n        (without trimming leading zeros).\n\n        For example, event key `0x00000000000000000000000000000000000000000a550c18`\n        is combined by the following 2 parts:\n          1. `0000000000000000`: `uint64` representation of `0`.\n          2. `0000000000000000000000000a550c18`: 16 bytes of account address.\n      example: \"0x00000000000000000000000000000000000000000a550c18\"\n    EventSequenceNumber:\n      title: Event Sequence Number\n      type: string\n      format: uint64\n      description: |\n        Event `sequence_number` is unique id of an event in an event stream.\n        Event `sequence_number` starts from 0 for each event key.\n      example: \"23\"\n    LedgerInfo:\n      title: Ledger Information\n      type: object\n      required:\n        - chain_id\n        - ledger_version\n        - ledger_timestamp\n      properties:\n        chain_id:\n          type: integer\n          example: 4\n          description: |\n            The blockchain chain id.\n        ledger_version:\n          $ref: '#/components/schemas/LedgerVersion'\n        ledger_timestamp:\n          $ref: '#/components/schemas/TimestampUsec'\n    Account:\n      title: Account\n      description: Core account resource, used for identifying account and transaction execution.\n      type: object\n      required:\n        - sequence_number\n        - authentication_key\n      properties:\n        sequence_number:\n          $ref: '#/components/schemas/Uint64'\n        authentication_key:\n          $ref: '#/components/schemas/HexEncodedBytes'\n      example:\n        sequence_number: \"1\"\n        authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n    AccountResource:\n      title: Account Resource\n      description: Account resource is a Move struct value belongs to an account.\n      type: object\n      required:\n        - type\n        - data\n      properties:\n        type:\n          $ref: '#/components/schemas/MoveStructTagId'\n        data:\n          type: \"object\"\n          description: |\n            Account resource data is JSON representation of the Move struct `type`.\n\n            Move struct field name and value are serialized as object property name and value.\n      example:\n        type: \"0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\"\n        data:\n          coin:\n            value: \"8000000000\"\n    MoveTypeTagId:\n      title: Move Type Tag ID\n      type: string\n      pattern: '^(bool|u8|u64|u128|address|signer|vector\u003c.+\u003e|0x[0-9a-zA-Z:_\u003c, \u003e]+)$'\n      description: |\n        String representation of an on-chain Move type tag that is exposed in transaction payload.\n\n        Values:\n          - bool\n          - u8\n          - u64\n          - u128\n          - address\n          - signer\n          - vector: `vector\u003c{non-reference MoveTypeId}\u003e`\n          - struct: `{address}::{module_name}::{struct_name}::\u003c{generic types}\u003e`\n\n        Vector type value examples:\n          * `vector\u003cu8\u003e`\n          * `vector\u003cvector\u003cu64\u003e\u003e`\n          * `vector\u003c0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\u003e`\n\n        Struct type value examples:\n          * `0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\n          * `0x1::account::Account`\n\n        Note:\n          1. Empty chars should be ignored when comparing 2 struct tag ids.\n          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n      example: \"0x1::aptos_coin::AptosCoin\"\n    MoveTypeId:\n      title: Move Type ID\n      type: string\n      pattern: '^(bool|u8|u64|u128|address|signer|vector\u003c.+\u003e|0x[0-9a-zA-Z:_\u003c, \u003e]+|^\u0026(mut )?.+$|T\\d+)$'\n      description: |\n        String representation of an on-chain Move type identifier defined by the Move language.\n\n        Values:\n          - bool\n          - u8\n          - u64\n          - u128\n          - address\n          - signer\n          - vector: `vector\u003c{non-reference MoveTypeId}\u003e`\n          - struct: `{address}::{module_name}::{struct_name}::\u003c{generic types}\u003e`\n          - reference: immutable `\u0026` and mutable `\u0026mut` references.\n          - generic_type_parameter: it is always start with `T` and following an index number,\n            which is the position of the generic type parameter in the `struct` or\n            `function` generic type parameters definition.\n\n        Vector type value examples:\n          * `vector\u003cu8\u003e`\n          * `vector\u003cvector\u003cu64\u003e\u003e`\n          * `vector\u003c0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\u003e`\n\n        Struct type value examples:\n          * `0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e`\n          * `0x1::account::Account`\n\n        Reference type value examples:\n          * `\u0026signer`\n          * `\u0026mut address`\n          * `\u0026mut vector\u003cu8\u003e`\n\n      example: \"0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\"\n    MoveStructTagId:\n      title: Move Struct Tag ID\n      type: string\n      format: move_type\n      pattern: '^0x[0-9a-zA-Z:_\u003c\u003e]+$'\n      description: |\n        String representation of an on-chain Move struct type.\n\n        It is a combination of:\n          1. `Move module address`, `module name` and `struct name` joined by `::`.\n          2. `struct generic type parameters` joined by `, `.\n\n        Examples:\n          * `0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e`\n          * `0x1::account::Account`\n\n        Note:\n          1. Empty chars should be ignored when comparing 2 struct tag ids.\n          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n        See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.\n      example: \"0x1::coin::CoinStore\u003c0x1::aptos_coin::AptosCoin\u003e\"\n    MoveModule:\n      title: Move Module\n      type: object\n      required:\n        - bytecode\n      properties:\n        bytecode:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        abi:\n          $ref: '#/components/schemas/MoveModuleABI'\n    MoveModuleABI:\n      title: Move Module ABI\n      type: object\n      description: |\n        Move Module ABI is JSON representation of Move module binary interface.\n      required:\n        - address\n        - name\n        - friends\n        - exposed_functions\n        - structs\n      properties:\n        address:\n          $ref: '#/components/schemas/Address'\n        name:\n          type: string\n          example: \"Aptos\"\n        friends:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveModuleId'\n        exposed_functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveFunction'\n        structs:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveStruct'\n    MoveStruct:\n      title: Move Struct\n      type: object\n      required:\n        - name\n        - is_native\n        - abilities\n        - generic_type_params\n        - fields\n      properties:\n        name:\n          type: string\n        is_native:\n          type: boolean\n        abilities:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveAbility'\n        generic_type_params:\n          type: array\n          items:\n            type: object\n            required:\n              - constraints\n              - is_phantom\n            properties:\n              constraints:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MoveAbility'\n              is_phantom:\n                type: boolean\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveStructField'\n      example:\n        name: \"Balance\"\n        is_native: false\n        abilities:\n          - \"key\"\n        generic_type_params:\n          - constraints: [ ]\n            is_phantom: true\n        fields:\n          - name: \"coin\"\n            type: \"0x1::aptos_coin::AptosCoin\"\n    MoveStructField:\n      title: Move Struct Field\n      type: object\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/MoveTypeId'\n      example:\n        name: \"value\"\n        type: \"u64\"\n    MoveFunction:\n      title: Move Function\n      type: object\n      required:\n        - name\n        - visibility\n        - generic_type_params\n        - params\n        - return\n      properties:\n        name:\n          type: string\n          description: Move function name\n        visibility:\n          type: string\n          enum:\n            - public\n            - script\n            - friend\n        generic_type_params:\n          type: array\n          items:\n            type: \"object\"\n            required:\n              - constraints\n            properties:\n              constraints:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MoveAbility'\n        params:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveTypeId'\n        return:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveTypeId'\n      example:\n        name: \"peer_to_peer_with_metadata\"\n        visibility: \"script\"\n        generic_type_params:\n          - constraints: [ ]\n        params:\n          - \"signer\"\n          - \"address\"\n          - \"u64\"\n          - \"vector\u003cu8\u003e\"\n          - \"vector\u003cu8\u003e\"\n        return: [ ]\n    MoveAbility:\n      title: Move Ability\n      type: string\n      enum:\n        - copy\n        - drop\n        - store\n        - key\n      description: |\n        Abilities are a typing feature in Move that control what actions are permissible for values of a given type.\n\n        See [doc](https://diem.github.io/move/abilities.html) for more details.\n      example: \"key\"\n    MoveModuleId:\n      title: Move Module ID\n      type: string\n      description: |\n        Move module id is a string representation of Move module.\n\n        Format: \"{address}::{module name}\"\n\n        `address` should be hex-encoded 16 bytes account address\n        that is prefixed with `0x` and leading zeros are trimmed.\n\n        Module name is case-sensitive.\n\n        See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n      example: \"0x1::aptos\"\n    UserTransactionRequest:\n      title: User Transaction Request\n      type: object\n      required:\n        - sender\n        - sequence_number\n        - max_gas_amount\n        - gas_unit_price\n        - expiration_timestamp_secs\n        - payload\n      properties:\n        sender:\n          $ref: '#/components/schemas/Address'\n        sequence_number:\n          $ref: '#/components/schemas/Uint64'\n        max_gas_amount:\n          $ref: '#/components/schemas/Uint64'\n        gas_unit_price:\n          $ref: '#/components/schemas/Uint64'\n        gas_currency_code:\n          type: string\n          example: \"XDX\"\n        expiration_timestamp_secs:\n          $ref: '#/components/schemas/TimestampSec'\n        payload:\n          $ref: '#/components/schemas/TransactionPayload'\n    UserCreateSigningMessageRequest:\n      title: User Create Signing Message Request\n      allOf:\n        - $ref: '#/components/schemas/UserTransactionRequest'\n        - type: object\n          properties:\n            secondary_signers:\n              type: array\n              items:\n                $ref: '#/components/schemas/Address'\n    UserTransactionSignature:\n      title: User Transaction Signature\n      type: object\n      required:\n        - signature\n      description: |\n        This schema is used for appending `signature` field to another schema.\n      properties:\n        signature:\n          $ref: '#/components/schemas/TransactionSignature'\n    Transaction:\n      oneOf:\n        - $ref: '#/components/schemas/PendingTransaction'\n        - $ref: '#/components/schemas/GenesisTransaction'\n        - $ref: '#/components/schemas/UserTransaction'\n        - $ref: '#/components/schemas/BlockMetadataTransaction'\n        - $ref: '#/components/schemas/StateCheckpointTransaction'\n      discriminator:\n        propertyName: type\n        mapping:\n          pending_transaction: '#/components/schemas/PendingTransaction'\n          genesis_transaction: '#/components/schemas/GenesisTransaction'\n          user_transaction: '#/components/schemas/UserTransaction'\n          block_metadata_transaction: '#/components/schemas/BlockMetadataTransaction'\n          state_checkpoint_transaction: '#/components/schemas/StateCheckpointTransaction'\n    SubmitTransactionRequest:\n      title: Submit Transaction Request\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/UserTransactionRequest'\n        - $ref: '#/components/schemas/UserTransactionSignature'\n    PendingTransaction:\n      title: Pending Transaction\n      type: object\n      allOf:\n        - required:\n            - type\n            - hash\n          properties:\n            type:\n              type: string\n              example: \"pending_transaction\"\n            hash:\n              $ref: '#/components/schemas/HexEncodedBytes'\n        - $ref: '#/components/schemas/UserTransactionRequest'\n        - $ref: '#/components/schemas/UserTransactionSignature'\n    OnChainTransaction:\n      title: On-chain Transaction\n      oneOf:\n        - $ref: '#/components/schemas/GenesisTransaction'\n        - $ref: '#/components/schemas/UserTransaction'\n        - $ref: '#/components/schemas/BlockMetadataTransaction'\n        - $ref: '#/components/schemas/StateCheckpointTransaction'\n      discriminator:\n        propertyName: type\n        mapping:\n          genesis_transaction: '#/components/schemas/GenesisTransaction'\n          user_transaction: '#/components/schemas/UserTransaction'\n          block_metadata_transaction: '#/components/schemas/BlockMetadataTransaction'\n          state_checkpoint_transaction: '#/components/schemas/StateCheckpointTransaction'\n    OnChainTransactionInfo:\n      title: On-chain transaction information\n      type: object\n      required:\n        - version\n        - hash\n        - state_root_hash\n        - event_root_hash\n        - gas_used\n        - success\n        - vm_status\n        - accumulator_root_hash\n        - changes\n      properties:\n        version:\n          $ref: '#/components/schemas/Uint64'\n        hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        state_root_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        event_root_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        gas_used:\n          $ref: '#/components/schemas/Uint64'\n        success:\n          type: boolean\n          description: |\n            Transaction execution result (success: true, failure: false).\n            See `vm_status` for human readable error message from Aptos VM.\n        vm_status:\n          type: string\n          description: |\n            Human readable transaction execution result message from Aptos VM.\n        accumulator_root_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        changes:\n          type: array\n          items:\n            $ref: '#/components/schemas/WriteSetChange'\n    UserTransaction:\n      title: User Transaction\n      type: object\n      allOf:\n        - required:\n            - type\n            - events\n            - timestamp\n          properties:\n            type:\n              type: string\n              example: \"user_transaction\"\n            events:\n              type: array\n              items:\n                $ref: '#/components/schemas/Event'\n            timestamp:\n              $ref: '#/components/schemas/TimestampUsec'\n        - $ref: '#/components/schemas/UserTransactionRequest'\n        - $ref: '#/components/schemas/UserTransactionSignature'\n        - $ref: '#/components/schemas/OnChainTransactionInfo'\n    BlockMetadataTransaction:\n      title: Block Metadata Transaction\n      type: object\n      allOf:\n        - required:\n            - type\n            - id\n            - round\n            - previous_block_votes\n            - proposer\n            - timestamp\n          properties:\n            type:\n              type: string\n              example: \"block_metadata_transaction\"\n            id:\n              $ref: '#/components/schemas/HexEncodedBytes'\n            round:\n              $ref: '#/components/schemas/Uint64'\n            previous_block_votes:\n              type: array\n              items:\n                $ref: '#/components/schemas/Address'\n            proposer:\n              $ref: '#/components/schemas/Address'\n            timestamp:\n              $ref: '#/components/schemas/TimestampUsec'\n        - $ref: '#/components/schemas/OnChainTransactionInfo'\n    GenesisTransaction:\n      title: Genesis Transaction\n      type: object\n      allOf:\n        - required:\n            - type\n            - events\n            - payload\n          properties:\n            type:\n              type: string\n              example: \"genesis_transaction\"\n            events:\n              type: array\n              items:\n                $ref: '#/components/schemas/Event'\n            payload:\n              $ref: '#/components/schemas/WriteSetPayload'\n        - $ref: '#/components/schemas/OnChainTransactionInfo'\n    StateCheckpointTransaction:\n      title: State Checkpoint Transaction\n      type: object\n      allOf:\n        - required:\n            - type\n            - timestamp\n          properties:\n            type:\n              type: string\n              example: \"state_checkpoint_transaction\"\n            timestamp:\n              $ref: '#/components/schemas/TimestampUsec'\n        - $ref: '#/components/schemas/OnChainTransactionInfo'\n    TransactionPayload:\n      title: Transaction Payload\n      oneOf:\n        - $ref: '#/components/schemas/ScriptFunctionPayload'\n        - $ref: '#/components/schemas/ScriptPayload'\n        - $ref: '#/components/schemas/ModuleBundlePayload'\n        - $ref: '#/components/schemas/WriteSetPayload'\n      discriminator:\n        propertyName: type\n        mapping:\n          script_function_payload: '#/components/schemas/ScriptFunctionPayload'\n          script_payload: '#/components/schemas/ScriptPayload'\n          module_bundle_payload: '#/components/schemas/ModuleBundlePayload'\n          write_set_payload: '#/components/schemas/WriteSetPayload'\n    ScriptFunctionPayload:\n      title: Script Function Payload\n      type: object\n      required:\n        - type\n        - function\n        - type_arguments\n        - arguments\n      properties:\n        type:\n          type: string\n        function:\n          $ref: '#/components/schemas/ScriptFunctionId'\n        type_arguments:\n          type: array\n          description: Generic type arguments required by the script function.\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n        arguments:\n          type: array\n          description: The script function arguments.\n          items:\n            $ref: '#/components/schemas/MoveValue'\n      example:\n        type: \"script_function_payload\"\n        function: \"0x1::payment_scripts::peer_to_peer_with_metadata\"\n        type_arguments:\n          - \"0x1::xdx::XDX\"\n        arguments:\n          - \"0x1668f6be25668c1a17cd8caf6b8d2f25\"\n          - \"2021000000\"\n          - \"0x\"\n          - \"0x\"\n    ScriptFunctionId:\n      title: Script Function ID\n      type: string\n      description: |\n        Script function id is string representation of a script function defined on-chain.\n\n        Format: `{address}::{module name}::{function name}`\n\n        Both `module name` and `function name` are case-sensitive.\n      example: \"0x1::payment_scripts::peer_to_peer_with_metadata\"\n    ScriptPayload:\n      title: Script Payload\n      type: object\n      required:\n        - type\n        - code\n        - type_arguments\n        - arguments\n      properties:\n        type:\n          type: string\n          example: \"script_payload\"\n        code:\n          $ref: '#/components/schemas/MoveScript'\n        type_arguments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n        arguments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveValue'\n    ModuleBundlePayload:\n      title: Module Bundle Payload\n      type: object\n      required:\n        - type\n        - modules\n      properties:\n        type:\n          type: string\n          example: \"module_bundle_payload\"\n        modules:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveModule'\n    WriteSetPayload:\n      title: WriteSet Payload\n      type: object\n      required:\n        - type\n        - write_set\n      properties:\n        type:\n          type: string\n          example: \"write_set_payload\"\n        write_set:\n          $ref: '#/components/schemas/WriteSet'\n    WriteSet:\n      title: WriteSet\n      oneOf:\n        - $ref: '#/components/schemas/ScriptWriteSet'\n        - $ref: '#/components/schemas/DirectWriteSet'\n      discriminator:\n        propertyName: type\n        mapping:\n          script_write_set: '#/components/schemas/ScriptWriteSet'\n          direct_write_set: '#/components/schemas/DirectWriteSet'\n    ScriptWriteSet:\n      title: Script WriteSet\n      type: object\n      required:\n        - type\n        - execute_as\n        - script\n      properties:\n        type:\n          type: string\n          example: \"script_write_set\"\n        execute_as:\n          $ref: '#/components/schemas/Address'\n        script:\n          $ref: '#/components/schemas/Script'\n    DirectWriteSet:\n      title: Direct WriteSet\n      type: object\n      required:\n        - type\n        - changes\n        - events\n      properties:\n        type:\n          type: string\n          example: \"direct_write_set\"\n        changes:\n          type: array\n          items:\n            $ref: '#/components/schemas/WriteSetChange'\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/Event'\n    WriteSetChange:\n      oneOf:\n        - $ref: '#/components/schemas/DeleteModule'\n        - $ref: '#/components/schemas/DeleteResource'\n        - $ref: '#/components/schemas/DeleteTableItem'\n        - $ref: '#/components/schemas/WriteModule'\n        - $ref: '#/components/schemas/WriteResource'\n        - $ref: '#/components/schemas/WriteTableItem'\n      discriminator:\n        propertyName: type\n        mapping:\n          delete_module: '#/components/schemas/DeleteModule'\n          delete_resource: '#/components/schemas/DeleteResource'\n          delete_table_item: '#/components/schemas/DeleteTableItem'\n          write_module: '#/components/schemas/WriteModule'\n          write_resource: '#/components/schemas/WriteResource'\n          write_table_item: '#/components/schemas/WriteTableItem'\n    DeleteModule:\n      title: Delete Module\n      type: object\n      required:\n        - type\n        - state_key_hash\n        - address\n        - module\n      properties:\n        type:\n          type: string\n          example: \"delete_module\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        address:\n          $ref: '#/components/schemas/Address'\n        module:\n          $ref: '#/components/schemas/MoveModuleId'\n    DeleteResource:\n      title: Delete Resource\n      type: object\n      description: Delete account resource change.\n      required:\n        - type\n        - state_key_hash\n        - address\n        - resource\n      properties:\n        type:\n          type: string\n          example: \"delete_resource\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        address:\n          $ref: '#/components/schemas/Address'\n        resource:\n          $ref: '#/components/schemas/MoveStructTagId'\n    DeleteTableItem:\n      title: Delete Table Item\n      type: object\n      description: Delete table item change.\n      required:\n        - type\n        - state_key_hash\n        - data\n      properties:\n        type:\n          type: string\n          example: \"delete_table_item\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        data:\n          title: Table item deletion\n          type: object\n          required:\n            - handle\n            - key\n          properties:\n            handle:\n              $ref: '#/components/schemas/HexEncodedBytes'\n            key:\n              $ref: '#/components/schemas/HexEncodedBytes'\n    WriteModule:\n      title: Write Module\n      type: object\n      description: Write move module\n      required:\n        - type\n        - state_key_hash\n        - address\n        - data\n      properties:\n        type:\n          type: string\n          example: \"write_module\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        address:\n          $ref: '#/components/schemas/Address'\n        data:\n          $ref: '#/components/schemas/MoveModule'\n    WriteResource:\n      title: Write Resource\n      type: object\n      description: Write account resource\n      required:\n        - type\n        - state_key_hash\n        - address\n        - data\n      properties:\n        type:\n          type: string\n          example: \"write_resource\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        address:\n          $ref: '#/components/schemas/Address'\n        data:\n          $ref: '#/components/schemas/AccountResource'\n    WriteTableItem:\n      title: Write Table Item\n      type: object\n      description: Write table item\n      required:\n        - type\n        - state_key_hash\n        - handle\n        - key\n        - value\n      properties:\n        type:\n          type: string\n          example: \"write_table_item\"\n        state_key_hash:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        handle:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        key:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        value:\n          $ref: '#/components/schemas/HexEncodedBytes'\n    Script:\n      title: Script\n      type: object\n      required:\n        - code\n        - type_arguments\n        - arguments\n      properties:\n        code:\n          $ref: '#/components/schemas/MoveScript'\n        type_arguments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n        arguments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MoveValue'\n    MoveScript:\n      title: Move Script\n      type: object\n      required:\n        - bytecode\n      properties:\n        bytecode:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        abi:\n          $ref: '#/components/schemas/MoveFunction'\n    MoveValue:\n      title: Move Value\n      description: |\n        Move `bool` type value is serialized into `boolean`.\n\n        Move `u8` type value is serialized into `integer`.\n\n        Move `u64` and `u128` type value is serialized into `string`.\n\n        Move `address` type value(16 bytes Aptos account address) is serialized into\n        hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.\n\n        For example:\n          * `0x1`\n          * `0x1668f6be25668c1a17cd8caf6b8d2f25`\n\n        Move `vector` type value is serialized into `array`, except `vector\u003cu8\u003e` which is\n        serialized into hex-encoded string with `0x` prefix.\n\n        For example:\n          * `vector\u003cu64\u003e{255, 255}` =\u003e `[\"255\", \"255\"]`\n          * `vector\u003cu8\u003e{255, 255}` =\u003e `0xffff`\n\n        Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):\n\n          ```json\n          {\n            field1_name: field1_value,\n            field2_name: field2_value,\n            ......\n          }\n          ```\n\n        For example:\n          `{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }`\n\n        **Special serialization for Move stdlib types:**\n\n        * [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md) is serialized into `string`. For example, struct value `0x1::string::String{bytes: b\"hello world\"}` is serialized as `\"hello world\"` in JSON.\n\n      example: \"3344000000\"\n    Event:\n      title: Event\n      type: object\n      required:\n        - key\n        - sequence_number\n        - type\n        - data\n      description: |\n        Event `key` and `sequence_number` are global identifier of the event.\n\n        Event `sequence_number` starts from 0 for each event key.\n\n        Event `type` is the type information of the event `data`, you can use the `type`\n        to decode the `data` JSON.\n      properties:\n        key:\n          $ref: '#/components/schemas/EventKey'\n        sequence_number:\n          $ref: '#/components/schemas/EventSequenceNumber'\n        type:\n          $ref: '#/components/schemas/MoveTypeTagId'\n        data:\n          $ref: '#/components/schemas/MoveValue'\n      example:\n        key: \"0x00000000000000000000000000000000000000000a550c18\"\n        sequence_number: \"23\"\n        type: \"0x1::account::CreateAccountEvent\"\n        data:\n          created: \"0xa550c18\"\n          role_id: \"0\"\n    TransactionSignature:\n      title: Transaction Signature\n      oneOf:\n        - $ref: '#/components/schemas/Ed25519Signature'\n        - $ref: '#/components/schemas/MultiEd25519Signature'\n        - $ref: '#/components/schemas/MultiAgentSignature'\n      discriminator:\n        propertyName: type\n        mapping:\n          ed25519_signature: '#/components/schemas/Ed25519Signature'\n          multi_ed25519_signature: '#/components/schemas/MultiEd25519Signature'\n          multi_agent_signature: '#/components/schemas/MultiAgentSignature'\n    Ed25519Signature:\n      title: Ed25519 Signature\n      type: object\n      description: |\n        Please refer to https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/crypto#signature-and-verification for\n        more details.\n      required:\n        - type\n        - public_key\n        - signature\n      properties:\n        type:\n          type: string\n          example: \"ed25519_signature\"\n        public_key:\n          $ref: '#/components/schemas/HexEncodedBytes'\n        signature:\n          $ref: '#/components/schemas/HexEncodedBytes'\n    MultiEd25519Signature:\n      title: Multi-ed25519 Signature\n      type: object\n      description: |\n        Multi ed25519 signature, please refer to https://github.com/aptos-labs/aptos-core/tree/main/documentation/specifications/crypto#multi-signatures for more details.\n      required:\n        - type\n        - public_keys\n        - signatures\n        - threshold\n        - bitmap\n      properties:\n        type:\n          type: string\n          example: \"multi_ed25519_signature\"\n        public_keys:\n          type: array\n          description: all public keys of the sender account\n          items:\n            $ref: '#/components/schemas/HexEncodedBytes'\n        signatures:\n          type: array\n          description: signatures created based on the `threshold`\n          items:\n            $ref: '#/components/schemas/HexEncodedBytes'\n        threshold:\n          type: integer\n          description: The threshold of the multi ed25519 account key.\n        bitmap:\n          $ref: '#/components/schemas/HexEncodedBytes'\n    MultiAgentSignature:\n      title: Multi-agent Signature\n      type: object\n      description: |\n        Multi agent signature, please refer to TBD.\n      required:\n        - type\n        - sender\n        - secondary_signer_addresses\n        - secondary_signers\n      properties:\n        type:\n          type: string\n          example: \"multi_agent_signature\"\n        sender:\n          $ref: '#/components/schemas/AccountSignature'\n        secondary_signer_addresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n        secondary_signers:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccountSignature'\n    AccountSignature:\n      title: Account Signature\n      oneOf:\n        - $ref: '#/components/schemas/Ed25519Signature'\n        - $ref: '#/components/schemas/MultiEd25519Signature'\n      discriminator:\n        propertyName: type\n        mapping:\n          ed25519_signature: '#/components/schemas/Ed25519Signature'\n          multi_ed25519_signature: '#/components/schemas/MultiEd25519Signature'\n    TableItemRequest:\n      title: Table item request\n      type: object\n      required:\n        - key_type\n        - value_type\n        - key\n      properties:\n        key_type:\n          $ref: '#/components/schemas/MoveTypeId'\n        value_type:\n          $ref: '#/components/schemas/MoveTypeId'\n        key:\n          $ref: '#/components/schemas/MoveValue'\n    TokenData:\n      title: Token Data\n      type: object\n      required:\n        - collection\n        - description\n        - name\n        - supply\n        - uri\n      properties:\n        collection:\n          type: string\n          description: Unique name within this creator's account for this Token's collection\n        description:\n          type: string\n          description: Description of Token\n        name:\n          type: string\n          description: Name of Token\n        maximum:\n          type: integer\n          description: Optional maximum number of this Token\n        supply:\n          type: integer\n          description: Total number of this type of Token\n        uri:\n          type: string\n          description: URL for additional information / media\n    TokenDataId:\n      type: object\n      required:\n        - creator\n        - collection\n        - name\n      properties:\n        creator:\n          type: string\n          description: Token creator address\n        collection:\n          type: string\n          description: Unique name within this creator's account for this Token's collection\n        name:\n          type: string\n          description: Name of Token\n    TokenId:\n      type: object\n      required:\n        - token_data_id\n        - property_version\n      properties:\n        token_data_id:\n          $ref: '#/components/schemas/TokenDataId'\n        property_version:\n          type: string\n          description: version number of the property map\n    Token:\n      type: object\n      required:\n        - id\n        - amount\n      properties:\n        id:\n          $ref: '#/components/schemas/TokenId'\n        amount:\n          type: integer\n      ",
			"canonicalURL": "/github.com/apscan/indexer@a3080c945e432b47fe7e7ec274f09c5536e1ffd8/-/blob/api/doc/v0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/apscan/indexer/blob/a3080c945e432b47fe7e7ec274f09c5536e1ffd8/api/doc/v0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/accounts/{address}/transactions\": get: responses: code 200: contents: media: \"application/json\": generate schema: item: oneOf: discriminator: unable to map \"user_transaction\" to \"https://raw.githubusercontent.com/apscan/indexer/a3080c945e432b47fe7e7ec274f09c5536e1ffd8/api/doc/v0/openapi.yaml#/components/schemas/UserTransaction\""
}