{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ICRAR/daliuge"
		},
		"file": {
			"name": "manager_common.yaml",
			"size": 0,
			"path": "OpenAPI/manager_common.yaml",
			"byteSize": 8929,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: DALiuGE Managers\n  license:\n    name: LGPLv2+\n  description: Entry points common to all levels of managers\n  contact: {}\npaths:\n  /api/stop:\n    post:\n      operationId: stopManager\n      responses:\n        '200':\n          description: OK\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      description: Stop the manager\n      tags: []\n  /api/sessions:\n    post:\n      description: Create a new session\n      operationId: createSession\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionId:\n                  type: string\n              required:\n                - sessionId\n        description: Session ID\n      parameters: []\n      tags: []\n    get:\n      description: Get the list of sessions on this Manager\n      operationId: getSessions\n      responses:\n        '200':\n          description: The list of sessions on this Manager\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/session_information'\n              examples: {}\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n  '/api/sessions/{sessionId}':\n    get:\n      description: Returns the main information of session `sessionId`\n      operationId: getSessionInformation\n      responses:\n        '200':\n          description: The main information of session `sessionId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/session'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    delete:\n      description: Removes session `sessionId`\n      operationId: destroySession\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n        description: ''\n  '/api/sessions/{sessionId}/status':\n    get:\n      description: Returns the status of `sessionId`\n      operationId: getSessionStatus\n      responses:\n        '200':\n          description: The status of `sessionId`\n          content:\n            application/json:\n              schema:\n                type: integer\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/deploy':\n    post:\n      description: Deploys session `sessionId`\n      operationId: deploySession\n      responses:\n        '200':\n          description: OK\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: completed\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/cancel':\n    post:\n      description: Cancels session `sessionId`\n      operationId: cancelSession\n      responses:\n        '200':\n          description: OK\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/graph':\n    get:\n      description: Returns the physical graph of session `sessionId`\n      operationId: getGraph\n      responses:\n        '200':\n          description: The physical graph of session `sessionId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/physical_graph'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/graph/size':\n    get:\n      description: Returns the size of the graph of session `sessionId`\n      operationId: getGraphSize\n      responses:\n        '200':\n          description: The size of the graph of session `sessionId`\n          content:\n            application/json:\n              schema:\n                type: integer\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/graph/status':\n    get:\n      description: Returns the status graph of session `sessionId`\n      operationId: getGraphStatus\n      responses:\n        '200':\n          description: Returns status graph of session `sessionId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/physical_graph_status'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\n  '/api/sessions/{sessionId}/graph/append':\n    post:\n      description: Appends a physical graph to session `sessionId`\n      operationId: addGraphParts\n      responses:\n        '200':\n          description: OK\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/physical_graph'\n        description: The graph content to append\n      tags: []\n    parameters:\n      - schema:\n          type: string\n        name: sessionId\n        in: path\n        required: true\ncomponents:\n  schemas:\n    error:\n      description: An error raised by the application\n    node_session_information:\n      title: node_session_information\n      type: array\n      items:\n        type: object\n        properties:\n          sessionId:\n            type: string\n          status:\n            type: integer\n          size:\n            type: integer\n      description: High-level information for a given session at the node level\n    composite_session_information:\n      title: composite_session_information\n      type: array\n      description: High-level information for a given session at the Data Island and Master Manager levels\n      items:\n        type: object\n        properties:\n          sessionId:\n            type: string\n          status:\n            type: object\n          size:\n            type: object\n    session_information:\n      title: session_information\n      oneOf:\n        - $ref: '#/components/schemas/composite_session_information'\n        - $ref: '#/components/schemas/node_session_information'\n      description: Generic session information type\n    session:\n      title: session\n      type: object\n      properties:\n        status:\n          type: string\n        graph:\n          $ref: '#/components/schemas/physical_graph'\n    physical_graph:\n      title: physical_graph\n      type: object\n      description: A DALiuGE physical graph\n    physical_graph_status:\n      type: object\n      title: physical_graph_status\n      description: A structure holding status information for a physical graph\n  securitySchemes: {}\nservers: []\ntags: []\n\n"
		}
	},
	"Error": "buildIR: make ir: anonymous type name conflict: \"ErrorStatusCode\""
}