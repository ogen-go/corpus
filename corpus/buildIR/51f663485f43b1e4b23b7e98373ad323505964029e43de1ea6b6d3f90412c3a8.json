{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ansforge/esignsante"
		},
		"file": {
			"name": "esignsante-ws-api-doc.yaml",
			"size": 0,
			"path": "esignsante-ws-api-doc.yaml",
			"byteSize": 72512,
			"content": "openapi: 3.0.0\r\n# Added by API Auto Mocking Plugin\r\nservers:\r\n-  description: SwaggerHub API Auto Mocking\r\n   url: https://gateway.api.esante.gouv.fr{basePath}/\r\n   variables:\r\n      port:\r\n         enum:\r\n         - '443'\r\n         default: '443'\r\n      basePath:\r\n         default: /\r\ninfo:\r\n   description: \"API du composant eSignSante. \u003cbr\u003eCe composant dit de \\\"signature\\\" mutualise et homogénéise la mise en oeuvre\\\r\n      \\ des besoins autour de la signature. \u003cbr\u003eIl permet de signer des documents ainsi que\\\r\n      \\ de vérifier la validité d'une signature ou d'un certificat.    \u003cbr\u003e\"\r\n   version: 2.5.0.13\r\n   title: eSignSante\r\n   contact:\r\n      email: esignsante@asipsante.fr\r\ntags:\r\n-  name: client\r\n   description: Ressources offertes au client.\r\n-  name: ca\r\n   description: Ressource pour obtenir la liste des autorités de certification utilisées pour signer ou vérifier une signature\r\n      ou un certificat.\r\n-  name: configurations\r\n   description: Ressource permettant de lister les différentes configurations disponibles au client.\r\n-  name: xmldsig\r\n   description: Ressources permettant de signer un document au format XMLDsig et/ou de vérifier un flux signé en XMLDsig avec\r\n      ou sans preuve.\r\n-  name: xades\r\n   description: Ressources permettant de signer un document au format Xades Baseline B et/ou de vérifier un flux signé en\r\n      XADES Baseline B avec ou sans preuve.\r\n-  name: pades\r\n   description: Ressources permettant de signer un document au format Pades Baseline B et/ou de vérifier un flux signé en\r\n      PADES Baseline B avec ou sans preuve.\r\n-  name: certificats\r\n   description: Ressources permettant de vérifier un certificat avec ou sans preuve.\r\npaths:\r\n   /:\r\n      get:\r\n         summary: Liste des opérations disponibles.\r\n         operationId: getOperations\r\n         description: \"Opération qui permet au client de lister les opérations offertes par le composant ANS Sign.      \\\r\n            \\         \u003cbr\u003e\"\r\n         tags:\r\n         - client\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: array\r\n                        items:\r\n                           type: string\r\n                           example: \"/ \u003cbr\u003e/configurations \u003cbr\u003e/ca \u003cbr\u003e/signatures/xmldsig \u003cbr\u003e/signatures/xmldsigwithproof \u003cbr\u003e/signatures/xadesbaselineb\\\r\n                              \\ \u003cbr\u003e/signatures/xadesbaselinebwithproof \u003cbr\u003e/signatures/padesbaselineb \u003cbr\u003e/signatures/padesbaselinebwithproof\\\r\n                              \\ \u003cbr\u003e/validation/signatures/xmldsig \u003cbr\u003e/validation/signatures/xmldsigwithproof\\\r\n                              \\ \u003cbr\u003e/validation/signatures/xadesbaselineb \u003cbr\u003e/validation/signatures/xadesbaselinebwithproof \u003cbr\u003e\\\r\n                              /validation/certificats \u003cbr\u003e/validation/certificatswithproof\"\r\n            '400':\r\n               description: Requête mal formée.\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n   /secrets:\r\n      post:\r\n         tags:\r\n         - secrets\r\n         summary: Génération d'un Hash sécurisé à partir du secret\r\n         operationId: generateSecureSecretHash\r\n         description: |\r\n            L'opération permet au client de générer un Hash à partir du secret.\r\n         requestBody:\r\n            content:\r\n               application/json:\r\n                  schema:\r\n                     $ref: '#/components/schemas/Secret'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Hash du secret généré.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/HashedSecret'\r\n   /configurations:\r\n      get:\r\n         summary: Liste des configurations disponibles.\r\n         operationId: getConfigurations\r\n         description: \"Opération qui permet au client de récupérer les configurations disponibles afin qu'il puisse utiliser\\\r\n            \\ la configuration qui correspond à l'usage souhaité.   \u003cbr\u003e\"\r\n         tags:\r\n         - configurations\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/Conf'\r\n                        example:\r\n                           signature:\r\n                           -  Confsign:\r\n                                 idSignConf: 1\r\n                                 description: Fichier de configuration pour la signature enveloppante de document (type de\r\n                                    document libre).\r\n                                 signaturePackaging: ENVELOPING\r\n                                 digestAlgorithm: SHA256\r\n                                 canonicalisationAlgorithm: http://www.w3.org/2001/10/xml-exc-c14n#\r\n                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR # #\r\n                           -  Confsign:\r\n                                 idSignConf: 2\r\n                                 description: Fichier de configuration pour la signature enveloppée d'un document XML.\r\n                                 signaturePackaging: ENVELOPED\r\n                                 digestAlgorithm: SHA1\r\n                                 canonicalisationAlgorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315\r\n                                 dn: CN=asipsign.flux.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),\r\n                                    C=FR\r\n                           signatureVerification:\r\n                           -  ConfVerifSign:\r\n                                 idVerifSignConf: 1\r\n                                 description: Configuration pour vérifier les signatures (jeux de règles complet).\r\n                                 rules:\r\n                                 -  rule:\r\n                                       id: SignatureCertificatValide\r\n                                       description: Vérification de la validité de la signature du certificat.\r\n                                 -  rule:\r\n                                       id: ExistenceBaliseSigningTime\r\n                                       description: La balise \"SigningTime\" existe dans la signature.\r\n                                 -  rule:\r\n                                       id: ExistenceDuCertificatDeSignature\r\n                                       description: Le certificat utilisé pour la signature existe dans la signature.\r\n                                 -  rule:\r\n                                       id: ExpirationCertificat\r\n                                       description: Le certificat de signature n'est pas expiré.\r\n                                 -  rule:\r\n                                       id: NonRepudiation\r\n                                       description: L'usage de la clé du certificat correspond é un usage de signature électronique\r\n                                          et de non répudiation.\r\n                                 -  rule:\r\n                                       id: RevocationCertificat\r\n                                       description: Le certificat de signature n'est pas révoqué.\r\n                                 -  rule:\r\n                                       id: SignatureNonVide\r\n                                       description: La signature existe et elle n'est pas vide.\r\n                                 -  rule:\r\n                                       id: TrustedCertificat\r\n# Cette règle est à vérifier (peut-être incluse dans ValidationSignature)\r\n                                       description: L'Autorité de Certification est reconnue.\r\n                                 -  rule:\r\n                                       id: ValidationSignature\r\n                                       description: Le contenu de la signature est valide.\r\n#                                -  rule:\r\n#                                      id: FormatSignature\r\n#                                      description: Le format de la signature est valide.\r\n# Cette règle est à vérifier (peut-être incluse dans ValidationSignature)\r\n                           -  ConfVerifSign:\r\n                                 idVerifSignConf: 2\r\n                                 description: Configuration minimaliste pour vérifier les signatures (uniquement la signature\r\n                                    du certificat de signature).\r\n                                 rules:\r\n                                 -  rule:\r\n                                       id: SignatureCertificatValide\r\n                                       description: Vérification de la validité de la signature du certificat.\r\n                                 metaData:\r\n                                 - DATE_SIGNATURE\r\n                           certificatVerification:\r\n                           -  ConfVerifCert:\r\n                                 idVerifCertConf: 1\r\n                                 description: Configuration par défaut (toutes les règles activées) pour vérifier les certificats.\r\n                                 rules:\r\n                                 -  rule:\r\n                                       id: SignatureCertificatValide\r\n                                       description: Vérification de la validité de la signature du certificat.\r\n                                 -  rule:\r\n                                       id: ExpirationCertificat\r\n                                       description: Le certificat n'est pas expiré.\r\n                                 -  rule:\r\n                                       id: RevocationCertificat\r\n                                       description: Le certificat n'est pas révoqué.\r\n                                 -  rule:\r\n                                       id: TrustedCertificat\r\n                                       description: L'Autorité de Certification est reconnue.\r\n                           -  ConfVerifCert:\r\n                                 idVerifCertConf: 2\r\n                                 description: Configuration minimaliste pour vérifier les certificats (uniquement la validité\r\n                                    de la signature du certificat)\r\n                                 rules:\r\n                                 -  rule:\r\n                                       id: SignatureCertificatValide\r\n                                       description: Vérification de la validité de la signature du certificat.\r\n                                 metaData:\r\n                                 - DN_CERTIFICATE\r\n                           preuve:\r\n                           -  ConfProof:\r\n                                 idProofConf: 1\r\n                                 description: Configuration pour demander une preuve signée au format SHA1.\r\n                                 digestAlgorithm: SHA1\r\n                                 canonicalisationAlgorithm: http://www.w3.org/2001/10/xml-exc-c14n#\r\n                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR\r\n                           -  ConfProof:\r\n                                 idProofConf: 2\r\n                                 description: Configuration pour demander une preuve signée au format SHA256.\r\n                                 digestAlgorithm: SHA256 # #\r\n                                 canonicalisationAlgorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315\r\n                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR\r\n            '400':\r\n               description: Requête mal formée.\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n   /ca:\r\n      get:\r\n         summary: Liste des Autorités de Certification de confiance utilisées par la plateforme.\r\n         operationId: getCA\r\n         description: |\r\n            Opération qui permet au client de prendre connaissance des Autorités de Certification de confiance utilisées par la plateforme.\r\n         tags:\r\n         - ca\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: array\r\n                        items:\r\n                           type: string\r\n                        example:\r\n                        - CN=TEST AC IGC-SANTE ELEMENTAIRE ORGANISATIONS,OU=IGC-SANTE TEST,OU=0002 187512751,O=ASIP-SANTE,C=FR\r\n                        - CN=TEST AC RACINE IGC-SANTE ELEMENTAIRE,OU=IGC-SANTE TEST,OU=0002 187512751,O=ASIP-SANTE,C=FR\r\n            '400':\r\n               description: Requête mal formée\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n   /signatures/xmldsig:\r\n      post:\r\n         tags:\r\n         - xmldsig\r\n         summary: Signature d'un document au format XMLdsig\r\n         operationId: signatureXMLdsig\r\n         description: |\r\n            L'opération permet au client de signer un document au format XMLDsig-core-1.\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReport'\r\n                        example:\r\n                           erreurs: []\r\n                           docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  XML pour une signature enveloppée par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /signatures/xmldsigwithproof:\r\n      post:\r\n         tags:\r\n         - xmldsig\r\n         summary: Signature d'un document au format XMLdsig avec preuve\r\n         operationId: signatureXMLdsigWithProof\r\n         description: \"L'opération permet au client de signer un document au format XMLDsig-core-1 ainsi que de générer une\\\r\n            \\ preuve de vérification de signature. \u003cbr\u003eLe client peut demander la vérification des règles applicables suivantes:\u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;validité de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e   \\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;présence du certificat utilisé dans la signature; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage\\\r\n            \\ de la clé du certificat correspond à un usage de signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat\\\r\n            \\ de signature n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification\\\r\n            \\ est reconnue;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des\\\r\n            \\ métadonnées suivantes: \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e  \\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;le document original non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReportWithProof'\r\n                        example:\r\n                           Rapport signature valide:\r\n                              erreurs: []\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=asipsign.flux.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris\r\n                                    (75), C=FR\r\n                              -  typeMetadata: DOCUMENT_ORIGINAL_NON_SIGNE\r\n                                 message: uY29kaW5nPVwiVVRGLThcIj8+PGRv\r\n                              valide: true\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI\r\n                           Rapport signature invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN02\r\n                                 message: Le certificat n'a pas été émis par l'autorité de certification requise.\r\n                              -  codeErreur: ERSIGN05\r\n                                 message: Le certificat est expiré.\r\n                              metaData: []\r\n                              valide: false\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  XML pour une signature enveloppée par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /signatures/xadesbaselineb:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Signature d'un document au format Xades Baseline B.\r\n         operationId: signatureXades\r\n         description: |\r\n            L'opération permet au client de signer un document au format XADES Baseline B.\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReport'\r\n                        example:\r\n                           erreurs: []\r\n                           docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  XML pour une signature enveloppée par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /signatures/xadesbaselinebwithproof:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Signature d'un document au format Xades Baseline B avec preuve.\r\n         operationId: signatureXadesWithProof\r\n         description: \"L'opération permet au client de signer un document au format XADES Baseline B ainsi que de générer une\\\r\n            \\ preuve de vérification de signature.\u003cbr\u003e Le client peut demander la vérification des règles applicables suivantes:\u003cbr\u003e\\\r\n            \\  \u0026nbsp;\u0026nbsp;\u0026nbsp;validité de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\\\r\n            \\ présence du certificat utilisé dans la signature; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage\\\r\n            \\ de la clé du certificat correspond à un usage de signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat\\\r\n            \\ de signature n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification\\\r\n            \\ est reconnue;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des\\\r\n            \\ métadonnées suivantes: \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;le document original non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReportWithProof'\r\n                        example:\r\n                           Rapport Signature valide:\r\n                              erreurs: []\r\n                              metaData:\r\n                              -  typeMetadata: DATE_SIGNATURE\r\n                                 message: 2019-09-09T08:24:33Z\r\n                              -  typeMetadata: RAPPORT_DIAGNOSTIQUE\r\n                                 message: cmFwcG9ydCBkaWFnbm9zdGlxdWU=\r\n                              valide: true\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n                           Rapport Signature invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN01\r\n                                 message: Le certificat utilisé pour la signature n'a pas été trouvé dans la signature.\r\n                              metaData:\r\n                              -  typeMetadata: DATE_SIGNATURE\r\n                                 message: 2019-09-09T08:24:33Z\r\n                              valide: false\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  XML pour une signature enveloppée par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /signatures/padesbaselineb:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Signature d'un document PDF au format Pades Baseline B.\r\n         operationId: signaturePades\r\n         description: |\r\n            L'opération permet au client de signer un document au format PADES Baseline B.\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReport'\r\n                        example:\r\n                           erreurs: []\r\n                           docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  PDF par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /signatures/padesbaselinebwithproof:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Signature d'un document au format Pades Baseline B avec preuve.\r\n         operationId: signaturePadesWithProof\r\n         description: \"L'opération permet au client de signer un document au format PADES Baseline B ainsi que de générer une\\\r\n            \\ preuve de vérification de signature.\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/SignDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteSignatureReportWithProof'\r\n                        example:\r\n                           Rapport Signature valide:\r\n                              erreurs: []\r\n                              metaData:\r\n                              -  typeMetadata: DATE_SIGNATURE\r\n                                 message: 2019-09-09T08:24:33Z\r\n                              -  typeMetadata: RAPPORT_DIAGNOSTIQUE\r\n                                 message: cmFwcG9ydCBkaWFnbm9zdGlxdWU=\r\n                              valide: true\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n                           Rapport Signature invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN01\r\n                                 message: Le certificat utilisé pour la signature n'a pas été trouvé dans la signature.\r\n                              metaData:\r\n                              -  typeMetadata: DATE_SIGNATURE\r\n                                 message: 2019-09-09T08:24:33Z\r\n                              valide: false\r\n                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '401':\r\n               description: Une authentification est nécessaire pour accéder à la ressource (secret incorrect).\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format\r\n                  XML pour une signature enveloppée par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/signatures/xmldsig:\r\n      post:\r\n         tags:\r\n         - xmldsig\r\n         summary: Vérification de signature au format XMLdsig.\r\n         operationId: verifSignatureXMLdsig\r\n         description: \"L'opération permet au client de vérifier une signature au format XMLDsig-core-1. \u003cbr\u003e  Le client peut\\\r\n            \\ demander la vérification des règles applicables suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;validité de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;pré\\\r\n            sence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence du certificat utilisé dans la signature; \u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage de la clé du certificat correspond à un usage de\\\r\n            \\ signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une\\\r\n            \\ signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification est reconnue;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est\\\r\n            \\ valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des métadonnées suivantes: \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le document original non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifSignDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReport'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=asipsign.flux.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris\r\n                                    (75), C=FR\r\n                              valide: true\r\n                           Rapport de Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN05\r\n                                 message: Le certificat est expiré.\r\n                              -  codeErreur: ERSIGN06\r\n                                 message: Le certificat ne contient pas l'usage requis pour signer.\r\n                              valide: false\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur (vérifier que le document est au bon format XML).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/signatures/xmldsigwithproof:\r\n      post:\r\n         tags:\r\n         - xmldsig\r\n         summary: Vérification de signature au format XMLdsig avec preuve\r\n         operationId: verifSignatureXMLdsigWithProof\r\n         description: \"L'opération permet au client de vérifier une signature au format XMLDsig-core-1 ainsi que de générer une\\\r\n            \\ preuve de vérification. \u003cbr\u003e  Le client peut demander la vérification des règles applicables suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;validité\\\r\n            \\ de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence du\\\r\n            \\ certificat utilisé dans la signature; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage de la clé\\\r\n            \\ du certificat correspond à un usage de signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature\\\r\n            \\ n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification est reconnue;\u003cbr\u003e\\\r\n            \\  \u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des métadonnées suivantes:\\\r\n            \\ \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le document original\\\r\n            \\ non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifSignDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReportWithProof'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              valide: true\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n                           Rapport Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN10\r\n                                 message: Le fichier n'est pas signé.\r\n                              metaData:\r\n                              -  typeMetadata: DOCUMENT_ORIGINAL_NON_SIGNE\r\n                                 message: ZG9jdW1lbnQgbm9uIHNpZ27DqQ==\r\n                              valide: false\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur (vérifier que le document est au bon format XML).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/signatures/xadesbaselineb:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Vérification de signature au format Xades Baseline B.\r\n         operationId: verifSignatureXades\r\n         description: \"L'opération permet au client de vérifier une signature au format Xades Baseline B. \u003cbr\u003e  Le client peut\\\r\n            \\ demander la vérification des règles applicables suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;validité de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;Pré\\\r\n            sence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence du certificat utilisé dans la signature; \u003cbr\u003e\\\r\n            \\  \u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage de la clé du certificat correspond à un usage de\\\r\n            \\ signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une\\\r\n            \\ signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification est reconnue;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est\\\r\n            \\ valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des métadonnées suivantes: \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le document original non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifSignDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReport'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=asipsign.flux.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris\r\n                                    (75), C=FR\r\n                              valide: true\r\n                           Rapport de Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN05\r\n                                 message: Le certificat est expiré.\r\n                              -  codeErreur: ERSIGN06\r\n                                 message: Le certificat ne contient pas l'usage requis pour signer.\r\n                              valide: false\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur (vérifier que le document est au bon format XML).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/signatures/xadesbaselinebwithproof:\r\n      post:\r\n         tags:\r\n         - xades\r\n         summary: Vérification de signature au format Xades Baseline B avec preuve.\r\n         operationId: verifSignatureXadesWithProof\r\n         description: \"L'opération permet au client de vérifier une signature au format Xades Baseline B ainsi que de générer\\\r\n            \\ une preuve de vérification. \u003cbr\u003e  Le client peut demander la vérification des règles applicables suivantes:\u003cbr\u003e \\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;validité de la signature du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence de la balise \\\"SigningTime\\\" dans la signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;pré\\\r\n            sence du certificat utilisé dans la signature; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat de signature n'est pas expiré; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'usage de\\\r\n            \\ la clé du certificat correspond à un usage de signature électronique et de non répudiation;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat\\\r\n            \\ de signature n'est pas révoqué; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;présence d'une signature qui n'est pas vide; \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification\\\r\n            \\ est reconnue;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le contenu de la signature est valide;\u003cbr\u003e\u003cbr\u003e  Le client peut également demander l'extraction des\\\r\n            \\ métadonnées suivantes: \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la date de signature;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique;\u003cbr\u003e  \\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;le document original non signé.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifSignDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReportWithProof'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              valide: true\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n                           Rapport de Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERSIGN01\r\n                                 message: Le certificat utilisé pour la signature n'a pas été trouvé dans la signature.\r\n                              -  codeErreur: ERSIGN02\r\n                                 message: Le certificat n'a pas été émis par l'autorité de certification requise.\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),\r\n                                    C=FR\r\n                              valide: false\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur (vérifier que le document est au bon format XML).\r\n            '501':\r\n               description: L'opération n'est pas supportée par le serveur (demande de validation d'un document qui n'est\r\n                  pas au format XML).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/certificats:\r\n      post:\r\n         tags:\r\n         - certificats\r\n         summary: Vérification d'un certificat au format DER ou PEM.\r\n         operationId: verifCertificat\r\n         description: \"L'opération permet au client de vérifier la validité d'un certificat. \u003cbr\u003e Le client peut demander la\\\r\n            \\ vérification des règles applicables suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat n'est pas expiré;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat n'est pas\\\r\n            \\ révoqué;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la signature du certificat est valide;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité de Certification est reconnue.\u003cbr\u003e\u003cbr\u003e Le client\\\r\n            \\ peut également demander l'extraction des métadonnées suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifCertDocument'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReport'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              valide: true\r\n                           Rapport de Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERCERT01\r\n                                 message: Le certificat est expiré.\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),\r\n                                    C=FR\r\n                              valide: false\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: Erreur dans le fichier envoyé (ne correspond pas à un certificat par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\n   /validation/certificatswithproof:\r\n      post:\r\n         tags:\r\n         - certificats\r\n         summary: Vérification de certificat au format DER ou PEM avec preuve.\r\n         operationId: verifCertificatWithProof\r\n         description: \"L'opération permet au client de vérifier la validité d'un certificat ainsi que de générer une preuve\\\r\n            \\ de vérification. \u003cbr\u003e  Le client peut demander la vérification des règles applicables suivantes:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;Le certificat\\\r\n            \\ n'est pas expiré;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le certificat n'est pas révoqué;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;la signature du certificat est valide;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;l'Autorité\\\r\n            \\ de Certification est reconnue.\u003cbr\u003e Le client peut également demander l'extraction des métadonnées suivantes:\u003cbr\u003e\\\r\n            \\ \u0026nbsp;\u0026nbsp;\u0026nbsp;le DN du certificat;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;le rapport du diagnostique.\u003cbr\u003e\"\r\n         requestBody:\r\n            content:\r\n               multipart/form-data:\r\n                  schema:\r\n                     $ref: '#/components/schemas/VerifCertDocumentWithProof'\r\n            required: true\r\n         responses:\r\n            '200':\r\n               description: Requête en succès.\r\n               content:\r\n                  application/json:\r\n                     schema:\r\n                        type: object\r\n                        $ref: '#/components/schemas/ESignSanteValidationReportWithProof'\r\n                        example:\r\n                           Rapport de Vérification valide:\r\n                              erreurs: []\r\n                              valide: true\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n                           Rapport de Vérification invalide:\r\n                              erreurs:\r\n                              -  codeErreur: ERCERT01\r\n                                 message: Le certificat est expiré.\r\n                              metaData:\r\n                              -  typeMetadata: DN_CERTIFICAT\r\n                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),\r\n                                    C=FR\r\n                              valide: false\r\n                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+\r\n            '400':\r\n               description: Requête mal formée.\r\n            '404':\r\n               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).\r\n            '500':\r\n               description: Erreur interne du serveur.\r\n            '501':\r\n               description: Erreur dans le fichier envoyé (ne correspond pas à un certificat par exemple).\r\n            '503':\r\n               description: Le service n'est pas disponible.\r\ncomponents:\r\n   schemas:\r\n      Secret:\r\n         type: object\r\n         required:\r\n         - plainSecret\r\n         properties:\r\n            plainSecret:\r\n               description: Le secret.\r\n               type: string\r\n      HashedSecret:\r\n         type: object\r\n         required:\r\n         - secureSecretHash\r\n         properties:\r\n            secureSecretHash:\r\n               description: Le Hash du secret.\r\n               type: string\r\n      Conf:\r\n         description: Listes des différentes configurations\r\n         properties:\r\n            signature:\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/ConfSign'\r\n            signatureVerification:\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/ConfVerifSign'\r\n            certificatVerification:\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/ConfVerifCert'\r\n            proof:\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/ConfProof'\r\n      Proof:\r\n         type: object\r\n         required:\r\n         - requestId\r\n         - proofTag\r\n         - idProofConf\r\n         - applicantId\r\n         properties:\r\n            requestId:\r\n               description: Identifiant de la demande pour renseigner l'élément RequestId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            proofTag:\r\n               description: Tag utilisé pour renseigner l'élément Tag de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            idProofConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la génération de la preuve (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            applicantId:\r\n               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n      SignDocument:\r\n         type: object\r\n         required:\r\n         - idSignConf\r\n         - file\r\n         properties:\r\n            secret:\r\n               description: Secret\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            idSignConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la signature (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Document à signer.\r\n               type: string\r\n               format: binary\r\n            signers:\r\n               type: array\r\n               description: Liste des signataires délégataires. \r\n               items:\r\n                  type: string\r\n      SignDocumentWithProof:\r\n         type: object\r\n         required:\r\n         - idSignConf\r\n         - file\r\n         - idVerifSignConf\r\n         - requestId\r\n         - proofTag\r\n         - applicantId\r\n         properties:\r\n            secret:\r\n               description: Secret\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            idSignConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la signature (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Document à signer.\r\n               type: string\r\n               format: binary\r\n            signers:\r\n               type: array\r\n               description: Liste des signataires délégataires. \r\n               items:\r\n                  type: string\r\n            idVerifSignConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la vérification de signature (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            requestId:\r\n               description: Identifiant de la demande pour renseigner l'élément RequestId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            proofTag:\r\n               description: Tag utilisé pour renseigner l'élément Tag de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            applicantId:\r\n               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            openidTokens:\r\n               description: Liste de tokens openid mappés à leurs endpoints (tokenIntrospectionEndpoint et userInfoEndpoint).\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/OpenidToken'\r\n      VerifCertDocument:\r\n         type: object\r\n         required:\r\n         - idVerifCertConf\r\n         - file\r\n         properties:\r\n            idVerifCertConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la vérification de certificat (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Certificat à vérifier.\r\n               type: string\r\n               format: binary\r\n      VerifCertDocumentWithProof:\r\n         type: object\r\n         required:\r\n         - idVerifCertConf\r\n         - file\r\n         - requestId\r\n         - proofTag\r\n         - applicantId\r\n         - idProofConf\r\n         properties:\r\n            idVerifCertConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la vérification de certificat (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Certificat à vérifier.\r\n               type: string\r\n               format: binary\r\n            requestId:\r\n               description: Identifiant de la demande pour renseigner l'élément RequestId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            proofTag:\r\n               description: Tag utilisé pour renseigner l'élément Tag de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            applicantId:\r\n               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            idProofConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la génération de la preuve (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n      VerifSignDocument:\r\n         type: object\r\n         required:\r\n         - idVerifSignConf\r\n         - file\r\n         properties:\r\n            idVerifSignConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la vérification de signature (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Document à vérifier.\r\n               type: string\r\n               format: binary\r\n      VerifSignDocumentWithProof:\r\n         type: object\r\n         required:\r\n         - idVerifSignConf\r\n         - file\r\n         - requestId\r\n         - proofTag\r\n         - applicantId\r\n         - idProofConf\r\n         properties:\r\n            idVerifSignConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la vérification de signature (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            file:\r\n               description: Document à vérifier.\r\n               type: string\r\n               format: binary\r\n            requestId:\r\n               description: Identifiant de la demande pour renseigner l'élément RequestId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            proofTag:\r\n               description: Tag utilisé pour renseigner l'élément Tag de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            applicantId:\r\n               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.\r\n               type: string\r\n               pattern: ^[a-zA-Z_0-9\\-]*$\r\n            idProofConf:\r\n               description: Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour\r\n                  la génération de la preuve (appel de l'opération \"/configurations\").\r\n               type: integer\r\n               format: int64\r\n            openidTokens:\r\n               description: Liste de tokens openid mappés à leurs endpoints (tokenIntrospectionEndpoint et userInfoEndpoint).\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/OpenidToken'\r\n      ConfSign:\r\n         type: object\r\n         required:\r\n         - idSignConf\r\n         - associatedProofId\r\n         - description\r\n         - signaturePackaging\r\n         - digestAlgorithm\r\n         - canonicalisationAlgorithm\r\n         - dn\r\n         properties:\r\n            idSignConf:\r\n               description: Identifiant de configuration. Cet identifiant est utilisé par les services de signature.\r\n               type: integer\r\n               format: int64\r\n            associatedProofId:\r\n               description: Identifiant de configuration de la preuve de validation associée.\r\n               type: integer\r\n               format: int64\r\n            description:\r\n               description: Description de la configuration de signature.\r\n               type: string\r\n            signaturePackaging:\r\n               type: string\r\n               enum: #\r\n               - ENVELOPING #WithComments\r\n               - ENVELOPED\r\n            digestAlgorithm:\r\n               type: string\r\n               enum:\r\n               - SHA1\r\n               - SHA256\r\n               - SHA512\r\n            canonicalisationAlgorithm:\r\n               type: string\r\n               enum:\r\n               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315\r\n               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\r\n               - http://www.w3.org/2001/10/xml-exc-c14n#\r\n               - http://www.w3.org/2001/10/xml-exc-c14n#WithComments\r\n            dn:\r\n               description: DN du certificat qui sera utilisé pour signer le document #WithComments\r\n               type: string\r\n      ConfVerifSign:\r\n         type: object\r\n         required:\r\n         - idVerifSignConf\r\n         - description\r\n         - rules\r\n         - metaData\r\n         properties:\r\n            idVerifSignConf:\r\n               description: Identifiant de configuration. Cet identifiant est utilisé par le service de vérification de signature.\r\n               type: integer\r\n               format: int64\r\n            description:\r\n               description: Description de la configuration de vérification de signature.\r\n               type: string\r\n            rules:\r\n               description: Liste des règles qui seront utilisées pour vérifier la signature.\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/Rule'\r\n                  example:\r\n                  -  rule: null\r\n                     id: SignatureCertificatValide\r\n                     description: Vérification de la validité de la signature du certificat.\r\n                  -  rule: null\r\n                     id: ExistenceBaliseSigningTime\r\n#                    - rule:\r\n#                      id: FormatSignature\r\n#                      description: Le format de la signature est valide.\r\n                     description: La balise \"SigningTime\" existe dans la signature.\r\n                  -  rule: null\r\n                     id: ExistenceDuCertificatDeSignature\r\n                     description: Le certificat utilisé pour la signature existe dans le signature.\r\n                  -  rule: null\r\n                     id: ExpirationCertificat\r\n                     description: Le certificat de signature n'est pas expiré.\r\n                  -  rule: null\r\n                     id: NonRepudiation\r\n                     description: L'usage de la clé du certificat correspond à un usage de signature électronique et de non\r\n                        répudiation.\r\n                  -  rule: null\r\n                     id: RevocationCertificat\r\n                     description: Le certificat de signature n'est pas révoqué.\r\n                  -  rule: null\r\n                     id: SignatureNonVide\r\n                     description: La signature existe et elle n'est pas vide.\r\n                  -  rule: null\r\n                     id: TrustedCertificat\r\n                     description: L'Autorité de Certification est reconnue.\r\n                  -  rule: null\r\n                     id: ValidationSignature\r\n                     description: Le contenu de la signature est valide.\r\n            metaData:\r\n               type: array\r\n               description: Données complémentaires et paramétrables retournées par le service.\r\n               items:\r\n                  type: string\r\n                  example:\r\n                  - DATE_SIGNATURE\r\n                  - DN_CERTIFICAT\r\n                  - RAPPORT_DIAGNOSTIQUE\r\n                  - DOCUMENT_ORIGINAL_NON_SIGNE\r\n      ConfProof:\r\n         type: object\r\n         required:\r\n         - idProofConf\r\n         - description\r\n         - signaturePackagingForProof\r\n         - digestAlgorithmForProof\r\n         - canonicalisationAlgorithmForProof\r\n         - dn\r\n         properties:\r\n            idProofConf:\r\n               description: Identifiant de configuration. Cet identifiant est utilisé par le service de génération de preuve.\r\n               type: integer\r\n               format: int64\r\n            description:\r\n               description: Description de la configuration de la génération de la preuve.\r\n               type: string #WithComments\r\n            signaturePackagingForProof:\r\n               type: string\r\n               enum: #\r\n               - ENVELOPING #WithComments\r\n               - ENVELOPED\r\n            digestAlgorithmForProof: #WithComments\r\n               type: string #\r\n               enum: #WithComments\r\n               - SHA1\r\n               - SHA256\r\n               - SHA512\r\n            canonicalisationAlgorithmForProof:\r\n               type: string\r\n               enum:\r\n               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315 #WithComments\r\n               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\r\n               - http://www.w3.org/2001/10/xml-exc-c14n#\r\n               - http://www.w3.org/2001/10/xml-exc-c14n#WithComments\r\n            dn:\r\n               description: DN du certificat qui sera utilisé pour signer la preuve. #WithComments\r\n               type: string #\r\n      ConfVerifCert: #WithComments\r\n         type: object\r\n         required:\r\n         - idVerifCertConf\r\n         - description\r\n         - rules\r\n         properties:\r\n            idVerifCertConf:\r\n               description: Identifiant de configuration. Cet identifiant est utilisé par le services de vérification de certificat.\r\n               type: integer\r\n               format: int64\r\n            description:\r\n               description: Description de la configuration de vérification des certificats.\r\n               type: string\r\n            rules:\r\n               type: array\r\n               items:\r\n                  type: object\r\n                  $ref: '#/components/schemas/Rule'\r\n                  example:\r\n                  -  rule: null\r\n                     id: ExpirationCertificat\r\n                     description: Le certificat n'est pas expiré.\r\n                  -  rule: null\r\n                     id: RevocationCertificat\r\n                     description: Le certificat n'est pas révoqué.\r\n                  -  rule: null\r\n                     id: SignatureCertificatValide\r\n                     description: Vérification de la validité de la signature du certificat.\r\n                  -  rule: null\r\n                     id: TrustedCertificat\r\n                     description: L'Autorité de Certification est reconnue.\r\n            metaData:\r\n               type: array\r\n               description: Données complémentaires et paramétrables retournées par le service.\r\n               items:\r\n                  type: string\r\n                  example:\r\n                  - DN_CERTIFICAT\r\n                  - RAPPORT_DIAGNOSTIQUE\r\n      Rule:\r\n         type: object\r\n         required:\r\n         - id\r\n         - description\r\n         properties:\r\n            id:\r\n               type: string\r\n            description:\r\n               type: string\r\n      OpenidToken:\r\n         type: object\r\n         required:\r\n         - tokenValue\r\n         - tokenIntrospectionEndpoint\r\n         - userInfoEndpoint\r\n         properties:\r\n            tokenValue:\r\n               type: string\r\n            tokenIntrospectionEndpoint:\r\n               type: string\r\n            userInfoEndpoint:\r\n               type: string\r\n      ESignSanteSignatureReport:\r\n         type: object\r\n         required:\r\n         - erreurs\r\n         - docSigne\r\n         properties:\r\n            erreurs:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Erreur'\r\n            docSigne:\r\n               description: Le document signé encodé en base 64.\r\n               type: string\r\n      ESignSanteSignatureReportWithProof:\r\n         type: object\r\n         required:\r\n         - erreurs\r\n         - metaData\r\n         - valide\r\n         - docSigne\r\n         - preuve\r\n         properties:\r\n            erreurs:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Erreur'\r\n            metaData:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Metadata'\r\n            valide:\r\n               type: boolean\r\n            docSigne:\r\n               description: Le document signé encodé en base 64.\r\n               type: string\r\n            preuve:\r\n               description: La preuve de vérification encodée en base 64.\r\n               type: string\r\n      ESignSanteValidationReport:\r\n         type: object\r\n         required:\r\n         - erreurs\r\n         - metaData\r\n         - valide\r\n         properties:\r\n            erreurs:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Erreur'\r\n            metaData:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Metadata'\r\n            valide:\r\n               type: boolean\r\n      ESignSanteValidationReportWithProof:\r\n         type: object\r\n         required:\r\n         - erreurs\r\n         - metaData\r\n         - valide\r\n         - preuve\r\n         properties:\r\n            erreurs:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Erreur'\r\n            metaData:\r\n               type: array\r\n               items:\r\n                  $ref: '#/components/schemas/Metadata'\r\n            valide:\r\n               type: boolean\r\n            preuve:\r\n               description: La preuve de vérification encodée en base 64.\r\n               type: string\r\n      Erreur:\r\n         required:\r\n         - codeErreur\r\n         - message\r\n         properties:\r\n            codeErreur:\r\n               type: string\r\n            message:\r\n               type: string\r\n      Metadata:\r\n         description: Données complémentaires et paramétrables retournées par le service.\r\n         required:\r\n         - typeMetadata\r\n         - message\r\n         properties:\r\n            typeMetadata:\r\n               type: string\r\n            message:\r\n               type: string\r\n",
			"canonicalURL": "/github.com/ansforge/esignsante@b604b682737866049a7c38980865dfe3239f177f/-/blob/esignsante-ws-api-doc.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ansforge/esignsante/blob/b604b682737866049a7c38980865dfe3239f177f/esignsante-ws-api-doc.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/signatures/padesbaselinebwithproof\": post: requestBody: contents: media: \"multipart/form-data\": form parameter \"openidTokens\": nested objects not allowed"
}