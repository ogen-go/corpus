{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/traPtitech/anke-to"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "tuning/openapi/api/openapi.yaml",
			"byteSize": 29009,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    name: traP\n    url: https://github.com/traPtitech/anke-to\n  description: anke-to API\n  title: anke-to API\n  version: 1.0.0-oas3\nservers:\n- description: production\n  url: https://anke-to.trap.jp/api\n- description: local\n  url: http://localhost:8080/api\nsecurity:\n- application:\n  - read\n  - write\ntags:\n- name: questionnaire\n- name: question\n- name: response\n- name: user\n- name: group\n- name: result\npaths:\n  /questionnaires:\n    get:\n      description: 与えられた条件を満たす20件以下のアンケートのリストを取得します．\n      operationId: getQuestionnaires\n      parameters:\n      - description: |\n          並び順 (作成日時が新しい \"created_at\", 作成日時が古い \"-created_at\", タイトルの昇順 \"title\",\n          タイトルの降順 \"-title\", 更新日時が新しい \"modified_at\", 更新日時が古い\n          \"-modified_at\" )\n        explode: true\n        in: query\n        name: sort\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: 何ページ目か (未定義の場合は1ページ目)\n        explode: true\n        in: query\n        name: page\n        required: true\n        schema:\n          type: integer\n        style: form\n      - description: |\n          自分がターゲットになっていないもののみ取得 (true), ターゲットになっているものも含めてすべて取得 (false)\n        explode: true\n        in: query\n        name: nontargeted\n        required: true\n        schema:\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/QuestionnaireForList'\n                type: array\n          description: 正常に取得できました。アンケートの配列を返します。\n      tags:\n      - questionnaire\n    post:\n      description: 新しいアンケートを作成します．\n      operationId: postQuestionnaire\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewQuestionnaire'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewQuestionnaireResponse'\n          description: 正常にアンケートを作成できました．作成されたアンケートを返します．\n      tags:\n      - questionnaire\n  /questionnaires/{questionnaireID}:\n    delete:\n      description: アンケートを削除します．\n      operationId: delteQuestionnaire\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          description: 正常にアンケートを削除できました．\n      tags:\n      - questionnaire\n    get:\n      description: アンケートの情報を取得します。\n      operationId: getQuestionnaire\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuestionnaireByID'\n          description: 正常に取得できました。\n      tags:\n      - questionnaire\n    patch:\n      description: アンケートの情報を変更します．\n      operationId: patchQuestionnaire\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewQuestionnaire'\n        required: true\n      responses:\n        \"200\":\n          description: 正常にアンケートを変更できました．\n      tags:\n      - questionnaire\n  /questionnaires/{questionnaireID}/questions:\n    get:\n      description: アンケートに含まれる質問のリストを取得します。\n      operationId: getQuestions\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/QuestionDetails'\n                type: array\n          description: 正常に取得できました。\n      tags:\n      - questionnaire\n  /questions:\n    post:\n      description: 新しい質問を作成します．\n      operationId: postQuestion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewQuestion'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Question'\n          description: 正常に質問を作成できました．作成された質問を返します．\n        \"400\":\n          description: 正常に作成できませんでした。リクエストが不正です。\n      tags:\n      - question\n  /questions/{questionID}:\n    delete:\n      description: 質問を削除します．\n      operationId: deleteQuestion\n      parameters:\n      - description: |\n          質問ID\n        explode: false\n        in: path\n        name: questionID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          description: 正常に質問を削除できました。\n        \"400\":\n          description: 正常に削除できませんでした。存在しない質問です。\n      tags:\n      - question\n    patch:\n      description: 質問を変更します．\n      operationId: patchQuestion\n      parameters:\n      - description: |\n          質問ID\n        explode: false\n        in: path\n        name: questionID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewQuestion'\n        required: true\n      responses:\n        \"200\":\n          description: 正常に質問を変更できました．\n        \"400\":\n          description: 正常に変更できませんでした。リクエストが不正です。\n      tags:\n      - question\n  /responses:\n    post:\n      description: 新しい回答を作成します．\n      operationId: postResponse\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewResponse'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseDetails'\n          description: 正常に回答を作成できました．作成された回答を返します．\n      tags:\n      - response\n  /responses/{responseID}:\n    delete:\n      description: 回答を削除します．\n      operationId: deleteResponse\n      parameters:\n      - description: |\n          回答ID\n        explode: false\n        in: path\n        name: responseID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          description: 正常に回答を削除できました．\n      tags:\n      - response\n    get:\n      description: あるresponseIDを持つ回答に含まれる全ての質問に対する自分の回答を取得します\n      operationId: getResponses\n      parameters:\n      - description: |\n          回答ID\n        explode: false\n        in: path\n        name: responseID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Response'\n          description: 正常に取得できました。\n      tags:\n      - response\n    patch:\n      description: 回答を変更します．\n      operationId: patchResponse\n      parameters:\n      - description: |\n          回答ID\n        explode: false\n        in: path\n        name: responseID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewResponse'\n        required: true\n      responses:\n        \"200\":\n          description: 正常に回答を変更できました．\n      tags:\n      - response\n  /users:\n    get:\n      description: (botおよび除名されたユーザーを除く、全ての) ユーザーのtraQIDのリストを取得します。\n      operationId: getUsers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/User'\n                type: array\n          description: 正常に取得できました．ユーザーの配列を返します．\n      summary: 未実装\n      tags:\n      - user\n  /users/me:\n    get:\n      description: 自分のユーザー情報を取得します\n      operationId: getMe\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Me'\n          description: 正常に取得できました。\n      tags:\n      - user\n  /users/me/responses:\n    get:\n      description: 自分のすべての回答のリストを取得します。\n      operationId: getMyResponses\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ResponseSummary'\n                type: array\n          description: 正常に取得できました。回答の配列を返します。\n      tags:\n      - user\n  /users/me/responses/{questionnaireID}:\n    get:\n      description: 特定のquestionnaireIdを持つアンケートに対する自分のすべての回答のリストを取得します。\n      operationId: getResponsesToQuestionnaire\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ResponseSummary'\n                type: array\n          description: 正常に取得できました。回答の配列を返します。\n      tags:\n      - user\n  /users/me/targeted:\n    get:\n      description: 自分が対象になっている アンケートのリストを取得します。\n      operationId: getMyTargeted\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/QuestionnaireMyTargeted'\n                type: array\n          description: 正常に取得できました。アンケートの配列を返します。\n      tags:\n      - user\n  /users/me/administrates:\n    get:\n      description: 自分が管理者になっているアンケートのリストを取得します。\n      operationId: getMyAdministrates\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/QuestionnaireMyAdministrates'\n                type: array\n          description: 正常に取得できました。アンケートの配列を返します。\n      tags:\n      - user\n  /groups:\n    get:\n      description: (全ての) グループのリストを取得します\n      operationId: getGroups\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Group'\n                type: array\n          description: 正常に取得できました．グループの配列を返します．\n      summary: 未実装\n      tags:\n      - group\n  /results/{questionnaireID}:\n    get:\n      description: あるquestionnaireIDを持つアンケートの結果をすべて取得します。\n      operationId: getResults\n      parameters:\n      - description: |\n          アンケートID\n        explode: false\n        in: path\n        name: questionnaireID\n        required: true\n        schema:\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ResponseResult'\n                type: array\n          description: 正常に取得できました。アンケートの各質問に対する結果の配列を返します。\n        \"403\":\n          description: 結果を閲覧する権限がありません。\n      tags:\n      - result\ncomponents:\n  parameters:\n    sortInQuery:\n      description: |\n        並び順 (作成日時が新しい \"created_at\", 作成日時が古い \"-created_at\", タイトルの昇順 \"title\",\n        タイトルの降順 \"-title\", 更新日時が新しい \"modified_at\", 更新日時が古い\n        \"-modified_at\" )\n      explode: true\n      in: query\n      name: sort\n      required: true\n      schema:\n        type: string\n      style: form\n    pageInQuery:\n      description: 何ページ目か (未定義の場合は1ページ目)\n      explode: true\n      in: query\n      name: page\n      required: true\n      schema:\n        type: integer\n      style: form\n    nontargetedInQuery:\n      description: |\n        自分がターゲットになっていないもののみ取得 (true), ターゲットになっているものも含めてすべて取得 (false)\n      explode: true\n      in: query\n      name: nontargeted\n      required: true\n      schema:\n        type: boolean\n      style: form\n    questionnaireIDInPath:\n      description: |\n        アンケートID\n      explode: false\n      in: path\n      name: questionnaireID\n      required: true\n      schema:\n        type: integer\n      style: simple\n    questionIDInPath:\n      description: |\n        質問ID\n      explode: false\n      in: path\n      name: questionID\n      required: true\n      schema:\n        type: integer\n      style: simple\n    responseIDInPath:\n      description: |\n        回答ID\n      explode: false\n      in: path\n      name: responseID\n      required: true\n      schema:\n        type: integer\n      style: simple\n  schemas:\n    NewQuestionnaire:\n      example:\n        res_shared_to: public\n        res_time_limit: 2000-01-23T04:56:07.000+00:00\n        description: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！\n        title: 第1回集会らん☆ぷろ募集アンケート\n        targets:\n        - lolico\n        - lolico\n        administrators:\n        - lolico\n        - lolico\n      properties:\n        title:\n          example: 第1回集会らん☆ぷろ募集アンケート\n          type: string\n        description:\n          example: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！\n          type: string\n        res_time_limit:\n          format: date-time\n          type: string\n        res_shared_to:\n          description: |\n            アンケートの結果を, 運営は見られる (\"administrators\"), 回答済みの人は見られる (\"respondents\") 誰でも見られる (\"public\")\n          enum:\n          - administrators\n          - respondents\n          - public\n          example: public\n          type: string\n        targets:\n          items:\n            example: lolico\n            type: string\n          type: array\n        administrators:\n          items:\n            example: lolico\n            type: string\n          type: array\n      required:\n      - administrators\n      - description\n      - res_shared_to\n      - res_time_limit\n      - targets\n      - title\n      type: object\n    NewQuestionnaireResponse:\n      allOf:\n      - $ref: '#/components/schemas/QuestionnaireUser'\n    Questionnaire:\n      properties:\n        questionnaireID:\n          example: 1\n          type: integer\n        title:\n          example: 第1回集会らん☆ぷろ募集アンケート\n          type: string\n        description:\n          example: 第1回メンバー集会でのらん☆ぷろで発表したい人を募集します らん☆ぷろで発表したい人あつまれー！\n          type: string\n        res_time_limit:\n          format: date-time\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        modified_at:\n          format: date-time\n          type: string\n        res_shared_to:\n          description: |\n            アンケートの結果を, 運営は見られる (\"administrators\"), 回答済みの人は見られる (\"respondents\") 誰でも見られる (\"public\")\n          enum:\n          - administrators\n          - respondents\n          - public\n          example: public\n          type: string\n      required:\n      - created_at\n      - description\n      - modified_at\n      - questionnaireID\n      - res_shared_to\n      - res_time_limit\n      - targets\n      - title\n      type: object\n    QuestionnaireForList:\n      allOf:\n      - $ref: '#/components/schemas/Questionnaire'\n      - $ref: '#/components/schemas/QuestionnaireForList_allOf'\n    QuestionnaireByID:\n      allOf:\n      - $ref: '#/components/schemas/QuestionnaireUser'\n      - $ref: '#/components/schemas/QuestionnaireByID_allOf'\n    QuestionnaireMyTargeted:\n      allOf:\n      - $ref: '#/components/schemas/Questionnaire'\n      - $ref: '#/components/schemas/QuestionnaireMyTargeted_allOf'\n    QuestionnaireMyAdministrates:\n      allOf:\n      - $ref: '#/components/schemas/QuestionnaireUser'\n      - $ref: '#/components/schemas/QuestionnaireMyAdministrates_allOf'\n    QuestionnaireUser:\n      allOf:\n      - $ref: '#/components/schemas/Questionnaire'\n      - $ref: '#/components/schemas/QuestionnaireUser_allOf'\n    NewQuestion:\n      example:\n        question_type: Text\n        page_num: 1\n        questionnaireID: 1\n        scale_label_right: そう思わない\n        scale_min: 1\n        body: 質問文\n        question_num: 1\n        min_bound: min_bound\n        regex_pattern: regex_pattern\n        is_required: true\n        max_bound: max_bound\n        scale_label_left: そう思う\n        options:\n        - 選択肢1\n        - 選択肢1\n        scale_max: 5\n      properties:\n        questionnaireID:\n          example: 1\n          type: integer\n        page_num:\n          description: |\n            アンケートの何ページ目の質問か\n          example: 1\n          type: integer\n        question_num:\n          description: |\n            アンケートの質問のうち、何問目か\n          example: 1\n          type: integer\n        question_type:\n          description: |\n            どのタイプの質問か (\"Text\", \"TextArea\", \"Number\", \"MultipleChoice\", \"Checkbox\", \"Dropdown\", \"LinearScale\", \"Date\", \"Time\")\n          enum:\n          - Text\n          - TextArea\n          - MultipleChoice\n          - Checkbox\n          - Dropdown\n          - LinearScale\n          - Date\n          - Time\n          example: Text\n          type: string\n        body:\n          example: 質問文\n          type: string\n        is_required:\n          description: |\n            回答必須かどうか\n          example: true\n          type: boolean\n        options:\n          items:\n            example: 選択肢1\n            type: string\n          type: array\n        scale_label_right:\n          example: そう思わない\n          type: string\n        scale_label_left:\n          example: そう思う\n          type: string\n        scale_min:\n          example: 1\n          type: integer\n        scale_max:\n          example: 5\n          type: integer\n        regex_pattern:\n          type: string\n        min_bound:\n          type: string\n        max_bound:\n          type: string\n      required:\n      - body\n      - is_required\n      - max_bound\n      - min_bound\n      - options\n      - page_num\n      - question_num\n      - question_type\n      - questionnaireID\n      - regex_pattern\n      - scale_label_left\n      - scale_label_right\n      - scale_max\n      - scale_min\n      type: object\n    Question:\n      allOf:\n      - $ref: '#/components/schemas/NewQuestion'\n      - $ref: '#/components/schemas/Question_allOf'\n    QuestionDetails:\n      allOf:\n      - $ref: '#/components/schemas/Question'\n      - $ref: '#/components/schemas/QuestionDetails_allOf'\n    NewResponse:\n      example:\n        questionnaireID: 1\n        body:\n        - option_response:\n          - 選択肢1\n          - 選択肢1\n          questionID: 1\n          question_type: Text\n          response: リマインダーBOTを作った話\n        - option_response:\n          - 選択肢1\n          - 選択肢1\n          questionID: 1\n          question_type: Text\n          response: リマインダーBOTを作った話\n      properties:\n        questionnaireID:\n          example: 1\n          type: integer\n        body:\n          items:\n            $ref: '#/components/schemas/ResponseBody'\n          type: array\n      required:\n      - body\n      - questionnaireID\n      type: object\n    Response:\n      allOf:\n      - $ref: '#/components/schemas/NewResponse'\n      - $ref: '#/components/schemas/Response_allOf'\n    ResponseDetails:\n      allOf:\n      - $ref: '#/components/schemas/Response'\n      - $ref: '#/components/schemas/ResponseDetails_allOf'\n    ResponseSummary:\n      example:\n        submitted_at: 2000-01-23T04:56:07.000+00:00\n        res_time_limit: 2000-01-23T04:56:07.000+00:00\n        questionnaire_title: 第1回集会らん☆ぷろ募集アンケート\n        questionnaireID: 1\n        modified_at: modified_at\n        responseID: 1\n      properties:\n        responseID:\n          example: 1\n          type: integer\n        questionnaireID:\n          example: 1\n          type: integer\n        questionnaire_title:\n          example: 第1回集会らん☆ぷろ募集アンケート\n          type: string\n        res_time_limit:\n          format: date-time\n          type: string\n        submitted_at:\n          format: date-time\n          type: string\n        modified_at:\n          format: date-tie\n          type: string\n      required:\n      - modified_at\n      - questionnaireID\n      - questionnaire_title\n      - res_time_limit\n      - responseID\n      - submitted_at\n      type: object\n    ResponseBody:\n      example:\n        option_response:\n        - 選択肢1\n        - 選択肢1\n        questionID: 1\n        question_type: Text\n        response: リマインダーBOTを作った話\n      properties:\n        questionID:\n          example: 1\n          type: integer\n        question_type:\n          enum:\n          - Text\n          - TextArea\n          - MultipleChoice\n          - Checkbox\n          - Dropdown\n          - LinearScale\n          - Date\n          - Time\n          example: Text\n          type: string\n        response:\n          example: リマインダーBOTを作った話\n          type: string\n        option_response:\n          items:\n            example: 選択肢1\n            type: string\n          type: array\n      required:\n      - option_response\n      - questionID\n      - question_type\n      - response\n      type: object\n    ResponseResult:\n      allOf:\n      - $ref: '#/components/schemas/Response'\n      - $ref: '#/components/schemas/ResponseResult_allOf'\n    Users:\n      items:\n        example: lolico\n        type: string\n      type: array\n    User:\n      example:\n        iconFileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        displayName: ロリ子\n        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        twitterId: trapyojo\n        traqID: lolico\n      properties:\n        userId:\n          format: uuid\n          type: string\n        traqID:\n          example: lolico\n          type: string\n        displayName:\n          example: ロリ子\n          type: string\n        iconFileId:\n          format: uuid\n          type: string\n        twitterId:\n          example: trapyojo\n          type: string\n      required:\n      - displayName\n      - iconFileId\n      - traqID\n      - twitterId\n      - userId\n      type: object\n    Me:\n      example:\n        traqID: lolico\n      properties:\n        traqID:\n          example: lolico\n          type: string\n      required:\n      - traqID\n      type: object\n    Group:\n      example:\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        adminUser: lolico\n        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        members:\n        - null\n        - null\n        name: 17B\n        description: 2017年度入学学部生\n        updatedAt: 2000-01-23T04:56:07.000+00:00\n      properties:\n        groupId:\n          format: uuid\n          type: string\n        name:\n          example: 17B\n          type: string\n        description:\n          example: 2017年度入学学部生\n          type: string\n        adminUser:\n          example: lolico\n          type: string\n        members:\n          items:\n            $ref: '#/components/schemas/Users'\n          type: array\n        createdAt:\n          format: date-time\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n      required:\n      - adminUser\n      - createdAt\n      - description\n      - groupId\n      - members\n      - name\n      - updatedAt\n      type: object\n    QuestionnaireForList_allOf:\n      properties:\n        is_targeted:\n          description: |\n            自分がターゲットになっているかどうか\n          example: true\n          type: boolean\n      required:\n      - is_targeted\n    QuestionnaireByID_allOf:\n      properties:\n        respondents:\n          items:\n            example: lolico\n            type: string\n          type: array\n      required:\n      - respondents\n    QuestionnaireMyTargeted_allOf:\n      properties:\n        responded_at:\n          format: date-time\n          type: string\n      required:\n      - responded_at\n    QuestionnaireMyAdministrates_allOf:\n      properties:\n        all_responded:\n          description: |\n            回答必須でない場合、またはすべてのターゲットが回答済みの場合、true を返す。それ以外はfalseを返す。\n          example: true\n          type: boolean\n        respondents:\n          items:\n            example: lolico\n            type: string\n          type: array\n      required:\n      - all_responded\n      - respondents\n    QuestionnaireUser_allOf:\n      properties:\n        targets:\n          items:\n            example: lolico\n            type: string\n          type: array\n        administrators:\n          items:\n            example: lolico\n            type: string\n          type: array\n      required:\n      - administrators\n      - targets\n    Question_allOf:\n      properties:\n        questionID:\n          example: 1\n          type: integer\n      required:\n      - questionID\n    QuestionDetails_allOf:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n      required:\n      - created_at\n    Response_allOf:\n      properties:\n        submitted_at:\n          format: date-time\n          type: string\n        modified_at:\n          format: date-time\n          type: string\n      required:\n      - modified_at\n      - submitted_at\n    ResponseDetails_allOf:\n      properties:\n        responseID:\n          example: 1\n          type: integer\n      required:\n      - responseID\n    ResponseResult_allOf:\n      properties:\n        traqID:\n          example: lolico\n          type: string\n      required:\n      - traqID\n  securitySchemes:\n    application:\n      flows:\n        clientCredentials:\n          scopes:\n            write: allows modifying resources\n            read: allows reading resources\n          tokenUrl: http://example.com/oauth/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/traPtitech/anke-to@ae394bc63b3215a925038f3b6edcdbb0c6f13bd6/-/blob/tuning/openapi/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/traPtitech/anke-to/blob/ae394bc63b3215a925038f3b6edcdbb0c6f13bd6/tuning/openapi/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/responses\": post: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object"
}