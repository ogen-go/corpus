{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "tool-tests/15-nullable/openapi.yaml",
			"byteSize": 91242,
			"content": "openapi: 3.0.1\ninfo:\n  x-ballerina-display:\n    label: Bitbucket\n    iconPath: \"icon.png\"\n  title: Bitbucket API\n  description: \u003e-\n    This is a generated connector for [Bitbucket API v2.0](https://developer.atlassian.com/bitbucket/api/2/reference/) OpenAPI Specification.\n\n    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, \n    or even add custom UI add-ons into Bitbucket itself using the Connect framework.\n  x-ballerina-init-description: \u003e- \n    The connector initialization requires setting the API credentials.\n\n    Create an [Bitbucket account](https://bitbucket.org/product/) and obtain tokens following \n    [this guide](https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication).\n  termsOfService: https://www.atlassian.com/legal/customer-agreement\n  contact:\n    name: Bitbucket Support\n    url: https://support.atlassian.com/bitbucket-cloud/\n    email: support@bitbucket.org\n  version: \"2.0\"\nservers:\n  - url: https://api.bitbucket.org/2.0\ntags:\n  - name: Addon\n    description: |\n      The addon resource is intended to use used by Bitbucket Cloud Connect\n      Apps, and only supports JWT authentication.\n  - name: Branch restrictions\n    description: |\n      Repository owners and administrators can set branch management\n      rules on a repository that control what can be pushed by whom.\n      Through these rules, you can enforce a project or team\n      workflow. For example, owners or administrators can:\n\n      * Limit push powers\n      * Prevent branch deletion\n      * Prevent history re-writes (Git only)\n  - name: Branching model\n    description: |\n      The branching model resource is used to modify the branching model\n      for a repository.\n\n      You can use the branching model to define a branch based workflow\n      for your repositories. When you map your workflow to branch types,\n      you can ensure that branches are named consistently by configuring\n      which branch types to make available.\n  - name: Commit statuses\n    description: |\n      Commit statuses provide a way to tag commits with meta data,\n      like automated build results.\n  - name: Commits\n    description: |\n      These are the repository's commits. They are paginated and returned in\n      reverse chronological order, similar to the output of git log.\n  - name: Deployments\n    description: |\n      Teams are deploying code faster than ever, thanks to continuous\n      delivery practices and tools like Bitbucket Pipelines. Bitbucket\n      Deployments gives teams visibility into their deployment\n      environments and helps teams to track how far changes have\n      progressed in their deployment pipeline.\n  - name: Downloads\n    description: Access the list of download links associated with the repository.\n  - name: Issue tracker\n    description: |\n      The issue resources provide functionality for getting information on\n      issues in an issue tracker, creating new issues, updating them and deleting\n      them.\n\n      You can access public issues without authentication, but you can't gain access\n      to private repositories' issues. By authenticating, you will get the ability\n      to create issues, as well as access to updating data or deleting issues you\n      have access to.\n  - name: Pipelines\n    description: |\n      Bitbucket Pipelines brings continuous delivery to Bitbucket\n      Cloud, empowering teams with full branching to deployment\n      visibility and faster feedback loops.\n  - name: Projects\n    description: |\n      Bitbucket Cloud projects make it easier for teams to focus on\n      a goal, product, or process by organizing their repositories.\n  - name: Pullrequests\n    description: |\n      Pull requests are a feature that makes it easier for developers\n      to collaborate using Bitbucket. They provide a user-friendly web\n      interface for discussing proposed changes before integrating them\n      into the official project.\n  - name: Refs\n    description: |\n      The refs resource allows you access branches and tags in a repository.\n      By default, results will be in the order the underlying source control\n      system returns them and identical to the ordering one sees when running\n      \"$ git show-ref\". Note that this follows simple lexical ordering of the\n       ref names.\n  - name: Reports\n    description: |\n      Code insights provides reports, annotations, and metrics to help you\n      and your team improve code quality in pull requests throughout the code\n      review process. Some of the available code insights are static analysis\n      reports, security scan results, artifact links, unit tests, and build\n      status.\n  - name: Repositories\n    description: |\n      A Git repository is a virtual storage of your project. It\n      allows you to save versions of your code, which you can access\n      when needed. The repo resource allows you to access public repos,\n      or repos that belong to a specific workspace.\n  - name: Snippets\n    description: |\n      Snippets allow you share code segments or files with yourself, members of\n      your workspace, or the world.\n\n      Like pull requests, repositories and workspaces, the full set of snippets\n      is defined by what the current user has access to. This includes all\n      snippets owned by any of the workspaces the user is a member of, or\n      snippets by other users that the current user is either watching or has\n       collaborated on (for instance by commenting on it).\n  - name: Source\n    description: |-\n      Browse the source code in the repository and\n                                    create new commits by uploading.\n  - name: Ssh\n    description: |\n      The SSH resource allows you to manage SSH keys.\n  - name: Teams\n    description: |\n      The teams resource has been deprecated, and the workspaces\n      endpoint should be used instead.\n\n      The teams resource returns all the teams that the authenticated\n      user is associated with.\n  - name: Users\n    description: |\n      The users resource allows you to access public information\n      associated with a user account. Most resources in the users\n      endpoint have been deprecated in favor of workspaces.\n  - name: Webhooks\n    description: |\n      Webhooks provide a way to configure Bitbucket Cloud to make requests to\n      your server (or another external service) whenever certain events occur in\n      Bitbucket Cloud.\n\n      A webhook consists of:\n\n      * A subject -- The resource that generates the events. Currently, this resource\n      is the repository, user account, or team where you create the webhook.\n      * One or more event -- The default event is a repository push, but you can\n      select multiple events that can trigger the webhook.\n      * A URL -- The endpoint where you want Bitbucket to send the event payloads\n      when a matching event happens.\n\n      There are two parts to getting a webhook to work: creating the webhook and\n      triggering the webhook. After you create a webhook for an event, every time\n      that event occurs, Bitbucket sends a payload request that describes the event\n      to the specified URL. Thus, you can think of webhooks as a kind of\n      notification system.\n\n      Use webhooks to integrate applications with Bitbucket Cloud. The following\n      use cases provides examples of when you would want to use webhooks:\n\n      * Every time a user pushes commits in a repository, you may want to notify\n      your CI server to start a build.\n      * Every time a user pushes commits or creates a pull request, you may want to\n      display a notification in your application.\n  - name: Wiki\n    description: |\n      The wiki is a simple place to keep documents. Some people use it\n      as their project home page. The wiki is a Git repository, so you\n      can clone it and edit it like any other source files.\n  - name: Workspaces\n    description: |\n      A workspace is where you create repositories, collaborate on\n      your code, and organize different streams of work in your Bitbucket\n      Cloud account. Workspaces replace the use of teams and users in API\n      calls.\npaths:\n  /repositories/{workspace}:\n    get:\n      tags:\n      - Repositories\n      operationId: listWorkspaces\n      summary: Returns a list of all repositories\n      description: |-\n        Returns a paginated list of all repositories owned by the specified\n        account or UUID.\n\n        The result can be narrowed down based on the authenticated user's role.\n\n        E.g. with `?role=contributor`, only those repositories that the\n        authenticated user has write access to are returned (this includes any\n        repo the user is an admin on, as that implies write access).\n\n        This endpoint also supports filtering and sorting of the results. See\n        [filtering and sorting](../../meta/filtering) for more details.\n      parameters:\n      - name: workspace\n        in: path\n        description: |\n          This can either be the workspace ID (slug) or the workspace UUID\n          surrounded by curly-braces, for example: `{workspace UUID}`.\n        required: true\n        schema:\n          type: string\n      - name: role\n        in: query\n        description: Filters the result based on the authenticated user's role on each repository. member-returns repositories to which the user has explicit read access. contributor- returns repositories to which the user has explicit write access. admin- returns repositories to which the user has explicit administrator access. owner-returns all repositories owned by the current user\n        schema:\n          type: string\n          enum:\n          - admin\n          - contributor\n          - member\n          - owner\n      - name: q\n        in: query\n        description: Query string to narrow down the response as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering\n        schema:\n          type: string\n      - name: sort\n        in: query\n        description: Field by which the results should be sorted as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering\n        schema:\n          type: string\n      responses:\n        200:\n          description: The repositories owned by the specified account.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/paginated_repositories'\n        404:\n          description: If the specified account does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        410:\n          description: If the specified account marked as spam.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n      - oauth2:\n        - repository\n  /repositories/{workspace}/{repo_slug}/pullrequests:\n    get:\n      tags:\n      - Pullrequests\n      operationId: listPullrequets\n      summary: Returns all pull requests\n      description: Returns all pull requests on the specified repository. By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.\n      parameters:\n      - name: repo_slug\n        in: path\n        description: |\n          This can either be the repository slug or the UUID of the repository,\n          surrounded by curly-braces, for example: `{repository UUID}`.\n        required: true\n        schema:\n          type: string\n      - name: workspace\n        in: path\n        description: |\n          This can either be the workspace ID (slug) or the workspace UUID\n          surrounded by curly-braces, for example: `{workspace UUID}`.\n        required: true\n        schema:\n          type: string\n      - name: state\n        in: query\n        description: Only return pull requests that are in this state. This parameter\n          can be repeated.\n        schema:\n          type: string\n          enum:\n          - MERGED\n          - SUPERSEDED\n          - OPEN\n          - DECLINED\n      responses:\n        200:\n          description: All pull requests on the specified repository.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/paginated_pullrequests'\n        401:\n          description: If the repository is private and the request was not authenticated.\n          content: {}\n        404:\n          description: If the specified repository does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n      - oauth2:\n        - pullrequest\n  /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}:\n    get:\n      tags:\n        - Pullrequests\n      summary: Returns the specified pull request\n      operationId: getPullRequestByID\n      parameters:\n        - name: pull_request_id\n          in: path\n          description: The id of the pull request\n          required: true\n          schema:\n            type: integer\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The pull request object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/pullrequest\"\n              example:\n                type: pullrequest\n                description: Everything is awesome!\n                links:\n                  decline:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline\n                  commits:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits\n                  self:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1\n                  comments:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments\n                  merge:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge\n                  html:\n                    href: https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1\n                  activity:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity\n                  diff:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff\n                  approve:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve\n                  statuses:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses\n                author:\n                  username: example-username\n                  display_name: Example Username\n                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10\n                  links:\n                    self:\n                      href: https://api.bitbucket.org/2.0/users/example-username\n                    html:\n                      href: https://bitbucket.org/example-username/\n                    avatar:\n                      href: https://bitbucket.org/account/example-username/avatar/\n                  nickname: example-username\n                  type: user\n                  uuid: \"{58021780-82b6-4517-b153-0ae73ce3e4b4}\"\n                close_source_branch: true\n                reviewers: []\n                id: 1\n                destination:\n                  commit:\n                    type: commit\n                    hash: 230269fdfabd\n                    links:\n                      self:\n                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd\n                      html:\n                        href: https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd\n                  branch:\n                    name: master\n                  repository:\n                    full_name: example-username/bits_and_bobs\n                    type: repository\n                    name: bits_and_bobs\n                    links:\n                      self:\n                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs\n                      html:\n                        href: https://bitbucket.org/example-username/bits_and_bobs\n                      avatar:\n                        href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python\n                    uuid: \"{7708d810-964c-403f-aa6d-4e949280d614}\"\n                comment_count: 0\n                summary:\n                  raw: Everything is awesome!\n                  markup: markdown\n                  html: \u003cp\u003eEverything is awesome!\u003c/p\u003e\n                  type: rendered\n                source:\n                  commit:\n                    type: commit\n                    hash: c184aab5708b\n                    links:\n                      self:\n                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b\n                      html:\n                        href: https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b\n                  branch:\n                    name: branch_magnificent_internet\n                  repository:\n                    full_name: example-username/bits_and_bobs\n                    type: repository\n                    name: bits_and_bobs\n                    links:\n                      self:\n                        href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs\n                      html:\n                        href: https://bitbucket.org/example-username/bits_and_bobs\n                      avatar:\n                        href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python\n                    uuid: \"{7708d810-964c-403f-aa6d-4e949280d614}\"\n                participants: []\n                state: OPEN\n                task_count: 0\n                created_on: 2018-06-20T23:17:33.616037+00:00\n                updated_on: 2018-06-20T23:17:33.616037+00:00\n                reason: \"\"\n                title: Change a cooperative standard to a smiling disease\n        401:\n          description: If the repository is private and the request was not authenticated.\n          content: {}\n        404:\n          description: If the repository or pull request does not exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - pullrequest\n  /repositories/{workspace}/{repo_slug}:\n    get:\n      tags:\n        - Repositories\n      summary: Returns the object describing this repository\n      operationId: GetRepositoryDetail\n      parameters:\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: {repository UUID}\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: {workspace UUID}\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The repository object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/repository\"\n              example:\n                scm: git\n                website: www.example.com\n                has_wiki: false\n                description: A repository for my bits and bobs\n                language: python\n                fork_policy: allow_forks\n                links:\n                  clone:\n                    - href: https://bitbucket.org/example-username/bits_and_bobs.git\n                      name: https\n                    - href: git@bitbucket.org:example-username/bits_and_bobs.git\n                      name: ssh\n                  watchers:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers\n                  branches:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches\n                  tags:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags\n                  commits:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits\n                  downloads:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads\n                  source:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src\n                  html:\n                    href: https://bitbucket.org/example-username/bits_and_bobs\n                  avatar:\n                    href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python\n                  forks:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks\n                  self:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs\n                  pullrequests:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests\n                name: bits_and_bobs\n                created_on: 2018-06-20T23:17:33.616037+00:00\n                mainbranch:\n                  type: branch\n                  name: master\n                full_name: example-username/bits_and_bobs\n                has_issues: false\n                owner:\n                  username: example-username\n                  display_name: Example Username\n                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10\n                  links:\n                    self:\n                      href: https://api.bitbucket.org/2.0/users/example-username\n                    html:\n                      href: https://bitbucket.org/example-username/\n                    avatar:\n                      href: https://bitbucket.org/account/example-username/avatar/\n                  nickname: example-username\n                  type: user\n                  uuid: \"{58021780-82b6-4517-b153-0ae73ce3e4b4}\"\n                updated_on: 2018-06-20T23:17:33.616037+00:00\n                size: 33348\n                type: repository\n                slug: bits_and_bobs\n                is_private: true\n                uuid: \"{7708d810-964c-403f-aa6d-4e949280d614}\"\n        403:\n          description:\n            If the repository is private and the authenticated user does\n            not have access to it.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: If no repository exists at this location.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - repository\n    post:\n      tags:\n        - Repositories\n      summary: Creates a new repository\n      description: |-\n        Creates a new repository.\n\n        Note: In order to set the project for the newly created repository,\n        pass in either the project key or the project UUID as part of the\n        request body as shown in the examples below:\n\n        ```\n        $ curl -X POST -H \"Content-Type: application/json\" -d '{\n            \"scm\": \"git\",\n            \"project\": {\n                \"key\": \"MARS\"\n            }\n        }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n        ```\n\n        or\n\n        ```\n        $ curl -X POST -H \"Content-Type: application/json\" -d '{\n            \"scm\": \"git\",\n            \"project\": {\n                \"key\": \"{ba516952-992a-4c2d-acbd-17d502922f96}\"\n            }\n        }' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding\n        ```\n\n        The project must be assigned for all repositories. If the project is not provided,\n        the repository is automatically assigned to the oldest project in the workspace.\n\n        Note: In the examples above, the workspace ID `teamsinspace`,\n        and/or the repository name `hablanding` can be replaced by UUIDs.\n      operationId: CreateNewRepository\n      parameters:\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The repository that is to be created. Note that most object elements are optional. Elements \"owner\" and \"full_name\" are ignored as the URL implies them\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/repository\"\n        required: false\n      responses:\n        200:\n          description: The newly created repository.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/repository\"\n              example:\n                scm: git\n                website: www.example.com\n                has_wiki: false\n                description: A repository for my bits and bobs\n                language: python\n                fork_policy: allow_forks\n                links:\n                  clone:\n                    - href: https://bitbucket.org/example-username/bits_and_bobs.git\n                      name: https\n                    - href: git@bitbucket.org:example-username/bits_and_bobs.git\n                      name: ssh\n                  watchers:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers\n                  branches:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches\n                  tags:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags\n                  commits:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits\n                  downloads:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads\n                  source:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src\n                  html:\n                    href: https://bitbucket.org/example-username/bits_and_bobs\n                  avatar:\n                    href: https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python\n                  forks:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks\n                  self:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs\n                  pullrequests:\n                    href: https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests\n                name: bits_and_bobs\n                created_on: 2018-06-20T23:17:33.616037+00:00\n                mainbranch:\n                  type: branch\n                  name: master\n                full_name: example-username/bits_and_bobs\n                has_issues: false\n                owner:\n                  username: example-username\n                  display_name: Example Username\n                  account_id: 123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10\n                  links:\n                    self:\n                      href: https://api.bitbucket.org/2.0/users/example-username\n                    html:\n                      href: https://bitbucket.org/example-username/\n                    avatar:\n                      href: https://bitbucket.org/account/example-username/avatar/\n                  nickname: example-username\n                  type: user\n                  uuid: \"{58021780-82b6-4517-b153-0ae73ce3e4b4}\"\n                updated_on: 2018-06-20T23:17:33.616037+00:00\n                size: 33348\n                type: repository\n                slug: bits_and_bobs\n                is_private: true\n                uuid: \"{7708d810-964c-403f-aa6d-4e949280d614}\"\n        400:\n          description:\n            If the input document was invalid, or if the caller lacks the\n            privilege to create repositories under the targeted account.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        401:\n          description: If the request was not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - repository:admin\n      x-codegen-request-body-name: _body\n    delete:\n      tags:\n        - Repositories\n      summary: Deletes the repository\n      description: |-\n        Deletes the repository. This is an irreversible operation\n\n        This does not affect its forks.\n      operationId: DeleteRepository\n      parameters:\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Indicates successful deletion\n        403:\n          description: If the caller either does not have admin access to the repository or the repository is set to read-only.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: If the repository does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - repository:delete\n  /repositories/{workspace}/{repo_slug}/issues/{issue_id}:\n    get:\n      tags:\n        - Issue tracker\n      summary: Returns the specified issue\n      operationId: getIssueByID\n      parameters:\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The issue object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/issue\"\n        403:\n          description: When the authenticated user isn't authorized to access the issue\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: The specified repository or issue does not exist or does not have the issue tracker enabled\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        410:\n          description: The specified issue is unavailable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue\n    delete:\n      tags:\n        - Issue tracker\n      summary: Deletes the specified issue\n      description: |-\n        Deletes the specified issue. This requires write access to the repository\n      operationId: DeleteIssue\n      parameters:\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The issue object\n        403:\n          description: When the authenticated user isn't authorized to delete the issue\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: The specified repository or issue does not exist or does not have the issue tracker enabled\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue:write\n  /repositories/{workspace}/{repo_slug}/issues:\n    get:\n      tags:\n        - Issue tracker\n      summary: Returns the issues in the issue tracker\n      operationId: ListIssues\n      parameters:\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n        - name: q\n          in: query\n          description: Query string to narrow down the response as  https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: Field by which the results should be sorted as https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering\n          schema:\n            type: string\n      responses:\n        200:\n          description: A paginated list of the issues matching any filter criteria that were provided\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/paginated_issues\"\n        404:\n          description: The specified repository does not exist or does not have the issue tracker enabled\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue\n    post:\n      tags:\n        - Issue tracker\n      summary: Creates a new issue\n      description: |-\n        Creates a new issue.\n\n        This call requires authentication. Private repositories or private\n        issue trackers require the caller to authenticate with an account that\n        has appropriate authorization.\n\n        The authenticated user is used for the issue's `reporter` field.\n      operationId: CreateIssue\n      parameters:\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The new issue. The only required element is `title`. All other elements can be omitted from the body\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/issue\"\n        required: true\n      responses:\n        201:\n          description: The newly created issue\n          headers:\n            Location:\n              description: The (absolute) URL of the newly created issue\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/issue\"\n        401:\n          description: When the request wasn't authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        403:\n          description: When the authenticated user isn't authorized to create the issue\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: The specified repository does not exist or does not have the issue tracker enabled.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue:write\n      x-codegen-request-body-name: _body\n  /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments:\n    get:\n      tags:\n        - Issue tracker\n      summary: Returns a list of all comments on an issue\n      description: |-\n        Returns a paginated list of all comments that were made on the\n        specified issue.\n\n        The default sorting is oldest to newest and can be overridden with\n        the `sort` query parameter.\n      operationId: listComments\n      parameters:\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A paginated list of issue comments\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/paginated_issue_comments\"\n      security:\n        - oauth2:\n            - issue\n    post:\n      tags:\n        - Issue tracker\n      summary: Creates a new issue comment\n      description: |-\n        Creates a new issue comment.\n\n        ```\n        $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\\n          -X POST -u evzijst \\\n          -H 'Content-Type: application/json' \\\n          -d '{\"content\": {\"raw\": \"Lorem ipsum.\"}}'\n        ```\n      operationId: CreateNewIssueComment\n      parameters:\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The new issue comment object\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/issue_comment\"\n        required: true\n      responses:\n        201:\n          description: The newly created comment\n          headers:\n            Location:\n              description: The location of the newly issue comment\n              schema:\n                type: string\n        400:\n          description:\n            \"If the input was invalid, or if the comment being created\n            is detected as spam \"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue:write\n      x-codegen-request-body-name: _body\n  /repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}:\n    get:\n      tags:\n        - Issue tracker\n      summary: Returns the specified issue comment object\n      operationId: getCommentByID\n      parameters:\n        - name: comment_id\n          in: path\n          description: The id of the comment\n          required: true\n          schema:\n            type: integer\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The issue comment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/issue_comment\"\n      security:\n        - oauth2:\n            - issue\n    put:\n      tags:\n        - Issue tracker\n      summary: Updates the content of the specified issue comment\n      description: |-\n        Updates the content of the specified issue comment. Note that only\n        the `content.raw` field can be modified.\n\n        ```\n        $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\\n          -X PUT -u evzijst \\\n          -H 'Content-Type: application/json' \\\n          -d '{\"content\": {\"raw\": \"Lorem ipsum.\"}'\n        ```\n      operationId: UpdateComment\n      parameters:\n        - name: comment_id\n          in: path\n          description: The id of the comment\n          required: true\n          schema:\n            type: integer\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository surrounded by curly-braces, for example: `{repository UUID}`\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The updated comment\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/issue_comment\"\n        required: true\n      responses:\n        200:\n          description: The updated issue comment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/issue_comment\"\n        400:\n          description:\n            \"If the input was invalid, or if the update to the comment\n            is detected as spam \"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - issue:write\n      x-codegen-request-body-name: _body\n    delete:\n      tags:\n        - Issue tracker\n      summary: Deletes the specified comment\n      operationId: DeleteComment\n      parameters:\n        - name: comment_id\n          in: path\n          description: The id of the comment\n          required: true\n          schema:\n            type: integer\n        - name: issue_id\n          in: path\n          description: The issue id\n          required: true\n          schema:\n            type: string\n        - name: repo_slug\n          in: path\n          description: |\n            This can either be the repository slug or the UUID of the repository\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Indicates successful deletion\n      security:\n        - oauth2:\n            - issue:write\n      x-codegen-request-body-name: _body\n  /workspaces/{workspace}:\n    get:\n      tags:\n        - Workspaces\n      summary: Returns the requested workspace\n      operationId: getWorkSpaceByID\n      parameters:\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The workspace.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/workspace\"\n        404:\n          description: If no workspace exists for the specified name or UUID.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2: []\n  /workspaces/{workspace}/projects/{project_key}:\n    get:\n      tags:\n        - Projects\n        - Workspaces\n      summary: Returns the requested project\n      operationId: getProjectByProjectKey\n      parameters:\n        - name: project_key\n          in: path\n          description: |\n            The project in question. This is the actual `key` assigned to the project\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The project that is part of a workspace\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n        401:\n          description: The request wasn't authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        403:\n          description: The requesting user isn't authorized to access the project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: A project isn't hosted at this location\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - project\n    put:\n      tags:\n        - Projects\n      summary: Creates or Updates a project\n      description: |-\n        Since this endpoint can be used to both update and to create a\n        project, the request body depends on the intent.\n\n        ### Creation\n\n        See the POST documentation for the project collection for an\n        example of the request body.\n\n        Note: The `key` should not be specified in the body of request\n        (since it is already present in the URL). The `name` is required,\n        everything else is optional.\n\n        ### Update\n\n        See the POST documentation for the project collection for an\n        example of the request body.\n\n        Note: The key is not required in the body (since it is already in\n        the URL). The key may be specified in the body, if the intent is\n        to change the key itself. In such a scenario, the location of the\n        project is changed and is returned in the `Location` header of the\n        response.\n      operationId: createOrUpdateProject\n      parameters:\n        - name: project_key\n          in: path\n          description: |\n            The project in question. This is the actual `key` assigned to the project.\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The project object\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/project\"\n        required: true\n      responses:\n        200:\n          description: The existing project is has been updated\n          headers:\n            Location:\n              description: |-\n                The location of the project. This header is only provided when the project key is updated\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n        201:\n          description: A new project has been created\n          headers:\n            Location:\n              description: The location of the newly created project\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/project\"\n        403:\n          description:\n            The requesting user isn't authorized to update or create the\n            project.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description:\n            A workspace doesn't exist at the location. Note that the project's\n            absence from this location doesn't raise a 404, since a PUT at a non-existent\n            location can be used to create a new project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - project:write\n      x-codegen-request-body-name: _body\n    delete:\n      tags:\n        - Projects\n      summary: Deletes a project.\n      description: |-\n        Deletes this project. This is an irreversible operation.\n\n        You cannot delete a project that still contains repositories.\n        To delete the project, [delete](../../../repositories/%7Bworkspace%7D/%7Brepo_slug%7D#delete)\n        or transfer the repositories first.\n\n        Example:\n        ```\n        $ curl -X DELETE https://api.bitbucket.org/2.0/bbworkspace1/PROJ\n        ```\n      operationId: deleteProject\n      parameters:\n        - name: project_key\n          in: path\n          description: |\n            The project in question. This is the actual `key` assigned\n            to the project.\n          required: true\n          schema:\n            type: string\n        - name: workspace\n          in: path\n          description: |\n            This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successful deletion.\n        403:\n          description:\n            The requesting user isn't authorized to delete the project\n            or the project isn't empty.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        404:\n          description: A project isn't hosted at this location.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n      security:\n        - oauth2:\n            - project:write\ncomponents:\n  schemas:\n    paginated_repositories:\n      title: Paginated Repositories\n      type: object\n      properties:\n        size:\n          minimum: 0\n          type: integer\n          description: Total number of objects in the response. This is an optional\n            element that is not provided in all responses, as it can be expensive\n            to compute.\n        page:\n          minimum: 1\n          type: integer\n          description: Page number of the current results. This is an optional element that is not provided in all responses.\n        pagelen:\n          minimum: 1\n          type: integer\n          description: Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.\n        next:\n          type: string\n          description: Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.\n          format: uri\n        previous:\n          type: string\n          description: Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.\n          format: uri\n        values:\n          minItems: 0\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/repository'\n      description: A paginated list of repositories.\n    comment:\n      allOf:\n        - title: Comment\n          type: object\n          properties:\n            id:\n              type: integer\n              description: The ID of the comment\n            created_on:\n              type: string\n              format: date-time\n              description: The created date of the comment\n            updated_on:\n              type: string\n              format: date-time\n              nullable: true\n              description: The updated date of the comment\n            content:\n              $ref: \"#/components/schemas/content\"\n            user:\n              $ref: \"#/components/schemas/user\"\n            deleted:\n              type: boolean\n              description: Indicates whether the comment is deleted\n            parent:\n              $ref: \"#/components/schemas/comment\"\n            inline:\n              $ref: \"#/components/schemas/inline\"\n            links:\n              $ref: \"#/components/schemas/links\"\n          description:\n            The base type for all comments. This type should be considered abstract. Each of the \"commentable\" resources defines its own subtypes (e.g.`issue_comment`).\n    pullrequest_commit:\n      title: Pull Request Commit\n      type: object\n      properties:\n        hash:\n          pattern: \"[0-9a-f]{7,}?\"\n          type: string\n    inline:\n      description: The comment's anchor line detail\n      required:\n        - path\n      type: object\n      properties:\n        to:\n          minimum: 1\n          type: integer\n          description: The comment's anchor line in the new version of the file.\n            If the 'from' line is also provided, this value will be removed.\n        from:\n          minimum: 1\n          type: integer\n          description: The comment's anchor line in the old version of the file.\n        path:\n          type: string\n          description: The path of the file this comment is anchored to.\n    link:\n      title: Link\n      type: object\n      properties:\n        href:\n          type: string\n          format: uri\n        name:\n          type: string\n      description: A link to a resource related to this object.\n    clone:\n      type: array\n      items:\n        $ref: \"#/components/schemas/link\"\n    pullrequest_branch:\n      title: Pull Request Branch\n      type: object\n      properties:\n        name:\n          type: string\n        merge_strategies:\n          type: array\n          description:\n            Available merge strategies, when this endpoint is the destination\n            of the pull request\n          items:\n            type: string\n            enum:\n              - merge_commit\n              - squash\n              - fast_forward\n        default_merge_strategy:\n          type: string\n          description:\n            The default merge strategy, when this endpoint is the destination\n            of the pull request\n    links:\n      title: Links\n      type: object\n      description: links to a resource related to comment object.\n      properties:\n        self:\n          $ref: \"#/components/schemas/link\"\n        html:\n          $ref: \"#/components/schemas/link\"\n        code:\n          $ref: \"#/components/schemas/link\"\n        commits:\n          $ref: \"#/components/schemas/link\"\n        approve:\n          $ref: \"#/components/schemas/link\"\n        diff:\n          $ref: \"#/components/schemas/link\"\n        diffstat:\n          $ref: \"#/components/schemas/link\"\n        comments:\n          $ref: \"#/components/schemas/link\"\n        activity:\n          $ref: \"#/components/schemas/link\"\n        merge:\n          $ref: \"#/components/schemas/link\"\n        decline:\n          $ref: \"#/components/schemas/link\"\n        name:\n          type: string\n        avatar:\n          $ref: \"#/components/schemas/link\"\n        followers:\n          $ref: \"#/components/schemas/link\"\n        following:\n          $ref: \"#/components/schemas/link\"\n        repositories:\n          $ref: \"#/components/schemas/link\"\n        pullrequests:\n          $ref: \"#/components/schemas/link\"\n        forks:\n          $ref: \"#/components/schemas/link\"\n        watchers:\n          $ref: \"#/components/schemas/link\"\n        downloads:\n          $ref: \"#/components/schemas/link\"\n        clone:\n          $ref: \"#/components/schemas/clone\"\n        hooks:\n          $ref: \"#/components/schemas/link\"\n        attachments:\n          $ref: \"#/components/schemas/link\"\n        watch:\n          $ref: \"#/components/schemas/link\"\n        vote:\n          $ref: \"#/components/schemas/link\"\n        members:\n          $ref: \"#/components/schemas/link\"\n        owners:\n          $ref: \"#/components/schemas/link\"\n        projects:\n          $ref: \"#/components/schemas/link\"\n        snippets:\n          $ref: \"#/components/schemas/link\"\n    title:\n      type: object\n      properties:\n        raw:\n          type: string\n          description: The text as it was typed by a user\n        markup:\n          type: string\n          description: The type of markup language the raw content is to be interpreted in\n          enum:\n            - markdown\n            - creole\n            - plaintext\n        html:\n          type: string\n          description: The user's content rendered as HTML\n    description:\n      type: object\n      properties:\n        raw:\n          type: string\n          description: The text as it was typed by a user\n        markup:\n          type: string\n          description: The type of markup language the raw content is to be interpreted in.\n          enum:\n            - markdown\n            - creole\n            - plaintext\n        html:\n          type: string\n          description: The user's content rendered as HTML\n    reason:\n      type: object\n      properties:\n        raw:\n          type: string\n          description: The text as it was typed by a user\n        markup:\n          type: string\n          description: The type of markup language the raw content is to be interpreted in.\n          enum:\n            - markdown\n            - creole\n            - plaintext\n        html:\n          type: string\n          description: The user's content rendered as HTML\n    rendered:\n      title: Rendered Pull Request Markup\n      type: object\n      properties:\n        title:\n          $ref: \"#/components/schemas/title\"\n        description:\n          $ref: \"#/components/schemas/description\"\n        reason:\n          $ref: \"#/components/schemas/reason\"\n      description: User provided pull request text, interpreted in a markup language and rendered in HTML\n    summary:\n      type: object\n      description: The summary of the pull request\n      properties:\n        raw:\n          type: string\n          description: The text as it was typed by a user\n        markup:\n          type: string\n          description: The type of markup language the raw content is to be interpreted in.\n          enum:\n            - markdown\n            - creole\n            - plaintext\n        html:\n          type: string\n          description: The user's content rendered as HTML\n    merge_commit:\n      title: Pull Request Commit\n      type: object\n      description: The pull request commit\n      properties:\n        hash:\n          pattern: \"[0-9a-f]{7,}?\"\n          type: string\n    issue_comment:\n      allOf:\n        - $ref: \"#/components/schemas/comment\"\n        - title: Issue Comment\n          type: object\n          properties:\n            issue:\n              $ref: \"#/components/schemas/issue\"\n          description: A issue comment.\n    paginated_issue_comments:\n      title: Paginated Issue Comments\n      type: object\n      properties:\n        size:\n          minimum: 0\n          type: integer\n          description:\n            Total number of objects in the response. This is an optional\n            element that is not provided in all responses, as it can be expensive\n            to compute\n        page:\n          minimum: 1\n          type: integer\n          description:\n            Page number of the current results. This is an optional element\n            that is not provided in all responses\n        pagelen:\n          minimum: 1\n          type: integer\n          description:\n            Current number of objects on the existing page. The default\n            value is 10 with 100 being the maximum allowed value. Individual APIs\n            may enforce different values\n        next:\n          type: string\n          description:\n            Link to the next page if it exists. The last page of a collection\n            does not have this value. Use this link to navigate the result set and\n            refrain from constructing your own URLs\n          format: uri\n        previous:\n          type: string\n          description:\n            Link to previous page if it exists. A collections first page\n            does not have this value. This is an optional element that is not provided\n            in all responses. Some result sets strictly support forward navigation\n            and never provide previous links. Clients must anticipate that backwards\n            navigation is not always available. Use this link to navigate the result\n            set and refrain from constructing your own URLs\n          format: uri\n        values:\n          description: An array of issue comment objects returned by the operation\n          minItems: 0\n          uniqueItems: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/issue_comment\"\n      description: A paginated list of issue comments\n    workspace:\n      allOf:\n        - title: Workspace\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            uuid:\n              type: string\n              description: The workspace's immutable ID\n            name:\n              type: string\n              description: The name of the workspace\n            slug:\n              type: string\n              description: The short label that identifies this workspace\n            is_private:\n              type: boolean\n              description: |-\n                Indicates whether the workspace is publicly accessible, or whether it is\n                private to the members and consequently only visible to members.\n                Note that private workspaces cannot contain public repositories\n            created_on:\n              type: string\n              format: date-time\n              description: The created date/time of the workspace\n            updated_on:\n              type: string\n              format: date-time\n              description: The last updated date/time of the workspace\n          description: |-\n            A Bitbucket workspace.\n                        Workspaces are used to organize repositories\n    pullrequest_endpoint:\n      title: Pull Request Endpoint\n      type: object\n      properties:\n        repository:\n          $ref: \"#/components/schemas/repository\"\n        branch:\n          $ref: \"#/components/schemas/pullrequest_branch\"\n        commit:\n          $ref: \"#/components/schemas/pullrequest_commit\"\n    pullrequest:\n      allOf:\n        - title: Pull Request\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            id:\n              type: integer\n              description: The pull request's unique ID. Note that pull request IDs are only unique within their associated repository\n            title:\n              type: string\n              description: Title of the pull request\n            rendered:\n              $ref: \"#/components/schemas/rendered\"\n            summary:\n              $ref: \"#/components/schemas/summary\"\n            state:\n              type: string\n              description: The pull request's current status\n              enum:\n                - MERGED\n                - SUPERSEDED\n                - OPEN\n                - DECLINED\n            author:\n              $ref: \"#/components/schemas/account\"\n            source:\n              $ref: \"#/components/schemas/pullrequest_endpoint\"\n            destination:\n              $ref: \"#/components/schemas/pullrequest_endpoint\"\n            merge_commit:\n              $ref: \"#/components/schemas/merge_commit\"\n            comment_count:\n              minimum: 0\n              type: integer\n              description: The number of comments for a specific pull request\n            task_count:\n              minimum: 0\n              type: integer\n              description: The number of open tasks for a specific pull request\n            close_source_branch:\n              type: boolean\n              description: A boolean flag indicating if merging the pull request closes the source branch\n            closed_by:\n              $ref: \"#/components/schemas/account\"\n            reason:\n              type: string\n              description: Explains why a pull request was declined. This field is only applicable to pull requests in rejected state\n            created_on:\n              type: string\n              description: The ISO8601 timestamp the request was created\n              format: date-time\n            updated_on:\n              type: string\n              description: The ISO8601 timestamp the request was last updated\n              format: date-time\n            reviewers:\n              type: array\n              description:\n                The list of users that were added as reviewers on this pull request when it was created.\n                For performance reasons, the API only includes this list on a pull request's `self` URL.\n              items:\n                $ref: \"#/components/schemas/account\"\n            participants:\n              type: array\n              description: The list of users that are collaborating on this\n              items:\n                $ref: \"#/components/schemas/participant\"\n          description: A pull request object\n    component:\n      allOf:\n        - title: Component\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            name:\n              type: string\n              description: The name of the component\n            id:\n              type: integer\n              description: The ID of the component\n          description: A component as defined in a repository's issue tracker\n    version:\n      allOf:\n        - title: Version\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            name:\n              type: string\n              description: The name of the version\n            id:\n              type: integer\n              description: The ID of the version\n          description: A version as defined in a repository's issue tracker\n    milestone:\n      allOf:\n        - title: Milestone\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            name:\n              type: string\n              description: The name of the milestone\n            id:\n              type: integer\n              description: The ID of the milestone\n          description: A milestone as defined in a repository's issue tracker\n    user:\n      allOf:\n        - $ref: \"#/components/schemas/account\"\n        - title: User\n          type: object\n          properties:\n            is_staff:\n              type: boolean\n              description: Indicates whether the user represents staff\n            account_id:\n              type: string\n              description: The user's Atlassian account ID\n          description: A user object\n    participant:\n      allOf:\n        - title: Participant\n          type: object\n          properties:\n            user:\n              $ref: \"#/components/schemas/user\"\n            role:\n              type: string\n              description: The type of the participant\n              enum:\n                - PARTICIPANT\n                - REVIEWER\n            approved:\n              type: boolean\n              description: Indicates whether participant is approved\n            state:\n              type: string\n              description: The state of the participant\n              enum:\n                - approved\n                - changes_requested\n            participated_on:\n              type: string\n              description:\n                The ISO8601 timestamp of the participant's action. For approvers,\n                this is the time of their approval. For commenters and pull request\n                reviewers who are not approvers, this is the time they last commented,\n                or null if they have not commented.\n              format: date-time\n          description:\n            Object describing a user's role on resources like commits or\n            pull requests.\n    author:\n      allOf:\n        - title: Author\n          type: object\n          properties:\n            raw:\n              type: string\n              description:\n                The raw author value from the repository. This may be the\n                only value available if the author does not match a user in Bitbucket\n            user:\n              $ref: \"#/components/schemas/account\"\n          description: The author of a change in a repository\n    base_commit:\n      allOf:\n        - title: Base Commit\n          type: object\n          properties:\n            hash:\n              pattern: \"[0-9a-f]{7,}?\"\n              type: string\n              description: The hash value of the base commit\n            date:\n              type: string\n              format: date-time\n              description: The date of the base commit\n            author:\n              $ref: \"#/components/schemas/author\"\n            message:\n              type: string\n              description: The message of the base commit\n            summary:\n              $ref: \"#/components/schemas/summary\"\n            parents:\n              minItems: 0\n              type: array\n              description: The parent base commit\n              items:\n                $ref: \"#/components/schemas/base_commit\"\n          description: The common base type for both repository and snippet commits\n    commit:\n      allOf:\n        - $ref: \"#/components/schemas/base_commit\"\n        - title: Commit\n          type: object\n          properties:\n            repository:\n              $ref: \"#/components/schemas/repository\"\n            participants:\n              minItems: 0\n              type: array\n              description: The participants of the commit\n              items:\n                $ref: \"#/components/schemas/participant\"\n          description: A repository commit object.\n    ref:\n      title: Ref\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of the ref object\n        links:\n          $ref: \"#/components/schemas/links\"\n        name:\n          type: string\n          description: The name of the ref.\n        target:\n          $ref: \"#/components/schemas/commit\"\n      description: A ref object, representing a branch or tag in a repository\n    branch:\n      allOf:\n        - $ref: \"#/components/schemas/ref\"\n        - title: Branch\n          type: object\n          properties:\n            merge_strategies:\n              type: array\n              description: Available merge strategies for pull requests targeting this branch.\n              items:\n                type: string\n                enum:\n                  - merge_commit\n                  - squash\n                  - fast_forward\n            default_merge_strategy:\n              type: string\n              description: The default merge strategy for pull requests targeting this branch.\n          description: A branch object, representing a branch in a repository\n    team:\n      allOf:\n        - $ref: \"#/components/schemas/account\"\n        - title: Team\n          type: object\n          description: A team object.\n      description: A team object.\n    project:\n      allOf:\n        - title: Project\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            uuid:\n              type: string\n              description: The project's immutable id\n            key:\n              type: string\n              description: The project's key.\n            owner:\n              $ref: \"#/components/schemas/team\"\n            name:\n              type: string\n              description: The name of the project\n            description:\n              type: string\n              description: The project description\n            is_private:\n              type: boolean\n              description: Indicates whether the project is publicly accessible, or whether it is private to the team and consequently only visible to team members. Note that private projects cannot contain public repositories.\n            created_on:\n              type: string\n              format: date-time\n              description: The created date/time of the project\n            updated_on:\n              type: string\n              format: date-time\n              description: The last updated date/time of the project\n          description: |-\n            A Bitbucket project.\n                        Projects are used by teams to organize repositories\n    account:\n      allOf:\n        - title: Account\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            username:\n              pattern: ^[a-zA-Z0-9_\\-]+$\n              type: string\n              description: Username of the account\n            nickname:\n              type: string\n              description:\n                Account name defined by the owner. Should be used instead\n                of the \"username\" field. Note that \"nickname\" cannot be used in place\n                of \"username\" in URLs and queries, as \"nickname\" is not guaranteed to\n                be unique.\n            account_status:\n              type: string\n              description:\n                The status of the account. Currently the only possible value\n                is \"active\", but more values may be added in the future\n            display_name:\n              type: string\n              description: Display name of the account\n            website:\n              type: string\n              description: Website of the account\n            created_on:\n              type: string\n              format: date-time\n              description: The created date of the account\n            uuid:\n              type: string\n              description: The UUID of the account\n            has_2fa_enabled:\n              type: boolean\n              description: Indicates whether two factor authentication is on\n          description: An account object.\n    repository:\n      allOf:\n        - title: Repository\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            uuid:\n              type: string\n              description:\n                The repository's immutable id. This can be used as a substitute\n                for the slug segment in URLs. Doing this guarantees your URLs will survive\n                renaming of the repository by its owner, or even transfer of the repository\n                to a different user\n            full_name:\n              type: string\n              description:\n                The concatenation of the repository owner's username and\n                the slugified name, e.g. \"evzijst/interruptingcow\". This is the same\n                string used in Bitbucket URLs\n            is_private:\n              type: boolean\n              description: Indicates whether the repository is private\n            parent:\n              $ref: \"#/components/schemas/repository\"\n            scm:\n              type: string\n              description: source control\n              enum:\n                - git\n            owner:\n              $ref: \"#/components/schemas/account\"\n            name:\n              type: string\n              description: The name of the repository\n            description:\n              type: string\n              description: The description of the repository\n            created_on:\n              type: string\n              format: date-time\n              description: The created data/time of the repository\n            updated_on:\n              type: string\n              format: date-time\n              description: The last updated date/time of the repository\n            size:\n              type: integer\n              description: The size of the repository\n            language:\n              type: string\n              description: The language of the repository\n            has_issues:\n              type: boolean\n              description: Indicates whether repository includes issues\n            has_wiki:\n              type: boolean\n              description: Indicates whether repository has a wiki\n            fork_policy:\n              type: string\n              description: Controls the rules for forking this repository. ()allow_forks)-unrestricted forking (no_public_forks) - restrict forking to private forks (forks cannot be made public later) (no_forks) -deny all forking\n              enum:\n                - allow_forks\n                - no_public_forks\n                - no_forks\n            project:\n              $ref: \"#/components/schemas/project\"\n            mainbranch:\n              $ref: \"#/components/schemas/branch\"\n          description: A Bitbucket repository\n    paginated_pullrequests:\n      title: Paginated Pull Requests\n      type: object\n      properties:\n        size:\n          minimum: 0\n          type: integer\n          description: Total number of objects in the response. This is an optional\n            element that is not provided in all responses, as it can be expensive\n            to compute.\n        page:\n          minimum: 1\n          type: integer\n          description: Page number of the current results. This is an optional element\n            that is not provided in all responses.\n        pagelen:\n          minimum: 1\n          type: integer\n          description: Current number of objects on the existing page. The default\n            value is 10 with 100 being the maximum allowed value. Individual APIs\n            may enforce different values.\n        next:\n          type: string\n          description: Link to the next page if it exists. The last page of a collection\n            does not have this value. Use this link to navigate the result set and\n            refrain from constructing your own URLs.\n          format: uri\n        previous:\n          type: string\n          description: Link to previous page if it exists. A collections first page\n            does not have this value. This is an optional element that is not provided\n            in all responses. Some result sets strictly support forward navigation\n            and never provide previous links. Clients must anticipate that backwards\n            navigation is not always available. Use this link to navigate the result\n            set and refrain from constructing your own URLs.\n          format: uri\n        values:\n          minItems: 0\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/pullrequest'\n      description: A paginated list of pullrequests.\n    issue:\n      allOf:\n        - title: Issue\n          type: object\n          properties:\n            links:\n              $ref: \"#/components/schemas/links\"\n            id:\n              type: integer\n              description: The ID of the issue\n            repository:\n              $ref: \"#/components/schemas/repository\"\n            title:\n              type: string\n              description: The title of the issue\n            reporter:\n              $ref: \"#/components/schemas/user\"\n            assignee:\n              $ref: \"#/components/schemas/user\"\n            created_on:\n              type: string\n              format: date-time\n              description: The created date/time of the issue\n            updated_on:\n              type: string\n              format: date-time\n              nullable: true\n              description: The last updated date/time of the issue\n            edited_on:\n              type: string\n              format: date-time\n              description: The last edited date/time of the issue\n              nullable: true\n            state:\n              type: string\n              description: The state of the issue\n              enum:\n                - new\n                - open\n                - resolved\n                - on hold\n                - invalid\n                - duplicate\n                - wontfix\n                - closed\n            kind:\n              type: string\n              description: The kind of the issue\n              enum:\n                - bug\n                - enhancement\n                - proposal\n                - task\n            priority:\n              type: string\n              description: The priority level of the issue\n              enum:\n                - trivial\n                - minor\n                - major\n                - critical\n                - blocker\n            milestone:\n              $ref: \"#/components/schemas/milestone\"\n            version:\n              $ref: \"#/components/schemas/version\"\n            component:\n              $ref: \"#/components/schemas/component\"\n            votes:\n              type: integer\n              description: The number of votes\n            content:\n              $ref: \"#/components/schemas/content\"\n          description: An issue.\n    content:\n      type: object\n      description: The content of the issue\n      properties:\n        raw:\n          type: string\n          description: The text as it was typed by a user.\n        markup:\n          type: string\n          description: The type of markup language the raw content is to be interpreted in.\n          enum:\n            - markdown\n            - creole\n            - plaintext\n        html:\n          type: string\n          description: The user's content rendered as HTML\n    errorDetail:\n      required:\n        - message\n      type: object\n      description: The error detail\n      properties:\n        message:\n          type: string\n        detail:\n          type: string\n    error:\n      title: Error\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of the error\n        error:\n          $ref: \"#/components/schemas/errorDetail\"\n      description:\n        Base type for most resource objects. It defines the common `type`\n        element that identifies an object's type. It also identifies the element as\n        Swagger's `discriminator`.\n    paginated_issues:\n      title: Paginated Issues\n      type: object\n      properties:\n        size:\n          minimum: 0\n          type: integer\n          description:\n            Total number of objects in the response. This is an optional\n            element that is not provided in all responses, as it can be expensive\n            to compute\n        page:\n          minimum: 1\n          type: integer\n          description:\n            Page number of the current results. This is an optional element\n            that is not provided in all responses\n        pagelen:\n          minimum: 1\n          type: integer\n          description:\n            Current number of objects on the existing page. The default\n            value is 10 with 100 being the maximum allowed value. Individual APIs\n            may enforce different values\n        next:\n          type: string\n          description:\n            Link to the next page if it exists. The last page of a collection\n            does not have this value. Use this link to navigate the result set and\n            refrain from constructing your own URLs\n          format: uri\n        previous:\n          type: string\n          description:\n            Link to previous page if it exists. A collections first page\n            does not have this value. This is an optional element that is not provided\n            in all responses. Some result sets strictly support forward navigation\n            and never provide previous links. Clients must anticipate that backwards\n            navigation is not always available. Use this link to navigate the result\n            set and refrain from constructing your own URLs\n          format: uri\n        values:\n          minItems: 0\n          uniqueItems: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/issue\"\n          description: An array of issues\n      description: A paginated list of issues.\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      description: OAuth 2 as per [RFC-6749](https://tools.ietf.org/html/rfc6749).\n      flows:\n        authorizationCode:\n          authorizationUrl: https://bitbucket.org/site/oauth2/authorize\n          tokenUrl: https://bitbucket.org/site/oauth2/access_token\n          scopes:\n            wiki: Read and modify your repositories' wikis\n            pullrequest:write: Read and modify your repositories and their pull requests\n            pipeline:variable:\n              Access your repositories' build pipelines and configure\n              their variables\n            project:write:\n              Read and modify your workspace's project settings, and\n              read and transfer repositories within your workspace's projects\n            pipeline:write: Access and rerun your repositories' build pipelines\n            snippet: Read your snippets\n            repository:delete: Delete your repositories\n            repository:write: Read and modify your repositories\n            issue: Read your repositories' issues\n            email: Read your account's primary email address\n            repository: Read your repositories\n            issue:write: Read and modify your repositories' issues\n            webhook: Read and modify your repositories' webhooks\n            pipeline: Access your repositories' build pipelines\n            snippet:write: Read and modify your snippets\n            account: Read your account information\n            repository:admin: Administer your repositories\n            pullrequest: Read your repositories and their pull requests\n            project:\n              Read your workspace's project settings and read repositories\n              contained within your workspace's projects\n            team: Read your team membership information\n            team:write: Read and modify your team membership information\n            account:write: Read and modify your account information\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@f9db3eb6d773bf1ad2e81f3afbe55aad28286517/-/blob/tool-tests/15-nullable/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/f9db3eb6d773bf1ad2e81f3afbe55aad28286517/tool-tests/15-nullable/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/repositories/{workspace}\": get: responses: code 200: contents: application/json: generate schema: field values: item: allOf: field mainbranch: allOf: field target: allOf: schema type mismatch:  and object"
}