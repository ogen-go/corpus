{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gooddata/gooddata-python-sdk"
		},
		"file": {
			"name": "gooddata-scan-client.json",
			"size": 0,
			"path": "schemas/gooddata-scan-client.json",
			"byteSize": 18669,
			"content": "{\n  \"components\": {\n    \"schemas\": {\n      \"ColumnWarning\": {\n        \"description\": \"Warning related to single column.\",\n        \"properties\": {\n          \"message\": {\n            \"description\": \"Warning message related to the column.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"name\": {\n            \"description\": \"Column name.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"message\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"DataSourceSchemata\": {\n        \"description\": \"Result of getSchemata. Contains list of available DB schema names.\",\n        \"properties\": {\n          \"schemaNames\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"schemaNames\"\n        ],\n        \"type\": \"object\"\n      },\n      \"DeclarativeColumn\": {\n        \"description\": \"A table column.\",\n        \"properties\": {\n          \"dataType\": {\n            \"description\": \"Column type\",\n            \"enum\": [\n              \"INT\",\n              \"STRING\",\n              \"DATE\",\n              \"NUMERIC\",\n              \"TIMESTAMP\",\n              \"TIMESTAMP_TZ\",\n              \"BOOLEAN\"\n            ],\n            \"example\": \"INT\",\n            \"type\": \"string\"\n          },\n          \"isPrimaryKey\": {\n            \"description\": \"Is column part of primary key?\",\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"description\": \"Column name\",\n            \"example\": \"customer_id\",\n            \"type\": \"string\"\n          },\n          \"referencedTableColumn\": {\n            \"description\": \"Referenced table (Foreign key)\",\n            \"example\": \"customer_id\",\n            \"type\": \"string\"\n          },\n          \"referencedTableId\": {\n            \"description\": \"Referenced table (Foreign key)\",\n            \"example\": \"customers\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"dataType\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"DeclarativeTable\": {\n        \"description\": \"A database table.\",\n        \"properties\": {\n          \"columns\": {\n            \"description\": \"An array of physical columns\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DeclarativeColumn\"\n            },\n            \"type\": \"array\"\n          },\n          \"id\": {\n            \"description\": \"Table id.\",\n            \"example\": \"customers\",\n            \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n            \"type\": \"string\"\n          },\n          \"namePrefix\": {\n            \"description\": \"Table or view name prefix used in scan. Will be stripped when generating LDM.\",\n            \"example\": \"out_gooddata\",\n            \"type\": \"string\"\n          },\n          \"path\": {\n            \"description\": \"Path to table.\",\n            \"example\": [\n              \"table_schema\",\n              \"table_name\"\n            ],\n            \"items\": {\n              \"example\": \"table_name\",\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"type\": {\n            \"description\": \"Table type: TABLE or VIEW.\",\n            \"example\": \"VIEW\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"columns\",\n          \"id\",\n          \"path\",\n          \"type\"\n        ],\n        \"type\": \"object\"\n      },\n      \"DeclarativeTables\": {\n        \"description\": \"A physical data model (PDM) tables.\",\n        \"properties\": {\n          \"tables\": {\n            \"description\": \"An array of physical database tables.\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/DeclarativeTable\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"tables\"\n        ],\n        \"type\": \"object\"\n      },\n      \"ScanRequest\": {\n        \"description\": \"A request containing all information critical to model scanning.\",\n        \"properties\": {\n          \"scanTables\": {\n            \"description\": \"A flag indicating whether the tables should be scanned.\",\n            \"example\": true,\n            \"type\": \"boolean\"\n          },\n          \"scanViews\": {\n            \"description\": \"A flag indicating whether the views should be scanned.\",\n            \"example\": true,\n            \"type\": \"boolean\"\n          },\n          \"schemata\": {\n            \"description\": \"What schemata will be scanned.\",\n            \"example\": [\n              \"tpch\",\n              \"demo\"\n            ],\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"separator\": {\n            \"description\": \"A separator between prefixes and the names.\",\n            \"example\": \"__\",\n            \"type\": \"string\"\n          },\n          \"tablePrefix\": {\n            \"description\": \"Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.\",\n            \"example\": \"out_table\",\n            \"type\": \"string\"\n          },\n          \"viewPrefix\": {\n            \"description\": \"Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.\",\n            \"example\": \"out_view\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"scanTables\",\n          \"scanViews\",\n          \"separator\"\n        ],\n        \"type\": \"object\"\n      },\n      \"ScanResultPdm\": {\n        \"description\": \"Result of scan of data source physical model.\",\n        \"properties\": {\n          \"pdm\": {\n            \"$ref\": \"#/components/schemas/DeclarativeTables\"\n          },\n          \"warnings\": {\n            \"items\": {\n              \"$ref\": \"#/components/schemas/TableWarning\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"pdm\",\n          \"warnings\"\n        ],\n        \"type\": \"object\"\n      },\n      \"TableWarning\": {\n        \"description\": \"Warnings related to single table.\",\n        \"properties\": {\n          \"columns\": {\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ColumnWarning\"\n            },\n            \"type\": \"array\"\n          },\n          \"message\": {\n            \"description\": \"Warning message related to the table.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"name\": {\n            \"description\": \"Table name.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"columns\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"TestDefinitionRequest\": {\n        \"description\": \"A request containing all information for testing data source definition.\",\n        \"properties\": {\n          \"password\": {\n            \"description\": \"Database user password.\",\n            \"example\": \"admin123\",\n            \"type\": \"string\"\n          },\n          \"schema\": {\n            \"description\": \"Database schema.\",\n            \"example\": \"public\",\n            \"type\": \"string\"\n          },\n          \"token\": {\n            \"description\": \"Secret for token based authentication for data sources which supports it.\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"description\": \"Type of database, where test should connect to.\",\n            \"enum\": [\n              \"POSTGRESQL\",\n              \"REDSHIFT\",\n              \"VERTICA\",\n              \"SNOWFLAKE\",\n              \"ADS\",\n              \"BIGQUERY\",\n              \"MSSQL\",\n              \"PRESTO\",\n              \"DREMIO\",\n              \"DRILL\"\n            ],\n            \"example\": \"POSTGRESQL\",\n            \"type\": \"string\"\n          },\n          \"url\": {\n            \"description\": \"URL to database in JDBC format, where test should connect to.\",\n            \"example\": \"jdbc:postgresql://localhost:5432/db_name\",\n            \"type\": \"string\"\n          },\n          \"username\": {\n            \"description\": \"Database user name.\",\n            \"example\": \"dbadmin\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"type\",\n          \"url\"\n        ],\n        \"type\": \"object\"\n      },\n      \"TestRequest\": {\n        \"description\": \"A request containing all information for testing existing data source.\",\n        \"type\": \"object\"\n      },\n      \"TestResponse\": {\n        \"description\": \"Response from data source testing.\",\n        \"properties\": {\n          \"error\": {\n            \"description\": \"Field containing more details in case of a failure. Details are available to a privileged user only.\",\n            \"example\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\",\n            \"type\": \"string\"\n          },\n          \"successful\": {\n            \"description\": \"A flag indicating whether test passed or not.\",\n            \"example\": true,\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"successful\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"info\": {\n    \"title\": \"OpenAPI definition\",\n    \"version\": \"v0\"\n  },\n  \"openapi\": \"3.0.1\",\n  \"paths\": {\n    \"/api/v1/actions/dataSource/test\": {\n      \"post\": {\n        \"description\": \"Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.\",\n        \"operationId\": \"testDataSourceDefinition\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TestDefinitionRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"An example of a successful connection\": {\n                    \"description\": \"An example of a successful connection\",\n                    \"value\": {\n                      \"successful\": true\n                    }\n                  },\n                  \"An example of an unsuccessful connection\": {\n                    \"description\": \"An example of an unsuccessful connection\",\n                    \"value\": {\n                      \"error\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\",\n                      \"successful\": false\n                    }\n                  }\n                },\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/TestResponse\"\n                }\n              }\n            },\n            \"description\": \"The result of the test of a data source connection.\"\n          }\n        },\n        \"summary\": \"Test connection by data source definition\",\n        \"tags\": [\n          \"actions\"\n        ],\n        \"x-gdc-security-info\": {\n          \"description\": \"Minimal organization permission required to use this endpoint.\",\n          \"permissions\": [\n            \"MANAGE\"\n          ]\n        }\n      }\n    },\n    \"/api/v1/actions/dataSources/{dataSourceId}/scan\": {\n      \"post\": {\n        \"description\": \"It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.\",\n        \"operationId\": \"scanDataSource\",\n        \"parameters\": [\n          {\n            \"description\": \"Data source id\",\n            \"example\": \"myPostgres\",\n            \"in\": \"path\",\n            \"name\": \"dataSourceId\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ScanRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"An example of a successful scan\": {\n                    \"description\": \"An example of a successful scan\",\n                    \"value\": {\n                      \"pdm\": {\n                        \"tables\": [\n                          {\n                            \"columns\": [\n                              {\n                                \"dataType\": \"NUMERIC\",\n                                \"isPrimaryKey\": false,\n                                \"name\": \"budget\"\n                              },\n                              {\n                                \"dataType\": \"STRING\",\n                                \"isPrimaryKey\": false,\n                                \"name\": \"category\"\n                              },\n                              {\n                                \"dataType\": \"NUMERIC\",\n                                \"isPrimaryKey\": false,\n                                \"name\": \"spend\"\n                              }\n                            ],\n                            \"id\": \"campaign_channels\",\n                            \"path\": [\n                              \"demo\",\n                              \"campaign_channels\"\n                            ],\n                            \"type\": \"TABLE\"\n                          }\n                        ]\n                      },\n                      \"warnings\": []\n                    }\n                  }\n                },\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ScanResultPdm\"\n                }\n              }\n            },\n            \"description\": \"The result of the scan.\"\n          }\n        },\n        \"summary\": \"Scan a database to get a physical data model (PDM)\",\n        \"tags\": [\n          \"actions\"\n        ],\n        \"x-gdc-security-info\": {\n          \"description\": \"Minimal permission required to use this endpoint.\",\n          \"permissions\": [\n            \"MANAGE\"\n          ]\n        }\n      }\n    },\n    \"/api/v1/actions/dataSources/{dataSourceId}/scanSchemata\": {\n      \"get\": {\n        \"description\": \"It scans a database and reads metadata. The result of the request contains a list of schema names of a database.\",\n        \"operationId\": \"getDataSourceSchemata\",\n        \"parameters\": [\n          {\n            \"description\": \"Data source id\",\n            \"example\": \"myPostgres\",\n            \"in\": \"path\",\n            \"name\": \"dataSourceId\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"An example of a successful scan\": {\n                    \"description\": \"An example of a successful scan\",\n                    \"value\": {\n                      \"schemaNames\": [\n                        \"demo\",\n                        \"public\"\n                      ]\n                    }\n                  }\n                },\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DataSourceSchemata\"\n                }\n              }\n            },\n            \"description\": \"The result of the scan schemata\"\n          }\n        },\n        \"summary\": \"Get a list of schema names of a database\",\n        \"tags\": [\n          \"actions\"\n        ],\n        \"x-gdc-security-info\": {\n          \"description\": \"Minimal permission required to use this endpoint.\",\n          \"permissions\": [\n            \"MANAGE\"\n          ]\n        }\n      }\n    },\n    \"/api/v1/actions/dataSources/{dataSourceId}/test\": {\n      \"post\": {\n        \"description\": \"Test if it is possible to connect to a database using an existing data source definition.\",\n        \"operationId\": \"testDataSource\",\n        \"parameters\": [\n          {\n            \"description\": \"Data source id\",\n            \"example\": \"myPostgres\",\n            \"in\": \"path\",\n            \"name\": \"dataSourceId\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TestRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"An example of a successful connection\": {\n                    \"description\": \"An example of a successful connection\",\n                    \"value\": {\n                      \"successful\": true\n                    }\n                  },\n                  \"An example of an unsuccessful connection\": {\n                    \"description\": \"An example of an unsuccessful connection\",\n                    \"value\": {\n                      \"error\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\",\n                      \"successful\": false\n                    }\n                  }\n                },\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/TestResponse\"\n                }\n              }\n            },\n            \"description\": \"The result of the test of a data source connection.\"\n          }\n        },\n        \"summary\": \"Test data source connection by data source id\",\n        \"tags\": [\n          \"actions\"\n        ],\n        \"x-gdc-security-info\": {\n          \"description\": \"Permissions required to test a data source.\",\n          \"permissions\": [\n            \"USE\"\n          ]\n        }\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"description\": \"GoodData.CN endpoint\",\n      \"url\": \"/\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"description\": \"| execution of some form of computation (RPC over JSON)\",\n      \"name\": \"actions\"\n    }\n  ]\n}\n",
			"canonicalURL": "/github.com/gooddata/gooddata-python-sdk@74c3484f95fd1afc1264c20edcd0225bf0981498/-/blob/schemas/gooddata-scan-client.json",
			"externalURLs": [
				{
					"url": "https://github.com/gooddata/gooddata-python-sdk/blob/74c3484f95fd1afc1264c20edcd0225bf0981498/schemas/gooddata-scan-client.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/v1/actions/dataSources/{dataSourceId}/scan\": post: parameters: \"dataSourceId\": string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?!`"
}