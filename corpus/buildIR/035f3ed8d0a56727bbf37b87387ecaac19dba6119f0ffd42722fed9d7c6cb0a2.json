{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackrox/acs-fleet-manager"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
			"byteSize": 12550,
			"content": "openapi: 3.0.0\ninfo:\n  description: The admin APIs for the fleet manager of Dinosaur service\n  title: Dinosaur Service Fleet Manager Admin APIs\n  version: 0.0.2\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- name: Admin APIs\npaths:\n  /api/dinosaurs_mgmt/v1/admin/dinosaurs:\n    get:\n      operationId: getDinosaurs\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the following `centralRequests` fields:\n\n          * host\n          * cloud_provider\n          * cluster_id\n          * created_at\n          * href\n          * id\n          * instance_type\n          * multi_az\n          * name\n          * organisation_id\n          * owner\n          * region\n          * status\n          * updated_at\n          * version\n\n          For example, to return all Central instances ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Central instances ordered by their name _and_ created date, use the following syntax:\n\n          ```sql\n          name asc, created_at asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of an\n          SQL statement. Allowed fields in the search are `cloud_provider`, `name`, `owner`, `region`, and `status`. Allowed comparators are `<>`, `=`, or `LIKE`.\n          Allowed joins are `AND` and `OR`. However, you can use a maximum of 10 joins in a search query.\n\n          Examples:\n\n          To return a Central instance with the name `my-central` and the region `aws`, use the following syntax:\n\n          ```\n          name = my-central and cloud_provider = aws\n          ```[p-]\n\n          To return a Central instance with a name that starts with `my`, use the following syntax:\n\n          ```\n          name like my%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Central instances\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = my-central and cloud_provider = aws\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DinosaurList'\n          description: Return a list of Dinosaur instances. This endpoint will return\n            all Dinosaur instances that are stored in the database and the are not\n            filtered based on user ids or org ids.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of Dinosaurs\n  /api/dinosaurs_mgmt/v1/admin/dinosaurs/{id}:\n    delete:\n      operationId: deleteDinosaurById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Perform the action in an asynchronous manner\n        explode: true\n        in: query\n        name: async\n        required: true\n        schema:\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dinosaur'\n          description: Dinosaur updated by ID\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Dinosaur found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a Dinosaur by ID\n    get:\n      operationId: getDinosaurById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dinosaur'\n          description: Dinosaur found by ID\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Dinosaur found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Return the details of Dinosaur instance by id\n    patch:\n      operationId: updateDinosaurById\n      parameters:\n      - description: The ID of record\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DinosaurUpdateRequest'\n        description: Dinosaur update data\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dinosaur'\n          description: Dinosaur updated by ID\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorised to access the service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Dinosaur found with the specified ID\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Update a Dinosaur instance by id\ncomponents:\n  schemas:\n    Dinosaur:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - required:\n        - dinosaur_operator_upgrading\n        - dinosaur_upgrading\n        - multi_az\n      - $ref: '#/components/schemas/Dinosaur_allOf'\n    DinosaurList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/DinosaurList_allOf'\n    DinosaurUpdateRequest:\n      example:\n        dinosaur_version: dinosaur_version\n        dinosaur_operator_version: dinosaur_operator_version\n      properties:\n        dinosaur_operator_version:\n          type: string\n        dinosaur_version:\n          type: string\n      type: object\n    Error:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/Error_allOf'\n    ObjectReference:\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n      type: object\n    List:\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n      required:\n      - items\n      - kind\n      - page\n      - size\n      - total\n      type: object\n    Dinosaur_allOf_routes:\n      properties:\n        domain:\n          type: string\n        router:\n          type: string\n    Dinosaur_allOf:\n      properties:\n        status:\n          description: 'Values: [accepted, preparing, provisioning, ready, failed,\n            deprovision, deleting] '\n          type: string\n        cloud_provider:\n          description: Name of Cloud used to deploy. For example AWS\n          type: string\n        multi_az:\n          type: boolean\n        region:\n          description: 'Values will be regions of specific cloud provider. For example:\n            us-east-1 for AWS'\n          type: string\n        owner:\n          type: string\n        name:\n          type: string\n        host:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        failed_reason:\n          type: string\n        actual_dinosaur_version:\n          type: string\n        actual_dinosaur_operator_version:\n          type: string\n        desired_dinosaur_version:\n          type: string\n        desired_dinosaur_operator_version:\n          type: string\n        dinosaur_upgrading:\n          type: boolean\n        dinosaur_operator_upgrading:\n          type: boolean\n        organisation_id:\n          type: string\n        subscription_id:\n          type: string\n        owner_account_id:\n          type: string\n        account_number:\n          type: string\n        instance_type:\n          type: string\n        quota_type:\n          type: string\n        routes:\n          items:\n            $ref: '#/components/schemas/Dinosaur_allOf_routes'\n          type: array\n        routes_created:\n          type: boolean\n        cluster_id:\n          type: string\n        namespace:\n          type: string\n    DinosaurList_allOf:\n      properties:\n        items:\n          items:\n            allOf:\n            - $ref: '#/components/schemas/Dinosaur'\n          type: array\n    Error_allOf:\n      properties:\n        code:\n          type: string\n        reason:\n          type: string\n        operation_id:\n          type: string\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/stackrox/acs-fleet-manager@af15bd701241c3c16e73122e0802af79acebb71f/-/blob/internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackrox/acs-fleet-manager/blob/af15bd701241c3c16e73122e0802af79acebb71f/internal/dinosaur/pkg/api/admin/private/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/dinosaurs_mgmt/v1/admin/dinosaurs\": get: responses: 200: contents: application/json: generate schema: allOf: field items: item: allOf: allOf: schema type mismatch: object and "
}