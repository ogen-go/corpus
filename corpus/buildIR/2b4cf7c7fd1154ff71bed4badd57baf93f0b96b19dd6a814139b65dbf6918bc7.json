{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cdimascio/express-openapi-validator"
		},
		"file": {
			"name": "serialized.objects.yaml",
			"size": 0,
			"path": "test/resources/serialized.objects.yaml",
			"byteSize": 4481,
			"content": "openapi: \"3.0.2\"\ninfo:\n  version: 1.0.0\n  title: Request Query Serialization\n  description: Request Query Serialization Test\n\nservers:\n  - url: /v1/\n\npaths:\n  /deep_object:\n    x-vendorExtension1: accounts\n    get:\n      x-vendorExtension2: accounts\n      summary: \"retrieve a deep object\"\n      operationId: getDeepObject\n      parameters:\n        - in: query\n          style: deepObject\n          explode: true\n          name: settings\n          schema:\n            type: object\n            properties:\n              tag_ids:\n                type: array\n                items:\n                  type: integer\n                  minimum: 0\n                minItems: 1\n              state:\n                type: string\n                enum: [\"default\", \"validated\", \"pending\"]\n                default: \"default\"\n                description: \"Filter the tags by their validity. The default value ('default') stands for no filtering.\"\n              greeting:\n                type: string\n                default: \"hello\"\n      responses:\n        \"200\":\n          description: the object\n\n  /deep_object_2:\n    get:\n      summary: \"retrieve a deep object\"\n      operationId: getDeepObject2\n      parameters:\n        - in: query\n          style: deepObject\n          explode: true\n          name: settings\n          schema:\n            $ref: '#/components/schemas/Deep'\n      responses:\n        \"200\":\n          description: the object\n  /tags:\n    get:\n      summary: \"Retrieve all tags\"\n      operationId: getTags\n      parameters:\n        - in: query\n          style: form\n          name: settings\n          explode: true\n          schema:\n            type: object\n            properties:\n              tag_ids:\n                type: array\n                items:\n                  type: integer\n                  minimum: 0\n                minItems: 1\n              state:\n                type: string\n                enum: [\"default\", \"validated\", \"pending\"]\n                default: \"default\"\n                description: \"Filter the tags by their validity. The default value ('default') stands for no filtering.\"\n      responses:\n        \"200\":\n          description: \"An array of tag\"\n  /serialisable:\n    get:\n      summary: \"Retrieve something\"\n      parameters:\n        - in: query\n          style: form\n          name: settings\n          description: Should be serialized\n          explode: true\n          schema:\n            allOf:\n              - type: object\n                properties:\n                  onlyValidated:\n                    type: boolean\n                    default: true\n                  onlySelected:\n                    type: array\n                    default: []\n                    uniqueItems: true\n                    items:\n                      type: integer\n                      minimum: 0\n                      example: 42\n        - in: query\n          name: timestamp\n          description: Should not be serialized\n          schema:\n            description: Value passed to Javascript's `new Date()`.\n            example: \"2019-06-24T12:34:56.789Z\"\n            anyOf:\n              - type: integer\n                description: Unix milliseconds\n                example: 1234567890123\n                nullable: true\n              - type: string\n                description: ISO Timestamp\n                pattern: \\S\n        - in: query\n          name: fooBar\n          description: Should be serialized if an object\n          schema:\n            oneOf:\n              - type: string\n                pattern: fooBar\n              - type: object\n                properties:\n                  foo:\n                    type: string\n                    pattern: bar\n                additionalProperties: false\n                required:\n                  - foo\n      responses:\n        \"200\":\n          description: parsed \u0026 validated query params\n          content:\n            application/json:\n              schema:\n                type: object\n\ncomponents:\n  schemas:\n    Deep: \n      type: object\n      properties:\n        tag_ids:\n          type: array\n          items:\n            type: integer\n            minimum: 0\n          minItems: 1\n        state:\n          type: string\n          enum: [\"default\", \"validated\", \"pending\"]\n          default: \"default\"\n          description: \"Filter the tags by their validity. The default value ('default') stands for no filtering.\"\n        greeting:\n          type: string\n          default: \"hello\"\n"
		}
	},
	"Error": "buildIR: make ir: path \"/tags\": get: parameters: field \"tag_ids\": nested arrays not allowed"
}