{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amazonaws.com/rds-data/2018-08-01/openapi.yaml",
			"byteSize": 53612,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2018-08-01'\n  x-release: v4\n  title: AWS RDS DataService\n  description: '\u003cp\u003e\u003cfullname\u003eAmazon RDS Data Service\u003c/fullname\u003e \u003cp\u003eAmazon RDS provides an HTTP endpoint to run SQL statements on an Amazon Aurora Serverless DB cluster. To run these statements, you work with the Data Service API.\u003c/p\u003e \u003cp\u003eFor more information about the Data Service API, see \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\"\u003eUsing the Data API for Aurora Serverless\u003c/a\u003e in the \u003ci\u003eAmazon Aurora User Guide\u003c/i\u003e.\u003c/p\u003e\u003c/p\u003e'\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: rds-data\n  x-aws-signingName: rds-data\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rds-data-2018-08-01.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/rds-data/'\nservers:\n  - url: 'http://rds-data.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS RDS DataService multi-region endpoint\n  - url: 'https://rds-data.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS RDS DataService multi-region endpoint\n  - url: 'http://rds-data.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://rds-data.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)\npaths:\n  /BatchExecute:\n    post:\n      operationId: BatchExecuteStatement\n      description: '\u003cp\u003eRuns a batch SQL statement over an array of data.\u003c/p\u003e \u003cp\u003eYou can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf a call isn''t part of a transaction because it doesn''t include the \u003ccode\u003etransactionID\u003c/code\u003e parameter, changes that result from the call are committed automatically.\u003c/p\u003e \u003c/important\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchExecuteStatementResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: StatementTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementTimeoutException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '484':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceArn\n                - secretArn\n                - sql\n              properties:\n                database:\n                  description: The name of the database.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                parameterSets:\n                  description: '\u003cp\u003eThe parameter set for the batch operation.\u003c/p\u003e \u003cp\u003eThe SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eSpecify one or more empty parameter sets.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eUse the \u003ccode\u003eExecuteStatement\u003c/code\u003e operation instead of the \u003ccode\u003eBatchExecuteStatement\u003c/code\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eArray parameters are not supported.\u003c/p\u003e \u003c/note\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SqlParametersList'\n                resourceArn:\n                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                schema:\n                  description: The name of the database schema.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                secretArn:\n                  description: The name or ARN of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                sql:\n                  description: The SQL statement to run.\n                  type: string\n                  minLength: 0\n                  maxLength: 65536\n                transactionId:\n                  description: '\u003cp\u003eThe identifier of a transaction that was started by using the \u003ccode\u003eBeginTransaction\u003c/code\u003e operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\u003c/p\u003e \u003cp\u003eIf the SQL statement is not part of a transaction, don''t set this parameter.\u003c/p\u003e'\n                  type: string\n                  minLength: 0\n                  maxLength: 192\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /BeginTransaction:\n    post:\n      operationId: BeginTransaction\n      description: '\u003cp\u003eStarts a SQL transaction.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e \u0026lt;important\u0026gt; \u0026lt;p\u0026gt;A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it''s committed, it''s rolled back automatically.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate \u0026lt;code\u0026gt;ExecuteStatement\u0026lt;/code\u0026gt; call with \u0026lt;code\u0026gt;continueAfterTimeout\u0026lt;/code\u0026gt; enabled.\u0026lt;/p\u0026gt; \u0026lt;/important\u0026gt; \u003c/code\u003e\u003c/pre\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeginTransactionResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: StatementTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementTimeoutException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '484':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceArn\n                - secretArn\n              properties:\n                database:\n                  description: The name of the database.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                resourceArn:\n                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                schema:\n                  description: The name of the database schema.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                secretArn:\n                  description: The name or ARN of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /CommitTransaction:\n    post:\n      operationId: CommitTransaction\n      description: Ends a SQL transaction started with the \u003ccode\u003eBeginTransaction\u003c/code\u003e operation and commits the changes.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommitTransactionResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: StatementTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementTimeoutException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '484':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceArn\n                - secretArn\n                - transactionId\n              properties:\n                resourceArn:\n                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                secretArn:\n                  description: The name or ARN of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                transactionId:\n                  description: The identifier of the transaction to end and commit.\n                  type: string\n                  minLength: 0\n                  maxLength: 192\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /ExecuteSql:\n    post:\n      deprecated: true\n      operationId: ExecuteSql\n      description: \u003cp\u003eRuns one or more SQL statements.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eThis operation is deprecated. Use the \u003ccode\u003eBatchExecuteStatement\u003c/code\u003e or \u003ccode\u003eExecuteStatement\u003c/code\u003e operation.\u003c/p\u003e \u003c/important\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecuteSqlResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - awsSecretStoreArn\n                - dbClusterOrInstanceArn\n                - sqlStatements\n              properties:\n                awsSecretStoreArn:\n                  description: The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                database:\n                  description: The name of the database.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                dbClusterOrInstanceArn:\n                  description: The ARN of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                schema:\n                  description: The name of the database schema.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                sqlStatements:\n                  description: '\u003cp\u003eOne or more SQL statements to run on the DB cluster.\u003c/p\u003e \u003cp\u003eYou can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. \u003c/p\u003e'\n                  type: string\n                  minLength: 0\n                  maxLength: 65536\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /Execute:\n    post:\n      operationId: ExecuteStatement\n      description: '\u003cp\u003eRuns a SQL statement against a database.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf a call isn''t part of a transaction because it doesn''t include the \u003ccode\u003etransactionID\u003c/code\u003e parameter, changes that result from the call are committed automatically.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eThe response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecuteStatementResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: StatementTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementTimeoutException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '484':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceArn\n                - secretArn\n                - sql\n              properties:\n                continueAfterTimeout:\n                  description: '\u003cp\u003eA value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eFor DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.\u003c/p\u003e \u003c/important\u003e'\n                  type: boolean\n                database:\n                  description: The name of the database.\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                includeResultMetadata:\n                  description: A value that indicates whether to include metadata in the results.\n                  type: boolean\n                parameters:\n                  description: \u003cp\u003eThe parameters for the SQL statement.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eArray parameters are not supported.\u003c/p\u003e \u003c/note\u003e\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/SqlParameter'\n                resourceArn:\n                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                resultSetOptions:\n                  description: Options that control how the result set is returned.\n                  type: object\n                  properties:\n                    decimalReturnType:\n                      allOf:\n                        - $ref: '#/components/schemas/DecimalReturnType'\n                        - description: '\u003cp\u003eA value that indicates how a field of \u003ccode\u003eDECIMAL\u003c/code\u003e type is represented in the response. The value of \u003ccode\u003eSTRING\u003c/code\u003e, the default, specifies that it is converted to a String value. The value of \u003ccode\u003eDOUBLE_OR_LONG\u003c/code\u003e specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eConversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.\u003c/p\u003e \u003c/important\u003e'\n                schema:\n                  description: '\u003cp\u003eThe name of the database schema.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eCurrently, the \u003ccode\u003eschema\u003c/code\u003e parameter isn''t supported.\u003c/p\u003e \u003c/note\u003e'\n                  type: string\n                  minLength: 0\n                  maxLength: 64\n                secretArn:\n                  description: The name or ARN of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                sql:\n                  description: The SQL statement to run.\n                  type: string\n                  minLength: 0\n                  maxLength: 65536\n                transactionId:\n                  description: '\u003cp\u003eThe identifier of a transaction that was started by using the \u003ccode\u003eBeginTransaction\u003c/code\u003e operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\u003c/p\u003e \u003cp\u003eIf the SQL statement is not part of a transaction, don''t set this parameter.\u003c/p\u003e'\n                  type: string\n                  minLength: 0\n                  maxLength: 192\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /RollbackTransaction:\n    post:\n      operationId: RollbackTransaction\n      description: Performs a rollback of a transaction. Rolling back a transaction cancels its changes.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RollbackTransactionResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: StatementTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatementTimeoutException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '484':\n          description: ServiceUnavailableError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableError'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceArn\n                - secretArn\n                - transactionId\n              properties:\n                resourceArn:\n                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                secretArn:\n                  description: The name or ARN of the secret that enables access to the DB cluster.\n                  type: string\n                  minLength: 11\n                  maxLength: 100\n                transactionId:\n                  description: The identifier of the transaction to roll back.\n                  type: string\n                  minLength: 0\n                  maxLength: 192\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    BatchExecuteStatementResponse:\n      type: object\n      properties:\n        updateResults:\n          allOf:\n            - $ref: '#/components/schemas/UpdateResults'\n            - description: The execution results of each batch entry.\n      description: The response elements represent the output of a SQL statement over an array of data.\n    SqlParametersList:\n      type: array\n      items:\n        $ref: '#/components/schemas/SqlParameter'\n    BadRequestException: {}\n    StatementTimeoutException: {}\n    InternalServerErrorException: {}\n    ForbiddenException: {}\n    ServiceUnavailableError: {}\n    BeginTransactionResponse:\n      type: object\n      properties:\n        transactionId:\n          allOf:\n            - $ref: '#/components/schemas/Id'\n            - description: The transaction ID of the transaction started by the call.\n      description: The response elements represent the output of a request to start a SQL transaction.\n    CommitTransactionResponse:\n      type: object\n      properties:\n        transactionStatus:\n          allOf:\n            - $ref: '#/components/schemas/TransactionStatus'\n            - description: The status of the commit operation.\n      description: The response elements represent the output of a commit transaction request.\n    NotFoundException: {}\n    ExecuteSqlResponse:\n      type: object\n      properties:\n        sqlStatementResults:\n          allOf:\n            - $ref: '#/components/schemas/SqlStatementResults'\n            - description: The results of the SQL statement or statements.\n      description: The response elements represent the output of a request to run one or more SQL statements.\n    ExecuteStatementResponse:\n      type: object\n      properties:\n        columnMetadata:\n          allOf:\n            - $ref: '#/components/schemas/Metadata'\n            - description: Metadata for the columns included in the results.\n        generatedFields:\n          allOf:\n            - $ref: '#/components/schemas/FieldList'\n            - description: '\u003cp\u003eValues for fields generated during the request.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e \u0026lt;note\u0026gt; \u0026lt;p\u0026gt;The \u0026lt;code\u0026gt;generatedFields\u0026lt;/code\u0026gt; data isn''t supported by Aurora PostgreSQL. To get the values of generated fields, use the \u0026lt;code\u0026gt;RETURNING\u0026lt;/code\u0026gt; clause. For more information, see \u0026lt;a href=\u0026quot;https://www.postgresql.org/docs/10/dml-returning.html\u0026quot;\u0026gt;Returning Data From Modified Rows\u0026lt;/a\u0026gt; in the PostgreSQL documentation.\u0026lt;/p\u0026gt; \u0026lt;/note\u0026gt; \u003c/code\u003e\u003c/pre\u003e'\n        numberOfRecordsUpdated:\n          allOf:\n            - $ref: '#/components/schemas/RecordsUpdated'\n            - description: The number of records updated by the request.\n        records:\n          allOf:\n            - $ref: '#/components/schemas/SqlRecords'\n            - description: The records returned by the SQL statement.\n      description: The response elements represent the output of a request to run a SQL statement against a database.\n    SqlParameter:\n      type: object\n      properties:\n        name:\n          allOf:\n            - $ref: '#/components/schemas/ParameterName'\n            - description: The name of the parameter.\n        typeHint:\n          allOf:\n            - $ref: '#/components/schemas/TypeHint'\n            - description: '\u003cp\u003eA hint that specifies the correct object type for data type mapping. Possible values are as follows:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDATE\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eDATE\u003c/code\u003e type to the database. The accepted format is \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDECIMAL\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eDECIMAL\u003c/code\u003e type to the database.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eJSON\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eJSON\u003c/code\u003e type to the database.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eTIME\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eTIME\u003c/code\u003e type to the database. The accepted format is \u003ccode\u003eHH:MM:SS[.FFF]\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eTIMESTAMP\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eTIMESTAMP\u003c/code\u003e type to the database. The accepted format is \u003ccode\u003eYYYY-MM-DD HH:MM:SS[.FFF]\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eUUID\u003c/code\u003e - The corresponding \u003ccode\u003eString\u003c/code\u003e parameter value is sent as an object of \u003ccode\u003eUUID\u003c/code\u003e type to the database. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        value:\n          allOf:\n            - $ref: '#/components/schemas/Field'\n            - description: The value of the parameter.\n      description: A parameter used in a SQL statement.\n    DecimalReturnType:\n      type: string\n      enum:\n        - STRING\n        - DOUBLE_OR_LONG\n    RollbackTransactionResponse:\n      type: object\n      properties:\n        transactionStatus:\n          allOf:\n            - $ref: '#/components/schemas/TransactionStatus'\n            - description: The status of the rollback operation.\n      description: The response elements represent the output of a request to perform a rollback of a transaction.\n    Arn:\n      type: string\n      minLength: 11\n      maxLength: 100\n    ArrayValue:\n      type: object\n      properties:\n        arrayValues:\n          allOf:\n            - $ref: '#/components/schemas/ArrayOfArray'\n            - description: An array of arrays.\n        booleanValues:\n          allOf:\n            - $ref: '#/components/schemas/BooleanArray'\n            - description: An array of Boolean values.\n        doubleValues:\n          allOf:\n            - $ref: '#/components/schemas/DoubleArray'\n            - description: An array of integers.\n        longValues:\n          allOf:\n            - $ref: '#/components/schemas/LongArray'\n            - description: An array of floating point numbers.\n        stringValues:\n          allOf:\n            - $ref: '#/components/schemas/StringArray'\n            - description: An array of strings.\n      description: Contains an array.\n    ArrayOfArray:\n      type: array\n      description: \u003cp\u003eAn array of arrays.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eSome array entries can be null.\u003c/p\u003e \u003c/note\u003e\n      items:\n        $ref: '#/components/schemas/ArrayValue'\n    BooleanArray:\n      type: array\n      description: \u003cp\u003eAn array of Boolean values.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eSome array entries can be null.\u003c/p\u003e \u003c/note\u003e\n      items:\n        $ref: '#/components/schemas/BoxedBoolean'\n    DoubleArray:\n      type: array\n      description: \u003cp\u003eAn array of floating point numbers.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eSome array entries can be null.\u003c/p\u003e \u003c/note\u003e\n      items:\n        $ref: '#/components/schemas/BoxedDouble'\n    LongArray:\n      type: array\n      description: \u003cp\u003eAn array of integers.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eSome array entries can be null.\u003c/p\u003e \u003c/note\u003e\n      items:\n        $ref: '#/components/schemas/BoxedLong'\n    StringArray:\n      type: array\n      description: \u003cp\u003eAn array of strings.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eSome array entries can be null.\u003c/p\u003e \u003c/note\u003e\n      items:\n        $ref: '#/components/schemas/String'\n    Value:\n      type: object\n      properties:\n        arrayValues:\n          allOf:\n            - $ref: '#/components/schemas/ArrayValueList'\n            - description: An array of column values.\n        bigIntValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedLong'\n            - description: A value for a column of big integer data type.\n        bitValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedBoolean'\n            - description: A value for a column of BIT data type.\n        blobValue:\n          allOf:\n            - $ref: '#/components/schemas/Blob'\n            - description: A value for a column of BLOB data type.\n        doubleValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedDouble'\n            - description: A value for a column of double data type.\n        intValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedInteger'\n            - description: A value for a column of integer data type.\n        isNull:\n          allOf:\n            - $ref: '#/components/schemas/BoxedBoolean'\n            - description: A NULL value.\n        realValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedFloat'\n            - description: A value for a column of real data type.\n        stringValue:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: A value for a column of string data type.\n        structValue:\n          allOf:\n            - $ref: '#/components/schemas/StructValue'\n            - description: A value for a column of STRUCT data type.\n      description: \u003cp\u003eContains the value of a column.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e \u0026lt;important\u0026gt; \u0026lt;p\u0026gt;This data type is deprecated.\u0026lt;/p\u0026gt; \u0026lt;/important\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n    ArrayValueList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Value'\n    DbName:\n      type: string\n      minLength: 0\n      maxLength: 64\n    SqlParameterSets:\n      type: array\n      items:\n        $ref: '#/components/schemas/SqlParametersList'\n    SqlStatement:\n      type: string\n      minLength: 0\n      maxLength: 65536\n    Id:\n      type: string\n      minLength: 0\n      maxLength: 192\n    BatchExecuteStatementRequest:\n      type: object\n      required:\n        - resourceArn\n        - secretArn\n        - sql\n      title: BatchExecuteStatementRequest\n      properties:\n        database:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database.\n        parameterSets:\n          allOf:\n            - $ref: '#/components/schemas/SqlParameterSets'\n            - description: '\u003cp\u003eThe parameter set for the batch operation.\u003c/p\u003e \u003cp\u003eThe SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eSpecify one or more empty parameter sets.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eUse the \u003ccode\u003eExecuteStatement\u003c/code\u003e operation instead of the \u003ccode\u003eBatchExecuteStatement\u003c/code\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eArray parameters are not supported.\u003c/p\u003e \u003c/note\u003e'\n        resourceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n        schema:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database schema.\n        secretArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The name or ARN of the secret that enables access to the DB cluster.\n        sql:\n          allOf:\n            - $ref: '#/components/schemas/SqlStatement'\n            - description: The SQL statement to run.\n        transactionId:\n          allOf:\n            - $ref: '#/components/schemas/Id'\n            - description: '\u003cp\u003eThe identifier of a transaction that was started by using the \u003ccode\u003eBeginTransaction\u003c/code\u003e operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\u003c/p\u003e \u003cp\u003eIf the SQL statement is not part of a transaction, don''t set this parameter.\u003c/p\u003e'\n      description: The request parameters represent the input of a SQL statement over an array of data.\n    UpdateResults:\n      type: array\n      items:\n        $ref: '#/components/schemas/UpdateResult'\n    BeginTransactionRequest:\n      type: object\n      required:\n        - resourceArn\n        - secretArn\n      title: BeginTransactionRequest\n      properties:\n        database:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database.\n        resourceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n        schema:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database schema.\n        secretArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The name or ARN of the secret that enables access to the DB cluster.\n      description: The request parameters represent the input of a request to start a SQL transaction.\n    Blob:\n      type: string\n    Boolean:\n      type: boolean\n    BoxedBoolean:\n      type: boolean\n    BoxedDouble:\n      type: number\n      format: double\n    BoxedFloat:\n      type: number\n      format: float\n    BoxedInteger:\n      type: integer\n    BoxedLong:\n      type: integer\n    Integer:\n      type: integer\n    String:\n      type: string\n    ColumnMetadata:\n      type: object\n      properties:\n        arrayBaseColumnType:\n          allOf:\n            - $ref: '#/components/schemas/Integer'\n            - description: The type of the column.\n        isAutoIncrement:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: A value that indicates whether the column increments automatically.\n        isCaseSensitive:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: A value that indicates whether the column is case-sensitive.\n        isCurrency:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: A value that indicates whether the column contains currency values.\n        isSigned:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: A value that indicates whether an integer column is signed.\n        label:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The label for the column.\n        name:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the column.\n        nullable:\n          allOf:\n            - $ref: '#/components/schemas/Integer'\n            - description: A value that indicates whether the column is nullable.\n        precision:\n          allOf:\n            - $ref: '#/components/schemas/Integer'\n            - description: The precision value of a decimal number column.\n        scale:\n          allOf:\n            - $ref: '#/components/schemas/Integer'\n            - description: The scale value of a decimal number column.\n        schemaName:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the schema that owns the table that includes the column.\n        tableName:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the table that includes the column.\n        type:\n          allOf:\n            - $ref: '#/components/schemas/Integer'\n            - description: The type of the column.\n        typeName:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The database-specific data type of the column.\n      description: Contains the metadata for a column.\n    CommitTransactionRequest:\n      type: object\n      required:\n        - resourceArn\n        - secretArn\n        - transactionId\n      title: CommitTransactionRequest\n      properties:\n        resourceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n        secretArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The name or ARN of the secret that enables access to the DB cluster.\n        transactionId:\n          allOf:\n            - $ref: '#/components/schemas/Id'\n            - description: The identifier of the transaction to end and commit.\n      description: The request parameters represent the input of a commit transaction request.\n    TransactionStatus:\n      type: string\n      minLength: 0\n      maxLength: 128\n    ExecuteSqlRequest:\n      type: object\n      required:\n        - awsSecretStoreArn\n        - dbClusterOrInstanceArn\n        - sqlStatements\n      title: ExecuteSqlRequest\n      properties:\n        awsSecretStoreArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.\n        database:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database.\n        dbClusterOrInstanceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The ARN of the Aurora Serverless DB cluster.\n        schema:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database schema.\n        sqlStatements:\n          allOf:\n            - $ref: '#/components/schemas/SqlStatement'\n            - description: '\u003cp\u003eOne or more SQL statements to run on the DB cluster.\u003c/p\u003e \u003cp\u003eYou can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. \u003c/p\u003e'\n      description: The request parameters represent the input of a request to run one or more SQL statements.\n    SqlStatementResults:\n      type: array\n      items:\n        $ref: '#/components/schemas/SqlStatementResult'\n    ResultSetOptions:\n      type: object\n      properties:\n        decimalReturnType:\n          allOf:\n            - $ref: '#/components/schemas/DecimalReturnType'\n            - description: '\u003cp\u003eA value that indicates how a field of \u003ccode\u003eDECIMAL\u003c/code\u003e type is represented in the response. The value of \u003ccode\u003eSTRING\u003c/code\u003e, the default, specifies that it is converted to a String value. The value of \u003ccode\u003eDOUBLE_OR_LONG\u003c/code\u003e specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eConversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.\u003c/p\u003e \u003c/important\u003e'\n      description: Options that control how the result set is returned.\n    ExecuteStatementRequest:\n      type: object\n      required:\n        - resourceArn\n        - secretArn\n        - sql\n      title: ExecuteStatementRequest\n      properties:\n        continueAfterTimeout:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: '\u003cp\u003eA value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eFor DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.\u003c/p\u003e \u003c/important\u003e'\n        database:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: The name of the database.\n        includeResultMetadata:\n          allOf:\n            - $ref: '#/components/schemas/Boolean'\n            - description: A value that indicates whether to include metadata in the results.\n        parameters:\n          allOf:\n            - $ref: '#/components/schemas/SqlParametersList'\n            - description: \u003cp\u003eThe parameters for the SQL statement.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eArray parameters are not supported.\u003c/p\u003e \u003c/note\u003e\n        resourceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n        resultSetOptions:\n          allOf:\n            - $ref: '#/components/schemas/ResultSetOptions'\n            - description: Options that control how the result set is returned.\n        schema:\n          allOf:\n            - $ref: '#/components/schemas/DbName'\n            - description: '\u003cp\u003eThe name of the database schema.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eCurrently, the \u003ccode\u003eschema\u003c/code\u003e parameter isn''t supported.\u003c/p\u003e \u003c/note\u003e'\n        secretArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The name or ARN of the secret that enables access to the DB cluster.\n        sql:\n          allOf:\n            - $ref: '#/components/schemas/SqlStatement'\n            - description: The SQL statement to run.\n        transactionId:\n          allOf:\n            - $ref: '#/components/schemas/Id'\n            - description: '\u003cp\u003eThe identifier of a transaction that was started by using the \u003ccode\u003eBeginTransaction\u003c/code\u003e operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\u003c/p\u003e \u003cp\u003eIf the SQL statement is not part of a transaction, don''t set this parameter.\u003c/p\u003e'\n      description: The request parameters represent the input of a request to run a SQL statement against a database.\n    Metadata:\n      type: array\n      items:\n        $ref: '#/components/schemas/ColumnMetadata'\n    FieldList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Field'\n    RecordsUpdated:\n      type: integer\n    SqlRecords:\n      type: array\n      items:\n        $ref: '#/components/schemas/FieldList'\n    Field:\n      type: object\n      properties:\n        arrayValue:\n          allOf:\n            - $ref: '#/components/schemas/ArrayValue'\n            - description: An array of values.\n        blobValue:\n          allOf:\n            - $ref: '#/components/schemas/Blob'\n            - description: A value of BLOB data type.\n        booleanValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedBoolean'\n            - description: A value of Boolean data type.\n        doubleValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedDouble'\n            - description: A value of double data type.\n        isNull:\n          allOf:\n            - $ref: '#/components/schemas/BoxedBoolean'\n            - description: A NULL value.\n        longValue:\n          allOf:\n            - $ref: '#/components/schemas/BoxedLong'\n            - description: A value of long data type.\n        stringValue:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: A value of string data type.\n      description: Contains a value.\n    Long:\n      type: integer\n    ParameterName:\n      type: string\n    Row:\n      type: array\n      items:\n        $ref: '#/components/schemas/Value'\n    Record:\n      type: object\n      properties:\n        values:\n          allOf:\n            - $ref: '#/components/schemas/Row'\n            - description: The values returned in the record.\n      description: A record returned by a call.\n    Records:\n      type: array\n      items:\n        $ref: '#/components/schemas/Record'\n    ResultSetMetadata:\n      type: object\n      properties:\n        columnCount:\n          allOf:\n            - $ref: '#/components/schemas/Long'\n            - description: The number of columns in the result set.\n        columnMetadata:\n          allOf:\n            - $ref: '#/components/schemas/Metadata'\n            - description: The metadata of the columns in the result set.\n      description: The metadata of the result set returned by a SQL statement.\n    ResultFrame:\n      type: object\n      properties:\n        records:\n          allOf:\n            - $ref: '#/components/schemas/Records'\n            - description: The records in the result set.\n        resultSetMetadata:\n          allOf:\n            - $ref: '#/components/schemas/ResultSetMetadata'\n            - description: The result-set metadata in the result set.\n      description: The result set returned by a SQL statement.\n    RollbackTransactionRequest:\n      type: object\n      required:\n        - resourceArn\n        - secretArn\n        - transactionId\n      title: RollbackTransactionRequest\n      properties:\n        resourceArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n        secretArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The name or ARN of the secret that enables access to the DB cluster.\n        transactionId:\n          allOf:\n            - $ref: '#/components/schemas/Id'\n            - description: The identifier of the transaction to roll back.\n      description: The request parameters represent the input of a request to perform a rollback of a transaction.\n    TypeHint:\n      type: string\n      enum:\n        - JSON\n        - UUID\n        - TIMESTAMP\n        - DATE\n        - TIME\n        - DECIMAL\n    SqlStatementResult:\n      type: object\n      properties:\n        numberOfRecordsUpdated:\n          allOf:\n            - $ref: '#/components/schemas/RecordsUpdated'\n            - description: The number of records updated by a SQL statement.\n        resultFrame:\n          allOf:\n            - $ref: '#/components/schemas/ResultFrame'\n            - description: The result set of the SQL statement.\n      description: \u003cp\u003eThe result of a SQL statement.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e \u0026lt;important\u0026gt; \u0026lt;p\u0026gt;This data type is deprecated.\u0026lt;/p\u0026gt; \u0026lt;/important\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n    StructValue:\n      type: object\n      properties:\n        attributes:\n          allOf:\n            - $ref: '#/components/schemas/ArrayValueList'\n            - description: The attributes returned in the record.\n      description: A structure value returned by a call.\n    UpdateResult:\n      type: object\n      properties:\n        generatedFields:\n          allOf:\n            - $ref: '#/components/schemas/FieldList'\n            - description: Values for fields generated during the request.\n      description: The response elements represent the results of an update.\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@20502d3674db5fa060375c4cf54d52234b351baf/-/blob/APIs/amazonaws.com/rds-data/2018-08-01/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/20502d3674db5fa060375c4cf54d52234b351baf/APIs/amazonaws.com/rds-data/2018-08-01/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/BatchExecute\": post: requestBody: contents: application/json: generate schema: field parameterSets: item: item: field name: allOf: schema type mismatch: string and "
}