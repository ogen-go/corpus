{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/pichi-router/pichi"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "schemas/swagger.yaml",
			"byteSize": 20942,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.4\"\n  title: 'Pichi API'\n  description: 'RESTful API for pichi server'\ntags:\n  - name: 'Pichi API'\n    description: 'Pichi API'\npaths:\n  /ingresses:\n    get:\n      description: 'Get all available ingresses'\n      tags:\n        - 'Pichi API'\n      responses:\n        '200':\n          description: 'All available ingresses'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/Ingress'\n        '500':\n          description: 'Pichi server data structure error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /ingresses/{name}:\n    put:\n      description: 'Create or modify an ingress'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'Ingress name'\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Ingress'\n      responses:\n        '204':\n          description: 'Operation succeeded'\n        '400':\n          description: 'Request body is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '422':\n          description: 'JSON semantic error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '423':\n          description: 'Address in use'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    delete:\n      description: 'Delete a specified ingress'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'Ingress name'\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: 'operation succeeded'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /egresses:\n    get:\n      description: 'Get all available egresses'\n      tags:\n        - 'Pichi API'\n      responses:\n        '200':\n          description: 'All available ingresses'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/Egress'\n        '500':\n          description: 'Pichi server data structure error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /egresses/{name}:\n    put:\n      description: 'Create or modify an egress'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'egress name'\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Egress'\n      responses:\n        '204':\n          description: 'Operation succeeded'\n        '400':\n          description: 'Request body is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '422':\n          description: 'JSON semantic error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    delete:\n      description: 'Delete a specified egress'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'Egress name'\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: 'operation succeeded'\n        '403':\n          description: 'Egress is used by route'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /rules:\n    get:\n      description: 'Get all available rules'\n      tags:\n        - 'Pichi API'\n      responses:\n        '200':\n          description: 'All available rules'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/Rule'\n        '500':\n          description: 'Pichi server data structure error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /rules/{name}:\n    put:\n      description: 'Create or modify a rule'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'rule name'\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Rule'\n      responses:\n        '204':\n          description: 'Operation succeeded'\n        '400':\n          description: 'Request body is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '422':\n          description: 'JSON semantic error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    delete:\n      description: 'Delete a specified rule'\n      tags:\n        - 'Pichi API'\n      parameters:\n        - name: name\n          description: 'Rule name'\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: 'operation succeeded'\n        '403':\n          description: 'Rule is used by route'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n  /route:\n    get:\n      description: 'Show Pichi routes'\n      tags:\n        - 'Pichi API'\n      responses:\n        '200':\n          description: 'Routes'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Route'\n        '500':\n          description: 'Pichi server data structure error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    put:\n      description: 'Change rule order or default egress'\n      tags:\n        - 'Pichi API'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Route'\n      responses:\n        '204':\n          description: 'Operation succeeded'\n        '400':\n          description: 'Request body is invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '422':\n          description: 'JSON semantic error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Pichi server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\ncomponents:\n  schemas:\n    IngressType:\n      type: string\n      enum:\n        - http\n        - socks5\n        - ss\n        - tunnel\n        - trojan\n        - vmess\n    ShadowsocksMethod:\n      description: 'SS method'\n      type: string\n      enum:\n        - rc4-md5\n        - bf-cfb\n        - aes-128-ctr\n        - aes-192-ctr\n        - aes-256-ctr\n        - aes-128-cfb\n        - aes-192-cfb\n        - aes-256-cfb\n        - camellia-128-cfb\n        - camellia-192-cfb\n        - camellia-256-cfb\n        - chacha20\n        - salsa20\n        - chacha20-ietf\n        - aes-128-gcm\n        - aes-192-gcm\n        - aes-256-gcm\n        - chacha20-ietf-poly1305\n        - xchacha20-ietf-poly1305\n    VMessSecurity:\n      description: 'The security option for VMess protocol'\n      type: string\n      enum:\n        - auto\n        - none\n        - chacha20-poly1305\n        - aes-128-gcm\n    Endpoint:\n      description: 'The endpoint object'\n      type: object\n      properties:\n        host:\n          description: 'Host name or IP(v4/v6) address'\n          type: string\n          example: 'example.com'\n        port:\n          description: 'TCP port'\n          type: integer\n          format: int32\n          minimum: 1\n          maximum: 65535\n          example: 8388\n      required:\n        - host\n        - port\n    Bind:\n      description: 'Bind option of ingress'\n      type: object\n      properties:\n        bind:\n          description: 'Binding endpoints'\n          type: array\n          items:\n            $ref: '#/components/schemas/Endpoint'\n          minLength: 1\n      required:\n        - bind\n    Server:\n      description: 'Server option of egress'\n      type: object\n      properties:\n        server:\n          $ref: '#/components/schemas/Endpoint'\n      required:\n        - server\n    ShadowsocksOption:\n      description: 'The extra options for Shadowsocks Adapter'\n      type: object\n      properties:\n        password:\n          description: 'Shadowsocks password'\n          type: string\n          example: 'ss password'\n        method:\n          $ref: '#/components/schemas/ShadowsocksMethod'\n      required:\n        - password\n        - method\n    TunnelOption:\n      description: 'The extra options for Tunnel ingress'\n      type: object\n      properties:\n        destinations:\n          description: 'Destination endpoints'\n          type: array\n          items:\n            $ref: '#/components/schemas/Endpoint'\n          minLength: 1\n        balance:\n          description: 'Tunnel balance type'\n          type: string\n          enum:\n            - random\n            - round-robin\n            - least-conn\n      required:\n        - destinations\n        - balance\n    RejectOption:\n      description: 'The extra options for Reject egress'\n      type: object\n      properties:\n        mode:\n          description: 'Reject mode'\n          type: string\n          enum:\n            - fixed\n            - random\n        delay:\n          description: 'Dealy seconds to reject the connection'\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 300\n          default: 0\n      required:\n        - mode\n    TlsForIngress:\n      description: 'TLS options for ingress'\n      type: object\n      properties:\n        cert_file:\n          description: 'The file path of certificate'\n          type: string\n          example: '/etc/letsencrypt/live/example.com/fullchain.pem'\n        key_file:\n          description: 'The file path of private key'\n          type: string\n          example: '/etc/letsencrypt/live/example.com/privkey.pem'\n      required:\n        - cert_file\n        - key_file\n    TlsForEgress:\n      description: 'TLS options for egress'\n      type: object\n      properties:\n        insecure:\n          description: 'Wether to verify the TLS certificate'\n          type: boolean\n          default: false\n        ca_file:\n          description: 'The file path of CA certificate'\n          type: string\n          example: '/etc/cert/rootCA.pem'\n        server_name:\n          description: 'The server name used to verify the certificate'\n          type: string\n          example: 'example.com'\n        sni:\n          description: 'SNI extension field of TLS'\n          type: string\n          example: 'example.com'\n      required:\n        - insecure\n    WebsocketOption:\n      description: 'Websocket options for Trojan/VMess adapter'\n      type: object\n      properties:\n        path:\n          description: 'Websocket URI path'\n          type: string\n          example: '/path'\n        host:\n          description: 'HOST field in HTTP header'\n          type: string\n          example: 'example.com'\n      required:\n        - path\n    HttpSocks5Credential:\n      description: 'Credential object for Http/Socks5 adapter'\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      required:\n        - username\n        - password\n    TojanCredential:\n      description: 'Credential object for Trojan adapter'\n      type: object\n      properties:\n        password:\n          type: string\n      required:\n        - password\n    VMessCredential:\n      description: 'Credential object for VMess adapter'\n      type: object\n      properties:\n        uuid:\n          description: 'VMess UUID string'\n          type: string\n          example: 'f2096007-5315-49dd-a623-1d3ed7ab891c'\n        alter_id:\n          description: 'The number of extra alternative IDs'\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 65535\n          example: 4\n        security:\n          $ref: '#/components/schemas/VMessSecurity'\n      required:\n        - uuid\n        - alter_id\n    ShadowsocksAdapter:\n      description: 'Shadowsocks ingress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - ss\n        option:\n          $ref: '#/components/schemas/ShadowsocksOption'\n      required:\n        - type\n        - option\n    TunnelIngress:\n      description: 'Tunnel ingress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - tunnel\n        option:\n          $ref: '#/components/schemas/TunnelOption'\n      required:\n        - type\n        - option\n    HttpSocks5Ingress:\n      description: \"HTTP/Socks5 ingress object\"\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - http\n            - socks5\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/HttpSocks5Credential'\n        tls:\n          $ref: '#/components/schemas/TlsForIngress'\n      required:\n        - type\n    TrojanIngress:\n      description: \"Trojan ingress object\"\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - trojan\n        option:\n          description: \"The extra options for Trojan ingress\"\n          type: object\n          properties:\n            remote:\n              $ref: '#/components/schemas/Endpoint'\n          required:\n            - remote\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/TojanCredential'\n          minLength: 1\n        tls:\n          $ref: '#/components/schemas/TlsForIngress'\n        websocket:\n          $ref: '#/components/schemas/WebsocketOption'\n      required:\n        - type\n        - option\n        - credentials\n        - tls\n    VMessIngress:\n      description: 'VMess ingress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - vmess\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/VMessCredential'\n          minLength: 1\n        tls:\n          $ref: '#/components/schemas/TlsForIngress'\n        websocket:\n          $ref: '#/components/schemas/WebsocketOption'\n      required:\n        - type\n        - credentials\n    DirectEgress:\n      description: \"Direct egress object\"\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - direct\n      required:\n        - type\n    RejectEgress:\n      description: 'Reject egress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - reject\n        option:\n          $ref: '#/components/schemas/RejectOption'\n      required:\n        - type\n    HttpSocks5Egress:\n      description: 'HTTP/Socks5 egress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - http\n            - socks5\n        credential:\n          $ref: '#/components/schemas/HttpSocks5Credential'\n        tls:\n          $ref: '#/components/schemas/TlsForEgress'\n      required:\n        - type\n    TrojanEgress:\n      description: 'Trojan egress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - trojan\n        credential:\n          $ref: '#/components/schemas/TojanCredential'\n        tls:\n          $ref: '#/components/schemas/TlsForEgress'\n        websocket:\n          $ref: '#/components/schemas/WebsocketOption'\n      required:\n        - type\n        - credential\n        - tls\n    VMessEgress:\n      description: 'VMess egress object'\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - vmess\n        credential:\n          $ref: '#/components/schemas/VMessCredential'\n        tls:\n          $ref: '#/components/schemas/TlsForEgress'\n        websocket:\n          $ref: '#/components/schemas/WebsocketOption'\n      required:\n        - type\n        - credential\n    ProxyEgress:\n      description: 'Proxy egress object'\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Server'\n        - oneOf:\n          - $ref: '#/components/schemas/HttpSocks5Egress'\n          - $ref: '#/components/schemas/ShadowsocksAdapter'\n          - $ref: '#/components/schemas/TrojanEgress'\n          - $ref: '#/components/schemas/VMessEgress'\n    Ingress:\n      description: 'Ingress object'\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Bind'\n        - oneOf:\n          - $ref: '#/components/schemas/TunnelIngress'\n          - $ref: '#/components/schemas/HttpSocks5Ingress'\n          - $ref: '#/components/schemas/ShadowsocksAdapter'\n          - $ref: '#/components/schemas/TrojanIngress'\n          - $ref: '#/components/schemas/VMessIngress'\n    Egress:\n        oneOf:\n          - $ref: '#/components/schemas/DirectEgress'\n          - $ref: '#/components/schemas/RejectEgress'\n          - $ref: '#/components/schemas/ProxyEgress'\n    ErrorMessage:\n      type: object\n      properties:\n        message:\n          type: string\n          example: 'Error message in detail'\n    Rule:\n      type: object\n      properties:\n        range:\n          description: 'IP range array'\n          type: array\n          items:\n            type: string\n            example: 'fc00::/7'\n        ingress_name:\n          description: 'ingress name array'\n          type: array\n          items:\n            type: string\n            example: 'my_socks5_server'\n        ingress_type:\n          description: 'ingress type array'\n          type: array\n          items:\n            $ref: '#/components/schemas/IngressType'\n        pattern:\n          description: 'Remote server address pattern'\n          type: array\n          items:\n            type: string\n            example: '^.*\\.example.com$'\n        domain:\n          description: 'Remote server domain name'\n          type: array\n          items:\n            type: string\n            example: 'example.com'\n        country:\n          description: 'Remote server country'\n          type: array\n          items:\n            type: string\n            example: 'US'\n    Route:\n      type: object\n      properties:\n        default:\n          description: 'Default egress name'\n          type: string\n          example: 'default_egress'\n        rules:\n          description: 'Active rules in order'\n          type: array\n          items:\n            type: array\n            minLength: 2\n            items:\n              type: string\n            example: ['rule_0', 'rule_1', 'egress_0']",
			"canonicalURL": "/github.com/pichi-router/pichi@e1e45eff11e45fa271e1e8f8976deec7c5c632b2/-/blob/schemas/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/pichi-router/pichi/blob/e1e45eff11e45fa271e1e8f8976deec7c5c632b2/schemas/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/egresses\": get: responses: 200: contents: application/json: generate schema: item: oneOf: collect variants: oneOf[2]: allOf: schema type mismatch: object and "
}