{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Web-Dev-Collaborative/WEB_DEV_COLLABORATIVE"
		},
		"file": {
			"name": "api_v0.yml",
			"size": 0,
			"path": "forem/docs/api_v0.yml",
			"byteSize": 123594,
			"content": "# This document follows the OpenAPI spec <https://spec.openapis.org/oas/v3.0.3>\n# It contains two Redoc vendor extensions, x-code-samples and x-logo\n# x-logo: https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md#x-logo\n# x-code-samples: https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md#x-code-samples\n\nopenapi: \"3.0.3\"\ninfo:\n  title: DEV API (beta)\n  description: |\n\n    Access Forem articles, users and other resources via API.\n\n    For a real-world example of Forem in action, check out [DEV](https://www.dev.to).\n\n    All endpoints that don't require authentication are CORS enabled.\n\n    Dates and date times, unless otherwise specified, must be in\n    the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.\n\n  version: \"0.9.5\"\n  termsOfService: https://dev.to/terms\n  contact:\n    name: DEV Team\n    url: https://dev.to/contact\n    email: yo@dev.to\n  x-logo:\n    url: https://res.cloudinary.com/practicaldev/image/fetch/s--EYllUmBG--/c_limit,f_auto,fl_progressive,q_80,w_190/https://res.cloudinary.com/practicaldev/image/fetch/s--m5i3pkpk--/c_limit%252cf_auto%252cfl_progressive%252cq_auto%252cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sf6uve8ehm4ogwka0mez.png\n    backgroundColor: \"\"\n    altText: \"Forem logo\"\n\nservers:\n  - url: https://dev.to/api\n    description: Production server\n\ncomponents:\n  parameters:\n    pageParam:\n      in: query\n      name: page\n      required: false\n      description: Pagination page.\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        default: 1\n    perPageParam10to1000:\n      in: query\n      name: per_page\n      required: false\n      description: Page size (the number of items to return per page).\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        default: 10\n    perPageParam24to1000:\n      in: query\n      name: per_page\n      required: false\n      description: Page size (the number of items to return per page).\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        default: 24\n    perPageParam30to1000:\n      in: query\n      name: per_page\n      required: false\n      description: Page size (the number of items to return per page).\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        default: 30\n    perPageParam30to100:\n      in: query\n      name: per_page\n      required: false\n      description: Page size (the number of items to return per page).\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 100\n        default: 30\n    perPageParam80to1000:\n      in: query\n      name: per_page\n      required: false\n      description: Page size (the number of items to return per page).\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 1000\n        default: 80\n    listingCategoryParam:\n      name: category\n      in: query\n      description: |\n        Using this parameter will return listings belonging to the\n        requested category.\n      schema:\n        type: string\n      example: cfp\n\n  securitySchemes:\n    api_key:\n      type: apiKey\n      description: |\n        API Key authentication.\n\n        Authentication for some endpoints, like write operations on the\n        Articles API require a DEV API key.\n\n        ### Getting an API key\n\n        To obtain one, please follow these steps:\n\n          - visit https://dev.to/settings/account\n          - in the \"DEV API Keys\" section create a new key by adding a\n            description and clicking on \"Generate API Key\"\n\n            ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)\n          - You'll see the newly generated key in the same view\n            ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)\n      name: api-key\n      in: header\n    oauth2:\n      type: oauth2\n      description: |\n        OAuth2 authentication.\n\n        OAuth2 authentication is still in private alpha.\n      flows:\n        authorizationCode:\n          authorizationUrl: https://dev.to/oauth/authorize\n          tokenUrl: https://dev.to/oauth/token\n          refreshUrl: https://dev.to/oauth/token\n          scopes: {}\n        clientCredentials:\n          tokenUrl: https://dev.to/oauth/token\n          refreshUrl: https://dev.to/oauth/token\n          scopes: {}\n\n  schemas:\n    APIError:\n      type: object\n      required:\n        - error\n        - status\n      properties:\n        error:\n          type: string\n        status:\n          type: integer\n          format: int32\n    ArticleIndex:\n      type: object\n      required:\n        - type_of\n        - id\n        - title\n        - description\n        - cover_image\n        - readable_publish_date\n        - social_image\n        - tag_list\n        - tags\n        - slug\n        - path\n        - url\n        - canonical_url\n        - comments_count\n        - positive_reactions_count\n        - public_reactions_count\n        - created_at\n        - edited_at\n        - crossposted_at\n        - published_at\n        - last_comment_at\n        - published_timestamp\n        - user\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          type: string\n          format: url\n          nullable: true\n        readable_publish_date:\n          type: string\n        social_image:\n          type: string\n          format: url\n        tag_list:\n          type: array\n          items:\n            type: string\n        tags:\n          type: string\n        slug:\n          type: string\n        path:\n          type: string\n          format: path\n        url:\n          type: string\n          format: url\n        canonical_url:\n          type: string\n          format: url\n        comments_count:\n          type: integer\n          format: int32\n        positive_reactions_count:\n          type: integer\n          format: int32\n        public_reactions_count:\n          type: integer\n          format: int32\n        created_at:\n          type: string\n          format: date-time\n        edited_at:\n          type: string\n          format: date-time\n          nullable: true\n        crossposted_at:\n          type: string\n          format: date-time\n          nullable: true\n        published_at:\n          type: string\n          format: date-time\n        last_comment_at:\n          type: string\n          format: date-time\n        published_timestamp:\n          description: Crossposting or published date time\n          type: string\n          format: date-time\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n        organization:\n          $ref: \"#/components/schemas/SharedOrganization\"\n        flare_tag:\n          $ref: \"#/components/schemas/ArticleFlareTag\"\n\n    ArticleShow:\n      type: object\n      required:\n        - type_of\n        - id\n        - title\n        - description\n        - cover_image\n        - readable_publish_date\n        - social_image\n        - tag_list\n        - tags\n        - slug\n        - path\n        - url\n        - canonical_url\n        - comments_count\n        - positive_reactions_count\n        - public_reactions_count\n        - created_at\n        - edited_at\n        - crossposted_at\n        - published_at\n        - last_comment_at\n        - published_timestamp\n        - body_html\n        - body_markdown\n        - user\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          type: string\n          format: url\n          nullable: true\n        readable_publish_date:\n          type: string\n        social_image:\n          type: string\n          format: url\n        tag_list:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        slug:\n          type: string\n        path:\n          type: string\n          format: path\n        url:\n          type: string\n          format: url\n        canonical_url:\n          type: string\n          format: url\n        comments_count:\n          type: integer\n          format: int32\n        positive_reactions_count:\n          type: integer\n          format: int32\n        public_reactions_count:\n          type: integer\n          format: int32\n        created_at:\n          type: string\n          format: date-time\n        edited_at:\n          type: string\n          format: date-time\n          nullable: true\n        crossposted_at:\n          type: string\n          format: date-time\n          nullable: true\n        published_at:\n          type: string\n          format: date-time\n        last_comment_at:\n          type: string\n          format: date-time\n        published_timestamp:\n          description: Crossposting or published date time\n          type: string\n          format: date-time\n        body_html:\n          type: string\n        body_markdown:\n          type: string\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n        organization:\n          $ref: \"#/components/schemas/SharedOrganization\"\n        flare_tag:\n          $ref: \"#/components/schemas/ArticleFlareTag\"\n\n    ArticleCreate:\n      type: object\n      properties:\n        article:\n          type: object\n          properties:\n            title:\n              type: string\n            body_markdown:\n              description: |\n                The body of the article.\n\n                It can contain an optional front matter. For example\n\n                ```markdown\n                ---\n                title: Hello, World!\n                published: true\n                tags: discuss, help\n                date: 20190701T10:00Z\n                series: Hello series\n                canonical_url: https://example.com/blog/hello\n                cover_image: article_published_cover_image\n                ---\n                ```\n\n                `date`, `series` and `canonical_url` are optional.\n                `date` is the publication date-time\n                `series` is the name of the series the article belongs to\n                `canonical_url` is the canonical URL of the article\n                `cover_image` is the main image of the article\n\n                *If the markdown contains a front matter, it will take precedence\n                on the equivalent params given in the payload.*\n              type: string\n            published:\n              description: |\n                True to create a published article, false otherwise. Defaults to false\n              type: boolean\n            series:\n              description: |\n                Article series name.\n\n                All articles belonging to the same series need to have the same name\n                in this parameter.\n              type: string\n            main_image:\n              type: string\n              format: url\n            canonical_url:\n              type: string\n              format: url\n            description:\n              type: string\n            tags:\n              type: array\n              items:\n                type: string\n            organization_id:\n              description: |\n                Only users belonging to an organization can assign the article to it\n              type: integer\n              format: int32\n\n    ArticleUpdate:\n      type: object\n      properties:\n        article:\n          type: object\n          properties:\n            title:\n              type: string\n            body_markdown:\n              description: |\n                The body of the article.\n\n                It can contain an optional front matter. For example\n\n                ```markdown\n                ---\n                title: Hello, World!\n                published: true\n                tags: discuss, help\n                date: 20190701T10:00Z\n                series: Hello series\n                canonical_url: https://example.com/blog/hello\n                cover_image: article_published_cover_image\n                ---\n                ```\n\n                `date`, `series` and `canonical_url` are optional.\n                `date` is the publication date-time\n                `series` is the name of the series the article belongs to\n                `canonical_url` is the canonical URL of the article\n                `cover_image` is the main image of the article\n\n                *If the markdown contains a front matter, it will take precedence\n                on the equivalent params given in the payload.*\n              type: string\n            published:\n              description: |\n                True to create a published article, false otherwise. Defaults to false\n              type: boolean\n            series:\n              description: |\n                Article series name.\n\n                All articles belonging to the same series need to have the same name\n                in this parameter.\n\n                To remove an article from a series, the `null` value can be used.\n              type: string\n            main_image:\n              type: string\n              format: url\n            canonical_url:\n              type: string\n              format: url\n            description:\n              type: string\n            tags:\n              type: array\n              items:\n                type: string\n            organization_id:\n              description: |\n                Only users belonging to an organization can assign the article to it\n              type: integer\n              format: int32\n\n    ArticleMe:\n      type: object\n      required:\n        - type_of\n        - id\n        - title\n        - description\n        - cover_image\n        - published\n        - published_at\n        - tag_list\n        - slug\n        - path\n        - url\n        - canonical_url\n        - comments_count\n        - positive_reactions_count\n        - public_reactions_count\n        - page_views_count\n        - published_timestamp\n        - body_markdown\n        - user\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          type: string\n          format: url\n          nullable: true\n        published:\n          type: boolean\n        published_at:\n          type: string\n          format: date-time\n        tag_list:\n          type: array\n          items:\n            type: string\n        slug:\n          type: string\n        path:\n          type: string\n          format: path\n        url:\n          type: string\n          format: url\n        canonical_url:\n          type: string\n          format: url\n        comments_count:\n          type: integer\n          format: int32\n        positive_reactions_count:\n          type: integer\n          format: int32\n        public_reactions_count:\n          type: integer\n          format: int32\n        page_views_count:\n          type: integer\n          format: int32\n        published_timestamp:\n          description: Crossposting or published date time\n          type: string\n          format: date-time\n        body_markdown:\n          description: The body of the article in Markdown format\n          type: string\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n        organization:\n          $ref: \"#/components/schemas/SharedOrganization\"\n        flare_tag:\n          $ref: \"#/components/schemas/ArticleFlareTag\"\n\n    ArticleFlareTag:\n      description: Flare tag of the article\n      type: object\n      properties:\n        name:\n          type: string\n        bg_color_hex:\n          description: Background color (hexadecimal)\n          type: string\n        text_color_hex:\n          description: Text color (hexadecimal)\n          type: string\n\n    ArticleVideo:\n      type: object\n      required:\n        - type_of\n        - id\n        - path\n        - cloudinary_video_url\n        - title\n        - user_id\n        - video_duration_in_minutes\n        - video_source_url\n        - user\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        path:\n          type: string\n        cloudinary_video_url:\n          description: The preview image of the video\n          type: string\n          format: url\n        title:\n          type: string\n        user_id:\n          type: integer\n          format: int32\n        video_duration_in_minutes:\n          description: |\n            The duration of the video.\n\n            If the video duration is below 1 hour, the format will be `mm:ss`,\n            if it's 1 hour or above the format will be `h:mm:ss`.\n          type: string\n        video_source_url:\n          format: url\n          type: string\n        user:\n          type: object\n          properties:\n            name:\n              description: The user's name\n              type: string\n\n    Comment:\n      type: object\n      required:\n        - type_of\n        - id_code\n        - created_at\n        - body_html\n        - user\n        - children\n      properties:\n        type_of:\n          type: string\n        id_code:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n        body_html:\n          description: HTML formatted comment\n          type: string\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n        children:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Comment\"\n    SiteConfig:\n      type: object\n      properties:\n        site_config:\n          type: object\n    FollowedTag:\n      type: object\n      required:\n        - id\n        - name\n        - points\n      properties:\n        id:\n          description: Tag id\n          type: integer\n          format: int64\n        name:\n          type: string\n        points:\n          type: number\n          format: float\n\n    Follower:\n      type: object\n      required:\n        - type_of\n        - id\n        - name\n        - path\n        - username\n        - profile_image\n      properties:\n        type_of:\n          type: string\n        id:\n          description: Follow id\n          type: integer\n          format: int32\n        name:\n          type: string\n        path:\n          type: string\n        username:\n          type: string\n        profile_image:\n          description: Profile image (60x60)\n          type: string\n          format: url\n\n    Listing:\n      type: object\n      required:\n        - type_of\n        - id\n        - title\n        - slug\n        - body_markdown\n        - tag_list\n        - tags\n        - category\n        - processed_html\n        - published\n        - user\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int64\n        title:\n          type: string\n        slug:\n          type: string\n        body_markdown:\n          type: string\n        tag_list:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        category:\n          $ref: \"#/components/schemas/ListingCategory\"\n        processed_html:\n          type: string\n        published:\n          type: boolean\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n        organization:\n          $ref: \"#/components/schemas/SharedOrganization\"\n\n    ListingCategory:\n      type: string\n      enum: [cfp, forhire, collabs, education, jobs, mentors, products, mentees, forsale, events, misc]\n\n    ListingCreate:\n      type: object\n      properties:\n        listing:\n          type: object\n          required:\n            - title\n            - body_markdown\n            - category\n          properties:\n            title:\n              type: string\n            body_markdown:\n              description: The body of the listing in Markdown format.\n              type: string\n            category:\n              $ref: \"#/components/schemas/ListingCategory\"\n            tags:\n              description: |\n                Tags related to the listing.\n\n                A maximum of 8 tags are allowed and it takes precedence over `tag_list`.\n              type: array\n              items:\n                type: string\n            tag_list:\n              description: |\n                Comma separated list of tags.\n\n                A maximum of 8 tags are allowed.\n              type: string\n            expires_at:\n              description: Date and time of expiration.\n              type: string\n              format: date-time\n            contact_via_connect:\n              description: |\n                True if users are allowed to contact the listing's owner\n                via DEV connect, false otherwise.\n\n                Defaults to false.\n              type: boolean\n            location:\n              description: Geographical area or city for the listing.\n              type: string\n            organization_id:\n              description: |\n                The id of the organization the user is creating the listing for.\n\n                Only users belonging to an organization can assign the listing to it.\n              type: integer\n              format: int64\n            action:\n              description: Set it to \"draft\" to create an unpublished listing\n              type: string\n              enum: [draft]\n\n    ListingUpdate:\n      type: object\n      properties:\n        listing:\n          type: object\n          properties:\n            title:\n              type: string\n            body_markdown:\n              description: The body of the listing in Markdown format.\n              type: string\n            category:\n              $ref: \"#/components/schemas/ListingCategory\"\n            tags:\n              description: |\n                Tags related to the listing.\n\n                A maximum of 8 tags are allowed and it takes precedence over `tag_list`.\n              type: array\n              items:\n                type: string\n            tag_list:\n              description: |\n                Comma separated list of tags.\n\n                A maximum of 8 tags are allowed.\n              type: string\n            expires_at:\n              description: Date and time of expiration.\n              type: string\n              format: date-time\n            contact_via_connect:\n              description: |\n                True if users are allowed to contact the listing's owner\n                via DEV connect, false otherwise.\n\n                Defaults to false.\n              type: boolean\n            location:\n              description: Geographical area or city for the listing.\n              type: string\n            action:\n              description: |\n                This param can be provided by itself to invoke some actions:\n\n                - `bump` bumps the listing and charge either the\n                  organization or the user\n                - `publish` publishes a draft listing\n                - `unpublish` unpublishes a published listing\n\n                It will take priority on any other param in the payload.\n              type: string\n              enum: [bump, publish, unpublish]\n\n    ReadingList:\n      type: object\n      required:\n        - type_of\n        - id\n        - status\n        - created_at\n        - article\n      properties:\n        type_of:\n          type: string\n        id:\n          description: Follow id\n          type: integer\n          format: int32\n        status:\n          type: string\n          enum:\n            - valid\n            - invalid\n            - confirmed\n            - archived\n        created_at:\n          type: string\n          format: date-time\n        article:\n          $ref: \"#/components/schemas/ArticleIndex\"\n\n    PodcastEpisode:\n      type: object\n      required:\n        - type_of\n        - id\n        - path\n        - image_url\n        - title\n        - podcast\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        path:\n          type: string\n        image_url:\n          type: string\n          format: url\n        title:\n          type: string\n        podcast:\n          type: object\n          properties:\n            title:\n              type: string\n            slug:\n              type: string\n            image_url:\n              type: string\n              format: url\n\n    SharedUser:\n      description: The resource creator\n      type: object\n      properties:\n        name:\n          type: string\n        username:\n          type: string\n        twitter_username:\n          type: string\n          nullable: true\n        github_username:\n          type: string\n          nullable: true\n        website_url:\n          type: string\n          format: url\n          nullable: true\n        profile_image:\n          description: Profile image (640x640)\n          type: string\n        profile_image_90:\n          description: Profile image (90x90)\n          type: string\n\n    SharedOrganization:\n      description: The organization the resource belongs to\n      type: object\n      properties:\n        name:\n          type: string\n        username:\n          type: string\n        slug:\n          type: string\n        profile_image:\n          description: Profile image (640x640)\n          type: string\n          format: url\n        profile_image_90:\n          description: Profile image (90x90)\n          type: string\n          format: url\n\n    Tag:\n      type: object\n      required:\n        - id\n        - name\n        - bg_color_hex\n        - text_color_hex\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        bg_color_hex:\n          description: Background color (hexadecimal)\n          type: string\n        text_color_hex:\n          description: Text color (hexadecimal)\n          type: string\n\n    User:\n      type: object\n      required:\n        - type_of\n        - id\n        - username\n        - name\n        - summary\n        - twitter_username\n        - github_username\n        - website_url\n        - location\n        - joined_at\n        - profile_image\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int32\n        username:\n          type: string\n        name:\n          type: string\n        summary:\n          type: string\n          nullable: true\n        twitter_username:\n          type: string\n          nullable: true\n        github_username:\n          type: string\n          nullable: true\n        website_url:\n          type: string\n          format: url\n          nullable: true\n        location:\n          type: string\n          nullable: true\n        joined_at:\n          description: Date of joining (formatted with strftime `\"%b %e, %Y\"`)\n          type: string\n        profile_image:\n          description: Profile image (320x320)\n          type: string\n          format: url\n\n    WebhookCreate:\n      description: Webhook creation payload\n      type: object\n      properties:\n        webhook_endpoint:\n          type: object\n          required:\n            - source\n            - target_url\n            - events\n          properties:\n            source:\n              description: The name of the requester, eg. \"DEV\"\n              type: string\n            target_url:\n              type: string\n              format: url\n            events:\n              description: An array of events identifiers\n              type: array\n              items:\n                type: string\n\n    WebhookIndex:\n      description: Webhook\n      type: object\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int64\n        source:\n          description: The name of the requester, eg. \"DEV\"\n          type: string\n        target_url:\n          type: string\n          format: url\n        events:\n          description: An array of events identifiers\n          type: array\n          items:\n            type: string\n        created_at:\n          type: string\n          format: date-time\n\n    WebhookShow:\n      description: Webhook\n      type: object\n      properties:\n        type_of:\n          type: string\n        id:\n          type: integer\n          format: int64\n        source:\n          description: The name of the requester, eg. \"DEV\"\n          type: string\n        target_url:\n          type: string\n          format: url\n        events:\n          description: An array of events identifiers\n          type: array\n          items:\n            type: string\n        created_at:\n          type: string\n          format: date-time\n        user:\n          $ref: \"#/components/schemas/SharedUser\"\n\n    ProfileImage:\n      description: Profile image\n      type: object\n      properties:\n        type_of:\n          type: string\n          enum: [profile_image]\n        image_of:\n          description: \"Discriminates what is the type of the profile image owner (user or organization)\"\n          type: string\n          enum: [user, organization]\n        profile_image:\n          type: string\n          description: Profile image (640x640)\n        profile_image_90:\n          type: string\n          description: Profile image (90x90)\n\n    Organization:\n      description: Organization\n      type: object\n      properties:\n        type_of:\n          type: string\n        username:\n          type: string\n        name:\n          type: string\n        summary:\n          type: string\n          nullable: true\n        twitter_username:\n          type: string\n          nullable: true\n        github_username:\n          type: string\n          nullable: true\n        url:\n          type: string\n          format: url\n        location:\n          type: string\n          nullable: true\n        tech_stack:\n          type: string\n          nullable: true\n        tag_line:\n          type: string\n          nullable: true\n        story:\n          type: string\n          nullable: true\n        joined_at:\n          description: Date of joining\n          type: string\n          format: date-time\n        profile_image:\n          type: string\n          description: Profile image (640x640)\n          format: url\n\n  examples:\n    ErrorBadRequest:\n      value:\n        error: bad request\n        status: 400\n    ErrorNotFound:\n      value:\n        error: not found\n        status: 404\n    ErrorUnauthorized:\n      value:\n        error: unauthorized\n        status: 401\n    ErrorPaymentRequired:\n      value:\n        error: not enough available credits\n        status: 402\n    ErrorForbidden:\n      value:\n        error: forbidden\n        status: 403\n    ErrorUnprocessableEntity:\n      value:\n        error: \"param is missing or the value is empty: article\"\n        status: 422\n    ErrorTooManyRequests:\n      value:\n        error: \"Rate limit reached, try again in 30 seconds\"\n        status: 429\n\n    ArticlesIndex:\n      value:\n        - type_of: article\n          id: 194541\n          title: There's a new DEV theme in town for all you 10x hackers out there (plus one\n            actually useful new feature)\n          description: ''\n          cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--74Bl23tz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png\n          readable_publish_date: Oct 24\n          social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--SeMxdKIa--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png\n          tag_list:\n            - meta\n            - changelog\n            - css\n            - ux\n          tags: meta, changelog, css, ux\n          slug: there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n          path: \"/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\"\n          url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n          canonical_url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n          comments_count: 37\n          positive_reactions_count: 12\n          public_reactions_count: 142\n          collection_id:\n          created_at: '2019-10-24T13:41:29Z'\n          edited_at: '2019-10-24T13:56:35Z'\n          crossposted_at:\n          published_at: '2019-10-24T13:52:17Z'\n          last_comment_at: '2019-10-25T08:12:43Z'\n          published_timestamp: '2019-10-24T13:52:17Z'\n          user:\n            name: Ben Halpern\n            username: ben\n            twitter_username: bendhalpern\n            github_username: benhalpern\n            website_url: http://benhalpern.com\n            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--Y1sq1tFG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png\n            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--DcW51A6v--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png\n          organization:\n            name: The DEV Team\n            username: devteam\n            slug: devteam\n            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--0kDBq1Ne--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png\n            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--8tTU-XkZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png\n    ArticleShow:\n      value:\n        type_of: article\n        id: 150589\n        title: \"Byte Sized Episode 2: The Creation of Graph Theory \"\n        description: The full story of Leonhard Euler and the creation of this fundamental\n          computer science principle, delivered in a few minutes.\n        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\n        readable_publish_date: Aug  1\n        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\n        tag_list: computerscience, graphtheory, bytesized, history\n        tags:\n          - computerscience\n          - graphtheory\n          - bytesized\n          - history\n        slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        path: \"/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\"\n        url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        canonical_url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        comments_count: 21\n        positive_reactions_count: 122\n        public_reactions_count: 322\n        collection_id: 1693\n        created_at: \"2019-07-31T11:15:06Z\"\n        edited_at:\n        crossposted_at:\n        published_at: \"2019-08-01T15:47:54Z\"\n        last_comment_at: \"2019-08-06T16:48:10Z\"\n        published_timestamp: \"2019-08-01T15:47:54Z\"\n        body_html: |+\n          <p>Today's episode of Byte Sized is about Leonhard Euler and the creation of <a href=\"https://en.wikipedia.org/wiki/Graph_theory\">Graph Theory</a>.</p>\n\n          <p>For more about how Graph Theory works, check out this video from BaseCS!</p>...\n        body_markdown: \"---\\r\\ntitle: Byte Sized Episode 2: The Creation of Graph Theory \\r\\npublished:\n          true\\r\\ndescription: The full story of Leonhard Euler and the creation of this fundamental\n          computer science principle, delivered in a few minutes.\\r\\ntags: computerscience,\n          graphtheory, bytesized, history\\r\\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\\r\\nseries:\n          Byte Sized Season 1\\r\\n---\\r\\n\\r\\nToday's episode of Byte Sized is about Leonhard\n          Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\\r\\n\\r\\nFor\n          more about how Graph Theory works, check out this video from BaseCS!...\"\n        user:\n          name: Vaidehi Joshi\n          username: vaidehijoshi\n          twitter_username: vaidehijoshi\n          github_username: vaidehijoshi\n          website_url: http://www.vaidehi.com\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg\n        organization:\n          name: Byte Sized\n          username: bytesized\n          slug: bytesized\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png\n    ArticleCreateTitleBody:\n      value:\n        article:\n          title: Hello, World!\n          published: true\n          body_markdown: Hello DEV, this is my first post\n          tags: [\"discuss\", \"help\"]\n          series: Hello series\n    ArticleCreateFrontMatter:\n      value:\n        article:\n          body_markdown: |\n            ---\n            title: Hello, World!\n            published: true\n            tags: discuss, help\n            date: 20190701T10:00Z\n            series: Hello series\n            ---\n\n            Hello DEV, this is my first post\n    ArticleCreateOrganization:\n      value:\n        article:\n          title: Hello, World!\n          published: true\n          body_markdown: Hello DEV, this is my first post\n          tags: [\"discuss\", \"help\"]\n          series: Hello series\n          organization_id: 1234\n    ArticleVideo:\n      value:\n        - type_of: video_article\n          id: 273532\n          path: \"/devteam/basecs-depth-first-search-implementing-4kkl\"\n          cloudinary_video_url: https://res.cloudinary.com/....png\n          title: 'BaseCS: Depth First Search Implementing'\n          user_id: 2882\n          video_duration_in_minutes: '11:47'\n          video_source_url: 'https://dw71fyauz7yz9.cloudfront.net/123/123.m3u8'\n          user:\n            name: Vaidehi Joshi\n\n    Comments:\n      value:\n        - type_of: comment\n          id_code: m3m0\n          created_at: 2020-07-01T17:59:43Z\n          body_html: |\n            <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n            <html><body>\n            <p>...</p>\n\n            </body></html>\n          user:\n            name: Heriberto Morissette\n            username: heriberto_morissette\n            twitter_username:\n            github_username:\n            website_url:\n            profile_image: https://res.cloudinary.com/...jpeg\n            profile_image_90: https://res.cloudinary.com/...jpeg\n          children: []\n        - type_of: comment\n          id_code: m357\n          created_at: 2020-07-02T17:19:40Z\n          body_html: |\n            <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n            <html><body>\n            <p>...</p>\n\n            <p>...</p>\n\n            </body></html>\n          user:\n            name: Dario Waelchi\n            username: dario waelchi\n            twitter_username:\n            github_username:\n            website_url:\n            profile_image: https://res.cloudinary.com/...png\n            profile_image_90: https://res.cloudinary.com/...png\n          children:\n            - type_of: comment\n              id_code: m35m\n              created_at: 2020-08-01T11:59:40Z\n              body_html: |\n                <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n                <html><body>\n\n                <p>...</p>\n\n                </body></html>\n              user:\n                name: rhymes\n                username: rhymes\n                twitter_username:\n                github_username:\n                website_url:\n                profile_image: https://res.cloudinary.com/...jpeg\n                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg\n              children: []\n    CommentsDeleted:\n      value:\n        - type_of: comment\n          id_code: m357\n          body_html: <p>[deleted]</p>\n          user: {}\n          children:\n            - type_of: comment\n              id_code: m35m\n              body_html: |\n                <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n                <html><body>\n\n                <p>...</p>\n\n                </body></html>\n              user:\n                name: rhymes\n                username: rhymes\n                twitter_username:\n                github_username:\n                website_url:\n                profile_image: https://res.cloudinary.com/...jpeg\n                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg\n              children: []\n    CommentsHidden:\n      value:\n        - type_of: comment\n          id_code: m357\n          body_html: <p>[hidden by post author]</p>\n          user: {}\n          children:\n            - type_of: comment\n              id_code: m35m\n              body_html: |\n                <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n                <html><body>\n\n                <p>...</p>\n\n                </body></html>\n              user:\n                name: rhymes\n                username: rhymes\n                twitter_username:\n                github_username:\n                website_url:\n                profile_image: https://res.cloudinary.com/...jpeg\n                profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--SC90PuMi--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2693/146201.jpeg\n              children: []\n    Comment:\n      value:\n        type_of: comment\n        id_code: m357\n        created_at: 2020-08-02T17:19:40Z\n        body_html: |\n          <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n          <html><body>\n          <p>...</p>\n\n          <p>...</p>\n\n          </body></html>\n        user:\n          name: Dario Waelchi\n          username: dario waelchi\n          twitter_username:\n          github_username:\n          website_url:\n          profile_image: https://res.cloudinary.com/...png\n          profile_image_90: https://res.cloudinary.com/...png\n        children:\n          - type_of: comment\n            id_code: m35m\n            created_at: 2020-07-02T17:19:40Z\n            body_html: |\n              <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n              <html><body>\n\n              <p>...</p>\n\n              </body></html>\n            user:\n              name: rhymes\n              username: rhymes\n              twitter_username:\n              github_username:\n              website_url:\n              profile_image: https://res.cloudinary.com/...jpeg\n              profile_image_90: https://res.cloudinary.com/....jpeg\n            children: []\n    CommentDeleted:\n      value:\n        type_of: comment\n        id_code: m357\n        body_html: <p>[deleted]</p>\n        user: {}\n        children:\n          - type_of: comment\n            id_code: m35m\n            body_html: |\n              <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n              <html><body>\n\n              <p>...</p>\n\n              </body></html>\n            user:\n              name: rhymes\n              username: rhymes\n              twitter_username:\n              github_username:\n              website_url:\n              profile_image: https://res.cloudinary.com/...jpeg\n              profile_image_90: https://res.cloudinary.com/...jpeg\n            children: []\n    CommentHidden:\n      value:\n        type_of: comment\n        id_code: m357\n        body_html: <p>[hidden by post author]</p>\n        user: {}\n        children:\n          - type_of: comment\n            id_code: m35m\n            body_html: |\n              <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n              <html><body>\n\n              <p>...</p>\n\n              </body></html>\n            user:\n              name: rhymes\n              username: rhymes\n              twitter_username:\n              github_username:\n              website_url:\n              profile_image: https://res.cloudinary.com/...jpeg\n              profile_image_90: https://res.cloudinary.com/...jpeg\n            children: []\n\n    Followers:\n      value:\n        - type_of: user_follower\n          id: 12\n          name: Mrs. Neda Morissette\n          path: \"/nedamrsmorissette\"\n          username: nedamrsmorissette\n          profile_image: https://res.cloudinary.com/...\n        - type_of: user_follower\n          id: 11\n          name: Yoko Hintz\n          path: \"/yokohintz\"\n          username: yokohintz\n          profile_image: https://res.cloudinary.com/...\n\n    Listings:\n      value:\n        - type_of: listing\n          id: 1157\n          title: TestBash Detroit\n          slug: testbash-detroit-50gb\n          body_markdown: \"Do you want to learn about automation? Maybe you're interested in\n            AI-driven testing? Security testing? We have a selection of talks, workshops and\n            training courses to help you in a wide variety of areas in software testing. Join\n            us for our very first trip to Detroit MI! \\n\\nhttps://bit.ly/TBDetroit\"\n          tag_list: events\n          tags:\n            - events\n          category: cfp\n          processed_html: |\n            <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>\n\n            <p><a href=\"https://bit.ly/TBDetroit\">https://bit.ly/TBDetroit</a></p>\n          published: true\n          user:\n            name: Heather\n            username: heatherr\n            twitter_username:\n            github_username: Heather-R\n            website_url:\n            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n    ListingsByOrganization:\n      value:\n        - type_of: listing\n          id: 1157\n          title: TestBash Detroit\n          slug: testbash-detroit-50gb\n          body_markdown: \"Do you want to learn about automation? Maybe you're interested in\n            AI-driven testing? Security testing? We have a selection of talks, workshops and\n            training courses to help you in a wide variety of areas in software testing. Join\n            us for our very first trip to Detroit MI! \\n\\nhttps://bit.ly/TBDetroit\"\n          tag_list: events\n          tags:\n            - events\n          category: cfp\n          processed_html: |\n            <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>\n\n            <p><a href=\"https://bit.ly/TBDetroit\">https://bit.ly/TBDetroit</a></p>\n          published: true\n          user:\n            name: Heather\n            username: heatherr\n            twitter_username:\n            github_username: Heather-R\n            website_url:\n            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n          organization:\n            name: E Corp\n            username: ecorp\n            slug: ecorp\n            profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n            profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n    Listing:\n      value:\n        type_of: listing\n        id: 1157\n        title: TestBash Detroit\n        slug: testbash-detroit-50gb\n        body_markdown: \"Do you want to learn about automation? Maybe you're interested in\n          AI-driven testing? Security testing? We have a selection of talks, workshops and\n          training courses to help you in a wide variety of areas in software testing. Join\n          us for our very first trip to Detroit MI! \\n\\nhttps://bit.ly/TBDetroit\"\n        tag_list: events\n        tags:\n          - events\n        category: cfp\n        processed_html: |\n          <p>Do you want to learn about automation? Maybe you're interested in AI-driven testing? Security testing? We have a selection of talks, workshops and training courses to help you in a wide variety of areas in software testing. Join us for our very first trip to Detroit MI! </p>\n\n          <p><a href=\"https://bit.ly/TBDetroit\">https://bit.ly/TBDetroit</a></p>\n        published: true\n        user:\n          name: Heather\n          username: heatherr\n          twitter_username:\n          github_username: Heather-R\n          website_url:\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--ggU5WPaT--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--CjladMBD--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136256/11cced64-afd2-4421-91e1-c5f7b216d49b.jpeg\n    ListingCreate:\n      value:\n        listing:\n          title: ACME Conference\n          body_markdown: Awesome conference\n          category: cfp\n          tags:\n            - events\n    ListingCreateOrganization:\n      value:\n        listing:\n          title: ACME Conference\n          body_markdown: Awesome conference\n          category: cfp\n          tags:\n            - events\n          organization_id: 1\n    ListingUpdate:\n      value:\n        listing:\n          title: ACME New Conference\n          body_markdown: Awesome new conference\n    ListingUpdateActionBump:\n      value:\n        listing:\n          action: bump\n    ListingUpdateActionPublish:\n      value:\n        listing:\n          action: publish\n    ListingUpdateActionUnpublish:\n      value:\n        listing:\n          action: unpublish\n\n    PodcastEpisodes:\n      value:\n        - type_of: podcast_episodes\n          id: 13894\n          path: \"/codenewbie/s11-e7-why-site-reliability-is-so-important-molly-struve\"\n          image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png\n          title: S11:E7 - Why site reliability is so important (Molly Struve)\n          podcast:\n            title: CodeNewbie\n            slug: codenewbie\n            image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png\n        - type_of: podcast_episodes\n          id: 13829\n          path: \"/codenewbie/s11-e6-what-are-the-pros-and-cons-of-working-in-civic-tech-aidan-feldman\"\n          image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png\n          title: S11:E6 - What are the pros and cons of working in civic tech (Aidan Feldman)\n          podcast:\n            title: CodeNewbie\n            slug: codenewbie\n            image_url: https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/2/9f50a462-9152-429a-b15e-d024baaa8e01.png\n\n    Tags:\n      value:\n        - id: 6\n          name: javascript\n          bg_color_hex: \"#F7DF1E\"\n          text_color_hex: \"#000000\"\n        - id: 8\n          name: webdev\n          bg_color_hex: \"#562765\"\n          text_color_hex: \"#ffffff\"\n    TagsFollowed:\n      value:\n        - id: 13\n          name: discuss\n          points: 3\n        - id: 12\n          name: webdev\n          points: 1\n\n    User:\n      value:\n        type_of: user\n        id: 1234\n        username: bob\n        name: bob\n        summary: Hello, world\n        twitter_username: bob\n        github_username: bob\n        website_url:\n        location: New York\n        joined_at: Jan 1, 2017\n        profile_image: https://res.cloudinary.com/...jpeg\n\n    Users:\n      value:\n        - type_of: user\n          id: 1234\n          username: bob\n          name: bob\n          summary: Hello, world\n          twitter_username: bob\n          github_username: bob\n          website_url:\n          location: New York\n          joined_at: Jan 1, 2017\n          profile_image: https://res.cloudinary.com/...jpeg\n\n    WebhookCreate:\n      value:\n        webhook_endpoint:\n          target_url: https://example.com/webhooks/webhook1\n          source: DEV\n          events:\n            - article_created\n    WebhookShow:\n      value:\n        type_of: webhook_endpoint\n        id: 1\n        source: DEV\n        target_url: https://example.com/webhooks/webhook1\n        events:\n          - article_created\n        created_at: \"2019-09-02T09:47:39.230Z\"\n        user:\n          name: bob\n          username: bob\n          twitter_username:\n          github_username: bob\n          website_url:\n          profile_image: \"...\"\n          profile_image_90: \"...\"\n\n    ProfileImage:\n      value:\n        type_of: profile_image\n        image_of: user\n        profile_image: https://res.cloudinary.com/...jpeg\n        profile_image_90: https://res.cloudinary.com/...jpeg\n\n    Organization:\n      value:\n        type_of: organization\n        username: ecorp\n        name: E Corp\n        summary: Together we can change the world, with E Corp\n        twitter_username: ecorp\n        github_username: ecorp\n        url: https://ecorp.internet\n        location: New York\n        joined_at: '2019-10-24T13:41:29Z'\n        tech_stack: Ruby\n        tag_line:\n        story:\n        profile_image: https://res.cloudinary.com/...jpeg\n\ntags:\n  - name: admin-configuration\n    description: Site-wide configuration set by admins (requires super admin authorization)\n  - name: articles\n    description: Articles are all the posts users create on DEV\n  - name: comments\n    description: Users can leave comments to articles and podcasts episodes\n  - name: follows\n    description: Resources are user can follow\n  - name: followers\n    description: Users can follow other users on the website\n  - name: listings\n    description: Listings are classified ads\n  - name: organizations\n    description: Users can create and join organizations\n  - name: podcast-episodes\n    description: Podcast episodes\n  - name: readinglist\n    description: User's reading list\n  - name: tags\n    description: Tags for articles\n  - name: users\n    description: Users own resources that require authentication\n  - name: videos\n    description: Video articles\n  - name: webhooks\n    description: Webhooks are HTTP endpoints registered to receive events\n  - name: profile images\n    description: User or organization profile images\n\npaths:\n  /admin/config:\n    get:\n      operationId: getConfig\n      summary: Admin config\n      description: |\n        This endpoint returns the \"site config\" as set by admin.\n      tags:\n        - admin-configuration\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/admin/config\n      responses:\n        \"200\":\n          description: All site-wide config\n          content:\n            application/json:\n              schema:\n                type: object\n    put:\n      operationId: upsertConfig\n      summary: Update Site-wide Config\n      description: |\n        This endpoint allows admins to declare values or update values for \"site config\".\n      tags:\n        - admin-configuration\n      security:\n        - api_key: []\n        - oauth2: []\n      requestBody:\n        description: Config up upsert\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SiteConfig\"\n      responses:\n        \"201\":\n          description: Newly updated config\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-forbidden:\n                  $ref: \"#/components/examples/ErrorForbidden\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n  /articles:\n    get:\n      operationId: getArticles\n      summary: Published articles\n      description: |\n        This endpoint allows the client to retrieve a list of articles.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        By default it will return featured, published articles ordered\n        by descending popularity.\n\n        It supports pagination, each page will contain `30` articles by default.\n      tags:\n        - articles\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n        - name: tag\n          in: query\n          description: |\n            Using this parameter will retrieve articles that contain the\n            requested tag.\n\n            Articles will be ordered by descending popularity.\n\n            This parameter can be used in conjuction with `top`.\n          schema:\n            type: string\n          example: discuss\n        - name: tags\n          in: query\n          description: |\n            Using this parameter will retrieve articles with any of the comma-separated tags.\n\n            Articles will be ordered by descending popularity.\n          schema:\n            type: string\n          example: \"javascript, css\"\n        - name: tags_exclude\n          in: query\n          description: |\n            Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.\n\n            Articles will be ordered by descending popularity.\n          schema:\n            type: string\n          example: \"node, java\"\n        - name: username\n          in: query\n          description: |\n            Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n\n            This parameter can be used in conjuction with `state`.\n          schema:\n            type: string\n          example: ben\n        - name: state\n          in: query\n          description: |\n            Using this parameter will allow the client to check which articles are fresh or rising.\n\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n\n            This param can be used in conjuction with `username`, only if set to `all`.\n          schema:\n            type: string\n            enum: [fresh, rising, all]\n          example: fresh\n        - name: top\n          in: query\n          description: |\n            Using this parameter will allow the client to return the most popular articles\n            in the last `N` days.\n\n            `top` indicates the number of days since publication of the articles\n            returned.\n\n            This param can be used in conjuction with `tag`.\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n          example: 2\n        - name: collection_id\n          in: query\n          description: |\n            Adding this will allow the client to return the list of articles\n            belonging to the requested collection, ordered by ascending\n            publication date.\n          schema:\n            type: integer\n            format: int32\n          example: 99\n      responses:\n        \"200\":\n          description: A list of articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleIndex\"\n              examples:\n                articles-success:\n                  $ref: \"#/components/examples/ArticlesIndex\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all articles)\n          source: |\n            curl https://dev.to/api/articles\n        - lang: Shell\n          label: curl (user's articles)\n          source: |\n            curl https://dev.to/api/articles?username=ben\n    post:\n      operationId: createArticle\n      summary: Create a new article\n      description: |\n        This endpoint allows the client to create a new article.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        ### Rate limiting\n\n        There is a limit of 10 requests per 30 seconds.\n\n        ### Additional resources\n\n        - [Rails tests for Articles API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)\n      tags:\n        - articles\n      requestBody:\n        description: Article to create\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ArticleCreate\"\n            examples:\n              article-create-title-body:\n                $ref: \"#/components/examples/ArticleCreateTitleBody\"\n              article-create-front-matter:\n                $ref: \"#/components/examples/ArticleCreateFrontMatter\"\n              article-create-organization:\n                $ref: \"#/components/examples/ArticleCreateOrganization\"\n\n      responses:\n        \"201\":\n          description: A newly created article\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArticleShow\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticleShow\"\n          headers:\n            Location:\n              description: The URL of the new article\n              schema:\n                type: string\n                format: url\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-forbidden:\n                  $ref: \"#/components/examples/ErrorForbidden\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n        \"429\":\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorTooManyRequests\"\n          headers:\n            Retry-After:\n              description: The number of seconds to wait until the next request\n              schema:\n                type: integer\n                format: int32\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"article\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"published\":false,\"tags\":[\"discuss\", \"javascript\"]}}' \\\n              https://dev.to/api/articles\n        - lang: Shell\n          label: curl (with front matter)\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n            -H \"api-key: API_KEY\" \\\n            -d '{\"article\":{\"body_markdown\":\"---\\ntitle:A sample article about...\\npublished:false\\n---\\n...\"}}' \\\n            https://dev.to/api/articles\n\n  /articles/latest:\n    get:\n      operationId: getLatestArticles\n      summary: Published articles sorted by publish date\n      description: |\n        This endpoint allows the client to retrieve a list of articles.\n        ordered by descending publish date.\n\n        It supports pagination, each page will contain `30` articles by default.\n      tags:\n        - articles\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of articles sorted by descending publish date \n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleIndex\"\n              examples:\n                articles-success:\n                  $ref: \"#/components/examples/ArticlesIndex\"\n\n  /articles/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id of the article\n        schema:\n          type: integer\n          format: int32\n          minimum: 1\n        example: 150589\n    get:\n      operationId: getArticleById\n      summary: A published article by ID\n      description: |\n        This endpoint allows the client to retrieve a single\n        published article given its `id`.\n      tags:\n        - articles\n      responses:\n        \"200\":\n          description: An article\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArticleShow\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticleShow\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/articles/150589\n    put:\n      operationId: updateArticle\n      summary: Update an article\n      description: |\n        This endpoint allows the client to update an existing article.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        ### Rate limiting\n\n        There is a limit of 30 requests per 30 seconds.\n\n        ### Additional resources\n\n        - [Rails tests for Articles API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)\n      tags:\n        - articles\n      requestBody:\n        description: |\n          Article params for the update.\n\n          *Note: if the article contains a front matter in its body, its front\n          matter properties will still take precedence over any JSON equivalent\n          params, which means that the full body_markdown with the modified\n          front matter params needs to be provided for an update to be successful*\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ArticleUpdate\"\n            examples:\n              article-update-title-body:\n                $ref: \"#/components/examples/ArticleCreateTitleBody\"\n              article-update-front-matter:\n                $ref: \"#/components/examples/ArticleCreateFrontMatter\"\n              article-update-organization:\n                $ref: \"#/components/examples/ArticleCreateOrganization\"\n      responses:\n        \"200\":\n          description: The updated article\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArticleShow\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticleShow\"\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-forbidden:\n                  $ref: \"#/components/examples/ErrorForbidden\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n        \"429\":\n          description: Too Many Requests\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorTooManyRequests\"\n          headers:\n            Retry-After:\n              description: The number of seconds to wait until the next request\n              schema:\n                type: integer\n                format: int32\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -X PUT -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"article\":{\"title\":\"Title\"}}' \\\n              https://dev.to/api/articles/{id}\n\n  /articles/{username}/{slug}:\n    parameters:\n      - name: username\n        in: path\n        required: true\n        description: User or organization username.\n        schema:\n          type: string\n        example: devteam\n      - name: slug\n        in: path\n        required: true\n        description: Slug of the article.\n        schema:\n          type: string\n        example: for-empowering-community-2k6h\n    get:\n      operationId: getArticleByPath\n      summary: A published article by path\n      description: |\n        This endpoint allows the client to retrieve a single\n        published article given its `path`.\n      tags:\n        - articles\n      responses:\n        \"200\":\n          description: An article\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArticleShow\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticleShow\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/articles/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n\n  /articles/me:\n    get:\n      operationId: getUserArticles\n      summary: User's articles\n      description: |\n        This endpoint allows the client to retrieve a list of published articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Published articles will be in reverse chronological publication order.\n\n        It will return published articles with pagination.\n        By default a page will contain `30` articles.\n      tags:\n        - articles\n        - users\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of published articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleMe\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me\n\n  /articles/me/published:\n    get:\n      operationId: getUserPublishedArticles\n      summary: User's published articles\n      description: |\n        This endpoint allows the client to retrieve a list of published articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Published articles will be in reverse chronological publication order.\n\n        It will return published articles with pagination.\n        By default a page will contain `30` articles.\n      tags:\n        - articles\n        - users\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of published articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleMe\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/published\n\n  /articles/me/unpublished:\n    get:\n      operationId: getUserUnpublishedArticles\n      summary: User's unpublished articles\n      description: |\n        This endpoint allows the client to retrieve a list of unpublished articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Unpublished articles will be in reverse chronological creation order.\n\n        It will return unpublished articles with pagination.\n        By default a page will contain `30` articles.\n      tags:\n        - articles\n        - users\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleMe\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/unpublished\n\n  /articles/me/all:\n    get:\n      operationId: getUserAllArticles\n      summary: User's all articles\n      description: |\n        This endpoint allows the client to retrieve a list of all articles on\n        behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        It will return both published and unpublished articles with pagination.\n\n        Unpublished articles will be at the top of the list in reverse chronological creation order.\n        Published articles will follow in reverse chronological publication order.\n\n        By default a page will contain `30` articles.\n      tags:\n        - articles\n        - users\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleMe\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/all\n\n  /comments:\n    get:\n      operationId: getCommentsByArticleId\n      summary: Comments\n      description: |\n        This endpoint allows the client to retrieve all comments belonging to an\n        article or podcast episode as threaded conversations.\n\n        It will return the all top level comments with their nested comments as\n        threads. See the format specification for further details.\n      tags:\n        - comments\n      parameters:\n        - name: a_id\n          in: query\n          description: Article identifier.\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n          example: 270180\n        - name: p_id\n          in: query\n          description: Podcast Episode identifier.\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n          example: 124\n      responses:\n        \"200\":\n          description: A list of threads of comments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n              examples:\n                comments-success:\n                  $ref: \"#/components/examples/Comments\"\n                comments-success-deleted:\n                  $ref: \"#/components/examples/CommentsDeleted\"\n                comments-success-hidden:\n                  $ref: \"#/components/examples/CommentsHidden\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all comments of an article)\n          source: |\n            curl https://dev.to/api/comments?a_id=270180\n        - lang: Shell\n          label: curl (all comments of a podcast episode)\n          source: |\n            curl https://dev.to/api/comments?p_id=124\n\n  /comments/{id}:\n    get:\n      operationId: getCommentById\n      summary: Comment\n      description: |\n        This endpoint allows the client to retrieve a comment as well as his\n        descendants comments.\n\n        It will return the required comment (the root) with its nested\n        descendants as a thread.\n\n        See the format specification for further details.\n      tags:\n        - comments\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Comment identifier.\n          schema:\n            type: string\n          example: m35m\n      responses:\n        \"200\":\n          description: A comment and its descendants\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n              examples:\n                comment-success:\n                  $ref: \"#/components/examples/Comment\"\n                comments-success-deleted:\n                  $ref: \"#/components/examples/CommentDeleted\"\n                comments-success-hidden:\n                  $ref: \"#/components/examples/CommentHidden\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (a comment and its descendants)\n          source: |\n            curl https://dev.to/api/comments/m51e\n\n  /followers/users:\n    get:\n      operationId: getFollowers\n      summary: Followers\n      description: |\n        This endpoint allows the client to retrieve a list of the followers\n        they have.\n\n        \"Followers\" are users that are following other users on the website.\n\n        It supports pagination, each page will contain `80` followers by default.\n      tags:\n        - followers\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam80to1000'\n      responses:\n        \"200\":\n          description: A list of followers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Follower\"\n              examples:\n                followers-success:\n                  $ref: \"#/components/examples/Followers\"\n\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/followers/users\n\n  /follows/tags:\n    get:\n      operationId: getFollowedTags\n      summary: Followed tags\n      description: |\n        This endpoint allows the client to retrieve a list of the tags\n        they follow.\n      tags:\n        - follows\n        - tags\n      responses:\n        \"200\":\n          description: A list of followed tags\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FollowedTag\"\n              examples:\n                followers-success:\n                  $ref: \"#/components/examples/TagsFollowed\"\n\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/follows/tags\n\n  /listings:\n    get:\n      operationId: getListings\n      summary: Published listings\n      description: |\n        This endpoint allows the client to retrieve a list of listings.\n\n        \"Listings\" are classified ads that users create on DEV.\n        They can be related to conference announcements, job offers, mentorships,\n        upcoming events and more.\n\n        By default it will return published listings ordered by descending\n        freshness.\n\n        It supports pagination, each page will contain `30` articles by default.\n      tags:\n        - listings\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n        - $ref: '#/components/parameters/listingCategoryParam'\n      responses:\n        \"200\":\n          description: A list of listings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Listing\"\n              examples:\n                listings-success:\n                  $ref: \"#/components/examples/Listings\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all listings)\n          source: |\n            curl https://dev.to/api/listings\n    post:\n      operationId: createListing\n      summary: Create a new listing\n      description: |\n        This endpoint allows the client to create a new listing.\n\n        \"Listings\" are classified ads that users create on DEV.\n        They can be related to conference announcements, job offers, mentorships,\n        upcoming events and more.\n\n        The user creating the listing or the organization on which behalf the user\n        is creating for need to have enough creadits for this operation to be\n        successful. The server will prioritize the organization's credits over\n        the user's credits.\n\n        ### Additional resources\n\n        - [Rails tests for Listings API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/listings_spec.rb)\n      tags:\n        - listings\n      requestBody:\n        description: Listing to create\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListingCreate\"\n            examples:\n              listing-create:\n                $ref: \"#/components/examples/ListingCreate\"\n              listing-create-organization:\n                $ref: \"#/components/examples/ListingCreateOrganization\"\n\n      responses:\n        \"201\":\n          description: A newly created Listing\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Listing\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/Listing\"\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"402\":\n          description: PaymentRequired\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorPaymentRequired\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n      security:\n        - api_key: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"listing\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"category\":\"cfp\"}}' \\\n              https://dev.to/api/listings\n        - lang: Shell\n          label: curl (with tags)\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"listing\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"category\":\"cfp\",\"tags\":[\"python\"]}}' \\\n              https://dev.to/api/listings\n        - lang: Shell\n          label: curl (draft)\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"listing\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"category\":\"cfp\",\"action\":\"draft\"}}' \\\n              https://dev.to/api/listings\n\n  /listings/category/{category}:\n    get:\n      operationId: getListingsByCategory\n      summary: Published listings by category\n      description: |\n        This endpoint allows the client to retrieve a list of listings belonging\n        to the specified category.\n\n        \"Listings\" are classified ads that users create on DEV.\n        They can be related to conference announcements, job offers, mentorships,\n        upcoming events and more.\n\n        By default it will return published listings ordered by descending\n        freshness.\n\n        It supports pagination, each page will contain `30` articles by default.\n      tags:\n        - listings\n      parameters:\n        - name: category\n          in: path\n          required: true\n          description: The category of the listing\n          schema:\n            $ref: \"#/components/schemas/ListingCategory\"\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of listings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Listing\"\n              examples:\n                listings-success:\n                  $ref: \"#/components/examples/Listings\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (call for papers listings)\n          source: |\n            curl https://dev.to/api/listings/category/cfp\n\n  /listings/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id of the listing\n        schema:\n          type: integer\n          format: int64\n          minimum: 1\n        example: 1\n    get:\n      operationId: getListingById\n      summary: A listing\n      description: |\n        This endpoint allows the client to retrieve\n        a single listing given its `id`.\n\n        An unpublished listing is only accessible if authentication is supplied\n        and it belongs to the authenticated user.\n      tags:\n        - listings\n      responses:\n        \"200\":\n          description: A listing\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Listing\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/Listing\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      security:\n        - {} # this indicates that authentication is optional\n        - api_key: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/listings/1184\n        - lang: Shell\n          label: curl (with authentication)\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/listings/1185\n    put:\n      operationId: updateListing\n      summary: Update a listing\n      description: |\n        This endpoint allows the client to update an existing listing.\n      tags:\n        - listings\n      requestBody:\n        description: |\n          Listing params for the update.\n\n          **Note**: except for bumping, publishing and unpublishing there are the\n          following restrictions on the ability to update listings:\n\n          - the payload has to contain at least one param among `title`, `body_markdown` or `tags`/`tag_list`\n          - the listing can't be updated if it has not been bumped in the last 24 hours\n          - the listing can't be updated if it has been published but not recently bumped\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListingUpdate\"\n            examples:\n              listing-update-action-bump:\n                $ref: \"#/components/examples/ListingUpdateActionBump\"\n              listing-update-action-publish:\n                $ref: \"#/components/examples/ListingUpdateActionPublish\"\n              listing-update-action-unpublish:\n                $ref: \"#/components/examples/ListingUpdateActionUnpublish\"\n              listing-update:\n                $ref: \"#/components/examples/ListingUpdate\"\n      responses:\n        \"200\":\n          description: The updated article\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArticleShow\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticleShow\"\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"402\":\n          description: PaymentRequired\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorPaymentRequired\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n      security:\n        - api_key: []\n      x-code-samples:\n        - lang: Shell\n          label: curl (bump)\n          source: |\n            curl -X PUT -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"listing\":{\"action\":\"bump\"}' \\\n              https://dev.to/api/listings/{id}\n        - lang: Shell\n          label: curl (update)\n          source: |\n            curl -X PUT -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"listing\":{\"title\":\"Title\"}' \\\n              https://dev.to/api/listings/{id}\n\n  /readinglist:\n    get:\n      operationId: getReadinglist\n      summary: User's reading list\n      description: |\n        This endpoint allows the client to retrieve a list of readinglist reactions along with the related article for the authenticated user.\n\n        Reading list will be in reverse chronological order base\n        on the creation of the reaction.\n\n        It will return paginated reading list items along with the articles\n        they refer to. By default a page will contain `30` items\n      tags:\n        - readinglist\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to100'\n      responses:\n        \"200\":\n          description: The reading list with a overwiew of the article\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ReadingList\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/readinglist\n\n  /organizations/{username}:\n    get:\n      operationId: getOrganization\n      summary: An organization\n      description: |\n        This endpoint allows the client to retrieve a single organization by their username\n      tags:\n        - organizations\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: |\n            Username of the organization\n          schema:\n            type: string\n          example: \"ecorp\"\n      responses:\n        \"200\":\n          description: An organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n              examples:\n                user-success:\n                  $ref: \"#/components/examples/Organization\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                user-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/organizations/ecorp\n\n  /organizations/{username}/users:\n    get:\n      operationId: getOrgUsers\n      summary: Organization's users\n      description: |\n        This endpoint allows the client to retrieve a list of users belonging to the organization\n\n        It supports pagination, each page will contain `30` users by default.\n      tags:\n        - organizations\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: |\n            Username of the organization\n          schema:\n            type: string\n          example: \"ecorp\"\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of users belonging to the organization\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n              examples:\n                user-success:\n                  $ref: \"#/components/examples/Users\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                user-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/organizations/ecorp/users\n\n  /organizations/{username}/listings:\n    get:\n      operationId: getOrgListings\n      summary: Organization's listings\n      description: |\n        This endpoint allows the client to retrieve a list of listings belonging to the organization\n\n        It supports pagination, each page will contain `30` listing by default.\n      tags:\n        - organizations\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: |\n            Username of the organization\n          schema:\n            type: string\n          example: \"ecorp\"\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n        - $ref: '#/components/parameters/listingCategoryParam'\n      responses:\n        \"200\":\n          description: A list of listings belonging to the organization\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: \"#/components/schemas/Listing\"\n                    - required:\n                      - organization\n              examples:\n                user-success:\n                  $ref: \"#/components/examples/ListingsByOrganization\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                user-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/organizations/ecorp/listings\n\n  /organizations/{username}/articles:\n    get:\n      operationId: getOrgArticles\n      summary: Organization's Articles\n      description: |\n        This endpoint allows the client to retrieve a list of Articles belonging to the organization\n\n        It supports pagination, each page will contain `30` listing by default.\n      tags:\n        - organizations\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: |\n            Username of the organization\n          schema:\n            type: string\n          example: \"ecorp\"\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n      responses:\n        \"200\":\n          description: A list of users belonging to the organization\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleIndex\"\n              examples:\n                article-success:\n                  $ref: \"#/components/examples/ArticlesIndex\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                user-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/organizations/ecorp/listings\n\n  /podcast_episodes:\n    get:\n      operationId: getPodcastEpisodes\n      summary: Published podcast episodes\n      description: |\n        This endpoint allows the client to retrieve a list of podcast episodes.\n\n        \"Podcast episodes\" are episodes belonging to podcasts.\n\n        It will only return active podcast episodes that belong to published\n        podcasts available on the platform,\n        ordered by descending publication date.\n\n        It supports pagination, each page will contain `30` articles by default.\n      tags:\n        - podcast-episodes\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam30to1000'\n        - name: username\n          in: query\n          description: |\n            Using this parameter will retrieve episodes belonging\n            to a specific podcast.\n          schema:\n            type: string\n          example: codenewbie\n      responses:\n        \"200\":\n          description: A list of podcast episodes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PodcastEpisode\"\n              examples:\n                articles-success:\n                  $ref: \"#/components/examples/PodcastEpisodes\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all podcast episodes)\n          source: |\n            curl https://dev.to/api/podcast_episodes\n        - lang: Shell\n          label: curl (all episodes belonging to a podcast)\n          source: |\n            curl https://dev.to/api/podcast_episodes?username=codenewbie\n\n  /tags:\n    get:\n      operationId: getTags\n      summary: Tags\n      description: |\n        This endpoint allows the client to retrieve a list of tags\n        that can be used to tag articles.\n\n        It will return tags ordered by popularity.\n\n        It supports pagination, each page will contain `10` tags by default.\n      tags:\n        - tags\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam10to1000'\n      responses:\n        \"200\":\n          description: A list of tags\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Tag\"\n              examples:\n                articles-success:\n                  $ref: \"#/components/examples/Tags\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all tags)\n          source: |\n            curl https://dev.to/api/tags\n\n  /users/{id}:\n    get:\n      operationId: getUser\n      summary: A user\n      description: |\n        This endpoint allows the client to retrieve a single user, either by\n        id or by the user's username\n      tags:\n        - users\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: |\n            Id of the user.\n\n            It can be either of the following two values:\n\n              - an integer representing the id of the user\n              - the string `by_username` (needs to be used in conjuction with the param `url`)\n          schema:\n            type: string\n          example: \"1\"\n        - name: url\n          in: query\n          description: Username of the user\n          schema:\n            type: string\n          example: ben\n      responses:\n        \"200\":\n          description: A user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                user-success:\n                  $ref: \"#/components/examples/User\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                user-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (by id)\n          source: |\n            curl https://dev.to/api/users/1\n        - lang: Shell\n          label: curl (by username)\n          source: |\n            curl https://dev.to/api/users/by_username?url=ben\n\n  /users/me:\n    get:\n      operationId: getUserMe\n      summary: The authenticated user\n      description: |\n        This endpoint allows the client to retrieve information\n        about the authenticated user\n      tags:\n        - users\n      responses:\n        \"200\":\n          description: A user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n              examples:\n                user-success:\n                  $ref: \"#/components/examples/User\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/users/me\n\n  /profile_images/{username}:\n    get:\n      operationId: getProfileImage\n      summary: User or organization profile picture\n      description: |\n        This endpoint allows the client to retrieve a user or organization\n        profile image information by its corresponding username\n      tags:\n        - profile images\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: Username of the user or organization\n          schema:\n            type: string\n          example: \"diogoosorio\"\n      responses:\n        \"200\":\n          description: The profile image\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProfileImage\"\n              examples:\n                profile-image-success:\n                  $ref: \"#/components/examples/ProfileImage\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                profile-image-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/profile_images/diogoosorio\n\n  /videos:\n    get:\n      operationId: getArticlesWithVideo\n      summary: Articles with a video\n      description: |\n        This endpoint allows the client to retrieve a list of articles\n        that are uploaded with a video.\n\n        It will only return published video articles\n        ordered by descending popularity.\n\n        It supports pagination, each page will contain `24` articles by default.\n      tags:\n        - articles\n        - videos\n      parameters:\n        - $ref: '#/components/parameters/pageParam'\n        - $ref: '#/components/parameters/perPageParam24to1000'\n      responses:\n        \"200\":\n          description: A list of video articles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ArticleVideo\"\n              examples:\n                articles-success:\n                  $ref: \"#/components/examples/ArticleVideo\"\n      x-code-samples:\n        - lang: Shell\n          label: curl (all video articles)\n          source: |\n            curl https://dev.to/api/videos\n\n  /webhooks:\n    get:\n      operationId: getWebhooks\n      summary: Webhooks\n      description: |\n        This endpoint allows the client to retrieve a list of webhooks they have\n        previously registered.\n\n        \"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\n        triggered inside the web application, events like `article_created`, `article_updated`.\n\n        It will return all webhooks, without pagination.\n      tags:\n        - webhooks\n      responses:\n        \"200\":\n          description: A list of webhooks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WebhookIndex\"\n              examples:\n                webhooks-success:\n                  summary: Successful response\n                  value:\n                    - type_of: webhook_endpoint\n                      id: 1\n                      source: DEV\n                      target_url: https://example.com/webhooks/webhook1\n                      events:\n                        - article_created\n                      created_at: \"2019-09-02T09:47:39.230Z\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -H \"api-key: API_KEY\" https://dev.to/api/webhooks\n    post:\n      operationId: createWebhook\n      summary: Create a new webhook\n      description: |\n        This endpoint allows the client to create a new webhook.\n\n        \"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\n        triggered inside the web application, events like `article_created`, `article_updated`.\n      tags:\n        - webhooks\n      requestBody:\n        description: Webhook to create\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WebhookCreate\"\n            examples:\n              webhook-create:\n                $ref: \"#/components/examples/WebhookCreate\"\n\n      responses:\n        \"201\":\n          description: A newly created webhook\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookShow\"\n              examples:\n                webhook-success:\n                  $ref: \"#/components/examples/WebhookShow\"\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-bad-request:\n                  $ref: \"#/components/examples/ErrorBadRequest\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                error-unprocessable-entity:\n                  $ref: \"#/components/examples/ErrorUnprocessableEntity\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -X POST -H \"Content-Type: application/json\" \\\n              -H \"api-key: API_KEY\" \\\n              -d '{\"webhook_endpoint\":{\"target_url\":\"https://example.org/webhooks/webhook1\",\"source\":\"DEV\",\"events\":[\"article_created\"]}}' \\\n              https://dev.to/api/webhooks\n\n  /webhooks/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id of the webhook\n        schema:\n          type: integer\n          format: int64\n          minimum: 1\n        example: 123\n    get:\n      operationId: getWebhookById\n      summary: A webhook endpoint\n      description: |\n        This endpoint allows the client to retrieve a single\n        webhook given its `id`.\n      tags:\n        - webhooks\n      responses:\n        \"200\":\n          description: A webhook endpoint\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookShow\"\n              examples:\n                webhook-success:\n                  $ref: \"#/components/examples/WebhookShow\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl https://dev.to/api/webhooks/123\n    delete:\n      operationId: deleteWebhook\n      summary: A webhook endpoint\n      description: |\n        This endpoint allows the client to delete a single\n        webhook given its `id`.\n      tags:\n        - webhooks\n      responses:\n        \"204\":\n          description: A successful deletion\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-unauthorized:\n                  $ref: \"#/components/examples/ErrorUnauthorized\"\n        \"404\":\n          description: Resource not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n              examples:\n                article-not-found:\n                  $ref: \"#/components/examples/ErrorNotFound\"\n      security:\n        - api_key: []\n        - oauth2: []\n      x-code-samples:\n        - lang: Shell\n          label: curl\n          source: |\n            curl -X DELETE \\\n              -H \"api-key: API_KEY\" \\\n              https://dev.to/api/webhooks/1\n",
			"canonicalURL": "/github.com/Web-Dev-Collaborative/WEB_DEV_COLLABORATIVE@59476fbab5e953664e5c4f6d549c7ac116ad9cbd/-/blob/forem/docs/api_v0.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Web-Dev-Collaborative/WEB_DEV_COLLABORATIVE/blob/59476fbab5e953664e5c4f6d549c7ac116ad9cbd/forem/docs/api_v0.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/organizations/{username}/listings\": get: responses: 200: contents: application/json: generate schema: item: allOf: schema type mismatch: object and ",
	"NotImplemented": [
		"oauth2 security"
	]
}