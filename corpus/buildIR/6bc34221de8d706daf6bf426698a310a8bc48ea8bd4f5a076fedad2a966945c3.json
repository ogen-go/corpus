{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/readme/openapi.yml",
			"byteSize": 23809,
			"content": "openapi: 3.0.2\nservers:\n  - url: https://dash.readme.io/api/v1\ninfo:\n  x-ballerina-display:\n    label: Readme\n    iconPath: \"icon.png\"\n  description: |\n    This is a generated connector for [Readme API v2.0](https://docs.readme.com/reference) OpenAPI specification.  \n    The Readme API provides the capability to create product and API documentation programmatically.\n  x-ballerina-init-description: |\n    The connector initialization requires setting the API credentials.\n    Create a [Readme account](https://dash.readme.com/signup) and obtain tokens by following [this guide](https://docs.readme.com/reference/authentication).\n  title: API Endpoints\n  version: 2.0.0\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://readme.com/static/brandkit/readme-blue.svg\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/readmeio/oas/master/packages/examples/3.0/json/readme.json\n      version: \"3.0\"\n  x-providerName: readme.io\npaths:\n  /:\n    get:\n      description: Returns project data for API key\n      operationId: getProject\n      responses:\n        \"200\":\n          description: Project data\n      security:\n        - apiKey: []\n      summary: Get metadata about the current project\n      tags:\n        - Projects\n  /api-specification:\n    get:\n      description: Get API specification metadata\n      operationId: getAPISpecification\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"200\":\n          description: Successfully retrieved API specification metadata.\n          headers:\n            Link:\n              $ref: \"#/components/headers/link\"\n      security:\n        - apiKey: []\n      tags:\n        - API Specification\n    post:\n      description: Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github\n      operationId: uploadAPISpecification\n      parameters:\n        - $ref: \"#/components/parameters/x-readme-version\"\n      requestBody:\n        description: File\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/File\"\n        required: true\n      responses:\n        \"201\":\n          description: The API specification successfully imported\n        \"400\":\n          description: There was a validation error during import\n      security:\n        - apiKey: []\n      tags:\n        - API Specification\n  \"/api-specification/{id}\":\n    delete:\n      description: Delete an API specification in ReadMe\n      operationId: deleteAPISpecification\n      parameters:\n        - description: ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The API specification was deleted\n        \"404\":\n          description: There is no API specification with that ID\n      security:\n        - apiKey: []\n      tags:\n        - API Specification\n    put:\n      description: Update an API specification in ReadMe\n      operationId: updateAPISpecification\n      parameters:\n        - description: ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: File\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/File\"\n        required: true\n      responses:\n        \"200\":\n          description: The API specification was updated\n        \"400\":\n          description: There was a validation error during import\n        \"404\":\n          description: There is no API specification with that ID\n      security:\n        - apiKey: []\n      tags:\n        - API Specification\n  \"/categories/{slug}\":\n    get:\n      description: Returns the category with this slug\n      operationId: getCategory\n      parameters:\n        - description: Slug of category. Slugs must be all lowercase, and replace spaces with hyphens. For example, for the the category \"Getting Started\", enter the slug \"getting-started\"\n          example: getting-started\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"200\":\n          description: The category exists and has been returned\n        \"404\":\n          description: There is no category with that slug\n      security:\n        - apiKey: []\n      summary: Get category\n      tags:\n        - Categories\n  \"/categories/{slug}/docs\":\n    get:\n      description: Returns the docs and children docs within this category\n      operationId: getCategoryDocs\n      parameters:\n        - description: Slug of category. Slugs must be all lowercase, and replace spaces with hyphens. For example, for the the category \"Getting Started\", enter the slug \"getting-started\"\n          example: getting-started\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"200\":\n          description: The category exists and all of the docs have been returned\n        \"404\":\n          description: There is no category with that slug\n      security:\n        - apiKey: []\n      summary: Get docs for category\n      tags:\n        - Categories\n  /changelogs:\n    get:\n      description: Returns a list of changelogs associated with the project API key\n      operationId: getChangelogs\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/page\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Link:\n              $ref: \"#/components/headers/link\"\n      security:\n        - apiKey: []\n      summary: Get changelogs\n      tags:\n        - Changelog\n    post:\n      description: Create a new changelog inside of this project\n      operationId: createChangelog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Changelog\"\n        description: Changelog object\n        required: true\n      responses:\n        \"201\":\n          description: The changelog has successfully been created\n        \"400\":\n          description: There was a validation error during creation\n      security:\n        - apiKey: []\n      summary: Create changelog\n      tags:\n        - Changelog\n  \"/changelogs/{slug}\":\n    delete:\n      description: Delete the changelog with this slug\n      operationId: deleteChangelog\n      parameters:\n        - description: Slug of changelog\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The changelog has successfully been updated\n        \"404\":\n          description: There is no changelog with that slug\n      security:\n        - apiKey: []\n      summary: Delete changelog\n      tags:\n        - Changelog\n    get:\n      description: Returns the changelog with this slug\n      operationId: getChangelog\n      parameters:\n        - description: Slug of changelog\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The changelog exists and has been returned\n        \"404\":\n          description: There is no changelog with that slug\n      security:\n        - apiKey: []\n      summary: Get changelog\n      tags:\n        - Changelog\n    put:\n      description: Update a changelog with this slug\n      operationId: updateChangelog\n      parameters:\n        - description: Slug of changelog\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Changelog\"\n        description: Changelog object\n        required: true\n      responses:\n        \"200\":\n          description: The changelog has successfully been updated\n        \"400\":\n          description: There was a validation error during update\n        \"404\":\n          description: There is no changelog with that slug\n      security:\n        - apiKey: []\n      summary: Update changelog\n      tags:\n        - Changelog\n  /custompages:\n    get:\n      description: Returns a list of custom pages associated with the project API key\n      operationId: getCustomPages\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/page\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Link:\n              $ref: \"#/components/headers/link\"\n      security:\n        - apiKey: []\n      summary: Get custom pages\n      tags:\n        - Custom Pages\n    post:\n      description: Create a new custom page inside of this project\n      operationId: createCustomPage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CustomPage\"\n        description: CustomPage object\n        required: true\n      responses:\n        \"201\":\n          description: The custom page has successfully been created\n        \"400\":\n          description: There was a validation error during creation\n      security:\n        - apiKey: []\n      summary: Create custom page\n      tags:\n        - Custom Pages\n  \"/custompages/{slug}\":\n    delete:\n      description: Delete the custom page with this slug\n      operationId: deleteCustomPage\n      parameters:\n        - description: Slug of custom page\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The custom page has successfully been updated\n        \"404\":\n          description: There is no custom page with that slug\n      security:\n        - apiKey: []\n      summary: Delete custom page\n      tags:\n        - Custom Pages\n    get:\n      description: Returns the custom page with this slug\n      operationId: getCustomPage\n      parameters:\n        - description: Slug of custom page\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The custom page exists and has been returned\n        \"404\":\n          description: There is no custom page with that slug\n      security:\n        - apiKey: []\n      summary: Get custom page\n      tags:\n        - Custom Pages\n    put:\n      description: Update a custom page with this slug\n      operationId: updateCustomPage\n      parameters:\n        - description: Slug of custom page\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CustomPage\"\n        description: CustomPage object\n        required: true\n      responses:\n        \"200\":\n          description: The custom page has successfully been updated\n        \"400\":\n          description: There was a validation error during update\n        \"404\":\n          description: There is no custom page with that slug\n      security:\n        - apiKey: []\n      summary: Update custom page\n      tags:\n        - Custom Pages\n  /docs:\n    post:\n      description: Create a new doc inside of this project\n      operationId: createDoc\n      parameters:\n        - $ref: \"#/components/parameters/x-readme-version\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Doc\"\n        description: Doc object\n        required: true\n      responses:\n        \"201\":\n          description: The doc has successfully been created\n        \"400\":\n          description: There was a validation error during creation\n      security:\n        - apiKey: []\n      summary: Create doc\n      tags:\n        - Docs\n  /docs/search:\n    post:\n      description: Returns all docs that match the search\n      operationId: searchDocs\n      parameters:\n        - description: Search string to look for\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"200\":\n          description: The search was successful and results were returned\n        \"500\":\n          description: There is an internal error\n      security:\n        - apiKey: []\n      summary: Search docs\n      tags:\n        - Docs\n  \"/docs/{slug}\":\n    delete:\n      description: Delete the doc with this slug\n      operationId: deleteDoc\n      parameters:\n        - description: Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"\n          example: new-features\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"204\":\n          description: The doc has successfully been updated\n        \"404\":\n          description: There is no doc with that slug\n      security:\n        - apiKey: []\n      summary: Delete doc\n      tags:\n        - Docs\n    get:\n      description: Returns the doc with this slug\n      operationId: getDoc\n      parameters:\n        - description: Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"\n          example: new-features\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      responses:\n        \"200\":\n          description: The doc exists and has been returned\n        \"404\":\n          description: There is no doc with that slug\n      security:\n        - apiKey: []\n      summary: Get doc\n      tags:\n        - Docs\n    put:\n      description: Update a doc with this slug\n      operationId: updateDoc\n      parameters:\n        - description: Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"\n          example: new-features\n          in: path\n          name: slug\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/x-readme-version\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Doc\"\n        description: Doc object\n        required: true\n      responses:\n        \"200\":\n          description: The doc has successfully been updated\n        \"400\":\n          description: There was a validation error during update\n        \"404\":\n          description: There is no doc with that slug\n      security:\n        - apiKey: []\n      summary: Update doc\n      tags:\n        - Docs\n  /errors:\n    get:\n      description: Returns with all of the error page types for this project\n      operationId: getErrors\n      responses:\n        \"200\":\n          description: An array of the errors\n      security:\n        - apiKey: []\n      summary: Get errors\n      tags:\n        - Errors\n  \"/swagger/{id}\":\n    delete:\n      deprecated: true\n      description: DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#deleteapispecification to delete a Swagger file in ReadMe\n      operationId: deleteSwagger\n      parameters:\n        - description: ID of swagger the file\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The Swagger file was successfully deleted\n        \"404\":\n          description: There is no Swagger file with that ID\n      security:\n        - apiKey: []\n      tags:\n        - Swagger\n  /version:\n    get:\n      description: Retrieve a list of versions associated with a project API key\n      operationId: getVersions\n      responses:\n        \"200\":\n          description: JSON list of versions\n      security:\n        - apiKey: []\n      summary: Get versions\n      tags:\n        - Version\n    post:\n      description: Create a new version\n      operationId: createVersion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n        description: Version object\n        required: true\n      responses:\n        \"200\":\n          description: The model was successfully created and associated with the target project\n        \"400\":\n          description: That version already exists in the project, or there are validation errors with the request\n        \"404\":\n          description: Could not find target fork in database\n      security:\n        - apiKey: []\n      summary: Create version\n      tags:\n        - Version\n  \"/version/{versionId}\":\n    delete:\n      description: Delete a version\n      operationId: deleteVersion\n      parameters:\n        - $ref: \"#/components/parameters/versionId\"\n      responses:\n        \"200\":\n          description: The target version was successfully deleted\n        \"400\":\n          description: Cannot delete the main version for a project\n        \"404\":\n          description: Could not find target version in database\n      security:\n        - apiKey: []\n      summary: Delete version\n      tags:\n        - Version\n    get:\n      description: Returns the version with this version ID\n      operationId: getVersion\n      parameters:\n        - $ref: \"#/components/parameters/versionId\"\n      responses:\n        \"200\":\n          description: JSON version model\n        \"404\":\n          description: Could not find target version in database\n      security:\n        - apiKey: []\n      summary: Get version\n      tags:\n        - Version\n    put:\n      description: Update an existing version\n      operationId: updateVersion\n      parameters:\n        - $ref: \"#/components/parameters/versionId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n        description: Version object\n        required: true\n      responses:\n        \"200\":\n          description: The target version was successfully updated\n        \"400\":\n          description: Cannot demote a version through update\n        \"404\":\n          description: Could not find target version in database\n      security:\n        - apiKey: []\n      summary: Update version\n      tags:\n        - Version\ncomponents:\n  headers:\n    link:\n      description: Pagination information. See https://docs.readme.com/reference#pagination\n      schema:\n        type: string\n  parameters:\n    page:\n      description: Used to specify further pages (starts at 1)\n      in: query\n      name: page\n      schema:\n        default: 1\n        minimum: 1\n        type: integer\n    perPage:\n      description: Number of items to include in pagination (up to 100, defaults to 10)\n      in: query\n      name: perPage\n      schema:\n        default: 10\n        maximum: 100\n        minimum: 1\n        type: integer\n    versionId:\n      description: Semver version indentifier\n      in: path\n      name: versionId\n      required: true\n      schema:\n        type: string\n    x-readme-version:\n      description: Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.\n      example: v3.0\n      in: header\n      name: x-readme-version\n      required: true\n      schema:\n        type: string\n  schemas:\n    Changelog:\n      properties:\n        body:\n          description: Body content of the changelog\n          type: string\n        hidden:\n          default: true\n          description: Visibility of the changelog\n          type: boolean\n        title:\n          description: Title of the changelog\n          type: string\n        type:\n          default: \"\"\n          enum:\n            - \"\"\n            - added\n            - fixed\n            - improved\n            - deprecated\n            - removed\n          type: string\n      required:\n        - title\n        - body\n      type: object\n    CustomPage:\n      properties:\n        body:\n          description: Body formatted in Markdown (displayed by default).\n          type: string\n        hidden:\n          default: true\n          description: Visibility of the custom page\n          type: boolean\n        html:\n          description: Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).\n          type: string\n        htmlmode:\n          default: false\n          description: \"**true** if `html` should be displayed, **false** if `body` should be displayed.\"\n          type: boolean\n        title:\n          description: Title of the custom page\n          type: string\n      required:\n        - title\n      type: object\n    Doc:\n      properties:\n        body:\n          description: Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters\n          type: string\n        category:\n          description: \"Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory \"\n          type: string\n        hidden:\n          default: true\n          description: Visibility of the page\n          type: boolean\n        parentDoc:\n          description: For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc\n          type: string\n        title:\n          description: Title of the page\n          type: string\n        type:\n          description: Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the \"guides\" section). Can be \"basic\" (most common), \"error\" (page desribing an API error), or \"link\" (page that redirects to an external link)\n          enum:\n            - basic\n            - error\n            - link\n          type: string\n      required:\n        - title\n        - category\n      type: object\n    File:\n      properties:\n        spec:\n          description: OpenAPI/Swagger file\n          format: binary\n          type: string\n      type: object\n    Version:\n      properties:\n        codename:\n          description: Dubbed name of version\n          type: string\n        from:\n          description: Semantic Version to use as the base fork\n          type: string\n        is_beta:\n          default: true\n          type: boolean\n        is_deprecated:\n          description: Should this be deprecated? Only allowed in PUT operations\n          type: boolean\n        is_hidden:\n          description: Should this be publically accessible?\n          type: boolean\n        is_stable:\n          description: Should this be the **main** version\n          type: boolean\n        version:\n          description: Semantic Version\n          type: string\n      required:\n        - version\n        - from\n      type: object\n  securitySchemes:\n    apiKey:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@f9db3eb6d773bf1ad2e81f3afbe55aad28286517/-/blob/openapi/readme/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/f9db3eb6d773bf1ad2e81f3afbe55aad28286517/openapi/readme/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: anonymous type name conflict: \"FileForm\""
}