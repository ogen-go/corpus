{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kivra/developer.kivra.com"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 143626,
			"content": "---\nopenapi: 3.0.1\n\nservers:\n  - url: https://sender.api.kivra.com\n    description: Production environment\n  - url: https://sender.sandbox-api.kivra.com\n    description: Sandbox environment\ninfo:\n  title: Kivra Sweden API\n  x-logo:\n    url: \"assets/kivra-logo.svg\"\n    altText: Kivra logo\n  version: v1 and v2\n  description: |\n    # Receipt API\n    The Receipt API, used to send digital receipts to users in Kivra, is available [here](http://developer.kivra.com/receipt/posapi/index.html).\n\n    # Introduction\n    This document is intended for developers and others who are interested in integrating with [Kivra Sweden](https://www.kivra.se) to send digital mail. Questions can be sent to [avsandare.support@kivra.com](mailto:avsandare.support@kivra.com) or via [our contact form](https://kivra.se/sv/foretag/skicka/hjalp).\n    If anything is missing or seems incorrect, please check the [GitHub issues](https://github.com/kivra/developer.kivra.com/issues) for existing known issues or [create a new issue](https://github.com/kivra/developer.kivra.com/issues/new).\n\n    ## National versions of Kivra APIs\n    As local requirements and regulations might affect the way one interacts with the API, it's important to look for the version of the Kivra API specific for the Country where you intend to operate.\n\n    This version of the API is about **Kivra Sweden**.\n\n    ## Api version: v1 and v2\n    We currently have some endpoints in v1 and some endpoints in v2. Each endpoint documented here specifies in the URL whether the endpoint requires v1 or v2.\n\n    Authentication is the same for both v1 and v2.\n\n    ## Introduction to API integration\n    The Kivra API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable,\n    resource-oriented URLs, and uses HTTP response codes to indicate API errors.\n\n    Integration in its simplest form consists of two steps:\n\n      1. The first step is to match the Recipient-databases either as a whole or one by one and see which Recipients the tenant can send contents to\n      2. The second step is to send the contents itself.\n\n    A prerequisite for these two steps is to have client credentials, to be authorized to use the Kivra API, and a tenant ID to specify who is the sender of the content.\n\n\n    ## The service\n    Kivra is a secure digital mailbox tied to your social security number or\n    VAT-number to which you receive documents from companies, organizations\n    and government agencies that are connected to Kivra. With Kivra you can\n    receive, manage and archive your content wherever you are and on every\n    platform as long as you have an internet connection.\n\n    Over one billion window envelopes are sent every year in Sweden alone, so\n    by choosing to use Kivra you contribute to a reduced carbon footprint!\n\n    Kivra acts as a digital postman between Sender and Recipients which is\n    also reflected in the allocation of responsibilities. Concretely, this\n    means that the Sender is responsible for the design and content whereas\n    Recipients are responsible for reading and processing the received content.\n    \n    ## Policy for Personal Information in the metadata\n    It is not allowed to include so called sensitive personal data in any of the free-text metadata fields. \n    \n    Sensitive personal data includes the data referred to in article 9.1. GDPR (data concerning racial or ethnic origin, \n    political opinions, religious or philosophical beliefs, membership of a trade union, health, a person's sex life or \n    sexual orientation, genetic data, biometric data that is being used to uniquely identify a person), and this means \n    for example that it is not allowed to state the reason for a booking in either of the Title field or the Description \n    field when sending medical care notices. \n    \n    The sender is responsible for ensuring no sensitive personal data is included in any of the free-text metadata fields.\n\n    # Change Mangement\n    The Kivra API is continuously improved and new features may be added at any time. Major changes are announced\n    via the [KivraStatus](https://www.kivrastatus.se) service.\n\n    Disruptive changes in the API that may break existing integrations, as for instance removal of an older version of an API endpoint, are announced via [KivraStatus](https://www.kivrastatus.se) at least 6 months before the change becomes operative.\n\n    We strongly recommend to subscribe to [KivraStatus](https://www.kivrastatus.se) in order to get updates for the API.\n\n    ## Changelog\n    List changes to the API documentation.\n\n    | Date         | Details of changes 2    2                                          |\n    | ------------ | ------------------------------------------------------------------ |\n    | 2016-10-14 | Release of Kivra API Version 1                                     |\n    | 2018-04-20 | Clarify [Environments and API Endpoints](#api-endpoints)           |\n    | 2018-04-27 | Document optional Content-fields and response-headers              |\n    | 2018-08-20 | Added description of `partner` endpoint (BETA).                    |\n    | 2018-08-20 | Correction in Company scheme                                       |\n    | 2019-04-30 | Added Tenant Agreement API as (BETA) |\n    | 2019-05-10 | Added `variable_amount`and `min_amount`in Payment scheme |\n    | 2019-05-10 | Removed deprecated `token` bearer. `Bearer` should be used instead |\n    | 2019-06-04 | Added Tenant API v2 |\n    | 2019-08-08 | Updated size for icons and agreement schema |\n    | 2019-09-05 | Multiple Examples for content, removed TelNumber from AgreementParty  |\n    | 2019-09-23 | v1 and v2 description. Corrections in the agreement endpoints. Agreements now available in production. |\n    | 2020-01-08 | Removed v1 of POST tenant |\n    | 2020-03-31 | Announcing of new endpoints and removal of old ones in 6 months |\n    | 2020-07-07 | New layout and text adjustments |\n    | 2020-09-28 | \"type\" attribute in content schema |\n    | 2021-10-14 | Endpoint `/v1/tenant/{tenantKey}/user/diff/{diffId}` |\n    | 2022-02-25 | New error codes |\n    | 2022-03-15 | Information about PAdES release for Kivra Signatures |\n    | 2022-04-11 | More details about specification for time and dates |\n\n    # Terminology\n    ### User\n    An end user who is a user of Kivra and receives Content from tenants. A user is a physical person. \n    Users are required to login at least once every 12 month to be considered active. A user that has not logged in since longer than 12 months will no longer be listed for matching to inform the tenant that they should not send content to this user.\n    A user can also become `dormant` or deactivate themselves and be put under a `grace period`. Both these states are to aid the Tenant in making sure that only active Users are available for receiving Content. \n    See below for more information on Dormant and Grace period.\n\n    ### Company\n    A Company is a judicial person that can receive content from tenants. Users that are signatories to the company have access to the company’s mailbox and archive. Other Users that are not signatories may also be given access to a company’s mailbox and archive. A Company can become `dormant` or deactivated by users that are signatories to the company. Both these states is to aid the Tenant in making sure that only active Companies are available for receiving Content. See below for more information on Dormant and Grace period.\n\n    ### Non-user\n    A non-user is an individual who is not a customer of Kivra but could be addressed by tenants in specific flows like the *retain functionality* or *signatures*.\n\n    ### Recipient\n    A Company, a User or a non-user in the context of being a receiver. Throughout this document Recipient is used to interchangeably mean a User or Company being a receiver.\n\n    ### Tenant / Integrator\n    Tenant is a sender that is integrated with Kivra. They need not be integrated directly, but can go through an integrator. The integrator acts as intermediary for the tenant at integration and can handle multiple tenants.\n\n    ### Partner\n    Partner is a third-party company (typically an ERP company) that may be granted access to access and process a company's mailbox, on behalf of the company.\n\n    ### Content\n    The information sent by Tenants to Recipients, i.e. Documents, Invoices, etc.\n\n    ### Dormant Recipient\n    Recipient who can’t be reached by email and sms-notifications are put in a \"dormant\"-state. During this dormant state the Recipient won’t show up in any of user or company matching functionalities but the Tenant can still send Content which the Recipient will receive. When a Recipient log-in again they are awaken from dormant state and will start appearing in the matching functionalities again.\n\n    ### Grace period\n    Kivra employs a `45` day grace period when a Recipient deactivates. During this grace period the Recipient won’t show up in any of user or company matching functionalities but the Tenant can still send Content which the Recipient will receive.\n\n    ### User object\n    is a data object that contains all the available information about a user\n\n    ### Company object\n    is a data object that contains all the available information about a company\n\n    ### Tenant object\n    is a data object that contains all the available information about a sender.\n\n    ### Content object\n    is a data object that contains information about the document and the document itself\n\n    ### Retained functionality\n    For tenants wishing to send content to Recipients who are at the time not existing in Kivra’s database. Kivra will then store the content for the agreed period of time and deliver it once/if the target Recipient registers with Kivra within this period of time.\n\n    \u003caside class=\"notice\"\u003e\n    Note: Usage of retained functionality is only allowed in certain specific cases and its usage needs to be regulated in the business relationship between the sender party and Kivra.\n    \u003c/aside\u003e\n\n    ### Tenant key\n    Is a unique key that identifies a Tenant.\n\n    ### Metadata\n    is data about data or information about data. Originally, the concept of meta-information, ie information about information. Normally metadata describes the content and / or structure for a given data collection from any perspective. Kivra uses metadata to determine whom a content is to be sent to and other information that may be relevant for a shipment, as for instance payment information.\n\n    ### Json\n    Json or JavaScript Object Notation is a structured approach to data management. Similar to XML but much simpler and easier to read. JSON is the default serialization format  within the Kivra system. JSON have a limited set of types and close attention needs to be paid to the correct JSON-type for metadata when sending Content to Kivra.\n\n    # Conventions\n    ## Date \u0026 Time\n    KIVRA encodes and decodes all dates and times as [ISO 8601](http://www.w3.org/TR/NOTE-datetime) values. The format looks like `YYYY-MM-DDThh:mm:ss.sTZD`, example `1970-01-01T23:25:10.0330000+01:00` where:\n\n    * `YYYY`, The year including century\n    * `MM`, Month\n    * `DD`, Day\n    * `T`, Separator\n    * `hh`, Zero-padded hour between `00` and `24` (where `24` is only used to notate midnight at the end of a calendar day)\n    * `mm`, Zero-padded minutes between `00` and `59`\n    * `ss`, Zero-padded second between `00` and `60` (where `60` is only used to notate an added leap second)\n    * `s`, one or more digits representing a decimal fraction of a second\n    * `TZD`, Time zone designator (`Z` or `+hh:mm` or `-hh:mm`)\n\n    ## UTC\n    If the time is in UTC, add a `Z` directly after the time without a space. `Z` is the zone designator for the zero UTC offset. `09:30 UTC` is therefore represented as `09:30Z` or `0930Z`. `14:45:15 UTC` would be `14:45:15Z` or `144515Z`. UTC time is also known as 'Zulu' time, since 'Zulu' is the NATO phonetic alphabet word for `Z`.\n\n    The offset from UTC is given in the format `±[hh]:[mm]`, `±[hh][mm]`, or `±[hh]`. So if the time being described is one hour ahead of UTC (such as the time in Stockholm during the winter), the zone designator would be `+01:00`, `+0100`, or simply `+01`. This is appended to the time in the same way that `Z` was above. The offset from UTC changes with daylight saving time, e.g. a time offset in Chicago, would be `-06:00` for the winter (Central Standard Time) and `-05:00` for the summer (Central Daylight Time).\n\n    Please note that we always expect date \u0026 time to be specified as UTC or having an explicit timezone. Time \u0026 date fields without any time zone designator will be interpreted as UTC.\n    \n    ## Media types\n    The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media types, e.g. \"application/pdf\"\n\n    ## UTF-8 encoding\n    All data sent to Kivra needs to be [UTF-8](http://en.wikipedia.org/wiki/UTF-8) encoded.\n\n    ## Currency\n    All places where currency is specified, [ISO4217](https://en.wikipedia.org/wiki/ISO_4217) should be used.\n\n    ## Country code\n    Where applicable KIVRA uses a country code to determine certain formats. The country code should always be supplied using the [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) alpha-2 two-letter code.\n\n    ## Email address\n    Email addresses needs to be specified using [E.123](https://en.wikipedia.org/wiki/E.123)\n\n    ## Phone numbers (mobile, land line)\n    All phone numbers needs to be specified using [E.123](https://en.wikipedia.org/wiki/E.123)\n\n    ## Identifying users\n    Kivra uses the social security number/personal-number as key when accepting content. The format must adhere to the format `YYYYMMDDnnnn` that is including century-digits, i.e. `191212121212`.\n\n    ## VAT identifier\n    In many countries, companies (or even individuals) are registered with authorities responsible for collecting taxes derived from the business transactions performed by the companies. That registration commonly yields a registration number, which uniquely identifies that company within the domain of the authority. Some legislation has a concept of VAT grouping, in which case the structure of the VAT identifier may reflect the grouping by e.g. suffixing the number.\n\n    The full identifier starts with an ISO 3166-1 alpha-2 country code (except for Greece which uses the non-standard country code EL) and then has between `2` and `12` characters. The identifiers are composed of numeric digits in most countries, but in some countries they may contain letters.\n\n    Kivra only uses and recognizes the Swedish VAT number which is composed of the prefix `SE` followed by 12 digits. For instance, Kivra’s VAT Id would be: `SE556840226601`.\n\n    # Limits\n    Kivra handles millions of documents. We put limits to protect the system from receiving more data than it can handle, and to ensure an equitable distribution of system resources. There’s also various practical reasons for this, such as reducing Head-of-line blocking and providing a optimal experience for the enduser.\n\n    Our policies are as follows and are subject to change.\n\n    ### Content File-size\n    `1 MB` per **Content** per **Recipient**. This is the total JSON-object. For example, if you send two PDF’s embedded in a JSON-Content to a User the total for the JSON have to have a size less than `1 MB`.\n\n    ### Rate limit\n    `50` **contents** to the same **recipient** per minute. You can send many more contents per minute as long as they are to different receivers, but only up to `50` to the same recipient.\n\n    # Interacting with the API\n    All API access is performed over HTTPS through sender.[api, sandbox-api].kivra.com and data is sent and received as [JSON](http://www.json.org/). For trying out the API without touching live data we’ve set up a sandbox environment.\n    In order to ensure data privacy the following choices have been made, to name some that directly impact API workflows:\n    Unencrypted HTTP is not supported, you will be redirected to the resource you tried to reach, with http replaced by https, if you attempt to use plain HTTP.\n    Resources you have no right to see will either give you a describing status code or a `404`. `404` statuses are returned if the case is such that you don’t even have the right to know, according to the system's current state, if an object exists.\n\n    ## API Endpoints\n    Kivra uses different endpoints for production and testing as described below. We also provide the current IP addresses that *could* serve API requests, the current DNS-record will provide an up-to-date list with active endpoints. This is not meant to be a complete list of Kivra-maintained IP addresses. Please make sure to **always** access the Kivra API using the correct domain-name and environment instead of relying on IP addresses.\n\n    Kivra maintains a infrastructure, which grows dynamically to accommodate increasing demand. As a result, Kivra API servers use a range of IP addresses, and the addresses often change.\n\n    *Please note that we do not recommend managing firewall restrictions by IP address, as the IPs associated with these domains are not static.*\n\n    \u003caside class=\"notice\"\u003e\n    All interaction with Kivra's APIs must be done over HTTPS.\n    \u003c/aside\u003e\n\n    ### Production environment\n    The API endpoint for the production environment can be found at\n\n    `https://sender.api.kivra.com`\n\n    \u003caside class=\"notice\"\u003e\n    \u003ci\u003eNote: The older endpoint for production \u003cb\u003eapi.kivra.com\u003c/b\u003e will be removed on September 30th 2020\u003c/i\u003e\n    \u003c/aside\u003e\n\n    The production environment should only be used for sending real data, not for testing of any sort. For testing, please refer to Sandbox.\n\n    ### Sandbox environment\n    The API for the sandbox environment can be found at\n\n    `https://sender.sandbox-api.kivra.com`\n\n    \u003caside class=\"notice\"\u003e\n    \u003ci\u003eNote: The older endpoint for sandbox \u003cb\u003esandbox.kivra.com\u003c/b\u003e will be removed on September 30th 2020\u003c/i\u003e\n    \u003c/aside\u003e\n\n    The sandbox is not to be used with any critical or production data. We make no guarantees as to the availability of the service, or the data stored by it.\n\n    We usually deploy the latest production environment to our Sandbox, but may occasionally update it with newer builds, which may not be as reliable or well tested.\n\n    ## URL Components\n    When constructing resource identifiers (URIs) it is best to consider them as being built with up to four discrete units.\n\n    ### Endpoint\n    `https://sender.TYPE.kivra.com`\n\n    ### Version\n    `/VERSION`\n\n    ### Tenant resource\n    `/tenant/TENANTKEY`\n\n    ### Parameters\n    `/?QUERYSTRING`\n\n    ## Unit Fields\n    The units have parameterized fields, which allow you to change their respective meanings, those fields are briefly described below.\n\n    ### TYPE\n    `sandbox-api` for development and test or `api` for production purposes.\n\n    ### VERSION\n    Current API version is `v1` but some endpoint are already available as `v2`\n\n    ### KEY\n    The identifier of an object in a collection, its ID, if you will.\n\n    ### QUERYSTRING\n    A set of key-value pairs, used for filtering and setting options on collections.\n\n    ## HTTP Verbs\n    Where possible, the KIVRA API strives to use appropriate HTTP verbs for each action. The terms verb and method are used interchangingly.\n\n    ### Idempotency\n    The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request that is idempotent fails due to a network connection error, you can safely retry the request.\n\n    `GET` and `DELETE` requests are idempotent by definition, meaning that the same backend work will occur no matter how many times the same request is issued. You shouldn't send an idempotency key with these verbs because it will have no effect.\n\n    In short, this means that making a request with an idempotent verb only changes the state of the data the first time the request is made.\n\n    ## Methods\n    Read more about [HTTP/1.1 Method Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).\n\n    | Method      | Details                                                    |\n    | ----------- | ---------------------------------------------------------- |\n    | GET         | Used to read a resource, be it a collection or an object. That is, it can be performed repeatedly without changing the state of the resource |\n    | POST        | Used for creating resources, or performing custom or batch type actions |\n    | PUT         | Used for updating resources or collections, but can also be used to create a resource when the key has been predetermined. Note that `PUT` apply to the entire resource and not just parts of it. So, when doing a `PUT` operation, the entire resource is replaced |\n    | DELETE      | Used for deleting resources. Delete is atomic and acts on the whole resource, that is it can not be used to delete a part or alter the state of a resource. Use `PUT` for that |\n\n    # Resource Types\n    There are two main types of resources – objects and collections of objects, they are individually outlined in the following sections.\n    It can generally be said that if a URL ends with a unique identifier (also known as a key), it is an object or a sub-object. Resources ending with collection names are collection resources.\n\n    ## Object Resources\n    Objects are mostly real-world things, such as a user, tenant to name a few, but they can also be abstract things, like a sendrequest.\n\n    An example: */v1/tenant/13443459078e31ba8630e2e9842906c7baf38b131e*\n\n    ### Allowed Methods\n    **GET**\n    Read the representation of an object as it is accessible and viewable by you.\n\n    **PUT**\n    Update the object. If the object doesn’t already exist, it is created.\n\n    **PATCH**\n    Update the object with the specified attributes.\n\n    **DELETE**\n    Irreversably delete the designated resource from the entire system. This operation will in most cases be illegal for regular API consumers.\n\n    ## Collection Resources\n    Collections are conceptually lists of objects, that can be queried. Queries without any parameters will cause a listing of the keys that are used to identify the objects within the collection; adding parameters will either filter which keys show up or decorate the keys with the object they identify (in part or entirely).\n\n    When a collection resource is queried it will only return the list of keys that identify the objects it contains. If you want to see the actual objects you have to append the query parameter include=body to the URI, more on this below.\n\n    An example: */v2/tenant*\n\n    ### Allowed Methods\n    **GET**\n    List objects under the Collection, either all or using filters to search.\n\n    **POST**\n    Create a new object under the Collection.\n\n    ## Filters and Flags\n    In order to facilitate filtering/searching amongst the API objects, we provide the possibility to pass certain query string parameters that indicate which objects to include in the response and how they should be treated.\n\n    ### Filters\n    When searching for an object, it is suggested that you list the appropriate collection and add query parameters for the features of the object(s) you are trying to find in the URI. For example, when looking for if a user exists and is addressable for this Tenant, the resulting URL would be as follows `/tenant/TKEY/user/?ssn=SSN`\n\n    ### Flags\n    As mentioned, collections only list the keys of their member objects, which might inconvenience you by forcing you to make individual GET requests for each key in the list. In order to not waste bandwidth or time from setup and teardown of connections we supply the include flag. The include parameter currently accepts one of two values, body and fields, which indicate that you want the entire object or that you want a specific subset of the available fields, respectively.\n\n    **Note:** When the include parameter is set to fields it is assumed that you will also pass a fields parameter with a comma-separated list of names, declaring which fields you want to view.\n\n    # Tenants integration: Content management\n\n    Tenants integration allows *tenants* and *integrators* to send *content* to *recipents* via Kivra.\n\n    Tenants and integrator will use the `tenant` endpoint to integrate with Kivra.\n\n    Before looking at the details of the integration, let's look at the concept of \"opt-out\" and its implication for tenant integration.\n\n    ## Opt-out\n    Kivra uses a method called opt-out to make the service as easy as possible for Recipients and Senders. Opt-out means that when a Recipient register with Kivra they’ll automatically receive documents from all Tenants connected to Kivra. Recipients do not need to enable individual Tenants to start receiving Content.\n\n    ### Meaning of Opt-out for:\n\n    #### Tenant\n\n    Tenants can start sending Content to all Recipients in Kivra.\n    \n    When Tenant signs up new customers they can check (match) if that `SSN` or `VAT`-number is available as recipient in Kivra. If so, they can start sending content to them directly.\n\n    A Recipient can choose to disable (opt-out) a Tenant. In that case, that user or company will no longer show up as available in Kivra for that tenant. A `45`-day grace period will start to take effect to allow tenants to match their register. During this grace period the Tenant can still post content to the recipient.\n\n    #### Recipients\n\n    Recipients will automatically start receiving Content from new Tenants.\n\n    Recipients can choose to disable (opt-out) a Tenant. In that case, that Recipient will no longer show up as available in Kivra for that tenant. A `45`-day grace period will start to take effect to allow tenants to match their register. During this grace period the Tenant can still post content to the recipient.\n\n    Recipients needs to login at least once every 12 months to be considered active, and show up as available for the tenants.\n    \n    ## Typical flow for content management\n\n    The typical flow for sending content to recipients is illustrated here:\n\n    ![Send Content to Kivra - Basic Flow](https://www.lucidchart.com/publicSegments/view/3774eaa4-e877-49e8-86d3-0470f95f9b05/image.png)\n\n    ## Step 1: Matching Recipients\n\n    An integration starts by matching which Recipients can receive Content from the Tenant. Trying to send Content to Recipients not available to that tenant (either because they are not Kivra users or because they opt-out from that tenant) will be denied unless that Recipient is in a `45` days’ grace period with that Tenant.\n\n    This means that for each Tenant the Recipient-request is unique and therefore integrators managing several Tenants need to keep track of the different Recipients for each of the Tenants.\n\n    Matching of recipients is done via the `usermatch` resource.\n    \n    Matching of recipients is strongly recommended with the exception of flows using the \"retain\" functionality.\n\n    ## Step 2: Send Content\n\n    Sending of Content is done via the `content` resource. The metadata in the `content` resource identifies the user and also determines how the recipient can interact with the content.\n\n    ## Typical integration flows\n\n    The Kivra API is typically integrated in different data flows, resulting in many different scenarios. In this paragraph we will describe few of these typical scenarios and provide some tips on how to use the API in that context.\n\n    ### Daily document sending\n\n    In this scenario the sender needs to send a large amount of documents each day, some of which is sent via Kivra, the rest via ordinary post. There is therefore need for knowing very early in the process whether a document can be sent via Kivra or needs to be printed and sent by ordinary post.\n\n    The sender uses the API to match the recipient database, typically during the night, and use the recipient database to select which documents to be sent via Kivra and which need to be printed and sent via ordinary post.\n\n    Even if the recipient database have been matched, it is still important to check the result of the API operation when sending content, as some recipient might have become unavailable in the time between the matching of the recipient database and the sending of the document. In this case the API will answer with an error code (typically `40105`). The documents that could not be sent via API will need to be sent via ordinary post, typically as part of tomorrow's batch.\n\n    ### Payslips and retain functionality\n\n    Payslips are typically small batches of documents sent once a month that can be handled using a simpler flow, not including the matching step but using the retain functionality instead.\n\n    In this approach the sender sends all documents without checking if the user is a Kivra user or not, relying on the retain functionality instead. Content sent to non-Kivra users will be retained for a period of time (typically `390` days for payslips), meaning that it is kept by Kivra but not delivered. If the user creates a Kivra account before the retention period expires, the user will get all retained content. If the user does not create a Kivra account before the retention period expires, the content will be removed from Kivra.\n\n    ### Payments and invoices\n\n    Kivra allows to send both payable invoices (that might be paid via Kivra applications) or payment notifications that cannot be paid via Kivra, as for instance notification of autogiro payments.\n\n    `payable` is the field in the metadata controlling whether the document should be payable via Kivra applications or not. As Kivra uses the information provided in the metadata to actually perform the payment, it is very important that metadata in the `payment` section is correct.\n\n    Invoices can have multiple payment options. That means that while the recipient of the payment is the same for the entire invoice, some specifics of the payment can vary. The details are described further down in this document, but in general each option can have its own amount, reference information and due date. If there are more than one option, each of them must have a short title, and may have a longer description as well as its own icon.\n\n    If an invoice has more than one payment option, the first option is treated specially. All notifications are based on the due date in the first option, and if a user accesses an invoice in an older client that is not aware of the multiple-option functionality, it will only display the information from the first option. Because of this, it is important that the first option always is to pay the entire debt, or, more generally, that paying the first option will release the user from any further obligation related to that particular invoice.\n\n    # Tenant integration: Tenant management\n\n    With the introduction of `v2` of the Tenant management API, the client has the possibility to manage the tenants programmatically. In more details the client may:\n\n    * Create a tenant\n    * List all tenants that the client has currently access to\n    * Update and manage which companies the tenant represents\n    * Manage and update the display information of a tenant, meaning the sender name and the icon displayed in the Kivra apps to represent the sender\n    * Request access to a tenant that is currently managed by some other client\n\n    # Tenant integration: Agreements\n\n    Agreements integration allows *tenants* and *integrators* to send content to be signed via Kivra's signature service. Content to be signed is sent to a list of receivers (signers or delegates, see below) who may login to [signatures.kivra.com](https://signatures.kivra.com/), identify themselves and sign the document via BankId. Upon signature by all parties, the agreement is completed and a new content is created (the covenant file, see below) including the original content plus a signing log listing all signers and information about the signature. Covenant files can be verified cryptographically to make sure that the information included (both original content and signing log) is correct and has not been altered after creation.\n\n    Kivra's agreement service is not directly connected to Kivra's mailbox, and parties in an agreement do not need to be users of Kivra to use the service. However signers that are users of Kivra (or become Kivra users during the signing process) will have the benefit that the covenant file will be automatically transferred to their mailbox once the agreement is signed.\n\n    ## Signers, Delegates and Parties\n\n    Each individual signer in an agreement is categorized as either `signer`or `delegate`:\n\n    * a `signer` signs an agreement as an individual, for instance in the scenario of an employment agreement, the `signer` is the person receiving an employment offer. Each agreement must have at least one `signer`. Signer(s) do not need to be users of Kivra.\n    * a `delegate` signs an agreement as representative for a company, for instance in the scenario of an employment agreement the `delegate` is typically the HR manager sending the employment offer. To have a `delegate` in an agreement is not mandatory, in case the agreement only requires to be signed by the signer(s). Delegate(s) do not need to be users of Kivra.\n    * 'parties' refers to the `signers` and `delegates` in an agreement.\n\n    ## Agreement states\n\n    During its lifetime, an agreement can go through various states. The current state can be accessed by getting the agreement via the signature API:\n\n    ### State active\n\n    This is the inital state of the agreement after a successful create. During user actions on the agreement the state remains as `active`. The states that an active agreement can transition to are referred to as *terminal* states, meaning it's the end of the agreement lifecycle.\n\n    If an agreement do not transition to a terminal state within 30 days from its creation, it will expire and it will be removed from all our services.\n\n    The terminal states in which an agreement can transition to, are described here below.\n\n    ### State completed\n\n    Agreements automatically transitions to the state `completed` at the time when the last of all parties sign the agreement. When an agreement has been completed, it is forever under the terminal state completed and can never transition back to an active state or be acted upon by any party. In other words, no one can change a completed agreement.\n\n    When an agreement becomes completed, a covenant file is created (see below). The covenant file will be availabe to the tenant via the signature API, and to the signers and delegates via the graphical interface.\n\n    No one can change a signed agreement and the agreement along with all data and files relating to the agreement will be completely removed from all our services after `30` days from the date it became completed.\n\n    ### State revoked\n\n    This state can be triggered by a tenant who owns the agreement. If the agreement is *active*, the tenant can choose to revoke the agreement at any time. When an agreement has been revoked, it is forever under the terminal state revoked and can never transition back to an active state or be acted upon by any party. No one can sign a revoked agreement and the agreement along with all data and files relating to the agreement will be completely removed from all our services within `30` days after the date it was created.\n\n    ## Agreement verification and covenant file\n\n    When the agreement transitions to the `completed` state, a few more things happen. An additional PDF file, a signed version of the original agreement, is created. This file is called the `covenant file`. The covenant file includes the original agreement and some additional pages including Bank ID data for the signatures and additional information about the signing events. The covenant file is accessible for `30` days to the tenant and all parties, after that it is removed from all services, together with the initial descriptive data for the original agreement. However, we construct a new data structure that we store persistently and that will be used for verification: a `256bit` string value constructed through an internal algorithm that we refer to as `verification value`.\n\n    The verification value is used solely for verification purposes. This means that if you have access to the signed document, you can use this for verification through our services where we run the obtained file through our internal algorithm to produce the value string for that exact file.\n\n    Since 2022-03-15 the covenant file is also digitally signed according to PAdES (PDF Advanced Electronic Signatures). PAdES is a standard for digital signatures which is adopted by the European eIDAS standard, meaning that agreements signed according to PAdES are legally binding in all EU member states since July 2014. For more information on PAdES: [Wikipedia article](https://en.wikipedia.org/wiki/PAdES) or [EU e-Signature page](https://ec.europa.eu/digital-building-blocks/wikis/display/CEFDIGITAL/Standards+and+specifications). This means that covenant PDFs produced by Kivra Signatures are self-bearing and their validity and authenticity can be easily determined by free PDF readers like Abobe Acrobat Reader, completely independently of Kivra. The PAdES signature can also be verified programmatically if one would like to do so. \n    \n    For more information on how we handle PDF files in Kivra Signatures and PAdES, please refer to [this document](https://docs.google.com/document/d/1a_HFN-9gtB16RyXm-VVDwMhgJfnh-kZCj8G3QwzzIVc/edit?usp=sharing).\n    ## Notifications\n\n    After creating the agreement, the tenant is responsible to inform the parties that there is a document waiting to be signed at [signatures.kivra.com](http://signatures.kivra.com/).\n    After the users access the Kivra signature service and agree to its terms of service, Kivra will notify signers when the document has been signed by all and is ready to be downloaded or transferred to the Kivra mailbox, using the contact information provided by the tenant.\n\n    ## Signature flow\n\n    1. The tenant posts an agreement providing the PDF document to be signed and the list of parties, and gets back an `agreement id`. Parties are specified by their role, a SSN number and an email. The agreement is made available by Kivra to the parties.\n    2. The tenant uses the document ID to check the agreement status. The agreement can also be revoked by the tenant, as long as it has not reached the `completed` state.\n    3. Once the document has become `completed`, the tenant can download the `covenant file` via the API and save it, while parties have different options based on whether they are users of Kivra or not: for Kivra user the covenant file will be automatically transferred to the Kivra mailbox; for non Kivra user, parties have `30` days to either become a Kivra user and get the covenant file in the Kivra mailbox, or download the covenant file from the signature service for personal storage.\n    4. The agreement is removed from all our services `30` days after creation in case the agreement does not reach the completed state. The agreement and covenant file are removed from all our services `30` days after the agreement reached the completed state. Once the agreement and covenant file have been removed, there will be no option for recovering them, only the verification option will be available. So it is important that both tenant and signers make sure that they have saved and safely stored the covenant file.\n\n    ![Agreement Typical Flow](https://www.lucidchart.com/publicSegments/view/30bd1625-75d2-4ece-bb1d-5e3ccee93010/image.png)\n\n    # Partners integration\n\n    Partners integration allows a *company recipient* to open up its mailbox to a third party (a *partner*) to allow it to access and process the mailbox content. This is typically used by companies to allow bookkeeping and administrative third parties to access and process invoices and documents.\n\n    Company recipients need to explicitly authorize a partner to access their content via a setting in their Kivra Company mailbox, and they can revoke access at any time. Both granting and revoking of access are performed via the Kivra app.\n\n    Partners will use the `partner` endpoint to integrate with Kivra.\n\n    # Errors\n\n    Kivra uses conventional HTTP response codes to indicate the success or failure of an API request. \n    \n    In general: \n    \n    * Codes in the `2xx` range indicate success. \n    * Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, invalid data, etc.). \n    * Codes in the `5xx` range indicate an error with Kivra's servers or a timeout. In this case it is safe to retry the request.\n\n    ## Error handling\n\n    The integrator needs proper handling of common errors. Errors can happen at any stage and Kivra will report back to let the integrator take appropriate action.\n\n    ### Recipient-file matching:\n\n    Common errors that can occur and need to be handled gracefully.\n\n    * Network problem that hinders the integrator from communicating with Kivra\n    * Problem on Kivra’s end that hinders the integrator from querying the state of **Recipients**\n\n    These errors should be handled gracefully such that the last working download of a **Recipient**-file is used until the problem has been solved and a new **Recipient**-file can be downloaded and used.\n\n    ### Content Delivery:\n\n    Common errors that can occur and need to be handled gracefully.\n\n    * Network problem that hinders the integrator from communicating with Kivra resulting in either not being able to reach Kivra or a non-successful response-code\n    * Problem with the **input**-file either due to above(network problem) or other such as corrupt data or invalid metadata.\n\n    ## Error Messages\n\n    When the KIVRA API returns error messages, it does so in a extended JSON format.\n\n    \u003e ### Example error response\n\n    ```bash\n    { \"code\"          : 40400\n    , \"short_message\" : \"Resource not found\"\n    , \"long_message\"  : \"There's no resource at the given URI.\"\n    }\n    ```\n\n    ### An error has four properties:\n\n    | Property      | Description                                                |\n    | ------------- | ---------------------------------------------------------- |\n    | code          | The Kivra [error code](#error-codes)                       |\n    | short_message | A short description of the error                           |\n    | long_message  | A longer and more verbose error message                    |\n\n    ## Error codes\n\n    In addition to descriptive error text, error messages contain machine-parseable codes. While the text for an error message may change, the codes will stay the same. The following table describes the codes which may appear when working with the API:\n\n    | Code | Short Message | Long Message |\n    | ---- | ------------- | ------------ |\n    |40000 |Request validation failed |The request payload does not pass required validation |\n    |40001 |Invalid Request |The request was invalid |\n    |40002 |Redirect URI Mismatch |The redirect_uri does not match the registered redirect_uri |\n    |40003 |Invalid Scope | An invalid or insufficient scope was used |\n    |40004 |Already registered |This user is already registered |\n    |40005 |Error in phonenumber |The request can't be processed due to phonenumber not meeting the required format |\n    |40006 |Error in password |The request can't be processed due to password not meeting the required format |\n    |40007 |Error in email |The request can't be processed due to email not meeting the required format |\n    |40008 |Unprocessable Entity |The JSON payload was malformed. The client should not resend the same payload without first correcting the erroneous JSON payload. |\n    |40009 |Error in SSN |The request can't be processed due to SSN not meeting the required format. |\n    |40010 |No action supplied or invalid |The action parameter was not supplied or invalid. |\n    |40011 |Failed Extended Validation |The request can't be processed due to SSN and/or mobile failed extended validation. |\n    |40012 |Error in type |The request can't be processed due to type field failing extended validation. |\n    |40013 |Sendrequest already accepted |The request can't be processed due to user have already an accepted sendrequest |\n    |40014 |Invalid Status |The request can't be processed due to invalid Status  |\n    |40015 |Invalid Token |Invalid access_token provided |\n    |40016 |Invalid State |The request can't be processed due to invalid State |\n    |40017 |Invalid Campaigns |The request can't be processed due to invalid campaigns |\n    |40018 |Error in Company ID |The request can't be processed due to Company ID not meeting the required format |\n    |40019 |Invalid Files |The request can't be processed due to invalid files |\n    |40020 |Invalid Parties |The request can't be processed due to invalid data for parties |\n    |40021 |Invalid Bank Account |The request can't be processed due to invalid bank account |\n    |40022 |Missing Postal Address |The request can't be processed due to missing postal address |\n    |40023 |Invalid Contact Info |Invalid contact_info provided |\n    |40024 |No Receiver Specified |Neither 'ssn' nor 'vat_number' has been specified as receiver |\n    |40025 |Invalid OTP |The provided OTP is invalid or expired |\n    |40026 |JSON payload was not an object |The JSON payload was malformed. Only JSON objects are supported |\n    |40027 |Signature verification failed |Signup signature is invalid or signup data is altered |\n    |40028 |UnsupportedFileType | The request can't be processed due to a data file was provided using an unsupported type |\n    |40030 |IconSizeError | The request can't be processed due to the icon format not being compliant with the requirements |\n    |40031 |PNG Missing Alpha Channel | Only PNG with alpha channel (PNG32) is allowed |\n    |40032 |User doesn't exist | No user exists with provided SSN |\n    |40033 |Invalid query parameters | One or more query parameters were invalid, e.g. bad format, not supported |\n    |40035 |Required header missing | One or more required headers were missing in the request |\n    |40036 |Resource Already Exists | The resource you are trying to create already exists |\n    |40037 |Agreement parties are not unique | All agreement parties must have a unique SSN |\n    |40038 |The provided destination URL does not meet our requirements | Its either not following the format https://subdomain.domain.tld/* or is not yet whitelisted in our system. Please contact us for support |\n    |40039 |Cannot publish or update a canceled campaign | Cannot publish or update a canceled campaign |\n    |40040 |Campaign must have an image | Cannot publish campaign without an image |\n    |40041 |Invalid pay date | Pay date is in the past, too far in the future or not a bank day |\n    |40042 |Invalid amount | The amount is out of range |\n    |40043 |Invalid user preference | This preference is not supported |\n    |40044 |Invalid OCR | The OCR did not pass validation |\n    |40045 |Invalid option id | The option does not exist |\n    |40047 |Invalid PDF |The supplied agreement PDF was invalid. Please check that the file is a valid PDF |\n    |40098 |Invalid barcode data | The barcode could not be created due to invalid barcode type |\n    |40100 |Unauthorized |Supplied credentials was invalid |\n    |40101 |Access Denied |The resource owner or authorization server denied the request |\n    |40102 |Unauthorized Client |The client is not authorized to request an authorization code using this method. |\n    |40103 |Invalid Grant |The provided authorization grant (e.g. authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client. |\n    |40104 |Invalid Client |Client authentication failed (e.g. unknown client, no client authentication included, or unsupported authentication method). |\n    |40105 |Invalid Sendrequest |No sendrequest exists between sender and receiver, or sendrequest is not accepted. |\n    |40106 |Email in use |This email adress is already in use and can not be used. |\n    |40107 |Phone number is already in use |This phone number is already in use and can not be used. |\n    |40108 |Registration Code or Sendrequest Invalid |The Registration Code is invalid or no Sendrequest exists or has been expired. |\n    |40109 |Sendrequest or Share already exists or is blocked |An already existing Sendrequest exists or is blocked. |\n    |40110 |Missing Print Integration |No print integration exists for the tenant |\n    |40111 |Access Denied: Invalid OTP |The provided OTP is invalid or expired |\n    |40112 |Access Denied: Insufficient Security Score |The requested resource requires a greater security score than the one associated with the current login method |\n    |40113 |User does not exist with provided id |Contact us to enroll, make sure to include your id |\n    |40300 |Forbidden |Access was denied to the given resource, authenticating will make no difference |\n    |40400 |Not found |The resource was not found at the given URI at this time |\n    |40500 |Method Not Allowed |The method specified in is not allowed for the resource at the requested URI |\n    |40601 |Invalid Accept Header |The Accept Header contains a non valid or unknown Content-Type |\n    |40915 |Conflict |An attempt was made to create an object that already exists |\n    |42900 |Too Many Requests |Too many requests within this timespan have been made. Please try again later |\n\n    # API - Authentication\n    Kivra supports Oauth2 with Client Credentials flow. Each client has a `client_id` and a `client_secret` and these need to be base64 encoded and sent to the API via POST to receive an access token which is used for subsequent calls.\n\n    Create the RFC 2045 base64 encoding to be used for tenant registration, replace `client_id` and `client_secret` with real values and make sure there are no trailing newlines (echo -n) and that the string is encoded literally (use single quotes and no escaping)\n\n    ```bash\n    $ echo -n 'client_id:client_secret' | base64\n    Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=\n    ```\n\n    Then perform the authentication which will respond with an access token.\n\n    ### REQUEST: Authentication\n\n    ```bash\n    curl -i -X POST https://sender.api.kivra.com/v1/auth \\\n     -d \"grant_type=client_credentials\" \\\n     -H \"Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=\"\n    ```\n\n    ### RESPONSE: Authentication\n\n    ```bash\n    HTTP/1.1 200 OK\n    Server: nginx\n    Date: Thu, 02 Oct 2014 12:43:25 GMT\n    Content-Type: application/json\n    Content-Length: 124\n    Connection: keep-alive\n    Vary: Accept-Encoding\n    Strict-Transport-Security: max-age=31536000;\n\n    {\n    \"state\":\"\",\n    \"access_token\":\"H6Zq08rF5fjQttd6fTKepWb3FQNptcip\",\n    \"expires_in\":28800,\n    \"scope\":\"kivra.v1.tenant.{tenant-key}.*\",\n    \"token_type\":\"bearer\"\n    }\n    ```\n\n    \u003caside class=\"notice\"\u003e\n    An access_token is valid for eight(8) hours.\n    \u003c/aside\u003e\n\n    A new `access_token` can be requested any time. If a request to the API is issued with a non valid `access_token` a http-response with the HTTP-header 401 is returned such as `HTTP/1.1 401 Unauthorized`. With the use of a `valid access_token` request to the API can be done as the example below.\n\n    \u003caside class=\"warning\"\u003e\n    Note: Client Credentials and Access Tokens needs to be treated securely, It is how you securely identify your application's rights and identity when accessing the Kivra API. Do not distribute Client Credentials or Access Tokens in email, distributed native applications, client-side javascript, or public code repositories.\n    \u003c/aside\u003e\n\n    ### Example request with access_token\n\n    ```bash\n    curl -i -X GET -H \"Authorization: Bearer \u003caccess_token\u003e\" \u003capi-url-to-object\u003e\n    ```\n    ## Authorization with limited access scope\n\n    In some particular configuration, for instance when a centralized service wants to provide a satellite service with possibility to only send content to Kivra for a specific tenant, but not allowing any other operation, the centralized service may request an access token for a specific tenant with a limited scope. This access token can be safely provided to the satellite service.\n\n    To retrieve this access token, the client performs a new authorization with some extra parameters specifying the limited scope.\n\n    ```shell\n    curl -X POST \\\n    https://sender.api.kivra.com/v1/auth \\\n    -d grant_type=client_credentials \\\n    -d scope=post:kivra.v1.tenant.{tenant-key}.content \\\n    -H \"Authorization: Basic {base64-auth}\"\n    ```\n\n    The answer will look like the following:\n\n    ```json\n    {\n      \"state\": \"\",\n      \"access_token\": \"DMWmtGWe9YpXep6FTgVEwWttxLR6D53z\",\n      \"expires_in\": 28800,\n      \"scope\": \"post:kivra.v1.tenant.{tenant-key}.content\",\n      \"token_type\": \"bearer\"\n    }\n    ```\n    ### Scope\n    Scopes are specified as one or a commaseparated list of methods with a path appended and separated by `:`.\n\n    Method is a lower case string of one or more of the allowed methods, valid examples:\n\n    | Example        | Details                                                    |\n    | -----------    | ---------------------------------------------------------- |\n    | `post:path`    | Allows `POST` for the given path                           |\n    | `get,put:path` | Allows `GET` and `PUT` for the given path                  |\n\n    Path is a lower case string starting with the keyword `kivra` and the path appended and interspersed with `.` instead\n    of the path-separator `/` such as: `kivra.v1.example`. There is also the possibility to use wildcards:\n\n    | Wildcard       | Details                                                        |\n    | -----------    | -------------------------------------------------------------- |\n    | `*`            | Marks a scope as valid for *any* keyword on **current-level**  |\n    | `**`           | Marks a scope as valid for *any* keyword on **current-level** and **recursively**                 |\n\n    \u003cSecurityDefinitions/\u003e\n\ntags:\n  - name: \"Tenant API - Content\"\n    description: Endpoints for matching users and sending content\n  - name: \"Tenant API - Tenant Management\"\n    description: Endpoints for creation and administration of tenants (v2)\n  - name: \"Tenant API - Agreements\"\n    description: Endpoints for managing signatures and agreements\n  - name: \"Partner API\"\n    description: Endpoints for partner access to company mailboxes\n  - name: \"Company API\"\n    description: Endpoints access to company mailboxes\n\nx-tagGroups:\n  - name: Tenant API\n    tags:\n      - \"Tenant API - Content\"\n      - \"Tenant API - Tenant Management\"\n      - \"Tenant API - Agreements\"\n  - name: Partner API\n    tags:\n      - \"Partner API\"\n  - name: Company API\n    tags:\n      - \"Company API\"\n\npaths:\n  # ##############################################\n  # POST, GET /v2/tenant\n  # ##############################################\n  /v2/tenant:\n    post:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Create Tenant\n      operationId: Create Tenant (v2)\n      description: |\n        Creation of tenants via API allows clients to create new tenants in an efficient manner. The created tenant is automatically added to the client scope. The client needs to re-authenticate to have the new scope in effect.\n        \u003caside class=\"notice\"\u003e\n        Note: Creation of tenants via API is only allowed in certain specific cases and its usage needs to be regulated in the business relationship between the sender party and Kivra.\n        \u003c/aside\u003e\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v2.tenant\"\n      responses:\n        200:\n          description: |\n            Tenant already existing and added to the client scope\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tenant_v2\"\n          headers:\n            kivra-objkey:\n              description: Tenant Key\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n            location:\n              description: URL to created Object\n              schema:\n                type: string\n                format: url\n        201:\n          description: |\n            Tenant Created succesfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tenant_v2\"\n          headers:\n            kivra-objkey:\n              description: Tenant Key\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n            location:\n              description: URL to created Object\n              schema:\n                type: string\n                format: url\n        409:\n          description: |\n            The tenant could not be created because of a conflict, meaning that a tenant with the same `orgnr` already exists and cannot be automatically added to the client scope. The client may use the `request_access` endpoint to request access to this tenant.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error40915\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tenant_v2\"\n    get:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: List tenants\n      operationId: List all tenants accessible to the client\n      description: Lists all tenants that are manageable by the current client\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v2.tenant\"\n      parameters:\n        - name: orgnr\n          in: query\n          description: Perform a search to see if a specific Company is available\n          required: false\n          schema:\n            description: Companies unique Vat Number\n            type: string\n            example: SE556840226601\n      responses:\n        200:\n          description: |\n            List of available users\n          content:\n            application/json:\n              schema:\n                type: array\n                description: List of tenants, can be empty\n                items:\n                  type: object\n                  properties:\n                    key:\n                      type: string\n                      description: Tenant ID\n                  example:\n                    [\n                      { \"key\": \"155748793356fa20e402ae472e51019cf723d7fe35\" },\n                      { \"key\": \"150231793356fa88a88eae472e51019cf723d7d13a\" },\n                    ]\n\n  # ##############################################\n  # GET /v2/tenant/TKEY\n  # ##############################################\n  /v2/tenant/{tenantKey}:\n    get:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Tenant information\n      operationId: Get information on tenant\n      description: Get detailed information on a tenant\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v2.tenant.{tenantKey}\"\n      responses:\n        200:\n          description: |\n            Tenant Created succesfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tenant_v2\"\n\n  # ##############################################\n  # PUT /v2/tenant/TKEY/name\n  # ##############################################\n  /v2/tenant/{tenantKey}/name:\n    put:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Update tenant name\n      operationId: Update tenant name\n      description: Update display name for the tenant. The updated name will be visible to the end-users only after they have received a new content.\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"put:kivra.v2.tenant.{tenantKey}.name\"\n      responses:\n        200:\n          description: empty response confirming that the put operation was successful\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: \"Lenas Konditori AB\"\n\n  # ##############################################\n  # POST /v2/tenant/TKEY/company_id\n  # ##############################################\n  /v2/tenant/{tenantKey}/company_id:\n    post:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Associate company ID to tenant\n      operationId: Add company ID\n      description: |\n        Add a new company ID for a tenant. A tenant can be associated with one or several company ids (Vat number and company name)\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v2.tenant.{tenantKey}.company_id\"\n      responses:\n        204:\n          description: empty response confirming that the post operation was successful\n        409:\n          description: Another tenant with the same `orgnr` already exists.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error40915\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                company_id:\n                  $ref: \"#/components/schemas/CompanyId\"\n\n  # ##############################################\n  # DELETE /v2/tenant/TKEY/company_id/{orgnr}\n  # ##############################################\n  /v2/tenant/{tenantKey}/company_id/{orgNr}:\n    delete:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Delete company ID from tenant\n      operationId: Delete company ID\n      description: |\n        Delete a  company ID from a tenant. A tenant can be associated with one or several company ids (Vat number and company name)\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: orgNr\n          in: path\n          description: The VAT number of the company_id to be removed from the tenant, for instance `SE556840226601`\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"delete:kivra.v2.tenant.{tenantKey}.company_id.{orgnr}\"\n      responses:\n        204:\n          description: empty response confirming that the put operation was successful\n\n  # ##############################################\n  # POST /v2/tenant/TKEY/icon\n  # ##############################################\n  /v2/tenant/{tenantKey}/icon:\n    post:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Provide an icon for a tenant\n      operationId: Provide icon\n      description: |\n        Add or update the tenant icon. If an icon already exists, it will be changed.\n\n        To check the current icon associated to a tenant you can simply check the following address:\n\n        * sandbox: https://sandbox-static.kivra.com/img/tenant/{tenantKey}/icon.png\n        * production: https://static.kivra.com/img/tenant/{tenantKey}/icon.png\n\n        The icon needs to be provided according to the following format:\n\n        * Dimensions: squared icon with size between 256x256 px and 512x512 px\n        * Alpha Channel: 32-bits\n        * Format: PNG\n        * File size: up to 1MB\n\n        We recommend to leave a little white area around the logo, to provide the best experience for the users.\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v2.tenant.{tenantKey}.icon\"\n      responses:\n        204:\n          description: empty response confirming that the put operation was successful\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                file:\n                  $ref: \"#/components/schemas/Icon\"\n            example:\n              {\n                \"file\":\n                  {\n                    \"name\": \"fancy icon\",\n                    \"data\": \"REVBR ...... EJFRUY=\",\n                    \"content_type\": \"image/png\",\n                  },\n              }\n\n  # ##############################################\n  # POST /v2/tenant/request_access\n  # ##############################################\n  /v2/tenant/request_access:\n    post:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Request access to a tenant\n      operationId: Request access\n      description: |\n        Request access to an existing tenant that is outside the client scope. Typically this request follows an unsuccessful attempt to create a tenant that resulted in a conflict error (error 409).\n\n        The meaning of the conflict error is that a tenant is already associated to a `company_id` including the same `orgnr` as in the tenant that the client attempted to post, and the tenant who owns the `orgnr` is outside the scope for the client.\n\n        In Kivra it is allowed to have several different flows on the same tenant, as for instance one flow for invoices and one flow for payment slips. As this flows could be managed by different clients, we need a mechanism to allow sharing a tenant between clients.\n        The `request_access` endpoint provide this functionality. As the request may be granted (or denied) asynchronously, after a successfull call to `request_access` the client will need to poll the request until it becomes `accepted` or `rejected`.\n\n        As allowing access to a new tenant requires modification of the scope for the client, an authorization must be performed once the request has been accepted, to retrieve an access token with the new scope.\n\n        If the client posts a new identical request (requesting the same `OrgNr` for the same client), the same object will be returned with an updated status.\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v2.tenant.request_access\"\n      responses:\n        201:\n          description: Data about the requested tenant\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestAccess\"\n          headers:\n            kivra-objkey:\n              description: Object Key for the Request (requestKey)\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n            location:\n              description: The complete API url for where to check the status of this request\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                vat_number:\n                  type: string\n                  example: \"SE556840226601\"\n\n  # ##############################################\n  # GET /v2/tenant/request_access/{requestKey}\n  # ##############################################\n  /v2/tenant/request_access/{requestKey}:\n    get:\n      tags:\n        - \"Tenant API - Tenant Management\"\n      summary: Status of an access request\n      operationId: Request access status\n      description: |\n        Gets the updated status for a request generate using the `request_access` endpoint.\n      parameters:\n        - name: requestKey\n          in: path\n          description: The unique Key for a request\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v2.tenant.request_access.{requestKey}\"\n      responses:\n        200:\n          description: Data about the requested tenant\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestAccess\"\n          headers:\n            kivra-objkey:\n              description: Object Key for the Request\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/user\n  # ##############################################\n  /v1/tenant/{tenantKey}/user:\n    get:\n      tags:\n        - \"Tenant API - Content\"\n      summary: List available recipient users for a tenant\n      operationId: List Users\n      description: |\n        This resource is used to list all or search for users that are eligible\n        for receiving Content from the specific Tenant. The response is a JSON\n        list of Objects containing the User's key and SSN. The `diffId`\n        contained in the response header can be used to fetch added/removed\n        users in subsequent requests to the\n        `/v1/tenant/{tenantKey}/user/diff/{diffId}` endpoint.\n\n        If a search is done with a query string and the user doesn’t exist or\n        has Opt-ed out from receiving Content from the Tenant, an empty list\n        is returned.\n\n        Access to this resource might be enabled or disabled via agreement. To\n        match a given list of users, please use the `usermatch` resource.\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: ssn\n          in: query\n          description: Perform a search to see if specific Users are available\n          required: false\n          schema:\n            description: List of user SSNs\n            type: string\n            example: \"191212121212\"\n        - name: include\n          in: query\n          description: List of fields that are returned for each user object\n          required: false\n          schema:\n            type: string\n            enum: [\"ssn\"]\n            example: \"ssn\"\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.tenant.{tenantKey}.user\"\n      responses:\n        200:\n          description: |\n            List of available users\n          headers:\n            diff-id:\n              description: |\n                  An ID that can be used in a subsequent request to\n                  `/v1/tenant/{tenantKey}/user/diff/{diffId}` to fetch users\n                  that were added/removed since `diffId` was obtained\n              schema:\n                type: string\n                example: \"3831CD15163421134211695294\"\n          content:\n            application/json:\n              schema:\n                type: array\n                description: List of available users, can be empty\n                items:\n                  $ref: \"#/components/schemas/UserList\"\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/user/diff/{diffId}\n  # ##############################################\n  /v1/tenant/{tenantKey}/user/diff/{diffId}:\n    get:\n      tags:\n        - \"Tenant API - Content\"\n      summary: |\n        List recipient users that were added/removed since a previous request\n      operationId: List Users Diff\n      description: |\n        This resource is used to list users that were added/removed since\n        `diffId` was obtained, either from an initial request to the\n        `/v1/tenant/{tenantKey}/user` endpoint, or from a subsequent request\n        to this endpoint. Note that all `diffId`s that are obtained in a\n        series of requests expire 31 days after the **initial** request.\n        Therefore, API users must fetch the complete user set at least once\n        every 31 days.\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: diffId\n          in: path\n          description: |\n            ID that was returned in header in a previous request and is used \n            to calculate what users have been added/removed between that \n            request and now \n          required: true\n          schema:\n            type: string\n            example: \"3831CD15163421134211695294\"\n        - name: ssn\n          in: query\n          description: Perform a search to see if specific Users are available\n          required: false\n          schema:\n            type: string\n            example: \"191212121212\"            \n        - name: include\n          in: query\n          description: List of fields that are returned for each user object\n          required: false\n          schema:\n            type: string\n            enum: [\"ssn\"]\n            example: \"ssn\"\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.tenant.{tenantKey}.user.diff.{diffId}\"\n      responses:\n        200:\n          description: |\n            Lists of added/removed users\n          headers:\n            diff-id:\n              description: |\n                  An ID that can be used in a subsequent request to\n                  `/v1/tenant/{tenantKey}/user/diff/{diffId}` to fetch users\n                  that were added/removed since `diffId` was obtained\n              schema:\n                type: string\n                example: \"3831CD15163421134211695294\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDiff\"\n\n  # ##############################################\n  # POST /v1/tenant/TKEY/usermatch\n  # ##############################################\n  /v1/tenant/{tenantKey}/usermatch:\n    post:\n      tags:\n        - \"Tenant API - Content\"\n      summary: Match a list of recipient users for a specific tenant\n      operationId: Match Users\n      description: |\n        This resource is used to match a list of users to check that they are eligible for receiving Content from\n          the specific Tenant.\n        The request contains a list of SSNs to be matched, and the response is a filtered list containing only the SSNs that are eligible to receive content from the tenant.\n        \u003caside class=\"notice\"\u003e\n          If none of the provided SSNs are eligible to receive content from this tenant, an empty list will be returned.\n        \u003c/aside\u003e\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      requestBody:\n        description: List of SSNs to be matched\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserMatch\"\n            example: \n              ssns: [\"191212121212\",\"197701032380\",\"198112172385\"]\n        required: true\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.tenant.{tenantKey}.usermatch\"\n      responses:\n        200:\n          description: Filtered list of SSNs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserMatch\"\n              example: \n                ssns: [\"191212121212\", \"198112172385\"]\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/company\n  # ##############################################\n  /v1/tenant/{tenantKey}/company:\n    get:\n      tags:\n        - \"Tenant API - Content\"\n      summary: List available recipient companies for a tenant\n      operationId: List Companies\n      description: |\n        This resource is used to list all or search for companies that eligible for receiving Content from the specific Tenant.\n        The response is a JSON list of Objects containing the Companies key and Vat Number.\n\n        \u003caside class=\"notice\"\u003e\n        If a search is done and the Company doesn’t exist or have Opt-ed out of receiving Content from the Tenant an empty list will be returned.\n        \u003c/aside\u003e\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: vat_number\n          in: query\n          description: Perform a search to see if a specific Company is available\n          required: false\n          schema:\n            description: Companies unique Vat Number\n            type: string\n            example: SE556840226601\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.tenant.{tenantKey}.company\"\n      responses:\n        200:\n          description: |\n            List of available companies\n          content:\n            application/json:\n              schema:\n                type: array\n                description: List of available companies, can be empty\n                items:\n                  $ref: \"#/components/schemas/CompanyList\"\n\n  # ##############################################\n  # POST /v1/tenant/TKEY/content\n  # ##############################################\n  /v1/tenant/{tenantKey}/content:\n    post:\n      tags:\n        - \"Tenant API - Content\"\n      summary: Send content to a recipient (user or company)\n      operationId: Send content\n      description: |\n        Metadata is data that Kivra needs to send the Content to the right User. It may also determine how a User can interact with the Content.\n\n        ### Minimum Metadata\n        As a minimum a valid `ssn` or `vat_number` is required.\n\n        \u003caside class=\"notice\"\u003e\n        Note: Kivra will reject Content using both `ssn` and `vat_number` in the same metadata as this is ambiguous.\n        \u003c/aside\u003e\n\n        ### Retained Content\n        A retained Content is a Content that is sent to a Recipient who is not yet a user of Kivra. Once that Recipient register with Kivra, the Content will be delivered to that Recipient’s Kivra account. Retained Content has a time limit for how long they can be retained before being deleted, ie removed unless the Recipient registers within a given period of time.\n\n        \u003caside class=\"notice\"\u003e\n        Note: Usage of retained content is only allowed in certain specific cases and its usage needs to be regulated in the business relationship between the sender party and Kivra.\n        \u003c/aside\u003e\n\n        Sending retained Content uses all the same attributes as a normal Content with the difference for some additional metadata-attributes.\n        By enabling the `retain` metadata attribute and setting it to `true` will enable possible retention of a Content. Kivra’s logic is to first look if the Recipient exist. If it does Kivra will deliver the Content as usual, if the Recipient doesn’t exist Kivra will retain the Content for the default amount of time (*30 days*). This makes it easy for an Integrator to issue a \"retain or deliver\"-logic for all it’s Contents.\n\n        If an integrator want to retain a Content for a another time-period than Kivra’s default if can be done via the `retention_time` additional metadata.\n\n        ### Duplicate control\n        If exactly the same payload (content plus metadata, with only exception being the `generated_at` field) is received more than once, only the first occurrence will result in a delivery. In the other occurrences an OK message will be returned, but no corresponding content will be delivered to the receiver. This is a security mechanism to allow senders to safely re-send the same payload in case there is uncertainty on whether the previous sending resulted in a delivery or not. A typical example is in case of timeout error, where the sender cannot establish whether the sending resulted in a content delivery or not.\n\n        \u003caside class=\"notice\"\u003e\n        Note: Duplicate control is only available in production, not in sandbox. This allows senders to reuse the same payload several times in the test environment.\n        \u003c/aside\u003e\n\n        It's important to underline that the duplicate control is made by checking the complete payload (beside `generated_at`), not only the attached content. This means that any change in the payload will cause the duplicate check to fail and the corresponding content to be delivered.\n\n        Another important consequence is that in case a sender wants to safely re-send a PDF content, it is important that the PDF is not generated again between the API calls as this almost certainly results in a slightly different PDF and therefore in a different payload, meaning that the duplication check will not be able to recognise it as a duplicate.\n\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.content\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        201:\n          description: |\n            Content Created succesfully\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Content_user\"\n                  - $ref: \"#/components/schemas/Content_company\"\n          headers:\n            kivra-objkey:\n              description: Object Key\n              schema:\n                type: string\n                format: \"hexadecimal value\"\n            kivra-retained:\n              description: |\n                Boolean denoting if a Content was Retained, Note: this header is **only** returned when a Content is retained\n              schema:\n                type: boolean\n            location:\n              description: URL to created Object\n              schema:\n                type: string\n                format: url\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/Content_user\"\n                - $ref: \"#/components/schemas/Content_company\"\n            examples:\n              invoice to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Invoice to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment:\n                        payable: true\n                        currency: SEK\n                        due_date: \"2017-01-01\"\n                        total_owed: \"123.50\"\n                        type: SE_OCR\n                        method: \"1\"\n                        account: \"12345\"\n                        reference: 123OCRNUMBER456\n                      invoice_reference: \"Invoice Nr #123\"\n              invoice with variable amount to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Invoice to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment:\n                        payable: true\n                        currency: SEK\n                        due_date: \"2017-01-01\"\n                        total_owed: \"123.50\"\n                        type: SE_OCR\n                        method: \"1\"\n                        account: \"12345\"\n                        reference: 123OCRNUMBER456\n                        variable_amount: true\n                        min_amount: \"50.00\"\n                      invoice_reference: \"Invoice Nr #123\"\n              content with multiple payment options to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Invoice to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment_multiple_options:\n                        payable: true\n                        currency: SEK\n                        account: \"123456\"\n                        method: \"1\"\n                        options:\n                          - due_date: \"2024-02-29\"\n                            amount: \"4711.23\"\n                            type: \"SE_OCR\"\n                            reference: \"771554193\"\n                            title: \"Option 1\"\n                            description: \"The first options in this invoice.\"\n                            icon:\n                              name: \"this_will_be_ignored.png\"\n                              content_type: \"image/png\"\n                              data: \"Base64-encoded string with PNG data\"\n                          - due_date: \"2024-03-31\"\n                            amount: \"11147.42\"\n                            type: \"SE_OCR\"\n                            reference: \"771554194\"\n                            title: \"Option 2\"\n                            description: \"The second options in this invoice.\"\n                            icon:\n                              name: \"this_will_be_ignored.png\"\n                              content_type: \"image/png\"\n                              data: \"A different base64-encoded string with PNG data\"\n                      invoice_reference: \"Invoice #23\"\n              content to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Content to User\n                  generated_at: \"2016-12-12\"\n                  type: \"letter\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n              payslip to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Payslip to User\n                  generated_at: \"2016-12-12\"\n                  type: \"letter.salary\"\n                  retain: true\n                  retention_time: \"390\"\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n              creditnotice to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Creditnotice to User\n                  generated_at: \"2020-12-12\"\n                  type: \"letter.creditnotice\"\n                  retain: true\n                  retention_time: \"30\"\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n              booking to user:\n                value:\n                  ssn: '191212121212'\n                  subject: Sample Booking to User\n                  generated_at: '2016-12-12'\n                  type: 'booking'\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                     booking:\n                        title: 'Appointment'\n                        start_time: '2026-12-12T10:00:00Z'\n                        end_time: '2026-12-12T11:00:00Z'\n                        location: 'Somewhere'\n                        description: 'More details'\n                        info_url: url\n              invoice.debtcampaign to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Debtcampaign Invoice to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice.debtcampaign\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment:\n                        payable: true\n                        currency: SEK\n                        due_date: \"2017-01-01\"\n                        total_owed: \"123.50\"\n                        type: SE_OCR\n                        method: \"1\"\n                        account: \"12345\"\n                        reference: 123OCRNUMBER456\n                      invoice_reference: \"Invoice Nr #123\"\n              invoice reminder to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Invoice Reminder to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice.reminder\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment:\n                        payable: true\n                        currency: SEK\n                        due_date: \"2017-01-01\"\n                        total_owed: \"123.50\"\n                        type: SE_OCR\n                        method: \"1\"\n                        account: \"12345\"\n                        reference: 123OCRNUMBER456\n                      invoice_reference: \"Invoice Nr #123\"\n              invoice renewal to user:\n                value:\n                  ssn: \"191212121212\"\n                  subject: Sample Invoice Renewal to User\n                  generated_at: \"2016-12-12\"\n                  type: \"invoice.renewal\"\n                  retain: false\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n                  context:\n                    invoice:\n                      payment:\n                        payable: true\n                        currency: SEK\n                        due_date: \"2017-01-01\"\n                        total_owed: \"123.50\"\n                        type: SE_OCR\n                        method: \"1\"\n                        account: \"12345\"\n                        reference: 123OCRNUMBER456\n                      invoice_reference: \"Invoice Nr #123\"\n              content to company:\n                value:\n                  vat_number: SE556840226601\n                  subject: Sample Content to Company\n                  generated_at: \"2016-12-12\"\n                  type: \"letter\"\n                  tenant_info: string\n                  files:\n                    - name: filename.pdf\n                      data: REVBREJFRUY=\n                      content_type: application/pdf\n\n  # ##############################################\n  # POST /v1/tenant/TKEY/agreement\n  # ##############################################\n  /v1/tenant/{tenantKey}/agreement:\n    post:\n      tags:\n        - \"Tenant API - Agreements\"\n      summary: Post an agreement to be signed\n      operationId: Post Agreement\n      description:\n        This resource is used to post an agreement to be signed by the recipients\n        listed in the metadata. An Agreement ID will be returned.\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.agreement\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        200:\n          description: Agreement created succesfully\n          content:\n            application/json:\n              schema:\n                type: string\n                example: \"15544700816b7d63c83d6e476493879b5043ec9d7b\"\n        400:\n          description: Agreement PDF was invalid\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error40045\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Agreement\"\n    get:\n      tags:\n        - \"Tenant API - Agreements\"\n      summary: List all agreements for a tenant, with their current status\n      operationId: List agreements\n      description: List all agreements created by a tenant, with their current status.\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.agreement\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        \"200\":\n          description: List of agreements and their status\n          content:\n            application/json:\n              schema:\n                type: array\n                description: list\n                items:\n                  $ref: \"#/components/schemas/AgreementStateShort\"\n                example:\n                  - key: \"1527232009ba54f8186d8c43e2a3c8092b57ca2739\"\n                    state: active\n                  - key: \"155265136911763308f2514ff3aa6dacc8211a2107\"\n                    state: revoked\n                  - key: \"15100645203cff9f19d92443848c8a2f1cbf257510\"\n                    state: completed\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/agreement/AKEY\n  # ##############################################\n  /v1/tenant/{tenantKey}/agreement/{agreementKey}:\n    get:\n      tags:\n        - \"Tenant API - Agreements\"\n      summary: Agreement object with current status and updated metadata\n      operationId: Get agreement\n      description: Get an agreement with current status and updated metadata\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: agreementKey\n          in: path\n          description: The unique Key for an Agreement\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        \"200\":\n          description: Agreement object with current status and updated metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AgreementStateDetailed\"\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/agreement/AKEY/revoke\n  # ##############################################\n  /v1/tenant/{tenantKey}/agreement/{agreementKey}/revoke:\n    post:\n      tags:\n        - \"Tenant API - Agreements\"\n      summary: Revoke an agreement\n      operationId: Revoke agreement\n      description: |\n        Revoke an agreement. An agreement once revoked can no longer be accessed or signed by any of the parties. An agreement can only be rekoved if in state *active*, and after revoke will be put in state *revoked*. A revoked agreement can never become active again.\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}.revoke\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: agreementKey\n          in: path\n          description: The unique Key for an Agreement\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        \"204\":\n          description: empty response confirming that the revoke operation was successful\n      requestBody:\n        description: empty JSON body\n        content:\n          application/json:\n            schema: {}\n\n  # ##############################################\n  # GET /v1/tenant/TKEY/agreement/AKEY/covenant\n  # ##############################################\n  /v1/tenant/{tenantKey}/agreement/{agreementKey}/covenant:\n    get:\n      tags:\n        - \"Tenant API - Agreements\"\n      summary: Get the covenant file (signed agreement)\n      operationId: Get covenant agreement\n      description: |\n        Get the covenant file (the signed version of the agreement).\n      security:\n        - oAuth2Client:\n            - \"post:kivra.v1.tenant.{tenantKey}.agreement.{agreementKey}.covenant\"\n      parameters:\n        - name: tenantKey\n          in: path\n          description: The unique Key for a Tenant\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n        - name: agreementKey\n          in: path\n          description: The unique Key for an Agreement\n          required: true\n          schema:\n            type: string\n            format: hexadecimal\n      responses:\n        \"200\":\n          description: The covenant file as a PDF file with base64 encoding\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    description: The name of the file\n                    type: string\n                    example: \"agreement7456_completed.pdf\"\n                  data:\n                    description: The covenant file as a PDF file with base64 encoding\n                    type: string\n                    format: base64\n                    example: \"REVBREJFRUY=\"\n                  sha256:\n                    description: the signature to verify the file's authenticity\n                    type: string\n\n  # ##############################################\n  # GET /v1/partner/company\n  # ##############################################\n  /v1/partner/company:\n    get:\n      tags:\n        - \"Partner API\"\n      summary: Lookup a specific company\n      operationId: Find Company\n      description: |\n        This resource allows a partner to look if a specific company has granted access to its mailbox.\n        \u003caside class=\"notice\"\u003e\n        If a search is done and the Company doesn’t exist in Kivra or has not granted access to the partner, an empty list will be returned.\n        \u003c/aside\u003e\n      parameters:\n        - name: vat_number\n          in: query\n          description: Perform a search to see if a specific Company is available for access\n          required: true\n          schema:\n            description: Company's unique VAT number\n            type: string\n            example: SE556840226601\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.partner.company\"\n      responses:\n        200:\n          description: Company key for the company with the matching VAT number\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  key:\n                    description: Company's unique Key\n                    type: string\n                    example: \"15236156848eefa1dc75364af2be38c98eb3aae223\"\n\n  # ##############################################\n  # GET /v1/partner/company/COMPKEY/content\n  # ##############################################\n  /v1/partner/company/{companyKey}/content:\n    get:\n      tags:\n        - \"Partner API\"\n      summary: Get the company inbox\n      operationId: Get company inbox\n      description: This resource allows to access a high level description for each content in the company inbox, to allow for a first sorting and filtering of the content.\n      parameters:\n        - name: companyKey\n          in: path\n          description: The unique key for the company object being retrieved\n          required: true\n          schema:\n            description: Company's unique key\n            type: string\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.partner.company.{companyKey}\"\n      responses:\n        200:\n          description: High level description of content items in the company inbox\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CompanyInbox\"\n\n  # ##############################################\n  # GET /v1/partner/company/COMPKEY/content/CONTKEY\n  # ##############################################\n  /v1/partner/company/{companyKey}/content/{contentKey}:\n    get:\n      tags:\n        - \"Partner API\"\n      summary: Get metadata for a content.\n      operationId: Get content metadata\n      description:\n        This resource allows to get complete metadata information for a particular content.\n        \u003caside class=\"notice\"\u003e\n        Depending on the `content_type` for each parts of the content, Kivra will return either a `key` to a binary file to be retrieved or (for text based contents) the `body` of the content itself.\n        \u003c/aside\u003e\n      parameters:\n        - name: companyKey\n          in: path\n          description: The unique key for the company object being retrieved\n          required: true\n          schema:\n            description: Company's unique key\n            type: string\n        - name: contentKey\n          in: path\n          description: The unique key for a specific content\n          required: true\n          schema:\n            description: Content's unique key\n            type: string\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.partner.company.{companyKey}.**\"\n      responses:\n        200:\n          description: Complete metadata for the specific content\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompanyContent\"\n\n  # ##############################################\n  # GET /v1/partner/company/COMPKEY/content/CONTKEY/file/FKEY/raw\n  # ##############################################\n  /v1/partner/company/{companyKey}/content/{contentKey}/file/{fileKey}/raw:\n    get:\n      tags:\n        - \"Partner API\"\n      summary: Get raw file in binary format\n      operationId: Get raw file\n      description: This resource allows to get the raw file in binary format.\n      parameters:\n        - name: companyKey\n          in: path\n          description: The unique key for the company object being retrieved\n          required: true\n          schema:\n            description: Company's unique key\n            type: string\n        - name: contentKey\n          in: path\n          description: The unique key for a specific content\n          required: true\n          schema:\n            description: Content's unique key\n            type: string\n        - name: fileKey\n          in: path\n          description: The unique key for a specific file\n          required: true\n          schema:\n            description: File's unique key\n            type: string\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.partner.company.{companyKey}.**\"\n      responses:\n        200:\n          description: The content type will be the same as the file, so for a typical pdf it will be `application/pdf`\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n\n  # ##############################################\n  # POST /v1/partner/company/COMPKEY/content/CONTKEY/STATUS\n  # ##############################################\n  /v1/partner/company/{companyKey}/content/{contentKey}/{status}:\n    post:\n      tags:\n        - \"Partner API\"\n      summary: Set status for content\n      operationId: Set status for content\n      description: This resource allows to set the status for a specific content. It is used by the partner to set whether the content should be marked as viewed or paid.\n      parameters:\n        - name: companyKey\n          in: path\n          description: The unique key for the company object being retrieved\n          required: true\n          schema:\n            description: Company's unique key\n            type: string\n        - name: contentKey\n          in: path\n          description: The unique key for a specific content\n          required: true\n          schema:\n            description: Content's unique key\n            type: string\n        - name: status\n          in: path\n          description: The specific state to be set for this content, can be `paid`, `unpaid`, `view` or `unview`\n          required: true\n          schema:\n            description: The new state to be set for the content\n            type: string\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v1.partner.company.{companyKey}.**\"\n      responses:\n        204:\n          description: empty response confirming that the operation was successful\n      requestBody:\n        description: empty JSON body\n        content:\n          application/json:\n            schema: {}\n\n\n\n  # ##############################################\n  # POST /v3/company/match/plus_active\n  # ##############################################\n  /v3/company/match/plus_active:\n    post:\n      tags:\n        - \"Company API\"\n      summary: Filter companies with Kivra+\n      operationId: Match companies\n      description: |\n        This resource is used to match a list of VAT Numbers to check whether a company has an active Kivra+ subscription.\n      security:\n        - oAuth2Client:\n            - \"get:kivra.v3.company.match.plus_active.**\"\n      responses:\n        200:\n          description: Filterd list of VAT numbers\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CompanyMatch\"\n              example:\n                vat_numbers: [\"SE25555555552\"]\n      requestBody:\n        description: List of VAT numbers to be matched\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CompanyMatch\"\n              items:\n                {\n                  \"vat_numbers\": [\"SE556840226601\"]\n                }\n\ncomponents:\n  schemas:\n    # ##############################################\n    # SCHEMA Content_user\n    # ##############################################\n    Content_user:\n      type: object\n      required:\n        - ssn\n      properties:\n        ssn:\n          description: |\n            User's unique SSN, according to the `YYYYMMDDnnnn` format\n          type: string\n          writeOnly: true\n          example: \"191212121212\"\n        subject:\n          description: This subject/title will be visibile in the Recipients Inbox.\n          type: string\n          example: \"Sample Invoice\"\n        generated_at:\n          type: string\n          format: ISO8601\n          example: \"2016-12-12\"\n          description: Optional attribute which denotes when a specific Content was generated at the tenant/integrator’s site. The attribute will be used for sorting in the Kivra user interface, which makes it possible for a tenant or integrator to control the sorting.\n        type:\n          type: string\n          example: \"letter\"\n          description: |\n            Optional attribute providing information about the type of content being sent. The type of a content may influence how the user interacts with the content and how the user is notified about the content.\n              Allowed values are:\n              - `\"letter\"`: indicating that the content is an information letter. This is the default type for all non-payable content.\n              - `\"letter.salary\"`: indicating that the content is a salary specification.\n              - `\"letter.creditnotice\"`: indicating that the content is a creditnotice.\n              - `\"invoice\"`: indicating that the content is an invoice. A valid \"payment\" object needs to be provided and the \"payable\" attribute must be set to true. This is the default type for all payable content.\n              - `\"invoice.reminder\"`: indicating that the content is an invoice, a reminder for a previously unpaid invoice. The invoice might include late fees and other differences compared to the original invoice. A valid \"payment\" object needs to be provided and the \"payable\" attribute must be set to true.\n              - `\"invoice.debtcampaign\"`: indicating that the content is an invoice or payment plan from a debt collection company. The invoice might include fees such as interest and reminder fees. A valid \"payment\" object needs to be provided and the \"payable\" attribute must be set to \"true\". This content types enables long due dates with a longer notification scheme\n              - `\"invoice.renewal\"`: indicating that the content is not a real invoice, but an offer that is voluntary to pay for the receiver. It can be used to send an offer to renew a subscription, insurance or similar. A valid \"payment\" object needs to be provided and the \"payable\" attribute must be set to true.\n              - `\"booking\"`: indicating that the content is a booking/appointement.\n        retain:\n          description: Boolean denoting if Kivra should try and retain this Content if it can’t be delivered. Default `false`. Please note that retain must never be set to `true` for payable content.\n          type: boolean\n          writeOnly: true\n          example: false\n        retention_time:\n          description: |\n            How long to retain a Content. Supported values: `\"30\"` and `\"390\"`\n          type: string\n          writeOnly: true\n          example: \"30\"\n          enum: [\"30\", \"390\"]\n        tenant_info:\n          description: An arbitrary string defined by the tenant, used to group content for administrative tasks\n          type: string\n          writeOnly: true\n        files:\n          description: Array of file Objects\n          type: array\n          writeOnly: true\n          items:\n            $ref: \"#/components/schemas/File\"\n        context:\n          type: object\n          writeOnly: true\n          description: Optionally specify additional information\n          properties:\n            invoice:\n              type: object\n              description: Optionally specify invoice information\n              properties:\n                payment_or_payment_multiple_options:\n                  oneOf:\n                    - $ref: '#/components/schemas/Payment'\n                    - $ref: '#/components/schemas/PaymentMultipleOptions'\n                invoice_reference:\n                  type: string\n                  description: Tenant’s own Invoice Reference\n                  example: \"Invoice Nr #123\"\n            booking:\n              description: Optionally specify booking information\n              $ref: '#/components/schemas/Booking'\n\n    # ##############################################\n    # SCHEMA Content_company\n    # ##############################################\n    Content_company:\n      type: object\n      required:\n        - vat_number\n      properties:\n        vat_number:\n          description: |\n            A valid VAT-identifier, Swedish format: `SE[xxxxxxxxxx]01`\n          type: string\n          writeOnly: true\n          example: SE556840226601\n        subject:\n          description: This Subject/Title will be visibile in the Recipients Inbox.\n          type: string\n          example: \"Sample Invoice\"\n        generated_at:\n          type: string\n          format: ISO8601\n          example: \"2016-12-12\"\n          description: |\n            Optional attribute which denotes when a specific Content was generated at the tenant/integrator’s site. The attribute will be used for sorting in the Kivra user interface, which makes it possible for a tenant or integrator to control the sorting.\n        type:\n          type: string\n          example: \"letter\"\n          description: |\n            Optional attribute providing information about the type of content being sent. The type of a content may influence how the user interacts with the content and how the user is notified about the content.\n              Allowed values are:\n              - `\"letter\"`: indicating that the content is an information letter. This is the default type for all non-payable content.\n              - `\"invoice\"`: indicating that the content contains payment information. This value can only be used when a \"payment\" object is provided and the \"payable\" attribute is set to true. This is the default type for all payable content.\n              - `\"letter.salary\"`: indicating that the content is a salary specification.\n              - `\"letter.creditnotice\"`: indicating that the content is a creditnotice.\n        tenant_info:\n          description: |\n            An arbitrary string defined by the tenant, used to group content for administrative tasks\n          type: string\n          writeOnly: true\n        files:\n          description: Array of file Objects\n          type: array\n          writeOnly: true\n          items:\n            $ref: \"#/components/schemas/File\"\n        context:\n          type: object\n          writeOnly: true\n          description: Optionally specify additional information\n          properties:\n            invoice:\n              type: object\n              description: Optionally specify invoice information\n              properties:\n                payment:\n                  $ref: \"#/components/schemas/Payment\"\n                invoice_reference:\n                  type: string\n                  description: Tenant’s own Invoice Reference\n                  example: \"Invoice Nr #123\"\n\n    # ##############################################\n    # SCHEMA Payment\n    # ##############################################\n    Payment:\n      type: object\n      description: Optionally specify payment information\n      required:\n        - payable\n        - currency\n        - due_date\n        - total_owed\n        - type\n        - method\n        - account\n        - reference\n      properties:\n        payable:\n          type: boolean\n          description: Toggles whether this content should be payable through Kivra’s payment platform\n        status:\n          type: string\n          description: \"Toggles whether this content is paid or unpaid: if already paid the user can’t pay it again through Kivra\"\n          default: \"unpaid\"\n          readOnly: true\n          enum: [\"paid\", \"unpaid\"]\n        currency:\n          type: string\n          format: ISO4217\n          example: \"SEK\"\n          description: Currency used in specifying `total_owed`\n        due_date:\n          type: string\n          format: ISO8601\n          example: \"2017-01-01\"\n          description: Date when this Invoice is due\n        total_owed:\n          type: string\n          format: float\n          example: \"123.50\"\n          description: The total amount owed according to the invoice. **If `payable` equals `true` this must be a non negative number that’s greater than \"0\"**\n        type:\n          type: string\n          description: Type of format for the reference\n          example: \"SE_OCR\"\n          enum: [\"SE_OCR\", \"TENANT_REF\"]\n        method:\n          type: string\n          description: 1 = BG and 2 = PG\n          example: \"1\"\n          enum: [\"1\", \"2\"]\n        account:\n          type: string\n          example: \"12345\"\n          description: Tenant’s account number\n        reference:\n          type: string\n          example: \"123OCRNUMBER456\"\n          description: The reference number used for paying. This can be maximum 25 characters long\n        variable_amount:\n          type: boolean\n          default: false\n          description: Toggles whether the user may choose to pay only a portion of the total_owed amount or whether the user must always pay the complete total_owed amount\n        min_amount:\n          type: string\n          format: float\n          example: \"50.00\"\n          description: The minimum amount that can be paid when `variable_amount` equals `true`. Note that this is a soft limit, so whenever `variable_amount` is `true` the user will be able to choose freely the amount to be paid, but it may be warned if the amount paid is inferior to `min_amount`. `min_amount` must be greater than \"0\" and less than \"total_owed\".\n\n    # ##############################################\n    # SCHEMA PaymentMultipleOptions\n    # ##############################################\n    PaymentMultipleOptions:\n      type: object\n      description: Payment information when multiple options are available. Note that the first options is special. Notifications about the invoice will be based on the due date specified in the first option, and in the case where a user looks at the invoice in a client that does not know about multiple options, the first one will be the only one presented. For example, if the invoice offers the choice of paying the entire debt or to start a payment plan, the first option should be to pay the entire debt.\n      required:\n        - payable\n        - account\n        - method\n        - currency\n        - options\n      properties:\n        payable:\n          type: boolean\n          description: Toggles whether this content should be payable through Kivra’s payment platform. Only `true` is allowed when sending multiple payment options.\n          enum: [true]\n        status:\n          type: string\n          description: \"Toggles whether this content is paid or unpaid: if already paid the user can’t pay it again through Kivra\"\n          default: \"unpaid\"\n          readOnly: true\n          enum: [\"paid\", \"unpaid\"]\n        method:\n          type: string\n          description: 1 = BG and 2 = PG\n          example: \"1\"\n          enum: [\"1\", \"2\"]\n        account:\n          type: string\n          example: \"1234-5678\"\n          description: Tenant’s account number\n        currency:\n          type: string\n          format: ISO4217\n          example: \"SEK\"\n          description: Currency used in specifying `amount`\n        options:\n          type: array\n          description: \"A list of payment options, where each option should differ in either `amount` or `reference`\"\n          items:\n            type: object\n            description: \"A payment option where each option should differ in either `amount` or `reference`\"\n            required:\n              - due_date\n              - amount\n              - type\n              - reference\n            properties:\n              due_date:\n                type: string\n                format: ISO8601\n                example: \"2017-01-01\"\n                description: Date when this option is due.\n              amount:\n                type: string\n                format: float\n                example: \"123.50\"\n                description: The payment amount for this option. A positive number.\n              type:\n                type: string\n                description: Type of format for the reference\n                example: \"SE_OCR\"\n                enum: [\"SE_OCR\", \"TENANT_REF\"]\n              reference:\n                type: string\n                example: \"123OCRNUMBER456\"\n                description: The reference number used for paying. This can be maximum 25 characters long.\n              title:\n                type: string\n                description: \"Title for this option\"\n              description:\n                type: string\n                description: \"Optional description for this option\"\n              icon:\n                $ref: '#/components/schemas/PaymentOptionIcon'\n\n    # ##############################################\n    # SCHEMA CompanyList\n    # ##############################################\n    CompanyList:\n      type: object\n      properties:\n        key:\n          description: Company's unique Key\n          type: string\n          example: \"15236156848eefa1dc75364af2be38c98eb3aae223\"\n        vatnr:\n          description: Company's unique Vat Number\n          type: string\n          example: \"SE556840226601\"\n\n    # ##############################################\n    # SCHEMA UserList\n    # ##############################################\n    UserList:\n      type: object\n      properties:\n        key:\n          description: This field is no longer used\n          type: string\n          example: \"\"\n        ssn:\n          description: User's unique SSN in the form `YYYYMMDDnnnn`\n          type: string\n          example: \"191212121212\"\n\n    # ##############################################\n    # SCHEMA UserDiff\n    # ##############################################\n    UserDiff:\n      type: object\n      properties:\n        added:\n          type: array\n          description: List of added users\n          items:\n            $ref: \"#/components/schemas/UserList\"\n        removed:\n          type: array\n          description: List of removed users\n          items:\n            $ref: \"#/components/schemas/UserList\"\n\n    # ##############################################\n    # SCHEMA UserMatch\n    # ##############################################\n    UserMatch:\n      required:\n        - ssns\n      type: object\n      properties:\n        ssns:\n          type: array\n          items:\n            type: string\n            example:\n              - \"191212121212\"\n              - \"197701032380\"\n              - \"198112172385\"\n          description: list of SSNs to be matched\n      example:\n        ssns:\n          - \"191212121212\"\n          - \"197701032380\"\n          - \"198112172385\"\n\n    # ##############################################\n    # SCHEMA CompanyMatch\n    # ##############################################\n    CompanyMatch:\n      required:\n        - vat_numbers\n      type: object\n      properties:\n        vat_numbers:\n          type: array\n          items:\n            type: string\n            example:\n              - \"SE25555555550\"\n              - \"SE25555555551\"\n              - \"SE25555555552\"\n          description: list of VAT Numbers\n      example:\n        vat_numbers:\n          - \"SE25555555550\"\n          - \"SE25555555551\"\n          - \"SE25555555552\"\n\n    # ##############################################\n    # SCHEMA Tenant_v2\n    # ##############################################\n    Tenant_v2:\n      type: object\n      required:\n        - name\n        - company_id\n      properties:\n        name:\n          description: Name of the Tenant, this name shows up in the Users Inbox\n          type: string\n          example: \"Kivra\"\n        company_id:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CompanyId\"\n        edit_security_level:\n          description: Security level needed for an enduser to `opt_out` from this Tenant\n          type: integer\n          readOnly: true\n          example: 50\n          enum: [25, 50]\n        groups:\n          type: array\n          items:\n            type: string\n          readOnly: true\n          description: List of groups this Tenant belongs to\n          example: []\n        visibility:\n          description: Determines if this Tenant is visible for the enduser\n          type: string\n          readOnly: true\n          enum: [visible, hidden]\n        created_at:\n          description: Datum when the tenant was created in UTC format\n          type: string\n          readOnly: true\n          example: \"2019-05-20T12:42:29Z\"\n        created_by:\n          description: ID of client that created the tenant\n          type: string\n          readOnly: true\n          example: \"client_15063298495eafd2749bb78e2f991af3ab023d13df\"\n        status:\n          description: internal field describing whether the user can opt-out the tenant\n          type: string\n          readOnly: true\n          example: \"optional\"\n        class:\n          description: internal field\n          type: string\n          readOnly: true\n          example: \"opt_out\"\n\n    # ##############################################\n    # SCHEMA Error40915\n    # ##############################################\n    Error40915:\n      type: object\n      properties:\n        code:\n          type: string\n          description: The 5-digits error code\n          example: 40915\n        short_message:\n          type: string\n          description: A short message explaining the conflict\n          example: Orgnumber already exist\n        long_message:\n          type: string\n          description: A text message explaining the conflict\n          example: \"One or more of the organisation numbers within the company_id's you provided, already exist in existing tenants. Tenants outside your scope: {Name: TestBolag, Tenant key: 1424780396902ee9278b16417f8e3252c3ced28c38, Organisation number: SE556840226601}\"\n\n    # ##############################################\n    # SCHEMA Error40045\n    # ##############################################\n    Error40045:\n      type: object\n      properties:\n        code:\n          type: string\n          description: The 5-digits error code\n          example: 40045\n        short_message:\n          type: string\n          description: A short message explaining the error\n          example: PDF was invalid\n        long_message:\n          type: string\n          description: A text message explaining the error\n          example: The supplied agreement PDF was invalid. Please check that the file is a valid PDF\n\n    # ##############################################\n    # SCHEMA RequestAccess\n    # ##############################################\n    RequestAccess:\n      type: object\n      properties:\n        created_at:\n          description: Datum when the request was created in UTC format\n          type: string\n          readOnly: true\n          example: \"2019-05-20T12:42:29Z\"\n        created_by:\n          description: ID of client that created the request\n          type: string\n          readOnly: true\n          example: \"client_15063298495eafd2749bb78e2f991af3ab023d13df\"\n        status:\n          description: internal field describing whether the user can opt-out the tenant\n          type: string\n          readOnly: true\n          example: \"pending\"\n        client_id:\n          description: ID Of You the Client\n        client_name:\n          description: Name of the client who created the requested tenant\n          type: string\n          readOnly: true\n          example: \"Client XYZ\"\n        tenant_name:\n          description: Name of the requested tenant\n          type: string\n          readOnly: true\n          example: \"Tenant ABC\"\n        tenant_key:\n          description: Key of the requested tenant\n          type: string\n          readOnly: true\n          example: \"1424780396902ee9278b16417f8e3252c3ced28c38\"\n\n    # ##############################################\n    # SCHEMA Agreement\n    # ##############################################\n    Agreement:\n      type: object\n      required:\n        - subject\n        - type\n        - original\n        - parties\n      properties:\n        subject:\n          description: Name of the agreement\n          type: string\n          example: \"Employment agreement\"\n        type:\n          description: the type of content, for agreements always use 'agreement'\n          type: string\n          example: \"agreement\"\n        vat_number:\n          description: |\n            A valid VAT-identifier, Swedish format: `SE[xxxxxxxxxx]01`\n          type: string\n          example: SE556840226601\n        original:\n          type: object\n          properties:\n            name:\n              description: Name of the document file\n              type: string\n              example: \"agreement1025.pdf\"\n            content_type:\n              description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. \"application/pdf\"\n              type: string\n              example: \"application/pdf\"\n            data:\n              description: Base64-encoded data for the agreement PDF\n              type: string\n              format: \"Base64-encoded data\"\n              example: REVBREJFRUY=\n        parties:\n          description: list of signers and delegates that are requested to sign the agreement\n          type: array\n          items:\n            $ref: \"#/components/schemas/AgreementParties\"\n          example:\n            - ssn: \"197701032380\"\n              name: \"Jan-Erik Karlsson\"\n              email: \"je.karlsson@email.nu\"\n              role: \"signer\"\n            - ssn: \"198112172385\"\n              name: \"Gustav Larsson\"\n              email: \"gustav123@mymail.com\"\n              role: \"delegate\"\n\n    # ##############################################\n    # SCHEMA AgreementParties\n    # ##############################################\n    AgreementParties:\n      type: object\n      properties:\n        ssn:\n          description: |\n            User's unique SSN, format: `YYYYMMDDnnnn`\n          type: string\n          example: \"197701032380\"\n        name:\n          description: Name of the user\n          type: string\n          example: \"Jan-Erik Karlsson\"\n        email:\n          description: email to be used to contact the user\n          type: string\n          example: \"je.karlsson.hem@email.nu\"\n        role:\n          description: the role of the user in this signature flow\n          type: string\n          enum: [\"signer\", \"delegate\"]\n          example: \"signer\"\n\n    # ##############################################\n    # SCHEMA AgreementStateShort\n    # ##############################################\n    AgreementStateShort:\n      type: object\n      properties:\n        key:\n          description: unique agreement id\n          type: string\n          example: \"1544707148d73a3e84a216427724637fc207cba2ab\"\n        state:\n          description: current state for the agreement\n          type: string\n          example: \"active\"\n\n    # ##############################################\n    # SCHEMA AgreementStateDetailed\n    # ##############################################\n    AgreementStateDetailed:\n      type: object\n      properties:\n        subject:\n          description: Name of the agreement\n          type: string\n          example: \"Employment agreement\"\n        created_at:\n          description: The time when the agreement was created\n          type: string\n          example: \"2019-04-09T13:42:26Z\"\n          readOnly: true\n        expires_at:\n          description: |\n            The expiration time for the agreement, if the agreement is not completed before this date, it will no longer be available for signature\n          type: string\n          example: \"2019-05-09T13:42:26Z\"\n          readOnly: true\n        state:\n          description: The current state of the agreement\n          type: string\n          example: completed\n          enum: [active, completed, revoked]\n          readOnly: true\n        tenant_name:\n          description: The name of the tenant that created the agreement\n          type: string\n          example: \"Sender AB\"\n        tenant:\n          description: The tenant key that created the agreement\n          type: string\n          example: \"tenant_154442474745511bbaaa5b44b391eae0513e2c55a0\"\n        type:\n          description: The type of agreement as provided by the sender when the agreement was created\n          type: string\n          example: \"agreement\"\n        signatures:\n          description: |\n            List of signatures\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/AgreementSignature\"\n          example:\n            - ssn: \"197701032380\"\n              real_name: \"Jan-Erik Karlsson\"\n              created_at: \"2019-04-12T08:23:29Z\"\n              order_ref: \"d4ace777-6b91-4172-903e-39371ede89f1\"\n            - ssn: \"198112172385\"\n              real_name: \"Gustav Johan Larsson\"\n              created_at: \"2019-04-11T18:53:03Z\"\n              order_ref: \"f5bce777-0b42-4222-1f3e-ab523ede7a5f\"\n        parties:\n          description: list of signers and delegates that are requested to sign the agreement\n          type: array\n          items:\n            $ref: \"#/components/schemas/AgreementParties\"\n          example:\n            - ssn: \"197701032380\"\n              name: \"Jan-Erik Karlsson\"\n              email: \"je.karlsson.hem@email.nu\"\n              role: \"signer\"\n            - ssn: \"198112172385\"\n              name: \"Gustav Larsson\"\n              email: \"gustav123@mymail.com\"\n              role: \"delegate\"\n\n    # ##############################################\n    # SCHEMA AgreementSignature\n    # ##############################################\n    AgreementSignature:\n      type: object\n      properties:\n        ssn:\n          description: |\n            Signer's unique SSN, format: `YYYYMMDDnnnn`\n          type: string\n          example: \"191212121212\"\n        real_name:\n          description: The real name of the signer, as provided by Mobile BankID service\n          type: string\n          example: \"Jan-Erik Karlsson\"\n        created_at:\n          description: The time when the signature was created\n          type: string\n          example: \"2019-04-12T08:23:29Z\"\n        order_ref:\n          description: The unique ID of the signature\n          type: string\n          example: \"d4ace777-6b91-4172-903e-39371ede89f1\"\n\n    # ##############################################\n    # SCHEMA CompanyId\n    # ##############################################\n    CompanyId:\n      type: object\n      required:\n        - name\n        - orgnr\n      properties:\n        name:\n          description: Legal name of Company\n          type: string\n          example: \"Kivra AB\"\n        orgnr:\n          description: Vat number of Company\n          type: string\n          example: \"SE556840226601\"\n\n    # ##############################################\n    # SCHEMA File\n    # ##############################################\n    File:\n      type: object\n      required:\n        - name\n        - data\n        - content_type\n      properties:\n        name:\n          description: Arbritrary file-name that is shown alongside the File in the Kivra GUI\n          type: string\n          example: filename.pdf\n        data:\n          description: Base64-encoded data\n          type: string\n          format: \"Base64-encoded data\"\n          example: REVBREJFRUY=\n        content_type:\n          description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. \"application/pdf\"\n          type: string\n          example: \"application/pdf\"\n\n    # ##############################################\n    # SCHEMA Icon\n    # ##############################################\n    Icon:\n      type: object\n      required:\n        - data\n        - content_type\n      properties:\n        name:\n          description: Arbitrary filename\n          type: string\n          example: filename.pdf\n        data:\n          description: \u003e\n                Base64-encoded data. Max size is 134 kB when encoded which is roughly equivalent to\n                100 kB before encoding. The image format must be PNG.\n                The image must be quadratic (that is, width and height\n                must be the same). The sides must be at least 256\n                pixels long, and at most 512 pixels long. The image\n                must have an alpha channel.\n          type: string\n          format: \"Base64-encoded data\"\n          example: REVBREJFRUY=\n        content_type:\n          description: The [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) media type corresponding to the file, e.g. \"image/png\"\n          type: string\n          enum: [\"image/png\"]\n          example: \"image/png\"\n\n\n    # ##############################################\n    # SCHEMA TenantIcon\n    # ##############################################\n    TenantIcon:\n      allOf:\n        - $ref: '#/components/schemas/Icon'\n        - type: object\n          properties:\n            data:\n              description: Base64-encoded data\n              type: string\n              format: 'Base64-encoded data'\n              example: REVBREJFRUY=\n\n    # ##############################################\n    # SCHEMA PaymentOptionIcon\n    # ##############################################\n    PaymentOptionIcon:\n      allOf:\n        - $ref: '#/components/schemas/Icon'\n        - type: object\n          properties:\n            data:\n              # TODO: Actually decide max before merging this PR\n              description: This string is ignored by the documentation system\n              type: string\n              example: REVBREJFRUY=\n\n    # ##############################################\n    # SCHEMA CompanyInbox\n    # ##############################################\n    CompanyInbox:\n      type: object\n      properties:\n        key:\n          description: Content's unique key\n          type: string\n          example: \"15294092505b9cfab3f79d233f8eca6fbc5385fa61\"\n        sender:\n          description: Unique key for the tenant that posted the content\n          type: string\n          example: \"1341573157b3a133f220f4217b2e32989d2efa015\"\n        sender_name:\n          description: Name of the tenant that posted the content\n          type: string\n          example: \"Kivra\"\n        created_at:\n          description: Date and time when the content was delivered to the recipient\n          type: string\n          example: \"2018-06-19T11:54:10Z\"\n        subject:\n          description: Subject of the content, as set by the sender\n          type: string\n          example: \"Invoice 4512 from Local Bank\"\n        status:\n          description: Whether the content has been read (opened) or not\n          type: string\n          enum: [\"read\", \"unread\"]\n          example: \"read\"\n\n    # ##############################################\n    # SCHEMA CompanyContent\n    # ##############################################\n    CompanyContent:\n      type: object\n      properties:\n        sender:\n          description: Unique key for the tenant that posted the content\n          type: string\n          example: \"1341573157b3a133f220f4217b2e32989d2efa015\"\n        sender_name:\n          description: Name of the tenant that posted the content\n          type: string\n          example: \"Kivra\"\n        created_at:\n          description: Date and time when the content was delivered to the recipient\n          type: string\n          example: \"2018-06-19T11:54:10Z\"\n        subject:\n          description: Subject of the content, as set by the sender\n          type: string\n          example: \"Invoice 4512 from Local Bank\"\n        receiver_name:\n          description: Name of the company that received the content\n          type: string\n          example: \"Digital Hero AB\"\n        payment:\n          $ref: \"#/components/schemas/Payment\"\n        parts:\n          description: files composing the content\n          type: array\n          items:\n            $ref: \"#/components/schemas/Parts\"\n\n    # ##############################################\n    # SCHEMA Booking\n    # ##############################################\n    Booking:\n      type: object\n      required:\n        - title\n        - start_time\n      properties:\n        title:\n          description: |\n            Booking name that is shown in the Kivra GUI. Note! Don’t include any sensitive information here.\n          type: string\n          example: \"Kontroll av tandhälsa\"\n        start_time:\n          description: |\n            Date and time for the booking to start. Must be in the future. Time zone will be automatically set to UTC – but you can state a different time zone here if applicable.\n          type: string\n          format: ISO8601\n          example: \"2028-06-19T11:00:00Z\"\n        end_time:\n          description: |\n            Date and time for the booking to end. If present must be after start_time. Time zone will be automatically set to UTC – but you can state a different time zone here if applicable.\n          type: string\n          format: ISO8601\n          example: \"2028-06-19T12:00:00Z\"\n        location:\n          description: Location for the appointment/booking. Address must contain city for full functionality.\n          type: string\n          example: \"Strandvägen 61, Stockholm\"\n        description:\n          description: |\n            Additional information. Note! Don’t include any sensitive information here.\n          type: string\n          example: \"Brush your teeth before coming\"\n        info_url:\n          description: Link to page with additional information\n          type: string\n          format: uri\n\n    # ##############################################\n    # SCHEMA Parts\n    # ##############################################\n    Parts:\n      type: object\n      properties:\n        content_type:\n          type: string\n          description: The IANA media type corresponding to the file, e.g. \"application/pdf\"\n          example: \"application/pdf\"\n        checksum:\n          type: string\n          description: The cheksum of the document calculated with md5\n          example: \"9209c7eebdd283a4c4bd7555e73e6064\"\n        sha256:\n          type: string\n          description: hash of the document calculated with SHA-256\n          example: \"287f2fe67a8a76a10169aa6a885d21e1f83416c4831294ea5c4b0a38bda5c78d\"\n        size:\n          type: integer\n          description: size of the document in bytes\n          example: 163414\n        body:\n          type: string\n          description: body of the content (present only if content_type is \"text/html\" or \"text/plain\")\n          example: \"\u003c!doctype html\u003e\\n\u003chtml class=\\\"....\"\n        key:\n          type: string\n          description: |\n            The unique key for the content file (present for all content that is not \"text/html\" or \"text/plain\")\n          example: \"15118724482475bf32615b4a2aaa604fd66377010e\"\n\n  # ##############################################\n  # SECURITY oAuth2Client\n  # ##############################################\n\n  securitySchemes:\n    oAuth2Client:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: \"https://sender.api.kivra.com/v1/auth\"\n"
		}
	},
	"Error": "buildIR: make ir: path \"/v1/tenant/{tenantKey}/user/diff/{diffId}\": get: security: security \"oAuth2Client\" (index 0): flow \"clientCredentials\": unknown scope \"get:kivra.v1.tenant.{tenantKey}.user.diff.{diffId}\""
}