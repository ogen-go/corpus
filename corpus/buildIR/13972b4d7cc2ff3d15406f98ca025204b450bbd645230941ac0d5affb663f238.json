{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/xpring-eng/xrp-api"
		},
		"file": {
			"name": "api-doc.yml",
			"size": 0,
			"path": "api-doc.yml",
			"byteSize": 40852,
			"content": "openapi: 3.0.1\nservers:\n  - url: http://localhost:3000/v3\n    description: Local development server\n  # - url: http://localhost:3000\n  #   description: Local development server (default)\n  - url: https://xrpspec.com/v3\n    description: Public development server\ninfo:\n  description: An API server that provides a REST-like interface to the XRP Ledger.\n  version: 0.1.0 # TODO: Load from package.json\n  title: XRP-API\ntags:\n  - name: Query\n    description: Methods to access data from the XRP Ledger.\n  - name: Transact\n    description: Methods to submit transactions to the XRP Ledger.\n  - name: Meta\n    description: Methods to get information about the XRP-API server itself.\npaths:\n  '/servers/info':\n    get:\n      tags:\n        - Meta\n      summary: Get Server Info\n      operationId: getServerInfo\n      description: Retrieve information about the current status of the XRP-API Server and the rippled server(s) it is connected to.\n      responses:\n        '200':\n          description: The status of the XRP-API server and an array of statuses from the `rippled` server(s) it is connected to.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerInfo'\n  '/accounts/{address}/info': # Maps to rippled's account_info command\n    get:\n      tags:\n        - Query\n      summary: Get Account Info\n      operationId: getAccountInfo\n      description: |\n        Get information about an account in the XRP Ledger. This includes its settings, activity, and XRP balance. It also includes the sequence number of the next valid transaction for this account, which you should use to prepare a transaction from this account. By default, this method returns data from the 'current' (in-progress) ledger, which may change before validation.\n      parameters:\n        - in: path\n          name: address\n          description: The account to query.\n          required: true\n          schema:\n            $ref: '#/components/schemas/Address'\n        - in: query\n          name: ledger_index\n          description: (Optional) The sequence number of the ledger to use, or a shortcut string to choose a ledger automatically. (See [Specifying Ledgers](https://developers.ripple.com/basic-data-types.html#specifying-ledgers))\n          required: false\n          schema:\n            $ref: '#/components/schemas/LedgerIndex'\n      responses:\n        '200':\n          description: A successful response provides the account data, and information about the ledger version that was used to provide this data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountInfo'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n  '/accounts/{address}/settings': # Maps to ripple-lib's getSettings method\n    get:\n      tags:\n        - Query\n      summary: Get Account Settings\n      operationId: getAccountSettings\n      description: |\n        Get an account's settings. These are the settings that can be modified by the user. By default, this method returns data from the 'current' (in-progress) ledger, which may change before validation.\n      parameters:\n        - in: path\n          name: address\n          description: The account to query.\n          required: true\n          schema:\n            $ref: '#/components/schemas/Address'\n        - in: query\n          name: ledger_index\n          description: (Optional) The sequence number of the ledger to use, or a shortcut string to choose a ledger automatically. (See [Specifying Ledgers](https://xrpl.org/basic-data-types.html#specifying-ledgers))\n          required: false\n          schema:\n            $ref: '#/components/schemas/LedgerIndex'\n      responses:\n        '200':\n          description: A successful response contains the settings data for the requested account.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountSettings'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n  '/accounts/{address}/transactions': # Maps to ripple-lib's getTransactions method\n    get:\n      tags:\n        - Query\n      summary: Get Account Transactions\n      operationId: getAccountTransactions\n      description: |\n        Get a selection of transactions that affected the specified account.\n      parameters:\n        - in: path\n          name: address\n          description: The account to query.\n          required: true\n          schema:\n            $ref: '#/components/schemas/Address'\n        - in: query\n          name: ledger_index\n          description: The sequence number of the ledger to use, or a shortcut string to choose a ledger automatically. (See [Specifying Ledgers](https://xrpl.org/basic-data-types.html#specifying-ledgers))\n          required: false\n          schema:\n            $ref: '#/components/schemas/LedgerIndex'\n      responses:\n        '200':\n          description: A successful response provides a list of transactions that affected the specified account.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountTransactions'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n  '/preparations/payments':\n    get:\n      tags:\n        - Transact\n      summary: Prepare a Payment\n      operationId: preparePayment\n      description: |\n        Prepare a payment. Provide the source, destination, currency, and value (amount) as query parameters. XRP-API will perform some pre-flight checks, and auto-fill the Fee, Sequence, and LastLedgerSequence fields.\n      parameters:\n        - in: query\n          name: source\n          description: The address of the account sending the payment.\n          required: false\n          schema:\n            $ref: '#/components/schemas/Address'\n        - in: query\n          name: destination\n          description: The address of the account that will receive the payment.\n          required: false\n          schema:\n            $ref: '#/components/schemas/Address'\n        - in: query\n          name: currency\n          description: The currency to send.\n          required: false\n          schema:\n            $ref: '#/components/schemas/Currency'\n        - in: query\n          name: value\n          description: The value of the amount to send.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: maxLedgerVersionOffset\n          description: Offset from the current validated ledger version to the highest ledger version that the transaction can be included in. This effectively serves as the transaction's expiration time, after which it is invalid. Transactions are typically validated within 2-3 ledgers, but transactions that are signed manually and/or offline may need longer validity times. A ledger is created every 3-4 seconds. For example, a value of `500` would prepare a transaction that will be valid for approximately 25-30 minutes.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A Prepared Payment Transaction, with min_ledger and max_ledger fields.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreparedPaymentTransaction'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n  '/payments':\n    put:\n      tags:\n        - Transact\n      summary: Sign and/or submit a payment\n      operationId: signSubmitPayment\n      description: |\n        Sign a prepared payment transaction and/or submit a transaction to the XRP Ledger network. For signing, the sending account must match an account secret that the XRP-API server is configured with.\n      requestBody:\n        description: A transaction to sign and/or submit.\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/PaymentTransaction'\n                - $ref: '#/components/schemas/SignedTransaction'\n            examples:\n              paymentTransactionExample:\n                $ref: '#/components/examples/paymentTransactionExample'\n\n      responses:\n        '200':\n          description: A successful response provides the native XRP Ledger format for the transaction, the transaction's identifying hash, and the preliminary result of processing the transaction.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionStatus'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n    post:\n      tags:\n        - Transact\n      summary: Create, sign, and submit a payment\n      operationId: createSignSubmitPayment\n      description: |\n        Create and a payment transaction, and submit it to the XRP Ledger network. The sending account must match an account address and secret the XRP-API server is configured with.\n      requestBody:\n        description: A transaction object and instructions.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentObjectAndInstructions'\n            examples:\n              Example_Payment:\n                summary: Send an XRP-to-XRP payment.\n                value:\n                  submit: true\n                  payment:\n                    source_address: 'rBEXjfD3MuXKATePRwrk4AqgqzuD9JjQqv'\n                    source_tag: 123\n                    source_amount:\n                      value: '5000000'\n                      currency: 'drops'\n                    destination_address: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59'\n                    destination_tag: 456\n                    destination_amount:\n                      value: '5000000'\n                      currency: 'drops'\n      responses:\n        '200':\n          description: A successful response provides the native XRP Ledger format for the transaction, the transaction's identifying hash, and the preliminary result of processing the transaction.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionStatus'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n  '/transactions/{transaction_id}':\n    get:\n      tags:\n        - Query\n        - Transact\n      summary: Get Transaction\n      operationId: getTransaction\n      description: Look up the status and details of a transaction. By default, this method only returns data from ledger versions that have been validated by consensus.\n      parameters:\n        - in: path\n          name: transaction_id\n          description: The ID of the transaction to retrieve.\n          required: true\n          schema:\n            $ref: '#/components/schemas/TransactionID'\n        - in: query\n          name: min_ledger\n          description: (Optional) Use this with max_ledger to specify a range of up to 1000 ledger indexes, starting with this ledger (inclusive). If the server cannot find the transaction, it confirms whether it was able to search all the ledgers in the requested range. (Requires rippled v1.5.0+)\n          required: false\n          example: 55420000\n          schema:\n            type: number\n        - in: query\n          name: max_ledger\n          description: (Optional) Use this with min_ledger to specify a range of up to 1000 ledger indexes, ending with this ledger (inclusive). If the server cannot find the transaction, it confirms whether it was able to search all the ledgers in the requested range. (Requires rippled v1.5.0+)\n          required: false\n          example: 55420500\n          schema:\n            type: number\n      responses:\n        '200':\n          description: Transaction object. (Note that this command may successfully find the transaction even if it is included in a ledger outside the range of min_ledger to max_ledger.)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppliedTransaction'\n        '400':\n          description: The request was not properly formatted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RippleAPIError'\n        '404':\n          description: The transaction was not included in a fully-validated ledger version that the server has available. If you provided both the min_ledger and max_ledger fields in the request, the 404 txnNotFound response includes the searched_all field (requires rippled v1.5.0+).\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/RippleAPIError'\n                  - type: object\n                    properties:\n                      searched_all:\n                        type: boolean\n                        description: (Omitted unless the request provided min_ledger and max_ledger) If true, the server was able to search all of the specified ledger versions, and the transaction was in none of them. If false, the server did not have all of the specified ledger versions available, so it is not sure if one of them might contain the transaction. (Requires rippled v1.5.0+)\n        '500':\n          description: One of the [Universal Errors](https://xrpl.org/error-formatting.html#universal-errors) occurred.\n\n  '/apiDocs':\n    get:\n      tags:\n        - Meta\n      operationId: getApiDoc\n      summary: Get API Docs\n      description: Return the API specification this server is using.\n      responses:\n        '200':\n          description: API specification document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiDoc'\n  '/ping':\n    get:\n      tags:\n        - Meta\n      operationId: getPing\n      summary: Ping\n      description: Ping the server to confirm that it is online.\n      responses:\n        '200':\n          description: A response with an empty body to indicate that the server is online and functional.\n\ncomponents:\n  schemas:\n    RippleAPIError:\n      description: A wrapper for one or more error messages that occurred when processing a request.\n      type: object\n      required:\n      - message\n      - errors\n      properties:\n        message:\n          type: string\n          description: A human-readable error message summarizing the problem(s) that occurred.\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorItem'\n          description: A list of errors that occurred when processing this request.\n    ErrorItem:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n    ServerInfo:\n      required:\n        - server_version\n      properties:\n        server_version:\n          type: string\n          description: The version number of this XRP-API server, in [SemVer format](https://semver.org/).\n        rippled_servers:\n          type: array\n          description: Server information from each `rippled` server this XRP-API server is connected to.\n          items:\n            $ref: '#/components/schemas/RippledServerInfo'\n    RippledServerInfo:\n      required:\n      - buildVersion\n      - completeLedgers\n      - hostID\n      - ioLatencyMs\n      - lastClose\n      - loadFactor\n      - peers\n      - pubkeyNode\n      - serverState\n      - validatedLedger\n      - validationQuorum\n      type: object\n      properties:\n        buildVersion:\n          type: string\n          description: The version number of the running rippled version.\n        completeLedgers:\n          pattern: '[0-9,-]+'\n          type: string\n          description: Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. It is possible to be a disjoint sequence, e.g. “2500-5000,32570-7695432”.\n        fetchPack:\n          type: number\n        hostID:\n          type: string\n          description: On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a unique four letter word.\n        ioLatencyMs:\n          type: number\n          description: Amount of time spent waiting for I/O operations to be performed, in milliseconds. If this number is not very, very low, then the rippled server is probably having serious load issues.\n        jqTransOverflow:\n          type: string\n        load:\n          $ref: '#/components/schemas/Load'\n        lastClose:\n          $ref: '#/components/schemas/LastClose'\n        loadFactor:\n          type: number\n          description: The load factor the server is currently enforcing, as a multiplier on the base transaction fee. The load factor is determined by the highest of the individual server’s load factor, cluster’s load factor, and the overall network’s load factor.\n        peerDisconnects:\n          type: string\n        peerDisconnectsResources:\n          type: string\n        peers:\n          minimum: 0\n          type: integer\n          description: How many other rippled servers the node is currently connected to.\n          format: int32\n        pubkeyNode:\n          type: string\n          description: Public key used to verify this node for internal communications; this key is automatically generated by the server the first time it starts up. (If deleted, the node can just create a new pair of keys.)\n        pubkeyValidator:\n          type: string\n          description: '*(Admin only)* Public key used by this node to sign ledger validations.'\n        serverState:\n          $ref: '#/components/schemas/ServerState'\n        serverStateDurationUs:\n          type: string\n          description: The amount of time, in microseconds, that the server has continuously been in the present state (`full`, `syncing`, etc.)\n        stateAccounting:\n          type: object\n          description: Total duration spent in and every transition to various server states. This can be useful for tracking the long-term health of your server's connectivity to the network.\n        time:\n          type: string\n        uptime:\n          type: number\n          description: Number of consecutive seconds that the server has been operational.\n        validatedLedger:\n          $ref: '#/components/schemas/ValidatedLedger'\n        validationQuorum:\n          type: number\n          description: Minimum number of trusted validations required in order to validate a ledger version. Some circumstances may cause the server to require more validations.\n        validatorList:\n          type: object\n      additionalProperties: false\n    Load:\n      title: Load\n      required:\n      - jobTypes\n      - threads\n      type: object\n      properties:\n        jobTypes:\n          type: array\n          description: '*(Admin only)* Information about the rate of different types of jobs being performed by the server and how much time it spends on each.'\n          items:\n              type: object\n              properties:\n                avgTime:\n                  type: number\n                jobType:\n                  type: string\n                peakTime:\n                  type: number\n                perSecond:\n                  type: number\n        threads:\n          type: number\n          description: '*(Admin only)* The number of threads in the server’s main job pool, performing various operations.'\n      description: '*(Admin only)* Detailed information about the current load state of the server.'\n    LastClose:\n      title: LastClose\n      required:\n      - convergeTimeS\n      - proposers\n      type: object\n      properties:\n        convergeTimeS:\n          type: number\n          description: The time it took to reach a consensus for the last ledger closing, in seconds.\n        proposers:\n          minimum: 0\n          type: integer\n          description: Number of trusted validators participating in the ledger closing.\n          format: int32\n      description: Information about the last time the server closed a ledger.\n    ServerState:\n      title: ServerState\n      enum:\n      - disconnected\n      - connected\n      - syncing\n      - tracking\n      - full\n      - validating\n      - proposing\n      type: string\n      description: A string indicating to what extent the server is participating in the network. See [Possible Server States](https://developers.ripple.com/rippled-server-states.html) for more details.\n      example: disconnected\n    ValidatedLedger:\n      title: ValidatedLedger\n      required:\n      - age\n      - baseFeeXRP\n      - hash\n      - reserveBaseXRP\n      - reserveIncrementXRP\n      - ledgerVersion\n      type: object\n      properties:\n        age:\n          minimum: 0\n          type: integer\n          description: The time since the ledger was closed, in seconds.\n          format: int32\n        baseFeeXRP:\n          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$\n          type: string\n          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.\n        hash:\n          pattern: ^[A-F0-9]{64}$\n          type: string\n          description: Unique hash for the ledger, as an uppercase hexadecimal string.\n        reserveBaseXRP:\n          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$\n          type: string\n          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.\n        reserveIncrementXRP:\n          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$\n          type: string\n          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.\n        ledgerVersion:\n          minimum: 0\n          type: integer\n          description: Identifying sequence number of this ledger version.\n          format: int32\n      description: Information about the fully-validated ledger with the highest sequence number (the most recent).\n    Address:\n      description: The address of an XRP Ledger account.\n      type: string\n      pattern: '^r[A-HJ-NP-Za-km-z1-9]{24,34}$|^X[A-HJ-NP-Za-km-z1-9]{46}$|^T[A-HJ-NP-Za-km-z1-9]{46}$'\n      example: TVp3kyJBH9YhnHcxEwT5ccj3pWN1Z1qYWx3Eq37XV1yGjKj\n    TransactionID:\n      description: The identifying hash of a transaction.\n      type: string\n      pattern: '^[0-9A-F]{64}$'\n      example: E08D6E9754025BA2534A78707605E0601F03ACE063687A0CA1BDDACFCD1698C7\n\n    PreparedPaymentTransaction:\n      description: A payment transaction with min_ledger and max_ledger fields.\n      allOf:\n        - $ref: '#/components/schemas/PaymentTransaction'\n        - type: object\n          required:\n            - min_ledger\n            - max_ledger\n          properties:\n            min_ledger:\n              type: integer\n              description: Assuming this transaction has not been submitted in the past, this is the lowest ledger index this transaction can appear in.\n            max_ledger:\n              type: integer\n              description: Highest ledger index this transaction can appear in. Same value as LastLedgerSequence.\n\n    AppliedTransaction:\n      description: An applied transaction contains the fields of the Transaction object as well as some additional fields.\n      allOf:\n        - $ref: '#/components/schemas/TransactionCommonFields'\n        - type: object\n          required:\n            - hash\n            - ledger_index\n            - meta\n            - validated\n          properties:\n            hash:\n              type: string\n              description: The hash value that uniquely identifies this transaction. Included only if the transaction was signed and submitted.\n            ledger_index:\n              type: integer # unsigned\n              description: The ledger index of the ledger that includes this transaction.\n            meta:\n              type: object\n              description: Various metadata about the transaction.\n            validated:\n              type: boolean\n              description: True if this data is from a validated ledger version; if omitted or set to false, this data is not final.\n\n    AccountInfo:\n      required:\n        - account_data\n      properties:\n        account_data:\n          $ref: '#/components/schemas/AccountData'\n        ledger_current_index:\n          type: integer\n          description: (Omitted if `ledger_index` is provided instead) The sequence number of the most-current ledger, which was used when retrieving this information. The information does not contain any changes from ledgers newer than this one.\n        ledger_index:\n          type: integer\n          description: (Omitted if `ledger_current_index` is provided instead) The sequence number of the ledger used when retrieving this information. The information does not contain any changes from ledgers newer than this one.\n        validated:\n          type: boolean\n          description: True if this data is from a validated ledger version; if omitted or set to false, this data is not final.\n    AccountSettings:\n      # required:\n        # The following could be added in the future:\n        # - ledger_index\n        # - validated\n      properties:\n        disallowIncomingXRP:\n          type: boolean\n          description: (Optional) Client applications should not send XRP to this account. Not enforced by rippled.\n        domain:\n          type: string\n          description: (Optional) The domain that owns this account, as a hexadecimal string representing the ASCII for the domain in lowercase.\n        emailHash:\n          type: string\n          nullable: true\n          description: (Optional) Hash of an email address to be used for generating an avatar image. Conventionally, clients use Gravatar to display this image. Use `null` to clear.\n        requireDestinationTag:\n          type: boolean\n          description: (Optional) Account requires incoming payments to specify a destination tag.\n        passwordSpent:\n          type: boolean\n          description: (Optional) Account has used its free SetRegularKey transaction.\n        disableMasterKey:\n          type: boolean\n          description: If the master key is disabled, `true`; `false` otherwise.\n        regularKey:\n          $ref: '#/components/schemas/Address'\n        signers:\n          type: object\n          description: (Optional) Settings that determine what sets of accounts can be used to sign a transaction on behalf of this account using multisigning.\n        tickSize:\n          type: number\n          description: (Optional) Tick size to use for offers involving a currency issued by this address. The exchange rates of those offers is rounded to this many significant digits. Valid values are 3 to 15 inclusive, or 0 to disable.\n        transferRate:\n          type: number\n          nullable: true\n          description: (Optional) The fee to charge when users transfer this account’s issuances, as the decimal amount that must be sent to deliver 1 unit. Has precision up to 9 digits beyond the decimal point. Use `null` to set no fee.\n        walletLocator:\n          type: string\n          nullable: true\n          description: (Optional) Transaction hash or any other 64 character hexadecimal string, that may or may not represent the result of a hash operation. Use `null` to clear.\n        # The following could be added in the future:\n        # ledger_index:\n        #   type: integer\n        #   description: (Omitted if `ledger_current_index` is provided instead) The sequence number of the ledger used when retrieving this information. The information does not contain any changes from ledgers newer than this one.\n        # validated:\n        #   type: boolean\n        #   description: True if this data is from a validated ledger version; if omitted or set to false, this data is not final.\n      additionalProperties: false\n    AccountTransactions:\n      type: object\n      properties:\n        transactions:\n          type: array\n          description: A list of transactions to affect the account.\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/TransactionCommonFields'\n        minLedgerVersion:\n          type: integer\n          description: The minimum ledger index searched when looking for transactions affecting this account.\n        validated:\n          type: boolean\n          description: If `true`, all the transaction outcomes in this response come from validated ledgers, so they are final and immutable.\n    AccountData:\n      description: The raw [AccountRoot object](https://xrpl.org/accountroot.html) of the account, as stored in the XRP Ledger.\n      type: object\n      required:\n        - LedgerEntryType\n        - Account\n        - Balance\n        - Flags\n        - OwnerCount\n        - PreviousTxnID\n        - PreviousTxnLgrSeq\n        - Sequence\n      properties:\n        Account:\n          $ref: '#/components/schemas/Address'\n        Balance:\n          type: string\n          description: The XRP balance of the account, in integer \"drops of XRP\", where 1000000 drops = 1 XRP.\n        Flags:\n          type: integer\n          description: A bitwise map of settings applied to this account.\n        LedgerEntryType:\n          type: string\n        OwnerCount:\n          type: integer\n        PreviousTxnID:\n          type: string\n        PreviousTxnLgrSeq:\n          type: integer\n        RegularKey:\n          $ref: '#/components/schemas/Address'\n        Sequence:\n          type: integer\n        index:\n          pattern: ^[A-F0-9]{64}$\n          type: string\n      additionalProperties: false\n    LedgerIndex:\n      oneOf:\n        - type: string\n          enum:\n            - validated\n            - closed\n            - current # default\n        - type: integer\n    PaymentObjectAndInstructions:\n      title: Payment object and instructions\n      description: Payment object (specification) and instructions on how to execute it.\n      type: object\n      required:\n      - payment\n      - submit\n      properties:\n        payment:\n          $ref: '#/components/schemas/PaymentObject'\n        instructions:\n          $ref: '#/components/schemas/Instructions'\n        submit:\n          type: boolean\n          description: |\n            If `false`, the server will not submit the transaction to the network. Instead, it will only return the following additional fields in the response: `tx_json`, `tx_blob`, and `id` (hash).\n    PaymentObject:\n      title: Payment Object\n      description: A payment object (specification).\n      type: object\n      properties:\n        source_address:\n          # description: The account sending the payment (the source account).\n          $ref: '#/components/schemas/Address'\n        source_tag:\n          type: number\n        source_amount:\n          $ref: '#/components/schemas/Amount'\n        source_slippage:\n          type: string\n        destination_address:\n          $ref: '#/components/schemas/Address'\n        destination_tag:\n          type: number\n        destination_amount:\n          $ref: '#/components/schemas/Amount'\n        invoice_id:\n          type: string\n        paths:\n          type: string\n        partial_payment:\n          type: boolean\n        no_direct_ripple:\n          type: boolean\n      required:\n        - source_address\n        - source_amount\n        - destination_address\n        - destination_amount\n    Amount:\n      description: An amount in the XRP Ledger.\n      type: object\n      properties:\n        value:\n          type: string\n        currency:\n          $ref: '#/components/schemas/Currency'\n        issuer: # aka counterparty\n          $ref: '#/components/schemas/Address'\n      required:\n        - value\n        - currency\n    Currency:\n      type: string\n      pattern: '^[0-9A-F]{40}$|^[A-Za-z0-9!@#$%^&*<>(){}\\[\\]\\?|]{3}$|^drops$'\n      example: 'USD'\n      description: \"A currency code that is valid in the XRP Ledger, or `XRP` for ledger's native currency.\"\n      externalDocs:\n        description: Currency codes in the XRP Ledger.\n        url: 'https://developers.ripple.com/basic-data-types.html#currency-codes'\n    Instructions:\n      title: Transaction Instructions\n      description: Indicates how to execute a transaction. Complements the transaction specification.\n      type: object\n      required:\n      - sequence\n      properties:\n        fee:\n          type: string\n          description: An exact fee to pay for the transaction, in XRP.\n        maxFee:\n          type: string\n          description: The maximum fee to pay for the transaction, in XRP.\n        maxLedgerVersion:\n          type: integer\n          nullable: true\n          description: The highest ledger version that the transaction can be included in.\n        maxLedgerVersionOffset:\n          type: integer\n          description: Offset from the current validated ledger version to the highest ledger version that the transaction can be included in.\n        sequence:\n          type: integer\n          description: The initiating account's sequence number for this transaction.\n        signersCount:\n          type: integer\n          description: The number of signers that will be signing this transaction.\n\n    TransactionStatus:\n      title: TransactionStatus\n      description: Transaction status returned immediately after submitting. If the transaction was submitted, `tx_json.hash` and `engine_result` will be included.\n      type: object\n      properties:\n        engine_result:\n          type: string\n          description: Code indicating the preliminary result of the transaction, for example `tesSUCCESS`. Not final until included in a fully validated `TransactionResult`.\n          externalDocs:\n            description: List of transaction responses\n            url: https://developers.ripple.com/transaction-results.html\n        engine_result_code:\n          type: integer\n          description: Numeric code indicating the preliminary result of the transaction, directly correlated to `engine_result`.\n        engine_result_message:\n          type: string\n          description: Human-readable explanation of the transaction's preliminary result.\n        tx_blob:\n          type: string\n          description: The complete transaction in hex string format.\n        tx_json:\n          $ref: '#/components/schemas/TransactionCommonFields'\n        accepted:\n          type: boolean\n          description: The value true indicates that the transaction was applied, queued, broadcast, or kept for later. The value false indicates that none of those happened, so the transaction cannot possibly succeed as long as you do not submit it again and have not already submitted it another time. (Requires rippled v1.5.0+)\n        account_sequence_available:\n          type: number\n          description: The next Sequence Number available for the sending account after all pending and queued transactions.\n        account_sequence_next:\n          type: number\n          description: The next Sequence Number for the sending account after all transactions that have been provisionally applied, but not transactions in the queue.\n        applied:\n          type: boolean\n          description: The value true indicates that this transaction was applied to the open ledger. In this case, the transaction is likely, but not guaranteed, to be validated in the next ledger version.\n        broadcast:\n          type: boolean\n          description: The value true indicates that this transaction was applied to the open ledger. In this case, the transaction is likely, but not guaranteed, to be validated in the next ledger version.\n        kept:\n          type: boolean\n          description: The value true indicates that the transaction was kept to be retried later.\n        queued:\n          type: boolean\n          description: The value true indicates the transaction was put in the Transaction Queue, which means it is likely to be included in a future ledger version.\n        open_ledger_cost:\n          type: string\n          description: The current open ledger cost before processing this transaction. Transactions with a lower cost are likely to be queued.\n        validated_ledger_index:\n          type: integer\n          description: The ledger index of the newest validated ledger at the time of submission. This provides a lower bound on the ledger versions that the transaction can appear in as a result of this request. (The transaction could only have been validated in this ledger version or earlier if it had already been submitted before.)\n\n    TransactionCommonFields:\n      title: Transaction Common Fields\n      type: object\n      description: The fields that are common to all transactions.\n      required:\n        - TransactionType\n        - Account\n        - Flags\n        - LastLedgerSequence # could be optional, but we make the opinionated choice of requiring it\n        - Fee\n        - Sequence\n      properties:\n        hash:\n          type: string\n          description: (Optional) The hash value that uniquely identifies this transaction. Included only if the transaction was signed.\n\n        TransactionType:\n          type: string # TODO: enum of supported types\n          description: The transaction type, such as \"Payment\".\n\n        Account:\n          # description: Source account of the transaction.\n          $ref: '#/components/schemas/Address'\n\n        Flags:\n          type: integer\n          format: int64\n          description: Transaction-specific flags (bit field).\n          example: 2147483648\n\n        LastLedgerSequence:\n          type: integer\n          description: Highest ledger index this transaction can appear in. This field places a strict upper limit on how long the transaction can wait to be validated or rejected.\n          externalDocs:\n            description: Reliable Transaction Submission\n            url: https://developers.ripple.com/reliable-transaction-submission.html\n\n        Fee:\n          type: string\n          description: Transaction fee, in drops.\n\n        Sequence:\n          type: integer\n          description: The account sequence number (can serve as a nonce).\n\n    PaymentTransaction:\n      allOf:\n        - $ref: '#/components/schemas/TransactionCommonFields'\n        - type: object\n          required:\n            - Destination\n            - Amount\n          properties:\n            Destination:\n              # description: Destination account to receive the payment.\n              $ref: '#/components/schemas/Address'\n            Amount:\n              type: string\n              description: The amount.\n\n    SignedTransaction:\n      title: Signed Transaction\n      type: object\n      description: A signed transaction.\n      required:\n        - signedTransaction\n      properties:\n        signedTransaction:\n          type: string\n          description: A signed transaction, represented as a hexadecimal string.\n\n    ApiDoc:\n      description: The requested apiDoc.\n      type: object\n\n  # Common Examples\n  examples:\n    paymentTransactionExample:\n      value:\n        TransactionType: \"Payment\"\n        Account: \"rNQao3Z1irwRjKWSs8heL4a8WKLPKfLrXs\"\n        Destination: \"r4FNkJtbKvCTjcE4UaeAtgpHGf8mAbeCoL\"\n        Amount: \"20000000\"\n        Flags: 2147483648\n        LastLedgerSequence: 6279611\n        Fee: \"12\"\n        Sequence: 1\n      summary: A sample XRPL payment transaction\n",
			"canonicalURL": "/github.com/xpring-eng/xrp-api@b22eb9075d1987672f631adf1af861ac18b81df5/-/blob/api-doc.yml",
			"externalURLs": [
				{
					"url": "https://github.com/xpring-eng/xrp-api/blob/b22eb9075d1987672f631adf1af861ac18b81df5/api-doc.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/preparations/payments\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"sum type parameter"
	]
}