{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/deepmap/oapi-codegen"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "internal/test/all_of/openapi.yaml",
			"byteSize": 1626,
			"content": "openapi: \"3.0.1\"\ninfo:\n  version: 1.0.0\n  title: Tests AllOf composition\npaths:\n  /placeholder:\n    get:\n      operationId: placeholder\n      description: |\n        Validators want at least one path, so this makes them happy.\n      responses:\n        default:\n          description: placeholder\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonWithID\"\ncomponents:\n  schemas:\n    PersonProperties:\n      type: object\n      description: |\n        These are fields that specify a person. They are all optional, and\n        would be used by an `Edit` style API endpoint, where each is optional.\n      properties:\n        FirstName:\n          type: string\n        LastName:\n          type: string\n        GovernmentIDNumber:\n          type: integer\n          format: int64\n    Person:\n      type: object\n      description: |\n        This is a person, with mandatory first and last name, but optional ID\n        number. This would be returned by a `Get` style API. We merge the person\n        properties with another Schema which only provides required fields.\n      allOf:\n        - $ref: \"#/components/schemas/PersonProperties\"\n        - required: [FirstName, LastName]\n    PersonWithID:\n      type: object\n      description: |\n        This is a person record as returned from a Create endpoint. It contains\n        all the fields of a Person, with an additional resource UUID.\n      allOf:\n        - $ref: \"#/components/schemas/Person\"\n        - properties:\n            ID:\n              type: integer\n              format: int64\n          required: [ ID ]\n",
			"canonicalURL": "/github.com/deepmap/oapi-codegen@4a1477f6a8ba6ca8115cc23bb2fb67f0b9fca18e/-/blob/internal/test/all_of/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/deepmap/oapi-codegen/blob/4a1477f6a8ba6ca8115cc23bb2fb67f0b9fca18e/internal/test/all_of/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/placeholder\": get: responses: default: contents: media: \"application/json\": generate schema: allOf: schema type mismatch:  and object"
}