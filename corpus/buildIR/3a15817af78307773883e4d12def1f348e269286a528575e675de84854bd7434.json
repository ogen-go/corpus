{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/confluentinc/schema-registry"
		},
		"file": {
			"name": "schema-registry-api-spec.yaml",
			"size": 0,
			"path": "core/generated/swagger-ui/schema-registry-api-spec.yaml",
			"byteSize": 37867,
			"content": "openapi: 3.0.1\ninfo:\n  title: Confluent Schema Registry\n  version: v1\npaths:\n  /compatibility/subjects/{subject}/versions/{version}:\n    post:\n      summary: Test input schema against a particular version of a subject's schema\n        for compatibility.\n      description: \"the compatibility level applied for the check is the configured\\\n        \\ compatibility level for the subject (http:get:: /config/(string: subject)).\\\n        \\ If this subject's compatibility level was never changed, then the global\\\n        \\ compatibility level applies (http:get:: /config).\"\n      operationId: testCompatibilityBySubjectName\n      parameters:\n      - name: subject\n        in: path\n        description: Subject of the schema version against which compatibility is\n          to be tested\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the subject's schema against which compatibility\\\n          \\ is to be tested. Valid values for versionId are between [1,2^31-1] or\\\n          \\ the string \\\"latest\\\".\\\"latest\\\" checks compatibility of the input schema\\\n          \\ with the last registered schema under the specified subject\"\n        required: true\n        schema:\n          type: string\n      - name: verbose\n        in: query\n        description: Whether to return detailed error messages\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: |-\n            Error code 42201 -- Invalid schema or schema type\n            Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /:\n    get:\n      summary: Schema Registry Root Resource\n      description: The Root resource is a no-op.\n      operationId: get\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n            application/json; qs=0.5:\n              schema:\n                type: string\n    post:\n      operationId: post\n      requestBody:\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/vnd.schemaregistry+json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/octet-stream:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /compatibility/subjects/{subject}/versions:\n    post:\n      summary: \"Test input schema against a subject's schemas for compatibility, based\\\n        \\ on the compatibility level of the subject configured. In other word, it\\\n        \\ will perform the same compatibility check as register for that subject\"\n      description: \"the compatibility level applied for the check is the configured\\\n        \\ compatibility level for the subject (http:get:: /config/(string: subject)).\\\n        \\ If this subject's compatibility level was never changed, then the global\\\n        \\ compatibility level applies (http:get:: /config).\"\n      operationId: testCompatibilityForSubject\n      parameters:\n      - name: subject\n        in: path\n        description: Subject of the schema version against which compatibility is\n          to be tested\n        required: true\n        schema:\n          type: string\n      - name: verbose\n        in: query\n        description: Whether to return detailed error messages\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n        \"422\":\n          description: |-\n            Error code 42201 -- Invalid schema or schema type\n            Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /config:\n    get:\n      summary: Get global compatibility level.\n      operationId: getTopLevelConfig\n      responses:\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update global compatibility level.\n      operationId: updateTopLevelConfig\n      requestBody:\n        description: Config Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n        required: true\n      responses:\n        \"422\":\n          description: Error code 42203 -- Invalid compatibility level\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n    delete:\n      summary: \"Deletes the Global compatibility level config and\\\n              \\ revert to the global default.\"\n      description: \"\"\n      operationId: \"deleteTopLevelConfig\"\n      consumes:\n        - \"application/vnd.schemaregistry.v1+json\"\n        - \"application/vnd.schemaregistry+json\"\n        - \"application/json\"\n        - \"application/octet-stream\"\n      produces:\n        - \"application/vnd.schemaregistry.v1+json\"\n        - \"application/vnd.schemaregistry+json; qs=0.9\"\n        - \"application/json; qs=0.5\"\n      responses:\n        200:\n          description: \"successful operation\"\n          schema:\n            type: \"string\"\n            enum:\n              - \"NONE\"\n              - \"BACKWARD\"\n              - \"BACKWARD_TRANSITIVE\"\n              - \"FORWARD\"\n              - \"FORWARD_TRANSITIVE\"\n              - \"FULL\"\n              - \"FULL_TRANSITIVE\"\n        500:\n          description: \"Error code 50001 -- Error in the backend datastore\"\n  /config/{subject}:\n    get:\n      summary: Get compatibility level for a subject.\n      operationId: getSubjectLevelConfig\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: defaultToGlobal\n        in: query\n        description: Whether to return the global compatibility level if subject compatibility\n          level not found\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update compatibility level for the specified subject.\n      operationId: updateSubjectLevelConfig\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Config Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n        required: true\n      responses:\n        \"422\":\n          description: |-\n            Error code 42203 -- Invalid compatibility level\n            Error code 40402 -- Version not found\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n    delete:\n      summary: Deletes the specified subject-level compatibility level config and\n        revert to the global default.\n      operationId: deleteSubjectConfig\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/json; qs=0.5:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /contexts:\n    get:\n      summary: Get a list of contexts.\n      operationId: listContexts\n      responses:\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /mode:\n    get:\n      summary: Get global mode.\n      operationId: getTopLevelMode\n      responses:\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update global mode.\n      operationId: updateTopLevelMode\n      parameters:\n      - name: force\n        in: query\n        description: Whether to force update if setting mode to IMPORT and schemas\n          currently exist\n        schema:\n          type: boolean\n      requestBody:\n        description: Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n        required: true\n      responses:\n        \"422\":\n          description: |-\n            Error code 42204 -- Invalid mode\n            Error code 42205 -- Operation not permitted\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n            Error code 50004 -- Unknown leader\n  /mode/{subject}:\n    get:\n      summary: Get mode for a subject.\n      operationId: getMode\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: defaultToGlobal\n        in: query\n        description: Whether to return the global mode if subject mode not found\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update mode for the specified subject.\n      operationId: updateMode\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: force\n        in: query\n        description: Whether to force update if setting mode to IMPORT and schemas\n          currently exist\n        schema:\n          type: boolean\n      requestBody:\n        description: Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n        required: true\n      responses:\n        \"422\":\n          description: |-\n            Error code 42204 -- Invalid mode\n            Error code 42205 -- Operation not permitted\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n            Error code 50004 -- Unknown leader\n    delete:\n      summary: Deletes the specified subject-level mode and revert to the global default.\n      operationId: deleteSubjectMode\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n                enum:\n                - READWRITE\n                - READONLY\n                - READONLY_OVERRIDE\n                - IMPORT\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n                enum:\n                - READWRITE\n                - READONLY\n                - READONLY_OVERRIDE\n                - IMPORT\n            application/json; qs=0.5:\n              schema:\n                type: string\n                enum:\n                - READWRITE\n                - READONLY\n                - READONLY_OVERRIDE\n                - IMPORT\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /schemas:\n    get:\n      summary: Get the schemas.\n      operationId: getSchemas\n      parameters:\n      - name: subjectPrefix\n        in: query\n        description: Filters results by the respective subject prefix\n        schema:\n          type: string\n          default: \"\"\n      - name: deleted\n        in: query\n        description: Whether to return soft deleted schemas\n        schema:\n          type: boolean\n          default: false\n      - name: latestOnly\n        in: query\n        description: Whether to return latest schema versions only for each matching\n          subject\n        schema:\n          type: boolean\n          default: false\n      - name: offset\n        in: query\n        description: Pagination offset for results\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - name: limit\n        in: query\n        description: Pagination size for results. Ignored if negative\n        schema:\n          type: integer\n          format: int32\n          default: -1\n      responses:\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}:\n    get:\n      summary: Get the schema string identified by the input ID.\n      operationId: getSchema\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Name of the subject\n        schema:\n          type: string\n      - name: format\n        in: query\n        description: \"Desired output format, dependent on schema type\"\n        schema:\n          type: string\n          default: \"\"\n      - name: fetchMaxId\n        in: query\n        description: Whether to fetch the maximum schema identifier that exists\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}/subjects:\n    get:\n      summary: Get all the subjects associated with the input ID.\n      operationId: getSubjects\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Filters results by the respective subject\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include subjects where the schema was deleted\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}/versions:\n    get:\n      summary: Get all the subject-version pairs associated with the input ID.\n      operationId: getVersions\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Filters results by the respective subject\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include subject versions where the schema was deleted\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/types:\n    get:\n      summary: Get the schema types supported by this registry.\n      operationId: getSchemaTypes\n      responses:\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /subjects:\n    get:\n      summary: Get a list of registered subjects.\n      operationId: list\n      parameters:\n      - name: subjectPrefix\n        in: query\n        schema:\n          type: string\n          default: ':*:'\n      - name: deleted\n        in: query\n        schema:\n          type: boolean\n      responses:\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /subjects/{subject}:\n    post:\n      summary: \"Check if a schema has already been registered under the specified\\\n        \\ subject. If so, this returns the schema string along with its globally unique\\\n        \\ identifier, its version under this subject and the subject name.\"\n      operationId: lookUpSchemaUnderSubject\n      parameters:\n      - name: subject\n        in: path\n        description: Subject under which the schema will be registered\n        required: true\n        schema:\n          type: string\n      - name: normalize\n        in: query\n        description: Whether to lookup the normalized schema\n        schema:\n          type: boolean\n      - name: deleted\n        in: query\n        description: Whether to lookup deleted schemas\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Schema'\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: Internal server error\n    delete:\n      summary: Deletes the specified subject and its associated compatibility level\n        if registered. It is recommended to use this API only when a topic needs to\n        be recycled or in development environment.\n      operationId: deleteSubject\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: permanent\n        in: query\n        description: Whether to perform a permanent delete\n        schema:\n          type: boolean\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /subjects/{subject}/versions:\n    get:\n      summary: Get a list of versions registered under the specified subject.\n      operationId: listVersions\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schemas\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    post:\n      summary: \"Register a new schema under the specified subject. If successfully\\\n        \\ registered, this returns the unique identifier of this schema in the registry.\\\n        \\ The returned identifier should be used to retrieve this schema from the\\\n        \\ schemas resource and is different from the schema's version which is associated\\\n        \\ with the subject. If the same schema is registered under a different subject,\\\n        \\ the same identifier will be returned. However, the version of the schema\\\n        \\ may be different under different subjects.\\nA schema should be compatible\\\n        \\ with the previously registered schema or schemas (if there are any) as per\\\n        \\ the configured compatibility level. The configured compatibility level can\\\n        \\ be obtained by issuing a GET http:get:: /config/(string: subject). If that\\\n        \\ returns null, then GET http:get:: /config\\nWhen there are multiple instances\\\n        \\ of Schema Registry running in the same cluster, the schema registration\\\n        \\ request will be forwarded to one of the instances designated as the primary.\\\n        \\ If the primary is not available, the client will get an error code indicating\\\n        \\ that the forwarding has failed.\"\n      operationId: register\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: normalize\n        in: query\n        description: Whether to register the normalized schema\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n        \"409\":\n          description: Incompatible schema\n        \"422\":\n          description: Error code 42201 -- Invalid schema or schema type\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50002 -- Operation timed out\n            Error code 50003 -- Error while forwarding the request to the primary\n  /subjects/{subject}/versions/{version}:\n    get:\n      summary: Get a specific version of the schema registered under this subject.\n      operationId: getSchemaByVersion\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schema\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    delete:\n      summary: \"Deletes a specific version of the schema registered under this subject.\\\n        \\ This only deletes the version and the schema ID remains intact making it\\\n        \\ still possible to decode data using the schema ID. This API is recommended\\\n        \\ to be used only in development environments or under extreme circumstances\\\n        \\ where-in, its required to delete a previously registered schema for compatibility\\\n        \\ purposes or re-register previously registered schema.\"\n      operationId: deleteSchemaVersion\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: permanent\n        in: query\n        description: Whether to perform a permanent delete\n        schema:\n          type: boolean\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: integer\n                format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: integer\n                format: int32\n            application/json; qs=0.5:\n              schema:\n                type: integer\n                format: int32\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /subjects/{subject}/versions/{version}/referencedby:\n    get:\n      summary: Get the schemas that reference the specified schema.\n      operationId: getReferencedBy\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      responses:\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /subjects/{subject}/versions/{version}/schema:\n    get:\n      summary: Get the schema for the specified version of this subject. The unescaped\n        schema only is returned.\n      operationId: getSchemaOnly\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schema\n        schema:\n          type: boolean\n      responses:\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /v1/metadata/id:\n    get:\n      summary: Get the server metadata\n      operationId: getClusterId\n      responses:\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\ncomponents:\n  schemas:\n    CompatibilityCheckResponse:\n      type: object\n      properties:\n        is_compatible:\n          type: boolean\n        messages:\n          type: array\n          items:\n            type: string\n    RegisterSchemaRequest:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int32\n        id:\n          type: integer\n          format: int32\n        schemaType:\n          type: string\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        schema:\n          type: string\n    SchemaReference:\n      type: object\n      properties:\n        name:\n          type: string\n        subject:\n          type: string\n        version:\n          type: integer\n          format: int32\n    Config:\n      type: object\n      properties:\n        compatibilityLevel:\n          type: string\n          description: Compatability Level\n          enum:\n          - \"BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\\\n            \\ NONE\"\n    ConfigUpdateRequest:\n      type: object\n      properties:\n        compatibility:\n          type: string\n          description: Compatability Level\n          enum:\n          - \"BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\\\n            \\ NONE\"\n    Mode:\n      type: object\n      properties:\n        mode:\n          type: string\n    ModeUpdateRequest:\n      type: object\n      properties:\n        mode:\n          type: string\n    SchemaString:\n      type: object\n      properties:\n        schemaType:\n          type: string\n          description: Schema type\n        schema:\n          type: string\n          description: Schema string identified by the ID\n        references:\n          type: array\n          description: Schema references\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        maxId:\n          type: integer\n          description: Maximum ID\n          format: int32\n    Schema:\n      type: object\n      properties:\n        subject:\n          type: string\n        version:\n          type: integer\n          format: int32\n        id:\n          type: integer\n          format: int32\n        schemaType:\n          type: string\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        schema:\n          type: string\n    SubjectVersion:\n      type: object\n      properties:\n        subject:\n          type: string\n        version:\n          type: integer\n          format: int32\n    ServerClusterId:\n      type: object\n      properties:\n        scope:\n          type: object\n          additionalProperties:\n            type: object\n        id:\n          type: string\n    RegisterSchemaResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n"
		}
	},
	"Error": "buildIR: make ir: path \"/config/{subject}\": put: requestBody: contents: application/octet-stream: octet stream with \"object\" schema not supported"
}