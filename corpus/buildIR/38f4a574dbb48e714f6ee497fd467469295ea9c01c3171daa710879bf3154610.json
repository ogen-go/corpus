{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alyf-de/frappe_api-docs"
		},
		"file": {
			"name": "open-api-3.yaml",
			"size": 0,
			"path": "open-api-3.yaml",
			"byteSize": 12705,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    Unofficial documentation of the [Frappe](https://frappe.io) / [ERPNext](https://erpnext.org) API.\n  version: \"0.0.1\"\n  title: Frappe / ERPNext API\n  contact:\n    name: Raffael Meyer\n    url: https://alyf.de\n    email: raffael@alyf.de\n  license:\n    name: GPL-3.0\nservers:\n- url: https://demo.erpnext.com/api\n  description: Demo server\n- url: https://{company}.erpnext.com/api\n  description: Custom ERPNext.com instance\n  variables:\n    company:\n      default: demo\n      description: Subdomain of your company's custom ERPNext instance\ntags: \n  - name: Naive Authentication\n    description: If you are developing something serious, you may want to use oAuth2.\npaths:\n  /method/login:\n    post:\n      tags: \n        - Naive Authentication\n      summary: Authenticate yourself\n      operationId: login\n      parameters:\n        - in: query\n          name: usr\n          schema:\n            type: string\n            example: Administrator\n          required: false\n          description: Your username\n        - in: query\n          name: pwd\n          schema:\n            type: string\n            example: admin\n          required: false\n          description: Your password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                usr:\n                  type: string\n                  example: Administrator\n                pwd:\n                  type: string\n                  example: admin\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                data:\n                  type: object\n      responses:\n        '200':\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  full_name:\n                    type: string\n                    example: Administrator\n                  message:\n                    type: string\n                    example: Logged in\n                  home_page:\n                    type: string\n                    example: /desk\n        '401':\n          description: oneOf(Incomplete login details, Incorrect password, User disabled or missing)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  exc:\n                    type: string\n                    example: Traceback (most recent call last) ...\n                  message:\n                    type: string\n                    example: Incorrect password\n            text/html:\n              schema:\n                type: string\n  /method/logout:\n    get:\n      tags: \n        - Naive Authentication\n      summary: Logout from current session\n      responses:\n          '200':\n            description: Logged out.\n            content:\n              application/json:\n                schema:\n                  type: object\n  /method/frappe.auth.get_logged_user:\n    get:\n      tags: \n        - Naive Authentication\n      summary: Get the user that is logged in\n      operationId: authGetLoggedUser\n      description: Get the currently logged in user\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: demo@erpnext.com\n        '401':\n          description: Not permitted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  exc:\n                    type: string\n                    example: Traceback (most recent call last) ...\n                  _server_messages:\n                    type: string\n                    example: \"[{\\\"message\\\": \\\"Not permitted\\\"}]\"\n            text/html:\n              schema:\n                type: string\n  /method/version:\n    get:\n      summary: Get the version of the app\n      responses:\n          '200':\n            description: Successful\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    message:\n                      type: string\n                      example: \"10.1.36\"\n  /resource/{DocType}:\n    post:\n      summary: Create a new document\n      parameters:\n        - in: path\n          name: DocType\n          required: true\n          schema:\n            type: string\n            example: Customer\n          description: |\n            The DocType you'd like to receive. For example, Customer.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                data:\n                  type: object\n      responses:\n        \"200\":\n          description: Document created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DocType'\n        \"403\":\n          description: Insufficient Permission\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  exc:\n                    type: string\n                    example: Traceback (most recent call last) ...\n                  _error_message:\n                    type: string\n                    example: Insufficient Permission for {DocType}\n            text/html:\n              schema:\n                type: string\n    get:\n      summary: Get a list of documents\n      description: Returns a list of documents of the given type\n      parameters:\n        - in: path\n          name: DocType\n          required: true\n          schema:\n            type: string\n          description: |\n            The DocType you'd like to receive. For example Customer, Supplier, \n            Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.\n        - in: query\n          name: fields\n          schema:\n            type: array\n            items:\n              type: string\n            default: [\"name\"]\n          description: |\n            By default, only the \"name\" field is included in the listing, to add more fields, \n            you can pass the fields param to GET request. For example, fields=[\"name\",\"country\"]\n        - in: query\n          name: filters\n          schema:\n            type: array\n            items:\n              type: array\n              items:\n                type: string\n          description: |\n            You can filter the listing using sql conditions by passing them as the filters GET param.\n            Each condition is an array of the format, [{doctype}, {field}, {operator}, {value}].\n            For example, filters=[[\"Customer\", \"country\", \"=\", \"India\"]]\n        - in: query\n          name: limit_page_length\n          schema:\n            type: integer\n            default: 20\n          description: |\n            By default, all listings are returned paginated. With this parameter you can change the \n            page size (how many items are teturned at once).\n        - in: query\n          name: limit_start\n          schema:\n            type: integer\n            default: 0\n          description: |\n            To request successive pages, pass a multiple of your limit_page_length as limit_start. \n            For Example, to request the second page, pass limit_start as 20.\n      responses:\n        '200':\n          description: |\n            Found requested DocType. By default, only the \"name\" field is included in the listing, \n            to add more fields, you can pass the fields param to GET request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocList'\n  /resource/{DocType}/{DocumentName}:\n    get:\n      summary: Get a specific document\n      description: Get a document by it's name, for example EMP001 of DocType Employee.\n      parameters:\n        - in: path\n          name: DocType\n          required: true\n          schema:\n            type: string\n          description: |\n            The DocType you'd like to receive. For example Customer, Supplier, \n            Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.\n        - in: path\n          name: DocumentName\n          required: true\n          schema:\n            type: string\n          description: |\n            The name (ID) of the document you'd like to receive. For example EMP001 (of type Employee).\n      responses:\n        '200':\n          description: Found requested document\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                 data:\n                  $ref: '#/components/schemas/DocType'\n    put:\n      summary: Update a specific document\n      description: TBD\n      parameters:\n        - in: path\n          name: DocType\n          required: true\n          schema:\n            type: string\n          description: |\n            The DocType you'd like to update. For example Customer, Supplier, \n            Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.\n        - in: path\n          name: DocumentName\n          required: true\n          schema:\n            type: string\n          description: |\n            The name (ID) of the document you'd like to update. For example EMP001 (of type Employee).\n      responses:\n        '200':\n          description: Updated specified document\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                 data:\n                  $ref: '#/components/schemas/DocType'\n    delete:\n      summary: Delete a specific document\n      description: TBD\n      parameters:\n        - in: path\n          name: DocType\n          required: true\n          schema:\n            type: string\n          description: |\n            The type of the document you'd like to delete. For example Customer, Supplier, \n            Employee, Account, Lead, Company, Sales Invoice, Purchase Invoice, Stock Entry, etc.\n        - in: path\n          name: DocumentName\n          required: true\n          schema:\n            type: string\n          description: |\n            The name (ID) of the document you'd like to delete. For example EMP001 (of type Employee).\n      responses:\n        '202':\n          description: Deleted specified document\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\ncomponents:\n  schemas:\n    DocType:\n      type: object\n      properties:\n        name:\n          type: string\n        modified_by:\n          type: string\n        creation:\n          type: string\n        modified:\n          type: string\n        doctype:\n          type: string\n        owner:\n          type: string\n        docstatus:\n          type: integer\n    DocList:\n      type: object\n      properties:\n       data:\n        type: array\n        items:\n          $ref: '#/components/schemas/DocType'\n  securitySchemes:\n    tokenAuth: # arbitrary name\n      type: apiKey\n      in: header\n      name: Authorization\n      description: |\n        Get your API keys at User -\u003e Api Access -\u003e Generate Keys.\n        \"headers = {'Authorization': 'token \u003capi_key\u003e:\u003capi_secret\u003e'}\"\n    basicAuth: # arbitrary name\n      type: http\n      description: |\n        Get your API keys at User -\u003e Api Access -\u003e Generate Keys.\n        username = api_key; password = api_secret\n        [More info](https://frappe.io/docs/user/en/guides/integration/token_based_auth)\n      scheme: basic\n    oAuth2: # arbitrary name\n      type: oauth2\n      description: |\n        This API uses OAuth 2 with the authorization code flow. \n        [More info]https://frappe.io/docs/user/en/guides/integration/using_oauth)\n      flows:\n        authorizationCode:\n          authorizationUrl: /method/frappe.integrations.oauth2.authorize\n          tokenUrl: /method/frappe.integrations.oauth2.get_token\n          refreshUrl: /method/frappe.integrations.oauth2.get_token\n          scopes:\n            all: Same permissions as the user who created the oAuth client"
		}
	},
	"Error": "buildIR: make ir: path \"/resource/{DocType}\": get: parameters: fail: \"filters\": nested arrays not allowed",
	"NotImplemented": [
		"complex form schema"
	]
}