{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/craftercms/studio"
		},
		"file": {
			"name": "studio-api-2.yaml",
			"size": 0,
			"path": "src/main/api/2/studio-api-2.yaml",
			"byteSize": 299703,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'http://localhost:8080/studio/api/2'\ninfo:\n  description: |-\n    Crafter Studio API v2\n  version: '4.0.1.0'\n  title: Crafter Studio\n  termsOfService: ''\n  contact:\n    email: info@craftercms.org\n  license:\n    name: GPL 3.0\n    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'\nexternalDocs:\n  description: CrafterCMS - Studio\n  url: 'https://docs.craftercms.org/en/3.1/developers/projects/studio/index.html'\ntags:\n  - name: groups\n    description: Group management operations\n  - name: users\n    description: User management operations\n  - name: ui\n    description: UI support operations\n  - name: aws\n    description: AWS operations\n  - name: cluster\n    description: Cluster management operations\n  - name: sites\n    description: Site management operations\n  - name: search\n    description: Search operations\n  - name: audit\n    description: Audit log operations\n  - name: monitoring\n    description: Monitoring operations\n  - name: cmis\n    description: CMIS operations\n  - name: repository\n    description: Repository operations\n  - name: content\n    description: Content operations\n  - name: configuration\n    description: Configuration operations\n  - name: plugin\n    description: Plugin operations\n  - name: dependency\n    description: Dependencies operations\n  - name: marketplace\n    description: Marketplace operations\n  - name: webdav\n    description: WebDAV operations\n  - name: publishing\n    description: Publishing operations\n  - name: security\n    description: Security operations\n  - name: dashboard\n    description: Dashboard operations\n  - name: translation\n    description: Translation operations\n  - name: workflow\n    description: Workflow operations\n  - name: tasks\n    description: tasks operations\n  - name: loggers\n    description: Logger configuration operations\n\npaths:\n\n  /groups:\n    get:\n      tags:\n        - groups\n      summary: Get all groups\n      operationId: getGroups\n      description: 'Required Permission: \"READ_GROUPS\"'\n      parameters:\n        - name: keyword\n          in: query\n          description: The keyword to filter groups\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Offset of first group in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of groups to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: |-\n            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by\n            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - groups\n      summary: Create group\n      description: 'Required Permission: \"CREATE_GROUPS\"'\n      operationId: createGroup\n      requestBody:\n        description: Group entity to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  group:\n                    $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      tags:\n        - groups\n      summary: Update group\n      description: 'Required Permission: \"UPDATE_GROUPS\"'\n      operationId: updateGroup\n      requestBody:\n        description: Group entity to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  group:\n                    $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - groups\n      summary: Delete group(s)\n      description: 'Required Permission: \"DELETE_GROUPS\"'\n      operationId: deleteGroup\n      parameters:\n        - name: id\n          in: query\n          description: The group ID(s). Can be repeated for multiple deletes (id=1\u0026id=2\u0026id=3)\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /groups/{id}:\n    get:\n      tags:\n        - groups\n      summary: Get group by ID\n      description: 'Required Permission: \"READ_GROUPS\"'\n      operationId: getGroup\n      parameters:\n        - name: id\n          in: path\n          description: The group ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  group:\n                    $ref: '#/components/schemas/Group'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /groups/{id}/members:\n    get:\n      tags:\n        - groups\n      summary: Get all the members of the specified group\n      description: 'Required Permission: \"READ_GROUPS\"'\n      operationId: getGroupMembers\n      parameters:\n        - name: id\n          in: path\n          description: The group ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: offset\n          in: query\n          description: Offset of first record in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: |-\n            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by\n            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - groups\n      summary: Add member(s) to the specified group\n      description: 'Required Permission: \"UPDATE_GROUPS\"'\n      operationId: addGroupMembers\n      parameters:\n        - name: id\n          in: path\n          description: The group ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: List of user IDs and/or usernames to add\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: string\n                usernames:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - groups\n      summary: |-\n        Remove member(s) from the specified group\n      description: 'Required Permission: \"DELETE_GROUPS\"'\n      operationId: removeGroupMembers\n      parameters:\n        - name: id\n          in: path\n          description: The group ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: userId\n          in: query\n          description: The user ID(s) to remove. Can be repeated for multiple deletes (userId=1\u0026userId=2\u0026userId=3)\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: username\n          in: query\n          description: The username(s) to remove. Can be repeated for multiple deletes (username=john\u0026username=mark)\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get all users\n      description: 'Required Permission: \"READ_USERS\"'\n      operationId: getUsers\n      parameters:\n        - name: site\n          in: query\n          description: The site ID to filter users for a particular site\n          required: false\n          schema:\n            type: string\n        - name: keyword\n          in: query\n          description: The keyword to filter users\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Offset of first record in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: |-\n            The fields to use for sorting, plus the `asc` or `desc` keyword. Multiple fields are separated by\n            commas. Finally, the value should match the following regex: `([a-zA-Z_][a-zA-Z_0-9]*,?)+ (asc|desc)`?\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - users\n      summary: Create user\n      description: 'Required Permission: \"CREATE_USERS\"'\n      operationId: createUser\n      requestBody:\n        description: User entity to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  users:\n                    $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      tags:\n        - users\n      summary: Update user\n      description: 'Required Permission: \"UPDATE_USERS\"'\n      operationId: updateUser\n      requestBody:\n        description: User entity to update. The `password`, `externallyManaged` and `username` fields will be ignored if sent.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  user:\n                    $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - users\n      summary: Delete user(s)\n      description: 'Required Permission: \"DELETE_USERS\"'\n      operationId: deleteUser\n      parameters:\n        - name: id\n          in: query\n          description: The user ID(s). Can be repeated for multiple deletes (id=1\u0026id=2\u0026id=3)\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: username\n          in: query\n          description: The username(s). Can be repeated for multiple deletes (username=john\u0026username=mark)\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/{id}:\n    get:\n      tags:\n        - users\n      summary: Get user by user ID or username\n      description: 'Required Permission: \"READ_USERS\"'\n      operationId: getUser\n      parameters:\n        - name: id\n          in: path\n          description: The user ID. Username can also be used\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  user:\n                    $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/enable:\n    patch:\n      tags:\n        - users\n      summary: Enable user(s)\n      description: 'Required Permission: \"UPDATE_USERS\"'\n      operationId: enableUser\n      requestBody:\n        description: List of user IDs and/or usernames to enable\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: string\n                usernames:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/disable:\n    patch:\n      tags:\n        - users\n      summary: Disable user(s)\n      description: 'Required Permission: \"UPDATE_USERS\"'\n      operationId: disableUser\n      requestBody:\n        description: List of user IDs and/or usernames to disable\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: string\n                usernames:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/{id}/sites:\n    get:\n      tags:\n        - users\n      summary: Get all the sites the specified user has access to\n      description: 'Required Permission: \"READ_USERS\"'\n      operationId: getUserSites\n      parameters:\n        - name: id\n          in: path\n          description: The user ID. Username can also be used\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Offset of first site in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of sites to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  sites:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Site'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/{id}/sites/{site}/roles:\n    get:\n      tags:\n        - users\n      summary: Get the site roles for the specified user\n      description: 'Required Permission: \"READ_USERS\"'\n      operationId: getUserSiteRoles\n      parameters:\n        - name: id\n          in: path\n          description: The user ID. Username can also be used\n          required: true\n          schema:\n            type: string\n        - name: site\n          in: path\n          description: The site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  roles:\n                    type: array\n                    items:\n                      type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/{id}/reset_password:\n    post:\n      tags:\n        - users\n      summary: Change password for user\n      description: 'Required Permission: \"UPDATE_USERS\"'\n      operationId: setUserPassword\n      parameters:\n        - name: id\n          in: path\n          description: The user ID. Username can also be used\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: request body to change password\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                new:\n                  type: string\n                  description: new password\n              required:\n                - username\n                - new\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/set_password:\n    post:\n      tags:\n        - users\n      summary: Change password for user\n      description: 'Required Permission: \"ANONYMOUS\"'\n      operationId: settUserPassword\n      requestBody:\n        description: request body to change password\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                new:\n                  type: string\n                  description: new password\n              required:\n                - token\n                - new\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  user:\n                    $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me:\n    get:\n      tags:\n        - users\n      summary: Get current authenticated user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: getCurrentUser\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  authenticatedUser:\n                    $ref: '#/components/schemas/AuthenticatedUser'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/sites:\n    get:\n      tags:\n        - users\n      summary: Get all the sites the current authenticated user has access to\n      description:  'Required Permission: \"LOGGED_IN\"'\n      operationId: getCurrentUserSites\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  sites:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Site'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/sites/{site}/roles:\n    get:\n      tags:\n        - users\n      summary: Get the site roles for the current authenticated user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: getCurrentUserSiteRoles\n      parameters:\n        - name: site\n          in: path\n          description: The site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  roles:\n                    type: array\n                    items:\n                      type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/sites/{site}/permissions:\n    get:\n      tags:\n        - users\n      summary: Get the site permissions for the current authenticated user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: getCurrentUserSitePermissions\n      parameters:\n        - name: site\n          in: path\n          description: The site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  'permissions':\n                    type: array\n                    items:\n                      type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/sites/{site}/has_permissions:\n    post:\n      tags:\n        - users\n      summary: Check if the current authenticated user has given permissions\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: hasCurrentUserSitePermissions\n      parameters:\n        - name: site\n          in: path\n          description: The site ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: request body to check if current authenticated user has permissions\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'permissions':\n                  type: array\n                  items:\n                    type: string\n              required:\n                - permissions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  'permissions':\n                    type: object\n                    example:\n                      create: true\n                      update: true\n                      delete: false\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/global/permissions:\n    get:\n      tags:\n        - users\n      summary: Get the global for the current authenticated user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: getCurrentUserGlobalPermissions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  'permissions':\n                    type: array\n                    items:\n                      type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/global/has_permissions:\n    post:\n      tags:\n        - users\n      summary: Check if the current authenticated user has given global permissions\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: hasCurrentUserGlobalPermissions\n      requestBody:\n        description: request body to check if current authenticated user has permissions\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                'permissions':\n                  type: array\n                  items:\n                    type: string\n              required:\n                - permissions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  'permissions':\n                    type: object\n                    example:\n                      create: true\n                      update: true\n                      delete: false\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/logout/sso/url:\n    get:\n      tags:\n        - users\n      summary: Get the SSO Service Provide logout URL for the current authenticated user\n      description: |-\n        * Required Permission: \"LOGGED_IN\"\n        * The system should redirect to this logout URL `AFTER` local logout. Response entity can be null if user is\n        not authenticated through SSO or if logout is disabled\n      operationId: getCurrentUserSsoLogoutUrl\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  logoutUrl:\n                    type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/change_password:\n    post:\n      tags:\n        - users\n      summary: Change password for current user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: currentUserChangePassword\n      requestBody:\n        description: request body to change password\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                current:\n                  type: string\n                  description: current password\n                new:\n                  type: string\n                  description: new password\n              required:\n                - username\n                - current\n                - new\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  user:\n                    $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/me/properties:\n    get:\n      tags:\n        - users\n      summary: Retrieve properties for the current user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: getUserProperties\n      parameters:\n        - name: siteId\n          schema:\n            type: string\n          in: query\n          description: The id of the site (defaults to global)\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  properties:\n                    type: object\n                    additionalProperties:\n                      type: object\n                      additionalProperties:\n                        type: string\n                    description: The properties of the current user grouped by site\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - users\n      summary: Update properties for the current user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: updateUserProperties\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site (defaults to global)\n                properties:\n                  type: object\n                  additionalProperties:\n                    type : string\n                  description: Properties to update or add\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  properties:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    description: |-\n                      The properties of the current user after the updates\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - users\n      summary: Delete properties for the current user\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: deleteUserProperties\n      parameters:\n        - name: siteId\n          in: query\n          schema:\n            type: string\n          description: The id of the site (defaults to global)\n        - name: properties\n          in: query\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          description: List of keys to delete\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  properties:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    description: |-\n                      The properties of the current user after the updates\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/forgot_password:\n    get:\n      tags:\n        - users\n      summary: Forgot password\n      description: 'Required Permission: \"ANONYMOUS\"'\n      operationId: forgotPassword\n      parameters:\n        - name: username\n          in: query\n          description: The username of user that forgot password\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/validate_token:\n    get:\n      tags:\n        - users\n      summary: Validate forgot password token\n      description: 'Required Permission: \"ANONYMOUS\"'\n      operationId: validateToken\n      parameters:\n        - name: token\n          in: query\n          description: forgot password token to be validated\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /ui/views/global_menu:\n    get:\n      tags:\n        - ui\n      summary: Get the global menu items available to the current user\n      operationId: getGlobalMenu\n      description: 'Required Permission: \"LOGGED_IN\"'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  menuItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/MenuItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /ui/system/active_environment:\n    get:\n      tags:\n        - ui\n      summary: Get the current active environment for the system\n      operationId: getActiveEnv\n      description: 'Required Permission: \"LOGGED_IN\"'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  environment:\n                    type: string\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /aws/s3/list:\n    get:\n      tags:\n        - aws\n      summary: Get a list of items from an S3 bucket\n      operationId: listItems\n      description: 'Required Permission: \"S3 Read\"'\n      parameters:\n        - name: siteId\n          in: query\n          description: The site ID\n          required: true\n          schema:\n            type: string\n        - name: profileId\n          in: query\n          description: The profile ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: The path of the directory to list (defaults to the root)\n          required: false\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The type of items to list (defaults to all types)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/S3Item'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /aws/s3/upload:\n    post:\n      tags:\n        - aws\n      summary: Upload a file to an S3 bucket\n      operationId: uploadItem\n      description: 'Required Permission: \"S3 Write\"'\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The site ID\n                profileId:\n                  type: string\n                  description: The profile ID\n                path:\n                  type: string\n                  description: The path where the file will be uploaded (will be used as part of the key in S3)\n                filename:\n                  type: string\n                  description: The name of the file (will be used as part of the item key in S3)\n                file:\n                  type: string\n                  format: binary\n                  description: The content of the file to upload\n              required:\n                - siteId\n                - profileId\n                - filename\n                - file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    $ref: '#/components/schemas/S3Item'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /aws/mediaconvert/upload:\n    post:\n      tags:\n        - aws\n      summary: Upload a file to an S3 bucket and trigger a MediaConvert job\n      operationId: uploadVideo\n      description: 'Required Permission: \"S3 Write\"'\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The site ID\n                inputProfileId:\n                  type: string\n                  description: The MediaConvert profile ID\n                outputProfileId:\n                  type: string\n                  description: The S3 profile ID for the generated URLs\n                file:\n                  type: string\n                  format: binary\n                  description: The content of the file to upload\n              required:\n                - siteId\n                - inputProfileId\n                - outputProfileId\n                - file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    $ref: '#/components/schemas/MediaConvertResult'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /webdav/list:\n    get:\n      tags:\n        - webdav\n      summary: Get a list of items from a WebDAV server\n      description: 'Required Permission: \"webdav_read\"'\n      operationId: listItemsWebdav\n      parameters:\n        - name: siteId\n          in: query\n          description: The site ID\n          required: true\n          schema:\n            type: string\n        - name: profileId\n          in: query\n          description: The profile ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: The path of the directory to list (defaults to the root)\n          required: false\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The type of items to list, defaults to all (possible values are 'image' and 'video')\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/WebDavItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /webdav/upload:\n    post:\n      tags:\n        - webdav\n      summary: Upload a file to a WebDAV server\n      description: 'Required Permission: \"webdav_write\"'\n      operationId: uploadItemWebdav\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The site ID\n                profileId:\n                  type: string\n                  description: The profile ID\n                path:\n                  type: string\n                  description: The path where the file will be uploaded\n                file:\n                  type: string\n                  format: binary\n                  description: The content of the file to upload\n              required:\n                - siteId\n                - profileId\n                - file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    $ref: '#/components/schemas/WebDavItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /cluster:\n    get:\n      tags:\n        - cluster\n      summary: Get all the members of the cluster\n      description: 'Required Permission: \"READ_CLUSTER\"'\n      operationId: getClusterMembers\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  clusterMembers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ClusterMember'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - cluster\n      summary: Remove member(s) from the cluster\n      description: 'Required Permission: \"DELETE_CLUSTER\"'\n      operationId: removeClusterMembers\n      parameters:\n        - name: id\n          in: query\n          description: The cluster member ID(s). Can be repeated for multiple deletes (id=1\u0026id=2\u0026id=3)\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: object\n                    properties:\n                      response:\n                        $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /sites/available_blueprints:\n    get:\n      tags:\n        - sites\n      summary: Get all available blueprints\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: availableBlueprints\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  blueprints:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginDescriptor'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /sites/create_site_from_marketplace:\n    post:\n      tags:\n        - sites\n      summary: Create a site from a Marketplace blueprint\n      operationId: createSite\n      requestBody:\n        description: The site information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSiteFromMarketplace'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /sites/{siteId}:\n    post:\n      tags:\n        - sites\n      summary: Updates the name and description for a given site\n      description: 'Required Permission: \"EDIT_SITE\"'\n      operationId: updateSite\n      parameters:\n        - name: siteId\n          in: path\n          required: true\n          description: The site ID\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: The name of the site\n                  type: string\n                description:\n                  description: The description of the site\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /sites/{siteId}/policy/validate:\n    post:\n      tags:\n        - sites\n      summary: Verifies if all indicated actions are compliant with the site policies\n      operationId: validate\n      parameters:\n        - name: siteId\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentValidationRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  result:\n                    $ref: '#/components/schemas/ContentValidationResult'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /search/search:\n    post:\n      tags:\n        - search\n      summary: Performs a search for the given site\n      operationId: search\n      parameters:\n        - name: siteId\n          in: query\n          description: The site ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Search Parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchParams'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  result:\n                    $ref: '#/components/schemas/SearchResult'\n\n  /audit:\n    get:\n      tags:\n        - audit\n      summary: Get audit log\n      description: 'Required permission \"AUDIT_LOG\"'\n      operationId: getAuditLog\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID (site identifier) - optional for super admin user, otherwise required\n          required: false\n          schema:\n            type: string\n        - name: siteName\n          in: query\n          description: Site name - optional for super admin user, otherwise required\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Offset of first record in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: user\n          in: query\n          description: Filter log by user name\n          required: false\n          schema:\n            type: string\n        - name: operations\n          in: query\n          description: Filter log by operations\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: includeParameters\n          in: query\n          description: Include parameters into result set if `true`. Default `false`\n          required: false\n          schema:\n            type: boolean\n        - name: dateFrom\n          in: query\n          description: Lower boundary in date range query\n          required: false\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: Upper boundary in date range query\n          required: false\n          schema:\n            type: string\n        - name: target\n          in: query\n          description: Regular expression to filter target values\n          required: false\n          schema:\n            type: string\n        - name: origin\n          in: query\n          description: Origin filter for audit log. Possible values `API` and `GIT`\n          required: false\n          schema:\n            type: string\n        - name: clusterNodeId\n          in: query\n          description: Cluster node id filter for audit log\n          required: false\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: Sort result set by specified field. Possible values `date`.\n          required: false\n          schema:\n            type: string\n        - name: order\n          in: query\n          description: Order in sorted result. Possible values `ASC` and `DESC`\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  auditLog:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AuditLog'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /audit/{id}:\n    get:\n      tags:\n        - audit\n      summary: Get audit log entry\n      operationId: getAuditLogById\n      parameters:\n        - name: id\n          in: path\n          description: The log entry ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  auditLog:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AuditLog'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /monitoring/version:\n    get:\n      tags:\n        - monitoring\n      summary: Get the current version information\n      operationId: getVersion\n      parameters:\n        - name: token\n          in: query\n          description: Management token - not required for authenticated users\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  version:\n                    $ref: '#/components/schemas/VersionItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /monitoring/status:\n    get:\n      tags:\n        - monitoring\n      summary: Get the current status information\n      operationId: getStatus\n      parameters:\n        - name: token\n          in: query\n          description: Management token - not required for authenticated users\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  status:\n                    $ref: '#/components/schemas/StatusItem'\n        '202':\n          description: Replica responding status OK. Primary will respond with status 200\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  status:\n                    $ref: '#/components/schemas/ClusterStatusItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /monitoring/memory:\n    get:\n      tags:\n        - monitoring\n      summary: Get the current memory information\n      operationId: getMemory\n      parameters:\n        - name: token\n          in: query\n          description: Management token - not required for authenticated users\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  memory:\n                    $ref: '#/components/schemas/MemoryItem'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /monitoring/log:\n    get:\n      tags:\n        - monitoring\n      summary: Get the log events for a specific time period\n      operationId: getLogEvents\n      parameters:\n        - name: since\n          in: query\n          description: The time in milliseconds from which events should be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: token\n          in: query\n          description: Management token - not required for authenticated users\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  events:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogEvent'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /cmis/list:\n    get:\n      tags:\n        - cmis\n      summary: List files and folders in a CMIS repository with an optional range for pagination\n      operationId: cmisList\n      description: 'Required permissions: \"list_cmis\"'\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: cmisRepoId\n          in: query\n          description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: path to look under. Note this will be under the `base path` specified in cmis-config.xml\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: start offset\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: number of records to retrieve\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of the first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CmisItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '408':\n          $ref: '#/components/responses/RequestTimeout'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n\n  /cmis/search:\n    get:\n      tags:\n        - cmis\n      summary: Search files and folders in a CMIS repository with an optional range for pagination\n      operationId: cmisSearch\n      description: 'Required permissions: \"search_cmis\"'\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: cmisRepoId\n          in: query\n          description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)\n          required: true\n          schema:\n            type: string\n        - name: searchTerm\n          in: query\n          description: CMIS search term to use\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: path to look under. Note this will be under the `base path` specified in cmis-config.xml\n          required: false\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: start offset\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: number of records to retrieve\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of the first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CmisItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '408':\n          $ref: '#/components/responses/RequestTimeout'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n\n  /cmis/clone:\n    post:\n      tags:\n        - cmis\n      summary: Clone a file from a CMIS repository to Studio provided paths\n      operationId: cmisClone\n      description: 'Required permissions: \"clone_content_cmis\"'\n      requestBody:\n        description: cmis clone request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                cmisRepoId:\n                  type: string\n                  description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)\n                cmisPath:\n                  type: string\n                  description: path to read the asset from CMIS repo (source)\n                studioPath:\n                  type: string\n                  description: path to save the asset in Studio (destination)\n              required:\n                - siteId\n                - cmisRepoId\n                - cmisPath\n                - studioPath\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '408':\n          $ref: '#/components/responses/RequestTimeout'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n\n  /cmis/upload:\n    post:\n      tags:\n        - cmis\n      summary:  Upload an asset file to CMIS repository\n      operationId: cmisUpload\n      description: 'Required permissions: \"upload_content_cmis\"'\n      requestBody:\n        description: cmis upload request body\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                cmisRepoId:\n                  type: string\n                  description: CMIS repository ID as specified in Site Config CMIS Config (cmis-config.xml)\n                cmisPath:\n                  type: string\n                  description: path to upload the asset to CMIS repo (destination)\n                file:\n                  type: string\n                  format: binary\n              required:\n                - siteId\n                - cmisRepoId\n                - cmisPathId\n                - file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        description: filename of the uploaded content\n                      url:\n                        type: string\n                        description: url of uploaded content\n                      folder:\n                        type: boolean\n                        description: true if content is folder\n                      fileExtension:\n                        type: string\n                        description: file extension of uploaded content\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '408':\n          $ref: '#/components/responses/RequestTimeout'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '503':\n          $ref: '#/components/responses/ServiceUnavailable'\n\n  /repository/add_remote:\n    post:\n      tags:\n        - repository\n      summary: Add remote repository to the site content repository\n      description: 'Required permission \"add_remote\"'\n      operationId: addRemoteRepository\n      requestBody:\n        description: Remote repository entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RemoteRepository'\n      responses:\n        '201':\n          description: Added\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/pull_from_remote:\n    post:\n      tags:\n        - repository\n      summary: Pull content from remote repository to site content repository\n      description: 'Required permission \"pull_from_remote\"'\n      operationId: pullFromRemoteRepository\n      requestBody:\n        description: pull from remote repository request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: Site ID\n                remoteName:\n                  type: string\n                  description: Remote repository name to pull from\n                remoteBranch:\n                  type: string\n                  description: Remote repository branch to pull from\n                mergeStrategy:\n                  type: string\n                  format: theirs, ours, none\n                  description: Merge strategy to use when pulling content from remote repository\n              required:\n                - siteId\n                - remoteName\n                - remoteBranch\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  result:\n                    type: object\n                    properties:\n                      successful:\n                        type: boolean\n                        description: Indicates if the pull was successful\n                      commitsMerged:\n                        type: integer\n                        format: int64\n                        description: Total number of commits merged from the remote repository\n                      mergeCommitId:\n                        type: string\n                        description: The merge commit id\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/push_to_remote:\n    post:\n      tags:\n        - repository\n      summary: Push content to remote repository from site content repository\n      description: 'Required permission \"push_to_remote\"'\n      operationId: pushToRemoteRepository\n      requestBody:\n        description: push to remote repository request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: Site ID\n                remoteName:\n                  type: string\n                  description: Remote repository name to push to\n                remoteBranch:\n                  type: string\n                  description: Remote repository branch to push to\n                force:\n                  type: boolean\n                  description: Indicates whether to force push to remote or not\n              required:\n                - siteId\n                - remoteName\n                - remoteBranch\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/rebuild_database:\n    post:\n      tags:\n        - repository\n      summary: Rebuild Crafter Studio’s database and object state with the underlying repository\n      description: 'Required permission \"rebuild_database\"'\n      operationId: rebuildDatabase\n      requestBody:\n        description: rebuild database request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: Site ID\n              required:\n                - siteId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/remove_remote:\n    post:\n      tags:\n        - repository\n      summary: Remove remote repository from site content repository\n      description: 'Required permission \"remove_remote\"'\n      operationId: removeRemoteRepository\n      requestBody:\n        description: remove remote repository request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: Site ID\n                remoteName:\n                  type: string\n                  description: Remote repository name of remote to be removed\n              required:\n                - siteId\n                - remoteName\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/list_remotes:\n    get:\n      tags:\n        - repository\n      summary: List remote repositories for a site\n      description: 'Required permission \"list_remote\"'\n      operationId: listRemoteRepositories\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  remotes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/RemoteRepositoryInfo'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/status:\n    get:\n      tags:\n        - repository\n      summary: Get status of repository for a site\n      description: 'Required permission \"site_status\"'\n      operationId: repositoryStatus\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  repositoryStatus:\n                    $ref: '#/components/schemas/RepositoryStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/resolve_conflict:\n    post:\n      tags:\n        - repository\n      summary: Resolve a conflict for a file by accepting ours or theirs\n      description: 'Required permission \"resolve_conflict\"'\n      operationId: resolveConflict\n      requestBody:\n        description: resolve conflict request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                path:\n                  type: string\n                  description: Conflicted file path\n                resolution:\n                  type: string\n                  description: resolution mechanism to use (ours, theirs)\n              required:\n                - siteId\n                - path\n                - resolution\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  repositoryStatus:\n                    $ref: '#/components/schemas/RepositoryStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/diff_conflicted_file:\n    get:\n      tags:\n        - repository\n      summary: Get the difference between ours and theirs for a conflicted file for a site\n      description: 'Required permission \"site_diff_conflicted_file\"'\n      operationId: diffConflictedFile\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: Path of conflicted file\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  diff:\n                    type: object\n                    properties:\n                      diff:\n                        type: string\n                        description: difference between ours and theirs\n                      studioVersion:\n                        type: string\n                        description: studio's version of the file content\n                      remoteVersion:\n                        type: string\n                        description: remote repository version of the file content\n\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/commit_resolution:\n    post:\n      tags:\n        - repository\n      summary: Commit a resolved set of conflicts for a site\n      description: 'Required permission \"commit_resolution\"'\n      operationId: commitResolution\n      requestBody:\n        description: Commit resolution request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                commit_message:\n                  type: string\n                  description: Commit message\n              required:\n                - siteId\n                - commitMessage\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  repositoryStatus:\n                    $ref: '#/components/schemas/RepositoryStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/cancel_failed_pull:\n    post:\n      tags:\n        - repository\n      summary: Cancel a failed/conflicted pull for a site\n      description: 'Required permission \"cancel_failed_pull\"'\n      operationId: cancelFailedPull\n      requestBody:\n        description: cancel failed pull request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n              required:\n                - siteId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  repositoryStatus:\n                    $ref: '#/components/schemas/RepositoryStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/unlock:\n    post:\n      tags:\n        - repository\n      summary: Unlock local git repository\n      description: 'Required role \"system_admin\" for global, \"admin\" for site sandbox or published'\n      operationId: unlockRepository\n      requestBody:\n        description: Unlock local git repository request\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID, do not send if unlocking the GLOBAL repository\n                repositoryType:\n                  type: string\n                  format: GLOBAL, SANDBOX or PUBLISHED\n              required:\n                - repositoryType\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  repositoryStatus:\n                    $ref: '#/components/schemas/RepositoryStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/corrupted:\n    get:\n      tags:\n        - repository\n      summary: Check if a given repository is corrupted\n      description: 'Required role \"system_admin\" for global, \"admin\" for site sandbox or published'\n      operationId: isRepositoryCorrupted\n      parameters:\n        - name: siteId\n          in: query\n          schema:\n            type: string\n          description: site ID, do not send if checking the GLOBAL repository\n        - name: repositoryType\n          required: true\n          in: query\n          schema:\n            type: string\n            format: GLOBAL, SANDBOX or PUBLISHED\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  corrupted:\n                    type: boolean\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /repository/repair:\n    post:\n      tags:\n        - repository\n      summary: Repair local git repository\n      description: 'Required role \"system_admin\" for global, \"admin\" for site sandbox or published'\n      operationId: repairCorruptedRepository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID, do not send if repairing the GLOBAL repository\n                repositoryType:\n                  type: string\n                  format: GLOBAL, SANDBOX or PUBLISHED\n              required:\n                - repositoryType\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /configuration/get_configuration:\n    get:\n      tags:\n        - configuration\n      summary: Get configuration content for site and configuration location\n      description: 'Required permission \"read_configuration\"'\n      operationId: getConfiguration\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n        - name: module\n          in: query\n          description: Module name (e.g. studio, engine)\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: Configuration file path, relative to /config/\u003cmodule\u003e\n          required: true\n          schema:\n            type: string\n        - name: environment\n          in: query\n          description: environment to use\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  content:\n                    type: string\n                    description: configuration file content\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /configuration/write_configuration:\n    post:\n      tags:\n        - configuration\n      summary: Write configuration content for site\n      description: 'Required permission \"write_configuration\"'\n      operationId: writeConfiguration\n      requestBody:\n        description: write configuration request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                module:\n                  type: string\n                  description: Module name (e.g. studio, engine)\n                path:\n                  type: string\n                  description: Configuration file path, relative to /config/\u003cmodule\u003e\n                environment:\n                  type: string\n                  description: environment to use\n                content:\n                  type: string\n                  description: configuration file content\n              required:\n                - siteId\n                - module\n                - path\n                - content\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /configuration/clear_cache:\n    get:\n      tags:\n        - configuration\n      summary: Clear all configuration cache for a given site\n      description: 'Required Permission: \"LOGGED_IN\"'\n      operationId: clearConfigurationCache\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /configuration/get_configuration_history:\n    get:\n      tags:\n        - configuration\n      summary: Get configuration history for site and configuration location\n      description: 'Required permission \"read_configuration\"'\n      operationId: getConfigurationHistory\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n        - name: module\n          in: query\n          description: Module name (e.g. studio, engine)\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: Configuration file path, relative to /config/\u003cmodule\u003e\n          required: true\n          schema:\n            type: string\n        - name: environment\n          in: query\n          description: environment to use\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  history:\n                    $ref: '#/components/schemas/History'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /configuration/translation:\n    get:\n      tags:\n        - configuration\n      summary: Get translation configuration for a given site\n      operationId: getTranslationConfig\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  config:\n                    $ref: '#/components/schemas/TranslationConfig'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /configuration/content-type/usage:\n    get:\n      tags:\n        - configuration\n      summary: Get all usage of a given content-type\n      operationId: getContentTypeUsage\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: contentType\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  dependencies:\n                    type: object\n                    properties:\n                      templates:\n                        type: array\n                        items:\n                          type: string\n                        description: All templates associated with the given content-type\n                      scripts:\n                        type: array\n                        items:\n                          type: string\n                        description: All scripts associated with the given content-type\n                      content:\n                        type: array\n                        items:\n                          type: string\n                        description: All content types instantiated from the given content-type\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /configuration/content-type/delete:\n    post:\n      tags:\n        - configuration\n      summary: Delete files related to a given content-type\n      operationId: deleteContentType\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site\n                contentType:\n                  type: string\n                  description: The content-type to delete\n                deleteDependencies:\n                  type: boolean\n                  description: Indicates if all dependencies of the content-type should be deleted (defaults to false)\n              required:\n                - siteId\n                - contentType\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n\n  /plugin/file:\n    # Override the server to change the prefix\n    servers:\n      - url: http://localhost:8080/studio/1\n    get:\n      # Override the security because this requires login instead of JWT or Http Basic\n      security: []\n      tags:\n        - plugin\n      summary: Get a file for a given plugin\n      operationId: getPluginFile\n      parameters:\n        - name: siteId\n          in: query\n          description: The site ID\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The plugin type (e.g. control, data-source)\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The plugin name (e.g. custom-input)\n          required: true\n          schema:\n            type: string\n        - name: filename\n          in: query\n          description: The name of the file (e.g. input.js, style/main.css)\n          required: true\n          schema:\n            type: string\n        - name: pluginId\n          in: query\n          description: |-\n            The id of the plugin (e.g. org.craftercms.plugin). This is only needed for plugins installed from the\n            marketplace\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'OK'\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n                description: The content of the file\n          headers:\n            Content-Type:\n              description: The MIME type of the file\n              schema:\n                type: string\n            Content-Length:\n              description: The size in bytes of the file\n              schema:\n                type: integer\n                format: int64\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /plugin/get_configuration:\n    get:\n      tags:\n        - plugin\n      summary: Get configuration for the given site and plugin\n      description: 'Required permission \"site member\"'\n      operationId: getPluginConfiguration\n      parameters:\n        - name: siteId\n          in: query\n          description: The id of the site\n          required: true\n          schema:\n            type: string\n        - name: pluginId\n          in: query\n          description: The id of the plugin\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  content:\n                    type: string\n                    description: configuration file content\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /plugin/write_configuration:\n    post:\n      tags:\n        - plugin\n      summary: Write configuration content a given site and plugin\n      description: 'Required permission \"write_configuration\" and \"site member\"'\n      operationId: writePluginConfiguration\n      requestBody:\n        description: write configuration request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site\n                pluginId:\n                  type: string\n                  description: The id of the plugin\n                content:\n                  type: string\n                  description: configuration file content\n              required:\n                - siteId\n                - pluginId\n                - content\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /plugin/script/reload:\n    get:\n      tags:\n        - plugin\n      summary: Reloads groovy classes for all plugins in a given site\n      operationId: reloadClasses\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n        - name: token\n          in: query\n          description: Management token\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/list_quick_create_content:\n    get:\n      tags:\n        - content\n      summary: Get list of content types available for Quick Create functionality\n      description: 'Required permission \"create content\"'\n      operationId: quickCreateContent\n      parameters:\n        - name: siteId\n          in: query\n          description: Site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/QuickCreateItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/get_delete_package:\n    post:\n      tags:\n        - content\n      summary: Get a list of delete children (will be deleted) and dependent items (will have broken references) for a given list of items to be deleted\n      description: 'Required permission \"delete_content\"'\n      operationId: getDeletePackage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: Site ID\n                  type: string\n                paths:\n                  description: Content paths to get a delete package for\n                  type: array\n                  items:\n                    type: string\n              required:\n                - siteId\n                - paths\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: object\n                    properties:\n                      childItems:\n                        type: array\n                        items:\n                          type: string\n                      dependentItems:\n                        type: array\n                        items:\n                          type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/delete:\n    post:\n      tags:\n        - content\n      summary: Delete content\n      description: 'Required permission \"content_delete\"'\n      operationId: contentDelete\n      requestBody:\n        description: parameters for delete content\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                items:\n                  type: array\n                  description: path(s) of content item(s)\n                  items:\n                    type: string\n                optionalDependencies:\n                  type: array\n                  description: optional (soft) dependencies\n                  items:\n                    type: string\n                comment:\n                  type: string\n                  description: deletion comment by the user performing the delete\n              required:\n                - siteId\n                - items\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/rename:\n    post:\n      tags:\n        - content\n      summary: Rename content\n      description: 'Required permission \"content_write\"'\n      operationId: contentRename\n      requestBody:\n        description: parameters for rename content\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                path:\n                  type: string\n                  description: full path to the item to rename\n                name:\n                  type: string\n                  description: new item name (just the name, no path)\n              required:\n                - siteId\n                - path\n                - name\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/children_by_path:\n    post:\n      tags:\n        - content\n      summary: Get list of children for given item path\n      description: 'Required permission \"get_children\" and \"site member\"'\n      operationId: getChildrenByPath\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: Site ID\n                  type: string\n                path:\n                  description: item path to get children for\n                  type: string\n                localeCode:\n                  description: |-\n                    filter children by locale code, or show source items (not translation) if translation to\n                    specified locale code does not exist\n                  type: string\n                sortStrategy:\n                  description: \u003e-\n                    sort strategy (sort order)\n                    Possible values:\n                      - alphabetical (default)\n                      - foldersFirst (order by: folders alphabetical, files alphabetical)\n                  type: string\n                order:\n                  description: order for sort strategy ascending or descending (ASC / DESC)\n                  type: string\n                  format: ASC, DESC\n                offset:\n                  description: offset of first child in response - default 0\n                  type: integer\n                limit:\n                  description: number of children to return\n                  type: integer\n                keyword:\n                  description: filter children by keyword\n                  type: string\n                systemTypes:\n                  description: filter children by system type\n                  type: array\n                  items:\n                    type: string\n                excludes:\n                  description: exclude items by path\n                  type: array\n                  items:\n                    type: string\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  levelDescriptor:\n                    $ref: '#/components/schemas/SandboxItem'\n                  children:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/item_by_path:\n    get:\n      tags:\n        - content\n      summary: Get item details for given an item path\n      description: 'Required permission \"get_detailed_item\" and \"read_item\" and \"site member\"'\n      operationId: getDetailedItemByPath\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: item path\n          required: true\n          schema:\n            type: string\n        - name: preferContent\n          in: query\n          description: when set to true, return an item instead of a folder if the path can match either\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    $ref: '#/components/schemas/DetailedItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/sandbox_items_by_path:\n    post:\n      tags:\n        - content\n      summary: Get list of items for given item paths\n      description: 'Required permission \"get_children\" and \"site member\"'\n      operationId: getSandboxItemsByPath\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: Site ID\n                  type: string\n                paths:\n                  description: item paths to get\n                  type: array\n                  items:\n                    type: string\n                preferContent:\n                  description: when set to true, return an item instead of a folder if the path can match either\n                  type: boolean\n              required:\n                - siteId\n                - paths\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n                  missingItems:\n                    type: array\n                    items:\n                      type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/descriptor:\n    get:\n      tags:\n        - content\n      summary: Get the XML descriptor for a given path\n      operationId: getDescriptor\n      parameters:\n        - name: siteId\n          in: query\n          description: The site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: The path of the descriptor\n          required: true\n          schema:\n            type: string\n        - name: flatten\n          in: query\n          description: Indicates if included descriptors should be flattened\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  xml:\n                    type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/paste:\n    post:\n      tags:\n        - content\n      summary: |-\n        Paste a tree of items to a target path (copy content or move content).\n        To be used by the UI in the clipboard implementation.\n      description: 'Required permission \"Write\"'\n      operationId: pasteItems\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasteRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    description: The list of pasted items\n                    type: array\n                    items:\n                      type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/duplicate:\n    post:\n      tags:\n        - content\n      summary: Duplicate the given item in the same location\n      description: 'Required permission \"Write\"'\n      operationId: duplicateItem\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site\n                path:\n                  type: string\n                  description: The path of the item to duplicate\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    description: the path of the new item\n                    type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/item_lock_by_path:\n    post:\n      tags:\n        - content\n      summary: Lock item by path\n      description: 'Required permission \"content_write\"'\n      operationId: itemLockByPath\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site\n                path:\n                  type: string\n                  description: Path of item to lock\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          description: Item already locked\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  person:\n                    $ref: '#/components/schemas/Person'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/item_unlock_by_path:\n    post:\n      tags:\n        - content\n      summary: Unlock item by path\n      description: 'Required permission \"item_unlock\" or lock owner'\n      operationId: itemUnlockByPath\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: The id of the site\n                path:\n                  type: string\n                  description: The path of the item to unlock\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          description: Item already unlocked\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /content/get_content_by_commit_id:\n    get:\n      tags:\n        - content\n      summary: Get content for commit id\n      description: 'Required permission \"site member\"'\n      operationId: getContentByCommitId\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: path of the content\n          required: true\n          schema:\n            type: string\n        - name: commitId\n          in: query\n          description: commit id of the content version\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  content:\n                    type: string\n                    description: requested content\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dependency/dependencies:\n    post:\n      tags:\n        - dependency\n      summary: Get list of dependencies for given content paths\n      description: 'Required permission \"site member\"'\n      operationId: getDependencies\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: Site ID\n                  type: string\n                paths:\n                  description: Content paths to get dependencies for\n                  type: array\n                  items:\n                    type: string\n              required:\n                - siteId\n                - paths\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: object\n                    properties:\n                      hardDependencies:\n                        type: array\n                        items:\n                          type: string\n                      softDependencies:\n                        type: array\n                        items:\n                          type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/search:\n    get:\n      tags:\n        - marketplace\n      summary: Search for compatible plugins in the marketplace\n      operationId: searchPlugins\n      parameters:\n        - name: type\n          in: query\n          description: Plugin type to search (e.g. blueprint, control, datasource)\n          schema:\n            type: string\n        - name: keywords\n          in: query\n          description: The keywords to filter plugins\n          schema:\n            type: string\n        - name: showPending\n          description: Include plugins pending of approval (default to false)\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: offset\n          in: query\n          description: Offset for pagination\n          schema:\n            type: integer\n            format: int64\n        - name: limit\n          in: query\n          description: Limit for pagination\n          schema:\n            type: integer\n            format: int64\n        - name: showIncompatible\n          in: query\n          description: Include incompatible plugins (defaults to false)\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  items:\n                    type: array\n                    items:\n                      anyOf:\n                        - $ref: '#/components/schemas/MarketplacePlugin'\n                        - $ref: '#/components/schemas/GitMarketplacePlugin'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/installed:\n    get:\n      tags:\n        - marketplace\n      summary: Get the list of plugins installed in the given site\n      description: 'Required permission \"list_plugins\"'\n      operationId: getInstalledPlugins\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  plugins:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PluginRecord'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/install:\n    post:\n      tags:\n        - marketplace\n      summary: Install a plugin in the given site\n      description: 'Required permission \"install_plugins\"'\n      operationId: installPlugin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: The id of the site\n                  type: string\n                pluginId:\n                  description: The id of the plugin\n                  type: string\n                pluginVersion:\n                  $ref: '#/components/schemas/Version'\n                parameters:\n                  type: object\n                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor\n                  additionalProperties:\n                    type: string\n              required:\n                - siteId\n                - pluginId\n                - pluginVersion\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/copy:\n    post:\n      tags:\n        - marketplace\n      summary: Copy a local plugin to a given site\n      description: 'Required permission \"install_plugins\"'\n      operationId: copyPlugin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: The id of the site\n                  type: string\n                path:\n                  description: The path of the local plugin source folder\n                  type: string\n                parameters:\n                  type: object\n                  description: Object containing all parameters for the plugin. It should include all required parameters from the descriptor\n                  additionalProperties:\n                    type: string\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/remove:\n    post:\n      tags:\n        - marketplace\n      summary: Remove a plugin from the given site\n      description: 'Required permission \"remove_plugins\"'\n      operationId: removePlugin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: The id of the site\n                  type: string\n                pluginId:\n                  description: The id of the plugin\n                  type: string\n                force:\n                  description: Indicates if the plugin should be removed even if there are dependant items\n              required:\n                - siteId\n                - pluginId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /marketplace/usage:\n    get:\n      tags:\n        - marketplace\n      summary: List dependant items for a plugin\n      description: 'Required permission \"remove_plugins\"'\n      operationId: pluginUsage\n      parameters:\n        - name: siteId\n          description: The id of the site\n          schema:\n            type: string\n          required: true\n          in: query\n        - name: pluginId\n          description: The id of the plugin\n          schema:\n            type: string\n          required: true\n          in: query\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/all:\n    post:\n      tags:\n        - publishing\n      summary: Publishes the entire project to the target (staging or live)\n      description: 'Required permission \"Publish\"'\n      operationId: publishAll\n      requestBody:\n        description: publish all request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                publishingTarget:\n                  type: string\n                  description: the publishing target (staging or live)\n                submissionComment:\n                  type: string\n                  description: optional submission comment\n              required:\n                - siteId\n                - publishingTarget\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/packages:\n    get:\n      tags:\n        - publishing\n      summary: Get the list of packages in the publishing queue\n      description: 'Required permission \"get_publishing_queue\"'\n      operationId: PublishingPackages\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: publishingTarget\n          in: query\n          description: filter by publishing target\n          required: false\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: regular expression to filter by path\n          required: false\n          schema:\n            type: string\n        - name: states\n          in: query\n          description: filter by package state(s)\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: offset\n          in: query\n          description: Offset for pagination\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: limit\n          in: query\n          description: Limit for pagination\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  packages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PublishingPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/package:\n    get:\n      tags:\n        - publishing\n      summary: Get package details\n      description: 'Required permission \"get_publishing_queue\"'\n      operationId: getPublishingPackageDetails\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: packageId\n          in: query\n          description: package ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  package:\n                    $ref: '#/components/schemas/PublishingPackageDetails'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/cancel:\n    post:\n      tags:\n        - publishing\n      summary: Cancel publishing packages\n      description: 'Required permission \"cancel_publish\"'\n      operationId: cancelPublishingPackages\n      requestBody:\n        description: cancel publishing packages request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                packageIds:\n                  type: array\n                  description: packageIds\n                  items:\n                    type: string\n              required:\n                - siteId\n                - packageIds\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/status:\n    get:\n      tags:\n        - publishing\n      summary: Get publishing status for site\n      description: 'Required permission \"publish_status\"'\n      operationId: getPublishingStatus\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingStatus:\n                    $ref: '#/components/schemas/PublishingStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/clear_lock:\n    post:\n      tags:\n        - publishing\n      summary: Clear publishing lock for site\n      description: 'Required permission \"publish_clear_lock\"'\n      operationId: clearPublishingLock\n      requestBody:\n        description: clear publishing lock request body\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n              required:\n                - siteId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/history:\n    get:\n      tags:\n        - publishing\n      summary: Get publishing history for site\n      description: 'Required permission \"publish\"'\n      operationId: getPublishingHistory\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: days\n          in: query\n          description: number of days to display history for\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: num\n          in: query\n          description: number of items to fetch\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: filterType\n          in: query\n          description: filter items by type (all, page, component, asset)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingStatus:\n                    $ref: '#/components/schemas/DeploymentHistoryGroup'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /publish/available_targets:\n    get:\n      tags:\n        - publishing\n      summary: Get available publishing targets for site\n      description: 'Required permission \"publish\"'\n      operationId: getAvailablePublishingTargets\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingTargets:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                          description: Target name\n                        order:\n                          type: integer\n                          format: int32\n                          description: order for display in the dropdown\n                  published:\n                    type: boolean\n                    description: true if site has been published at least once (initial publish; published repository exist), otherwise false\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /security/encrypt:\n    post:\n      tags:\n        - security\n      summary: Encrypt a text value\n      operationId: encrypt\n      description: Required permission \"encryption_tool\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n              required:\n                - text\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  item:\n                    type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /security/tokens:\n    get:\n      tags:\n        - security\n      summary: Get all existing tokes for the current user\n      operationId: getAccessTokens\n      description: Required permission \"manage_access_token\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  tokens:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AccessToken'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - security\n      summary: Creates a new access token for the current user\n      operationId: createAccessToken\n      description: Required permission \"manage_access_token\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                label:\n                  type: string\n                  description: The label for the access token\n                expiresAt:\n                  type: string\n                  format: date-time\n                  description: The date of expiration for the access token\n              required:\n                - label\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  token:\n                    $ref: '#/components/schemas/AccessToken'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /security/tokens/{id}:\n    post:\n      tags:\n        - security\n      summary: Updates an access token for the current user\n      operationId: updateAccessToken\n      description: Required permission \"manage_access_token\"\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: integer\n            format: int64\n          description: The id of the access token to update\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n                  description: Indicates if the access token is enabled\n              required:\n                - enabled\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  token:\n                    $ref: '#/components/schemas/AccessToken'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - security\n      summary: Deletes an access token for the current user\n      operationId: deleteAccessToken\n      description: Required permission \"manage_access_token\"\n      parameters:\n       - name: id\n         in: path\n         schema:\n           type: integer\n           format: int64\n         description: The id of the access token to delete\n         required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/activity:\n    get:\n      tags:\n        - dashboard\n      summary: Get user activities\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardActivities\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: usernames\n          in: query\n          description: filter activities for given users only\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: actions\n          in: query\n          description: filter activities for given actions only\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary to filter by date-time range\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: dateTo\n          in: query\n          description: upper boundary to filter by date-time range\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  activities:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Activity'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/activity/me:\n    get:\n      tags:\n        - dashboard\n      summary: Get current user's activities\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardMyActivities\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: actions\n          in: query\n          description: filter activities for given actions only\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary to filter by date-time range\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: dateTo\n          in: query\n          description: upper boundary to filter by date-time range\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  activities:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Activity'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/content/pending_approval:\n    get:\n      tags:\n        - dashboard\n      summary: Get publishing packages that are pending for approval\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardContentPendingApproval\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  publishingPackages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DashboardPublishingPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/content/pending_approval/{id}:\n    get:\n      tags:\n        - dashboard\n      summary: Get content items of the package that is pending for approval\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardContentPendingApprovalDetail\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: package ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingPackageItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/content/unpublished:\n    get:\n      tags:\n        - dashboard\n      summary: Get unpublished items for site\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardContentUnpublished\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  unpublishedItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/publishing/scheduled:\n    get:\n      tags:\n        - dashboard\n      summary: Get scheduled publishing packages\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardPublishingScheduled\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: publishingTarget\n          in: query\n          description: publishing target to filter results\n          required: false\n          schema:\n            type: string\n        - name: approver\n          in: query\n          description: approver user to filter results\n          required: false\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: dateTo\n          in: query\n          description: upper boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  publishingPackages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DashboardPublishingPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/publishing/scheduled/{id}:\n    get:\n      tags:\n        - dashboard\n      summary: Get content items of the package that is scheduled\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardPublishingScheduledDetail\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: package ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingPackageItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/publishing/history:\n    get:\n      tags:\n        - dashboard\n      summary: Get history of published packages\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardPublishingHistory\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: publishingTarget\n          in: query\n          description: publishing target to filter results\n          required: false\n          schema:\n            type: string\n        - name: approver\n          in: query\n          description: approver user to filter results\n          required: false\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: dateTo\n          in: query\n          description: upper boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  publishingPackages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DashboardPublishingPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/publishing/history/{id}:\n    get:\n      tags:\n        - dashboard\n      summary: Get content items of the package that was published\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardPublishingHistoryDetail\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: package ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingPackageItems:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/publishing/stats:\n    get:\n      tags:\n        - dashboard\n      summary: Get publishing stats\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardPublishingStats\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: days\n          in: query\n          description: number of days to display stats for\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  publishingStats:\n                    $ref: '#/components/schemas/PublishingStats'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/content/expiring:\n    get:\n      tags:\n        - dashboard\n      summary: Get content that is expiring\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardContentExpiring\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: dateTo\n          in: query\n          description: upper boundary to filter by date-time range\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        itemName:\n                          type: string\n                          description: internal name\n                        itemPath:\n                          type: string\n                          description: content path\n                        expireDateTime:\n                          type: string\n                          format: date-time\n                          description: date and time when content expires\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /dashboard/content/expired:\n    get:\n      tags:\n        - dashboard\n      summary: Get content that expired\n      description: 'Required permission \"site_member\"'\n      operationId: getDashboardContentExpired\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        itemName:\n                          type: string\n                          description: internal name\n                        itemPath:\n                          type: string\n                          description: content path\n                        expiredDateTime:\n                          type: string\n                          format: date-time\n                          description: date and time when content expired\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/list:\n    get:\n      tags:\n        - translation\n      summary: Get items for translation\n      description: 'Required permission \"get_items_for_translation\"'\n      operationId: getItemsForTranslation\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: filter results by path regexes\n          schema:\n            type: array\n            items:\n              type: string\n        - name: locale\n          in: query\n          description: filter results by locales\n          schema:\n            type: array\n            items:\n              type: string\n        - name: markedForTranslation\n          in: query\n          description: Include only items marked for translation and exclude everything else (default true)\n          schema:\n            type: boolean\n        - name: notTranslated\n          in: query\n          description: Include only items that have not been translated yet (default true)\n          schema:\n            type: boolean\n        - name: translationOutOfDate\n          in: query\n          description: Include items with translation out of date, otherwise exclude them (default true)\n          schema:\n            type: boolean\n        - name: offset\n          in: query\n          description: offset of the first result item, default 0\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: number of results to return, default 10\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LocalizationItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/item_by_id:\n    post:\n      tags:\n        - translation\n      summary: Get translation item(s) detail\n      description: 'Required permission \"get_translation_item_detail\"'\n      operationId: getTranslationItemById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: site ID\n                  type: string\n                id:\n                  description: Id(s) of item(s) to retrieve\n                  type: array\n                  items:\n                    type: string\n              required:\n                - siteId\n                - id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LocalizationItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/item_by_path:\n    post:\n      tags:\n        - translation\n      summary: Get translation item(s) detail\n      description: 'Required permission \"get_translation_item_detail\"'\n      operationId: getTranslationItemByPath\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  description: site ID\n                  type: string\n                path:\n                  description: Path(s) to item(s) to retrieve\n                  type: array\n                  items:\n                    type: string\n              required:\n                - siteId\n                - path\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LocalizationItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/list_target_locales:\n    get:\n      tags:\n        - translation\n      summary: Get list of target translation locales\n      description: 'Required permission \"get_translation_target_locales\"'\n      operationId: getTranslationTargetLocales\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: item path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LocalizationItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/mark_for_translation_by_id:\n    post:\n      tags:\n        - translation\n      summary: Mark item to be translated to specific locales\n      description: 'Required permission \"mark_for_translation\"'\n      operationId: markForTranslationById\n      requestBody:\n        description: Item and list of locales to translate to\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                id:\n                  type: array\n                  description: id(s) of the item(s)\n                  items:\n                    type: string\n                locales:\n                  type: array\n                  description: locale codes\n                  items:\n                    type: string\n              required:\n                - siteId\n                - path\n                - locales\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /translation/mark_for_translation_by_path:\n    post:\n      tags:\n        - translation\n      summary: Mark item to be translated to specific locales\n      description: 'Required permission \"mark_for_translation\"'\n      operationId: markForTranslationByPath\n      requestBody:\n        description: Item and list of locales to translate to\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                path:\n                  type: array\n                  description: path(s) of the item(s)\n                  items:\n                    type: string\n\n                locales:\n                  type: array\n                  description: locale codes\n                  items:\n                    type: string\n              required:\n                - siteId\n                - path\n                - locales\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/item_states:\n    get:\n      tags:\n        - workflow\n      summary: Get item workflow states for site\n      description: 'Required permission \"get_item_states\"'\n      operationId: getItemStates\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: path regex\n          required: false\n          schema:\n            type: string\n        - name: states\n          in: query\n          description: states bitmap mask\n          required: false\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n    post:\n      tags:\n        - workflow\n      summary: Set item workflow states for site\n      description: 'Required permission \"set_item_states\"'\n      operationId: setItemStates\n      requestBody:\n        description: List of items to set workflow state(s)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site ID\n                items:\n                  type: array\n                  description: path(s) of item(s)\n                  items:\n                    type: string\n                clearSystemProcessing:\n                  type: boolean\n                  description: true if system processing is to be cleared\n                clearUserLocked:\n                  type: boolean\n                  description: true if user lock is to be cleared\n                live:\n                  type: boolean\n                  description: true if item is to be set as live, otherwise false\n                staged:\n                  type: boolean\n                  description: true if item is to be set as staged, otherwise false\n                new:\n                  type: boolean\n                  description: true if item is to be set as new, otherwise false\n                modified:\n                  type: boolean\n                  description: true if item is to be set as modified, otherwise false\n              required:\n                - siteId\n                - items\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/update_item_states_by_query:\n    post:\n      tags:\n        - workflow\n      summary: Set item workflow states for site using query\n      description: 'Required permission \"set_item_states\"'\n      operationId: updateItemStates\n      requestBody:\n        description: List of items to set workflow state(s)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                query:\n                  type: object\n                  properties:\n                    siteId:\n                      type: string\n                      description: site ID\n                    path:\n                      type: string\n                      description: path regex of item(s)\n                    states:\n                      type: integer\n                      format: int64\n                      description: state bitmap mask to filter by state\n                  required:\n                    - siteId\n                    - paths\n                update:\n                  type: object\n                  properties:\n                    clearSystemProcessing:\n                      type: boolean\n                      description: true if system processing is to be cleared\n                    clearUserLocked:\n                      type: boolean\n                      description: true if user lock is to be cleared\n                    live:\n                      type: boolean\n                      description: true if item is to be set as live, otherwise false\n                    staged:\n                      type: boolean\n                      description: true if item is to be set as staged, otherwise false\n                    new:\n                      type: boolean\n                      description: true if item is to be set as new, otherwise false\n                    modified:\n                      type: boolean\n                      description: true if item is to be set as modified, otherwise false\n              required:\n                - query\n                - update\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/affected_paths:\n    get:\n      tags:\n        - workflow\n      summary: Get workflow affected paths\n      description: 'Required permission \"site member\"'\n      operationId: getWorkflowAffectedPaths\n      parameters:\n        - name: siteId\n          in: query\n          description: site ID\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: path of the content\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SandboxItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/request_publish:\n    post:\n      tags:\n        - workflow\n      summary: Request publish for content\n      description: 'Required permission \"site_member\"'\n      operationId: workflowRequestPublish\n      requestBody:\n        description: parameters for request publish\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                items:\n                  type: array\n                  description: path(s) of content item(s)\n                  items:\n                    type: string\n                optionalDependencies:\n                  type: array\n                  description: optional (soft) dependencies\n                  items:\n                    type: string\n                publishingTarget:\n                  type: string\n                  description: target to publish content to\n                schedule:\n                  type: string\n                  format: datetime\n                  description: schedule when to publish content\n                comment:\n                  type: string\n                  description: comment about publish request\n                sendEmailNotifications:\n                  type: boolean\n                  description: if true, send email notifications\n              required:\n                - siteId\n                - items\n                - publishingTarget\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/publish:\n    post:\n      tags:\n        - workflow\n      summary: Publish content\n      description: 'Required permission \"publish\"'\n      operationId: workflowPublish\n      requestBody:\n        description: parameters for publish content\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                items:\n                  type: array\n                  description: path(s) of content item(s)\n                  items:\n                    type: string\n                optionalDependencies:\n                  type: array\n                  description: optional (soft) dependencies\n                  items:\n                    type: string\n                publishingTarget:\n                  type: string\n                  description: target to publish content to\n                schedule:\n                  type: string\n                  format: datetime\n                  description: schedule when to publish content\n                comment:\n                  type: string\n                  description: submission comment by publisher\n              required:\n                - siteId\n                - items\n                - publishingTarget\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/approve:\n    post:\n      tags:\n        - workflow\n      summary: Approve request publish submission\n      description: 'Required permission \"publish\"'\n      operationId: workflowApprove\n      requestBody:\n        description: parameters for approve request publish submission\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                items:\n                  type: array\n                  description: path(s) of content item(s)\n                  items:\n                    type: string\n                optionalDependencies:\n                  type: array\n                  description: optional (soft) dependencies\n                  items:\n                    type: string\n                publishingTarget:\n                  type: string\n                  description: target to publish content to\n                schedule:\n                  type: string\n                  format: datetime\n                  description: schedule when to publish content\n                comment:\n                  type: string\n                  description: Reviewer's comment\n              required:\n                - siteId\n                - items\n                - publishingTarget\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/reject:\n    post:\n      tags:\n        - workflow\n      summary: Reject request publish submission\n      description: 'Required permission \"publish\"'\n      operationId: workflowReject\n      requestBody:\n        description: parameters for reject request publish submission\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                items:\n                  type: array\n                  description: path(s) of content item(s)\n                  items:\n                    type: string\n                comment:\n                  type: string\n                  description: Reviewer's rejection comment\n              required:\n                - siteId\n                - items\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/packages:\n    get:\n      tags:\n        - workflow\n      summary: List workflow packages order by scheduled date\n      description: Required permission \"request_publish, publish\"\n      operationId: workflowListPackage\n      parameters:\n        - name: siteId\n          in: query\n          description: filter workflow packages by site\n          required: true\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          description: lower boundary for filtering results by scheduled date\n          required: false\n          schema:\n            type: string\n            format: date\n        - name: dateTo\n          in: query\n          description: upper boundary for filtering results by scheduled date\n          required: false\n          schema:\n            type: string\n            format: date\n        - name: offset\n          in: query\n          description: Offset of the first package in the response\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: limit\n          in: query\n          description: Number of packages to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: order\n          in: query\n          description: ascending or descending (ASC | DESC). Default ascending\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  total:\n                    type: integer\n                    format: int32\n                    description: Total records in the system\n                  offset:\n                    type: integer\n                    format: int32\n                    description: Offset of first record in this response\n                  limit:\n                    type: integer\n                    format: int32\n                    description: Number of records returned in this response\n                  packages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/WorkflowPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - workflow\n      summary: Create workflow package\n      description: Required permission \"request_publish, publish\"\n      operationId: workflowCreatePackage\n      requestBody:\n        description: parameters to create new workflow package\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                paths:\n                  type: array\n                  description: paths of content items to add to package\n                  items:\n                    type: string\n                publishingTarget:\n                  type: string\n                  description: target where to publish content\n                schedule:\n                  type: string\n                  format: datetime\n                  description: schedule when publishing should be performed\n                authorComment:\n                  type: string\n                  description: author's comment about the package\n                label:\n                  type: string\n                  description: user friendly name for the package\n              required:\n                - siteId\n                - paths\n                - publishingTarget\n      responses:\n        '201':\n          description: CREATED\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n    patch:\n      tags:\n        - workflow\n      summary: Update workflow package\n      description: Required permission \"request_publish, publish\"\n      operationId: workflowUpdatePackage\n      requestBody:\n        description: Workflow package entity to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkflowPackage'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  package:\n                    $ref: '#/components/schemas/WorkflowPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/packages/{id}:\n    get:\n      tags:\n        - workflow\n      summary: Get workflow package by id\n      description: Required permission \"request_publish, publish\"\n      operationId: workflowGetPackage\n      parameters:\n        - name: id\n          in: path\n          description: The workflow package ID\n          required: true\n          schema:\n            type: string\n            format: UUID\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  package:\n                    $ref: '#/components/schemas/WorkflowPackage'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/packages/approve:\n    post:\n      tags:\n        - workflow\n      summary: Approve workflow package\n      description: Required permission \"publish\"\n      operationId: workflowApprovePackage\n      requestBody:\n        description: parameters to approve a workflow package\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                packages:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      packageId:\n                        type: string\n                        description: Id of the workflow package to approve\n                      approverComment:\n                        type: string\n                        description: approver's comment about approved workflow package\n                    required:\n                      - packageId\n                      - approverComment\n                schedule:\n                  type: string\n                  format: datetime\n                  description: approved schedule when to publish package\n              required:\n                - siteId\n                - packages\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /workflow/packages/reject:\n    post:\n      tags:\n        - workflow\n      summary: Create workflow package\n      description: Required permission \"request_publish, publish\"\n      operationId: workflowRejectPackage\n      requestBody:\n        description: parameters to create new workflow package\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                siteId:\n                  type: string\n                  description: site identifier\n                packages:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      packageId:\n                        type: string\n                        description: Id of the workflow package to approve\n                      rejectionComment:\n                        type: string\n                        description: approver's comment about approved workflow package\n                    required:\n                      - packageId\n                      - rejectionComment\n              required:\n                - siteId\n                - packages\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /loggers:\n    get:\n      tags:\n        - loggers\n      summary: Get all loggers and their configured priority levels\n      description: Required permission \"view_log_levels or configure_log_levels\"\n      operationId: loggersGetAll\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LoggerConfig'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /loggers/logger_level:\n    post:\n      tags:\n        - loggers\n      summary: Update logger priority level\n      description: Required permission \"configure_log_levels\"\n      operationId: loggersUpdateLevel\n      requestBody:\n        description: parameters to update the logger level\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoggerConfigRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n                  result:\n                    $ref: '#/components/schemas/LoggerConfig'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\ncomponents:\n  schemas:\n    ApiResponse:\n      type: object\n      description: |-\n        The response of an API operation. Possible responses are:\n          * `CODE:` 0, `MESSAGE:` OK\n          * `CODE:` 1, `MESSAGE:` Created\n          * `CODE:` 2, `MESSAGE:` Deleted\n          * `CODE:` 1000, `MESSAGE:` Internal system failure, `REMEDIAL ACTION:` Contact support\n          * `CODE:` 1001, `MESSAGE:` Invalid parameter(s), `REMEDIAL ACTION:` Check API and make sure you're sending the correct parameters\n          * `CODE:` 2000, `MESSAGE:` Unauthenticated, `REMEDIAL ACTION:` Please login first\n          * `CODE:` 2001, `MESSAGE:` Unauthorized, `REMEDIAL ACTION:` You don't have permission to perform this task, please contact your administrator\n          * `CODE:` 3000, `MESSAGE:` Organization not found, `REMEDIAL ACTION:` Check if you sent in the right Org Id\n          * `CODE:` 3001, `MESSAGE:` Organization already exists, `REMEDIAL ACTION:` Try a different organization name\n          * `CODE:` 4000, `MESSAGE:` Group not found, `REMEDIAL ACTION:` Check if you sent in the right Group Id\n          * `CODE:` 5000, `MESSAGE:` Site not found, `REMEDIAL ACTION:` Check if you sent in the right Site Id\n          * `CODE:` 5001, `MESSAGE:` Site already exists, `REMEDIAL ACTION:` Try a different site name\n          * `CODE:` 6000, `MESSAGE:` User not found, `REMEDIAL ACTION:` Check if you're using the correct User ID or username\n          * `CODE:` 6001, `MESSAGE:` User already exists, `REMEDIAL ACTION:` Try a different username\n          * `CODE:` 6002, `MESSAGE:` User is externally managed, `REMEDIAL ACTION:` Update the user in the main identity system (e.g. LDAP)\n          * `CODE:` 6003, `MESSAGE:` User password does not fulfill requirements, `REMEDIAL ACTION:` Use password that will fulfill password requirements\n          * `CODE:` 6004, `MESSAGE:` User current password does not match, `REMEDIAL ACTION:` Use correct current password\n          * `CODE:` 7000, `MESSAGE:` Content not found, `REMEDIAL ACTION:` Check if you sent in the right Content Id\n          * `CODE:` 7001, `MESSAGE:` Content already exists, `REMEDIAL ACTION:` Edit the existing item or delete it before creating it again\n          * `CODE:` 7002, `MESSAGE:` Content already locked, `REMEDIAL ACTION:` The user that locked the item or the administrator must unlock the item first\n          * `CODE:` 7003, `MESSAGE:` Content already unlocked, `REMEDIAL ACTION:` The item is already unlocked\n          * `CODE:` 8000, `MESSAGE:` Publishing is disabled, `REMEDIAL ACTION:` Advise the user to enable publishing\n          * `CODE:` 9000, `MESSAGE:` Search is unreachable, `REMEDIAL ACTION:` Advise the user that the search engine is not reachable\n          * `CODE:` 10000, `MESSAGE:` LoV not found, `REMEDIAL ACTION:` Check if you sent in the right LoV Id\n          * `CODE:` 11000, `MESSAGE:` Cluster member not found, `REMEDIAL ACTION:` Check if you sent in the right Cluster Member Id\n          * `CODE:` 11001, `MESSAGE:` Cluster member already exists, `REMEDIAL ACTION:` Get the list of cluster members to validate\n          * `CODE:` 12000, `MESSAGE:` Remote repository not found, `REMEDIAL ACTION:` Check if you sent in the right remote repository name\n          * `CODE:` 12001, `MESSAGE:` Remote repository already exists, `REMEDIAL ACTION:` Get the list of remote repositories to validate\n          * `CODE:` 12002, `MESSAGE:` Pull from remote repository resulted in conflict, `REMEDIAL ACTION:` Resolve conflicts before continuing work with repository\n          * `CODE:` 12003, `MESSAGE:` Remote is invalid. Not added to remote repositories, `REMEDIAL ACTION:` Add new remote repository with valid parameters.\n          * `CODE:` 12004, `MESSAGE:` Failed to remove remote repository, `REMEDIAL ACTION:` Contact your system administrator.\n          * `CODE:` 12005, `MESSAGE:` Push to remote repository failed, `REMEDIAL ACTION:` Check your repository settings or contact your system administrator.\n          * `CODE:` 12006, `MESSAGE:` Remove remote repository failed, `REMEDIAL ACTION:` The remote repository is a cluster node repository. It can't be removed.\n          * `CODE:` 12007, `MESSAGE:` Remote repository authentication failed, `REMEDIAL ACTION:` Recreate the remote repository with the correct authentication credentials and make sure you have write access.\n          * `CODE:` 40000, `MESSAGE:` Marketplace service is not initialized, `REMEDIAL ACTION:` Contact your system administrator.\n          * `CODE:` 40001, `MESSAGE:` Marketplace server is unreachable, `REMEDIAL ACTION:` Check the configuration to make sure the Marketplace URL is correct\n          * `CODE:` 40002, `MESSAGE:` Plugin is already installed, `REMEDIAL ACTION:` Check that the site id, plugin id and plugin version are correct\n          * `CODE:` 40003, `MESSAGE:` Error installing plugin, `REMEDIAL ACTION:` Check the plugin requirements\n          * `CODE:` 50000, `MESSAGE:` CMIS server is unreachable, `REMEDIAL ACTION:` Advise the user that the CMIS server is not reachable\n          * `CODE:` 50001, `MESSAGE:` Request to CMIS server timed out, `REMEDIAL ACTION:` Advise the user that the request to CMIS server timed out\n          * `CODE:` 50002, `MESSAGE:` CMIS server was not found, `REMEDIAL ACTION:` Advise the user that the CMIS server was not found\n          * `CODE:` 50003, `MESSAGE:` Target path does not exist in site repository, `REMEDIAL ACTION:` Check if you sent in the right Studio Path\n          * `CODE:` 51000, `MESSAGE:` Box is unreachable, `REMEDIAL ACTION:` Advise the user that Box is not reachable\n          * `CODE:` 52000, `MESSAGE:` AWS is unreachable, `REMEDIAL ACTION:` Advise the user that AWS engine is not reachable\n          * `CODE:` 53000, `MESSAGE:` Logger not found, `REMEDIAL ACTION:` Check if you sent in the right logger name or add 'createIfAbsent=true' parameter to create the logger if it does not exist\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: The response code\n        message:\n          type: string\n          description: The detailed message of the response\n        remedialAction:\n          type: string\n          description: What the user can do in order to address the issue indicated by the response\n        documentationUrl:\n          type: string\n          description: A URL to documentation related to the response\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'User ID, unique and immutable'\n        username:\n          type: string\n          description: Username, unique\n        password:\n          type: string\n          description: User's password (not returned to caller)\n        firstName:\n          type: string\n          description: User's first name\n        lastName:\n          type: string\n          description: User's last name\n        email:\n          type: string\n          description: User's email address\n        enabled:\n          type: boolean\n          description: Indicates if the user is enabled\n        externallyManaged:\n          type: boolean\n          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)\n      required:\n        - id\n        - username\n        - password\n        - firstName\n        - lastName\n        - email\n        - enabled\n        - externallyManaged\n\n    AuthenticatedUser:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'User ID, unique and immutable'\n        username:\n          type: string\n          description: Username, unique\n        firstName:\n          type: string\n          description: User's first name\n        lastName:\n          type: string\n          description: User's last name\n        email:\n          type: string\n          description: User's email address\n        enabled:\n          type: boolean\n          description: Indicates if the user is enabled\n        externallyManaged:\n          type: boolean\n          description: Indicates if a user is managed in by an external system (LDAP, SAML, etc.)\n        authenticationType:\n          type: string\n          description: |-\n            The authentication type used to log in the user. Possible values are: DB, LDAP, AUTH_HEADERS\n      required:\n        - id\n        - username\n        - password\n        - firstName\n        - lastName\n        - email\n        - enabled\n        - externallyManaged\n        - authenticationType\n\n    Group:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Group ID, unique and immutable'\n        name:\n          type: string\n          description: 'Group name, unique'\n        desc:\n          type: string\n          description: Group description\n      required:\n        - id\n        - name\n\n    Site:\n      type: object\n      properties:\n        siteId:\n          type: string\n          description: 'Site ID, unique and immutable'\n        uuid:\n          type: string\n          description: Site UUID unique and immutable\n        name:\n          type: string\n          description: site name\n        desc:\n          type: string\n          description: Site description\n      required:\n        - siteId\n\n    MenuItem:\n      type: object\n      properties:\n        id:\n          type: string\n          description: 'Menu item ID, unique and immutable'\n        label:\n          type: string\n          description: 'Menu item label'\n        icon:\n          type: string\n          description: 'Menu item icon as a Font Awesome id, example: fa-smile'\n      required:\n        - id\n        - label\n        - icon\n\n    S3Item:\n      type: object\n      properties:\n        name:\n          type: string\n          description: 'Name of the item'\n        url:\n          type: string\n          description: 'URL of the item'\n        folder:\n          type: boolean\n          description: 'Indicates if the item is a folder'\n      required:\n        - name\n        - url\n        - folder\n\n    MediaConvertResult:\n      type: object\n      properties:\n        jobId:\n          type: string\n          description: 'The id of the triggered job'\n        jobArn:\n          type: string\n          description: 'The full ARN of the triggered job'\n        urls:\n          type: array\n          description: 'The list of files that will be generated by the triggered job'\n          items:\n            type: string\n      required:\n        - jobId\n        - jobArn\n        - urls\n\n    WebDavItem:\n      type: object\n      properties:\n        name:\n          type: string\n          description: 'Name of the item'\n        url:\n          type: string\n          description: 'URL of the item'\n        folder:\n          type: boolean\n          description: 'Indicates if the item is a folder'\n      required:\n        - name\n        - url\n        - folder\n\n    ClusterMember:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: 'Cluster Member ID, unique and immutable'\n        localAddress:\n          type: string\n          description: 'Cluster Member local IP address, immutable'\n        state:\n          type: string\n          description: 'Cluster Member state'\n        heartbeat:\n          type: string\n          format: date-time\n          description: 'Timestamp of last heartbeat update of cluster member'\n        gitUrl:\n          type: string\n          description: 'Git URL, unique'\n        gitRemoteName:\n          type: string\n          description: 'Git Remote Name, unique'\n        gitAuthType:\n          type: string\n          description: 'Git Auth Type'\n        gitUsername:\n          type: string\n          description: 'Git Username'\n        gitPassword:\n          type: string\n          description: 'Git Password (not returned to caller)'\n        gitToken:\n          type: string\n          description: 'Git Token (not returned to caller)'\n        gitPrivateKey:\n          type: string\n          description: 'Git Private Key (not returned to caller)'\n      required:\n        - id\n        - localAddress\n        - state\n        - heartbeat\n        - gitUrl\n        - gitRemoteName\n        - gitAuthType\n\n    Version:\n      type: object\n      properties:\n        major:\n          type: integer\n          format: int32\n          description: The major version\n        minor:\n          type: integer\n          format: int32\n          description: The minor version\n        patch:\n          type: integer\n          format: int32\n          description: The patch version\n      required:\n        - major\n        - minor\n\n    Link:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the link\n        url:\n          type: string\n          description: The URL of the link\n      required:\n        - name\n        - url\n\n    Asset:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title of the asset\n        description:\n          type: string\n          description: The description of the asset\n        url:\n          type: string\n          description: The URL of the asset\n      required:\n        - title\n        - url\n\n    Parameter:\n      type: object\n      properties:\n        label:\n          type: string\n          description: The label to use for the parameter\n        name:\n          type: string\n          description: The name of the parameter (must be camelCase)\n        description:\n          type: string\n          description: The description of the parameter\n        defaultValue:\n          type: string\n          description: The default value of the parameter\n        type:\n          type: string\n          description: The type of the parameter. Currently supported values are STRING, PASSWORD\n        required:\n          type: boolean\n          description: Indicates if the parameter is required\n\n    PluginDescriptor:\n      type: object\n      properties:\n        descriptorVersion:\n          type: integer\n          description: The version of the plugin descriptor\n        plugin:\n          $ref: '#/components/schemas/Plugin'\n\n    Plugin:\n      type: object\n      properties:\n        type:\n          type: string\n          description: The type of plugin\n        id:\n          type: string\n          format: package name\n          description: The plugin id\n        name:\n          type: string\n          description: The plugin name\n        tags:\n          type: array\n          description: The plugin tags\n          items:\n            type: string\n        version:\n          $ref: '#/components/schemas/Version'\n        description:\n          type: string\n          description: The plugin description\n        website:\n          $ref: '#/components/schemas/Link'\n        media:\n          type: object\n          properties:\n            screenshots:\n              type: array\n              description: The screenshots of the plugin\n              items:\n                $ref: '#/components/schemas/Asset'\n            videos:\n              type: array\n              description: The videos of the plugin\n              items:\n                $ref: '#/components/schemas/Asset'\n        developer:\n          type: object\n          properties:\n            people:\n              type: array\n              description: The people that worked on the plugin\n              items:\n                $ref: '#/components/schemas/Link'\n            company:\n              $ref: '#/components/schemas/Link'\n        license:\n          $ref: '#/components/schemas/Link'\n        crafterCmsVersions:\n          type: array\n          description: The supported CrafterCMS versions of the plugin\n          items:\n            $ref: '#/components/schemas/Version'\n        crafterCmsEditions:\n          type: array\n          description: The supported CrafterCMS editions of the plugin\n          items:\n            type: string\n        parameters:\n          type: array\n          description: The parameters supported by the plugin\n          items:\n            $ref: '#/components/schemas/Parameter'\n\n    MarketplacePlugin:\n      allOf:\n        - $ref: '#/components/schemas/Plugin'\n        - type: object\n          properties:\n            status:\n              description: The status of this version of the plugin (possible values are 'PENDING' approval and 'APPROVED')\n              type: string\n            source:\n              description: The source of the plugin\n              type: string\n            compatible:\n              description: Indicates if the plugin is compatible\n              type: boolean\n\n\n    MarketplaceRemotePlugin:\n      allOf:\n        - $ref: '#/components/schemas/MarketplacePlugin'\n        - type: object\n          properties:\n            url:\n              type: string\n\n    GitMarketplacePlugin:\n      allOf:\n        - $ref: '#/components/schemas/MarketplaceRemotePlugin'\n        - type: object\n          properties:\n            ref:\n              type: string\n\n    CreateSiteFromMarketplace:\n      type: object\n      properties:\n        siteId:\n          type: string\n          description: Site ID to use\n        description:\n          type: string\n          description: Site description\n        sandboxBranch:\n          type: string\n          description: Name for sandbox branch (default master)\n        remoteName:\n          type: string\n          description: Remote repository name (default origin)\n        blueprintId:\n          type: string\n          description: The ID of the blueprint to use\n        blueprintVersion:\n          $ref: '#/components/schemas/Version'\n        siteParams:\n          type: object\n          description: Object containing all parameters for the blueprint. It should include all required parameters from the descriptor\n          additionalProperties:\n            type: string\n      required:\n        - siteId\n        - blueprintId\n        - blueprintVersion\n\n    PluginRecord:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The id of the plugin\n        version:\n          $ref: '#/components/schemas/Version'\n        pluginUrl:\n          type: string\n          description: The URL of the plugin\n        installationDate:\n          type: string\n          format: date-time\n          description: The date when the plugin was installed\n        files:\n          type: array\n          description: The list of installed files\n          items:\n            $ref: '#/components/schemas/FileRecord'\n\n    FileRecord:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path where the file was copied during installation\n\n    SearchParams:\n      type: object\n      properties:\n        query:\n          type: string\n          description: The main Lucene query to execute\n        keywords:\n          type: string\n          description: The keywords to search in the files\n        path:\n          type: string\n          description: Regular expression to filter the paths\n        offset:\n          type: integer\n          format: int64\n          description: The offset to paginate the results (defaults to 0)\n        limit:\n          type: integer\n          format: int64\n          description: The limit to paginate the results (defaults to 10)\n        sortBy:\n          type: string\n          description: The name of the field to sort the results (defaults to sort by relevance)\n        sortOrder:\n          type: string\n          description: The order to sort the results (defaults to DESC)\n        orOperator:\n          type: boolean\n          description: Indicates if the filters should use an OR instead of an AND operator (defaults to false)\n        filters:\n          type: object\n          description: \u003e-\n            Object containing facets to filter the search results. Facets can be simple key-value pairs like \"MIME\n            Type\":\"text/css\" or nested objects for range facets like \"Width\": { \"min\": 0, \"max\": 150 }. Both keys and\n             values can be taken from the facets object of a previous search.\n          additionalProperties: true\n\n    SearchResult:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: int64\n          description: Total number of results found\n        items:\n          type: array\n          description: List of items based on the pagination parameters\n          items:\n            $ref: '#/components/schemas/SearchResultItem'\n        facets:\n          type: array\n          description: List of facets based on the results found\n          items:\n            $ref: '#/components/schemas/SearchFacet'\n\n    SearchResultItem:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path of the file\n        name:\n          type: string\n          description: The internal name of the file\n        type:\n          type: string\n          description: The type of the file\n        mimeType:\n          type: string\n          description: The MIME type of the file\n        previewUrl:\n          type: string\n          description: The preview URL of the file\n        lastModifier:\n          type: string\n          description: The last user that modified the file\n        lastModified:\n          type: string\n          format: date-time\n          description: The last date that the file was modified\n        size:\n          type: integer\n          format: int64\n          description: The size of the file, in bytes\n        snippets:\n          type: array\n          description: Snippets relevant to the search query\n          items:\n            type: string\n\n    SearchFacet:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The label of the facet\n        range:\n          type: boolean\n          description: Indicates if the values of the facet are ranges\n        date:\n          type: boolean\n          description: Indicates if the values of the facet are dates\n        values:\n          type: object\n          description: \u003e-\n            The values and counts of the facet. If the facet is a range\n            the values will be of type SearchFacetRange, otherwise it will\n            be a single integer.\n          properties:\n            facet1:\n              type: object\n              properties:\n                value1:\n                  type: integer\n            facet2:\n              $ref: '#/components/schemas/SearchFacetRange'\n\n    SearchFacetRange:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int64\n          description: The number of files that match the range\n        from:\n          type: object\n          description: The starting limit of the range\n        to:\n          type: object\n          description: The ending limit of the range\n\n    AuditLog:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: Audit log entry ID\n        organizationId:\n          type: integer\n          format: int64\n          description: Organization ID\n        siteId:\n          type: string\n          format: string\n          description: Site Identifier\n        siteName:\n          type: string\n          format: string\n          description: Site name\n        operation:\n          type: string\n          description: Operation that was executed\n        operationTimestamp:\n          type: string\n          description: Timestamp when operation was executed\n        origin:\n          type: string\n          description: Origin of operation (UI/API or Git)\n        primaryTargetId:\n          type: string\n          description: Target ID upon which operation was executed\n        primaryTargetType:\n          type: string\n          description: Type of the target\n        primaryTargetSubtype:\n          type: string\n          description: Subtype of the target\n        primaryTargetValue:\n          type: string\n          description: Value of the target (e.g. content's path)\n        actorId:\n          type: string\n          description: Actor ID which invoked operation\n        actorDetails:\n          type: string\n          description: Details of the actor which invoked\n        clusterNodeId:\n          type: string\n          description: Cluster node Id\n        parameters:\n          type: array\n          description: Additional parameters of audit log\n          items:\n            type: object\n            properties:\n              targetId:\n                type: string\n                description: Target ID upon which operation was executed\n              targetType:\n                type: string\n                description: Type of the target\n              targetSubtype:\n                type: string\n                description: Subtype of the target\n              targetValue:\n                type: string\n                description: Value of the target (e.g. content's path)\n            required:\n              - targetId\n              - targetType\n              - targetValue\n      required:\n        - id\n        - organizationId\n        - siteId\n        - siteName\n        - operation\n        - operationTimestamp\n        - origin\n        - primaryTargetId\n        - primaryTargetType\n        - primaryTargetValue\n        - actorId\n\n    VersionItem:\n      type: object\n      properties:\n        packageName:\n          type: string\n          description: The name of the current package\n        packageVersion:\n          type: string\n          description: The version of the current package\n        packageBuild:\n          type: string\n          description: The build of the current package\n        packageBuildDate:\n          type: string\n          format: date-time\n          description: The build date of the current package\n        osName:\n          type: string\n          description: The name of the operating system\n        osVersion:\n          type: string\n          description: The version of the operating system\n        osArch:\n          type: string\n          description: The architecture of the operating system\n        javaVersion:\n          type: string\n          description: The version of java being used\n        javaVendor:\n          type: string\n          description: The name of the JVM vendor\n        javaVm:\n          type: string\n          description: The name of the JVM\n\n    StatusItem:\n      type: object\n      properties:\n        uptime:\n          type: integer\n          format: int64\n          description: The time in seconds that the JVM has been up\n        startup:\n          type: string\n          format: date-time\n          description: The date and time when the JVM started\n\n    ClusterStatusItem:\n      type: object\n      properties:\n        uptime:\n          type: integer\n          format: int64\n          description: The time in seconds that the JVM has been up\n        startup:\n          type: string\n          format: date-time\n          description: The date and time when the JVM started\n        age:\n          type: integer\n          format: int64\n          description: The time in seconds that the cluster node has been up\n        role:\n          type: string\n          description: Role that the node has in the cluster. Possible values PRIMARY, REPLICA, UNASSIGNED\n        readyToTakeTraffic:\n          type: boolean\n          description: True if the cluster node is ready to take traffic. Typically it is a Primary node\n        readyToBecomePrimary:\n          type: boolean\n          description: True if the cluster node is a Replica and in sync with the Primary node\n\n    MemoryItem:\n      type: object\n      properties:\n        totalJvmMemory:\n          type: integer\n          format: int64\n          description: The memory in bytes used by the JVM\n        freeJvmMemory:\n          type: integer\n          format: int64\n          description: The remaining memory in bytes for the JVM\n        maxJvmMemory:\n          type: integer\n          format: int64\n          description: The maximum memory in bytes available to the JVM\n        totalOsMemory:\n          type: integer\n          format: int64\n          description: The total memory in bytes available for the operating system\n        freeOsMemory:\n          type: integer\n          format: int64\n          description: The remaining memory in bytes for the operating system\n        totalSwapMemory:\n          type: integer\n          format: int64\n          description: The total memory in bytes available for swap space\n        freeSwapMemory:\n          type: integer\n          format: int64\n          description: The remaining memory in bytes for swap space\n\n    LogEvent:\n      type: object\n      properties:\n        exception:\n          type: string\n          description: The exception message if any\n        site:\n          type: string\n          description: The site name\n        level:\n          type: string\n          description: The level of the log event\n        thread:\n          type: string\n          description: The name of the thread\n        message:\n          type: string\n          description: The message of the log event\n        timestamp:\n          type: string\n          format: datetime\n          description: The timestamp of the log event\n        timestampm:\n          type: integer\n          format: int64\n          description: The time in milliseconds of the log event\n\n    CmisItem:\n      type: object\n      properties:\n        itemId:\n          type: string\n          description: Item id inside CMIS repository\n        itemName:\n          type: string\n          description: Item name\n        mimeType:\n          type: string\n          description: Item mime type\n        size:\n          type: integer\n          format: int32\n          description: Item size\n\n    RemoteRepository:\n      type: object\n      properties:\n        siteId:\n          type: string\n          description: site identifier\n        remoteName:\n          type: string\n          description: remote repository name\n        remoteUrl:\n          type: string\n          format: URL\n          description: URL to access remote repository\n        authenticationType:\n          type: string\n          description: \u003e-\n            Authentication type to use to access remote repository\n\n            Possible values:\n\n              - none: no authentication\n\n              - basic: username and password authentication\n\n              - token: token authentication\n\n              - key: key-based authentication\n        remoteUsername:\n          type: string\n          description: username to use to access remote repository\n        remotePassword:\n          type: string\n          description: password to use to access remote repository\n        remoteToken:\n          type: string\n          description: token to use to access remote repository\n        remotePrivateKey:\n          type: string\n          description: private key to access\n      required:\n        - siteId\n        - remoteName\n        - remoteUrl\n        - authenticationType\n\n    RemoteRepositoryInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          description: remote repository name\n        url:\n          type: string\n          description: remote repository url\n        fetch:\n          type: string\n          description: remote repository fetch references\n        push_url:\n          type: string\n          description: remote repository push url\n        branches:\n          type: array\n          items:\n            type: string\n            description: remote repository branch name\n        reachable:\n          type: boolean\n          description: true if remote repository is reachable, otherwise false\n        unreachableReason:\n          type: string\n          description: reason why remote is unreachable\n        removable:\n          type: boolean\n          description: true if remote repository can be removed, otherwise false\n\n    QuickCreateItem:\n      type: object\n      properties:\n        siteId:\n          type: string\n          description: site id\n        label:\n          type: string\n          description: user friendly label for content type name\n        contentTypeId:\n          type: string\n          description: content type id\n        path:\n          type: string\n          description: path expression to generate path for quick create\n\n    RepositoryStatus:\n      type: object\n      properties:\n        conflicting:\n          type: array\n          description: list of conflicting files\n          items:\n            type: string\n        uncommittedChanges:\n          type: array\n          description: list of added files\n          items:\n            type: string\n        clean:\n          type: boolean\n          description: true if there are no conflicts or uncommitted changes\n\n    History:\n      type: object\n      properties:\n        item:\n          $ref: '#/components/schemas/ContentItem'\n        versions:\n          type: array\n          description: list of versions\n          items:\n            $ref: '#/components/schemas/ContentItemVersion'\n\n    ContentItemVersion:\n      type: object\n      properties:\n        versionNumber:\n          type: string\n          description: version label\n        lastModifiedDate:\n          type: string\n          format: datetime\n          description: last modified date and time of version\n        lastModifier:\n          type: string\n          description: user that modified item\n        comment:\n          type: string\n          description: commit message\n\n    ContentItem:\n      type: object\n      description: API v1 object\n\n    PublishingPackage:\n      type: object\n      properties:\n        id:\n          type: string\n          description: package ID\n        siteId:\n          type: string\n          description: site ID\n        schedule:\n          type: string\n          format: datetime\n          description: scheduled date and time\n        approver:\n          type: string\n          description: user that approved publishing package\n        state:\n          type: string\n          description: package state\n        publishingTarget:\n          type: string\n          description: publishing target where package will be published\n        comment:\n          type: string\n          description: submission comment\n      required:\n        - id\n        - siteId\n        - schedule\n        - approver\n        - state\n        - publishingTarget\n\n    PublishingPackageDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          description: package ID\n        siteId:\n          type: string\n          description: site ID\n        schedule:\n          type: string\n          format: datetime\n          description: scheduled date and time\n        approver:\n          type: string\n          description: user that approved publishing package\n        state:\n          type: string\n          description: package state\n        publishingTarget:\n          type: string\n          description: publishing target where package will be published\n        comment:\n          type: string\n          description: submission comment\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              path:\n                type: string\n                description: content item path\n              contentTypeClass:\n                type: string\n                description: content type class\n              mimeType:\n                type: string\n                description: mime-type\n      required:\n        - id\n        - schedule\n        - approver\n        - state\n        - publishingTarget\n        - items\n\n    PublishingStatus:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: true if publishing for site is enabled, otherwise false\n        status:\n          type: string\n          description: publishing status for site\n        lockOwner:\n          type: string\n          description: studio instance owner of publishing lock\n        lockTTL:\n          type: string\n          description: TTL timestamp for publishing lock\n        totalItems:\n          type: integer\n          format: int32\n          description: total number of item being published right now\n        numberOfItems:\n          type: integer\n          format: int32\n          description: number of items published so far\n        submissionId:\n          type: string\n          description: identifier of a submission being published\n        publishingTarget:\n          type: string\n          description: publishing target for package\n        published:\n          type: boolean\n          description: true if site has been published at least once (initial publish; published repository exist), otherwise false\n\n      required:\n        - enabled\n        - status\n        - message\n        - lockOwner\n        - lockTTL\n\n    DeploymentHistoryGroup:\n      type: object\n      properties:\n        internalName:\n          type: string\n          description: user friendly label\n        numberOfChildren:\n          type: integer\n          format: int32\n          description: number of items in the group\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContentItem'\n        publishingTarget:\n          type: string\n          description: publishing target where item was published\n      required:\n        - internalName\n        - numberOfChildren\n        - children\n        - publishingTarget\n\n\n    SandboxItem:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: content item ID\n        label:\n          type: string\n          description: user friendly display name for content item\n        parentId:\n          type: integer\n          format: int64\n          description: parent item ID\n        contentTypeId:\n          type: string\n          description: content type of content item\n        path:\n          type: string\n          description: path where content item is stored inside repository (with filename)\n        previewUrl:\n          type: string\n          description: url for previewing content item\n        systemType:\n          type: string\n          description: one of predefined type values (page, component, asset, levelDescriptor, folder ...)\n        mimeType:\n          type: string\n          description: mime-type of content item file\n        state:\n          type: integer\n          format: int64\n          description: \u003e-\n            bitmap of states\n              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published\n              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox\n              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted\n              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user\n              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing\n              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review\n              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved\n              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published\n              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1\n              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target\n              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target\n              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled\n              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date\n              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation\n              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated\n        lockOwner:\n          type: string\n          description: username of user that locked item for editing\n        localeCode:\n          type: string\n          description: locale of content item\n        translationSourceId:\n          type: string\n          description: ID of content item that is original for translation that current item represents\n        creator:\n          type: string\n          description: username of user that created item\n        dateCreated:\n          type: string\n          format: datetime\n          description: timestamp when item was created\n        modifier:\n          type: string\n          description: username of last user that modified item\n        dateModified:\n          type: string\n          format: datetime\n          description: timestamp when was item last modified\n        commitId:\n          type: string\n          description: commit id of last modification in the repository for item\n        sizeInBytes:\n          type: integer\n          format: int64\n          description: size of content item in the repository\n        expiresOn:\n          type: string\n          format: datetime\n          description: timestamp when the item will expire, can be null if not present/set\n        availableActions:\n          type: integer\n          format: int64\n          description: \u003e-\n            available actions bitmap\n              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content\n              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content\n              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content\n              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies\n              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content\n              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content\n              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content\n              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content\n              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content\n              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content\n              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content\n              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content\n              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type\n              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content\n              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type\n              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template\n              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder\n              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content\n              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller\n              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template\n              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content\n              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request\n              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish\n              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request\n              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item\n        childrenCount:\n          type: integer\n          format: int32\n          description: number of children of the item\n      required:\n        - id\n        - label\n        - contentTypeId\n        - path\n        - previewUrl\n        - systemType\n        - mimeType\n        - state\n        - lockOwner\n        - createdDate\n        - creator\n        - modifier\n        - lastModifiedDate\n        - commitId\n        - availableActions\n\n    DetailedItem:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: content item ID\n        label:\n          type: string\n          description: user friendly display name for content item\n        parentId:\n          type: integer\n          format: int64\n          description: parent item ID\n        contentTypeId:\n          type: string\n          description: content type of content item\n        path:\n          type: string\n          description: path where content item is stored inside repository (with filename)\n        previewUrl:\n          type: string\n          description: url for previewing content item\n        systemType:\n          type: string\n          format: page, component, asset, levelDescriptor, folder\n          description: type of item in CrafterCMS domain\n        mimeType:\n          type: string\n          description: mime-type of content item file\n        state:\n          type: integer\n          format: int64\n          description: \u003e-\n            bitmap of states\n              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published\n              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox\n              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted\n              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user\n              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing\n              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review\n              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved\n              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published\n              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1\n              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target\n              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target\n              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled\n              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date\n              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation\n              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated\n        lockOwner:\n          type: string\n          description: username of user that locked item for editing\n        localeCode:\n          type: string\n          description: locale of content item\n        translationSourceId:\n          type: string\n          description: ID of content item that is original for translation that current item represents\n        expiresOn:\n          type: string\n          format: datetime\n          description: timestamp when the item will expire, can be null if not present/set\n        availableActions:\n          type: integer\n          format: int64\n          description: \u003e-\n            available actions bitmap\n              * `BIT ORDER (little-endian)`: 0, `FLAG`: Content: Read, `DESCRIPTION`: Read content\n              * `BIT ORDER (little-endian)`: 1, `FLAG`: Content: Copy, `DESCRIPTION`: Copy content\n              * `BIT ORDER (little-endian)`: 2, `FLAG`: Content: Read Version History, `DESCRIPTION`: Read version history for content\n              * `BIT ORDER (little-endian)`: 3, `FLAG`: Content: Get Dependencies, `DESCRIPTION`: Get content dependencies\n              * `BIT ORDER (little-endian)`: 4, `FLAG`: Publish: Request, `DESCRIPTION`: Request publish for content\n              * `BIT ORDER (little-endian)`: 5, `FLAG`: Content: Create, `DESCRIPTION`: Create content\n              * `BIT ORDER (little-endian)`: 6, `FLAG`: Content: Paste, `DESCRIPTION`: Paste content\n              * `BIT ORDER (little-endian)`: 7, `FLAG`: Content: Edit, `DESCRIPTION`: Update content\n              * `BIT ORDER (little-endian)`: 8, `FLAG`: Content: Rename, `DESCRIPTION`: Rename or move content\n              * `BIT ORDER (little-endian)`: 9, `FLAG`: Content: Cut, `DESCRIPTION`: Cut content\n              * `BIT ORDER (little-endian)`: 10, `FLAG`: Content: Upload, `DESCRIPTION`: Upload content\n              * `BIT ORDER (little-endian)`: 11, `FLAG`: Content: Duplicate, `DESCRIPTION`: Duplicate content\n              * `BIT ORDER (little-endian)`: 12, `FLAG`: Content: Change Type, `DESCRIPTION`: Change content type\n              * `BIT ORDER (little-endian)`: 13, `FLAG`: Content: Revert, `DESCRIPTION`: Revert content\n              * `BIT ORDER (little-endian)`: 14, `FLAG`: Content: Edit controller, `DESCRIPTION`: Edit controller for content type\n              * `BIT ORDER (little-endian)`: 15, `FLAG`: Content: Edit template, `DESCRIPTION`: Edit rendering template\n              * `BIT ORDER (little-endian)`: 16, `FLAG`: Content: Create folder, `DESCRIPTION`: Create folder\n              * `BIT ORDER (little-endian)`: 17, `FLAG`: Content: Delete, `DESCRIPTION`: Delete content\n              * `BIT ORDER (little-endian)`: 18, `FLAG`: Content: Delete controller, `DESCRIPTION`: Delete content type controller\n              * `BIT ORDER (little-endian)`: 19, `FLAG`: Content: Delete template, `DESCRIPTION`: Delete rendering template\n              * `BIT ORDER (little-endian)`: 20, `FLAG`: Publish: Publish, `DESCRIPTION`: Publish content\n              * `BIT ORDER (little-endian)`: 21, `FLAG`: Publish: Approve, `DESCRIPTION`: Approve publish request\n              * `BIT ORDER (little-endian)`: 22, `FLAG`: Publish: Schedule, `DESCRIPTION`: Schedule publish\n              * `BIT ORDER (little-endian)`: 23, `FLAG`: Publish: Reject, `DESCRIPTION`: Reject publish request\n              * `BIT ORDER (little-endian)`: 24, `FLAG`: Content: Unlock, `DESCRIPTION`: Unlock content item\n        sandbox:\n          type: object\n          description: metadata of content item version stored in sandbox repository\n          properties:\n            creator:\n              type: string\n              description: username of user that created item\n            dateCreated:\n              type: string\n              format: datetime\n              description: timestamp when item was created\n            modifier:\n              type: string\n              description: username of last user that modified sandbox version of item\n            dateModified:\n              type: string\n              format: datetime\n              description: timestamp when was item last modified in sandbox\n            commitId:\n              type: string\n              description: commit id of last modification in the sandbox repository\n            sizeInBytes:\n              type: integer\n              format: int64\n              description: size of content item in the repository\n        staging:\n          type: object\n          description: metadata of content item version stored in staging repository\n          properties:\n            dateScheduled:\n              type: string\n              format: datetime\n              description: timestamp when is item scheduled for publishing to staging repository\n            datePublished:\n              type: string\n              format: datetime\n              description: timestamp when was item last time published to staging repository\n            publisher:\n              type: string\n              description: username of last user that published item to staging repository\n            commitId:\n              type: string\n              description: commit id of last modification in the staging repository\n        live:\n          type: object\n          description: metadata of content item version stored in live repository\n          properties:\n            dateScheduled:\n              type: string\n              format: datetime\n              description: timestamp when is item scheduled for publishing to live repository\n            datePublished:\n              type: string\n              format: datetime\n              description: timestamp when was item last time published to live repository\n            publisher:\n              type: string\n              description: username of last user that published item to live repository\n            commitId:\n              type: string\n              description: commit id of last modification in the live repository\n        childrenCount:\n          type: integer\n          format: int32\n          description: number of children of the item\n      required:\n        - id\n        - label\n        - contentTypeId\n        - path\n        - previewUrl\n        - systemType\n        - mimeType\n        - state\n        - lockOwner\n        - staging\n        - availableActions\n\n    LocalizationItem:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: content item ID\n        label:\n          type: string\n          description: user friendly display name for content item\n        parentId:\n          type: integer\n          format: int64\n          description: parent item ID\n        path:\n          type: string\n          description: path where content item is stored inside repository (with filename)\n        previewUrl:\n          type: string\n          description: url for previewing content item\n        systemType:\n          type: string\n          description: one of predefined type values (page, component, asset, level descriptor, folder ...)\n        mimeType:\n          type: string\n          description: mime-type of content item file\n        state:\n          type: integer\n          format: int64\n          description: \u003e-\n            bitmap of states\n              * `BIT ORDER (little-endian)`: 0, `FLAG`: New, `DESCRIPTION`: The item is new and never been published\n              * `BIT ORDER (little-endian)`: 1: `FLAG`: Modified, `DESCRIPTION`: The item has been published in the past and has been modified in the sandbox\n              * `BIT ORDER (little-endian)`: 2: `FLAG`: Deleted, `DESCRIPTION`: The item is deleted\n              * `BIT ORDER (little-endian)`: 3: `FLAG`: User Locked, `DESCRIPTION`: The item is locked by a user\n              * `BIT ORDER (little-endian)`: 4, `FLAG`: System Processing, `DESCRIPTION`: The item is locked by the system for processing\n              * `BIT ORDER (little-endian)`: 5, `FLAG`: In Workflow, `DESCRIPTION`: The item has been submitted for review\n              * `BIT ORDER (little-endian)`: 6, `FLAG`: Scheduled, `DESCRIPTION`: The item has been scheduled for review or publishing ounce approved\n              * `BIT ORDER (little-endian)`: 7, `FLAG`: Publishing, `DESCRIPTION`: The item is being published\n              * `BIT ORDER (little-endian)`: 8, `FLAG`: Destination, `DESCRIPTION`: If the item is being published, the destination is staging if 0, and live if 1\n              * `BIT ORDER (little-endian)`: 9, `FLAG`: Staged, `DESCRIPTION`: The item has been pushed to the staging publishing target\n              * `BIT ORDER (little-endian)`: 10, `FLAG`: Live, `DESCRIPTION`: The item has been pushed to the live publishing target\n              * `BIT ORDER (little-endian)`: 11, `FLAG`: Disabled, `DESCRIPTION`: The item has been disabled\n              * `BIT ORDER (little-endian)`: 12, `FLAG`: Reserved 12, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 13, `FLAG`: Reserved 11, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 14, `FLAG`: Reserved 10, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 15, `FLAG`: Reserved 9, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 16, `FLAG`: Reserved 8, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 17, `FLAG`: Reserved 7, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 18, `FLAG`: Reserved 6, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 19, `FLAG`: Reserved 5, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 20, `FLAG`: Reserved 4, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 21, `FLAG`: Reserved 3, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 22, `FLAG`: Reserved 2, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 23, `FLAG`: Reserved 1, `DESCRIPTION`: Reserved value for future use\n              * `BIT ORDER (little-endian)`: 24, `FLAG`: Translation Up To Date, `DESCRIPTION`: This item is a translation of another and it’s up to date\n              * `BIT ORDER (little-endian)`: 25, `FLAG`: Translation Pending, `DESCRIPTION`: This item is a translation of another and it’s pending translation\n              * `BIT ORDER (little-endian)`: 26, `FLAG`: Translation in Progress, `DESCRIPTION`: This item is a translation of another and is currently being translated\n        lockOwner:\n          type: string\n          description: username of user that locked item for editing\n        localeCode:\n          type: string\n          description: locale of content item\n        translationSourceId:\n          type: string\n          description: ID of content item that is original for translation that current item represents\n      required:\n        - id\n        - label\n        - contentTypeId\n        - path\n        - previewUrl\n        - systemType\n        - mimeType\n        - state\n        - lockOwner\n        - localeCode\n\n    TranslationConfig:\n      type: object\n      properties:\n        localeCodes:\n          type: array\n          description: List of codes for the supported locales\n          items:\n            type: string\n        defaultLocaleCode:\n          type: string\n          description: The code of the default locale for all new content\n\n    ContentValidationRequest:\n      type: object\n      properties:\n        actions:\n          type: array\n          description: The list of actions to verify\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                description: \u003e\n                  The type of action, possible values: CREATE, RENAME, MOVE, COPY\n              source:\n                type: string\n                description: The source value, only needed for recursive COPY, MOVE and RENAME actions\n              target:\n                type: string\n                description: The target value\n              recursive:\n                type: boolean\n                description: Indicates if all child items should be verified too\n                default: false\n              contentMetadata:\n                type: object\n                properties:\n                  fileSize:\n                    type: integer\n                    format: int64\n                    description: The size of the file in bytes, only needed for CREATE actions\n                  contentType:\n                    type: string\n                    description: The id of the crafter content type, only needed for CREATE actions\n            required:\n              - type\n              - target\n      required:\n        - siteId\n        - actions\n\n    ContentValidationResult:\n      type: object\n      properties:\n        actions:\n          type: array\n          description: The list of results\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                description: The type of action\n              target:\n                type: string\n                description: The target value\n              allowed:\n                type: boolean\n                description: Indicates if the operation is allowed\n              modifiedValue:\n                type: string\n                description: The adjusted value if available\n\n    PasteItem:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The path of the item\n        children:\n          type: array\n          description: The child items\n          items:\n            $ref: '#/components/schemas/PasteItem'\n      required:\n        - path\n\n    PasteRequest:\n      type: object\n      properties:\n        siteId:\n          type: string\n          description: The id of the site\n        operation:\n          type: string\n          description: Indicate the type of operation\n          enum:\n            - COPY\n            - CUT\n        targetPath:\n          type: string\n          description: The target path for the operation\n        item:\n          $ref: '#/components/schemas/PasteItem'\n      required:\n        - siteId\n        - target\n        - item\n\n    AccessToken:\n      type: object\n      properties:\n        token:\n          type: string\n          description: Value of the access token, only visible when the token is created\n        expiresAt:\n          type: string\n          format: date-time\n          description: Date of expiration of the access token\n        id:\n          type: integer\n          format: int64\n          description: Id of the access token\n        label:\n          type: string\n          description: The label of the access token\n        enabled:\n          type: boolean\n          description: Indicates if the access token is enabled\n        createdOn:\n          type: string\n          format: date-time\n          description: Date of creation of the access token\n\n    WorkflowPackage:\n      type: object\n      properties:\n        id:\n          type: string\n          description: workflow package ID\n        siteId:\n          type: string\n          description: site identifier\n        status:\n          type: string\n          description: workflow package status\n        author:\n          type: string\n          description: username of the author\n        reviewer:\n          type: string\n          description: username of the reviewer\n        schedule:\n          type: string\n          format: datetime\n          description: scheduled date and time to publish the package\n        publishingTarget:\n          type: string\n          description: name of the publishing target where package will be published\n        authorComment:\n          type: string\n          description: author's comment\n        reviewerComment:\n          type: string\n          description: reviewer's comment\n        label:\n          type: string\n          description: user friendly label for package\n      required:\n        - id\n        - siteId\n        - status\n        - author\n        - publishingTarget\n\n    Activity:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: activity ID\n        person:\n          $ref: '#/components/schemas/Person'\n        actionType:\n          type: string\n          description: \u003e-\n            operation performed by user\n              * CREATE\n              * UPDATE\n              * DELETE\n              * MOVE\n              * REQUEST_PUBLISH\n              * APPROVE\n              * APPROVE_SCHEDULED\n              * REJECT\n              * REVERT\n              * PUBLISH\n              * INITIAL_PUBLISH\n              * UNKNOWN\n        item:\n          type: object\n          description: item that operation was performed against\n          properties:\n            id:\n              type: integer\n              format: int64\n              description: The id of the item\n            path:\n              type: string\n              description: The path of the item\n            label:\n              type: string\n              description: The label of the item\n            previewUrl:\n              type: string\n              description: The preview URL of the item\n        package:\n          type: object\n          description: package that operation was performed against\n          properties:\n            id:\n              type: string\n              format: UUID\n              description: The id of the package\n      required:\n        - id\n        - person\n        - actionType\n\n    Person:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: user ID\n        username:\n          type: string\n          description: user's username\n        firstName:\n          type: string\n          description: user's first name\n        lastName:\n          type: string\n          description: user's last name\n        avatar:\n          type: string\n          format: CLOB\n          description: user's avatar\n      required:\n        - id\n        - username\n        - firstName\n        - lastName\n\n    DashboardPublishingPackage:\n      type: object\n      properties:\n        id:\n          type: string\n          format: UUID\n          description: package id\n        label:\n          type: string\n          description: user friendly name of the package\n        submitter:\n          $ref: '#/components/schemas/Person'\n        size:\n          type: integer\n          format: int32\n          description: number of items in the package\n        publishingTarget:\n          type: string\n          description: publishing target where package will be published\n        schedule:\n          type: string\n          format: date-time\n          description: date and time when package will be published\n      required:\n        - id\n        - label\n        - submitter\n        - size\n        - publishingTarget\n\n    PublishingStats:\n      type: object\n      properties:\n        numberOfPublishes:\n          type: integer\n          format: int32\n          description: Number of published content for given unit of time\n        numberOfNewAndPublishedItems:\n          type: integer\n          format: int32\n          description: Number of newly created and published items for given unit of time\n        numberOfEditedAndPublishedItems:\n          type: integer\n          format: int32\n          description: Number of edited and published items for given unit of time\n      required:\n        - numberOfPublishes\n        - numberOfNewAndPublishedItems\n        - numberOfEditedAndPublishedItems\n\n    LoggerConfig:\n      type: object\n      properties:\n        name:\n          type: string\n          description: the logger name\n        level:\n          type: string\n          description: the logger priority level (off|error|warn|info|debug|trace|all)\n      required:\n        - name\n        - level\n    LoggerConfigRequest:\n      allOf:\n        - $ref: '#/components/schemas/LoggerConfig'\n        - type: object\n          properties:\n            createIfAbsent:\n              type: boolean\n              description: if true, the logger will be created in case it does not exist yet.\n                If false, a 404 status code will be returned if logger is not in the registry.\n  responses:\n    NotFound:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    Conflict:\n      description: Resource already exists\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    BadRequest:\n      description: Invalid request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              result:\n                type: object\n                properties:\n                  response:\n                    $ref: '#/components/schemas/ApiResponse'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    RequestTimeout:\n      description: Request Timeout (408)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    InternalServerError:\n      description: Internal system failure\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n    ServiceUnavailable:\n      description: Service unavailable (503)\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              response:\n                $ref: '#/components/schemas/ApiResponse'\n  securitySchemes:\n    jwtAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    basicAuth:\n      type: http\n      scheme: basic\n  links: {}\n  callbacks: {}\nsecurity:\n  - jwtAuth: []\n  - basicAuth: []\n",
			"canonicalURL": "/github.com/craftercms/studio@c2c67dc7ab4c35c565bfd7f53cefdb5959f420fb/-/blob/src/main/api/2/studio-api-2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/craftercms/studio/blob/c2c67dc7ab4c35c565bfd7f53cefdb5959f420fb/src/main/api/2/studio-api-2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/marketplace/search\": get: responses: code 200: contents: media: \"application/json\": generate schema: field items: item: anyOf: collect variants: oneOf[1]: allOf: schema type mismatch:  and object"
}