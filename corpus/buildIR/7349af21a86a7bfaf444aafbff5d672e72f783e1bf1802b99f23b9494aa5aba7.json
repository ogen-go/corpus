{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/confluentinc/schema-registry"
		},
		"file": {
			"name": "schema-registry-api-spec.yaml",
			"size": 0,
			"path": "core/generated/swagger-ui/schema-registry-api-spec.yaml",
			"byteSize": 52807,
			"content": "openapi: 3.0.1\ninfo:\n  title: Confluent Schema Registry\n  version: v1\npaths:\n  /compatibility/subjects/{subject}/versions/{version}:\n    post:\n      summary: Test schema compatibility against a particular schema subject-version\n      description: \"Test input schema against a particular version of a subject's\\\n        \\ schema for compatibility. The compatibility level applied for the check\\\n        \\ is the configured compatibility level for the subject (http:get:: /config/(string:\\\n        \\ subject)). If this subject's compatibility level was never changed, then\\\n        \\ the global compatibility level applies (http:get:: /config).\"\n      operationId: testCompatibilityBySubjectName_1\n      parameters:\n      - name: subject\n        in: path\n        description: Subject of the schema version against which compatibility is\n          to be tested\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the subject's schema against which compatibility\\\n          \\ is to be tested. Valid values for versionId are between [1,2^31-1] or\\\n          \\ the string \\\"latest\\\".\\\"latest\\\" checks compatibility of the input schema\\\n          \\ with the last registered schema under the specified subject\"\n        required: true\n        schema:\n          type: string\n      - name: verbose\n        in: query\n        description: Whether to return detailed error messages\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Compatibility check result\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: |-\n            Error code 42201 -- Invalid schema or schema type\n            Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /:\n    get:\n      summary: Schema Registry Root Resource\n      description: The Root resource is a no-op.\n      operationId: get_1\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n            application/json; qs=0.5:\n              schema:\n                type: string\n    post:\n      operationId: post_1\n      requestBody:\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/vnd.schemaregistry+json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n          application/octet-stream:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /compatibility/subjects/{subject}/versions:\n    post:\n      summary: Test schema compatibility against all schemas under a subject\n      description: \"Test input schema against a subject's schemas for compatibility,\\\n        \\ based on the configured compatibility level of the subject. In other words,\\\n        \\ it will perform the same compatibility check as register for that subject.\\\n        \\ The compatibility level applied for the check is the configured compatibility\\\n        \\ level for the subject (http:get:: /config/(string: subject)). If this subject's\\\n        \\ compatibility level was never changed, then the global compatibility level\\\n        \\ applies (http:get:: /config).\"\n      operationId: testCompatibilityForSubject_1\n      parameters:\n      - name: subject\n        in: path\n        description: Subject of the schema version against which compatibility is\n          to be tested\n        required: true\n        schema:\n          type: string\n      - name: verbose\n        in: query\n        description: Whether to return detailed error messages\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Compatibility check result\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n        \"422\":\n          description: |-\n            Error code 42201 -- Invalid schema or schema type\n            Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /config:\n    get:\n      summary: Get global compatibility level.\n      operationId: getTopLevelConfig_1\n      responses:\n        \"200\":\n          description: The global compatibility level\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Config'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Config'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Config'\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update global compatibility level\n      description: \"Updates the global compatibility level. On success, echoes the\\\n        \\ original request back to the client.\"\n      operationId: updateTopLevelConfig_1\n      requestBody:\n        description: Config Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The original request\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n        \"422\":\n          description: Error code 42203 -- Invalid compatibility level\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n    delete:\n      summary: Deletes the Global-level compatibility level config and revert to the\n        global default.\n      operationId: deleteTopLevelConfig_1\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/json; qs=0.5:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /config/{subject}:\n    get:\n      summary: Get subject compatibility level\n      description: Retrieves compatibility level for a subject.\n      operationId: getSubjectLevelConfig_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: defaultToGlobal\n        in: query\n        description: Whether to return the global compatibility level  if subject\n          compatibility level not found\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The subject compatibility level\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Config'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Config'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Config'\n        \"404\":\n          description: Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update subject compatibility level\n      description: \"Update compatibility level for the specified subject. On success,\\\n        \\ echoes the original request back to the client.\"\n      operationId: updateSubjectLevelConfig_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Config Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ConfigUpdateRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The original request\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ConfigUpdateRequest'\n        \"422\":\n          description: |-\n            Error code 42203 -- Invalid compatibility level\n            Error code 40402 -- Version not found\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n    delete:\n      summary: Delete subject compatibility level\n      description: Deletes the specified subject-level compatibility level config\n        and reverts to the global default.\n      operationId: deleteSubjectConfig_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Operation succeeded. Returns old compatibility level\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n            application/json; qs=0.5:\n              schema:\n                type: string\n                enum:\n                - NONE\n                - BACKWARD\n                - BACKWARD_TRANSITIVE\n                - FORWARD\n                - FORWARD_TRANSITIVE\n                - FULL\n                - FULL_TRANSITIVE\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /contexts:\n    get:\n      summary: List contexts\n      description: Retrieves a list of contexts.\n      operationId: listContexts_1\n      responses:\n        \"200\":\n          description: The contexts\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /mode:\n    get:\n      summary: Get global mode\n      description: Retrieves global mode.\n      operationId: getTopLevelMode_1\n      responses:\n        \"200\":\n          description: The global mode\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Mode'\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update global mode\n      description: \"Update global mode. On success, echoes the original request back\\\n        \\ to the client.\"\n      operationId: updateTopLevelMode_1\n      parameters:\n      - name: force\n        in: query\n        description: Whether to force update if setting mode to IMPORT and schemas\n          currently exist\n        schema:\n          type: boolean\n      requestBody:\n        description: Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The original request\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n        \"422\":\n          description: |-\n            Error code 42204 -- Invalid mode\n            Error code 42205 -- Operation not permitted\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n            Error code 50004 -- Unknown leader\n  /mode/{subject}:\n    get:\n      summary: Get subject mode\n      description: Retrieves the subject mode.\n      operationId: getMode_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: defaultToGlobal\n        in: query\n        description: Whether to return the global mode if subject mode not found\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The subject mode\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Mode'\n        \"404\":\n          description: Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    put:\n      summary: Update subject mode\n      description: \"Update mode for the specified subject. On success, echoes the\\\n        \\ original request back to the client.\"\n      operationId: updateMode_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: force\n        in: query\n        description: Whether to force update if setting mode to IMPORT and schemas\n          currently exist\n        schema:\n          type: boolean\n      requestBody:\n        description: Update Request\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/ModeUpdateRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The original request\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ModeUpdateRequest'\n        \"422\":\n          description: |-\n            Error code 42204 -- Invalid mode\n            Error code 42205 -- Operation not permitted\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50003 -- Error while forwarding the request to the primary\n            Error code 50004 -- Unknown leader\n    delete:\n      summary: Delete subject mode\n      description: Deletes the specified subject-level mode and reverts to the global\n        default.\n      operationId: deleteSubjectMode_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Operation succeeded. Returns old mode\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Mode'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Mode'\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /schemas:\n    get:\n      summary: List schemas\n      description: Get the schemas matching the specified parameters.\n      operationId: getSchemas_1\n      parameters:\n      - name: subjectPrefix\n        in: query\n        description: Filters results by the respective subject prefix\n        schema:\n          type: string\n          default: \"\"\n      - name: deleted\n        in: query\n        description: Whether to return soft deleted schemas\n        schema:\n          type: boolean\n          default: false\n      - name: latestOnly\n        in: query\n        description: Whether to return latest schema versions only for each matching\n          subject\n        schema:\n          type: boolean\n          default: false\n      - name: offset\n        in: query\n        description: Pagination offset for results\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - name: limit\n        in: query\n        description: Pagination size for results. Ignored if negative\n        schema:\n          type: integer\n          format: int32\n          default: -1\n      responses:\n        \"200\":\n          description: The schemas matching the specified parameters\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}:\n    get:\n      summary: Get schema string by ID\n      description: Retrieves the schema string identified by the input ID.\n      operationId: getSchema_1\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Name of the subject\n        schema:\n          type: string\n      - name: format\n        in: query\n        description: \"Desired output format, dependent on schema type\"\n        schema:\n          type: string\n          default: \"\"\n      - name: fetchMaxId\n        in: query\n        description: Whether to fetch the maximum schema identifier that exists\n        schema:\n          type: boolean\n          default: false\n      responses:\n        \"200\":\n          description: The schema string\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/SchemaString'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/SchemaString'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/SchemaString'\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}/subjects:\n    get:\n      summary: List subjects associated to schema ID\n      description: Retrieves all the subjects associated with a particular schema\n        ID.\n      operationId: getSubjects_1\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Filters results by the respective subject\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include subjects where the schema was deleted\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The subjects matching the specified parameters\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/ids/{id}/versions:\n    get:\n      summary: List subject-versions associated to schema ID\n      description: Get all the subject-version pairs associated with the input ID.\n      operationId: getVersions_1\n      parameters:\n      - name: id\n        in: path\n        description: Globally unique identifier of the schema\n        required: true\n        schema:\n          type: integer\n          format: int32\n      - name: subject\n        in: query\n        description: Filters results by the respective subject\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include subject versions where the schema was deleted\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The subject versions matching the specified parameters\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubjectVersion'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubjectVersion'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubjectVersion'\n        \"404\":\n          description: |\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /schemas/types:\n    get:\n      summary: List supported schema types\n      description: Retrieve the schema types supported by this registry.\n      operationId: getSchemaTypes_1\n      responses:\n        \"200\":\n          description: The supported schema types\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\n  /subjects:\n    get:\n      summary: List subjects\n      description: Retrieves a list of registered subjects matching specified parameters.\n      operationId: list_1\n      parameters:\n      - name: subjectPrefix\n        in: query\n        description: Subject name prefix\n        schema:\n          type: string\n          default: ':*:'\n      - name: deleted\n        in: query\n        description: Whether to look up deleted subjects\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The subjects matching the specified parameters\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: string\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: string\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /subjects/{subject}:\n    post:\n      summary: Lookup schema under subject\n      description: \"Check if a schema has already been registered under the specified\\\n        \\ subject. If so, this returns the schema string along with its globally unique\\\n        \\ identifier, its version under this subject and the subject name.\"\n      operationId: lookUpSchemaUnderSubject_1\n      parameters:\n      - name: subject\n        in: path\n        description: Subject under which the schema will be registered\n        required: true\n        schema:\n          type: string\n      - name: normalize\n        in: query\n        description: Whether to lookup the normalized schema\n        schema:\n          type: boolean\n      - name: deleted\n        in: query\n        description: Whether to lookup deleted schemas\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        \"200\":\n          description: The schema\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Schema'\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40403 -- Schema not found\n        \"500\":\n          description: Internal server error\n    delete:\n      summary: Delete subject\n      description: Deletes the specified subject and its associated compatibility\n        level if registered. It is recommended to use this API only when a topic needs\n        to be recycled or in development environment.\n      operationId: deleteSubject_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: permanent\n        in: query\n        description: Whether to perform a permanent delete\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: Operation succeeded. Returns list of schema versions deleted\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend datastore\n  /subjects/{subject}/versions:\n    get:\n      summary: List versions under subject\n      description: Retrieves a list of versions registered under the specified subject.\n      operationId: listVersions_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schemas\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The version numbers matching the specified parameters\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n        \"404\":\n          description: Error code 40401 -- Subject not found\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n    post:\n      summary: Register schema under a subject\n      description: |-\n        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.\n        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config\n        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.\n      operationId: register_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: normalize\n        in: query\n        description: Whether to register the normalized schema\n        schema:\n          type: boolean\n      requestBody:\n        description: Schema\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/vnd.schemaregistry+json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n          application/octet-stream:\n            schema:\n              $ref: '#/components/schemas/RegisterSchemaRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/RegisterSchemaResponse'\n        \"409\":\n          description: Incompatible schema\n        \"422\":\n          description: Error code 42201 -- Invalid schema or schema type\n        \"500\":\n          description: |-\n            Error code 50001 -- Error in the backend data store\n            Error code 50002 -- Operation timed out\n            Error code 50003 -- Error while forwarding the request to the primary\n  /subjects/{subject}/versions/{version}:\n    get:\n      summary: Get schema by version\n      description: Retrieves a specific version of the schema registered under this\n        subject.\n      operationId: getSchemaByVersion_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schema\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The schema\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/Schema'\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        \"422\":\n          description: Error code 42202 -- Invalid version\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n    delete:\n      summary: Delete schema version\n      description: \"Deletes a specific version of the schema registered under this\\\n        \\ subject. This only deletes the version and the schema ID remains intact\\\n        \\ making it still possible to decode data using the schema ID. This API is\\\n        \\ recommended to be used only in development environments or under extreme\\\n        \\ circumstances where-in, its required to delete a previously registered schema\\\n        \\ for compatibility purposes or re-register previously registered schema.\"\n      operationId: deleteSchemaVersion_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: permanent\n        in: query\n        description: Whether to perform a permanent delete\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: Operation succeeded. Returns the schema version\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: integer\n                format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: integer\n                format: int32\n            application/json; qs=0.5:\n              schema:\n                type: integer\n                format: int32\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /subjects/{subject}/versions/{version}/referencedby:\n    get:\n      summary: List schemas referencing a schema\n      description: Retrieves the IDs of schemas that reference the specified schema.\n      operationId: getReferencedBy_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The IDs of schemas that reference the specified schema\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int32\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /subjects/{subject}/versions/{version}/schema:\n    get:\n      summary: Get schema string by version\n      description: Retrieves the schema for the specified version of this subject.\n        Only the unescaped schema string is returned.\n      operationId: getSchemaOnly_1\n      parameters:\n      - name: subject\n        in: path\n        description: Name of the subject\n        required: true\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: \"Version of the schema to be returned. Valid values for versionId\\\n          \\ are between [1,2^31-1] or the string \\\"latest\\\". \\\"latest\\\" returns the\\\n          \\ last registered schema under the specified subject. Note that there may\\\n          \\ be a new latest schema that gets registered right after this request is\\\n          \\ served.\"\n        required: true\n        schema:\n          type: string\n      - name: deleted\n        in: query\n        description: Whether to include deleted schema\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          description: The schema string\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: string\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: string\n            application/json; qs=0.5:\n              schema:\n                type: string\n        \"404\":\n          description: |-\n            Error code 40401 -- Subject not found\n            Error code 40402 -- Version not found\n        \"422\":\n          description: Error code 42202 -- Invalid version\n        \"500\":\n          description: Error code 50001 -- Error in the backend data store\n  /v1/metadata/id:\n    get:\n      summary: Get the server metadata\n      operationId: getClusterId_1\n      responses:\n        \"500\":\n          description: |\n            Error code 50001 -- Error in the backend data store\ncomponents:\n  schemas:\n    CompatibilityCheckResponse:\n      type: object\n      properties:\n        is_compatible:\n          type: boolean\n          description: Whether the compared schemas are compatible\n        messages:\n          type: array\n          description: Error messages\n          items:\n            type: string\n            description: Error messages\n      description: Compatibility check response\n    RegisterSchemaRequest:\n      type: object\n      properties:\n        version:\n          type: integer\n          description: Version number\n          format: int32\n        id:\n          type: integer\n          description: Globally unique identifier of the schema\n          format: int32\n        schemaType:\n          type: string\n          description: Schema type\n        references:\n          type: array\n          description: References to other schemas\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        schema:\n          type: string\n          description: Schema definition string\n      description: Schema register request\n    SchemaReference:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Reference name\n        subject:\n          type: string\n          description: Name of the referenced subject\n        version:\n          type: integer\n          description: Version number of the referenced subject\n          format: int32\n      description: Schema reference\n    Config:\n      type: object\n      properties:\n        compatibilityLevel:\n          type: string\n          description: Compatibility Level\n          enum:\n          - \"BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\\\n            \\ NONE\"\n      description: Config\n    ConfigUpdateRequest:\n      type: object\n      properties:\n        compatibility:\n          type: string\n          description: Compatibility Level\n          enum:\n          - \"BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\\\n            \\ NONE\"\n      description: Config update request\n    Mode:\n      type: object\n      properties:\n        mode:\n          type: string\n          description: Schema Registry operating mode\n          enum:\n          - \"READWRITE, READONLY, READONLY_OVERRIDE, IMPORT\"\n      description: Schema Registry operating mode\n    ModeUpdateRequest:\n      type: object\n      properties:\n        mode:\n          type: string\n          description: Schema Registry operating mode\n          enum:\n          - \"READWRITE, READONLY, READONLY_OVERRIDE, IMPORT\"\n      description: Mode update request\n    SchemaString:\n      type: object\n      properties:\n        schemaType:\n          type: string\n          description: Schema type\n        schema:\n          type: string\n          description: Schema string identified by the ID\n        references:\n          type: array\n          description: References to other schemas\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        maxId:\n          type: integer\n          description: Maximum ID\n          format: int32\n      description: Schema definition\n    Schema:\n      type: object\n      properties:\n        subject:\n          type: string\n          description: Name of the subject\n        version:\n          type: integer\n          description: Version number\n          format: int32\n        id:\n          type: integer\n          description: Globally unique identifier of the schema\n          format: int32\n        schemaType:\n          type: string\n          description: Schema type\n        references:\n          type: array\n          description: References to other schemas\n          items:\n            $ref: '#/components/schemas/SchemaReference'\n        schema:\n          type: string\n          description: Schema definition string\n      description: Schema\n    SubjectVersion:\n      type: object\n      properties:\n        subject:\n          type: string\n          description: Name of the subject\n        version:\n          type: integer\n          description: Version number\n          format: int32\n      description: Subject version pair\n    ServerClusterId:\n      type: object\n      properties:\n        scope:\n          type: object\n          additionalProperties:\n            type: object\n        id:\n          type: string\n    RegisterSchemaResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Globally unique identifier of the schema\n          format: int32\n      description: Schema register response\n    ErrorMessage:\n      type: object\n      properties:\n        error_code:\n          type: integer\n          format: int32\n        message:\n          type: string\n"
		}
	},
	"Error": "buildIR: make ir: path \"/compatibility/subjects/{subject}/versions\": post: requestBody: contents: application/octet-stream: octet stream with \"object\" schema not supported"
}