{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Capnode/Algoloop"
		},
		"file": {
			"name": "QuantConnect-Platform-2.0.0.yaml",
			"size": 0,
			"path": "Api/QuantConnect-Platform-2.0.0.yaml",
			"byteSize": 75509,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"QuantConnect Platform API controls creating, updating and deleting projects, files, backtests and live algorithms. Automate the updating and backtesting of your strategies, or build tools to fast track your development.\"\n  version: 2.0.0\n  title: QuantConnect Platform API v2.0\n  termsOfService: 'https://www.quantconnect.com/terms'\n  contact: \n    name: QuantConnect\n    email: contact@quantconnect.com\n  license:\n    name: License For Use Granted Under QuantConnect Terms of Service.\n\nservers: \n  - url: 'https://www.quantconnect.com/api/v2'\n    description: 'Primary REST Endpoint'\n\n#\n# Authentication is base64 encoding of {userId}:sha256{token:unixtimestamp}\n# Timestamp must be within the last 20 seconds.\n#\nsecurity:\n  - nonceTokenAuth: []\n    \n#\n# URL Paths for API\n#\npaths:\n\n  # Create a new project or return error\n  '/projects/create':\n    post:\n      summary: 'Create a project with the specified name and language. If the project already exists return false with exception details in the errors array.'\n      tags: \n        - Project Management\n      requestBody:\n        description: 'Name and language of the project to create.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectListResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read details about a single project, or list details of all projects.\n  '/projects/read':\n    post:\n      summary: 'If a ReadProjectRequest is passed, get details about that single project. If no request body is passed, list details of all projects.'\n      tags: \n        - Project Management\n      requestBody:\n        description: 'The projectId for the project to read, or nothing to get a list of all projects.'\n        required: False\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/ReadProjectRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectListResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Update a project name or details\n  '/projects/update':\n    post:\n      summary: 'Update a project name, description or parameters.'\n      tags:\n        - Project Management\n      requestBody:\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateProjectRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Delete a specific project\n  '/projects/delete':\n    post:\n      summary: 'Delete a project.'\n      tags: \n        - Project Management\n      requestBody: \n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteProjectRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Add a file to a project.\n  '/files/create':\n    post:\n      summary: 'Add a file to given project.'\n      tags: \n        - File Management\n      requestBody:\n        description: 'Project, file name and file content to create'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectFileRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectFilesResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read one file or multiple files in a project.\n  '/files/read':\n    post:\n      summary: 'If a ReadSingleFileRequest is passed, reads that file from the project. If a ReadAllFilesRequest is passed, reads all files in the project.'\n      tags: \n        - File Management\n      requestBody:\n        description: 'An array list of files from the project requested.'\n        required: True\n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/ReadFilesRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectFilesResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Update the name of a file, or update the contents of a file.\n  '/files/update':\n    post:\n      summary: 'If an UpdateProjectFileNameRequest is passed, update the name of a file. If a UpdateProjectFileContentsRequest is passed, update the contents of a file.'\n      tags: \n        - File Management\n      requestBody:\n        description: 'Information about the file to update along with the new properties to set.'\n        required: True\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/UpdateFileNameRequest'\n                - $ref: '#/components/schemas/UpdateFileContentsRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Delete a file in a project.\n  '/files/delete':\n    post:\n      summary: 'Delete a file in a project'\n      tags: \n        - File Management\n      requestBody:\n        description: 'Project Id and filename to specify the file for deletion.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteFileRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Create a new compile job request for a project\n  '/compile/create':\n    post:\n      summary: 'Asynchronously create a compile job request for a project'\n      tags: \n        - Compiling Code\n      requestBody:\n        description: 'Project Id specifying project to build.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCompileRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/CompileResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read a compile packet job result\n  '/compile/read':\n    post:\n      summary: 'Read a compile packet job result.'\n      tags: \n        - Compiling Code\n      requestBody:\n        description: 'Read a compile result for a specific Project Id and Compile Id.'\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/ReadCompileRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/CompileResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Create a new backtest request and get the id\n  '/backtests/create':\n    post:\n      summary: 'Create a new backtest request and get the backtest Id.'\n      tags: \n        - Backtest Management\n      requestBody:\n        description: 'Create a new backtest given a project Id and compile Id.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateBacktestRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/BacktestResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read one or multiple backtests from the project\n  '/backtests/read':\n    post:\n      summary: 'If a backtest id is provided, read out that backtest from the project, otherwise list all the backtests for the project.'\n      tags: \n        - Backtest Management\n      requestBody:\n        description: 'Fetch the results for the project Id and backtest Id provided.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadBacktestRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/responses/BacktestResponse'\n                  - $ref: '#/components/responses/BacktestList'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read out the report of a backtest\n  '/backtests/read/report':\n    post:\n      summary: 'Read out the report of a backtest in the project id specified'\n      tags: \n        - Backtest Management\n      requestBody:\n        description: 'A JSON object containing info about the project to delete.'\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/BacktestReportRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/responses/BacktestReport'\n                  - $ref: '#/components/responses/RequestFailedError'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Update a backtest name\n  '/backtests/update':\n    post:\n      summary: 'Update a backtest name or note'\n      tags: \n        - Backtest Management\n      requestBody:\n        description: 'A JSON object containing info about the backtest and new name.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateBacktestRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Delete a backtest\n  '/backtests/delete':\n    post:\n      summary: 'Delete a backtest from the specified project and backtestId'\n      tags: \n        - Backtest Management\n      requestBody:\n        description: 'Information required to delete the backtest.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteBacktestRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n\n  # Create a live Algorithm\n  '/live/create':\n    post:\n      summary: 'Create a live algorithm'\n      tags: \n        - Live Management\n      requestBody:\n        description: 'Project, compile and brokerage login information for deploying a live algorithm.'\n        required: True\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateLiveAlgorithmRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/LiveAlgorithm'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Read out a live algorithm or get a list of live running algorithms\n  '/live/read':\n    post:\n      summary: 'If a ReadLiveAlgorithmRequest is provided details on a live algorithm are returned. If a ListLiveAlgorithmsRequest is passed get a list of live running algorithms.'\n      tags: \n        - Live Management\n      requestBody:\n        description: 'Dynamic arguement to specify whether seeking single project or list response.'\n        required: True\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ReadLiveAlgorithmRequest'\n                - $ref: '#/components/schemas/ListLiveAlgorithmsRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/responses/LiveAlgorithmResults'\n                  - $ref: '#/components/responses/LiveList'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Liquidate a live algorithm from a project\n  '/live/update/liquidate':\n    post:\n      summary: 'Liquidate a live algorithm from the specified project and deployId.'\n      tags: \n        - Live Management\n      requestBody:\n        description: 'Information about the live algorithm to liquidate.'\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/LiquidateLiveAlgorithmRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Stop a live algorithm\n  '/live/update/stop':\n    post:\n      summary: 'Stop a live algorithm from the specified project and deployId.'\n      tags: \n        - Live Management\n      requestBody:\n        description: 'Information about the project to delete.'\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/StopLiveAlgorithmRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/RestResponse' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Get the logs of a specific live algorithm\n  '/live/read/log':\n    post:\n      summary: 'Get the logs of a specific live algorithm.'\n      tags: \n        - Live Management\n      requestBody:\n        description: 'Information about the algorithm to read live logs from.'\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/ReadLiveLogsRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ReadLiveLogsResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Get the link to downloadable data\n  '/data/read':\n    post:\n      summary: 'Get the link to the downloadable data.'\n      tags: \n        - Downloading Data\n      requestBody:\n        required: True\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/DataDownloadRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/ReadDataLinkResponse'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n          \n# Model Definitions\ncomponents:\n  # Base API Security -\u003e \n  securitySchemes:\n    nonceTokenAuth:\n      description: 'The standard QuantConnect API authentication scheme is used. This requires the current unixtime and your api key to be hashed together with SHA256 and sent as the B64 password in a basic authentication. The username for the basic authentication is the UID on your QuantConnect account.'\n      type: http\n      scheme: basic\n  \n  responses:\n  \n    BacktestResponse:\n      description: 'Backtest read response packet.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/BacktestResponse'\n            \n    BacktestList:\n      description: 'Collection container for a list of backtests for a project.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BacktestList'\n            \n    BacktestReport:\n      description: 'Backtest Report Response wrapper.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/BacktestReport'\n\n    CompileResponse:\n      description: 'Response from the compiler on a build event.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/CompileResponse'\n\n    LiveAlgorithm:\n      description: 'Live algorithm instance result.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/LiveAlgorithm'\n              \n    LiveAlgorithmLog:\n      description: 'Logs from a live algorithm.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/LiveAlgorithmLogs'\n              \n    LiveAlgorithmList:\n      description: 'List of the live algorithms running which match the requested status.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/LiveAlgorithmList'\n              \n    LiveAlgorithmResults:\n      description: 'Details a live algorithm from the live/read API endpoint.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/LiveAlgorithmResults'\n              \n    LiveList:\n      description: 'List of the live algorithms running which match the requested status.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveList'\n            \n    ProjectListResponse:\n      description: 'Project list response.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProjectListResponse'\n    ProjectFilesResponse:\n      description: 'Response received when reading all files of a project.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProjectFilesResponse'\n\n    # Response from reading purchased data\n    ReadDataLinkResponse:\n      description: 'Response from reading purchased data.'\n      content:\n        application/json:\n            schema:\n              $ref: '#/components/schemas/ReadDataLinkResponse'\n\n    ReadLiveLogsResponse:\n      description: 'Logs from a live algorithm.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReadLiveLogsResponse'\n              \n    RequestFailedError:\n      description: 'Request Failed.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RequestFailedError'\n\n    RestResponse:\n      description: 'Base API response class.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/RestResponse'\n            \n    UnauthorizedError:\n      description: 'Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.'\n      headers:\n        www_authenticate:\n          schema:\n            type: string\n          \n  schemas:\n\n    AlgorithmPerformance:\n      description: 'The AlgorithmPerformance class is a wrapper for TradeStatistics and PortfolioStatistics.'\n      type: object\n      properties:\n        TradeStatistics:\n          $ref: '#/components/schemas/TradeStatistics'\n        PortfolioStatistics:\n          $ref: '#/components/schemas/PortfolioStatistics'\n        ClosedTrades:\n          description: 'The algorithm statistics on portfolio.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Trade'\n            \n    AlgorithmStatus:\n      description: 'States of a live deployment.'\n      type: string\n      enum:\n        - 'DeployError'\n        - 'InQueue'\n        - 'Running'\n        - 'Stopped'\n        - 'Liquidated'\n        - 'Deleted'\n        - 'Completed'\n        - 'RuntimeError'\n        - 'Invalid'\n        - 'LoggingIn'\n        - 'Initializing'\n        - 'History'\n \n    AlphaRuntimeStatistics:\n      description: 'Contains insight population run time statistics.'\n      type: object\n      properties:\n        MeanPopulationScore:\n          $ref: '#/components/schemas/InsightScore'\n        RollingAveragedPopulationScore:\n          $ref: '#/components/schemas/InsightScore'\n        LongCount:\n          description: 'Gets the total number of insights with an up direction.'\n          type: string\n        ShortCount:\n          description: 'Gets the total number of insights with a down direction.'\n          type: string\n        LongShortRatio:\n          description: 'The ratio of InsightDirection.Up over InsightDirection.Down'\n          type: number\n          format: float\n        TotalAccumulatedEstimatedAlphaValue:\n          description: 'The total accumulated estimated value of trading all insights.'\n          type: number\n          format: float\n        KellyCriterionEstimate:\n          description: \"Score of the strategy's insights predictive power.\"\n          type: number\n          format: float\n        KellyCriterionProbabilityValue:\n          description: 'The p-value or probability value of the KellyCriterionEstimate.'\n          type: number\n          format: float\n        FitnessScore:\n          description: \"Score of the strategy's performance, and suitability for the Alpha Stream Market.\"\n          type: number\n          format: float\n        PortfolioTurnover:\n          description: 'Measurement of the strategies trading activity with respect to the portfolio value. Calculated as the sales volume with respect to the average total portfolio value.'\n          type: number\n          format: float\n        ReturnOverMaxDrawdown:\n          description: 'Provides a risk adjusted way to factor in the returns and drawdown of the strategy. It is calculated by dividing the Portfolio Annualized Return by the Maximum Drawdown seen during the backtest.'\n          type: number\n          format: float\n        SortinoRatio:\n          description: \"Gives a relative picture of the strategy volatility. It is calculated by taking a portfolio's annualized rate of return and subtracting the risk free rate of return.\"\n          type: number\n          format: float\n        EstimatedMonthlyAlphaValue:\n          description: 'Suggested Value of the Alpha On A Monthly Basis For Licensing.'\n          type: number\n          format: float\n        TotalInsightsGenerated:\n          description: 'The total number of insight signals generated by the algorithm.'\n          type: string\n        TotalInsightsClosed:\n          description: 'The total number of insight signals generated by the algorithm.'\n          type: string\n        TotalInsightsAnalysisCompleted:\n          description: 'The total number of insight signals generated by the algorithm.'\n          type: string\n        MeanPopulationEstimatedInsightValue:\n          description: 'Gets the mean estimated insight value.'\n          type: number\n          format: float\n\n    BacktestResponse:\n      description: 'Packet container for carrying Backtest results.'\n      type: object\n      properties:\n        name:\n          type: string\n          description: 'Name of the backtest.'\n        note:\n          type: string\n          description: 'Note on the backtest attached by the user.'\n        backtestId:\n          type: string\n          description: 'Assigned backtest Id'\n        completed:\n          type: boolean\n          description: 'Boolean true when the backtest is completed.'\n        progress:\n          type: number\n          format: float\n          description: 'Progress of the backtest in percent 0-1'\n        result:\n          $ref: '#/components/schemas/BacktestResult'\n        error:\n          type: string\n          description: 'Backtest error message.'\n        stacktrace:\n          type: string\n          description: 'Backtest error stacktrace.'\n        created:\n          type: string\n          format: date-time\n          description: 'Backtest creation date and time.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    BacktestList:\n      description: 'Collection container for a list of Backtest objects for a project.'\n      type: object\n      properties:\n        backtests:\n          type: array\n          items:\n            $ref: '#/components/schemas/BacktestResponse'\n          description: 'Array of BacktestResponse objects'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    BacktestReport:\n      description: 'Backtest Report Response wrapper.'\n      type: object\n      properties:\n        report:\n          description: 'HTML data of the report with embedded base64 images.'\n          type: string\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    BacktestReportRequest:\n      description: 'Request to read out the report of a backtest.'\n      type: object\n      properties:\n        projectId:\n          description: 'Id of the project to read.'\n          type: integer\n        backtestId:\n          description: 'Specific backtest Id to read.'\n          type: string\n\n    BacktestResult:\n      description: 'Results object class. Results are exhaust from backtest or live algorithms running in LEAN.'\n      type: object\n      properties:\n        RollingWindow:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/AlgorithmPerformance'\n          description: 'Rolling window detailed statistics.'\n        TotalPerformance:\n          $ref: '#/components/schemas/AlgorithmPerformance'\n        AlphaRuntimeStatistics:\n          $ref: '#/components/schemas/AlphaRuntimeStatistics'\n        Charts:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Chart'\n          description: 'Charts updates for the live algorithm since the last result packet.'\n        Orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n          description: 'Order updates since the last result packet.'\n        OrderEvents:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderEvent'\n          description: 'OrderEvent updates since the last result packet.'\n        ProfitLoss:\n          type: object\n          additionalProperties:\n            type: number\n            format: float\n          description: 'Trade profit and loss information since the last algorithm result packet.'\n        Statistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Statistics information sent during the algorithm operations.'\n        RuntimeStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Runtime banner/updating statistics in the title banner of the live algorithm GUI.'\n        ServerStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Server status information, including CPU and RAM usage.'\n\n    BaseLiveAlgorithmSettings:\n      description: 'Base class for settings that must be configured per Brokerage to create new algorithms via the API.'\n      type: object\n      properties:\n        id:\n          description: \"'Interactive' / 'FXCM' / 'Oanda' / 'Tradier' /'PaperTrading'\"\n          type: string\n        user:\n          description: 'Username associated with brokerage.'\n          type: string\n        password:\n          description: 'Password associated with brokerage.'\n          type: string\n        environment:\n          $ref: '#/components/schemas/BrokerageEnvironment'\n        account:\n          description: 'Account of the associated brokerage.'\n          type: string\n          \n    BrokerageEnvironment:\n      description: 'Represents the types of environments supported by brokerages for trading.'\n      type: string\n      enum:\n        - 'live'\n        - 'paper'\n        \n    Cash:\n      description: 'Represents a holding of a currency in cash.'\n      type: object\n      properties:\n        _conversionRate:\n          description: 'Conversion rate for this cash.'\n          type: number\n          format: float\n        _isBaseCurrency:\n          description: 'Is this the base account currency of the cashbook.'\n          type: boolean\n        _invertRealTimePrice:\n          description: 'Invert real time price.'\n          type: boolean\n        Symbol:\n          description: 'Gets the symbol used to represent this cash.'\n          type: string\n        Amount:\n          description: 'Gets or sets the amount of cash held.'\n          type: number\n          format: float\n        CurrencySymbol:\n          description: 'The symbol of the currency, such as $.'\n      \n    CashAmount:\n      description: 'Represents a cash amount which can be converted to account currency using a currency converter.'\n      properties:\n        Amount:\n          description: 'The amount of cash.'\n          type: number\n          format: float\n        Currency:\n          description: 'The currency in which the cash amount is denominated.'\n          type: string\n\n    CashBook:\n      description: 'Keeps track of the different cash holdings of an algorithm. Is also a Dictionary of Cash objects.'\n      type: object\n      properties:\n        _accountCurrency:\n          description: 'The base currency used.'\n          type: string\n        _currencies:\n          description: 'Tracks cash holdings.'\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Cash'\n        TotalValueInAccountCurrency:\n          description: 'The total value of the cash book in units of the base currency.'\n          type: number\n          format: float\n        AccountCurrency:\n          description: 'Gets account currency.'\n          type: string\n      additionalProperties:\n        $ref: '#/components/schemas/Cash'\n        \n    Chart:\n      description: 'Single Parent Chart Object for Custom Charting.'\n      type: object\n      properties:\n        Name:\n          description: 'Name of the Chart.'\n          type: string\n        ChartType:\n          description: 'Type of the Chart, Overlayed or Stacked.'\n          type: string\n          enum:\n            - \"Overlay\"\n            - \"Stacked\"\n        Series:\n          description: 'List of Series Objects for this Chart.'\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Series'\n            \n    ChartPoint:\n      description: 'Location on a chart containing the X-Y location'\n      type: object\n      properties:\n        x:\n          description: 'Time of this chart point: lower case for javascript encoding simplicty.'\n          type: string\n        y:\n          description: 'Value of this chart point:  lower case for javascript encoding simplicty.'\n          type: number\n          format: float\n\n    CreateCompileRequest:\n      description: 'Request to compile a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id we wish to compile.'\n          type: integer\n          \n    CompileResponse:\n      description: 'Response from the compiler on a build event.'\n      type: object\n      properties:\n        compileId:\n          type: string\n          description: 'Compile Id for a sucessful build.'\n        state:\n          type: string\n          enum:\n            - \"InQueue\"\n            - \"BuildSuccess\"\n            - \"BuildError\"\n          description: 'True on successful compile.'\n        logs:\n          type: array\n          items:\n            type: string\n          description: 'Logs of the compilation request.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    CreateBacktestRequest:\n      description: 'Request to create a new backtest.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project Id we sent for compile.'\n          type: integer\n        compileId:\n          description: 'Compile Id for the project to backtest.'\n          type: string\n        backtestName:\n          description: 'Name for the new backtest.'\n          type: string\n\n    CreateLiveAlgorithmRequest:\n      description: 'Request to create a live algorithm.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project Id.'\n          type: integer\n        compileId:\n          description: 'Compile Id.'\n          type: string\n        serverType:\n          description: 'Type of server instance that will run the algorithm.'\n          type: string\n        baseLiveAlgorithmSettings:\n          $ref: '#/components/schemas/BaseLiveAlgorithmSettings'\n        versionId:\n          description: 'The version of the Lean used to run the algorithm. -1 is master, however, sometimes this can create problems with live deployments. If you experience problems using, try specifying the version of Lean you would like to use.'\n          type: string\n          example: \"-1\"\n          \n    CreateProjectRequest:\n      description: 'Request to create a project.'\n      type: object\n      properties:\n        name:\n          description: 'Project name.'\n          type: string\n        language:\n          description: 'Programming langage to use.'\n          type: string\n          enum:\n            - \"C#\"\n            - \"Py\"\n\n    CreateProjectFileRequest:\n      description: 'Request to add a file to a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        name:\n          description: 'The name of the new file.'\n          type: string\n          example: \"main.py\"\n        content:\n          description: 'The content of the new file.'\n          type: string\n          \n    DataDownloadRequest:\n      description: 'Request for a link to downloadable data.'\n      type: object\n      properties:\n        format:\n          description: \"Format for returning data, link or download.\"\n          example: \"link\"\n        ticker:\n          type: string\n        type:\n          $ref: '#/components/schemas/SecurityType'\n        resolution:\n          $ref: '#/components/schemas/Resolution'\n        market:\n          $ref: '#/components/schemas/Market'\n        date:\n          description: 'Date of the data requested yyyyMMdd.'\n          type: string\n          example: \"yyyyMMdd\"\n          \n    DeleteFileRequest:\n      description: 'Request to delete a file in a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        name:\n          description: 'The name of the file that should be deleted.'\n          type: string\n\n    DeleteProjectRequest:\n      description: 'Request to delete a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n\n    DeleteBacktestRequest:\n      description: 'Request to delete a backtest.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id for the backtest we want to delete.'\n          type: integer\n        backtestId:\n          description: 'Backtest id we want to delete.'\n          type: string\n      \n\n          \n    Holding:\n      description: 'Live results object class for packaging live result data.'\n      type: object\n      properties:\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        Type:\n          $ref: '#/components/schemas/SecurityType'\n        CurrencySymbol:\n          description: 'The currency symbol of the holding.'\n          type: string\n          example: '$'\n        AveragePrice:\n          description: 'Average Price of our Holding in the currency the symbol is traded in.'\n          type: number\n          format: float\n        Quantity:\n          description: 'Quantity of the Symbol we hold.'\n          type: number\n          format: float\n        MarketPrice:\n          description: 'Current Market Price of the Asset in the currency the symbol is traded in.'\n          type: number\n          format: float\n        ConversionRate:\n          description: 'Current market conversion rate into the account currency.'\n          type: number\n          format: float\n        MarketValue:\n          description: 'Current market value of the holding.'\n          type: number\n          format: float\n        UnrealizedPnl:\n          description: 'Current unrealized P/L of the holding.'\n          type: number\n          format: float \n\n    InsightScore:\n      description: 'Defines the scores given to a particular insight'\n      type: object\n      properties:\n        UpdatedTimeUtc:\n          description: 'The time these scores were last updated.'\n          type: string\n          format: date-time\n        Direction:\n          description: 'The direction score.'\n          type: number\n          format: float\n        Magnitude:\n          description: 'The magnitude score.'\n          type: number\n          format: float\n        IsFinalScore:\n          description: \"Is the insight past its expiry time and score can be finalized.\"\n          type: boolean\n          \n    LiveAlgorithm:\n      description: 'Live algorithm instance result from the QuantConnect Rest API.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id for the live instance.'\n          type: integer\n        deployId:\n          description: 'Unique live algorithm deployment identifier (similar to a backtest id).'\n          type: string\n        status:\n          $ref: '#/components/schemas/AlgorithmStatus'\n        launched:\n          description: 'Datetime the algorithm was launched in UTC.'\n          type: string\n          format: date-time\n        stopped:\n          description: 'Datetime the algorithm was stopped in UTC, null if its still running.'\n          type: string\n          format: date-time\n        brokerage:\n          description: 'Brokerage'\n          type: string\n          enum:\n            - \"Interactive\"\n            - \"FXCM\"\n            - \"Oanda\"\n            - \"Tradier\"\n            - \"PaperTrading\"\n            - \"Alpaca\"\n            - \"Bitfinex\"\n            - \"Binance\"\n            - \"GDAX\"\n        subscription:\n          description: \"Chart we're subscribed to.\"\n          type: string\n        error:\n          description: 'Live algorithm error message from a crash or algorithm runtime error.'\n          type: string\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    LiveResult:\n      description: 'Live results object class for packaging live result data.'\n      type: object\n      properties:\n        Holdings:\n          description: 'Dictionary of algorithm holdings information.'\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Holding'\n        Cash:\n          $ref: '#/components/schemas/CashBook'\n        AlphaRuntimeStatistics:\n          $ref: '#/components/schemas/AlphaRuntimeStatistics'\n        Charts:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Chart'\n          description: 'Charts updates for the live algorithm since the last result packet.'\n        Orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n          description: 'Order updates since the last result packet.'\n        OrderEvents:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderEvent'\n          description: 'OrderEvent updates since the last result packet.'\n        ProfitLoss:\n          type: object\n          additionalProperties:\n            type: number\n            format: float\n          description: 'Trade profit and loss information since the last algorithm result packet.'\n        Statistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Statistics information sent during the algorithm operations.'\n        RuntimeStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Runtime banner/updating statistics in the title banner of the live algorithm GUI.'\n        ServerStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'Server status information, including CPU and RAM usage.'\n          \n    LiveAlgorithmResults:\n      description: 'Details a live algorithm from the live/read API endpoint.'\n      type: object\n      properties:\n        LiveResults:\n          $ref: '#/components/schemas/LiveResultsData'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    LiveAlgorithmLogs:\n      description: 'Logs from a live algorithm.'\n      type: object\n      properties:\n        LiveAlgorithmLogs:\n          type: array\n          items:\n            type: string\n          description: 'List of logs from the live algorithm.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    LiveAlgorithmList:\n      description: 'List of the live algorithms running which match the requested status.'\n      type: object\n      properties:\n        live:\n          type: array\n          items:\n            $ref: '#/components/schemas/LiveAlgorithm'\n          description: 'Algorithm list matching the requested status.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    LiquidateLiveAlgorithmRequest:\n      description: 'Request to liquidate a live algorithm.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project Id for the live instance we want to liquidate.'\n          type: integer\n\n    LiveList:\n      description: 'List of the live algorithms running which match the requested status.'\n      type: object\n      properties:\n        Algorithms:\n          description: 'Algorithm list matching the requested status.'\n          type: array\n          items:\n              $ref: '#/components/schemas/LiveAlgorithm'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    LiveResultsData:\n      description: 'Holds information about the state and operation of the live running algorithm.'\n      type: object\n      properties:\n        version:\n          description: 'Results version.'\n          type: integer\n        resolution:\n          $ref: '#/components/schemas/ChartResolution'\n        results:\n          $ref: '#/components/schemas/LiveResult'\n\n    Market:\n      description: 'Fungible market of the underlying security.'\n      type: string\n      enum:\n        - 'usa'\n        - 'oanda'\n        - 'fxcm'\n        - 'dukascopy'\n        - 'bitfinex'\n        - 'cmeglobex'\n        - 'nymex'\n        - 'cbot'\n        - 'ice'\n        - 'cboe'\n        - 'nse'\n        - 'comex'\n        - 'cme'\n        - 'sgx'\n        - 'hkfe'\n        - 'gdax'\n        - 'kraken'\n        - 'bitstamp'\n        - 'okcoin'\n        - 'bithumb'\n        - 'binance'\n        - 'poloniex'\n        - 'coinone'\n        - 'hitbtc'\n        - 'bittrex'\n  \n    Order:\n      description: 'Order struct for placing new trade.'\n      type: object\n      properties:\n        Id:\n          description: 'Order ID.'\n          type: integer\n        ContingentId:\n          description: 'Order id to process before processing this order.'\n          type: integer\n        BrokerId:\n          description: 'Brokerage Id for this order for when the brokerage splits orders into multiple pieces.'\n          type: array\n          items:\n            type: string\n        Symbol:\n          $ref: '#/components/schemas/Symbol' \n        Price:\n          description: 'Price of the Order.'\n          type: number\n          format: float\n        PriceCurrency:\n          description: 'Currency for the order price.'\n          type: string\n        Time:\n          description: 'Gets the utc time the order was created.'\n          type: string\n          format: date-time\n        CreatedTime:\n          description: 'Gets the utc time this order was created. Alias for Time.'\n          type: string\n          format: date-time\n        LastFillTime:\n          description: 'Gets the utc time the last fill was received, or null if no fills have been received.'\n          type: string\n          format: date-time\n        LastUpdateTime:\n          description: 'Gets the utc time this order was last updated, or null if the order has not been updated.'\n          type: string\n          format: date-time\n        CanceledTime:\n          description: 'Gets the utc time this order was canceled, or null if the order was not canceled.'\n          type: string\n          format: date-time\n        Quantity:\n          description: 'Number of shares to execute.'\n          type: number\n          format: float\n        Type:\n          description: 'Order type.'\n          type: string\n          enum:\n            - 'Market'\n            - 'Limit'\n            - 'StopMarket'\n            - 'StopLimit'\n            - 'MarketOnOpen'\n            - 'MarketOnClose'\n            - 'OptionExercise'\n        Status:\n          description: 'Status of the Order.'\n          type: string\n          enum:\n            - 'New'\n            - 'Submitted'\n            - 'PartiallyFilled'\n            - 'Filled'\n            - 'Canceled'\n            - 'None'\n            - 'Invalid'\n            - 'CancelPending'\n            - 'UpdateSubmitted'\n        Tag:\n          description: 'Tag the order with some custom data.'\n          type: string\n        SecurityType:\n          $ref: '#/components/schemas/SecurityType'\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Value:\n          description: 'Gets the executed value of this order. If the order has not yet filled, then this will return zero.'\n          type: number\n          format: float\n        OrderSubmissionData:\n          $ref: '#/components/schemas/OrderSubmissionData'\n        IsMarketable:\n          description: 'Returns true if the order is a marketable order.'\n          type: boolean\n        \n    OrderDirection:\n      description: 'Direction of the order.'\n      type: string\n      enum:\n        - 'Buy'\n        - 'Sell'\n        - 'Hold'\n\n    OrderEvent:\n      description: 'Change in an order state applied to user algorithm portfolio'\n      type: object\n      properties:\n        OrderId:\n          description: 'Id of the order this event comes from.'\n          type: integer\n        Id:\n          description: 'The unique order event id for each order.'\n          type: integer\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        UtcTime:\n          description: 'The date and time of this event (UTC).'\n          type: string\n          format: date-time\n        Status:\n          $ref: '#/components/schemas/OrderStatus'\n        OrderFee:\n          $ref: '#/components/schemas/OrderFee'\n        FillPrice:\n          description: 'Fill price information about the order.'\n          type: number\n          format: float\n        FillPriceCurrency:\n          description: 'Currency for the fill price.'\n          type: string\n        FillQuantity:\n          description: 'Number of shares of the order that was filled in this event.'\n          type: number\n          format: float\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Message:\n          description: 'Any message from the exchange.'\n          type: string\n        IsAssignment:\n          description: 'True if the order event is an assignment.'\n          type: boolean\n        StopPrice:\n          description: 'The current stop price.'\n          type: number\n          format: float\n        LimitPrice:\n          description: 'The current limit price.'\n          type: number\n          format: float\n        Quantity:\n          description: 'The current order quantity.'\n          type: number\n          format: float\n\n    OrderFee:\n      description: 'The order fee associated with the specified order.'\n      type: object\n      properties:\n        Value:\n          $ref: '#/components/schemas/CashAmount'\n          \n    OrderSubmissionData:\n      description: 'Stores time and price information available at the time an order was submitted.'\n      type: object\n      properties:\n        BidPrice:\n          description: 'The bid price at an order submission time.'\n          type: number\n          format: float\n        AskPrice:\n          description: 'The ask price at an order submission time.'\n          type: number\n          format: float\n        LastPrice:\n          description: 'The current price at an order submission time.'\n          type: number\n          format: float\n          \n    OrderStatus:\n      description: 'Messaging class signifying a change in an order state and record the change in the users algorithm portfolio.'\n      type: object\n      properties:\n        _fillPrice:\n          description: 'Fill price information about the order.'\n          type: number\n          format: float\n        _fillQuantity:\n          description: 'Number of shares of the order that was filled in this event.'\n          type: number\n          format: float\n        _quantity:\n          description: 'The current order quantity.'\n          type: number\n          format: float\n        _limitPrice:\n          description: 'The current limit price.'\n          type: number\n          format: float\n        _stopPrice:\n          description: 'The current stop price.'\n          type: number\n          format: float\n        OrderId:\n          description: 'Id of the order this event comes from.'\n          type: integer\n        Id:\n          description: 'The unique order event id for this order.'\n          type: integer\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        UtcTime:\n          description: 'The date and time of this event.'\n          type: string\n          format: date-time\n        Status:\n          $ref: '#/components/schemas/OrderStatus'\n        FillPrice:\n          description: 'Fill price information about the order.'\n          type: number\n          format: float\n        FillPriceCurrency:\n          description: 'Currency for the fill price.'\n          type: string\n        FillQuantity:\n          description: 'Number of shares of the order that was filled in this event.'\n          type: number\n          format: float\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Message:\n          description: 'Any message from the exchange.'\n          type: string\n        IsAssignment:\n          description: 'Order event is an allocation of trades from ITM option assignment.'\n          type: boolean\n        StopPrice:\n          description: 'The current stop price.'\n          type: number\n          format: float\n        LimitPrice:\n          description: 'The current limit price.'\n          type: number\n          format: float\n        Quantity:\n          description: 'The current order quantity.'\n          type: number\n          format: float\n            \n    Project:\n      description: 'Response from reading a project by id.'\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: 'Project id.'\n        name:\n          type: string\n          description: 'Name of the project.'\n        created:\n          type: string\n          format: date-time\n          description: 'Date the project was created.'\n        modified:\n          type: string\n          format: date-time\n          description: 'Modified date for the project.'\n        language:\n          type: string\n          enum:\n            - \"C#\"\n            - \"Py\"\n          description: 'Programming language of the project.' \n\n    ProjectFile:\n      description: 'File for a project.'\n      type: object\n      properties:\n        name:\n          description: 'Name of a project file.'\n          type: string\n        content:\n          description: 'Contents of the project file.'\n          type: string\n        modified:\n          description: 'DateTime project file was modified.'\n          type: string\n          format: date-time\n          \n    ProjectFilesResponse:\n      description: 'Response received when reading files from a project.'\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectFile'\n          description: 'List of project file information.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    ProjectListResponse:\n      description: 'Project list response.'\n      type: object\n      properties:\n        projects:\n          type: array\n          items:\n            $ref: '#/components/schemas/Project'\n          description: 'List of projects for the authenticated user.'\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    PortfolioStatistics:\n      description: 'Represents a set of statistics calculated from equity and benchmark samples.'\n      type: object\n      properties:\n        RiskFreeRate:\n          description: 'The current defined risk free annual return rate.'\n          type: number\n          format: float\n        AverageWinRate:\n          description: 'The average rate of return for winning trades.'\n          type: number\n          format: float\n        AverageLossRate:\n          description: 'The average rate of return for losing trades.'\n          type: number\n          format: float\n        ProfitLossRatio:\n          description: 'The ratio of the average win rate to the average loss rate.'\n          type: number\n          format: float\n        WinRate:\n          description: 'The ratio of the number of winning trades to the total number of trades.'\n          type: number\n          format: float\n        LossRate:\n          description: 'The ratio of the number of losing trades to the total number of trades.'\n          type: number\n          format: float\n        Expectancy:\n          description: 'The expected value of the rate of return.'\n          type: number\n          format: float\n        CompoundingAnnualReturn:\n          description: 'Annual compounded returns statistic based on the final-starting capital and years.'\n          type: number\n          format: float\n        Drawdown:\n          description: 'Drawdown maximum percentage.'\n          type: number\n          format: float\n        TotalNetProfit:\n          description: 'The total net profit percentage.'\n          type: number\n          format: float\n        SharpeRatio:\n          description: 'Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.'\n          type: number\n          format: float\n        ProbabilisticSharpeRatio:\n          description: 'Probabilistic Sharpe Ratio is a probability measure associated with the Sharpe ratio. It informs us of the probability that the estimated Sharpe ratio is greater than a chosen benchmark.'\n          type: number\n          format: float\n        Alpha:\n          description: 'Algorithm \"Alpha\" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.'\n          type: number\n          format: float\n        Beta:\n          description: 'Algorithm beta statistic - the covariance between the algorithm and benchmark performance, divided by benchmark variance.'\n          type: number\n          format: float\n        AnnualStandardDeviation:\n          description: 'Annualized standard deviation'\n          type: number\n          format: float\n        AnnualVariance:\n          description: 'Annualized variance statistic calculation using the daily performance variance and trading days per year.'\n          type: number\n          format: float\n        InformationRatio:\n          description: 'Information ratio - risk adjusted return.'\n          type: number\n          format: float\n        TrackingError:\n          description: 'Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked.'\n          type: number\n          format: float\n        TreynorRatio:\n          description: 'Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.'\n          type: number\n          format: float\n\n    ReadFilesRequest:\n      description: 'Request to read all files from a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        fileName:\n          description: 'Optional. The name of the file that should be updated.'\n          type: string \n      required:\n        - projectId\n\n    ReadCompileRequest:\n      description: 'Request to read a compile packet job.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project Id we sent for compile.'\n          type: integer\n        compileId:\n          description: 'Compile Id returned during the creation request.'\n          type: string\n          \n    # Response from reading purchased data\n    ReadDataLinkResponse:\n      description: 'Response from reading purchased data.'\n      type: object\n      properties:\n        link:\n          description: 'Link to the data.'\n          type: string\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    ReadLiveLogsRequest:\n      description: 'Request to read the logs of a specific algorithm.'\n      type: object\n      properties:\n        format:\n          description: 'Format of the log results'\n          example: \"json\"\n        projectId:\n          description: 'Project Id of the live running algorithm.'\n          type: integer\n        algorithmId:\n          description: 'Deploy Id (Algorithm Id) of the live running algorithm.'\n          type: string\n        start:\n          description: 'No logs will be returned before this unixtime.'\n          type: integer\n        end:\n          description: 'No logs will be returned after this unixtime.'\n          type: integer \n          \n    ReadLiveLogsResponse:\n      description: 'Logs from a live algorithm.'\n      type: object\n      properties:\n        LiveLogs:\n          description: 'List of logs from the live algorithm.'\n          type: array\n          items:\n              type: string\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    ReadProjectRequest:\n      description: 'Request to get details about a specific project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Id of the project.'\n          type: integer\n          \n    ReadLiveAlgorithmRequest:\n      description: 'Request to read out a single algorithm.'\n      type: object\n      properties:\n        projectId:\n          description: 'Id of the project to read.'\n          type: integer\n        deployId:\n          description: 'Specific instance id to read.'\n          type: string \n          \n    ListLiveAlgorithmsRequest:\n      description: 'Request for a list of live running algorithms.'\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/AlgorithmStatus'\n        start:\n          description: 'Earliest launched time of the algorithms'\n          type: string\n          format: date-time\n        end:\n          description: 'Latest launched time of the algorithms'\n          type: string\n          format: date-time\n          \n    ReadBacktestRequest:\n      description: 'Request to read a single backtest from a project.'\n      type: object\n      properties:\n        projectId:\n          description: 'Id of the project from which to read one or multiple backtests.'\n          type: integer\n        backtestId:\n          description: 'When provided, specific backtest Id to read.'\n          type: string\n      required:\n        - projectId\n\n    RequestFailedError:\n      description: 'The API method call could not be completed as requested.'\n      type: object\n      properties:\n        success:\n          type: boolean \n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n\n    RestResponse:\n      description: 'Base API response class for the QuantConnect API.'\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: 'Indicate if the API request was successful.'\n        errors:\n          type: array\n          items:\n            type: string\n          description: 'List of errors with the API call.'\n          \n    Resolution:\n      description: 'Resolution of data requested.'\n      type: string\n      enum:\n        - 'Tick'\n        - 'Second'\n        - 'Minute'\n        - 'Hour'\n        - 'Daily'\n\n    ChartResolution:\n      description: 'Storage format of the charting data'\n      type: string\n      enum:\n        - \"10minute\"\n        - \"minute\"\n        - \"second\"\n\n    SecurityType:\n      description: 'Type of tradable security / underlying asset.'\n      type: string\n      enum:\n        - 'Base'\n        - 'Equity'\n        - 'Option'\n        - 'Commodity'\n        - 'Forex'\n        - 'Future'\n        - 'Cfd'\n        - 'Crypto'\n        \n    Series:\n      description: 'Chart Series Object - Series data and properties for a chart.'\n      type: object\n      properties:\n        Name:\n          description: 'Name of the series.'\n          type: string\n        Unit:\n          description: 'Axis for the chart series.'\n          type: string\n        Index:\n          description: 'Index/position of the series on the chart.'\n          type: integer\n        Values:\n          description: 'Values for the series plot. These values are assumed to be in ascending time order (first points earliest, last points latest)'\n          type: array\n          items:\n            $ref: '#/components/schemas/ChartPoint'\n        SeriesType:\n          description: 'Chart type for the series.'\n          type: string\n          enum:\n            - \"Line\"\n            - \"Scatter\"\n            - \"Candle\"\n            - \"Bar\"\n            - \"Flag\"\n            - \"StackedArea\"\n            - \"Pie\"\n            - \"Treemap\"\n        Color:\n          description: 'Color the series.'\n          type: string\n        ScatterMarkerSymbol:\n          description: 'Shape or symbol for the marker in a scatter plot.'\n          type: string\n          enum:\n            - \"none\"\n            - \"circle\"\n            - \"square\"\n            - \"diamond\"\n            - \"triangle\"\n            - \"triangle-down\"\n        _updatePosition:\n          description: 'index of the last fetch update request to only retrieve the \"delta\" of the previous request.'\n          type: integer\n\n    StopLiveAlgorithmRequest:\n      description: 'Request to stop a live algorithm.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project Id for the live instance we want to stop.'\n          type: integer\n          \n    Symbol:\n      description: 'Represents a unique security identifier. This is made of two components, the unique SID and the Value. The value is the current ticker symbol while the SID is constant over the life of a security.'\n      type: object\n      properties:\n        Value:\n          type: string\n          description: 'The current symbol for this ticker.'\n        ID:\n          type: string\n          description: 'The security identifier for this symbol.'\n        Permtick:\n          type: string\n          description: 'The current symbol for this ticker.'\n          \n    Trade:\n      description: 'Represents a closed trade.'\n      type: object\n      properties:\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        EntryTime:\n          description: 'The date and time the trade was opened.'\n          type: string\n          format: date-time\n        EntryPrice:\n          description: 'The price at which the trade was opened (or the average price if multiple entries).'\n          type: number\n          format: float\n        Direction:\n          $ref: '#/components/schemas/TradeDirection'\n        Quantity:\n          description: 'The total unsigned quantity of the trade.'\n          type: number\n          format: float\n        ExitTime:\n          description: 'The date and time the trade was closed.'\n          type: string\n          format: date-time\n        ExitPrice:\n          description: 'The price at which the trade was closed (or the average price if multiple exits).'\n          type: number\n          format: float\n        ProfitLoss:\n          description: 'The gross profit/loss of the trade (as account currency).'\n          type: number\n          format: float\n        TotalFees:\n          description: 'The total fees associated with the trade (always positive value) (as account currency).'\n          type: number\n          format: float\n        MAE:\n          description: 'The Maximum Adverse Excursion (as account currency).'\n          type: number\n          format: float\n        MFE:\n          description: 'The Maximum Favorable Excursion (as account currency).'\n          type: number\n          format: float\n        Duration:\n          description: 'The duration of the trade.'\n          type: string\n        EndTradeDrawdown:\n          description: 'The amount of profit given back before the trade was closed.'\n          type: number\n          format: float\n \n    TradeDirection:\n      description: 'Direction of a trade.'\n      type: string\n      enum:\n        - \"Long\"\n        - \"Short\"\n\n    TradeStatistics:\n      description: 'A set of statistics calculated from a list of closed trades.'\n      type: object\n      properties:\n        StartDateTime:\n          description: 'The entry date/time of the first trade'\n          type: string\n          format: date-time\n        EndDateTime:\n          description: 'The exit date/time of the first trade.'\n          type: string\n          format: date-time\n        TotalNumberOfTrades:\n          description: 'The total number of trades.'\n          type: integer\n        NumberOfWinningTrades:\n          description: 'The total number of winning trades.'\n          type: integer\n        NumberOfLosingTrades:\n          description: 'The total number of losing trades.'\n          type: integer\n        TotalProfitLoss:\n          description: 'The total profit/loss for all trades (as symbol currency).'\n          type: number\n          format: float\n        TotalProfit:\n          description: 'The total profit for all winning trades (as symbol currency).'\n          type: number\n          format: float\n        TotalLoss:\n          description: 'The total loss for all losing trades (as symbol currency).'\n          type: number\n          format: float\n        LargestProfit:\n          description: 'The largest profit in a single trade (as symbol currency).'\n          type: number\n          format: float\n        LargestLoss:\n          description: 'The largest loss in a single trade (as symbol currency).'\n          type: number\n          format: float\n        AverageProfitLoss:\n          description: 'The average profit/loss (a.k.a. Expectancy or Average Trade) for all trades (as symbol currency).'\n          type: number\n          format: float\n        AverageProfit:\n          description: 'The average profit for all winning trades (as symbol currency).'\n          type: number\n          format: float\n        AverageLoss:\n          description: 'The average loss for all winning trades (as symbol currency).'\n          type: number\n          format: float\n        AverageTradeDuration:\n          description: 'The average duration for all trades.'\n          type: string\n        AverageWinningTradeDuration:\n          description: 'The average duration for all winning trades.'\n          type: string\n        AverageLosingTradeDuration:\n          description: 'The average duration for all losing trades.'\n          type: string\n        MedianTradeDuration:\n          description: 'The median duration for all trades.'\n          type: string\n        MedianWinningTradeDuration:\n          description: 'The median duration for all winning trades.'\n          type: string\n        MedianLosingTradeDuration:\n          description: 'The median duration for all losing trades.'\n          type: string\n        MaxConsecutiveWinningTrades:\n          description: 'The maximum number of consecutive winning trades.'\n          type: integer\n        MaxConsecutiveLosingTrades:\n          description: 'The maximum number of consecutive losing trades.'\n          type: integer\n        ProfitLossRatio:\n          description: 'The ratio of the average profit per trade to the average loss per trade.'\n          type: number\n          format: float\n        WinLossRatio:\n          description: 'The ratio of the number of winning trades to the number of losing trades.'\n          type: number\n          format: float\n        WinRate:\n          description: 'The ratio of the number of winning trades to the total number of trades.'\n          type: number\n          format: float\n        LossRate:\n          description: 'The ratio of the number of losing trades to the total number of trades.'\n          type: number\n          format: float\n        AverageMAE:\n          description: 'The average Maximum Adverse Excursion for all trades.'\n          type: number\n          format: float\n        AverageMFE:\n          description: 'The average Maximum Adverse Excursion for all trades.'\n          type: number\n          format: float\n        LargestMAE:\n          description: 'The average Maximum Favorable Excursion for all trades.'\n          type: number\n          format: float\n        LargestMFE:\n          description: 'The largest Maximum Adverse Excursion in a single trade (as symbol currency).'\n          type: number\n          format: float\n        MaximumClosedTradeDrawdown:\n          description: 'The maximum closed-trade drawdown for all trades (as symbol currency).'\n          type: number\n          format: float\n        MaximumIntraTradeDrawdown:\n          description: 'The maximum intra-trade drawdown for all trades (as symbol currency).'\n          type: number\n          format: float\n        ProfitLossStandardDeviation:\n          description: 'The standard deviation of the profits/losses for all trades (as symbol currency).'\n          type: number\n          format: float\n        ProfitLossDownsideDeviation:\n          description: 'The downside deviation of the profits/losses for all trades (as symbol currency).'\n          type: number\n          format: float\n        ProfitFactor:\n          description: 'The ratio of the total profit to the total loss.'\n          type: number\n          format: float\n        SharpeRatio:\n          description: 'The ratio of the average profit/loss to the standard deviation.'\n          type: number\n          format: float\n        SortinoRatio:\n          description: 'The ratio of the average profit/loss to the downside deviation.'\n          type: number\n          format: float\n        ProfitToMaxDrawdownRatio:\n          description: 'The ratio of the total profit/loss to the maximum closed trade drawdown.'\n          type: number\n          format: float\n        MaximumEndTradeDrawdown:\n          description: 'The maximum amount of profit given back by a single trade before exit (as symbol currency).'\n          type: number\n          format: float\n        AverageEndTradeDrawdown:\n          description: 'The average amount of profit given back by all trades before exit (as symbol currency).'\n          type: number\n          format: float\n        MaximumDrawdownDuration:\n          description: 'The maximum amount of time to recover from a drawdown (longest time between new equity highs or peaks).'\n          type: string\n        TotalFees:\n          description: 'The sum of fees for all trades.'\n          type: number\n          format: float\n\n    UpdateBacktestRequest:\n      description: \"Request to update a backtest's name.\"\n      type: object\n      properties:\n        projectId:\n          description: 'Project id for the backtest we want to update.'\n          type: integer\n        backtestId:\n          description: 'Backtest id we want to update.'\n          type: string\n        name:\n          description: \"Name we'd like to assign to the backtest.\"\n          type: string\n        note:\n          description: 'Note attached to the backtest.'\n          type: string\n      required:\n        - projectId\n        - backtestId\n          \n    UpdateFileNameRequest:\n      description: 'Request to update the name of a file.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        oldFileName:\n          description: 'The current name of the new file.'\n          type: string\n        newFileName:\n          description: 'The new name for the file.'\n          type: string\n\n    UpdateFileContentsRequest:\n      description: 'Request to update the contents of a file.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        fileName:\n          description: 'The name of the file that should be updated.'\n          type: string\n        newFileContents:\n          description: 'The new contents of the file.'\n          type: string\n          \n    UpdateProjectRequest:\n      description: 'Update a project name, description or parameters.'\n      type: object\n      properties:\n        projectId:\n          description: 'Project id to which the file belongs.'\n          type: integer\n        name:\n          description: 'The new name for the project.'\n          type: string\n        description:\n          description: 'The new description for the project.'\n"
		}
	},
	"Error": "buildIR: make ir: path \"/backtests/create\": post: responses: 200: contents: application/json: schema: save schema types: save referenced type: reference \"#/components/schemas/OrderStatus\" type name conflict: \"OrderStatus\"",
	"NotImplemented": [
		"sum types with same names"
	]
}