{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/communitiesuk/epb-register-api"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "api/api.yml",
			"byteSize": 97257,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Energy Performance of Buildings Register API\n  description: Public API for EPBR integrations\n  contact:\n    name: MHCLG Digital helpdesk (prefix email subject with \"EPB\")\n    email: mhclg.digital-services@communities.gov.uk\n  version: 1.0.0-rc4\n\nservers:\n  - url: 'https://api.epb-integration.digital.communities.gov.uk/api'\n    description: Integration Service\n  - url: 'https://api.epb-staging.digital.communities.gov.uk/api'\n    description: Staging Service\n  - url: 'https://api.epb.digital.communities.gov.uk/api'\n    description: Production Service\n\ntags:\n  - name: Search\n    description: Search the register given filtering data\n  - name: Manage Assessors\n    description: Manage assessors for a given Scheme\n  - name: Manage Assessments\n    description: Manage EPCs, DECs, RRs and AC-REPORTs\n  - name: Manage Addresses\n    description: Manage addresses in the register\n  - name: Manage Schemes\n    description: Operations for managing schemes in the register\n  - name: Migration\n    description: Endpoints used to migrate information from the legacy system\n  - name: Green Deal\n    description: Endpoints used by the Green Deal register integration, including Renewable Heat Initiative\n  - name: Reports\n    description: Endpoints providing reports, i.e. specific data views of operational interest\n  - name: Kpi-Dashboard\n    description: Endpoints providing data for the KPI dashboard\n\npaths:\n  /schemes:\n    get:\n      tags:\n        - Manage Schemes\n      summary: Get a list of all energy assessment schemes in the register\n      description: List the energy assessment schemes\n      operationId: list-schemes\n      security:\n        - oauth:\n            - 'scheme:list'\n      parameters: []\n      responses:\n        '200':\n          description: List of all schemes\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      schemes:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Scheme'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      tags:\n        - Manage Schemes\n      summary: Add a new energy assessment scheme to the register\n      description: Add an energy assessment scheme\n      operationId: add-scheme\n      security:\n        - oauth:\n            - 'scheme:create'\n      requestBody:\n        description: The scheme to be added\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemeBody'\n      responses:\n        '201':\n          description: Scheme successfully created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Scheme'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: Scheme already exists\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        code:\n                          type: string\n                          example: SCHEME_ALREADY_EXISTS\n                        title:\n                          type: string\n                          example: \u003e-\n                            A scheme with this name already exists in the\n                            register\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /schemes/{schemeId}:\n    put:\n      tags:\n        - Manage Schemes\n      description: Update a scheme\n      operationId: update-scheme\n      responses:\n        '204':\n          description: Update successful\n        '404':\n          description: Scheme not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - in: path\n          name: schemeId\n          required: true\n          description: The ID of the scheme being updated\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemeBody'\n\n  /schemes/{schemeId}/assessors:\n    get:\n      tags:\n        - Manage Assessors\n      summary: List a summary of assessors belonging to a scheme\n      description: List assessors for a scheme\n      operationId: list-scheme-assessors\n      security:\n        - oauth:\n            - 'scheme:assessor:list'\n      parameters:\n        - in: path\n          name: schemeId\n          required: true\n          description: ID of the scheme\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: List of assessors for a scheme\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      assessors:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/AssessorBody'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Scheme not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /schemes/{schemeId}/assessors/{schemeAssessorId}:\n    get:\n      tags:\n        - Manage Assessors\n      summary: Get all details for an individual assessor registration\n      description: Get details for an assessor on a scheme\n      operationId: get-scheme-assessor\n      security:\n        - oauth:\n            - 'scheme:assessor:fetch'\n      parameters:\n        - in: path\n          name: schemeId\n          required: true\n          description: ID of the registering scheme\n          schema:\n            type: integer\n        - in: path\n          name: schemeAssessorId\n          required: true\n          description: The Assessor ID assigned by the registering scheme\n          schema:\n            $ref: '#/components/schemas/AssessorSchemeId'\n      responses:\n        '200':\n          description: Assessor found\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AssessorBody'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessor not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n    put:\n      tags:\n        - Manage Assessors\n      summary: \u003e-\n        Register a new assessor to associate them with your scheme,\n        or update details of an assessor already on your scheme.\n      description: Update or add an assessor\n      operationId: upsert-assessor\n      security:\n        - oauth:\n            - 'scheme:assessor:update'\n      parameters:\n        - in: path\n          name: schemeId\n          required: true\n          description: ID of the registering scheme\n          schema:\n            type: integer\n        - in: path\n          name: schemeAssessorId\n          required: true\n          description: The Assessor ID assigned by the registering scheme\n          schema:\n            $ref: '#/components/schemas/AssessorSchemeId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssessorBody'\n      responses:\n        '200':\n          description: Existing assessor updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AssessorBody'\n        '201':\n          description: New assessor successfully registered\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AssessorBody'\n        '400':\n          description: Problem with assessor registration record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: Assessor already exists on a different scheme\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '422':\n          description: Assessor data is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessors:\n    get:\n      tags:\n        - Search\n        - Manage Assessors\n      summary: 'Search for an assessor by postcode or full name\n                Clients with scope assessor:search can search by\n                  EITHER:\n                  - a postcode (with scope assessor:search) and optional qualification\n                  OR\n                  - full name (with scope assessor:search) and optional qualification type (domestic or non-domestic)\n\n                Clients with scope scheme:assessor:fetch can search by\n                  - firstName AND lastName AND dateOfBirth'\n      description: Search for an assessor\n      operationId: search-assessors\n      security:\n        - oauth:\n            - 'assessor:search'\n            - 'scheme:assessor:fetch'\n      parameters:\n        - in: query\n          name: postcode\n          description: A postcode to search from for an assessor\n          schema:\n            $ref: '#/components/schemas/AddressPostcode'\n        - in: query\n          name: name\n          description: The name of the assessor\n          schema:\n            $ref: '#/components/schemas/AssessorFullName'\n        - in: query\n          name: qualification\n          description: Only show assessors who have this specific qualification\n          schema:\n            $ref: '#/components/schemas/AssessorQualificationSearchOptions'\n        - in: query\n          name: qualificationType\n          description: Only show assessors who have this type of qualification\n          schema:\n            $ref: '#/components/schemas/AssessorQualificationTypeSearchOptions'\n        - in: query\n          name: firstName\n          description: The first name of the assessor\n          schema:\n            $ref: '#/components/schemas/FirstName'\n        - in: query\n          name: lastName\n          description: The last name of the assessor\n          schema:\n            $ref: '#/components/schemas/LastName'\n        - in: query\n          name: dateOfBirth\n          description: The date of birth of the assessor\n          schema:\n            $ref: '#/components/schemas/DateOfBirth'\n      responses:\n        '200':\n          description: List of assessors matching the search criteria\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AssessorSearchResults'\n                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'\n                  - $ref: '#/components/schemas/AssessorBody'\n        '400':\n          description: Invalid query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /search/addresses:\n    get:\n      tags:\n        - Search\n        - Manage Addresses\n      summary: 'Search for an address by (optional) type and\n                EITHER:\n                - a postcode (with optional building name or number)\n                OR\n                - a street AND town\n                OR\n                - a building reference number (UPRN or RRN)'\n      description: Search for usable addresses for an assessment\n      operationId: search-addresses\n      security:\n        - oauth:\n            - 'search:addresses'\n      parameters:\n        - in: query\n          name: postcode\n          description: The postcode of the address being searched for\n          schema:\n            $ref: '#/components/schemas/AddressPostcode'\n        - in: query\n          name: buildingNameNumber\n          description: The building name or number being searched for\n          schema:\n            type: string\n          example: '47'\n        - in: query\n          name: street\n          description: The street of the address being searched for\n          schema:\n            type: string\n          example: 'High Road'\n        - in: query\n          name: town\n          description: The city or town of the address being searched for\n          schema:\n            $ref: '#/components/schemas/AddressTown'\n          example: 'Woking'\n        - in: query\n          name: addressId\n          description: A known UPRN or RRN to fetch a single address\n          schema:\n            type: string\n          example: 'UPRN-716375734512'\n        - in: query\n          name: addressType\n          description: Domestic or commercial address\n          schema:\n            type: string\n            enum:\n              - DOMESTIC\n              - COMMERCIAL\n      responses:\n        '200':\n          description: Address search results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddressSearchResults'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/search:\n    get:\n      tags:\n        - Search\n        - Manage Assessments\n      summary: Search for assessments\n      description: 'Search for an assessment by\n                    EITHER:\n                     - a postcode AND assessment type\n                    OR\n                     - a street AND town AND assessment type\n                    OR\n                     - an assessment reference number (RRN)'\n      operationId: search-assessments\n      security:\n        - oauth:\n            - 'assessment:search'\n      parameters:\n        - in: query\n          name: postcode\n          description: The postcode of the address being searched for\n          schema:\n            $ref: '#/components/schemas/AddressPostcode'\n          example: 'SW1A 2AA'\n        - in: query\n          name: assessment_type[]\n          description: The type(s) of assessment being searched for\n          schema:\n            $ref: '#/components/schemas/AssessmentType'\n          example: 'RdSAP'\n        - in: query\n          name: street_name\n          description: The street of the assessment being searched for\n          schema:\n            type: string\n          example: 'High Road'\n        - in: query\n          name: town\n          description: The city or town of the assessment being searched for\n          schema:\n            $ref: '#/components/schemas/AddressTown'\n          example: 'Woking'\n        - in: query\n          name: assessment_id\n          description: The RRN of the assessment being searched for\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n          example: '1234-2345-3456-4567-6789'\n      responses:\n        '200':\n          description: Assessment search results\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      assessments:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/EnergyAssessmentSearchResult'\n        '400':\n          description: Bad request - missing or malformed parameters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments:\n    post:\n      tags:\n        - Manage Assessments\n        - Migration\n      summary: Lodge or migrate a new assessment\n      description: 'Single endpoint for POSTing all new lodgements.\n                    It will accept as XML payload:\n                    * A single \u003cReport\u003e for a domestic RdSAP assessment\n                    * A single \u003cReport\u003e for a domestic SAP assessment\n                    * Non-domestic EPC and Recommendation report in a single XML\n                      payload with two \u003cReport\u003e elements\n                    * Air Conditioning certificate and AC-report in a single XML\n                      payload with two \u003cReport\u003e elements\n                    * A single \u003cReport\u003e for DEC\n                    * A single \u003cReport\u003e for DEC recommendation report\n                    * DEC and DEC-RR in a single XML payload with two \u003cReport\u003e\n                      elements'\n      operationId: lodge-assessment\n      security:\n        - oauth:\n            - 'assessment:lodge'\n            - 'migrate:assessment'\n      parameters:\n        - in: query\n          name: override\n          description: 'Only set to true after assessor has manually confirmed\n                        desire to override lodgement rules. This action will be\n                        logged.'\n          schema:\n            type: boolean\n          example: true\n        - in: query\n          name: migrated\n          description: 'For use by EPB register only. Set to true if migrating a\n                        previous lodgement.\n                        Requires migrate:assessment scope in client credentials.'\n          schema:\n            type: boolean\n          example: true\n      requestBody:\n        content:\n          application/xml+RdSAP-Schema-20.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n          application/xml+SAP-Schema-18.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n          application/xml+RdSAP-Schema-NI-20.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n          application/xml+SAP-Schema-NI-18.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n          application/xml+CEPC-8.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n          application/xml+CEPC-NI-8.0.0:\n            schema:\n              $ref: '#/components/schemas/Empty'\n      responses:\n        '201':\n          description: New assessment(s) successfully lodged\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      assessments:\n                        type: array\n                        items:\n                          type: string\n                          properties:\n                            assessmentId:\n                              $ref: '#/components/schemas/AssessmentId'\n                        example: [\"9876-9876-9876-9876-9876\", \"8765-8765-8765-8765-8765\"]\n                  meta:\n                    type: object\n                    properties:\n                      links:\n                        type: object\n                        properties:\n                          assessments:\n                            type: array\n                            items:\n                              type: string\n                            example: [\"/api/assessments/9876-9876-9876-9876-9876\", \"/api/assessments/8765-8765-8765-8765-8765\"]\n        '400':\n          description: Bad request - assessment violates lodgement rules. Re-POST to the override link to lodge anyway.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  errors:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        code:\n                          type: string\n                          example: \"FLOOR_AREA_LESS_THAN_ZERO\"\n                        title:\n                          type: string\n                          example: \"Floor-Area must be greater than zero\"\n                  meta:\n                    type: object\n                    properties:\n                      links:\n                        type: object\n                        properties:\n                          override:\n                            type: string\n                            example: \"/assessments?override=true\"\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: Assessment with that assessmentId already exists - retry with different RRN\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}:\n    get:\n      tags:\n        - Manage Assessments\n      summary: Get an Energy Performance Assessment\n      description: Get an assessment's XML\n      operationId: get-assessment-xml\n      security:\n        - oauth:\n            - 'assessment:fetch'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Energy Performance Assessment\n          content:\n            application/xml:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Empty'\n        '400':\n          description: Bad request - The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: \u003e-\n            Assessment no long accessible\n            (could have been cancelled or marked not for issue)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}/summary:\n    get:\n      tags:\n        - Manage Assessments\n      summary: Get assessment details in use by frontend in JSON format\n      description: Get summary of assessment for use by frontend\n      operationId: get-assessment-summary\n      security:\n        - oauth:\n            - 'assessment:fetch'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Energy Performance Assessment\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    oneOf:\n                      - $ref: '#/components/schemas/DomesticEnergyAssessmentSummary'\n                      - $ref: '#/components/schemas/CommercialEnergyAssessmentSummary'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '400':\n          description: Bad request - The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: \u003e-\n            Assessment no long accessible\n            (could have been cancelled or marked not for issue)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}/meta-data:\n    get:\n      tags:\n        - Manage Assessments\n      summary: Get assessment metadata attributes used by data-warehouse in JSON format\n      description: Get assessment metadata\n      operationId: get-assessment-metadata\n      security:\n        - oauth:\n            - 'assessmentmetadata:fetch'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Energy Performance Assessment\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/EnergyAssessmentMetadata'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '400':\n          description: Bad request - The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}/opt-out:\n    put:\n      tags:\n        - Manage Assessments\n      summary: Mark an assessment as opted in or out from search and open data publication\n      description: Update opt-out status of an assessment\n      operationId: update-assessment-optout-status\n      security:\n        - oauth:\n            - 'admin:opt_out'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being opted in or out'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                optOut:\n                  type: boolean\n                  example: true\n      responses:\n        '200':\n          description: Confirmation of opt-out status update\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Your opt out request was successful\"\n                  meta:\n                    type: object\n        '400':\n          description: Opt-out value should be a boolean\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}/address-id:\n    put:\n      tags:\n        - Manage Assessments\n      summary: Update the address ID used to link this assessment with other assessments\n      description: Update the canonical address ID for an assessment\n      operationId: update-canonical-address-id\n      security:\n        - oauth:\n            - 'admin:update-address-id'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being updated'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                addressId:\n                  $ref: '#/components/schemas/AddressId'\n      responses:\n        '200':\n          description: Confirmation of successful update\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Address ID for assessment 1234-1234-1234-1234-1234 has been updated successfully\"\n                  meta:\n                    type: object\n        '400':\n          description: Bad request - the assessmentId or addressId is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /dec_summary/{assessmentId}:\n    get:\n      tags:\n        - Manage Assessments\n      summary: Get XML from DEC that can be used by AECOM software\n      description: Get the XML for a DEC\n      operationId: get-dec-xml\n      security:\n        - oauth:\n            - 'dec_summary:fetch'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Energy Performance Assessment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Empty'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Assessment is not a DEC\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '400':\n          description: Bad request - The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: \u003e-\n            Assessment no long accessible\n            (could have been cancelled or marked not for issue)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /assessments/{assessmentId}/status:\n    post:\n      tags:\n        - Manage Assessments\n      summary: Update the status of an assessment\n      description: Update assessment status\n      operationId: update-assessment-status\n      security:\n        - oauth:\n            - 'assessment:lodge'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being added, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                status:\n                  $ref: '#/components/schemas/AssessmentStatus'\n      responses:\n        '200':\n          description: Assessment report status updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      status:\n                        $ref: '#/components/schemas/AssessmentStatus'\n        '400':\n          description: Bad request - assessmentId parameter was badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: \u003e-\n            Forbidden - the assessment with that assessmentId does not\n            belong to your scheme\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment with that assessmentId not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: \u003e-\n            Assessment with that assessmentId has already been\n            cancelled or marked not for issue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '422':\n          description: Request data is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /reports/{schemeId}/assessors/status:\n      get:\n        tags:\n          - Manage Assessors\n          - Reports\n        summary: \u003e-\n          Report of assessors who were suspended and struck off on a particular\n          day filtered by matching a last name and date of birth to an assessor registered by the queuing scheme\n        description: Get report of assessors who were struck off on a particular day\n        operationId: get-assessor-status-report\n        security:\n          - oauth:\n              - 'report:assessor:status'\n        parameters:\n          - in: path\n            name: schemeId\n            required: true\n            description: The ID of the scheme being updated\n            schema:\n              type: integer\n          - in: query\n            name: date\n            required: true\n            description: The date of the report\n            schema:\n              type: string\n              format: date\n              example: '2020-01-30'\n        responses:\n          '200':\n            description: Report returned successfully\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    data:\n                      type: object\n                      properties:\n                        assessorStatusEvents:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/AssessorQualificationChangeEvent'\n          '403':\n            description: Forbidden\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorResponse'\n          '404':\n            description: Report not found, likely because the date is in the future\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorResponse'\n          '503':\n            description: Service unavailable\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorResponse'\n\n  /reports/assessors/lookup:\n    get:\n      tags:\n        - Manage Assessors\n        - Reports\n      summary: \u003e-\n        Look up energy assessor records to check all scheme registrations\n      description: Look up scheme assessor entries for an individual\n      operationId: lookup-assessors-across-schemes\n      security:\n        - oauth:\n            - 'report:assessor:status'\n      parameters:\n        - in: query\n          name: firstName\n          required: true\n          description: The first name of the assessor\n          schema:\n            type: string\n            example: 'Richard'\n        - in: query\n          name: lastName\n          required: true\n          description: The last name of the assessor\n          schema:\n            type: string\n            example: 'James'\n        - in: query\n          name: dateOfBirth\n          required: true\n          description: The date of birth of the assessor\n          schema:\n            type: string\n            format: date\n            example: '1971-08-18'\n      responses:\n        '200':\n          description: \u003e-\n            Assessor registration list successfully returned\n            (an empty list is returned if there are no matching assessors)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssessorSearchResults'\n        '400':\n          description: Bad request - probably a missing or badly formed parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /greendeal/assessments/{assessmentId}:\n    get:\n      tags:\n        - Green Deal\n      summary: 'Get the Green Deal details from the assessment with reference\n                {assessmentId}'\n      description: Get any Green Deals against an assessment\n      operationId: get-assessment-green-deals\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Green Deal Energy Performance data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      assessment:\n                        $ref: '#/components/schemas/AssessmentGreenDealDetails'\n        '400':\n          description: The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: Gone - Assessment with ID assessmentId exists but has been cancelled/marked not for issue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /greendeal/assessments/{assessmentId}/xml:\n    get:\n      tags:\n        - Green Deal\n      summary: 'Get the redacted RdSAP XML for the assessment with reference\n                {assessmentId}. The response will consist of redacted EPC XML\n                that consists of the XML document as originally lodged, with the\n                exception of the following redacted elements and their children:\n                \u003cIdentification\u003e\n                \u003cConfiguration\u003e\n                \u003cCalculation-Software-Name\u003e\n                \u003cCalculation-Software-Version\u003e\n                \u003cInspection-Date\u003e\n                \u003cCompletion-Date\u003e\n                \u003cRegistration-Date\u003e\n                \u003cStatus\u003e\n                \u003cRestricted-Access\u003e\n                \u003cTransaction-Type\u003e\n                \u003cSeller-Commission-Report\u003e\n                \u003cEnergy-Assessor\u003e\n                \u003cAddress\u003e\n                \u003cRelated-Party-Disclosure\u003e\n                \u003cInsurance-Details\u003e'\n      description: Get RdSAP assessment XML with sensitive nodes redacted\n      operationId: get-redacted-assessment-xml\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: Green Deal redacted EPC XML data\n          content:\n            application/xml:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Empty'\n        '400':\n          description: 'The assessmentId parameter is badly formatted, or does\n                        not relate to an RdSAP assessment'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: 'Gone - Assessment with ID assessmentId exists but has\n                        been cancelled/marked not for issue'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /greendeal/rhi/assessments/{assessmentId}/latest:\n    get:\n      tags:\n        - Green Deal\n      summary: 'Get the RHI details of the most recent Energy Performance\n                Assessment for the address of the assessment with reference\n                {assessmentId}'\n      description: Get RHI details for assessment address's most recent assessment\n      operationId: get-latest-rhi\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      responses:\n        '200':\n          description: RHI Energy Performance data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      assessment:\n                        $ref: '#/components/schemas/AssessmentRHIDetails'\n        '400':\n          description: The assessmentId parameter is badly formatted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Assessment with this ID not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: Assessment with this ID exists but has been CANCELLED\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /greendeal/disclosure/assessments/{assessmentId}/plans:\n    post:\n      tags:\n        - Green Deal\n      summary: 'Disclose new live Green Deal plan to appear on EPC with RRN\n                {assessmentId}'\n      description: Accept disclosure of new live Green Deal plan against assessment\n      operationId: accept-green-deal-disclosure\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: assessmentId\n          required: true\n          description: 'The ID of the assessment being requested, usually RRN'\n          schema:\n            $ref: '#/components/schemas/AssessmentId'\n      requestBody:\n        description: Green Deal disclosure data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GreenDealPlan'\n      responses:\n        '201':\n          description: Green Deal disclosure successfully added\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/GreenDealPlan'\n        '400':\n          description: Problem with Green Deal record request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Energy assessment with RRN assessmentId can not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: Plan with the submitted ID already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '410':\n          description: Assessment has been cancelled or not for issue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /greendeal/disclosure/plans/{planId}:\n    put:\n      tags:\n        - Green Deal\n      summary: 'Update an existing Green Deal plan'\n      description: Update a Green Deal plan\n      operationId: update-green-deal-plan\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: planId\n          required: true\n          description: 'The ID of the plan being updated'\n          schema:\n            $ref: '#/components/schemas/GreenDealPlanId'\n      requestBody:\n        description: Green Deal disclosure data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GreenDealPlan'\n      responses:\n        '200':\n          description: Green Deal disclosure successfully updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/GreenDealPlan'\n        '400':\n          description: Problem with Green Deal record request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Green Deal plan with ID planId can not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '409':\n          description: Identifier in request body doesn't match the planId in the URL\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Green Deal\n      summary: 'Delete an existing Green Deal plan'\n      description: Delete an existing Green Deal plan\n      operationId: delete-green-deal-plan\n      security:\n        - oauth:\n            - 'greendeal:plans'\n      parameters:\n        - in: path\n          name: planId\n          required: true\n          description: 'The ID of the plan being deleted'\n          schema:\n            $ref: '#/components/schemas/GreenDealPlanId'\n      responses:\n        '204':\n          description: Green Deal disclosure successfully deleted\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Green Deal plan with ID planId can not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /reports/assessments/region-and-type:\n    get:\n      tags:\n        - Reports\n      summary: 'Gets the data regarding matching postcodes to regions'\n      description: Get region and type assessment data\n      operationId: get-region-and-type-report\n      security:\n        - oauth:\n            - 'reporting:assessment_by_type_and_region'\n      parameters:\n        - in: query\n          name: startDate\n          required: true\n          description: 'The start date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-11-01'\n        - in: query\n          name: endDate\n          required: true\n          description: 'The end date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-12-01'\n      responses:\n        '200':\n          description: ONS postcodes\n          content:\n            text/csv: {}\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /reports/assessments/scheme-and-type:\n    get:\n      tags:\n        - Reports\n      summary: \u003e-\n        Creates a report of the number of assessments lodged between\n        two dates broken down by assessment type and lodging scheme\n      description: Get report of assessment counts split by type and scheme\n      operationId: get-assessment-counts-by-scheme-and-type-report\n      security:\n        - oauth:\n            - 'reporting:assessment_by_scheme_and_type'\n      parameters:\n        - in: query\n          name: startDate\n          required: true\n          description: 'The start date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-11-01'\n        - in: query\n          name: endDate\n          required: true\n          description: 'The end date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-12-01'\n      responses:\n        '200':\n          description: Report of lodgements by type and scheme\n          content:\n            text/csv:\n              example: \u003e-\n                number_of_assessments,scheme_name,type_of_assessment\n                1,test scheme,AC-CERT\n                1,test scheme,AC-REPORT\n                1,test scheme,AC-REPORT+CERT\n                1,test scheme,CEPC\n                1,test scheme,CEPC+RR\n                1,test scheme,CEPC-RR\n                1,test scheme,DEC\n                1,test scheme,DEC+RR\n                1,test scheme,DEC-RR\n                1,test scheme,RdSAP\n                1,test scheme,SAP\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /reports/assessments/scheme-and-type/rrn:\n    get:\n      tags:\n        - Reports\n      summary: \u003e-\n        Creates a report of lodgements made by each assessor scheme used for invoicing\n      description: Get a report of lodgements by scheme\n      operationId: get-assessments-by-scheme-report\n      security:\n        - oauth:\n            - 'reporting:assessment_by_scheme_and_type'\n      parameters:\n        - in: query\n          name: start_date\n          required: true\n          description: 'The start date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-11-01'\n        - in: query\n          name: end_date\n          required: true\n          description: 'The end date of the range'\n          schema:\n            type: string\n            format: date\n            example: '2020-12-01'\n        - in: query\n          name: scheme_id\n          required: false\n          description: 'Filter by scheme id'\n          schema:\n            type: integer\n            example: 1\n      responses:\n        '200':\n          description: Report of lodgements by type and scheme\n          content:\n            text/csv:\n              example: \u003e-\n                rrn,scheme_name,type_of_assessment,related_rrn,lodged_at\n                0000-0000-0000-0000-0001,Quidos Limited,RdSAP,,2021-07-01 00:02:45 UTC\n                0000-0000-0000-0000-0002,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:06:07 UTC\n                0000-0000-0000-0000-0003,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:07:17 UTC\n                0000-0000-0000-0000-0004,Stroma Certification Ltd,RdSAP,,2021-07-01 00:07:20 UTC\n                0000-0000-0000-0000-0004,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:08:13 UTC\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /statistics:\n    get:\n      tags:\n          - Kpi-Dashboard\n      summary: \u003e-\n        Gets the statistics data used to create the KPI dashboard page for the front end. The JSON contains the assessment statistics per month per type\n      description: Get statistics data for epcs\n      operationId: get-assessment-statistics-data\n      security:\n        - oauth:\n            - 'statistics:fetch'\n      responses:\n        '200':\n          description: Statistics of lodgements by type and month\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MonthAssessmentStatistic'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server error\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /user-satisfaction:\n    put:\n      tags:\n        - Update user satisfaction\n      summary: send user satisfaction data for a month to be be used on KPI dashboard\n      description: Update user satisfaction\n      operationId: put-user-satisfaction\n      security:\n        - oauth:\n            - 'admin:upload_stats'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserSatisfaction\"\n      responses:\n        '200':\n          description: Confirmation of successful update\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"User satisfaction has been saved\"\n                  meta:\n                    type: object\n        '400':\n            description: Bad request\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorResponse'\n        '503':\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\ncomponents:\n  securitySchemes:\n    oauth:\n      type: oauth2\n      description: This API uses OAuth 2 with the client credentials grant flow\n      flows:\n        clientCredentials:\n          tokenUrl: /auth/oauth/token\n          scopes:\n            'scheme:create': Create a new scheme on the register\n            'scheme:list': List schemes on the register\n            'scheme:assessor:list': List assessors\n            'scheme:assessor:update': Add or Update assessors\n            'scheme:assessor:fetch': Get full details of an individual assessor\n            'assessment:fetch': Get full details of an individual assessment\n            'assessmentmetadata:fetch': Get the additional attributes we require for assessments\n            'assessment:lodge': Lodge a new assessment with the register\n            'assessment:search': Search the register for an assessment\n            'assessor:search': Search the register for an assessor\n            'address:search': List addresses that match a given search criteria, along with existing assessments\n            'migrate:assessment': Migrate an assessment to the register\n            'migrate:assessor': Migrate an assessor to the register\n            'migrate:address': Migrate an address to the register\n            'report:assessor:status': Get a report of changes to assessors status for a given date\n            'greendeal:plans': Access all services necessary for the Green Deal register integration\n\n  schemas:\n    # Addresses\n    Address:\n      type: object\n      properties:\n        source:\n          $ref: '#/components/schemas/AddressSource'\n        line1:\n          $ref: '#/components/schemas/AddressLine1'\n        line2:\n          type: string\n          example: ''\n        line3:\n          type: string\n          example: ''\n        line4:\n          type: string\n          example: ''\n        town:\n          $ref: '#/components/schemas/AddressTown'\n        postcode:\n          $ref: '#/components/schemas/AddressPostcode'\n\n    AddressDetail:\n      allOf:\n        - $ref: '#/components/schemas/Address'\n        - type: object\n          properties:\n            addressId:\n              $ref: '#/components/schemas/AddressId'\n            existingAssessments:\n              type: array\n              items:\n                type: object\n                properties:\n                  assessmentId:\n                    $ref: '#/components/schemas/AssessmentId'\n                  assessmentStatus:\n                    $ref: '#/components/schemas/AssessmentStatus'\n                  assessmentType:\n                    $ref: '#/components/schemas/AssessmentType'\n\n    AddressId:\n      type: string\n      description: 'An identifier for an address, which is one of:\n                    * An OS gazetteer UPRN (prefixed UPRN-)\n                    * The reference number of the report this address appears on (prefixed RRN-)'\n      example: 'UPRN-716375734512'\n\n    AddressLine1:\n      type: string\n      example: '2 Marsham Street'\n\n    AddressTown:\n      type: string\n      example: 'London'\n\n    AddressPostcode:\n      type: string\n      example: 'SW1P 4JA'\n\n    AddressSource:\n      type: string\n      enum:\n        - GAZETTEER\n        - PREVIOUS_ASSESSMENT\n      example: 'GAZETTEER'\n\n    SchemaName:\n      type: string\n      description: 'An identifier for the versioned XML schema used for the lodged assessment XML'\n      example: 'RdSAP-Schema-20.0.0'\n\n    AddressSearchResults:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            addresses:\n              type: array\n              items:\n                $ref: '#/components/schemas/AddressDetail'\n        meta:\n          type: object\n          properties:\n            filters:\n              type: object\n              description: \u003e-\n                The filters object will contain the search parameters provided\n                in the initial request.\n\n    # Assessors\n    Assessor:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: 'Joe'\n        lastName:\n          type: string\n          example: 'Bloggs'\n        middleNames:\n          type: string\n          example: 'T'\n        contactDetails:\n          type: object\n          properties:\n            telephoneNumber:\n              type: string\n              maxLength: 256\n              example: '01632 960375'\n            email:\n              type: string\n              format: email\n              example: 'j.t.bloggs@example.com'\n        qualifications:\n          $ref: '#/components/schemas/AssessorQualifications'\n        alsoKnownAs:\n          type: string\n          example: 'Joey'\n\n    AssessorBody:\n      allOf:\n        - $ref: '#/components/schemas/Assessor'\n        - type: object\n          properties:\n            dateOfBirth:\n              type: string\n              format: date\n              example: '1980-01-10'\n            searchResultsComparisonPostcode:\n              $ref: '#/components/schemas/AddressPostcode'\n            address:\n              $ref: '#/components/schemas/AssessorAddress'\n            companyDetails:\n              $ref: '#/components/schemas/CompanyDetails'\n\n    AssessorDetail:\n      allOf:\n        - $ref: '#/components/schemas/Assessor'\n        - type: object\n          properties:\n            assessorSchemeId:\n              $ref: '#/components/schemas/AssessorSchemeId'\n            registeredBy:\n              $ref: '#/components/schemas/Scheme'\n\n    AssessorSearchResults:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            assessors:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/AssessorDetail'\n\n    AssessorSearchByPostcodeResults:\n      allOf:\n        - $ref: '#/components/schemas/AssessorSearchResults'\n        - type: object\n          properties:\n            data:\n              type: object\n              properties:\n                assessors:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      distanceFromPostcodeInMiles:\n                        type: number\n                        example: 0.2\n\n    AssessorSchemeId:\n      type: string\n      example: 'TEST000001'\n\n    AssessorAddress:\n      type: object\n      properties:\n        addressLine1:\n          $ref: '#/components/schemas/AddressLine1'\n        addressLine2:\n          type: string\n          example: ''\n        addressLine3:\n          type: string\n          example: ''\n        addressLine4:\n          type: string\n          example: ''\n        town:\n          $ref: '#/components/schemas/AddressTown'\n        postcode:\n          $ref: '#/components/schemas/AddressPostcode'\n\n    CompanyDetails:\n      type: object\n      properties:\n        companyRegNo:\n          type: string\n          example: ''\n        companyAddressLine1:\n          $ref: '#/components/schemas/AddressLine1'\n        companyAddressLine2:\n          type: string\n          example: ''\n        companyAddressLine3:\n          type: string\n          example: ''\n        companyTown:\n          $ref: '#/components/schemas/AddressTown'\n        companyPostcode:\n          $ref: '#/components/schemas/AddressPostcode'\n        companyWebsite:\n          type: string\n          example: ''\n        companyTelephoneNumber:\n          type: string\n          example: ''\n        companyEmail:\n          type: string\n          example: ''\n        companyName:\n          type: string\n          example: ''\n\n    AssessorQualifications:\n      type: object\n      properties:\n        domesticRdSap:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        domesticSap:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticDec:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticNos3:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticNos4:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticNos5:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticSp3:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        nonDomesticCc4:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n        gda:\n          $ref: '#/components/schemas/AssessorQualificationStatus'\n\n    AssessorQualificationSearchOptions:\n      type: string\n      example: domesticRdSap\n      enum:\n        - domesticRdSap\n        - domesticSap\n        - nonDomesticDec\n        - nonDomesticNos3\n        - nonDomesticNos4\n        - nonDomesticNos5\n        - nonDomesticSp3\n        - nonDomesticCc4\n        - gda\n\n    AssessorQualificationTypeSearchOptions:\n      type: string\n      example: domestic\n      enum:\n        - domestic\n        - nonDomestic\n\n    AssessorQualificationStatus:\n      type: string\n      enum:\n        - ACTIVE\n        - INACTIVE\n        - STRUCKOFF\n        - SUSPENDED\n      example: 'ACTIVE'\n\n    AssessorQualificationChangeEvent:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: \"Joe\"\n        middleNames:\n          type: string\n          example: \"T\"\n        lastName:\n          type: string\n          example: \"Bloggs\"\n        assessorSchemeId:\n          type: string\n          example: \"TEST00001\"\n        dateOfBirth:\n          type: string\n          example: \"1974-12-28\"\n        qualificationChange:\n          type: object\n          properties:\n            qualificationType:\n              type: string\n              example: domesticEnergyPerformanceCertificates\n            previousStatus:\n              $ref: '#/components/schemas/AssessorQualificationStatus'\n            newStatus:\n              allOf:\n                - $ref: '#/components/schemas/AssessorQualificationStatus'\n                - example: 'STRUCKOFF'\n\n    AssessorFullName:\n      type: string\n      example: 'Joe Bloggs'\n\n    FirstName:\n      type: string\n      example: 'Joe'\n\n    LastName:\n      type: string\n      example: 'Bloggs'\n\n    DateOfBirth:\n      type: string\n      format: date\n\n    # Assessments\n    AssessmentId:\n      type: string\n      example: '0000-0000-0000-0000-0000'\n\n    AssessmentStatus:\n      type: string\n      example: ENTERED\n      enum:\n        - ENTERED\n        - EXPIRED\n        - CANCELLED\n        - NOT_FOR_ISSUE\n\n    AssessmentType:\n      type: string\n      example: 'RdSAP'\n      enum:\n        - RdSAP\n        - SAP\n        - CEPC\n        - CEPC-RR\n        - DEC\n        - DEC-RR\n        - AC-CERT\n        - AC-REPORT\n\n    EnergyAssessmentSearchResult:\n      type: object\n      properties:\n        dateOfAssessment:\n          type: string\n          format: date\n          description: The date that the assessor carried out the assessment of the property\n        dateOfRegistration:\n          type: string\n          format: date\n          description: The date that the assessment was submitted to the register\n        dateOfExpiry:\n          type: string\n          format: date\n          description: The date that the certificate expires\n        typeOfAssessment:\n          $ref: '#/components/schemas/AssessmentType'\n        assessmentId:\n          $ref: '#/components/schemas/AssessmentId'\n        currentEnergyEfficiencyRating:\n          type: integer\n          minimum: 1\n          maximum: 100\n          example: 62\n          description: The current energy rating to be submitted to the Register\n        currentEnergyEfficiencyBand:\n          type: string\n          example: 'c'\n          description: The band, from a to g, the current Energy Rating falls within\n        optOut:\n          type: boolean\n          example: false\n        addressId:\n          $ref: '#/components/schemas/AddressId'\n        addressLine1:\n          $ref: '#/components/schemas/AddressLine1'\n        addressLine2:\n          type: string\n          example: ''\n        addressLine3:\n          type: string\n          example: ''\n        addressLine4:\n          type: string\n          example: ''\n        town:\n          $ref: '#/components/schemas/AddressTown'\n        postcode:\n          $ref: '#/components/schemas/AddressPostcode'\n        status:\n          $ref: '#/components/schemas/AssessmentStatus'\n        createdAt:\n          type: string\n          format: date-time\n          nullable: true\n          description: Date and time of lodgement in UTC timezone for assessments post September 2020\n          example: '2020-09-19T09:00:00Z'\n\n    CommercialEnergyAssessmentSummary:\n      $ref: '#/components/schemas/Empty'\n\n    DomesticEnergyAssessmentSummary:\n      type: object\n      properties:\n        typeOfAssessment:\n          $ref: '#/components/schemas/AssessmentType'\n        assessmentId:\n          $ref: '#/components/schemas/AssessmentId'\n        dateOfExpiry:\n          type: string\n          format: date\n          description: The date that the certificate expires\n        dateOfAssessment:\n          type: string\n          format: date\n          description: The date that the assessor carried out the assessment of the property\n        dateOfRegistration:\n          type: string\n          format: date\n          description: The date that the assessment was submitted to the Register\n        dateRegistered:\n          type: string\n          format: date\n          description: The date that the assessment was submitted to the Register\n        addressLine1:\n          $ref: '#/components/schemas/AddressLine1'\n        addressLine2:\n          type: string\n          example: ''\n        addressLine3:\n          type: string\n          example: ''\n        addressLine4:\n          type: string\n          example: ''\n        town:\n          $ref: '#/components/schemas/AddressTown'\n        postcode:\n          $ref: '#/components/schemas/AddressPostcode'\n        address:\n          type: object\n          properties:\n            addressId:\n              $ref: '#/components/schemas/AddressId'\n            addressLine1:\n              $ref: '#/components/schemas/AddressLine1'\n            addressLine2:\n              type: string\n              example: ''\n            addressLine3:\n              type: string\n              example: ''\n            addressLine4:\n              type: string\n              example: ''\n            town:\n              $ref: '#/components/schemas/AddressTown'\n            postcode:\n              $ref: '#/components/schemas/AddressPostcode'\n        assessor:\n          type: object\n          properties:\n            firstName:\n              type: string\n              example: 'Joe'\n            lastName:\n              type: string\n              example: 'Bloggs'\n            middleNames:\n              type: string\n              example: 'T'\n            registeredBy:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: 'Stroma Certification Ltd'\n                schemeId:\n                  type: integer\n                  example: 5\n            schemeAssessorId:\n              $ref: '#/components/schemas/AssessorSchemeId'\n            contactDetails:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                  example: 'j.t.bloggs@example.com'\n                telephoneNumber:\n                  type: string\n                  maxLength: 256\n                  example: '01632 960375'\n            searchResultsComparisonPostcode:\n              $ref: '#/components/schemas/AddressPostcode'\n            address:\n              type: object\n            companyDetails:\n              $ref: '#/components/schemas/CompanyDetails'\n            qualifications:\n              $ref: '#/components/schemas/AssessorQualifications'\n            dateOfBirth:\n              type: string\n              format: date\n              example: '1974-12-28'\n        currentCarbonEmission:\n          type: number\n          description: The current carbon emission of the property\n          example: 4.736\n        currentEnergyEfficiencyBand:\n          type: string\n          example: 'c'\n          description: The band, from a to g, the current Energy Rating falls within\n        currentEnergyEfficiencyRating:\n          type: integer\n          minimum: 1\n          maximum: 100\n          example: 62\n          description: The current energy rating to be submitted to the Register\n        dwellingType:\n          type: string\n        estimatedEnergyCost:\n          type: string\n          example: '1307.00'\n        mainFuelType:\n          type: string\n          example: '28'\n        heatDemand:\n          type: object\n          properties:\n            currentSpaceHeatingDemand:\n              type: number\n              example: 456.45\n            currentWaterHeatingDemand:\n              type: number\n              example: 325.33\n            impactOfLoftInsulation:\n              type: integer\n              example: -453\n            impactOfCavityInsulation:\n              type: integer\n              example: -84\n            impactOfSolidWallInsulation:\n              type: integer\n              example: -21\n        totalFloorArea:\n          type: number\n          example: 120.55\n        potentialCarbonEmission:\n          type: number\n          description: The potential carbon emission of the propety\n          example: 2.839\n        potentialEnergyEfficiencyBand:\n          type: string\n          example: 'a'\n          description: The band, from a to g, the potential Energy Rating falls within\n        potentialEnergyEfficiencyRating:\n          type: integer\n          minimum: 1\n          maximum: 100\n          description: The potential energy rating to be submitted, must be equal to or larger than currentEnergyEfficiencyRating\n        primaryEnergyUse:\n          type: number\n          example: 598\n        propertySummary:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/PropertySummary'\n        recommendedImprovements:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/DomesticRecommendationWithoutCode'\n              - $ref: '#/components/schemas/DomesticRecommendationWithCode'\n        lzcEnergySources:\n          type: array\n          items:\n            type: integer\n            example: 11\n          nullable: true\n          description: Low and zero carbon energy sources for the property\n          example: [11]\n        addendum:\n          anyOf:\n            - $ref: '#/components/schemas/Addendum'\n          nullable: true\n          description: Additional information about the property\n\n    EnergyAssessmentMetadata:\n      type: object\n      properties:\n        typeOfAssessment:\n          $ref: '#/components/schemas/AssessmentType'\n        optOut:\n          type: boolean\n          example: false\n        createdAt:\n          type: string\n          format: date-time\n          example: '2020-08-09T12:34:56.789Z'\n          nullable: true\n        cancelledAt:\n          type: string\n          format: date-time\n          example: '2021-04-26T16:32:01.703Z'\n          nullable: true\n        notForIssueAt:\n          type: string\n          format: date-time\n          example: '2020-11-21T05:34:21.623Z'\n          nullable: true\n        schemaType:\n          $ref: '#/components/schemas/SchemaName'\n        assessmentAddressId:\n          $ref: '#/components/schemas/AddressId'\n\n    PropertySummary:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Walls\"\n          description: \"The name of the feature of the property\"\n        description:\n          type: string\n          example: \"Solid brick, as built, no insulation (assumed)\"\n        energyEfficiencyRating:\n          type: number\n          example: 2\n        environmentalEfficiencyRating:\n          type: number\n          example: 0\n\n    DomesticRecommendationWithoutCode:\n      type: object\n      properties:\n        sequence:\n          type: number\n          example: 0\n          description: \"The order in which this recommendation should be shown\"\n        indicativeCost:\n          type: string\n          example: \"£200 - £4,000\"\n        typicalSaving:\n          type: number\n          example: 400.21\n        improvementCategory:\n          type: string\n        improvementType:\n          type: string\n        improvementTitle:\n          type: string\n        improvementDescription:\n          type: string\n        energyPerformanceRating:\n          type: string\n          description: \"The estimated energy performance rating once the improvement has been carried out\"\n          example: \"C\"\n        environmentalImpactRating:\n          type: string\n          description: \"The estimated environmental impact rating once the improvement has been carried out\"\n        greenDealCategoryCode:\n          type: string\n\n    DomesticRecommendationWithCode:\n      type: object\n      properties:\n        sequence:\n          type: number\n          example: 1\n          description: \"The order in which this recommendation should be shown\"\n        improvementCode:\n          type: string\n          example: \"1\"\n        indicativeCost:\n          type: string\n          example: \"£200 - £4,000\"\n        typicalSaving:\n          type: number\n          example: 400.21\n        improvementCategory:\n          type: string\n        improvementType:\n          type: string\n        energyPerformanceRating:\n          type: string\n          description: \"The estimated energy performance rating once the improvement has been carried out\"\n          example: \"C\"\n        environmentalImpactRating:\n          type: string\n          description: \"The estimated environmental impact rating once the improvement has been carried out\"\n        greenDealCategoryCode:\n          type: string\n\n    # Green Deal\n    AssessmentGreenDealDetails:\n      type: object\n      properties:\n        typeOfAssessment:\n          type: string\n          enum: [SAP, RdSAP]\n        address:\n          $ref: '#/components/schemas/Address'\n        addressIdentifiers:\n          description: 'List of address identifiers associated with this assessment - these may include:\n                        * OS gazetteer UPRNS (prefixed UPRN-)\n                        * Legacy reference numbers from the old register system (prefixed LPRN-)\n                        * Reference numbers for reports for this address (prefixed RRN-)'\n          type: array\n          items:\n            $ref: '#/components/schemas/AddressId'\n          example: [\"UPRN-716375734512\", \"LPRN-1234567890\", \"RRN-1234-1234-1234-1234-1234\"]\n        countryCode:\n          type: string\n          example: 'EAW'\n        inspectionDate:\n          type: string\n          format: date\n          example: '2020-02-29'\n        lodgementDate:\n          type: string\n          format: date\n          example: '2020-02-29'\n        isLatestAssessmentForAddress:\n          type: boolean\n          example: true\n        status:\n          $ref: '#/components/schemas/AssessmentStatus'\n        mainFuelType:\n          type: string\n          example: 'Natural Gas'\n        secondaryFuelType:\n          type: string\n          example: 'Grid Supplied Electricity'\n        waterHeatingFuel:\n          type: string\n          example: 'Smokeless Fuel (inc Coke)'\n\n    AssessmentRHIDetails:\n      type: object\n      properties:\n        epcRrn:\n          $ref: '#/components/schemas/AssessmentId'\n        assessorName:\n          $ref: '#/components/schemas/AssessorFullName'\n        reportType:\n          type: string\n          example: 'Energy Performance Certificate'\n        inspectionDate:\n          type: string\n          format: date\n          example: '2020-01-30'\n        lodgementDate:\n          type: string\n          format: date\n          example: '2020-02-29'\n        dwellingType:\n          type: string\n          example: 'Top-floor flat'\n        postcode:\n          $ref: '#/components/schemas/AddressPostcode'\n        propertyAgeBand:\n          type: string\n          example: 'D'\n        tenure:\n          type: string\n          example: 'Owner-occupied'\n        totalFloorArea:\n          type: string\n          example: '123.5 square metres'\n        cavityWallInsulation:\n          type: boolean\n          example: false\n        loftInsulation:\n          type: boolean\n          example: true\n        spaceHeating:\n          type: number\n          example: 9901.00\n        waterHeating:\n          type: number\n          example: 2654.00\n        secondaryHeating:\n          type: string\n          example: 'Electric bar heater'\n        energyEfficiency:\n          $ref: '#/components/schemas/RHIEnergyEfficiency'\n\n    RHIEnergyEfficiency:\n      type: object\n      properties:\n        currentRating:\n          type: number\n          example: 64\n        currentBand:\n          type: string\n          example: 'D'\n        potentialRating:\n          type: number\n          example: 75\n        potentialBand:\n          type: string\n          example: 'C'\n\n    GreenDealPlanId:\n      description: 'Green Deal plan ID - created by the Central Charge Database\n                    (GDCC) when the plan is set up'\n      type: string\n      maxLength: 12\n      example: 'ABC123456DEF'\n\n    GreenDealPlan:\n      type: object\n      properties:\n        greenDealPlanId:\n          $ref: '#/components/schemas/GreenDealPlanId'\n        startDate:\n          description: The date the plan went live\n          type: string\n          format: date\n          example: '2020-01-30'\n        endDate:\n          description: The date the plan is expected to end\n          type: string\n          format: date\n          example: '2030-02-28'\n        providerDetails:\n          $ref: '#/components/schemas/GreenDealProvider'\n        interest:\n          $ref: '#/components/schemas/GreenDealInterest'\n        chargeUplift:\n          $ref: '#/components/schemas/GreenDealChargeUplift'\n        ccaRegulated:\n          description: 'Whether the Green Deal plan is regulated under the\n                        Consumer Credit Act'\n          type: boolean\n          example: true\n        structureChanged:\n          description: 'Whether the provider knows or has reasonable cause to\n                        believe that an alteration has been made to the Green\n                        Deal property which, had it existed when the estimated\n                        first year savings were calculated, would have affected\n                        that calculation materially'\n          type: boolean\n          example: false\n        measuresRemoved:\n          description: 'Whether the provider knows or has reasonable cause to\n                        believe that an improvement installed at the Green Deal\n                        property under a green deal plan has been removed from\n                        the property before the end of the improvement-specific\n                        payment period'\n          type: boolean\n          example: false\n        measures:\n          type: array\n          items:\n            $ref: '#/components/schemas/GreenDealMeasure'\n        charges:\n          type: array\n          items:\n            $ref: '#/components/schemas/GreenDealCharge'\n        savings:\n          type: array\n          items:\n            $ref: '#/components/schemas/GreenDealSaving'\n\n    GreenDealProvider:\n      type: object\n      description: Details relating to the provider of the plan\n      properties:\n        name:\n          description: 'Name of the provider organisation responsible for the\n                        Green Deal plan'\n          type: string\n          maxLength: 400\n          example: 'The Bank'\n        telephone:\n          description: 'Phone number of the provider organisation responsible\n                        for the Green Deal plan'\n          type: string\n          maxLength: 100\n          example: '0800 0000000'\n        email:\n          description: 'Email address of the provider organisation responsible\n                        for the Green Deal plan'\n          type: string\n          maxLength: 100\n          example: 'lender@example.com'\n\n    GreenDealInterest:\n      type: object\n      properties:\n        rate:\n          description: 'The interest rate (APR) on the Green Deal finance taken\n                        out for the Green Deal plan'\n          type: number\n          minimum: 0\n          maximum: 10000\n          example: 12.3\n        fixed:\n          description: 'Whether the interest rate on the Green Deal plan is\n                        fixed over the lifetime of the plan'\n          type: boolean\n          example: true\n\n    GreenDealChargeUplift:\n      type: object\n      properties:\n        amount:\n          description: 'The percentage uplift in the Green Deal daily charge,\n                        where applicable, otherwise zero'\n          type: number\n          minimum: 0\n          maximum: 1000\n          example: 1.25\n        date:\n          description: 'The date when the Green Deal daily charge uplift takes\n                        effect, where an annual interest uplift is included as a\n                        term of the Green Deal plan'\n          type: string\n          format: date\n          example: '2025-03-29'\n\n    GreenDealMeasure:\n      type: object\n      properties:\n        sequence:\n          type: integer\n          example: 0\n        measureType:\n          description: 'The measure type of the specific measure installed under\n                        the Green Deal plan'\n          type: string\n          example: 'Loft insulation'\n        product:\n          description: 'The product name of the specific measure installed under\n                        the Green Deal plan'\n          type: string\n          example: 'WarmHome lagging stuff (TM)'\n        repaidDate:\n          description: 'Date the measure will be paid off under the Green Deal\n                        plan payment schedule'\n          type: string\n          format: date\n          example: '2025-03-29'\n\n    GreenDealCharge:\n      type: object\n      properties:\n        sequence:\n          type: integer\n          example: 0\n        startDate:\n          description: 'The start date at which the specified daily charge\n                        starts taking effect'\n          type: string\n          format: date\n          example: '2020-03-29'\n        endDate:\n          description: 'The end date at which the specified daily charge stops\n                        taking effect'\n          type: string\n          format: date\n          example: '2030-03-29'\n        dailyCharge:\n          description: 'The daily amount the customer will be paying through\n                        their electricity bill'\n          type: number\n          minimum: 0\n          maximum: 10000\n          example: 0.34\n\n    GreenDealSaving:\n      type: object\n      properties:\n        sequence:\n          type: integer\n          example: 0\n        fuelCode:\n          description: 'Code which indicates the type of heating fuel'\n          type: string\n          example: '3'\n          enum: [\"3\" ,\"5\" ,\"6\" ,\"7\" ,\"8\" ,\"9\" ,\"15\" ,\"16\" ,\"17\" ,\"18\" ,\"19\" ,\"26\" ,\"27\" ,\"28\" ,\"33\" ,\"34\" ,\"35\" ,\"36\" ,\"37\" ,\"38\" ,\"39\" ,\"40\" ,\"41\" ,\"42\" ,\"43\" ,\"44\" ,\"45\"]\n        fuelSaving:\n          description: 'Total kWh saving for the fuel (negative if increase),\n                        allowing for in-use factors'\n          type: number\n          minimum: -10000000\n          maximum: 10000000\n        standingChargeFraction:\n          description: 'Fraction of standing charge for the fuel applicable to\n                        the saving, negative if standing charge applies after\n                        improvements but not before, positive if standing\n                        charge applies before improvements but not after,\n                        zero otherwise'\n          type: number\n          minimum: -1\n          maximum: 1\n          example: -0.3\n\n    Addendum:\n      type: object\n      properties:\n        addendumNumber:\n          type: array\n          items:\n            type: integer\n            example: 8\n          nullable: true\n          example: [8]\n        cavityFillRecommended:\n          type: boolean\n          example: true\n        stoneWalls:\n          type: boolean\n          example: true\n        systemBuild:\n          type: boolean\n          example: true\n        accessIssues:\n          type: boolean\n          example: true\n        highExposure:\n          type: boolean\n          example: true\n        narrowCavities:\n          type: boolean\n          example: true\n\n    MonthAssessmentStatistic:\n      type: object\n      properties:\n        numAssessments:\n          type: integer\n          example: 64\n        assessmentType:\n          $ref: '#/components/schemas/AssessmentType'\n        ratingAverage:\n          type: number\n          example: 74.35\n        month:\n          type: string\n          example: '2021-07'\n\n    UserSatisfaction:\n      type: object\n      properties:\n        stats_date:\n          description: 'The month and year of the survey(Dec 2021),\n                        add 1 for the day'\n          type: string\n          format: date\n          example: '2020-12-01'\n        very_satisfied:\n          type: integer\n          example: 125\n        satisfied:\n          type: integer\n          example: 895\n        neither:\n          type: integer\n          example: 789\n        dissatisfied:\n          type: integer\n          example: 123\n        very_dissatisfied:\n          type: integer\n          example: 321\n    # Schemes\n    Scheme:\n      allOf:\n        - $ref: '#/components/schemas/SchemeBody'\n        - type: object\n          properties:\n            schemeId:\n              type: string\n              example: '432'\n\n    SchemeBody:\n      type: object\n      properties:\n        name:\n          type: string\n          example: 'EPCs 4 U'\n        active:\n          type: boolean\n          example: true\n          description: 'Whether or not the scheme is currently active'\n\n    # General\n    Empty:\n      type: object\n\n    ErrorResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                type: string\n                example: \"NOT_FOUND\"\n              title:\n                type: string\n                example: \"The thing you are looking for is not here\"\n\n  links: {}\n  callbacks: {}\n"
		}
	},
	"Error": "buildIR: make ir: path \"/assessments/{assessmentId}/opt-out\": put: security: security \"oauth\" (index 0): flow \"clientCredentials\": unknown scope \"admin:opt_out\"",
	"NotImplemented": [
		"allOf",
		"oauth2 security",
		"unsupported content types"
	]
}