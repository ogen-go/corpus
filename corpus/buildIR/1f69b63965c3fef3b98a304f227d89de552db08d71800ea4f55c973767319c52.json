{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaystackOSS/openapi"
		},
		"file": {
			"name": "wallet.yaml",
			"size": 0,
			"path": "dist/wallet.yaml",
			"byteSize": 18826,
			"content": "openapi: 3.0.1\ninfo:\n  title: Create a wallet app\n  description: |-\n    The OpenAPI specification for creating a wallet application using the [Paystack API](https://paystack.com/docs/api/).\n    ### Prerequisites\n    1. Sign up on [Paystack](https://paystack.com/signup) to get your secret API key\n    2. Set your API key as an environment variable on [Postman](https://learning.postman.com/docs/sending-requests/variables/)\n\n    After setting up your secret API key, use the [Customers API](https://paystack.com/docs/api/#customer) to create and validate a customer.  You then assign a [Dedicated Virtual Account](https://paystack.com/docs/payments/dedicated-virtual-accounts) to the customer. \n\n    Transfers in this case refer to moving money to bank accounts and mobile money accounts using our [Transfers API](https://paystack.com/docs/transfers) rather than other wallet users.\n\n    *Dedicated Virtual Account is currently available for [registered businesses](https://support.paystack.com/hc/en-us/articles/360009881220-How-do-I-activate-my-Paystack-Registered-Business-) in Nigeria.*\n  version: 1.0.0\nservers:\n  - url: 'https://api.paystack.co'\n    description: Base API endpoint\npaths:\n  /customer:\n    post:\n      tags:\n        - Customer\n      summary: Create Customer\n      operationId: customer_create\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/Customer/allOf/0'\n                - $ref: '#/components/schemas/Customer/allOf/1'\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/Customer/allOf/0'\n                - $ref: '#/components/schemas/Customer/allOf/1'\n      responses:\n        '200':\n          description: Customer Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Create Customer:\n                  value:\n                    status: true\n                    message: Customer created\n                    data:\n                      transactions: []\n                      subscriptions: []\n                      authorizations: []\n                      email: somebody@example.com\n                      first_name: Some\n                      last_name: Body\n                      phone: '+2348123456789'\n                      integration: 463433\n                      domain: test\n                      metadata: {}\n                      customer_code: CUS_pztcpsx5kng2fbk\n                      risk_action: default\n                      id: 95485991\n                      createdAt: '2022-09-20T12:52:10.583Z'\n                      updatedAt: '2022-09-20T12:52:10.583Z'\n                      identified: false\n                      identifications: []\n        '401':\n          description: Unauthorized operation\n          content:\n            application/json:\n              examples:\n                No-Authorization-Header:\n                  value:\n                    status: false\n                    message: No Authorization Header was found\n                Bad-Authorization-Header:\n                  value:\n                    status: false\n                    message: 'Format is Authorization Bearer [secret key]'\n                Invalid-Key:\n                  value:\n                    status: false\n                    message: Invalid key\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: boolean\n                  message:\n                    type: string\n        default:\n          description: Server error\n  '/customer/{code}/identification':\n    parameters:\n      - name: code\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Customer\n      summary: Validate Customer\n      operationId: customer_validatte\n      description: Validate a customer's identity\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Customer/allOf/4'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Customer/allOf/4'\n      responses:\n        '202':\n          description: Customer Validation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Validate Customer:\n                  value:\n                    status: true\n                    message: Customer Identification in progress\n        '401':\n          $ref: '#/paths/~1customer/post/responses/401'\n        default:\n          description: Server error\n  /dedicated_account:\n    post:\n      tags:\n        - Dedicated Virtual Account\n      summary: Create Dedicated Account\n      operationId: dedicatedAccount_create\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1dedicated_account/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - customer\n              properties:\n                customer:\n                  description: Customer ID or code\n                  type: string\n                  example: CUS_abc123der\n                preferred_bank:\n                  description: 'The bank slug for preferred bank. To get a list of available banks, use the List Providers endpoint'\n                  type: string\n                  example: wema-bank\n                subaccount:\n                  description: Subaccount code of the account you want to split the transaction with\n                  type: string\n                  example: ACCT_123455asdin\n                split_code:\n                  description: Split code consisting of the lists of accounts you want to split the transaction with\n                  type: string\n                  example: SPL_123asbde\n      responses:\n        '200':\n          description: Creation Successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Create Dedicated Account:\n                  value:\n                    status: true\n                    message: NUBAN successfully created\n                    data:\n                      bank:\n                        name: Wema Bank\n                        id: 20\n                        slug: wema-bank\n                      account_name: KAROKART / RHODA CHURCH\n                      account_number: 9930000737\n                      assigned: true\n                      currency: NGN\n                      metadata: null\n                      active: true\n                      id: 253\n                      created_at: 2019-12-12T12:39:04.000Z\n                      updated_at: 2020-01-06T15:51:24.000Z\n                      assignment:\n                        integration: 100043\n                        assignee_id: 7454289\n                        assignee_type: Customer\n                        expired: false\n                        account_type: PAY-WITH-TRANSFER-RECURRING\n                        assigned_at: 2020-01-06T15:51:24.764Z\n                      customer:\n                        id: 7454289\n                        first_name: RHODA\n                        last_name: CHURCH\n                        email: rhodachurch@email.com\n                        customer_code: CUS_kpb3qj71u1m0rw8\n                        phone: 2349053267565\n                        risk_action: default\n        '401':\n          $ref: '#/paths/~1customer/post/responses/401'\n        default:\n          description: Server error\n  /transferrecipient:\n    post:\n      tags:\n        - Transfer Recipient\n      summary: Create Transfer Recipient\n      operationId: transferrecipient_create\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transferrecipient/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - type\n                - name\n                - account_number\n                - bank_code\n              properties:\n                type:\n                  description: 'Recipient Type - nuban for NGN, mobile_money for MOMO in GHS, basa for ZAR and authorization for all.'\n                  type: string\n                  enum:\n                    - nuban\n                    - mobile_money\n                    - basa\n                    - authorization\n                name:\n                  description: Recipient's name\n                  type: string\n                  example: Ada Lovelace\n                account_number:\n                  description: Recipient's bank account number\n                  type: string\n                  example: '0000000000'\n                bank_code:\n                  description: Recipient's bank code. You can get the list of Bank Codes by calling the List Banks endpoint\n                  type: string\n                  example: '011'\n                description:\n                  description: A description for this recipient\n                  type: string\n                  example: Keeps our servers running\n                currency:\n                  description: Currency for the account receiving the transfer\n                  type: string\n                  enum:\n                    - NGN\n                    - GHS\n                    - ZAR\n                authorization_code:\n                  description: An authorization code from a previous transaction\n                  type: string\n                  example: AUTH_CODE\n                metadata:\n                  description: Stringified JSON object of custom data\n                  type: string\n                  example: |\n                    {referrer_id: 123}\n      responses:\n        '201':\n          description: Transfer Recipient Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Create Customer:\n                  value:\n                    status: true\n                    message: Transfer recipient created successfully\n                    data:\n                      active: true\n                      createdAt: 2022-09-16T08:31:43.321Z\n                      currency: NGN\n                      domain: live\n                      id: 38770134\n                      integration: 463433\n                      metadata:\n                        referrer_id: 123\n                      name: Ada Lovelace\n                      recipient_code: RCP_2fl8jmb2v3kbleb\n                      type: nuban\n                      updatedAt: 2022-09-16T08:31:43.321Z\n                      is_deleted: false\n                      isDeleted: false\n                      details:\n                        authorization_code: null\n                        account_number: 0\n                        account_name: Doe Jane Loren\n                        bank_code: 9\n                        bank_name: First Bank of Nigeria\n        '401':\n          $ref: '#/paths/~1customer/post/responses/401'\n        default:\n          description: Server error\n  /transfer:\n    post:\n      tags:\n        - Transfer\n      summary: Initiate Transfer\n      operationId: transfer_initiate\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transfer/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - source\n                - amount\n                - recipient\n              properties:\n                source:\n                  description: Where should we transfer from? Only balance is allowed for now\n                  type: string\n                  example: balance\n                amount:\n                  description: Amount to transfer in kobo if currency is NGN. pesewas if currency is GHS and cents for ZAR.\n                  type: integer\n                  example: 10234\n                recipient:\n                  description: The transfer recipient's code\n                  type: string\n                  example: RCP_CODE\n                reason:\n                  description: The reason or narration for the transfer.\n                  type: string\n                  example: Good job\n                currency:\n                  description: Specify the currency of the transfer. Defaults to NGN.\n                  type: string\n                reference:\n                  description: |-\n                    If specified, the field should be a unique identifier (in lowercase) for the object. \n                    Only -,_ and alphanumeric characters are allowed.\n                  type: string\n                  example: Transfer-123_unique\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Initiate Transfer:\n                  value:\n                    status: true\n                    message: Transfer has been queued\n                    data:\n                      reference: on5hyz9poe\n                      integration: 428626\n                      domain: test\n                      amount: 3794800\n                      currency: NGN\n                      source: balance\n                      reason: Holiday Flexing\n                      recipient: 6788170\n                      status: success\n                      transfer_code: TRF_fiyxvgkh71e717b\n                      id: 23070321\n                      createdAt: 2020-05-13T14:22:49.687Z\n                      updatedAt: 2020-05-13T14:22:49.687Z\n        '401':\n          $ref: '#/paths/~1customer/post/responses/401'\n        default:\n          description: Server error\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    Customer:\n      allOf:\n        - type: object\n          required:\n            - email\n          properties:\n            email:\n              description: Customer's email address\n              type: string\n        - type: object\n          properties:\n            first_name:\n              description: Customer's first name\n              type: string\n              example: Some\n            last_name:\n              description: Customer's last name\n              type: string\n              example: Body\n            phone:\n              description: Customer's phone number\n              type: string\n              example: '+2348123456789'\n            metadata:\n              description: Stringified JSON object of custom data\n              type: string\n        - type: object\n          required:\n            - authorization_code\n          properties:\n            authorization_code:\n              description: Customer's authorization code to be deactivated\n              type: string\n        - type: object\n          required:\n            - customer\n          properties:\n            customer:\n              description: 'Customer''s code, or email address'\n              type: string\n            risk_action:\n              description: |\n                One of the possible risk actions [ default, allow, deny ]. allow to whitelist. \n                deny to blacklist. Customers start with a default risk action.\n              type: string\n              enum:\n                - default\n                - allow\n                - deny\n        - type: object\n          required:\n            - type\n            - country\n            - bvn\n            - bank_code\n            - account_number\n          properties:\n            type:\n              description: Predefined types of identification.\n              type: string\n              enum:\n                - bvn\n                - bank_account\n            country:\n              description: Two-letter country code of identification issuer\n              type: string\n              example: NG\n            bvn:\n              description: Customer's Bank Verification Number\n              type: integer\n              example: 0123456789\n            bank_code:\n              description: 'You can get the list of bank codes by calling the List Banks endpoint (https://api.paystack.co/bank).'\n              type: string\n              example: '007'\n            account_number:\n              description: Customer's bank account number.\n              type: string\n              example: '0111111111'\n            first_name:\n              description: Customer's first name\n              type: string\n              example: Uchenna\n            last_name:\n              description: Customer's last name\n              type: string\n              example: Okoro\n    Error:\n      type: object\n      properties:\n        status:\n          type: boolean\n        message:\n          type: string\n    Response:\n      type: object\n      properties:\n        status:\n          type: boolean\n        message:\n          type: string\n        data:\n          type: object\n  responses:\n    Ok:\n      description: Successful operation\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: boolean\n              message:\n                type: string\n              data:\n                type: object\n    Created:\n      description: Resource created\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Response'\n    NotFound:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            status: false\n            message: Entity not found\n    Unauthorized:\n      description: Unauthorized operation\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            status: false\n            message: Invalid key\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/PaystackOSS/openapi@e65c07ce33d6900becd5f8dc3b935e7536ce486f/-/blob/dist/wallet.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PaystackOSS/openapi/blob/e65c07ce33d6900becd5f8dc3b935e7536ce486f/dist/wallet.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: reference type \"https://raw.githubusercontent.com/PaystackOSS/openapi/e65c07ce33d6900becd5f8dc3b935e7536ce486f/dist/wallet.yaml#/paths/~1dedicated_account/post/requestBody/content/application~1json/schema\" name conflict: \"Schema\""
}