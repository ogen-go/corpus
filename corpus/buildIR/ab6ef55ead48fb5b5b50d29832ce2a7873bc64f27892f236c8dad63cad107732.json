{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "flat.io-2.8.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/flat.io-2.8.0-swagger.yaml",
			"byteSize": 182781,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: developers@flat.io\n    name: Flat\n    url: https://flat.io/developers/docs/api/\n  description: \u003e\n    The Flat API allows you to easily extend the abilities of the [Flat\n    Platform](https://flat.io), with a wide range of use cases including the\n    following:\n\n\n    * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files\n\n    * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI)\n\n    * Managing educational resources with Flat for Education: creating \u0026 updating the organization accounts, the classes, rosters and assignments.\n\n\n    The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.\n\n    The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/).\n\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).\n\n\n    You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).\n\n\n    Getting Started and learn more:\n\n\n    * [API Overview and interoduction](https://flat.io/developers/docs/api/)\n\n    * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html)\n\n    * [SDKs](https://flat.io/developers/docs/api/sdks.html)\n\n    * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html)\n\n    * [Changelog](https://flat.io/developers/docs/api/changelog.html)\n  termsOfService: https://flat.io/legal\n  title: Flat\n  version: 2.8.0\n  x-apisguru-categories:\n    - media\n    - collaboration\n  x-logo:\n    url: https://flat.io/img/logo-flat.svg\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/FlatIO/api-reference/master/spec/swagger.yaml\n      version: \"2.0\"\n  x-providerName: flat.io\ntags:\n  - description: \u003e\n      These API endpoints are related to the Flat account you are currently\n      using. When using an OAuth2 access token, you can use [`GET\n      /me`](#operation/getAuthenticatedUser) to get information about the\n      account.\n    name: Account\n    x-displayName: Flat Account\n  - description: \u003e\n      Sheet music is the main API object type available for all Flat account.\n\n      Here is a typical lifecycle for a music score document on Flat:\n        - An end user can **create a music score** or **import a document** using our [web interface](https://flat.io) or a third-party website/app (e.g. Google Drive) using this API (see [`POST /v2/scores`](#operation/createScore). The creation and import of music scores can be done with this single API endpoint. This one currently supports the [MusicXML](http://www.musicxml.com/) (compressed or not) and [MIDI](https://www.midi.org/specifications).\n        - **List scores**:\n          - The **owned scores** can be listed using the [collections API methods](#tag/Collection), especially [`GET /collections/{collection}/scores`](#operation/listCollectionScores).\n          - The scores from a public account can be listed with [`GET /users/{user}/scores`](#operation/getUserScores).\n          - Scores shared with a specific group can be listed with [`GET /groups/{group}/scores`](#operation/getGroupScores).\n        - The metadata of a single score can be retrieved with [`GET /scores/{score}`](#operation/getScore).\n        - Scores on Flat have **one or multiple revisions**: creating a new score will create a first revision. These **revisions can be listed** using [`GET /scores/{score}/revisions`](#operation/getScoreRevisions) and a specific **revision data can be downloaded** with [`GET /scores/{score}/revisions/{revision}/{format}`](#operation/getScoreRevisionData). New revisions can be created using our [sheet music editor](https://flat.io) or using [`POST /scores/{score}/revisions`](#operation/createScoreRevision) (this endpoint has similar parameters than during the score creation). The last revision of a document may not directly reflect the really last version of a music score: recent modifications can be made offline or not yet consolidated into a new revision. In average, a new revision is created every 100 modifications made with our editor.\n        - Scores can be **shared publicly** by changing the privacy option with [`POST /scores/{score}`](#operation/editScore), or **individually shared** using the different collaborators API endpoints (see [`POST /scores/{score}/collaborators`](#operation/addScoreCollaborator)).\n    name: Score\n    x-displayName: Music scores\n  - description: \u003e\n      Collections let you organize your content in a Flat account. They work\n      like a regular _folder_ with some specificities:\n        - Our design goal here is to create a system similar to a _book_ or a _playlist of songs_.\n        - Collections can't have children collections (except the `trash` and `sharedWithMe` that are special collections).\n        - Any score can be added to one or multiple collections. For example, you can have a single private score in two or more collections, or add any public or shared scores to one of your collections.\n\n      All the collections don't have the same capabilities. Capabilities depend on the `type` of collection and the `rights` you have on a collection. They are available when [listing the collection](#operation/listCollections) or [retrieving the collection details](#operation/getCollection).\n\n\n      At this time, only `private` privacy mode is widely available. Privacy modes `public`, `organizationPublic` and `privateLink`, and 1:1 sharing will be available in an upcoming update later this year.\n    name: Collection\n    x-displayName: Collections of music scores\n  - description: Flat users\n    name: User\n  - description: Flat for Education organizations\n    name: Organization\n  - description: Flat for Education classes\n    name: Class\n  - description: Flat Groups\n    name: Group\npaths:\n  /classes:\n    get:\n      operationId: listClasses\n      parameters:\n        - description: Filter the classes by state\n          in: query\n          name: state\n          schema:\n            type: string\n            enum:\n              - active\n              - inactive\n              - archived\n            default: active\n      responses:\n        \"200\":\n          description: The list of classes\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClassDetails\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n      summary: List the classes available for the current user\n      tags:\n        - Class\n    post:\n      description: \u003e\n        Classrooms on Flat allow you to create activities with assignments and\n        post content to a specific group.\n\n\n        When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.\n\n\n        If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.\n\n\n        You can add users to this class using `POST /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response.\n      operationId: createClass\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClassCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Create a new class\n      tags:\n        - Class\n  \"/classes/enroll/{enrollmentCode}\":\n    post:\n      description: \u003e\n        Use this method to join a class using an enrollment code given one of\n        the teacher of this class. This code is also available in the\n        `ClassDetails` returned to the teachers when creating the class or\n        listing / fetching a specific class.\n\n\n        Flat will automatically add the user to the corresponding class group based on this role in the organization.\n      operationId: enrollClass\n      parameters:\n        - description: |\n            The enrollment code, available to the teacher in `ClassDetails`\n          in: path\n          name: enrollmentCode\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Join a class\n      tags:\n        - Class\n  \"/classes/{class}\":\n    get:\n      operationId: getClass\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n      summary: Get the details of a single class\n      tags:\n        - Class\n    put:\n      description: |\n        Update the meta information of the class\n      operationId: updateClass\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClassUpdate\"\n        description: Details of the Class\n      responses:\n        \"200\":\n          description: The new class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Update the class\n      tags:\n        - Class\n  \"/classes/{class}/activate\":\n    post:\n      description: \u003e\n        Mark the class as `active`. This is mainly used for classes synchronized\n        from Clever that are initially with an `inactive` state and hidden in\n        the UI.\n      operationId: activateClass\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Activate the class\n      tags:\n        - Class\n  \"/classes/{class}/archive\":\n    delete:\n      description: \u003e\n        Mark the class as `active`. When this course is synchronized with\n        another app, like Google Classroom, this state will be automatically be\n        updated.\n      operationId: unarchiveClass\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Unarchive the class\n      tags:\n        - Class\n    post:\n      description: \u003e\n        Mark the class as `archived`. When this course is synchronized with\n        another app, like Google Classroom, this state will be automatically be\n        updated.\n      operationId: archiveClass\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The class details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClassDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Archive the class\n      tags:\n        - Class\n  \"/classes/{class}/assignments\":\n    get:\n      operationId: listAssignments\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of assignments for the class\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Assignment\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n      summary: Assignments listing\n      tags:\n        - Class\n    post:\n      description: \u003e\n        Use this method as a teacher to create and post a new assignment to a\n        class.\n\n\n        If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course.\n      operationId: createAssignment\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssignmentCreation\"\n      responses:\n        \"200\":\n          description: The assignment has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Assignment\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      summary: Assignment creation\n      tags:\n        - Class\n  \"/classes/{class}/assignments/{assignment}/copy\":\n    post:\n      description: \u003e\n        Copy an assignment to a specified class.\n\n\n        If the original assignment has a due date in the past, this new assingment will be created without a due date.\n\n\n        If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app.\n      operationId: copyAssignment\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the assignment\n          in: path\n          name: assignment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssignmentCopy\"\n        required: true\n      responses:\n        \"200\":\n          description: The new created assingment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Assignment\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      summary: Copy an assignment\n      tags:\n        - Class\n  \"/classes/{class}/assignments/{assignment}/submissions\":\n    get:\n      operationId: getSubmissions\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the assignment\n          in: path\n          name: assignment\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The submissions\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssignmentSubmission\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n      summary: List the students' submissions\n      tags:\n        - Class\n    put:\n      description: \u003e\n        Use this method as a student to create, update and submit a submission\n        related to an assignment. Students can only set `attachments`,\n        `studentComment` and `submit`.\n\n\n        Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id.\n      operationId: createSubmission\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the assignment\n          in: path\n          name: assignment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AssignmentSubmissionUpdate\"\n      responses:\n        \"200\":\n          description: The submission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssignmentSubmission\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      summary: Create or edit a submission\n      tags:\n        - Class\n  \"/classes/{class}/assignments/{assignment}/submissions/{submission}\":\n    get:\n      operationId: getSubmission\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the assignment\n          in: path\n          name: assignment\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the submission\n          in: path\n          name: submission\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A submission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssignmentSubmission\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n      summary: Get a student submission\n      tags:\n        - Class\n    put:\n      description: \u003e\n        Use this method as a teacher to update the different submission and give\n        feedback.\n\n        Teachers can only set `returnFeedback`\n      operationId: editSubmission\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the assignment\n          in: path\n          name: assignment\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the submission\n          in: path\n          name: submission\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AssignmentSubmissionUpdate\"\n      responses:\n        \"200\":\n          description: The submission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssignmentSubmission\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.assignments\n      summary: Edit a submission\n      tags:\n        - Class\n  \"/classes/{class}/students/{user}/submissions\":\n    get:\n      description: \u003e\n        Use this method as a teacher to list all the assignment submissions sent\n        by a student of the class\n      operationId: listClassStudentSubmissions\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the user\n          in: path\n          name: user\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The list of submissions\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssignmentSubmission\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n            - edu.classes.readonly\n            - edu.assignments\n            - edu.assignments.readonly\n      summary: List the submissions for a student\n      tags:\n        - Class\n  \"/classes/{class}/users/{user}\":\n    delete:\n      description: \u003e\n        This method can be used by a teacher to remove a user from the class, or\n        by a student to leave the classroom.\n\n\n        Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions.\n      operationId: deleteClassUser\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the user\n          in: path\n          name: user\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The user has been removed from the class\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Remove a user from the class\n      tags:\n        - Class\n    put:\n      description: \u003e\n        This method can be used by a teacher of the class to enroll another Flat\n        user into the class.\n\n\n        Only users that are part of your Organization can be enrolled in a class of this same Organization.\n\n\n        When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization.\n      operationId: addClassUser\n      parameters:\n        - description: Unique identifier of the class\n          in: path\n          name: class\n          required: true\n          schema:\n            type: string\n        - description: Unique identifier of the user\n          in: path\n          name: user\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The user has been added to the class\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.classes\n      summary: Add a user to the class\n      tags:\n        - Class\n  /collections:\n    get:\n      description: \u003e\n        Use this method to list the user's collections contained in `parent` (by\n        default in the `root` collection).\n\n        If no sort option is provided, the collections are sorted by `creationDate` `desc`.\n\n\n        Note that this method will not include the `parent` collection in the listing.\n\n        For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.\n      operationId: listCollections\n      parameters:\n        - description: \u003e\n            List the collection contained in this `parent` collection.\n\n\n            This option doesn't provide a complete multi-level collection support.\n\n            When sharing a collection with someone, this one will have as `parent` `sharedWithMe`.\n          in: query\n          name: parent\n          schema:\n            type: string\n            default: root\n        - description: Sort\n          in: query\n          name: sort\n          schema:\n            type: string\n            enum:\n              - creationDate\n              - title\n        - $ref: \"#/components/parameters/sortDirection\"\n        - $ref: \"#/components/parameters/limitDefault25Max100\"\n        - $ref: \"#/components/parameters/next\"\n        - $ref: \"#/components/parameters/previous\"\n      responses:\n        \"200\":\n          description: List of collections\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Collection\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n            - collections.readonly\n      summary: List the collections\n      tags:\n        - Collection\n    post:\n      description: \u003e\n        This method will create a new collection and add it to your `root`\n        collection.\n      operationId: createCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CollectionCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: Collection created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        \"400\":\n          description: Bad collection creation request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: Create a new collection\n      tags:\n        - Collection\n  \"/collections/{collection}\":\n    delete:\n      description: \u003e\n        This method will schedule the deletion of the collection. Until deleted,\n        the collection will be available in the `trash`.\n      operationId: deleteCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n      responses:\n        \"204\":\n          description: Collection deleted\n        \"403\":\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: Delete the collection\n      tags:\n        - Collection\n    get:\n      operationId: getCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Collection details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        \"403\":\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n            - collections.readonly\n      summary: Get collection details\n      tags:\n        - Collection\n    put:\n      operationId: editCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CollectionModification\"\n      responses:\n        \"200\":\n          description: Collection details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        \"403\":\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: Update a collection's metadata\n      tags:\n        - Collection\n  \"/collections/{collection}/scores\":\n    get:\n      description: \u003e\n        Use this method to list the scores contained in a collection.\n\n        If no sort option is provided, the scores are sorted by `modificationDate` `desc`.\n      operationId: listCollectionScores\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n        - $ref: \"#/components/parameters/sharingKey\"\n        - description: Sort\n          in: query\n          name: sort\n          schema:\n            type: string\n            enum:\n              - creationDate\n              - modificationDate\n              - title\n        - $ref: \"#/components/parameters/sortDirection\"\n        - $ref: \"#/components/parameters/limitDefault25Max100\"\n        - $ref: \"#/components/parameters/next\"\n        - $ref: \"#/components/parameters/previous\"\n      responses:\n        \"200\":\n          description: List of scores\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreDetails\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: List the scores contained in a collection\n      tags:\n        - Collection\n  \"/collections/{collection}/scores/{score}\":\n    delete:\n      description: \u003e\n        This method will delete a score from the collection. Unlike [`DELETE\n        /scores/{score}`](#operation/deleteScore), this score will not remove\n        the score from your account, but only from the collection.\n\n        This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.\n      operationId: deleteScoreFromCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n        - $ref: \"#/components/parameters/score\"\n      responses:\n        \"204\":\n          description: Score removed from the collection\n        \"403\":\n          description: Not granted to access to this collection\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Collection not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: Delete a score from the collection\n      tags:\n        - Collection\n    put:\n      description: \u003e\n        This operation will add a score to a collection. The default behavior\n        will make the score available across multiple collections.\n\n        You must have the capability `canAddScores` on the provided `collection` to perform the action.\n      operationId: addScoreToCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreDetails\"\n        \"403\":\n          description: Not granted to access to this collection or score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Collection or score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n            - collections.add_scores\n      summary: Add a score to the collection\n      tags:\n        - Collection\n  \"/collections/{collection}/untrash\":\n    post:\n      description: \u003e\n        This method will restore the collection by removing it from the `trash`\n        and add it back to the `root` collection.\n      operationId: untrashCollection\n      parameters:\n        - $ref: \"#/components/parameters/collection\"\n      responses:\n        \"204\":\n          description: The score has been untrashed\n        \"403\":\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - collections\n      summary: Untrash a collection\n      tags:\n        - Collection\n  \"/groups/{group}\":\n    get:\n      operationId: getGroupDetails\n      parameters:\n        - $ref: \"#/components/parameters/group\"\n      responses:\n        \"200\":\n          description: The group details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n            - edu.classes\n            - edu.classes.readonly\n      summary: Get group information\n      tags:\n        - Group\n  \"/groups/{group}/scores\":\n    get:\n      description: |\n        Get the list of scores shared with a group.\n      operationId: getGroupScores\n      parameters:\n        - $ref: \"#/components/parameters/group\"\n        - description: Filter the score forked from the score id `parent`\n          in: query\n          name: parent\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The group's scores\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreDetails\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: List group's scores\n      tags:\n        - Group\n        - Score\n  \"/groups/{group}/users\":\n    get:\n      operationId: listGroupUsers\n      parameters:\n        - $ref: \"#/components/parameters/group\"\n      responses:\n        \"200\":\n          description: The list of users member of the group\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserPublic\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n            - edu.classes\n            - edu.classes.readonly\n      summary: List group's users\n      tags:\n        - Group\n  /me:\n    get:\n      description: |\n        Get details about the current authenticated User.\n      operationId: getAuthenticatedUser\n      responses:\n        \"200\":\n          description: Current user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - account.public_profile\n            - account.education_profile\n      summary: Get current user profile\n      tags:\n        - Account\n  /organizations/invitations:\n    get:\n      operationId: listOrganizationInvitations\n      parameters:\n        - description: Filter users by role\n          in: query\n          name: role\n          schema:\n            type: string\n            enum:\n              - user\n              - teacher\n              - admin\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/next\"\n        - $ref: \"#/components/parameters/previous\"\n      responses:\n        \"200\":\n          description: List of invitations\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OrganizationInvitation\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n      summary: List the organization invitations\n      tags:\n        - Organization\n    post:\n      description: \u003e\n        This method creates and sends invitation for teachers and admins.\n\n\n        Invitations can only be used by new Flat users or users who are not part of the organization yet.\n\n\n        If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user.\n      operationId: createOrganizationInvitation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrganizationInvitationCreation\"\n      responses:\n        \"200\":\n          description: New invitation created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationInvitation\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      summary: Create a new invitation to join the organization\n      tags:\n        - Organization\n  \"/organizations/invitations/{invitation}\":\n    delete:\n      operationId: removeOrganizationInvitation\n      parameters:\n        - description: Unique identifier of the invitation\n          in: path\n          name: invitation\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The invitation has been removed\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      summary: Remove an organization invitation\n      tags:\n        - Organization\n  /organizations/lti/credentials:\n    get:\n      operationId: listLtiCredentials\n      responses:\n        \"200\":\n          description: The list of LTI Credentials\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LtiCredentials\"\n                type: array\n        \"403\":\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n            - edu.admin.lti.readonly\n      summary: List LTI 1.x credentials\n      tags:\n        - Organization\n    post:\n      description: \u003e\n        Flat for Education is a Certified LTI Provider. You can use these API\n        methods to automate the creation of LTI credentials. You can read more\n        about our LTI implementation, supported components and LTI Endpoints in\n        our [Developer Documentation](https://flat.io/developers/docs/lti/).\n      operationId: createLtiCredentials\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LtiCredentialsCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: The LTI Credentials\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LtiCredentials\"\n        \"403\":\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n      summary: Create a new couple of LTI 1.x credentials\n      tags:\n        - Organization\n  \"/organizations/lti/credentials/{credentials}\":\n    delete:\n      operationId: revokeLtiCredentials\n      parameters:\n        - description: |\n            Credentials unique identifier\n          in: path\n          name: credentials\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Credentials revoked\n        \"403\":\n          description: Not admin of an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Credentials not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.lti\n      summary: Revoke LTI 1.x credentials\n      tags:\n        - Organization\n  /organizations/users:\n    get:\n      operationId: listOrganizationUsers\n      parameters:\n        - description: Filter users by role\n          in: query\n          name: role\n          schema:\n            type: string\n            enum:\n              - user\n              - teacher\n              - admin\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/next\"\n        - $ref: \"#/components/parameters/previous\"\n      responses:\n        \"200\":\n          description: List of users\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserDetailsAdmin\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n            - edu.admin.users.readonly\n      summary: List the organization users\n      tags:\n        - Organization\n    post:\n      operationId: createOrganizationUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserCreation\"\n      responses:\n        \"200\":\n          description: New user created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetailsAdmin\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      summary: Create a new user account\n      tags:\n        - Organization\n  \"/organizations/users/{user}\":\n    delete:\n      description: \u003e\n        This operation removes an account from Flat and its data, including:\n\n        * The music scores created by this user (documents, history, comments, collaboration information)\n\n        * Education related data (assignments and classroom information)\n      operationId: removeOrganizationUser\n      parameters:\n        - $ref: \"#/components/parameters/organizationUser\"\n        - description: \u003e\n            If `true`, the account will be only removed from the organization\n            and converted into an individual account on our public website,\n            https://flat.io.\n\n            This operation will remove the education-related data from the account.\n\n            Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.\n          in: query\n          name: convertToIndividual\n          schema:\n            type: boolean\n      responses:\n        \"204\":\n          description: User deleted\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      summary: Remove an account from Flat\n      tags:\n        - Organization\n    put:\n      operationId: updateOrganizationUser\n      parameters:\n        - $ref: \"#/components/parameters/organizationUser\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserAdminUpdate\"\n        required: true\n      responses:\n        \"200\":\n          description: User updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserDetailsAdmin\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - edu.admin\n            - edu.admin.users\n      summary: Update account information\n      tags:\n        - Organization\n  /scores:\n    post:\n      description: \u003e\n        Use this API method to **create a new music score in the current User\n        account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or\n        `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3,\n        GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the\n        new Flat document.\n\n\n        This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).\n\n\n        The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).\n\n\n        If no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method.\n\n        If a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones.\n\n        You can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`.\n      operationId: createScore\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: Score created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreDetails\"\n        \"400\":\n          description: Bad score creation request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Create a new score\n      tags:\n        - Score\n  \"/scores/{score}\":\n    delete:\n      description: \u003e\n        This method can be used by the owner/admin (`aclAdmin` rights) of a\n        score as well as regular collaborators.\n\n\n        When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history.\n\n        The score won't be accessible anymore after calling this method and the user's quota will directly be updated.\n\n\n        When called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account \u0026 own collections).\n      operationId: deleteScore\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      responses:\n        \"204\":\n          description: The score has been removed\n        \"403\":\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Delete a score\n      tags:\n        - Score\n    get:\n      description: \u003e\n        Get the details of a score identified by the `score` parameter in the\n        URL.\n\n        The currently authenticated user must have at least a read access to the document to use this API call.\n      operationId: getScore\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreDetails\"\n        \"402\":\n          description: Account overquota and this document is out of the granted quota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: Get a score's metadata\n      tags:\n        - Score\n    put:\n      description: \u003e\n        This API method allows you to change the metadata of a score document\n        (e.g. its `title` or `privacy`), all the properties are optional.\n\n\n        To edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).\n\n\n        When editing the `title`, `subtitle`, `composer`, `lyricist` or `licenseText`, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily.\n\n        This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service.\n      operationId: editScore\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreModification\"\n      responses:\n        \"200\":\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreDetails\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Edit a score's metadata\n      tags:\n        - Score\n  \"/scores/{score}/collaborators\":\n    get:\n      description: \u003e\n        This API call will list the different collaborators of a score and their\n        rights on the document. The returned list will at least contain the\n        owner of the document.\n\n\n        Collaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).\n      operationId: getScoreCollaborators\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: List of collaborators\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ResourceCollaborator\"\n                type: array\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.readonly\n            - scores\n      summary: List the collaborators\n      tags:\n        - Score\n    post:\n      description: \u003e\n        Share a score with a single user or a group. This API call allows to\n        add, invite and update the collaborators of a resource.\n\n        - To add an existing Flat user to the resource, specify its unique identifier in the `user` property.\n\n        - To invite an external user to the resource, specify its email in the `userEmail` property.\n\n        - To add a Flat group to the resource, specify its unique identifier in the `group` property.\n\n        - To update an existing collaborator, process the same request with different rights.\n      operationId: addScoreCollaborator\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResourceCollaboratorCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: The newly added collaborator metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceCollaborator\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Add a new collaborator\n      tags:\n        - Score\n  \"/scores/{score}/collaborators/{collaborator}\":\n    delete:\n      description: |\n        Remove the specified collaborator from the score\n      operationId: removeScoreCollaborator\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/resourceCollaborator\"\n      responses:\n        \"204\":\n          description: The collaborator has been removed\n        \"403\":\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or collaborator not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Delete a collaborator\n      tags:\n        - Score\n    get:\n      description: |\n        Get the information about a collaborator (User or Group).\n      operationId: getScoreCollaborator\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/resourceCollaborator\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Collaborator information\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceCollaborator\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or collaborator not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.readonly\n      summary: Get a collaborator\n      tags:\n        - Score\n  \"/scores/{score}/comments\":\n    get:\n      description: This method lists the different comments added on a music score\n        (documents and inline) sorted by their post dates.\n      operationId: getScoreComments\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n        - description: Filter the comments by type\n          in: query\n          name: type\n          schema:\n            type: string\n            enum:\n              - document\n              - inline\n        - description: Sort\n          in: query\n          name: sort\n          schema:\n            type: string\n            enum:\n              - date\n        - $ref: \"#/components/parameters/sortDirection\"\n      responses:\n        \"200\":\n          description: The comments of the score\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreComment\"\n                type: array\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.readonly\n            - scores.social\n            - scores\n      summary: List comments\n      tags:\n        - Score\n    post:\n      description: \u003e\n        Post a document or a contextualized comment on a document.\n\n\n        Please note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.\n      operationId: postScoreComment\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreCommentCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: The new comment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreComment\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score, to post a comment, or your API\n            call triggered our spam filter.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      summary: Post a new comment\n      tags:\n        - Score\n  \"/scores/{score}/comments/{comment}\":\n    delete:\n      operationId: deleteScoreComment\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreComment\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"204\":\n          description: The comment has been deleted\n        \"403\":\n          description: Not granted to access to this score or not the original comment\n            creator\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      summary: Delete a comment\n      tags:\n        - Score\n    put:\n      operationId: updateScoreComment\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreComment\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreCommentUpdate\"\n        required: true\n      responses:\n        \"200\":\n          description: The edited comment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreComment\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score or not the original comment\n            creator\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      summary: Update an existing comment\n      tags:\n        - Score\n  \"/scores/{score}/comments/{comment}/resolved\":\n    delete:\n      operationId: markScoreCommentUnresolved\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreComment\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"204\":\n          description: The comment has been unmarked as resolved\n        \"403\":\n          description: Not granted to unmark this comment as resolved\n        \"404\":\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      summary: Mark the comment as unresolved\n      tags:\n        - Score\n    put:\n      operationId: markScoreCommentResolved\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreComment\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"204\":\n          description: The comment has been marked as resolved\n        \"403\":\n          description: Not granted to mark this comment as resolved\n        \"404\":\n          description: Score or comment not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores.social\n            - scores\n      summary: Mark the comment as resolved\n      tags:\n        - Score\n  \"/scores/{score}/fork\":\n    post:\n      description: \u003e\n        This API call will make a copy of the last revision of the specified\n        score and create a new score. The copy of the score will have a privacy\n        set to `private`.\n\n\n        When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.\n      operationId: forkScore\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreFork\"\n        required: true\n      responses:\n        \"200\":\n          description: Score details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreDetails\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Fork a score\n      tags:\n        - Score\n  \"/scores/{score}/revisions\":\n    get:\n      description: \u003e\n        When creating a score or saving a new version of a score, a revision is\n        created in our storage. This method allows you to list all of them,\n        sorted by last modification.\n\n\n        Depending the plan of the account, this list can be trunked to the few last revisions.\n      operationId: getScoreRevisions\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: List of revisions\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreRevision\"\n                type: array\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: List the revisions\n      tags:\n        - Score\n    post:\n      description: |\n        Update a score by uploading a new revision for this one.\n      operationId: createScoreRevision\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreRevisionCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: The new created revision metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreRevision\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to modify this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Create a new revision\n      tags:\n        - Score\n  \"/scores/{score}/revisions/{revision}\":\n    get:\n      description: \u003e\n        When creating a score or saving a new version of a score, a revision is\n        created in our storage. This method allows you to get a specific\n\n        revision metadata.\n      operationId: getScoreRevision\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreRevision\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Revision metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreRevision\"\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: Get a score revision\n      tags:\n        - Score\n  \"/scores/{score}/revisions/{revision}/{format}\":\n    get:\n      description: \u003e\n        Retrieve the file corresponding to a score revision (the following\n        formats are available: Flat JSON/Adagio JSON `json`, MusicXML\n\n        `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, or a tumbnail of the first page `thumbnail.png`).\n      operationId: getScoreRevisionData\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreRevision\"\n        - $ref: \"#/components/parameters/sharingKey\"\n        - $ref: \"#/components/parameters/scoreParts\"\n        - description: The format of the file you will retrieve\n          in: path\n          name: format\n          required: true\n          schema:\n            type: string\n            enum:\n              - json\n              - mxl\n              - xml\n              - mp3\n              - wav\n              - midi\n              - thumbnail.png\n        - description: |\n            Only return files already generated and cached in Flat's production\n            cache. If the file is not availabe, a 404 will be returned\n          in: query\n          name: onlyCached\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Revision data\n          content:\n            application/json:\n              schema:\n                format: binary\n                type: string\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                format: binary\n                type: string\n            application/vnd.recordare.musicxml:\n              schema:\n                format: binary\n                type: string\n            audio/mp3:\n              schema:\n                format: binary\n                type: string\n            audio/wav:\n              schema:\n                format: binary\n                type: string\n            audio/midi:\n              schema:\n                format: binary\n                type: string\n            image/png:\n              schema:\n                format: binary\n                type: string\n        \"402\":\n          description: Account overquota\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/mp3:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/wav:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/midi:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            image/png:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/mp3:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/wav:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/midi:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            image/png:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or associated file not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/mp3:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/wav:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/midi:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            image/png:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml+xml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            application/vnd.recordare.musicxml:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/mp3:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/wav:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            audio/midi:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n            image/png:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: Get a score revision data\n      tags:\n        - Score\n  \"/scores/{score}/submissions\":\n    get:\n      description: \u003e\n        This API call will list the different assignments submissions where the\n        score is attached. This method can be used by anyone that are part of\n        the organization and have at least read access to the document.\n      operationId: getScoreSubmissions\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      responses:\n        \"200\":\n          description: List of submissions\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssignmentSubmission\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: List submissions related to the score\n      tags:\n        - Score\n        - Class\n  \"/scores/{score}/tracks\":\n    get:\n      operationId: listScoreTracks\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: List of tracks\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreTrack\"\n                type: array\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: List the audio or video tracks linked to a score\n      tags:\n        - Score\n    post:\n      description: \u003e\n        Use this method to add new track to the score. This track can then be\n        played on flat.io or in an embedded score.\n\n        This API method support medias hosted on SoundCloud, YouTube and Vimeo.\n      operationId: addScoreTrack\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreTrackCreation\"\n        required: true\n      responses:\n        \"200\":\n          description: Created track\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreTrack\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Add a new video or audio track to the score\n      tags:\n        - Score\n  \"/scores/{score}/tracks/{track}\":\n    delete:\n      operationId: deleteScoreTrack\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreTrack\"\n      responses:\n        \"204\":\n          description: Track removed\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Remove an audio or video track linked to the score\n      tags:\n        - Score\n    get:\n      operationId: getScoreTrack\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreTrack\"\n        - $ref: \"#/components/parameters/sharingKey\"\n      responses:\n        \"200\":\n          description: Track details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreTrack\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: Retrieve the details of an audio or video track linked to a score\n      tags:\n        - Score\n    put:\n      operationId: updateScoreTrack\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n        - $ref: \"#/components/parameters/scoreTrack\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScoreTrackUpdate\"\n        required: true\n      responses:\n        \"200\":\n          description: Updated track\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScoreTrack\"\n        \"403\":\n          description: Not granted to access to this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score or Track not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n      summary: Update an audio or video track linked to a score\n      tags:\n        - Score\n  \"/scores/{score}/untrash\":\n    post:\n      description: \u003e\n        This method will remove the score from the `trash` collection and from\n        the deletion queue, and add it back to the original collections.\n      operationId: untrashScore\n      parameters:\n        - $ref: \"#/components/parameters/score\"\n      responses:\n        \"204\":\n          description: The score has been untrashed\n        \"403\":\n          description: Not granted to manage this score\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        \"404\":\n          description: Score not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security: []\n      summary: Untrash a score\n      tags:\n        - Score\n  \"/users/{user}\":\n    get:\n      description: |\n        Get a public profile of a Flat User.\n      operationId: getUser\n      parameters:\n        - description: \u003e\n            This route parameter is the unique identifier of the user. You can\n            specify an email instead of an unique identifier. If you are\n            executing this request authenticated, you can use `me` as a value\n            instead of the current User unique identifier to work on the current\n            authenticated user.\n          in: path\n          name: user\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The user public details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserPublic\"\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - account.public_profile\n            - account.education_profile\n      summary: Get a public user profile\n      tags:\n        - User\n  \"/users/{user}/likes\":\n    get:\n      operationId: gerUserLikes\n      parameters:\n        - $ref: \"#/components/parameters/user\"\n        - description: Return only the identifiers of the scores\n          in: query\n          name: ids\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: List of liked scores\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreDetails\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - account.public_profile\n      summary: List liked scores\n      tags:\n        - User\n        - Score\n  \"/users/{user}/scores\":\n    get:\n      description: \u003e\n        Get the list of public scores owned by a User.\n\n\n        **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.\n\n        This method will no longer list private and shared scores, but only public scores of a Flat account.\n\n        If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.\n      operationId: getUserScores\n      parameters:\n        - $ref: \"#/components/parameters/user\"\n        - description: Filter the score forked from the score id `parent`\n          in: query\n          name: parent\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The user scores\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScoreDetails\"\n                type: array\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlatErrorResponse\"\n      security:\n        - OAuth2:\n            - scores\n            - scores.readonly\n      summary: List user's scores\n      tags:\n        - User\n        - Score\nservers:\n  - url: https://api.flat.io/v2\ncomponents:\n  parameters:\n    collection:\n      description: \u003e\n        Unique identifier of the collection.\n\n        The following aliases are supported:\n\n        - `root`: The root collection of the account\n\n        - `sharedWithMe`: Automatically contains new resources that have been shared individually\n\n        - `trash`: Automatically contains resources that have been deleted\n      in: path\n      name: collection\n      required: true\n      schema:\n        type: string\n    group:\n      description: |\n        Unique identifier of a Flat group\n      in: path\n      name: group\n      required: true\n      schema:\n        type: string\n    limit:\n      description: This is the maximum number of objects that may be returned\n      in: query\n      name: limit\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 1000\n        default: 50\n    limitDefault25Max100:\n      description: This is the maximum number of objects that may be returned\n      in: query\n      name: limit\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 25\n    next:\n      description: \u003e\n        An opaque string cursor to fetch the next page of data.\n\n        The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.\n      in: query\n      name: next\n      schema:\n        type: string\n    organizationUser:\n      description: |\n        Unique identifier of the Flat account\n      in: path\n      name: user\n      required: true\n      schema:\n        type: string\n    previous:\n      description: \u003e\n        An opaque string cursor to fetch the previous page of data.\n\n        The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.\n      in: query\n      name: previous\n      schema:\n        type: string\n    resourceCollaborator:\n      description: \u003e\n        Unique identifier of a **collaborator permission**, or unique identifier\n        of a **User**, or unique identifier of a **Group**\n      in: path\n      name: collaborator\n      required: true\n      schema:\n        type: string\n    score:\n      description: \u003e\n        Unique identifier of the score document. This can be a Flat Score unique\n        identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google\n        Drive file, the Drive file unique identifier prefixed with `drive-`\n        (e.g. `drive-0B000000000`).\n      in: path\n      name: score\n      required: true\n      schema:\n        type: string\n    scoreComment:\n      description: |\n        Unique identifier of a sheet music comment\n      in: path\n      name: comment\n      required: true\n      schema:\n        type: string\n    scoreParts:\n      description: |\n        An optional a set of parts to be exported. This parameter must be\n        specified with a list of integers. For example \"1,2,5\".\n      in: query\n      name: parts\n      schema:\n        type: string\n    scoreRevision:\n      description: \u003e\n        Unique identifier of a score revision. You can use `last` to fetch the\n        information related to the last version created.\n      in: path\n      name: revision\n      required: true\n      schema:\n        type: string\n    scoreTrack:\n      description: |\n        Unique identifier of a score audio track\n      in: path\n      name: track\n      required: true\n      schema:\n        type: string\n    sharingKey:\n      description: \u003e\n        This sharing key must be specified to access to a score or collection\n        with a `privacy` mode set to `privateLink` and the current user is not a\n        collaborator of the document.\n      in: query\n      name: sharingKey\n      schema:\n        type: string\n    sortDirection:\n      description: Sort direction\n      in: query\n      name: direction\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n    user:\n      description: \u003e\n        Unique identifier of a Flat user. If you authenticated, you can use `me`\n        to refer to the current user.\n      in: path\n      name: user\n      required: true\n      schema:\n        type: string\n  requestBodies:\n    AssignmentSubmissionUpdate:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AssignmentSubmissionUpdate\"\n      required: true\n  securitySchemes:\n    OAuth2:\n      description: \u003e\n        OAuth 2.0 authentication for your app or. Please only request the most\n        restrictive and needed scopes. Using some of the scopes may require an\n        additional review from our team. The Flat API supports **authorization\n        code** and **implicit** flows.\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://flat.io/auth/oauth\n          tokenUrl: https://api.flat.io/oauth/access_token\n          scopes:\n            account.education_profile: \u003e\n              Provides access to the basic person's education profile and public\n              organization information.\n            account.email: |\n              Provices access to the person's email.\n            account.public_profile: \u003e\n              Provides access to the basic person's public profile. Education\n              profiles may be anonymized with this scope, you can request the\n              scope `education_profile` to access to the a basic education\n              account profile.\n            collections: Full, permissive scope to access all of a user's collections.\n            collections.add_scores: Allow to add scores to a user's collections.\n            collections.readonly: Allow read-only access to a user's collections.\n            edu.admin: Full, permissive scope to manage all the admin of an organization.\n            edu.admin.lti: Access and manage the LTI Credentials for an organization.\n            edu.admin.lti.readonly: Read-only access to the LTI Credentials of an organization.\n            edu.admin.users: Access and manage the users and invitations of the organization.\n            edu.admin.users.readonly: Read-only access to the users and invitations of the organization.\n            edu.assignments: Read-write access to the assignments and submissions.\n            edu.assignments.readonly: Read-only access to the assignments and submissions.\n            edu.classes: Full, permissive scope to manage the classes.\n            edu.classes.readonly: Read-only access to the classes.\n            scores: |\n              Full, permissive scope to access all of a user's scores.\n            scores.readonly: \u003e\n              Allows read-only access to all a user's scores. You won't need\n              this scope to read public scores.\n            scores.social: |\n              Allow to post comments and like scores\n  schemas:\n    Assignment:\n      description: Assignment details\n      example:\n        attachments:\n          - score: \"0000000000000000\"\n            type: flat\n          - type: link\n            url: https://flat.io/developers\n          - authorName: Flat\n            authorUrl: https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw\n            description: Discover Flat on https://flat.io\n            html: \u003ciframe width=\"560\" height=\"315\"\n              src=\"https://www.youtube.com/embed/SNbRUiBZ4Uw\" frameborder=\"0\"\n              allowfullscreen\u003e\u003c/iframe\u003e\n            thumbnailHeight: 1052\n            thumbnailUrl: https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg\n            thumbnailWidth: 1868\n            title: Flat - The online collaborative music notation software\n            type: video\n            url: https://www.youtube.com/watch?v=SNbRUiBZ4Uw\n        classroom: 58c4725345cd836264f0b29e\n        creationDate: 2017-06-12T13:56:19.613Z\n        creator: 5832bf149995c4024bd6de7d\n        description: Get started with Flat\n        dueDate: 2017-07-12T13:56:19.613Z\n        googleClassroom:\n          alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/detail\n          id: \"1235665432\"\n        scheduledDate: 2017-06-18T13:56:19.613Z\n        state: active\n        submissions:\n          - assignment: 58c49068524c03ec576ca43c\n            attachments:\n              - score: 58c4955a226ffff257211a8d\n                title: Hello - Student\n                type: flat\n            classroom: 58c4725345cd836264f0b29e\n            creationDate: 2017-03-12T00:25:00.748Z\n            creator: 559eb5c7f0d4d5e46d03781d\n            googleClassroom:\n              alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n              id: CgsI-00000000000\n              state: turned_in\n            id: 58c4955c226ffff257211a90\n            submissionDate: 2017-03-12T00:25:22.748Z\n        title: My first assignment\n      properties:\n        attachments:\n          items:\n            $ref: \"#/components/schemas/MediaAttachment\"\n          type: array\n        classroom:\n          description: The unique identifier of the class where this assignment was posted\n          type: string\n        creationDate:\n          description: The creation date of this assignment\n          format: date-time\n          type: string\n        creator:\n          description: |\n            The User unique identifier of the creator of this assignment\n          type: string\n        description:\n          description: Description and content of the assignment\n          type: string\n        dueDate:\n          description: |\n            The due date of this assignment, late submissions will be marked as\n            paste due.\n          format: date-time\n          type: string\n        googleClassroom:\n          $ref: \"#/components/schemas/GoogleClassroomCoursework\"\n        scheduledDate:\n          description: \u003e\n            The publication (scheduled) date of the assignment.\n\n            If this one is specified, the assignment will only be listed to the teachers of the class.\n          format: date-time\n          type: string\n        state:\n          description: State of the assignment\n          enum:\n            - draft\n            - active\n            - archived\n          type: string\n        submissions:\n          items:\n            $ref: \"#/components/schemas/AssignmentSubmission\"\n          type: array\n        title:\n          description: Title of the assignment\n          type: string\n      type: object\n    AssignmentCopy:\n      description: Assignment copy operation\n      example:\n        classroom: \"0000000000000000\"\n      properties:\n        classroom:\n          description: The destination classroom where the assignment will be copied\n          type: string\n      required:\n        - classroom\n      type: object\n    AssignmentCreation:\n      description: Assignment creation details\n      example:\n        attachments:\n          - score: \"0000000000000000\"\n            type: flat\n          - type: link\n            url: https://flat.io/developers\n        description: Get started with Flat\n        dueDate: 2017-07-12T13:56:19.613Z\n        scheduledDate: 2017-06-20T13:56:19.613Z\n        title: First assignment\n      properties:\n        attachments:\n          items:\n            $ref: \"#/components/schemas/ClassAttachmentCreation\"\n          type: array\n        description:\n          description: Description and content of the assignment\n          type: string\n        dueDate:\n          description: \u003e\n            The due date of this assignment, late submissions will be marked as\n            paste due. If not set, the assignment won't have a due date.\n          format: date-time\n          type: string\n        scheduledDate:\n          description: \u003e\n            The publication (scheduled) date of the assignment.\n\n            If this one is specified, the assignment will only be listed to the teachers of the class.\n          format: date-time\n          type: string\n        title:\n          description: Title of the assignment\n          type: string\n      type: object\n    AssignmentSubmission:\n      description: Assignment Submission\n      example:\n        assignment: 58c49068524c03ec576ca43c\n        attachments:\n          - score: 58c4955a226ffff257211a8d\n            title: Hello - Student\n            type: flat\n        classroom: 58c4725345cd836264f0b29e\n        creationDate: 2017-03-12T00:25:00.748Z\n        creator: 559eb5c7f0d4d5e46d03781d\n        googleClassroom:\n          alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n          id: CgsI-00000000000\n          state: turned_in\n        id: 58c4955c226ffff257211a90\n        submissionDate: 2017-03-12T00:25:22.748Z\n      properties:\n        assignment:\n          description: Unique identifier of the assignment\n          type: string\n        attachments:\n          items:\n            $ref: \"#/components/schemas/MediaAttachment\"\n          type: array\n        classroom:\n          description: |\n            Unique identifier of the classroom where the assignment was posted\n          type: string\n        creationDate:\n          description: The date when the submission was created\n          type: string\n        creator:\n          description: The User identifier of the student who created the submission\n          type: string\n        googleClassroom:\n          $ref: \"#/components/schemas/GoogleClassroomSubmission\"\n        id:\n          description: Unique identifier of the submission\n          type: string\n        returnCreator:\n          description: \u003e\n            The User unique identifier of the teacher who returned the submission\n          type: string\n        returnDate:\n          description: The date when the teacher returned the work\n          type: string\n        returnFeedback:\n          description: The feedback associated with the return\n          type: string\n        state:\n          description: State of the submission\n          enum:\n            - created\n            - turnedIn\n            - returned\n          type: string\n        studentComment:\n          description: |\n            An optionnal comment sent by the student when submitting his work\n          type: string\n        submissionDate:\n          description: The date when the student submitted his work\n          type: string\n      type: object\n    AssignmentSubmissionUpdate:\n      description: Assignment Submission creation\n      example:\n        attachments:\n          - score: 58c4955a226ffff257211a8d\n            title: Hello - Student\n            type: flat\n        studentComment: Here is my great creation\n        submit: true\n      properties:\n        attachments:\n          items:\n            $ref: \"#/components/schemas/ClassAttachmentCreation\"\n          type: array\n        returnFeedback:\n          description: The feedback associated with the return\n          type: string\n        studentComment:\n          description: |\n            An optionnal comment sent by the student when submitting his work\n          type: string\n        submit:\n          description: If `true`, the submission will be marked as done\n          type: boolean\n      type: object\n    ClassAttachmentCreation:\n      description: \u003e\n        Attachment creation for an assignment or stream post.\n\n        This attachment must contain a `score` or an `url`, all the details of this one will be resolved and returned as `ClassAttachment` once the assignment or stream post is created.\n      example:\n        score: \"000000000000000001\"\n        sharingMode: copy\n        type: flat\n      properties:\n        score:\n          description: \u003e\n            A unique Flat score identifier. The user creating the assignment\n            must at least have read access to the document. If the user has\n            admin rights, new group permissions will be automatically added for\n            the\n\n            teachers and students of the class.\n          type: string\n        type:\n          description: The type of the attachment posted\n          enum:\n            - flat\n            - link\n            - exercise\n          type: string\n        url:\n          description: The URL of the attachment.\n          type: string\n      type: object\n    ClassCreation:\n      description: Creation of a classroom\n      example:\n        name: Music Theory Course\n        section: Music Theory 101\n      properties:\n        name:\n          description: The name of the new class\n          maxLength: 255\n          type: string\n        section:\n          description: The section of the new class\n          maxLength: 255\n          type: string\n      required:\n        - name\n      type: object\n    ClassDetails:\n      description: A classroom\n      example:\n        assignmentsCount: 10\n        canvas:\n          id: \"000000000\"\n        creationTime: 2017-01-25T09:47:34.544Z\n        enrollmentCode: jm447ear\n        googleClassroom:\n          alternateLink: http://classroom.google.com/c/music-theory\n          creationTime: 2017-01-25T09:47:34.544Z\n          id: \"00000000\"\n          name: Music Theory 101\n          ownerId: \"0000000000424242\"\n          updateTime: 2017-01-25T09:47:33.481Z\n        googleDrive:\n          teacherFolderAlternateLink: https://drive.google.com/drive/folders/0B-0000000000000000\n          teacherFolderId: 0B-0000000000000000\n        id: \"100000000000000000000001\"\n        lti:\n          contextId: \"042\"\n          contextLabel: MUSIC\n          contextTitle: Music Theory 101\n        name: Music Theory 101\n        organization: \"100000000000000000000002\"\n        owner: \"100000000000000000000003\"\n        section: Music Theory 101\n        state: active\n        theme: blue-8\n      properties:\n        assignmentsCount:\n          description: The number of assignments created in the class\n          type: number\n        canvas:\n          description: Meta information provided by Canvs LMS\n          properties:\n            domain:\n              description: Canvas instance domain (e.g. \"canvas.instructure.com\")\n              type: string\n            id:\n              description: Unique identifier of the course on Canvas\n              type: string\n          type: object\n        clever:\n          description: Clever.com section-related information\n          properties:\n            creationDate:\n              description: The creation date of the section on clever\n              format: date-time\n              type: string\n            id:\n              description: Clever section unique identifier\n              type: string\n            modificationDate:\n              description: The last modification date of the section on clever\n              format: date-time\n              type: string\n            subject:\n              description: Normalized subject of the course\n              enum:\n                - english/language arts\n                - math\n                - science\n                - social studies\n                - language\n                - homeroom/advisory\n                - interventions/online learning\n                - technology and engineering\n                - PE and health\n                - arts and music\n                - other\n              type: string\n            termEndDate:\n              description: End date of the term\n              format: date-time\n              type: string\n            termName:\n              description: Name of the term when this course happens\n              type: string\n            termStartDate:\n              description: Beginning date of the term\n              format: date-time\n              type: string\n          type: object\n        creationDate:\n          description: The date when the class was create\n          format: date-time\n          type: string\n        description:\n          description: An optionnal description for this class\n          type: string\n        enrollmentCode:\n          description: \u003e\n            [Teachers only] The enrollment code that can be used by the students\n            to join the class\n          type: string\n        googleClassroom:\n          description: Google Classroom course-related information\n          properties:\n            alternateLink:\n              description: Absolute link to this course in the Classroom web UI\n              type: string\n            id:\n              description: The course identifier on Google Classroom\n              type: string\n            name:\n              description: The name of the course on Google Classroom\n              type: string\n            section:\n              description: The section of the course on Google Classroom\n              type: string\n          type: object\n        googleDrive:\n          description: Google Drive course-related information provided by Google Classroom\n          properties:\n            teacherFolderAlternateLink:\n              description: |\n                [Teachers only] The Drive URL of the teachers' folder\n              type: string\n            teacherFolderId:\n              description: \u003e\n                [Teachers only] The Drive directory identifier of the teachers'\n                folder\n              type: string\n          type: object\n        id:\n          description: The unique identifier of the class\n          type: string\n        lti:\n          description: Meta information provided by the LTI consumer\n          properties:\n            contextId:\n              description: Unique context identifier provided\n              type: string\n            contextLabel:\n              description: Context label\n              type: string\n            contextTitle:\n              description: Context title\n              type: string\n          type: object\n        name:\n          description: The name of the class\n          type: string\n        organization:\n          description: The unique identifier of the Organization owning this class\n          type: string\n        owner:\n          description: The unique identifier of the User owning this class\n          type: string\n        section:\n          description: The section of the class\n          type: string\n        state:\n          $ref: \"#/components/schemas/ClassState\"\n        studentsGroup:\n          $ref: \"#/components/schemas/GroupDetails\"\n        teachersGroup:\n          $ref: \"#/components/schemas/GroupDetails\"\n        theme:\n          description: The theme identifier using in Flat User Interface\n          type: string\n      type: object\n    ClassRoles:\n      description: User's Class Role (for Edu users only)\n      enum:\n        - teacher\n        - student\n      type: string\n    ClassState:\n      description: The state of a classroom\n      enum:\n        - active\n        - inactive\n        - archived\n      type: string\n    ClassUpdate:\n      description: Update of a classroom\n      example:\n        name: Music Theory Course\n        section: Music Theory 101\n      properties:\n        name:\n          description: The name of the class\n          maxLength: 255\n          type: string\n        section:\n          description: The section of the class\n          maxLength: 255\n          type: string\n      type: object\n    Collection:\n      description: Collection of scores\n      properties:\n        app:\n          description: If this directory is dedicated to an app, the unique idenfier of\n            this app\n          type: string\n        capabilities:\n          description: Capabilities the current user has on this collection. Each\n            capability corresponds to a fine-grained action that a user may\n            take.\n          properties:\n            canAddScores:\n              description: \u003e\n                Whether the current user can add scores to the collection\n\n\n                If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.\n              type: boolean\n            canDelete:\n              description: |\n                Whether the current user can delete the collection\n              type: boolean\n            canDeleteScores:\n              description: \u003e\n                Whether the current user can delete scores from the collection\n\n\n                If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.\n              type: boolean\n            canEdit:\n              description: \u003e\n                Whether the current user can modify the metadata for the\n                collection\n              type: boolean\n            canShare:\n              description: \u003e\n                Whether the current user can modify the sharing settings for the\n                collection\n              type: boolean\n          type: object\n        collaborators:\n          description: The list of the collaborators of the collection\n          items:\n            $ref: \"#/components/schemas/ResourceCollaborator\"\n          type: array\n        collections:\n          description: The List of parent collections, which includes all the collections\n            this score is included. Please note that you might not have access\n            to all of them.\n          items:\n            type: string\n          type: array\n        creationDate:\n          description: The date when the collection was created\n          format: date-time\n          type: string\n        htmlUrl:\n          description: The url where the collection can be viewed in a web browser\n          format: url\n          type: string\n        id:\n          description: Unique identifier of the collection\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/CollectionPrivacy\"\n        rights:\n          $ref: \"#/components/schemas/ResourceRights\"\n        sharingKey:\n          description: The private sharing key of the collection (available when the\n            `privacy` mode is set to `privateLink`)\n          type: string\n        title:\n          description: The title of the collection\n          type: string\n        type:\n          $ref: \"#/components/schemas/CollectionType\"\n        user:\n          $ref: \"#/components/schemas/UserPublicSummary\"\n      type: object\n    CollectionCreation:\n      example:\n        privacy: private\n        title: Jazz scores\n      properties:\n        title:\n          description: The title of the collection\n          maxLength: 300\n          minLength: 1\n          type: string\n      required:\n        - title\n      type: object\n    CollectionModification:\n      description: Edit the collection metadata\n      properties:\n        title:\n          description: The title of the collection\n          maxLength: 300\n          minLength: 1\n          type: string\n      type: object\n    CollectionPrivacy:\n      description: \u003e\n        The collection main privacy mode.\n\n        - `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.\n      enum:\n        - private\n      type: string\n    CollectionType:\n      description: \u003e\n        Type of the collection.\n\n        The type will influence the capabilitied available on the collections and how this collection is/can be populated.\n      enum:\n        - root\n        - regular\n        - sharedWithMe\n        - sharedWithGroup\n        - trash\n      type: string\n    FlatErrorResponse:\n      example:\n        code: CLIENT_ERROR\n        id: \"123456789\"\n        message: Invalid request\n      properties:\n        code:\n          description: A corresponding code for this error\n          type: string\n        id:\n          description: An unique error identifier generated for the request\n          type: string\n        message:\n          description: A printable message for this message\n          type: string\n        param:\n          description: The related parameter that caused the error\n          type: string\n      type: object\n    FlatLocales:\n      default: en\n      description: The user language\n      enum:\n        - en\n        - es\n        - fr\n        - de\n        - it\n        - ja\n        - ko\n        - nl\n        - pl\n        - pt\n        - ro\n        - ru\n        - tr\n        - zh-Hans\n      type: string\n    GoogleClassroomCoursework:\n      description: A coursework on Google Classroom\n      example:\n        alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/detail\n        id: \"1235665432\"\n      properties:\n        alternateLink:\n          description: Absolute link to this coursework in the Classroom web UI\n          type: string\n        id:\n          description: Identifier of the coursework assigned by Classroom\n          type: string\n        state:\n          description: State of the coursework\n          type: string\n      type: object\n    GoogleClassroomSubmission:\n      description: A coursework submission on Google Classroom\n      example:\n        alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission\n        id: CgsI-00000000000\n        state: turned_in\n      properties:\n        alternateLink:\n          description: Absolute link to this coursework in the Classroom web UI\n          type: string\n        id:\n          description: Identifier of the coursework submission assigned by Classroom\n          type: string\n        state:\n          description: State of the submission on Google Classroom\n          type: string\n      type: object\n    Group:\n      description: A group of users\n      example:\n        creationDate: 2015-01-19T00:22:02.387Z\n        id: \"0000000000000000000000043\"\n        name: 5th grade\n        organization: \"0000000000000000000000042\"\n        readOnly: true\n        type: classTeachers\n        userCount: 24\n      properties:\n        creationDate:\n          description: The creation date of the group\n          format: date-time\n          type: string\n        id:\n          description: The unique identifier of the group\n          type: string\n        name:\n          description: The display name of the group\n          type: string\n        organization:\n          description: |\n            If the group is related to an organization, this field will contain\n            the unique identifier of the organization\n          type: string\n        readOnly:\n          description: |\n            `True` if the group is set in read-only\n          type: boolean\n        type:\n          description: \u003e\n            The type of the group:\n\n            * `generic`: A group created by a Flat user\n\n            * `classTeachers`: A group created automaticaly by Flat that contains\n              the teachers of a class\n            * `classStudents`: A group created automaticaly by Flat that contains\n              the studnets of a class\n          enum:\n            - generic\n            - classTeachers\n            - classStudents\n          type: string\n        usersCount:\n          description: The number of users in this group\n          type: number\n      type: object\n    GroupDetails:\n      description: The details of a group\n      example:\n        creationDate: 2017-07-02T15:02:40.207Z\n        id: 58c4955c226ffff257211a00\n        name: 5th Grade - Teachers\n        organization: \"0000000000000000000000042\"\n        readOnly: false\n        type: classTeachers\n        usersCount: 2\n      properties:\n        creationDate:\n          description: The date when the group was create\n          format: date-time\n          type: string\n        id:\n          description: The unique identifier of the group\n          type: string\n        name:\n          description: The displayable name of the group\n          type: string\n        organization:\n          description: The unique identifier of the Organization owning the group\n          type: string\n        readOnly:\n          description: \u003e\n            `true` if the properties and members of this group are in in\n            read-only\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/GroupType\"\n        usersCount:\n          description: The number of students in this group\n          type: number\n      type: object\n    GroupType:\n      description: The type of the group\n      enum:\n        - generic\n        - classTeachers\n        - classStudents\n      type: string\n    LicenseMode:\n      description: Mode of the license\n      enum:\n        - credit\n        - site\n      type: string\n    LicenseSources:\n      default: order\n      description: Source of the license\n      enum:\n        - order\n        - trial\n        - voucher\n        - distributor\n        - subscription\n        - appStore\n      type: string\n    LmsName:\n      description: LMS name\n      enum:\n        - canvas\n        - moodle\n        - schoology\n        - blackboard\n        - desire2learn\n        - sakai\n        - schoolbox\n        - other\n      type: string\n    LtiCredentials:\n      description: A couple of LTI 1.x OAuth credentials\n      example:\n        consumerKey: 200082F5-FAFD-4C6E-BB19-7DAB5D6264D4\n        consumerSecret: 168b6181c05eae14298176a274273e4ebef0d15555fe3e80c6a98ccd57d0c3b6\n        creationDate: 2017-06-06T11:03:01.955Z\n        creator: 5832bf149995c4024bd6de7d\n        id: 59368be5c66caf895ee02387\n        lastUsage: 2017-06-13T16:02:34.324Z\n        lms: canvas\n        name: My couple of credentials for Canvas\n        organization: 5832c801a4bedc05f4fb4993\n      properties:\n        consumerKey:\n          description: OAuth 1 Consumer Key\n          type: string\n        consumerSecret:\n          description: OAuth 1 Consumer Secret\n          type: string\n        creationDate:\n          description: The creation date of thse credentials\n          format: date-time\n          type: string\n        creator:\n          description: Unique identifier of the user who created these credentials\n          type: string\n        id:\n          description: The unique identifier of this couple of credentials\n          type: string\n        lastUsage:\n          description: The last time these credentials were used\n          format: date-time\n          type: string\n        lms:\n          $ref: \"#/components/schemas/LmsName\"\n        name:\n          description: Name of the couple of credentials\n          type: string\n        organization:\n          description: The unique identifier of the Organization associated to these\n            credentials\n          type: string\n      type: object\n    LtiCredentialsCreation:\n      description: Creation of a couple of LTI 1.x OAuth credentials\n      example:\n        lms: canvas\n        name: My couple of credentials for Canvas\n      properties:\n        lms:\n          $ref: \"#/components/schemas/LmsName\"\n        name:\n          description: Name of the couple of credentials\n          maxLength: 300\n          type: string\n      required:\n        - name\n        - lms\n      type: object\n    MediaAttachment:\n      description: \u003e\n        Media attachment. The API will automatically resolve the details,\n        oEmbed,\n\n        and media available if possible and return them in this object\n      example:\n        authorName: Flat\n        authorUrl: https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw\n        description: Discover Flat on https://flat.io\n        html: \u003ciframe width=\"560\" height=\"315\"\n          src=\"https://www.youtube.com/embed/SNbRUiBZ4Uw\" frameborder=\"0\"\n          allowfullscreen\u003e\u003c/iframe\u003e\n        thumbnailHeight: 1052\n        thumbnailUrl: https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg\n        thumbnailWidth: 1868\n        title: Flat - The online collaborative music notation software\n        type: video\n        url: https://www.youtube.com/watch?v=SNbRUiBZ4Uw\n      properties:\n        authorName:\n          description: The resolved author name of the attachment\n          type: string\n        authorUrl:\n          description: The resolved author url of the attachment\n          type: string\n        correct:\n          description: If the attachment is an exercise question, this state will describe\n            if it is correct or not.For exercise assignments only.\n          type: boolean\n        description:\n          description: The resolved description of the attachment\n          type: string\n        html:\n          description: |\n            If the attachment type is `rich` or `video`, the HTML code of the\n            media to display\n          type: string\n        htmlHeight:\n          description: If the `html` is available, the height of the widget\n          type: string\n        htmlWidth:\n          description: If the `html` is available, the width of the widget\n          type: string\n        revision:\n          description: An unique revision identifier of a score\n          type: string\n        score:\n          description: An unique Flat score identifier\n          type: string\n        sharingMode:\n          $ref: \"#/components/schemas/MediaScoreSharingMode\"\n        thumbnailHeight:\n          description: |\n            If the `thumbnailUrl` is available, the width of the thumbnail\n          type: string\n        thumbnailUrl:\n          description: |\n            If the attachment type is `rich`, `video`, `photo` or `link`, a\n            displayable thumbnail for this attachment\n          type: string\n        thumbnailWidth:\n          description: |\n            If the `thumbnailUrl` is available, the width of the thumbnail\n          type: string\n        title:\n          description: The resolved title of the attachment\n          type: string\n        type:\n          description: \u003e\n            The type of the assignment resolved:\n\n            * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.\n\n            * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.\n          enum:\n            - rich\n            - photo\n            - video\n            - link\n            - flat\n            - exercise\n          type: string\n        url:\n          description: The url of the attachment\n          type: string\n      type: object\n    MediaScoreSharingMode:\n      default: read\n      description: The sharing mode of the score for classes post and assignments\n      enum:\n        - read\n        - write\n        - copy\n      type: string\n    OrganizationInvitation:\n      description: Details of an invitation to join an organization\n      example:\n        creationDate: 2017-07-02T15:05:15.576Z\n        customCode: u5raQ7pZ\n        email: edu@flat.io\n        id: 59590bab53b1af260610000\n        invitedBy: 55b8d8f395c8db031ed00000\n        organization: 55df29a6694e4a3953100000\n        organizationRole: teacher\n        usedBy: null\n      properties:\n        customCode:\n          description: Enrollment code to use when joining this organization\n          type: string\n        email:\n          description: The email address this invitation was sent to\n          type: string\n        id:\n          description: The invitation unique identifier\n          type: string\n        invitedBy:\n          description: The unique identifier of the User who created this invitation\n          type: string\n        organization:\n          description: The unique identifier of the Organization owning this class\n          type: string\n        organizationRole:\n          $ref: \"#/components/schemas/OrganizationRoles\"\n        usedBy:\n          description: The unique identifier of the User who used this invitation\n          type: string\n      type: object\n    OrganizationInvitationCreation:\n      description: The parameters to create an organization invitation\n      example:\n        email: edu@flat.io\n        organizationRole: teacher\n      properties:\n        email:\n          description: The email address you want to send the invitation to\n          type: string\n        organizationRole:\n          $ref: \"#/components/schemas/OrganizationRoles\"\n      type: object\n    OrganizationRoles:\n      description: User's Organization Role (for Edu users only)\n      enum:\n        - admin\n        - billing\n        - teacher\n        - user\n      type: string\n    ResourceCollaborator:\n      allOf:\n        - $ref: \"#/components/schemas/ResourceRights\"\n        - properties:\n            collection:\n              description: If this object is a permission of a collection, this property\n                will contain the unique identifier of the collection\n              type: string\n            group:\n              $ref: \"#/components/schemas/Group\"\n            id:\n              description: The unique identifier of the permission\n              type: string\n            score:\n              description: If this object is a permission of a score, this property will\n                contain the unique identifier of the score\n              type: string\n            user:\n              $ref: \"#/components/schemas/UserPublic\"\n            userEmail:\n              description: \u003e\n                If the collaborator is not a user of Flat yet, this field will\n                contain his email.\n              type: string\n          type: object\n      description: \u003e\n        A collaborator of a score. The `userEmail` and `group` are only\n        available if the requesting user is a collaborator of the related score\n        (in this case these permissions will eventualy not be listed and exposed\n        publicly).\n      example:\n        aclAdmin: true\n        aclRead: true\n        aclWrite: true\n        id: \"000000000000000000000031\"\n        score: \"000000000000000000000040\"\n        userEmail: user@example.com\n    ResourceCollaboratorCreation:\n      description: Add a collaborator to a resource.\n      example:\n        aclAdmin: false\n        aclRead: true\n        aclWrite: true\n        userEmail: jdoe@flat.io\n      properties:\n        aclAdmin:\n          default: false\n          description: \u003e\n            `True` if the related user can can manage the current document, i.e.\n            changing the document permissions and deleting the document\n          type: boolean\n        aclRead:\n          default: true\n          description: \u003e\n            `True` if the related user can read the score. (probably true if the\n            user has a permission on the document).\n          type: boolean\n        aclWrite:\n          default: false\n          description: |\n            `True` if the related user can modify the score.\n          type: boolean\n        group:\n          description: The unique identifier of a Flat group\n          type: string\n        user:\n          description: The unique identifier of a Flat user\n          type: string\n        userEmail:\n          description: |\n            Fill this field to invite an individual user by email.\n          type: string\n        userToken:\n          description: |\n            Token received in an invitation to join the score.\n          type: string\n      type: object\n    ResourceRights:\n      description: The rights of the current user on a score or collection\n      example:\n        aclAdmin: true\n        aclRead: true\n        aclWrite: true\n        isCollaborator: true\n      properties:\n        aclAdmin:\n          default: false\n          description: \u003e\n            `True` if the current user can manage the current document (i.e.\n            share, delete)\n\n\n            If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.\n          type: boolean\n        aclRead:\n          default: false\n          description: |\n            `True` if the current user can read the current document\n          type: boolean\n        aclWrite:\n          default: false\n          description: \u003e\n            `True` if the current user can modify the current document.\n\n\n            If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.\n          type: boolean\n        isCollaborator:\n          default: false\n          description: \u003e\n            `True` if the current user is a collaborator of the current document\n            (direct or via group).\n          type: boolean\n      type: object\n    ScoreComment:\n      description: Comment added on a sheet music\n      example:\n        comment: \"@[000000000000000000000000:flat] Great work!\"\n        context:\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          startDpq: 1\n          startTimePos: 2\n          stopDpq: 1\n          stopTimePos: 3\n        date: 2017-01-26T20:29:10.622Z\n        id: \"000000000000000000000010\"\n        mentions:\n          - \"000000000000000000000000\"\n        modificationDate: 2017-01-26T21:29:10.622Z\n        rawComment: \"@flat: Great work!\"\n        replyTo: \"000000000000000000000000\"\n        resolved: true\n        resolvedBy: \"000000000000000000000000\"\n        revision: \"000000000000000000000011\"\n        score: \"000000000000000000000042\"\n        spam: false\n        type: inline\n        user: \"000000000000000000000001\"\n      properties:\n        comment:\n          description: |\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n          type: string\n        context:\n          $ref: \"#/components/schemas/ScoreCommentContext\"\n        date:\n          description: The date when the comment was posted\n          format: date-time\n          type: string\n        id:\n          description: The comment unique identifier\n          type: string\n        mentions:\n          description: The list of user identifier mentioned on the score\n          items:\n            type: string\n          type: array\n        modificationDate:\n          description: The date of the last comment modification\n          format: date-time\n          type: string\n        rawComment:\n          description: |\n            A raw version of the comment, that can be displayed without parsing\n            the mentions.\n          type: string\n        replyTo:\n          description: \u003e\n            When the comment is a reply to another comment, the unique\n            identifier of the parent comment\n          type: string\n        resolved:\n          description: \u003e\n            For inline comments, the comment can be marked as resolved and will\n            be hidden in the future responses\n          type: boolean\n        resolvedBy:\n          description: \u003e\n            If the user is marked as resolved, this will contain the unique\n            identifier of the User who marked this comment as resolved\n          type: string\n        revision:\n          description: The unique identifier of revision the comment was posted\n          type: string\n        score:\n          description: The unique identifier of the score where the comment was posted\n          type: string\n        spam:\n          description: \u003e\n            `true  if the message has been detected as spam and hidden from\n            other users\n          type: boolean\n        type:\n          description: The type of the comment\n          enum:\n            - document\n            - inline\n          type: string\n        user:\n          description: The author unique identifier\n          type: string\n      type: object\n    ScoreCommentContext:\n      description: \u003e\n        The context of the comment (for inline/contextualized comments). A\n        context will include all the information related to the location of the\n        comment (i.e. score parts, range of measure, time position).\n      example:\n        measureUuids:\n          - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n          - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n          - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n        partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n        staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n        startDpq: 1\n        startTimePos: 2\n        stopDpq: 1\n        stopTimePos: 3\n      properties:\n        measureUuids:\n          description: The list of measure UUIds\n          items:\n            type: string\n          type: array\n        partUuid:\n          description: The unique identifier (UUID) of the score part\n          type: string\n        staffIdx:\n          description: (Deprecated, use `staffUuid`) The identififer of the staff\n          type: number\n        staffUuid:\n          description: The unique identififer (UUID) of the staff\n          type: string\n        startDpq:\n          type: number\n        startTimePos:\n          type: number\n        stopDpq:\n          type: number\n        stopTimePos:\n          type: number\n      required:\n        - partUuid\n        - measureUuids\n        - startTimePos\n        - stopTimePos\n        - startDpq\n        - stopDpq\n      type: object\n    ScoreCommentCreation:\n      description: Creation of a comment\n      example:\n        comment: \"@[000000000000000000000000:flat] Great work!\"\n        context:\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          startDpq: 1\n          startTimePos: 2\n          stopDpq: 1\n          stopTimePos: 3\n        mentions:\n          - \"000000000000000000000000\"\n        rawComment: \"@flat: Great work!\"\n        replyTo: \"000000000000000000000000\"\n        revision: \"000000000000000000000010\"\n      properties:\n        comment:\n          description: \u003e\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n          type: string\n        context:\n          $ref: \"#/components/schemas/ScoreCommentContext\"\n        mentions:\n          description: The list of user identifiers mentioned in this comment\n          items:\n            type: string\n          type: array\n        rawComment:\n          description: \u003e\n            A raw version of the comment, that can be displayed without the\n            mentions. If you use mentions, this property must be set.\n          type: string\n        replyTo:\n          description: \u003e\n            When the comment is a reply to another comment, the unique\n            identifier of the parent comment\n          type: string\n        revision:\n          description: \u003e\n            The unique indentifier of the revision of the score where the\n            comment was added. If this property is unspecified or contains\n            \"last\", the API will automatically take the last revision created.\n          type: string\n      required:\n        - comment\n      type: object\n    ScoreCommentUpdate:\n      description: Update of a comment\n      example:\n        comment: \"@[000000000000000000000000:flat] Great work!\"\n        context:\n          measureUuids:\n            - e6a6a60b-8710-f819-9a49-e907b19c6f1f\n            - da83d93c-e3a6-3c73-1bbe-15e5131d6437\n            - 056ec5eb-9213-df56-6ae8-d9b99673dc48\n          partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b\n          staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0\n          startDpq: 1\n          startTimePos: 2\n          stopDpq: 1\n          stopTimePos: 3\n        mentions:\n          - \"000000000000000000000000\"\n        rawComment: \"@flat: Great work!\"\n        replyTo: \"000000000000000000000000\"\n        revision: \"000000000000000000000011\"\n      properties:\n        comment:\n          description: \u003e\n            The comment text that can includes mentions using the following\n            format: `@[id:username]`.\n          maxLength: 10000\n          minLength: 1\n          type: string\n        context:\n          $ref: \"#/components/schemas/ScoreCommentContext\"\n        rawComment:\n          description: \u003e\n            A raw version of the comment, that can be displayed without the\n            mentions. If you use mentions, this property must be set.\n          maxLength: 10000\n          minLength: 1\n          type: string\n        revision:\n          description: \u003e\n            The unique indentifier of the revision of the score where the\n            comment was added. If this property is unspecified or contains\n            \"last\", the API will automatically take the last revision created.\n          type: string\n      type: object\n    ScoreCommentsCounts:\n      description: |\n        A computed version of the total, unique, weekly and monthly number of\n        comments added on the documents (this doesn't include inline comments).\n      example:\n        monthly: 30\n        total: 42\n        unique: 35\n        weekly: 10\n      properties:\n        monthly:\n          description: The monthly unique number of comments added on the score\n          type: number\n        total:\n          description: The total number of comments added on the score\n          type: number\n        unique:\n          description: The unique (1/user) number of comments added on the score\n          type: number\n        weekly:\n          description: The weekly unique number of comments added on the score\n          type: number\n      type: object\n    ScoreCreation:\n      description: A new created score\n      example:\n        data: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        googleDriveFolder: 0B-0000000000000000\n        privacy: private\n        title: My new score\n      properties:\n        collection:\n          description: \u003e\n            Unique identifier of a collection where the score will be created.\n\n            If no collection identifier is provided, the score will be stored in the `root` directory.\n          type: string\n        data:\n          description: \u003e\n            The data of the score file. It must be a MusicXML 3 file\n            (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI\n            file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\n\n            Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.\n          example: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n          type: string\n        dataEncoding:\n          description: The optional encoding of the score data. This property must match\n            the encoding used for the `data` property.\n          enum:\n            - base64\n          type: string\n        filename:\n          description: If this is an imported file, its filename\n          type: string\n        googleDriveFolder:\n          description: \u003e\n            If the user uses Google Drive and this properties is specified, the\n            file will be created in this directory. The currently user creating\n            the file must be granted to write in this directory.\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/ScorePrivacy\"\n        source:\n          $ref: \"#/components/schemas/ScoreSource\"\n        title:\n          description: \u003e\n            The title of the new score. If the title is too long, the API may\n            trim this one.\n\n\n            If this title is not specified, the API will try to (in this order):\n              - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).\n              - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property\n              - Set a default title (e.g. \"New Music Score\")\n          type: string\n      required:\n        - privacy\n      type: object\n    ScoreCreationType:\n      description: The type of creation (an orginal, an arrangement)\n      enum:\n        - original\n        - arrangement\n        - other\n      type: string\n    ScoreDetails:\n      allOf:\n        - $ref: \"#/components/schemas/ScoreSummary\"\n        - properties:\n            collaborators:\n              description: The list of the collaborators of the score\n              items:\n                $ref: \"#/components/schemas/ResourceCollaborator\"\n              type: array\n            collections:\n              description: The List of parent collections, which includes all the\n                collections this score is included. Please note that you might\n                not have access to all of them.\n              items:\n                type: string\n              type: array\n            comments:\n              $ref: \"#/components/schemas/ScoreCommentsCounts\"\n            composer:\n              description: Composer of the score\n              type: string\n            creationDate:\n              description: The date when the score was created\n              format: date-time\n              type: string\n            creationType:\n              $ref: \"#/components/schemas/ScoreCreationType\"\n            description:\n              description: Description of the creation\n              type: string\n            durationTime:\n              description: In seconds, an approximative duration of the score\n              type: integer\n            googleDriveFileId:\n              description: \u003e\n                If the user uses Google Drive and the score exists on Google\n                Drive, this field will contain the unique identifier of the Flat\n                score on Google Drive. You can access the document using the\n                url: `https://drive.google.com/open?id={googleDriveFileId}`\n              type: string\n            instruments:\n              description: \u003e\n                An array of the instrument identifiers used in the last version\n                of the score. This is mainly used to display a list of the\n                instruments in the Flat's UI or instruments icons. The format of\n                the strings is `{instrument-group}.{instrument-id}`.\n              items:\n                type: string\n              type: array\n            license:\n              $ref: \"#/components/schemas/ScoreLicense\"\n            licenseText:\n              description: Additional license text written on the exported/printed score\n              type: string\n            likes:\n              $ref: \"#/components/schemas/ScoreLikesCounts\"\n            lyricist:\n              description: Lyricist of the score\n              type: string\n            mainTempoQpm:\n              description: The main tempo of the score (in QPM)\n              type: integer\n            modificationDate:\n              description: The date of the last revision of the score\n              format: date-time\n              type: string\n            numberMeasures:\n              description: The number of measures in the score\n              type: integer\n            organization:\n              description: \u003e\n                If the score has been created in an organization, the identifier\n                of this organization. This property is especially used with the\n                score privacy `organizationPublic`.\n              type: string\n            parentScore:\n              description: \u003e\n                If the score has been forked, the unique identifier of the\n                parent score.\n              type: string\n            publicationDate:\n              description: The date when the score was published on Flat\n              format: date-time\n              type: string\n            rights:\n              $ref: \"#/components/schemas/ResourceRights\"\n            subtitle:\n              description: Subtitle of the score\n              type: string\n            tags:\n              description: Tags describing the score\n              items:\n                pattern: ^[a-zA-Z0-9]{1,30}$\n                type: string\n              type: array\n            views:\n              $ref: \"#/components/schemas/ScoreViewsCounts\"\n          type: object\n      description: The score and all its details\n      example:\n        collaborators:\n          - aclAdmin: true\n            aclRead: true\n            aclWrite: true\n            user:\n              id: \"000000000000000000000001\"\n              name: Flat Team\n              picture: https://flat.io/img/logo_flat.svg\n              printableName: Flat Team\n              username: flat\n          - aclAdmin: false\n            aclRead: true\n            aclWrite: false\n            group:\n              creationDate: 2015-01-19T00:22:02.387Z\n              id: \"0000000000000000000000043\"\n              name: 5th grade\n              organization: \"0000000000000000000000042\"\n              readOnly: true\n              type: classTeachers\n              userCount: 24\n        comments:\n          monthly: 0\n          total: 0\n          unique: 0\n          weekly: 0\n        composer: Mr Awesome\n        creationDate: 2017-01-15T20:03:25.771Z\n        creationType: original\n        durationTime: 70\n        googleDriveFileId: 0BCDEFAGA00000000000000\n        htmlUrl: https://flat.io/score/000000000000000000000000\n        id: \"000000000000000000000000\"\n        instruments:\n          - keyboards.grand-piano\n          - woodwinds.oboe\n          - woodwinds.clarinet\n        license: copyright\n        licenseText: Copyright 2017 Mr Awesome\n        likes:\n          monthly: 0\n          total: 0\n          weekly: 0\n        lyricist: Lyricist\n        modificationDate: 2017-01-26T20:29:10.622Z\n        numberMeasures: 35\n        organization: \"000000000000000000000030\"\n        parentScore: \"000000000000000000000040\"\n        privacy: private\n        publicationDate: 2017-09-10T12:00:00.123Z\n        rights:\n          aclAdmin: true\n          aclRead: true\n          aclWrite: true\n        subtitle: Subtitle of the score\n        title: My score\n        user:\n          id: \"000000000000000000000001\"\n          name: Flat Team\n          picture: https://flat.io/img/logo_flat.svg\n          printableName: Flat Team\n          username: flat\n        views:\n          monthly: 0\n          total: 0\n          weekly: 0\n      type: object\n    ScoreFork:\n      description: Options to fork the score\n      properties:\n        collection:\n          description: \u003e\n            Unique identifier of a collection where the score will be copied.\n\n            If no collection identifier is provided, the score will be stored in the `root` directory.\n          type: string\n      type: object\n    ScoreLicense:\n      description: \u003e\n        License of the creation. Read more about the Creative Commons licenses\n        on https://creativecommons.org/licenses/\n      enum:\n        - copyright\n        - cc0\n        - cc-by\n        - cc-by-sa\n        - cc-by-nd\n        - cc-by-nc\n        - cc-by-nc-sa\n        - cc-by-nc-nd\n      type: string\n    ScoreLikesCounts:\n      description: |\n        A computed version of the weekly, monthly and total of number of likes\n        for a score\n      example:\n        monthly: 30\n        total: 42\n        weekly: 10\n      properties:\n        monthly:\n          description: The number of new likes during the last month\n          type: number\n        total:\n          description: The total number of likes of the score\n          type: number\n        weekly:\n          description: The number of new likes during the last week\n          type: number\n      type: object\n    ScoreModification:\n      description: Edit the score metadata\n      example:\n        privacy: private\n      properties:\n        composer:\n          description: The composer of the score\n          type: string\n        creationType:\n          $ref: \"#/components/schemas/ScoreCreationType\"\n        description:\n          description: Description of the creation\n          maxLength: 2000\n          type: string\n        license:\n          $ref: \"#/components/schemas/ScoreLicense\"\n        licenseText:\n          description: The rights info written on the score\n          type: string\n        lyricist:\n          description: The lyricist of the score\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/ScorePrivacy\"\n        sharingKey:\n          description: When using the `privacy` mode `privateLink`, this property can be\n            used to set a custom sharing key, otherwise a new key will be\n            generated.\n          pattern: ^[a-f0-9]{128}$\n          type: string\n        subtitle:\n          description: The subtitle of the score\n          type: string\n        tags:\n          description: Tags describing the score\n          items:\n            type: string\n          type: array\n        title:\n          description: The title of the score\n          type: string\n      type: object\n    ScorePrivacy:\n      description: \u003e\n        The score main privacy mode.\n\n\n        - `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.\n\n        - `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.\n\n        - `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.\n\n        - `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.\n\n\n        The score can also be individually shared to a set of users or groups using the different collaborators API methods.\n\n\n        When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.\n\n\n        When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).\n      enum:\n        - public\n        - private\n        - organizationPublic\n        - privateLink\n      type: string\n    ScoreRevision:\n      description: A score revision metadata\n      example:\n        autosave: true\n        collaborators:\n          - \"000000000000000000000010\"\n          - \"000000000000000000000020\"\n        creationDate: 2017-01-26T20:29:10.622Z\n        description: New revision\n        user: \"000000000000000000000020\"\n      properties:\n        autosave:\n          description: |\n            True if this revision was automatically generated by Flat and not on\n            purpose by the user.\n          type: boolean\n        collaborators:\n          items:\n            description: |\n              The list of user identifier or collaborators who worked on this\n              revision. This is list is built from the history of the revision\n              specified during the creation of the revision.\n            type: string\n          type: array\n        creationDate:\n          description: The date when this revision was created\n          format: date-time\n          type: string\n        description:\n          description: A description associated to the revision\n          type: string\n        event:\n          description: The last event (action id) of the revision\n          type: string\n        id:\n          description: The unique identifier of the revision.\n          type: string\n        statistics:\n          $ref: \"#/components/schemas/ScoreRevisionStatistics\"\n        user:\n          description: The user identifier who created the revision\n          type: string\n      type: object\n    ScoreRevisionCreation:\n      description: A new created revision\n      example:\n        autosave: true\n        data: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n        description: New revision\n        history:\n          - args:\n              measureUuid: 0be9f739-3213-f312-bb0a-00ad0c787ef7\n              previousUuid: 888cb742-2110-a050-ba71-28300ba6d61f\n            fnc: action.AddMeasure\n            id: 90\n            userId: \"000000000000000000000010\"\n      properties:\n        autosave:\n          description: |\n            Must be set to `true` if the revision was created automatically.\n          type: boolean\n        data:\n          description: \u003e\n            The data of the score file. It must be a MusicXML 3 file\n            (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI\n            file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\n\n            Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.\n          example: \u003cscore-partwise version=\"3.0\"\u003e\u003c/score-partwise\u003e\n          type: string\n        dataEncoding:\n          description: The optional encoding of the score data. This property must match\n            the encoding used for the `data` property.\n          enum:\n            - base64\n          type: string\n        description:\n          description: A description associated to the revision\n          type: string\n      required:\n        - data\n      type: object\n    ScoreRevisionStatistics:\n      description: |\n        The statistics related to the score revision (additions and deletions)\n      example:\n        additions: 24\n        deletions: 5\n      properties:\n        additions:\n          description: The number of additions operations in the last revision\n          type: number\n        deletions:\n          description: The number of deletions operations in the last revision\n          type: number\n      type: object\n    ScoreSource:\n      example:\n        googleDrive: 0B-0000000000000001\n      properties:\n        googleDrive:\n          description: \u003e\n            If the score is a file on Google Drive, this field property must\n            contain its identifier. To use this method, the Drive file must be\n            public or the Flat Drive App must have access to the file.\n          type: string\n      type: object\n    ScoreSummary:\n      description: A summary of the score details\n      example:\n        htmlUrl: https://flat.io/score/000000000000000000000000\n        id: \"000000000000000000000000\"\n        privacy: private\n        title: My score\n        user:\n          id: \"000000000000000000000001\"\n          name: Flat Team\n          picture: https://flat.io/img/logo_flat.svg\n          printableName: Flat Team\n          username: flat\n      properties:\n        htmlUrl:\n          description: The url where the score can be viewed in a web browser\n          format: url\n          type: string\n        id:\n          description: The unique identifier of the score\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/ScorePrivacy\"\n        sharingKey:\n          description: The private sharing key of the score (available when the `privacy`\n            mode is set to `privateLink`)\n          type: string\n        title:\n          description: The title of the score\n          type: string\n        user:\n          $ref: \"#/components/schemas/UserPublicSummary\"\n      type: object\n    ScoreTrack:\n      description: An audio track for a score\n      example:\n        creationDate: 2017-10-22T14:58:22.753Z\n        creator: 5815d4b53269d90d2c80b71c\n        default: true\n        id: 59ecb20e563736b1e1f75dce\n        mediaId: dQw4w9WgXcQ\n        modificationDate: 2017-10-22T14:58:33.424Z\n        score: 59a29d96f35a6411d7508bdd\n        state: completed\n        synchronizationPoints:\n          - measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n            time: 0\n            type: measure\n          - time: 213\n            type: end\n        title: Rick Astley - Never Gonna Give You Up\n        type: youtube\n        url: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n      properties:\n        creationDate:\n          description: The creation date of the track\n          format: date-time\n          type: string\n        creator:\n          description: The unique identifier of the track creator\n          type: string\n        default:\n          description: True if the track should be used as default audio source\n          type: boolean\n        id:\n          description: The unique identifier of the score track\n          type: string\n        mediaId:\n          description: \u003e\n            The unique identifier of the track when hosted on an external\n            service.\n\n            For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ`\n          type: string\n        modificationDate:\n          description: The modification date of the track\n          format: date-time\n          type: string\n        score:\n          description: The unique identifier of the score\n          type: string\n        state:\n          $ref: \"#/components/schemas/ScoreTrackState\"\n        synchronizationPoints:\n          items:\n            $ref: \"#/components/schemas/ScoreTrackPoint\"\n          type: array\n        title:\n          description: Title of the track\n          type: string\n        type:\n          $ref: \"#/components/schemas/ScoreTrackType\"\n        url:\n          description: The URL of the track\n          type: string\n      type: object\n    ScoreTrackCreation:\n      description: \u003e\n        Creation of a new track. This one must contain the URL of the track or\n        the corresponding file\n      example:\n        default: true\n        state: draft\n        synchronizationPoints:\n          - measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n            time: 0\n            type: measure\n          - time: 213\n            type: end\n        title: Rick Astley - Never Gonna Give You Up\n        url: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n      properties:\n        default:\n          description: True if the track should be used as default audio source\n          type: boolean\n        state:\n          $ref: \"#/components/schemas/ScoreTrackState\"\n        synchronizationPoints:\n          items:\n            $ref: \"#/components/schemas/ScoreTrackPoint\"\n          type: array\n        title:\n          description: Title of the track\n          type: string\n        url:\n          description: The URL of the track\n          type: string\n      type: object\n    ScoreTrackPoint:\n      description: A track synchronization point\n      example:\n        measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n        time: 0\n        type: measure\n      properties:\n        measureUuid:\n          description: The measure unique identifier\n          format: uuid\n          type: string\n        time:\n          description: The corresponding time in seconds\n          type: number\n        type:\n          description: The type of the synchronization point. If the type is `measure`, the\n            measure uuid must be present in `measureUuid`\n          enum:\n            - measure\n            - end\n          type: string\n      required:\n        - type\n        - time\n      type: object\n    ScoreTrackState:\n      default: draft\n      description: State of the track\n      enum:\n        - draft\n        - completed\n        - deleted\n      type: string\n    ScoreTrackType:\n      description: The type of an audio track\n      enum:\n        - audio\n        - soundcloud\n        - youtube\n        - vimeo\n      type: string\n    ScoreTrackUpdate:\n      description: |\n        Update an existing track.\n      example:\n        default: true\n        state: draft\n        synchronizationPoints:\n          - measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c\n            time: 0\n            type: measure\n          - time: 213\n            type: end\n        title: Rick Astley - Never Gonna Give You Up\n        url: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n      properties:\n        default:\n          description: True if the track should be used as default audio source\n          type: boolean\n        state:\n          $ref: \"#/components/schemas/ScoreTrackState\"\n        synchronizationPoints:\n          items:\n            $ref: \"#/components/schemas/ScoreTrackPoint\"\n          type: array\n        title:\n          description: Title of the track\n          type: string\n      type: object\n    ScoreViewsCounts:\n      description: |\n        A computed version of the total, weekly, and monthly number of views of\n        the score\n      example:\n        monthly: 30\n        total: 42\n        weekly: 10\n      properties:\n        monthly:\n          description: The monthly number of views of the score\n          type: number\n        total:\n          description: The total number of views of the score\n          type: number\n        weekly:\n          description: The weekly number of views of the score\n          type: number\n      type: object\n    UserAdminUpdate:\n      description: User update as an organization admin\n      properties:\n        organizationRole:\n          $ref: \"#/components/schemas/OrganizationRoles\"\n        password:\n          description: Password of the new account\n          format: password\n          minLength: 6\n          type: string\n      type: object\n    UserBasics:\n      discriminator:\n        propertyName: userType\n      example:\n        id: \"000000000000000000000001\"\n        isFlatTeam: true\n        isPowerUser: true\n        name: Flat Team\n        picture: https://flat.io/img/logo_flat.svg\n        printableName: Flat Team\n        username: flat\n      properties:\n        id:\n          description: The user unique identifier\n          type: string\n        isFlatTeam:\n          description: Will be 'true' if user is part of the Flat Team\n          type: boolean\n        isPowerUser:\n          description: User license status. 'true' if user is an individual Power user\n          type: boolean\n        name:\n          description: A displayable name for the user\n          type: string\n        picture:\n          description: User pictue\n          type: string\n        printableName:\n          description: The name that can be directly printed (name or username)\n          type: string\n        username:\n          description: The user name (unique for the organization)\n          type: string\n      type: object\n    UserCreation:\n      description: User creation\n      properties:\n        email:\n          description: Email of the new account\n          format: email\n          type: string\n        locale:\n          $ref: \"#/components/schemas/FlatLocales\"\n        password:\n          description: Password of the new account\n          format: password\n          minLength: 6\n          type: string\n        username:\n          description: Username of the new account\n          pattern: ^[A-Za-z0-9\\-_.]+$\n          type: string\n      required:\n        - username\n        - password\n      type: object\n    UserDetails:\n      allOf:\n        - $ref: \"#/components/schemas/UserPublic\"\n        - properties:\n            id:\n              description: Identifier of the user\n              type: string\n            locale:\n              $ref: \"#/components/schemas/FlatLocales\"\n            privateProfile:\n              description: Tell either this user profile is private or not (individual\n                accounts only)\n              type: boolean\n            type:\n              description: The type of account\n              enum:\n                - user\n                - guest\n              type: string\n          type: object\n      description: User details\n      type: object\n    UserDetailsAdmin:\n      allOf:\n        - $ref: \"#/components/schemas/UserPublicSummary\"\n        - properties:\n            email:\n              description: Email of the user\n              format: email\n              type: string\n            lastActivityDate:\n              description: Date of the last user activity\n              format: date-time\n              type: string\n            license:\n              description: Current active license of the user\n              properties:\n                active:\n                  description: ID of the current license\n                  type: boolean\n                expirationDate:\n                  description: Date when the license expires\n                  format: date-time\n                  type: string\n                id:\n                  description: ID of the current license\n                  type: string\n                mode:\n                  $ref: \"#/components/schemas/LicenseMode\"\n                source:\n                  $ref: \"#/components/schemas/LicenseSources\"\n              type: object\n          type: object\n      description: User details (view for organization teacher / admin)\n    UserPublic:\n      allOf:\n        - $ref: \"#/components/schemas/UserPublicSummary\"\n        - properties:\n            bio:\n              description: User's biography\n              type: string\n            followersCount:\n              description: Number of followers the user have\n              type: integer\n            followingCount:\n              description: Number of people the user follow\n              type: integer\n            instruments:\n              description: \u003e\n                An array of the instrument identifiers that the user plays.\n\n                This is mainly used to display a list of the instruments in the Flat's UI or instruments icons.\n\n                The format of the strings is `{instrument-group}.{instrument-id}`.\n              items:\n                type: string\n              type: array\n            likedScoresCount:\n              description: Number of the scores liked by the user\n              type: integer\n            ownedPublicScoresCount:\n              description: Number of public scores the user have\n              type: integer\n            profileTheme:\n              description: Theme (background) for the profile\n              type: string\n            registrationDate:\n              description: Date the user signed up\n              format: date-time\n              type: string\n          type: object\n      description: Public User details\n      example:\n        bio: The Flat Team\n        classRole: teacher\n        followersCount: 4242\n        followingCount: 0\n        htmlUrl: https://flat.io/flat\n        id: \"000000000000000000000001\"\n        instruments:\n          - woodwinds.flute\n          - woodwinds.clarinet\n        isPowerUser: true\n        likedScoresCount: 1\n        name: Flat Team\n        organization: \"0000000000000000000000042\"\n        organizationRole: admin\n        ownedPublicScoresCount: 10\n        picture: https://flat.io/img/logo_flat.svg\n        printableName: Flat Team\n        profileTheme: blue-8\n        registrationDate: 2015-01-19T00:22:02.387Z\n        username: flat\n    UserPublicSummary:\n      allOf:\n        - $ref: \"#/components/schemas/UserBasics\"\n        - properties:\n            classRole:\n              $ref: \"#/components/schemas/ClassRoles\"\n            htmlUrl:\n              description: Link to user profile (for Indiv. users only)\n              type: string\n            organization:\n              description: Organization ID (for Edu users only)\n              type: string\n            organizationRole:\n              $ref: \"#/components/schemas/OrganizationRoles\"\n          type: object\n      description: Public User details summary\n      example:\n        classRole: teacher\n        htmlUrl: https://flat.io/flat\n        id: \"000000000000000000000001\"\n        isPowerUser: true\n        name: Flat Team\n        organization: \"0000000000000000000000042\"\n        organizationRole: admin\n        picture: https://flat.io/img/logo_flat.svg\n        printableName: Flat Team\n        username: flat\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/flat.io-2.8.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/flat.io-2.8.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/organizations/users/{user}\": put: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"oauth2 security"
	]
}