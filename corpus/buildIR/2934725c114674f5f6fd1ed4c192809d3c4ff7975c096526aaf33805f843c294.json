{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/projectnessie/nessie"
		},
		"file": {
			"name": "nessie-openapi-0.45.0.yaml",
			"size": 0,
			"path": "ui/src/openapi/nessie-openapi-0.45.0.yaml",
			"byteSize": 76269,
			"content": "---\n# A copy of OpenAPI definition of Nessie 0.45.0, a.k.a. API v1\nopenapi: 3.0.3\ninfo:\n  title: Nessie API\n  contact:\n    name: Project Nessie\n    url: https://projectnessie.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.45.0\npaths:\n  /config:\n    get:\n      summary: List all configuration settings\n      operationId: getConfig\n      responses:\n        default:\n          description: Configuration settings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NessieConfiguration'\n        \"401\":\n          description: Invalid credentials provided\n        \"400\":\n          description: Unknown Error\n  /contents:\n    post:\n      summary: Get multiple objects' content.\n      description: |-\n        Similar to 'getContent', but takes multiple 'ContentKey's and returns the content-values for the one or more content-keys in a named-reference (a branch or tag).\n\n        If the table-metadata is tracked globally (Iceberg), Nessie returns a 'Content' object, that contains the most up-to-date part for the globally tracked part (Iceberg: table-metadata) plus the per-Nessie-reference/hash specific part (Iceberg: snapshot-ID,schema-ID, partition-spec-ID, default-sort-order-ID).\n      operationId: getMultipleContents\n      parameters:\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: ref\n        in: query\n        description: Reference to use. Defaults to default branch if not provided.\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      requestBody:\n        description: Keys to retrieve.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetMultipleContentsRequest'\n            examples:\n              multiGetRequest:\n                $ref: '#/components/examples/multiGetRequest'\n      responses:\n        \"200\":\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetMultipleContentsResponse'\n              examples:\n                multiGetResponse:\n                  $ref: '#/components/examples/multiGetResponse'\n        \"400\":\n          description: \"Invalid input, ref name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or read object content\n            for a key\n        \"404\":\n          description: Provided ref doesn't exists\n  /contents/{key}:\n    get:\n      summary: Get object content associated with a key.\n      description: |-\n        This operation returns the content-value for a content-key in a named-reference (a branch or tag).\n\n        If the table-metadata is tracked globally (Iceberg), Nessie returns a 'Content' object, that contains the most up-to-date part for the globally tracked part (Iceberg: table-metadata) plus the per-Nessie-reference/hash specific part (Iceberg: snapshot-id, schema-id, partition-spec-id, default-sort-order-id).\n      operationId: getContent\n      parameters:\n      - name: key\n        in: path\n        description: object name to search for\n        required: true\n        schema:\n          type: string\n        examples:\n          ContentKeyGet:\n            $ref: '#/components/examples/ContentKeyGet'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: ref\n        in: query\n        description: Reference to use. Defaults to default branch if not provided.\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      responses:\n        \"200\":\n          description: Information for table\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Content'\n              examples:\n                iceberg:\n                  $ref: '#/components/examples/iceberg'\n        \"400\":\n          description: \"Invalid input, ref name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or read object content\n            for a key\n        \"404\":\n          description: Table not found on ref\n  /diffs/{fromRefWithHash}...{toRefWithHash}:\n    get:\n      summary: Get a diff for two given references\n      description: \"The URL pattern is basically 'from' and 'to' separated by '...'\\\n        \\ (three dots). 'from' and 'to' must start with a reference name, optionally\\\n        \\ followed by hash on that reference, the hash prefixed with the'*' character.\\n\\\n        \\nExamples: \\n  diffs/main...myBranch\\n  diffs/main...myBranch\\\\*1234567890123456\\n\\\n        \\  diffs/main\\\\*1234567890123456...myBranch\\n  diffs/main\\\\*1234567890123456...myBranch\\\\\\\n        *1234567890123456\\n\"\n      operationId: getDiff\n      parameters:\n      - name: fromRefWithHash\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: toRefWithHash\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returned diff for the given references.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiffResponse'\n              examples:\n                diffResponse:\n                  $ref: '#/components/examples/diffResponse'\n        \"400\":\n          description: \"Invalid input, fromRef/toRef name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given fromRef/toRef\n        \"404\":\n          description: fromRef/toRef not found\n  /namespaces/namespace/{ref}/{name}:\n    get:\n      summary: Retrieves a Namespace\n      operationId: getNamespace\n      parameters:\n      - name: name\n        in: path\n        description: the name of the namespace\n        required: true\n        schema:\n          $ref: '#/components/schemas/Namespace'\n        examples:\n          namespaceName:\n            $ref: '#/components/examples/namespaceName'\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      responses:\n        \"200\":\n          description: Returned Namespace.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n              examples:\n                namespace:\n                  $ref: '#/components/examples/namespace'\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to retrieve namespace\n        \"404\":\n          description: Reference or Namespace not found\n    put:\n      summary: Creates a Namespace\n      operationId: createNamespace\n      parameters:\n      - name: name\n        in: path\n        description: the name of the namespace\n        required: true\n        schema:\n          $ref: '#/components/schemas/Namespace'\n        examples:\n          namespaceName:\n            $ref: '#/components/examples/namespaceName'\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Namespace'\n      responses:\n        \"200\":\n          description: Returned Namespace.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n              examples:\n                namespace:\n                  $ref: '#/components/examples/namespace'\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to create namespace\n        \"404\":\n          description: Reference not found\n        \"409\":\n          description: Namespace already exists\n    post:\n      operationId: updateProperties\n      parameters:\n      - name: name\n        in: path\n        description: the name of the namespace\n        required: true\n        schema:\n          $ref: '#/components/schemas/Namespace'\n        examples:\n          namespaceName:\n            $ref: '#/components/examples/namespaceName'\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      requestBody:\n        description: Namespace properties to update/delete.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NamespaceUpdate'\n            examples:\n              namespaceUpdate:\n                $ref: '#/components/examples/namespaceUpdate'\n      responses:\n        \"200\":\n          description: Updates namespace properties for the given namespace.\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to update namespace properties\n        \"404\":\n          description: Reference or Namespace not found\n    delete:\n      summary: Deletes a Namespace\n      operationId: deleteNamespace\n      parameters:\n      - name: name\n        in: path\n        description: the name of the namespace\n        required: true\n        schema:\n          $ref: '#/components/schemas/Namespace'\n        examples:\n          namespaceName:\n            $ref: '#/components/examples/namespaceName'\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      responses:\n        \"200\":\n          description: Namespace successfully deleted.\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to delete namespace\n        \"404\":\n          description: Reference or Namespace not found\n        \"409\":\n          description: Namespace not empty\n  /namespaces/{ref}:\n    get:\n      operationId: getNamespaces\n      parameters:\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: name\n        in: query\n        description: the name of the namespace\n        schema:\n          $ref: '#/components/schemas/Namespace'\n        examples:\n          namespaceName:\n            $ref: '#/components/examples/namespaceName'\n          emptyNamespaceName:\n            $ref: '#/components/examples/emptyNamespaceName'\n      responses:\n        \"200\":\n          description: Returns Namespaces with a given prefix.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNamespacesResponse'\n              examples:\n                namespacesResponse:\n                  $ref: '#/components/examples/namespacesResponse'\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to retrieve namespaces\n        \"404\":\n          description: Reference not found\n  /reflogs:\n    get:\n      summary: Get reflog entries (DEPRECATED)\n      description: |+\n        The Nessie reflog in this form is deprecated, likely for removal.\n        Retrieve the reflog entries from a specified endHash or from the current HEAD if the endHash is null, potentially truncated by the backend.\n\n        Retrieves up to 'maxRecords' refLog-entries starting at the endHash or HEAD.The backend may respect the given 'max' records hint, but return less or more entries. Backends may also cap the returned entries at a hard-coded limit, the default REST server implementation has such a hard-coded limit.\n\n        To implement paging, check 'hasMore' in the response and, if 'true', pass the value returned as 'token' in the next invocation as the 'pageToken' parameter.\n\n        The content and meaning of the returned 'token' is \"private\" to the implementation,treat is as an opaque value.\n\n        It is wrong to assume that invoking this method with a very high 'maxRecords' value will return all reflog entries.\n\n      operationId: getRefLog\n      parameters:\n      - name: endHash\n        in: query\n        description: \"Hash of the reflog (inclusive) to end at (in chronological sense),\\\n          \\ the 'near' end of the reflog, returned 'early' in the result.\"\n        schema:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n      - name: filter\n        in: query\n        description: |-\n          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n\n          Usable variables within the expression are:\n\n          - 'reflog' with fields 'refLogId' (string), 'refName' (string), 'commitHash' (string), 'parentRefLogId' (string), ',operation' (string), 'operationTime' (long)\n\n          Hint: when filtering entries, you can determine whether entries are \"missing\" (filtered) by checking whether 'ReflogResponseEntry.parentRefLogId' is different from the hash of the previous reflog in the log response.\n        schema:\n          type: string\n      - name: maxRecords\n        in: query\n        description: \"maximum number of entries to return, just a hint for the server\"\n        schema:\n          format: int32\n          type: integer\n      - name: pageToken\n        in: query\n        description: \"paging continuation token, as returned in the previous value\\\n          \\ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\\\n          \\ or 'ReferencesResponse' or 'RefLogResponse'.\"\n        schema:\n          type: string\n      - name: startHash\n        in: query\n        description: \"Hash of the reflog (inclusive) to start from (in chronological\\\n          \\ sense), the 'far' end of the reflog, returned 'late' in the result.\"\n        schema:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n      responses:\n        \"200\":\n          description: Returned reflog entries.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefLogResponse'\n        \"401\":\n          description: Invalid credentials provided\n        \"400\":\n          description: Unknown Error\n        \"404\":\n          description: Reflog id doesn't exists\n  /trees:\n    get:\n      summary: Get all references\n      operationId: getAllReferences\n      parameters:\n      - name: fetch\n        in: query\n        description: |-\n          Specify how much information to be returned. Will fetch additional metadata for references if set to 'ALL'.\n\n          A returned Branch instance will have the following information:\n\n          - numCommitsAhead (number of commits ahead of the default branch)\n\n          - numCommitsBehind (number of commits behind the default branch)\n\n          - commitMetaOfHEAD (the commit metadata of the HEAD commit)\n\n          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).\n\n          - numTotalCommits (the total number of commits in this reference).\n\n          A returned Tag instance will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.\n\n          Note that computing \u0026 fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.\n        schema:\n          $ref: '#/components/schemas/FetchOption'\n      - name: filter\n        in: query\n        description: |-\n          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n          Usable variables within the expression are:\n\n          - ref (Reference) describes the reference, with fields name (String), hash (String), metadata (ReferenceMetadata)\n\n          - metadata (ReferenceMetadata) shortcut to ref.metadata, never null, but possibly empty\n\n          - commit (CommitMeta) - shortcut to ref.metadata.commitMetaOfHEAD, never null, but possibly empty\n\n          - refType (String) - the reference type, either BRANCH or TAG\n\n          Note that the expression can only test attributes metadata and commit, if 'fetchOption' is set to 'ALL'.\n        schema:\n          type: string\n        examples:\n          expr_by_refType:\n            $ref: '#/components/examples/expr_by_refType'\n          expr_by_ref_name:\n            $ref: '#/components/examples/expr_by_ref_name'\n          expr_by_ref_commit:\n            $ref: '#/components/examples/expr_by_ref_commit'\n      - name: maxRecords\n        in: query\n        description: \"maximum number of entries to return, just a hint for the server\"\n        schema:\n          format: int32\n          type: integer\n      - name: pageToken\n        in: query\n        description: \"paging continuation token, as returned in the previous value\\\n          \\ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\\\n          \\ or 'ReferencesResponse' or 'RefLogResponse'.\"\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returned references.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReferencesResponse'\n              examples:\n                referencesResponse:\n                  $ref: '#/components/examples/referencesResponse'\n                referencesResponseWithMetadata:\n                  $ref: '#/components/examples/referencesResponseWithMetadata'\n        \"401\":\n          description: Invalid credentials provided\n  /trees/branch/{branchName}/commit:\n    post:\n      summary: Commit multiple operations against the given branch expecting that\n        branch to have the given hash as its latest commit. The hash in the successful\n        response contains the hash of the commit that contains the operations of the\n        invocation.\n      operationId: commitMultipleOperations\n      parameters:\n      - name: branchName\n        in: path\n        description: \"Branch to change, defaults to default branch.\"\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: expectedHash\n        in: query\n        description: Expected hash of branch.\n        schema:\n          type: string\n        examples:\n          hash:\n            $ref: '#/components/examples/hash'\n      requestBody:\n        description: Operations\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Operations'\n            examples:\n              operations:\n                $ref: '#/components/examples/operations'\n      responses:\n        \"200\":\n          description: Updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n              examples:\n                refObj:\n                  $ref: '#/components/examples/refObj'\n        \"400\":\n          description: \"Invalid input, ref/hash name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or perform commits\n        \"404\":\n          description: Provided ref doesn't exists\n        \"409\":\n          description: Update conflict\n  /trees/branch/{branchName}/merge:\n    post:\n      summary: Merge commits from 'mergeRef' onto 'branchName'.\n      description: \"Merge items from an existing hash in 'mergeRef' into the requested\\\n        \\ branch. The merge is always a rebase + fast-forward merge and is only completed\\\n        \\ if the rebase is conflict free. The set of commits added to the branch will\\\n        \\ be all of those until we arrive at a common ancestor. Depending on the underlying\\\n        \\ implementation, the number of commits allowed as part of this operation\\\n        \\ may be limited.\"\n      operationId: mergeRefIntoBranch\n      parameters:\n      - name: branchName\n        in: path\n        description: Branch to merge into\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: expectedHash\n        in: query\n        description: Expected current HEAD of 'branchName'\n        schema:\n          type: string\n        examples:\n          hash:\n            $ref: '#/components/examples/hash'\n      requestBody:\n        description: \"Merge operation that defines the source reference name and an\\\n          \\ optional hash. If 'fromHash' is not present, the current 'sourceRef's\\\n          \\ HEAD will be used.\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Merge'\n            examples:\n              merge:\n                $ref: '#/components/examples/merge'\n      responses:\n        \"204\":\n          description: \"Merge operation completed. The actual merge might have failed\\\n            \\ and reported as successful=false, if the client asked to return a conflict\\\n            \\ as a result instead of returning an error.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MergeResponse'\n              examples:\n                mergeResponseSuccess:\n                  $ref: '#/components/examples/mergeResponseSuccess'\n                mergeResponseFail:\n                  $ref: '#/components/examples/mergeResponseFail'\n        \"400\":\n          description: \"Invalid input, ref/hash name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or merge commits\n        \"404\":\n          description: Ref doesn't exists\n        \"409\":\n          description: update conflict\n  /trees/branch/{branchName}/transplant:\n    post:\n      summary: Transplant commits from 'transplant' onto 'branchName'\n      description: This is done as an atomic operation such that only the last of\n        the sequence is ever visible to concurrent readers/writers. The sequence to\n        transplant must be contiguous and in order.\n      operationId: transplantCommitsIntoBranch\n      parameters:\n      - name: branchName\n        in: path\n        description: Branch to transplant into\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: expectedHash\n        in: query\n        description: Expected hash of tag.\n        schema:\n          type: string\n        examples:\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: message\n        in: query\n        description: commit message\n        schema:\n          type: string\n        examples:\n          commitMessage:\n            $ref: '#/components/examples/commitMessage'\n      requestBody:\n        description: Hashes to transplant\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Transplant'\n            examples:\n              transplant:\n                $ref: '#/components/examples/transplant'\n      responses:\n        \"204\":\n          description: \"Transplant operation completed. The actual transplant might\\\n            \\ have failed and reported as successful=false, if the client asked to\\\n            \\ return a conflict as a result instead of returning an error. Note: the\\\n            \\ 'commonAncestor' field in a response will always be null for a transplant.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MergeResponse'\n              examples:\n                mergeResponseSuccess:\n                  $ref: '#/components/examples/mergeResponseSuccess'\n                mergeResponseFail:\n                  $ref: '#/components/examples/mergeResponseFail'\n        \"400\":\n          description: \"Invalid input, ref/hash name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or transplant commits\n        \"404\":\n          description: Ref doesn't exists\n        \"409\":\n          description: update conflict\n  /trees/tree:\n    get:\n      summary: Get default branch for commits and reads\n      operationId: getDefaultBranch\n      responses:\n        \"200\":\n          description: Returns name and latest hash of the default branch.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Branch'\n              examples:\n                refObj:\n                  $ref: '#/components/examples/refObj'\n        \"401\":\n          description: Invalid credentials provided\n        \"404\":\n          description: Default branch not found.\n    post:\n      summary: Create a new reference\n      description: |-\n        The type of 'refObj', which can be either a 'Branch' or 'Tag', determines the type of the reference to be created.\n\n        'Reference.name' defines the the name of the reference to be created,'Reference.hash' is the hash of the created reference, the HEAD of the created reference. 'sourceRefName' is the name of the reference which contains 'Reference.hash', and must be present if 'Reference.hash' is present.\n\n        Specifying no 'Reference.hash' means that the new reference will be created \"at the beginning of time\".\n      operationId: createReference\n      parameters:\n      - name: sourceRefName\n        in: query\n        description: Source named reference\n        schema:\n          type: string\n      requestBody:\n        description: Reference to create.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Reference'\n            examples:\n              refObjNew:\n                $ref: '#/components/examples/refObjNew'\n      responses:\n        \"200\":\n          description: Created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reference'\n              examples:\n                refObjNew:\n                  $ref: '#/components/examples/refObjNew'\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to create reference\n        \"409\":\n          description: Reference already exists\n  /trees/tree/{ref}:\n    get:\n      summary: Fetch details of a reference\n      operationId: getReferenceByName\n      parameters:\n      - name: ref\n        in: path\n        description: name of ref to fetch\n        required: true\n        schema:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: fetch\n        in: query\n        description: |-\n          Specify how much information to be returned. Will fetch additional metadata for references if set to 'ALL'.\n\n          A returned Branch instance will have the following information:\n\n          - numCommitsAhead (number of commits ahead of the default branch)\n\n          - numCommitsBehind (number of commits behind the default branch)\n\n          - commitMetaOfHEAD (the commit metadata of the HEAD commit)\n\n          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).\n\n          - numTotalCommits (the total number of commits in this reference).\n\n          A returned Tag instance will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.\n\n          Note that computing \u0026 fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.\n        schema:\n          $ref: '#/components/schemas/FetchOption'\n      responses:\n        \"200\":\n          description: Found and returned reference.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reference'\n              examples:\n                refObj:\n                  $ref: '#/components/examples/refObj'\n        \"400\":\n          description: \"Invalid input, ref name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference\n        \"404\":\n          description: Ref not found\n  /trees/tree/{ref}/entries:\n    get:\n      summary: Fetch all entries for a given reference\n      description: \"Retrieves objects for a ref, potentially truncated by the backend.\\n\\\n        \\nRetrieves up to 'maxRecords' entries for the given named reference (tag\\\n        \\ or branch) or the given hash. The backend may respect the given 'max' records\\\n        \\ hint, but return less or more entries. Backends may also cap the returned\\\n        \\ entries at a hard-coded limit, the default REST server implementation has\\\n        \\ such a hard-coded limit.\\n\\nTo implement paging, check 'hasMore' in the\\\n        \\ response and, if 'true', pass the value returned as 'token' in the next\\\n        \\ invocation as the 'pageToken' parameter.\\n\\nThe content and meaning of the\\\n        \\ returned 'token' is \\\"private\\\" to the implementation,treat is as an opaque\\\n        \\ value.\\n\\nIt is wrong to assume that invoking this method with a very high\\\n        \\ 'maxRecords' value will return all commit log entries.\\n\\nThe 'filter' parameter\\\n        \\ allows for advanced filtering capabilities using the Common Expression Language\\\n        \\ (CEL).\\nAn intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\\n\\\n        \\nThe 'namespaceDepth' parameter returns only the ContentKey components up\\\n        \\ to the depth of 'namespaceDepth'.\\nFor example they key 'a.b.c.d' with a\\\n        \\ depth of 3 will return 'a.b.c'. The operation is guaranteed to not return\\\n        \\ \\nduplicates and therefore will never page.\"\n      operationId: getEntries\n      parameters:\n      - name: ref\n        in: path\n        description: name of ref to fetch from\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: filter\n        in: query\n        description: |-\n          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n          Usable variables within the expression are 'entry.namespace' (string) \u0026 'entry.contentType' (string)\n        schema:\n          type: string\n        examples:\n          expr_by_namespace:\n            $ref: '#/components/examples/expr_by_namespace'\n          expr_by_contentType:\n            $ref: '#/components/examples/expr_by_contentType'\n          expr_by_namespace_and_contentType:\n            $ref: '#/components/examples/expr_by_namespace_and_contentType'\n      - name: hashOnRef\n        in: query\n        description: a particular hash on the given ref\n        schema:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: maxRecords\n        in: query\n        description: \"maximum number of entries to return, just a hint for the server\"\n        schema:\n          format: int32\n          type: integer\n      - name: namespaceDepth\n        in: query\n        description: |-\n          If set \u003e 0 will filter the results to only return namespaces/tables to the depth of namespaceDepth. If not set or \u003c=0 has no effect\n          Setting this parameter \u003e 0 will turn off paging.\n        schema:\n          format: int32\n          type: integer\n      - name: pageToken\n        in: query\n        description: \"paging continuation token, as returned in the previous value\\\n          \\ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\\\n          \\ or 'ReferencesResponse' or 'RefLogResponse'.\"\n        schema:\n          type: string\n      responses:\n        default:\n          description: all objects for a reference\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntriesResponse'\n              examples:\n                entriesResponse:\n                  $ref: '#/components/examples/entriesResponse'\n        \"200\":\n          description: Returned successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntriesResponse'\n        \"400\":\n          description: \"Invalid input, ref name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or fetch entries for\n            it\n        \"404\":\n          description: Ref not found\n  /trees/tree/{ref}/log:\n    get:\n      summary: Get commit log for a reference\n      description: |\n        Retrieve the commit log for a ref, potentially truncated by the backend.\n\n        Retrieves up to 'maxRecords' commit-log-entries starting at the HEAD of the given named reference (tag or branch) or the given hash. The backend may respect the given 'max' records hint, but return less or more entries. Backends may also cap the returned entries at a hard-coded limit, the default REST server implementation has such a hard-coded limit.\n\n        To implement paging, check 'hasMore' in the response and, if 'true', pass the value returned as 'token' in the next invocation as the 'pageToken' parameter.\n\n        The content and meaning of the returned 'token' is \"private\" to the implementation,treat is as an opaque value.\n\n        It is wrong to assume that invoking this method with a very high 'maxRecords' value will return all commit log entries.\n\n        The 'filter' parameter allows for advanced filtering capabilities using the Common Expression Language (CEL).\n        An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n      operationId: getCommitLog\n      parameters:\n      - name: ref\n        in: path\n        description: ref to show log from\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: endHash\n        in: query\n        description: \"Hash on the given ref to end at (in chronological sense), the\\\n          \\ 'near' end of the commit log, returned 'early' in the result.\"\n        schema:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      - name: fetch\n        in: query\n        description: \"Specify how much information to be returned. Will fetch additional\\\n          \\ metadata such as parent commit hash and operations in a commit, for each\\\n          \\ commit if set to 'ALL'.\"\n        schema:\n          $ref: '#/components/schemas/FetchOption'\n      - name: filter\n        in: query\n        description: |-\n          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n\n          Usable variables within the expression are:\n\n          - 'commit' with fields 'author' (string), 'committer' (string), 'commitTime' (timestamp), 'hash' (string), ',message' (string), 'properties' (map)\n\n          - 'operations' (list), each operation has the fields 'type' (string, either 'PUT' or 'DELETE'), 'key' (string, namespace + table name), 'keyElements' (list of strings), 'namespace' (string), 'namespaceElements' (list of strings) and 'name' (string, the \"simple\" table name)\n\n          Note that the expression can only test against 'operations', if 'fetch' is set to 'ALL'.\n\n          Hint: when filtering commits, you can determine whether commits are \"missing\" (filtered) by checking whether 'LogEntry.parentCommitHash' is different from the hash of the previous commit in the log response.\n        schema:\n          type: string\n        examples:\n          expr_by_commit_author:\n            $ref: '#/components/examples/expr_by_commit_author'\n          expr_by_commit_committer:\n            $ref: '#/components/examples/expr_by_commit_committer'\n          expr_by_commitTime:\n            $ref: '#/components/examples/expr_by_commitTime'\n          expr_by_commit_operations_table_name:\n            $ref: '#/components/examples/expr_by_commit_operations_table_name'\n          expr_by_commit_operations_type:\n            $ref: '#/components/examples/expr_by_commit_operations_type'\n      - name: maxRecords\n        in: query\n        description: \"maximum number of entries to return, just a hint for the server\"\n        schema:\n          format: int32\n          type: integer\n      - name: pageToken\n        in: query\n        description: \"paging continuation token, as returned in the previous value\\\n          \\ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\\\n          \\ or 'ReferencesResponse' or 'RefLogResponse'.\"\n        schema:\n          type: string\n      - name: startHash\n        in: query\n        description: \"Hash on the given ref to start from (in chronological sense),\\\n          \\ the 'far' end of the commit log, returned 'late' in the result.\"\n        schema:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        examples:\n          nullHash:\n            $ref: '#/components/examples/nullHash'\n          hash:\n            $ref: '#/components/examples/hash'\n      responses:\n        \"200\":\n          description: Returned commits.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogResponse'\n              examples:\n                logResponseAdditionalInfo:\n                  $ref: '#/components/examples/logResponseAdditionalInfo'\n                logResponseSimple:\n                  $ref: '#/components/examples/logResponseSimple'\n        \"400\":\n          description: \"Invalid input, ref name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view the given reference or get commit log for\n            it\n        \"404\":\n          description: Ref doesn't exists\n  /trees/{referenceType}/{referenceName}:\n    put:\n      summary: Set a named reference to a specific hash via a named-reference.\n      description: This operation takes the name of the named reference to reassign\n        and the hash and the name of a named-reference via which the caller has access\n        to that hash.\n      operationId: assignReference\n      parameters:\n      - name: referenceName\n        in: path\n        description: Reference name to reassign\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: referenceType\n        in: path\n        description: Reference type to reassign\n        required: true\n        schema:\n          $ref: '#/components/schemas/ReferenceType'\n        examples:\n          referenceType:\n            $ref: '#/components/examples/referenceType'\n      - name: expectedHash\n        in: query\n        description: Expected previous hash of reference\n        schema:\n          type: string\n        examples:\n          hash:\n            $ref: '#/components/examples/hash'\n      requestBody:\n        description: \"Reference hash to which 'referenceName' shall be assigned to.\\\n          \\ This must be either a 'Transaction', 'Branch' or 'Tag' via which the hash\\\n          \\ is visible to the caller.\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Reference'\n            examples:\n              refObj:\n                $ref: '#/components/examples/refObj'\n              tagObj:\n                $ref: '#/components/examples/tagObj'\n      responses:\n        \"204\":\n          description: Assigned successfully\n        \"400\":\n          description: \"Invalid input, ref/hash name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view or assign reference\n        \"404\":\n          description: One or more references don't exist\n        \"409\":\n          description: Update conflict\n    delete:\n      summary: Delete a reference endpoint\n      operationId: deleteReference\n      parameters:\n      - name: referenceName\n        in: path\n        description: Reference name to delete\n        required: true\n        schema:\n          type: string\n        examples:\n          ref:\n            $ref: '#/components/examples/ref'\n      - name: referenceType\n        in: path\n        description: Reference type to delete\n        required: true\n        schema:\n          $ref: '#/components/schemas/ReferenceType'\n        examples:\n          referenceType:\n            $ref: '#/components/examples/referenceType'\n      - name: expectedHash\n        in: query\n        description: Expected hash of tag\n        schema:\n          type: string\n        examples:\n          hash:\n            $ref: '#/components/examples/hash'\n      responses:\n        \"204\":\n          description: Deleted successfully.\n        \"400\":\n          description: \"Invalid input, ref/hash name not valid\"\n        \"401\":\n          description: Invalid credentials provided\n        \"403\":\n          description: Not allowed to view or delete reference\n        \"404\":\n          description: Ref doesn't exists\n        \"409\":\n          description: update conflict\ncomponents:\n  schemas:\n    Branch:\n      title: Branch\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        metadata:\n          $ref: '#/components/schemas/ReferenceMetadata'\n        hash:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n    CommitMeta:\n      title: CommitMeta\n      required:\n      - message\n      - properties\n      type: object\n      properties:\n        hash:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        committer:\n          type: string\n        author:\n          type: string\n        signedOffBy:\n          type: string\n        message:\n          pattern: \\S\n          type: string\n        commitTime:\n          format: date-time\n          type: string\n          example: 2022-03-10T16:15:50Z\n        authorTime:\n          format: date-time\n          type: string\n          example: 2022-03-10T16:15:50Z\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n    Content:\n      title: Content\n      type: object\n      properties:\n        id:\n          type: string\n      oneOf:\n      - $ref: '#/components/schemas/IcebergTable'\n      - $ref: '#/components/schemas/DeltaLakeTable'\n      - $ref: '#/components/schemas/IcebergView'\n      - $ref: '#/components/schemas/Namespace'\n      discriminator:\n        propertyName: type\n        mapping:\n          ICEBERG_TABLE: '#/components/schemas/IcebergTable'\n          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'\n          ICEBERG_VIEW: '#/components/schemas/IcebergView'\n          NAMESPACE: '#/components/schemas/Namespace'\n    ContentKey:\n      required:\n      - elements\n      type: object\n      properties:\n        elements:\n          minItems: 1\n          type: array\n          items:\n            type: string\n    ContentKeyConflict:\n      enum:\n      - NONE\n      - UNRESOLVABLE\n      type: string\n    ContentKeyDetails:\n      title: Merge Per-Content-Key details\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n        mergeBehavior:\n          $ref: '#/components/schemas/MergeBehavior'\n        conflictType:\n          $ref: '#/components/schemas/ContentKeyConflict'\n        sourceCommits:\n          type: array\n          items:\n            type: string\n        targetCommits:\n          type: array\n          items:\n            type: string\n    ContentWithKey:\n      required:\n      - key\n      - content\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n        content:\n          $ref: '#/components/schemas/Content'\n    Delete:\n      required:\n      - key\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n    DeltaLakeTable:\n      required:\n      - metadataLocationHistory\n      - checkpointLocationHistory\n      type: object\n      properties:\n        id:\n          type: string\n        metadataLocationHistory:\n          type: array\n          items:\n            type: string\n        checkpointLocationHistory:\n          type: array\n          items:\n            type: string\n        lastCheckpoint:\n          type: string\n    Detached:\n      title: Detached commit hash\n      required:\n      - hash\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ReferenceMetadata'\n        hash:\n          minLength: 1\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n    DiffEntry:\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n        from:\n          $ref: '#/components/schemas/Content'\n        to:\n          $ref: '#/components/schemas/Content'\n    DiffResponse:\n      title: DiffResponse\n      type: object\n      properties:\n        diffs:\n          type: array\n          items:\n            $ref: '#/components/schemas/DiffEntry'\n    EntriesResponse:\n      required:\n      - entries\n      type: object\n      properties:\n        hasMore:\n          type: boolean\n        token:\n          minLength: 1\n          type: string\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/Entry'\n    Entry:\n      required:\n      - type\n      - name\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/Type'\n        name:\n          $ref: '#/components/schemas/ContentKey'\n    FetchOption:\n      enum:\n      - MINIMAL\n      - ALL\n      type: string\n    GenericMetadata:\n      required:\n      - variant\n      type: object\n      properties:\n        variant:\n          minLength: 1\n          type: string\n        metadata:\n          type: object\n    GetMultipleContentsRequest:\n      title: GetMultipleContentsRequest\n      required:\n      - requestedKeys\n      type: object\n      properties:\n        requestedKeys:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/ContentKey'\n    GetMultipleContentsResponse:\n      title: GetMultipleContentsResponse\n      required:\n      - contents\n      type: object\n      properties:\n        contents:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContentWithKey'\n    GetNamespacesResponse:\n      required:\n      - namespaces\n      type: object\n      properties:\n        namespaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/Namespace'\n    IcebergTable:\n      title: Iceberg table state\n      description: |-\n        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.\n\n        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.\n      required:\n      - metadataLocation\n      type: object\n      properties:\n        id:\n          type: string\n        metadataLocation:\n          pattern: \\S\n          type: string\n        snapshotId:\n          format: int64\n          type: integer\n        schemaId:\n          format: int32\n          type: integer\n        specId:\n          format: int32\n          type: integer\n        sortOrderId:\n          format: int32\n          type: integer\n        metadata:\n          allOf:\n          - $ref: '#/components/schemas/GenericMetadata'\n          - deprecated: true\n    IcebergView:\n      required:\n      - metadataLocation\n      - sqlText\n      type: object\n      properties:\n        id:\n          type: string\n        metadataLocation:\n          pattern: \\S\n          type: string\n        versionId:\n          format: int32\n          type: integer\n        schemaId:\n          format: int32\n          type: integer\n        sqlText:\n          pattern: \\S\n          type: string\n        dialect:\n          type: string\n        metadata:\n          allOf:\n          - $ref: '#/components/schemas/GenericMetadata'\n          - deprecated: true\n    LogEntry:\n      title: LogEntry\n      required:\n      - commitMeta\n      type: object\n      properties:\n        commitMeta:\n          $ref: '#/components/schemas/CommitMeta'\n        additionalParents:\n          type: array\n          items:\n            type: string\n        parentCommitHash:\n          type: string\n        operations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Operation'\n    LogResponse:\n      title: LogResponse\n      required:\n      - logEntries\n      type: object\n      properties:\n        hasMore:\n          type: boolean\n        token:\n          minLength: 1\n          type: string\n        logEntries:\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEntry'\n    Merge:\n      title: Merge Operation\n      required:\n      - fromRefName\n      - fromHash\n      type: object\n      properties:\n        fromRefName:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        fromHash:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        keyMergeModes:\n          type: array\n          items:\n            $ref: '#/components/schemas/MergeKeyBehavior'\n        defaultKeyMergeMode:\n          $ref: '#/components/schemas/MergeBehavior'\n        dryRun:\n          type: boolean\n        fetchAdditionalInfo:\n          type: boolean\n        returnConflictAsResult:\n          type: boolean\n    MergeBehavior:\n      enum:\n      - NORMAL\n      - FORCE\n      - DROP\n      type: string\n    MergeKeyBehavior:\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n        mergeBehavior:\n          $ref: '#/components/schemas/MergeBehavior'\n    MergeResponse:\n      title: Merge Response\n      type: object\n      properties:\n        resultantTargetHash:\n          type: string\n        commonAncestor:\n          type: string\n        targetBranch:\n          type: string\n        effectiveTargetHash:\n          type: string\n        expectedHash:\n          type: string\n        sourceCommits:\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEntry'\n        targetCommits:\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEntry'\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContentKeyDetails'\n    Namespace:\n      required:\n      - elements\n      - properties\n      type: object\n      properties:\n        id:\n          type: string\n        elements:\n          type: array\n          items:\n            type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n    NamespaceUpdate:\n      type: object\n      properties:\n        propertyUpdates:\n          type: object\n          additionalProperties:\n            type: string\n        propertyRemovals:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n    NessieConfiguration:\n      type: object\n      properties:\n        defaultBranch:\n          minLength: 1\n          type: string\n        maxSupportedApiVersion:\n          format: int32\n          type: integer\n    Operation:\n      title: Operation\n      required:\n      - key\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n      oneOf:\n      - $ref: '#/components/schemas/Put'\n      - $ref: '#/components/schemas/Unchanged'\n      - $ref: '#/components/schemas/Delete'\n      discriminator:\n        propertyName: type\n        mapping:\n          PUT: '#/components/schemas/Put'\n          UNCHANGED: '#/components/schemas/Unchanged'\n          DELETE: '#/components/schemas/Delete'\n    Operations:\n      title: Operations\n      required:\n      - commitMeta\n      - operations\n      type: object\n      properties:\n        commitMeta:\n          $ref: '#/components/schemas/CommitMeta'\n        operations:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/Operation'\n    Put:\n      title: Put-'Content'-operation for a 'ContentKey'.\n      description: \"Add or replace (put) a 'Content' object for a 'ContentKey'. If\\\n        \\ the actual table type tracks the 'global state' of individual tables (Iceberg\\\n        \\ as of today), every 'Put'-operation must contain a non-null value for 'expectedContent'.\"\n      required:\n      - key\n      - content\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n        content:\n          $ref: '#/components/schemas/Content'\n        expectedContent:\n          $ref: '#/components/schemas/Content'\n    RefLogResponse:\n      title: RefLogResponse\n      required:\n      - logEntries\n      type: object\n      properties:\n        hasMore:\n          type: boolean\n        token:\n          minLength: 1\n          type: string\n        logEntries:\n          type: array\n          items:\n            $ref: '#/components/schemas/RefLogResponseEntry'\n    RefLogResponseEntry:\n      title: RefLogResponseEntry\n      required:\n      - refLogId\n      - refName\n      - refType\n      - commitHash\n      - parentRefLogId\n      - operationTime\n      - operation\n      - sourceHashes\n      type: object\n      properties:\n        refLogId:\n          type: string\n        refName:\n          type: string\n        refType:\n          type: string\n        commitHash:\n          type: string\n        parentRefLogId:\n          type: string\n        operationTime:\n          format: int64\n          type: integer\n        operation:\n          type: string\n        sourceHashes:\n          type: array\n          items:\n            type: string\n    Reference:\n      title: Reference\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        hash:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n        metadata:\n          allOf:\n          - $ref: '#/components/schemas/ReferenceMetadata'\n          - nullable: true\n      oneOf:\n      - $ref: '#/components/schemas/Branch'\n      - $ref: '#/components/schemas/Tag'\n      - $ref: '#/components/schemas/Detached'\n      discriminator:\n        propertyName: type\n        mapping:\n          TAG: '#/components/schemas/Tag'\n          BRANCH: '#/components/schemas/Branch'\n          DETACHED: '#/components/schemas/Detached'\n    ReferenceMetadata:\n      title: ReferenceMetadata\n      description: |+\n        Only returned by the server when explicitly requested by the client and contains the following information:\n\n        - numCommitsAhead (number of commits ahead of the default branch)\n\n        - numCommitsBehind (number of commits behind the default branch)\n\n        - commitMetaOfHEAD (the commit metadata of the HEAD commit)\n\n        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).\n\n        - numTotalCommits (the total number of commits in this reference).\n\n      type: object\n      properties:\n        numCommitsAhead:\n          format: int32\n          type: integer\n        numCommitsBehind:\n          format: int32\n          type: integer\n        commitMetaOfHEAD:\n          $ref: '#/components/schemas/CommitMeta'\n        commonAncestorHash:\n          type: string\n        numTotalCommits:\n          format: int64\n          type: integer\n    ReferenceType:\n      enum:\n      - branch\n      - tag\n      type: string\n    ReferencesResponse:\n      required:\n      - references\n      type: object\n      properties:\n        hasMore:\n          type: boolean\n        token:\n          minLength: 1\n          type: string\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/Reference'\n    Tag:\n      title: Tag\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        metadata:\n          $ref: '#/components/schemas/ReferenceMetadata'\n        hash:\n          pattern: \"^[0-9a-fA-F]{8,64}$\"\n          type: string\n    Transplant:\n      title: Transplant\n      required:\n      - fromRefName\n      - hashesToTransplant\n      type: object\n      properties:\n        fromRefName:\n          pattern: \"^[A-Za-z](((?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?$\"\n          type: string\n        hashesToTransplant:\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        keyMergeModes:\n          type: array\n          items:\n            $ref: '#/components/schemas/MergeKeyBehavior'\n        defaultKeyMergeMode:\n          $ref: '#/components/schemas/MergeBehavior'\n        dryRun:\n          type: boolean\n        fetchAdditionalInfo:\n          type: boolean\n        returnConflictAsResult:\n          type: boolean\n    Type:\n      type: object\n    Unchanged:\n      required:\n      - key\n      type: object\n      properties:\n        key:\n          $ref: '#/components/schemas/ContentKey'\n  examples:\n    namespace:\n      value: a.b.c\n    ref:\n      value: main\n    referenceType:\n      value: branch\n    hash:\n      value: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n    nullHash: {}\n    refObj:\n      value:\n        type: BRANCH\n        hash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n        name: main\n    refObjNew:\n      value:\n        type: BRANCH\n        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        name: exampleBranch\n    tagObj:\n      value:\n        type: TAG\n        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        name: exampleTag\n    ContentKeyGet:\n      value: example.key\n    ContentKey:\n      value:\n        elements:\n        - example\n        - key\n    namespaceName:\n      value: a.b.c\n    emptyNamespaceName: {}\n    namespacesResponse:\n      value:\n        namespaces:\n        - type: NAMESPACE\n          elements:\n          - a\n          - b.c\n          - d\n        - type: NAMESPACE\n          elements:\n          - a\n          - b\n          - d\n    namespaceUpdate:\n      value:\n        propertyUpdates:\n          key1: value1\n          key2: value2\n        propertyRemovals:\n        - key3\n        - key4\n    iceberg:\n      value:\n        type: ICEBERG_TABLE\n        id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n        metadataLocation: /path/to/metadata/\n        snapshotId: 1\n        schemaId: 2\n        specId: 3\n        sortOrderId: 4\n    expr_by_namespace:\n      value: entry.namespace.startsWith('a.b.c')\n    expr_by_contentType:\n      value: \"entry.contentType in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']\"\n    expr_by_namespace_and_contentType:\n      value: \"entry.namespace.startsWith('some.name.space') \u0026\u0026 entry.contentType in\\\n        \\ ['ICEBERG_TABLE','DELTA_LAKE_TABLE']\"\n    expr_by_commit_author:\n      value: commit.author=='nessie_author'\n    expr_by_commit_committer:\n      value: commit.committer=='nessie_committer'\n    expr_by_commitTime:\n      value: timestamp(commit.commitTime) \u003e timestamp('2021-05-31T08:23:15Z')\n    expr_by_commit_operations_in_namespace:\n      value: \"operations.exists(op, op.key.startsWith('some.name.space.'))\"\n    expr_by_commit_operations_table_name:\n      value: \"operations.exists(op, op.name == 'BaseTable')\"\n    expr_by_commit_operations_type:\n      value: \"operations.exists(op, op.type == 'PUT')\"\n    expr_by_refType:\n      value: refType == 'BRANCH'\n    expr_by_ref_name:\n      value: ref.name == 'my-tag-or-branch'\n    expr_by_ref_commit:\n      value: commit.message == 'invent awesome things'\n    commitMessage:\n      value: Example Commit Message\n    multiGetResponse:\n      value:\n        contents:\n        - content:\n            type: ICEBERG_TABLE\n            id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n            metadataLocation: /path/to/metadata/\n            snapshotId: 1\n            schemaId: 2\n            specId: 3\n            sortOrderId: 4\n          key:\n            elements:\n            - example\n            - key\n    multiGetRequest:\n      value:\n        requestedKeys:\n        - elements:\n          - example\n          - key\n    entriesResponse:\n      value:\n        token: xxx\n        entries:\n        - name:\n            elements:\n            - example\n            - key\n          type: ICEBERG_TABLE\n    types:\n      value:\n      - ICEBERG_TABLE\n    merge:\n      value:\n        fromHash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        fromRefName: source-ref-name\n        keepIndividualCommits: false\n        defaultKeyMergeMode: NORMAL\n        keyMergeModes:\n        - key:\n            elements:\n            - example\n            - key\n            mergeBehavior: FORCE\n        dryRun: false\n        fetchAdditionalInfo: false\n        returnConflictAsResult: true\n    transplant:\n      value:\n        hashesToTransplant:\n        - abcdef4242424242424242424242beef00dead42112233445566778899001122\n        fromRefName: source-ref-name\n        keepIndividualCommits: false\n        defaultKeyMergeMode: NORMAL\n        keyMergeModes:\n        - key:\n            elements:\n            - example\n            - key\n            mergeBehavior: FORCE\n        dryRun: false\n        fetchAdditionalInfo: false\n        returnConflictAsResult: true\n    mergeResponseSuccess:\n      value:\n        wasApplied: true\n        wasSuccessful: true\n        resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b\n        commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        targetBranch: main\n        effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a\n        expectedHash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n        sourceCommits:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n            message: Example Commit Message\n          operations:\n          - type: PUT\n            key:\n              elements:\n              - example\n              - key\n            content:\n              type: ICEBERG_TABLE\n              id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n              metadataLocation: /path/to/metadata/\n              snapshotId: 1\n              schemaId: 2\n              specId: 3\n              sortOrderId: 4\n          parentCommitHash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        targetCommits:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            hash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a\n            message: Example Commit Message\n          operations:\n          - type: PUT\n            key:\n              elements:\n              - example\n              - key\n            content:\n              type: ICEBERG_TABLE\n              id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n              metadataLocation: /path/to/metadata/\n              snapshotId: 1\n              schemaId: 2\n              specId: 3\n              sortOrderId: 4\n          parentCommitHash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        details:\n        - key:\n            elements:\n            - example\n            - key\n          mergeBehavior: NORMAL\n          conflictType: NONE\n          targetCommits:\n          - e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a\n    mergeResponseFail:\n      value:\n        wasApplied: false\n        wasSuccessful: false\n        resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b\n        commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        targetBranch: main\n        effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b\n        expectedHash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n        sourceCommits:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            hash: 88012047ce424686ca55e8bb228ae9d9cbd6f7bbfc800d830a53a6edf2d55ffb\n            message: Example Commit Message\n          operations:\n          - type: PUT\n            key:\n              elements:\n              - example\n              - key\n            content:\n              type: ICEBERG_TABLE\n              id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n              metadataLocation: /path/to/metadata/\n              snapshotId: 1\n              schemaId: 2\n              specId: 3\n              sortOrderId: 4\n          parentCommitHash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        targetCommits:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            hash: 54388c80e6387b8cfa4cf3e7c7909073ffc761f9c7f0d6154ec0d5c5829a4503\n            message: Example Commit Message\n          operations:\n          - type: PUT\n            key:\n              elements:\n              - example\n              - key\n            content:\n              type: ICEBERG_TABLE\n              id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n              metadataLocation: /path/to/metadata/\n              snapshotId: 1\n              schemaId: 2\n              specId: 3\n              sortOrderId: 4\n          parentCommitHash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n        details:\n        - key:\n            elements:\n            - example\n            - key\n          mergeBehavior: NORMAL\n          conflictType: UNRESOLVABLE\n          sourceCommits:\n          - 88012047ce424686ca55e8bb228ae9d9cbd6f7bbfc800d830a53a6edf2d55ffb\n          targetCommits:\n          - 54388c80e6387b8cfa4cf3e7c7909073ffc761f9c7f0d6154ec0d5c5829a4503\n    operations:\n      value:\n        commitMeta:\n          author: authorName \u003cauthorName@example.com\u003e\n          authorTime: 2021-04-07T14:42:25.534748Z\n          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n          message: Example Commit Message\n          properties:\n            additionalProp1: xxx\n            additionalProp2: yyy\n            additionalProp3: zzz\n          signedOffBy: signedOffByName \u003csignedOffBy@example.com\u003e\n        operations:\n        - type: PUT\n          key:\n            elements:\n            - example\n            - key\n          content:\n            type: ICEBERG_TABLE\n            id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n            metadataLocation: /path/to/metadata/\n            snapshotId: 1\n            schemaId: 2\n            specId: 3\n            sortOrderId: 4\n    logResponseAdditionalInfo:\n      value:\n        token: xxx\n        logEntries:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            commitTime: 2021-04-07T14:42:25.534748Z\n            committer: committerName \u003ccommitterName@example.com\u003e\n            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n            message: Example Commit Message\n            properties:\n              additionalProp1: xxx\n              additionalProp2: yyy\n              additionalProp3: zzz\n            signedOffBy: signedOffByName \u003csignedOffBy@example.com\u003e\n          parentCommitHash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n          operations:\n          - type: DELETE\n            key:\n              elements:\n              - deleted\n              - table\n          - type: PUT\n            key:\n              elements:\n              - example\n              - key\n            content:\n              type: ICEBERG_TABLE\n              id: b874b5d5-f926-4eed-9be7-b2380d9810c0\n              metadataLocation: /path/to/metadata/\n              snapshotId: 1\n              schemaId: 2\n              specId: 3\n              sortOrderId: 4\n    logResponseSimple:\n      value:\n        token: xxx\n        logEntries:\n        - commitMeta:\n            author: authorName \u003cauthorName@example.com\u003e\n            authorTime: 2021-04-07T14:42:25.534748Z\n            commitTime: 2021-04-07T14:42:25.534748Z\n            committer: committerName \u003ccommitterName@example.com\u003e\n            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n            message: Example Commit Message\n            properties:\n              additionalProp1: xxx\n              additionalProp2: yyy\n              additionalProp3: zzz\n            signedOffBy: signedOffByName \u003csignedOffBy@example.com\u003e\n    referencesResponse:\n      value:\n        hasMore: false\n        references:\n        - type: BRANCH\n          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n          name: exampleBranch\n        - type: TAG\n          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122\n          name: exampleTag\n        - type: BRANCH\n          hash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n          name: main\n    referencesResponseWithMetadata:\n      value:\n        hasMore: false\n        references:\n        - type: BRANCH\n          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d\n          name: main\n          metadata:\n            commitMetaOfHEAD:\n              hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d\n              committer: \"\"\n              author: nessie-author\n              message: update table\n              commitTime: 2021-11-26T08:01:13.855974Z\n              authorTime: 2021-11-26T08:01:13.852826Z\n              properties: {}\n        - type: BRANCH\n          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5\n          name: dev\n          metadata:\n            numCommitsAhead: 1\n            numCommitsBehind: 2\n            commonAncestorHash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n            numTotalCommits: 42\n            commitMetaOfHEAD:\n              hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5\n              committer: \"\"\n              author: nessie-author\n              message: update table X\n              commitTime: 2021-11-26T08:01:13.834397Z\n              authorTime: 2021-11-26T08:01:13.831371Z\n              properties: {}\n        - type: BRANCH\n          hash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n          name: dev2\n          metadata:\n            numCommitsAhead: 0\n            numCommitsBehind: 2\n            commonAncestorHash: 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d\n        - type: TAG\n          hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371\n          name: testTag1\n          metadata:\n            numTotalCommits: 42\n            commitMetaOfHEAD:\n              hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371\n              committer: \"\"\n              author: nessie-author\n              message: update table Y\n              commitTime: 2021-11-23T08:01:14.834397Z\n              authorTime: 2021-11-23T08:01:14.831371Z\n              properties: {}\n        - type: TAG\n          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5\n          name: testTag2\n          metadata:\n            numTotalCommits: 42\n            commitMetaOfHEAD:\n              hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5\n              committer: \"\"\n              author: nessie-author\n              message: update table X\n              commitTime: 2021-11-26T08:01:13.834397Z\n              authorTime: 2021-11-26T08:01:13.831371Z\n              properties: {}\n    diffResponse:\n      value:\n        diffs:\n        - key:\n            elements:\n            - example\n            - key\n          from:\n            type: ICEBERG_TABLE\n            id: f350b391-f492-41eb-9959-730a8c49f01e\n            metadataLocation: /path/to/metadata/\n            snapshotId: 23\n            schemaId: 15\n            specId: 15\n            sortOrderId: 15\n          to:\n            type: ICEBERG_TABLE\n            id: dec31d0a-7d4b-4534-8c24-24f08eda33b2\n            metadataLocation: /path/to/metadata/\n            snapshotId: 24\n            schemaId: 16\n            specId: 16\n            sortOrderId: 16\n",
			"canonicalURL": "/github.com/projectnessie/nessie@6a62bf87c7e3f069efe9d16d6565d5a85971dcc6/-/blob/ui/src/openapi/nessie-openapi-0.45.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/projectnessie/nessie/blob/6a62bf87c7e3f069efe9d16d6565d5a85971dcc6/ui/src/openapi/nessie-openapi-0.45.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/namespaces/namespace/{ref}/{name}\": get: parameters: \"name\": field \"Elements\": nested arrays not allowed"
}