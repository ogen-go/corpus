{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dockstore/dockstore"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml",
			"byteSize": 268060,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    email: theglobalalliance@genomicsandhealth.org\n    name: Dockstore@ga4gh\n    url: https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506\n  description: \"This describes the dockstore API, a webservice that manages pairs\\\n    \\ of Docker images and associated metadata such as CWL documents and Dockerfiles\\\n    \\ used to build those images. Explore swagger.json for a Swagger 2.0 description\\\n    \\ of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.\"\n  license:\n    name: Apache License Version 2.0\n    url: https://github.com/dockstore/dockstore/blob/develop/LICENSE\n  termsOfService: https://github.com/dockstore/dockstore-ui2/raw/develop/src/assets/docs/Dockstore_Terms_of_Service.pdf\n  title: Dockstore API\n  version: 1.13.0-SNAPSHOT\nservers:\n- description: Current server when hosted on AWS\n  url: /api\n  variables: {}\n- description: When working locally\n  url: /\n  variables: {}\n- description: Production server\n  url: https://dockstore.org/api\n  variables: {}\n- description: Staging server\n  url: https://staging.dockstore.org/api\n  variables: {}\n- description: Nightly build server\n  url: https://dev.dockstore.net/api\n  variables: {}\ntags:\n- description: \"Create, update list aliases for accessing entries\"\n  name: aliases\n- description: Operations on Dockstore categories\n  name: categories\n- description: Operations on Dockstore organizations\n  name: organizations\n- description: \"Needed for SmartAPI compatibility apparantly, might be cargo cult\\\n    \\ behaviour\"\n  name: NIHdatacommons\n- description: List and register entries in the dockstore (pairs of images + metadata\n    (CWL and Dockerfile))\n  name: containers\n- description: List and modify tags for containers\n  name: containertags\n- description: Interact with entries in Dockstore regardless of whether they are containers\n    or workflows\n  name: entries\n- description: Created and modify hosted entries in the dockstore\n  name: hosted\n- description: Query lambda events triggered by GitHub Apps\n  name: lambdaEvents\n- description: \"Information about Dockstore like RSS, sitemap, lists of dependencies,\\\n    \\ etc.\"\n  name: metadata\n- description: List and modify notifications for users of Dockstore\n  name: curation\n- description: \"List and register workflows in the dockstore (CWL, Nextflow, WDL)\"\n  name: workflows\n- description: \"List, modify, refresh, and delete tokens for external services\"\n  name: tokens\n- description: Interactions with the Dockstore-support's ToolTester application\n  name: toolTester\n- description: \"List, modify, and manage end users of the dockstore\"\n  name: users\n- description: Optional experimental extensions of the GA4GH API\n  name: extendedGA4GH\n- description: \"A curated subset of resources proposed as a common standard for tool\\\n    \\ repositories. Implements TRS [2.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0).\"\n  name: GA4GHV20\n- description: \"A curated subset of resources proposed as a common standard for tool\\\n    \\ repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2)\\\n    \\ . Integrators are welcome to use these endpoints but they are subject to change\\\n    \\ based on community input.\"\n  name: GA4GH\n- description: \"A curated subset of resources proposed as a common standard for tool\\\n    \\ repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0)\\\n    \\ and is considered final (not subject to change)\"\n  name: GA4GHV1\npaths:\n  /aliases/workflow-versions/{alias}:\n    get:\n      description: Retrieves workflow version path information by alias.\n      operationId: getWorkflowVersionPathInfoByAlias\n      parameters:\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowVersionPathInfo'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - aliases\n  /aliases/workflow-versions/{workflowVersionId}:\n    post:\n      description: Add aliases linked to a workflow version in Dockstore.\n      operationId: addAliases\n      parameters:\n      - in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: aliases\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowVersion'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - aliases\n  /api/ga4gh/v1/tools:\n    get:\n      description: This endpoint returns all tools available or a filtered subset\n        using metadata query parameters.\n      operationId: toolsGetV1\n      parameters:\n      - in: query\n        name: id\n        schema:\n          type: string\n      - in: query\n        name: registry\n        schema:\n          type: string\n      - in: query\n        name: organization\n        schema:\n          type: string\n      - in: query\n        name: name\n        schema:\n          type: string\n      - in: query\n        name: toolname\n        schema:\n          type: string\n      - in: query\n        name: description\n        schema:\n          type: string\n      - in: query\n        name: author\n        schema:\n          type: string\n      - in: query\n        name: offset\n        schema:\n          type: string\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolV1'\n          description: An array of Tools that match the filter.\n      summary: List all tools\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}:\n    get:\n      description: This endpoint returns one specific tool (which has ToolVersions\n        nested inside it)\n      operationId: toolsIdGetV1\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolV1'\n          description: A tool.\n      summary: \"List one specific tool, acts as an anchor for self references\"\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions:\n    get:\n      description: Returns all versions of the specified tool\n      operationId: toolsIdVersionGetV1\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolVersionV1'\n          description: An array of tool versions\n      summary: List versions of a tool\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions/{version_id}:\n    get:\n      description: This endpoint returns one specific tool version\n      operationId: versionIdGetV1\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolVersionV1'\n          description: A tool version.\n      summary: \"List one specific tool version, acts as an anchor for self references\"\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile:\n    get:\n      description: Returns the dockerfile for the specified image.\n      operationId: dockerfileGetV1\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDockerfile'\n          description: The tool payload.\n      summary: Get the dockerfile for the specified image.\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor:\n    get:\n      description: Returns the CWL or WDL descriptor for the specified tool.\n      operationId: descriptorGetV1\n      parameters:\n      - in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n          description: The tool descriptor.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n          description: The tool can not be output in the specified type.\n      summary: Get the tool descriptor (CWL/WDL) for the specified tool.\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:\n    get:\n      description: Returns additional CWL or WDL descriptors for the specified tool\n        in the same or subdirectories\n      operationId: relativeDescriptorGetV1\n      parameters:\n      - in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: relative_path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n          description: The tool descriptor.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n          description: The tool can not be output in the specified type.\n      summary: Get additional tool descriptor files (CWL/WDL) relative to the main\n        file\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests:\n    get:\n      operationId: testsGetV1\n      parameters:\n      - in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolTestsV1'\n          description: The tool test JSON response.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolTestsV1'\n          description: The tool can not be output in the specified type.\n      summary: Get an array of test JSONs suitable for use with this descriptor type.\n      tags:\n      - GA4GHV1\n  /api/ga4gh/v2/extended/containers/{organization}:\n    get:\n      description: This endpoint returns entries of an organization.\n      operationId: entriesOrgGet\n      parameters:\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolV1'\n          description: An array of Tools of the input organization.\n      summary: List entries of an organization\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/organizations:\n    get:\n      description: This endpoint returns list of all organizations.\n      operationId: entriesOrgsGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: An array of organizations' names.\n      summary: List all organizations\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/tools/entry/_search:\n    post:\n      description: This endpoint searches the indices for all published tools and\n        workflows. Used by utilities that expect to talk to an elastic search endpoint.\n      operationId: toolsIndexSearch\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: An elastic search result.\n      summary: Search the tools and workflows indices.\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/tools/index:\n    post:\n      description: This endpoint updates the indices for all published tools and workflows.\n      operationId: Update the workflows and tools indices\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                type: integer\n                format: int32\n          description: Workflows and tools indices populated with entries.\n      security:\n      - bearer: []\n      summary: Update the workflows and tools indices\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/tools/{organization}:\n    get:\n      description: This endpoint returns tools of an organization.\n      operationId: toolsOrgGet\n      parameters:\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolV1'\n          description: An array of Tools of the input organization.\n      summary: List tools of an organization\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/workflows/{organization}:\n    get:\n      description: This endpoint returns workflows of an organization.\n      operationId: workflowsOrgGet\n      parameters:\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolV1'\n          description: An array of Tools of the input organization.\n      summary: List workflows of an organization\n      tags:\n      - extendedGA4GH\n  /api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}:\n    post:\n      description: Test JSON can be annotated with whether they ran correctly keyed\n        by platform and associated with some metadata.\n      operationId: verifyTestParameterFilePost\n      parameters:\n      - in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: relative_path\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: platform\n        schema:\n          type: string\n      - in: query\n        name: platform_version\n        schema:\n          type: string\n      - in: query\n        name: verified\n        schema:\n          type: boolean\n      - in: query\n        name: metadata\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: The tool test JSON response.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Credentials not provided or incorrect.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool test cannot be found to annotate.\n      security:\n      - bearer: []\n      summary: Annotate test JSON with information on whether it ran successfully\n        on particular platforms plus metadata\n      tags:\n      - extendedGA4GH\n  /auth/tokens/bitbucket.org:\n    get:\n      description: \"Add a new bitbucket.org token, used by quay.io redirect.\"\n      operationId: addBitbucketToken\n      parameters:\n      - in: query\n        name: code\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added a new bitbucket.org token\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/github:\n    post:\n      description: \"Allow satellizer to post a new GitHub token to dockstore, used\\\n        \\ by login, can create new users.\"\n      operationId: addToken\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_Auth'\n          description: Satellizer successfully posted a new GitHub token to Dockstore\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/github.com:\n    get:\n      description: \"Add a new github.com token, used by accounts page.\"\n      operationId: addGithubToken\n      parameters:\n      - in: query\n        name: code\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added a new github.com token\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/gitlab.com:\n    get:\n      description: Add a new gitlab.com token.\n      operationId: addGitlabToken\n      parameters:\n      - in: query\n        name: code\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added a new gitlab.com token\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/google:\n    post:\n      description: Allow satellizer to post a new Google token to Dockstore.\n      operationId: addGoogleToken\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_Auth'\n          description: Successfully posted a new Google token to Dockstore\n        \"400\":\n          description: Bad request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"409\":\n          description: Conflict\n        \"417\":\n          description: Expectation failed\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/orcid.org:\n    post:\n      description: \"Using OAuth code from ORCID, request and store tokens from ORCID\\\n        \\ API\"\n      operationId: addOrcidToken\n      parameters:\n      - in: query\n        name: code\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added orcid.org token\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"409\":\n          description: Conflict\n        \"500\":\n          description: Internal server error\n      security:\n      - bearer: []\n      summary: Add a new orcid.org token\n      tags:\n      - tokens\n  /auth/tokens/quay.io:\n    get:\n      description: Add a new Quay.io token.\n      operationId: addQuayToken\n      parameters:\n      - in: query\n        name: access_token\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added a new Quay.io token\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/zenodo.org:\n    get:\n      description: \"Add a new zenodo.org token, used by accounts page.\"\n      operationId: addZenodoToken\n      parameters:\n      - in: query\n        name: code\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: Successfully added a new zenodo.org token\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Not found\n        \"409\":\n          description: Conflict\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /auth/tokens/{tokenId}:\n    delete:\n      description: Delete a token.\n      operationId: deleteToken\n      parameters:\n      - in: path\n        name: tokenId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: Successfully deleted token\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Token not found\n      security:\n      - bearer: []\n      tags:\n      - tokens\n    get:\n      description: Get information about a specific token by id.\n      operationId: listToken\n      parameters:\n      - in: path\n        name: tokenId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_User'\n          description: A token specified by id\n        \"404\":\n          description: Token not found\n      security:\n      - bearer: []\n      tags:\n      - tokens\n  /categories:\n    get:\n      description: Retrieve all categories.\n      operationId: getCategories\n      parameters:\n      - description: Name of category to retrieve\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: \"Comma-delimited list of fields to include: entries\"\n        in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n          description: Successfully retrieved categories\n      summary: Retrieve all categories.\n      tags:\n      - categories\n  /categories/{id}:\n    get:\n      description: Retrieve a category by ID.\n      operationId: getCategoryById\n      parameters:\n      - description: Category ID.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n          description: Successfully retrieved category\n        \"404\":\n          description: Category not found\n      summary: Retrieve a category by ID.\n      tags:\n      - categories\n  /cloudInstances:\n    get:\n      operationId: getCloudInstances\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CloudInstance'\n          description: OK\n      summary: Get all known public cloud instances\n      tags:\n      - Cloud Instances\n    post:\n      operationId: postCloudInstance\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CloudInstance'\n        description: Cloud instance to create\n        required: true\n      responses:\n        \"204\":\n          description: No Content\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      summary: \"Add a new public cloud instance, admin only\"\n      tags:\n      - Cloud Instances\n  /cloudInstances/{cloudInstanceId}:\n    delete:\n      operationId: deleteCloudInstance\n      parameters:\n      - description: ID of cloud instance to delete\n        in: path\n        name: cloudInstanceId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: No Content\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      summary: \"Delete a public cloud instance, admin only\"\n      tags:\n      - Cloud Instances\n  /containers/hostedEntry:\n    post:\n      description: Create a hosted tool.\n      operationId: createHostedTool\n      parameters:\n      - in: query\n        name: registry\n        schema:\n          type: string\n      - in: query\n        name: name\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      - in: query\n        name: namespace\n        schema:\n          type: string\n      - in: query\n        name: entryName\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: Successfully created a hosted tool.\n      security:\n      - bearer: []\n      tags:\n      - hosted\n  /containers/hostedEntry/{entryId}:\n    delete:\n      description: Delete a revision of a hosted tool.\n      operationId: deleteHostedToolVersion\n      parameters:\n      - in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: version\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: Successfully deleted hosted entry version\n      security:\n      - bearer: []\n      tags:\n      - hosted\n    patch:\n      description: Non-idempotent operation for creating new revisions of hosted tools.\n      operationId: editHostedTool\n      parameters:\n      - description: Entry to modify\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/SourceFile'\n              uniqueItems: true\n        description: \"Set of updated sourcefiles, add files by adding new files with\\\n          \\ unknown paths, delete files by including them with emptied content\"\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - hosted\n  /containers/namespace/{namespace}/published:\n    get:\n      description: List all published tools belonging to the specified namespace.\n      operationId: getPublishedContainersByNamespace\n      parameters:\n      - in: path\n        name: namespace\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      tags:\n      - containers\n  /containers/path/tool/{repository}:\n    get:\n      description: Requires full path (including tool name if applicable).\n      operationId: getContainerByToolPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get a tool by the specific tool path\n      tags:\n      - containers\n  /containers/path/tool/{repository}/published:\n    get:\n      description: Requires full path (including tool name if applicable).\n      operationId: getPublishedContainerByToolPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      summary: Get a published tool by the specific tool path.\n      tags:\n      - containers\n  /containers/path/{containerId}/tags:\n    get:\n      description: Get tags for a tool by id.\n      operationId: getTagsByPath\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n  /containers/path/{repository}:\n    get:\n      description: Do not include tool name.\n      operationId: getContainerByPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get a list of tools by path.\n      tags:\n      - containers\n  /containers/path/{repository}/published:\n    get:\n      description: Do not include tool name.\n      operationId: getPublishedContainerByPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get a list of published tools by path.\n      tags:\n      - containers\n  /containers/published:\n    get:\n      description: List all published tools.\n      operationId: allPublishedContainers\n      parameters:\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 100\n      - in: query\n        name: filter\n        schema:\n          type: string\n          default: \"\"\n      - in: query\n        name: sortCol\n        schema:\n          type: string\n          default: stars\n      - in: query\n        name: sortOrder\n        schema:\n          type: string\n          default: desc\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      tags:\n      - containers\n  /containers/registerManual:\n    post:\n      description: \"Register a tool manually, along with tags.\"\n      operationId: registerManual\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DockstoreTool'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/schema/{containerId}/published:\n    get:\n      description: Get a published tool's schema by ID.\n      operationId: getPublishedContainerSchema\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n          description: default response\n      tags:\n      - containers\n  /containers/tags:\n    get:\n      description: List the tags for a tool.\n      operationId: tags\n      parameters:\n      - in: query\n        name: containerId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{alias}/aliases:\n    get:\n      description: Retrieves a tool by alias.\n      operationId: getToolByAlias\n      parameters:\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}:\n    delete:\n      description: Delete a tool.\n      operationId: deleteContainer\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n    get:\n      description: Retrieve a tool\n      operationId: getContainer\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n    put:\n      description: \"Updates default descriptor paths, default Dockerfile paths, default\\\n        \\ test parameter paths, git url, and default version. Also updates tool maintainer\\\n        \\ email, and private access for manual tools.\"\n      operationId: updateContainer\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DockstoreTool'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update the tool with the given tool.\n      tags:\n      - containers\n  /containers/{containerId}/descriptor/{relative-path}:\n    get:\n      description: Get the corresponding descriptor file.\n      operationId: secondaryDescriptorPath\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: path\n        name: relative-path\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/dockerfile:\n    get:\n      description: Get the corresponding Dockerfile.\n      operationId: dockerfile\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/labels:\n    put:\n      description: Update the labels linked to a tool.\n      operationId: updateLabels\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: labels\n        schema:\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/primaryDescriptor:\n    get:\n      description: Get the primary descriptor file.\n      operationId: primaryDescriptor\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/publish:\n    post:\n      description: Publish or unpublish a tool.\n      operationId: publish\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/PublishRequest'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/refresh:\n    get:\n      description: Refresh one particular tool.\n      operationId: refresh\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/requestDOI/{tagId}:\n    post:\n      description: Request a DOI for this version of a tool.\n      operationId: requestDOIForToolTag\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: tagId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n  /containers/{containerId}/secondaryDescriptors:\n    get:\n      description: Get a list of secondary descriptor files.\n      operationId: secondaryDescriptors\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/star:\n    put:\n      description: Star a tool.\n      operationId: starEntry\n      parameters:\n      - description: Tool to star.\n        in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StarRequest'\n        description: StarRequest to star a repo for a user\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/starredUsers:\n    get:\n      description: Returns list of users who starred a tool.\n      operationId: getStarredUsers\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n                uniqueItems: true\n          description: default response\n      tags:\n      - containers\n  /containers/{containerId}/tags:\n    post:\n      description: Add new tags linked to a tool.\n      operationId: addTags\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n    put:\n      description: Update the tags linked to a tool.\n      operationId: updateTags\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n  /containers/{containerId}/tags/{tagId}:\n    delete:\n      description: Delete tag linked to a tool.\n      operationId: deleteTags\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: tagId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n  /containers/{containerId}/tags/{tagId}/sourcefiles:\n    get:\n      description: Retrieve sourcefiles for a container's version\n      operationId: getTagsSourcefiles\n      parameters:\n      - description: Container to retrieve the version from\n        in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Tag to retrieve the sourcefiles from\n        in: path\n        name: tagId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: List of file types to filter sourcefiles by\n        in: query\n        name: fileTypes\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - DOCKSTORE_SMK\n            - SMK_TEST_PARAMS\n            - DOCKSTORE_CWL\n            - CWL_TEST_JSON\n            - DOCKSTORE_WDL\n            - WDL_TEST_JSON\n            - DOCKERFILE\n            - NEXTFLOW\n            - NEXTFLOW_CONFIG\n            - NEXTFLOW_TEST_PARAMS\n            - DOCKSTORE_YML\n            - DOCKSTORE_SERVICE_YML\n            - DOCKSTORE_SERVICE_TEST_JSON\n            - DOCKSTORE_SERVICE_OTHER\n            - DOCKSTORE_GXFORMAT2\n            - GXFORMAT2_TEST_FILE\n            - DOCKSTORE_SWL\n            - SWL_TEST_JSON\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containertags\n  /containers/{containerId}/testParameterFiles:\n    delete:\n      description: Delete test parameter files to a tag.\n      operationId: deleteTestParameterFiles\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: testParameterPaths\n        schema:\n          type: array\n          items:\n            type: string\n      - in: query\n        name: tagName\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n    get:\n      description: Get the corresponding test parameter files.\n      operationId: getTestParameterFiles\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n    put:\n      description: Add test parameter files to a tag.\n      operationId: addTestParameterFiles\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: testParameterPaths\n        schema:\n          type: array\n          items:\n            type: string\n      - in: query\n        name: tagName\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/updateTagPaths:\n    put:\n      description: Change the tool paths.\n      operationId: updateTagContainerPath\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/DockstoreTool'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{containerId}/users:\n    get:\n      description: Get users of a tool.\n      operationId: getUsers\n      parameters:\n      - in: path\n        name: containerId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{toolId}/defaultVersion:\n    put:\n      description: Update the default version of the given tool.\n      operationId: updateDefaultVersion\n      parameters:\n      - in: path\n        name: toolId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockstoreTool'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /containers/{toolId}/zip/{tagId}:\n    get:\n      description: Download a ZIP file of a tool and all associated files.\n      operationId: getToolZip\n      parameters:\n      - in: path\n        name: toolId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: tagId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/zip: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - containers\n  /curation/notifications:\n    get:\n      description: Return all active notifications\n      operationId: getActiveNotifications\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Notification'\n          description: default response\n      tags:\n      - curation\n    post:\n      description: Create a notification\n      operationId: createNotification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Notification'\n        description: Notification to create\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notification'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - curation\n  /curation/notifications/{id}:\n    delete:\n      description: Delete a notification\n      operationId: deleteNotification\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - curation\n    get:\n      description: Return the notification with given id\n      operationId: getNotification\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notification'\n          description: default response\n      tags:\n      - curation\n    put:\n      description: Update a notification\n      operationId: updateNotification\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Notification'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notification'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - curation\n  /entries/updateEntryToGetTopics:\n    get:\n      deprecated: true\n      description: Attempt to get the topic of all entries that use GitHub as the\n        source control.\n      operationId: updateEntryToGetTopics\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n          description: Get the number of entries that failed to have their topics\n            retrieved from GitHub.\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{entryId}/exportToOrcid:\n    post:\n      description: Export entry to ORCID. DOI is required\n      operationId: exportToORCID\n      parameters:\n      - description: The id of the entry to export.\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Optional version ID of the entry version to export.\n        in: query\n        name: versionId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: Successfully exported entry to ORCID\n        \"400\":\n          description: Bad Request\n        \"404\":\n          description: Not Found\n        \"500\":\n          description: Internal Server Error\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{entryId}/verifiedPlatforms:\n    get:\n      description: Get the verified platforms for each version of an entry.\n      operationId: getVerifiedPlatforms\n      parameters:\n      - description: id of the entry\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VersionVerifiedPlatform'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{entryId}/versions/{versionId}/descriptionMetrics:\n    get:\n      description: Retrieve metrics on the description of an entry\n      operationId: getDescriptionMetrics\n      parameters:\n      - description: Entry to retrieve the version from\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Version to retrieve the sourcefile types from\n        in: path\n        name: versionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescriptionMetrics'\n          description: Successfully calculated description metrics\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{entryId}/versions/{versionId}/fileTypes:\n    get:\n      description: Retrieve the unique file types of a version's sourcefile\n      operationId: getVersionsFileTypes\n      parameters:\n      - description: Entry to retrieve the version from\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Version to retrieve the sourcefile types from\n        in: path\n        name: versionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  enum:\n                  - DOCKSTORE_SMK\n                  - SMK_TEST_PARAMS\n                  - DOCKSTORE_CWL\n                  - CWL_TEST_JSON\n                  - DOCKSTORE_WDL\n                  - WDL_TEST_JSON\n                  - DOCKERFILE\n                  - NEXTFLOW\n                  - NEXTFLOW_CONFIG\n                  - NEXTFLOW_TEST_PARAMS\n                  - DOCKSTORE_YML\n                  - DOCKSTORE_SERVICE_YML\n                  - DOCKSTORE_SERVICE_TEST_JSON\n                  - DOCKSTORE_SERVICE_OTHER\n                  - DOCKSTORE_GXFORMAT2\n                  - GXFORMAT2_TEST_FILE\n                  - DOCKSTORE_SWL\n                  - SWL_TEST_JSON\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{id}/aliases:\n    post:\n      description: Add aliases linked to a entry in Dockstore.\n      operationId: addAliases_1\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: aliases\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: Successfully added alias to entry\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /entries/{id}/categories:\n    get:\n      description: Get the categories that contain the published entry\n      operationId: entryCategories\n      parameters:\n      - description: Entry ID\n        in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n          description: Successfully retrieved categories\n        \"400\":\n          description: Entry must be published\n      tags:\n      - entries\n  /entries/{id}/collections:\n    get:\n      description: Get the collections and approved organizations that contain the\n        published entry\n      operationId: entryCollections\n      parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionOrganization'\n          description: default response\n      tags:\n      - entries\n  /entries/{id}/topic:\n    post:\n      description: Create a discourse topic for an entry.\n      operationId: setDiscourseTopic\n      parameters:\n      - description: The id of the entry to add a topic to.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - entries\n  /events:\n    get:\n      description: Optional authentication.\n      operationId: getEvents\n      parameters:\n      - in: query\n        name: eventSearchType\n        required: true\n        schema:\n          type: string\n          enum:\n          - STARRED_ENTRIES\n          - STARRED_ORGANIZATION\n          - ALL_STARRED\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 10\n          maximum: 100\n          minimum: 1\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n          description: A list of events\n      security:\n      - bearer: []\n      summary: Get events based on filters.\n      tags:\n      - events\n  /events/{userId}:\n    get:\n      description: No authentication.\n      operationId: getUserEvents\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: eventSearchType\n        required: true\n        schema:\n          type: string\n          enum:\n          - STARRED_ENTRIES\n          - STARRED_ORGANIZATION\n          - ALL_STARRED\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 10\n          maximum: 100\n          minimum: 1\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n          description: A list of events\n        \"404\":\n          description: User not found\n      summary: Get events based on filter and user id.\n      tags:\n      - events\n  /ga4gh/trs/v2/service-info:\n    get:\n      operationId: getServiceInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TRSService'\n          description: A successful operation to request the service information about\n            this running service.'\n      summary: Show information about this service. It is assumed that removing this\n        endpoint from a URL will result in a valid URL to query against\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/toolClasses:\n    get:\n      description: 'This endpoint returns all tool-classes available. '\n      operationId: toolClassesGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolClass'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolClass'\n          description: A list of potential tool classes.\n      security:\n      - BEARER: []\n      summary: List all tool types\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools:\n    get:\n      description: 'This endpoint returns all tools available or a filtered subset\n        using metadata query parameters. '\n      operationId: toolsGet\n      parameters:\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: query\n        name: id\n        schema:\n          type: string\n      - description: Support for this parameter is optional for tool registries that\n          support aliases. If provided will only return entries with the given alias.\n        in: query\n        name: alias\n        schema:\n          type: string\n      - description: Filter tools by the name of the subclass (#/definitions/ToolClass)\n        in: query\n        name: toolClass\n        schema:\n          type: string\n          enum:\n          - CommandLineTool\n          - Workflow\n      - description: Filter tools by the name of the descriptor type (#/definitions/DescriptorType)\n        in: query\n        name: descriptorType\n        schema:\n          type: string\n          enum:\n          - CWL\n          - WDL\n          - NFL\n          - SERVICE\n          - GALAXY\n          - SMK\n      - description: The image registry that contains the image.\n        in: query\n        name: registry\n        schema:\n          type: string\n      - description: The organization in the registry that published the image.\n        in: query\n        name: organization\n        schema:\n          type: string\n      - description: The name of the image.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: The name of the tool.\n        in: query\n        name: toolname\n        schema:\n          type: string\n      - description: The description of the tool.\n        in: query\n        name: description\n        schema:\n          type: string\n      - description: \"The author of the tool (TODO a thought occurs, are we assuming\\\n          \\ that the author of the CWL and the image are the same?).\"\n        in: query\n        name: author\n        schema:\n          type: string\n      - description: Return only checker workflows.\n        in: query\n        name: checker\n        schema:\n          type: boolean\n      - description: \"Start index of paging. Pagination results can be based on numbers\\\n          \\ or other values chosen by the registry implementor (for example, SHA values).\\\n          \\ If this exceeds the current result set return an empty set.  If not specified\\\n          \\ in the request, this will start at the beginning of the results.\"\n        in: query\n        name: offset\n        schema:\n          type: string\n      - description: Amount of records to return in a given page.\n        in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 1000\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tool'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tool'\n          description: An array of Tools that match the filter.\n      security:\n      - BEARER: []\n      summary: List all tools\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}:\n    get:\n      description: This endpoint returns one specific tool (which has ToolVersions\n        nested inside it).\n      operationId: toolsIdGet\n      parameters:\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tool'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Tool'\n          description: A tool.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool can not be found.\n      security:\n      - BEARER: []\n      summary: \"List one specific tool, acts as an anchor for self references\"\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions:\n    get:\n      description: Returns all versions of the specified tool.\n      operationId: toolsIdVersionsGet\n      parameters:\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolVersion'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolVersion'\n          description: An array of tool versions.\n      security:\n      - BEARER: []\n      summary: List versions of a tool\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}:\n    get:\n      description: This endpoint returns one specific tool version.\n      operationId: toolsIdVersionsVersionIdGet\n      parameters:\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version, scoped to this registry,\\\n          \\ for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html\\\n          \\  (For example, `1.0.0` instead of `develop`)\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolVersion'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ToolVersion'\n          description: A tool version.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool can not be found.\n      security:\n      - BEARER: []\n      summary: \"List one specific tool version, acts as an anchor for self references\"\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/containerfile:\n    get:\n      description: \"Returns the container specifications(s) for the specified image.\\\n        \\ For example, a CWL CommandlineTool can be associated with one specification\\\n        \\ for a container, a CWL Workflow can be associated with multiple specifications\\\n        \\ for containers.\"\n      operationId: toolsIdVersionsVersionIdContainerfileGet\n      parameters:\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version for this particular tool registry,\\\n          \\ for example `v1`.\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileWrapper'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileWrapper'\n          description: The tool payload.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: There are no container specifications for this tool.\n      security:\n      - BEARER: []\n      summary: Get the container specification(s) for the specified image.\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor:\n    get:\n      description: \"Returns the descriptor for the specified tool (examples include\\\n        \\ CWL, WDL, Nextflow, or Galaxy documents).\"\n      operationId: toolsIdVersionsVersionIdTypeDescriptorGet\n      parameters:\n      - description: \"The output type of the descriptor. Plain types return the bare\\\n          \\ descriptor while the \\\"non-plain\\\" types return a descriptor wrapped with\\\n          \\ metadata. Allowable values include \\\"CWL\\\", \\\"WDL\\\", \\\"NFL\\\", \\\"GALAXY\\\"\\\n          , \\\"SMK\\\", \\\"PLAIN_CWL\\\", \\\"PLAIN_WDL\\\", \\\"PLAIN_NFL\\\", \\\"PLAIN_GALAXY\\\"\\\n          , \\\"PLAIN_SMK\\\".\"\n        in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version, scoped to this registry,\\\n          \\ for example `v1`.\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileWrapper'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/FileWrapper'\n          description: The tool descriptor.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool descriptor can not be found.\n      security:\n      - BEARER: []\n      summary: Get the tool descriptor for the specified tool\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:\n    get:\n      description: Descriptors can often include imports that refer to additional\n        descriptors. This returns additional descriptors for the specified tool in\n        the same or other directories that can be reached as a relative path. This\n        endpoint can be useful for workflow engine implementations like cwltool to\n        programmatically download all the descriptors for a tool and run it. This\n        can optionally include other files described with FileWrappers such as test\n        parameters and containerfiles.\n      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet\n      parameters:\n      - description: \"The output type of the descriptor. If not specified, it is up\\\n          \\ to the underlying implementation to determine which output type to return.\\\n          \\ Plain types return the bare descriptor while the \\\"non-plain\\\" types return\\\n          \\ a descriptor wrapped with metadata. Allowable values are \\\"CWL\\\", \\\"WDL\\\"\\\n          , \\\"NFL\\\", \\\"GALAXY\\\", \\\"SMK\\\", \\\"PLAIN_CWL\\\", \\\"PLAIN_WDL\\\", \\\"PLAIN_NFL\\\"\\\n          , \\\"PLAIN_GALAXY\\\", \\\"PLAIN_SMK\\\".\"\n        in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version for this particular tool registry,\\\n          \\ for example `v1`.\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      - description: \"A relative path to the additional file (same directory or subdirectories),\\\n          \\ for example 'foo.cwl' would return a 'foo.cwl' from the same directory\\\n          \\ as the main descriptor. 'nestedDirectory/foo.cwl' would return the file\\\n          \\  from a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl'\\\n          \\ should also be allowed.\"\n        in: path\n        name: relative_path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileWrapper'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/FileWrapper'\n          description: The tool descriptor.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool can not be output in the specified type.\n      security:\n      - BEARER: []\n      summary: Get additional tool descriptor files relative to the main file\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/files:\n    get:\n      description: \"Get a list of objects that contain the relative path and file\\\n        \\ type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path\\\n        \\ : .+} endpoint.\"\n      operationId: toolsIdVersionsVersionIdTypeFilesGet\n      parameters:\n      - description: \"The output type of the descriptor. Examples of allowable values\\\n          \\ are \\\"CWL\\\", \\\"WDL\\\", \\\"NFL\\\", \\\"GALAXY\\\", \\\"SMK\\\".\"\n        in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version for this particular tool registry,\\\n          \\ for example `v1`.\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolFile'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolFile'\n          description: The array of File JSON responses.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool can not be output in the specified type.\n      security:\n      - BEARER: []\n      summary: Get a list of objects that contain the relative path and file type\n      tags:\n      - GA4GHV20\n  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/tests:\n    get:\n      description: Get a list of test JSONs (these allow you to execute the tool successfully)\n        suitable for use with this descriptor type.\n      operationId: toolsIdVersionsVersionIdTypeTestsGet\n      parameters:\n      - description: \"The type of the underlying descriptor. Allowable values include\\\n          \\ \\\"CWL\\\", \\\"WDL\\\", \\\"NFL\\\", \\\"GALAXY\\\", \\\"SMK\\\", \\\"PLAIN_CWL\\\", \\\"PLAIN_WDL\\\"\\\n          , \\\"PLAIN_NFL\\\", \\\"PLAIN_GALAXY\\\", \\\"PLAIN_SMK\\\". For example, \\\"CWL\\\" would\\\n          \\ return an list of ToolTests objects while \\\"PLAIN_CWL\\\" would return a\\\n          \\ bare JSON list with the content of the tests.\"\n        in: path\n        name: type\n        required: true\n        schema:\n          type: string\n      - description: \"A unique identifier of the tool, scoped to this registry, for\\\n          \\ example `123456`.\"\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: \"An identifier of the tool version for this particular tool registry,\\\n          \\ for example `v1`.\"\n        in: path\n        name: version_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileWrapper'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileWrapper'\n          description: The tool test JSON response.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The tool can not be output in the specified type.\n      security:\n      - BEARER: []\n      summary: Get a list of test JSONs\n      tags:\n      - GA4GHV20\n  /lambdaEvents/{organization}:\n    get:\n      description: Get all of the Lambda Events for the given GitHub organization.\n      operationId: getLambdaEventsByOrganization\n      parameters:\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: offset\n        schema:\n          type: string\n          default: \"0\"\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 100\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LambdaEvent'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - lambdaEvents\n  /metadata/config.json:\n    get:\n      description: \"Configuration, NO authentication\"\n      operationId: getConfig\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n          description: default response\n      summary: Configuration for UI clients of the API\n      tags:\n      - metadata\n  /metadata/descriptorLanguageList:\n    get:\n      description: \"Get the list of descriptor languages supported on Dockstore, NO\\\n        \\ authentication\"\n      operationId: getDescriptorLanguages\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DescriptorLanguageBean'\n          description: List of descriptor languages\n      summary: Get the list of descriptor languages supported on Dockstore\n      tags:\n      - metadata\n  /metadata/dockerRegistryList:\n    get:\n      description: \"Get the list of docker registries supported on Dockstore, NO authentication\"\n      operationId: getDockerRegistries\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RegistryBean'\n          description: List of Docker registries\n      summary: Get the list of docker registries supported on Dockstore\n      tags:\n      - metadata\n  /metadata/elasticSearch:\n    get:\n      description: \"Successful response if elastic search is up and running, NO authentication\"\n      operationId: checkElasticSearch\n      responses:\n        default:\n          content:\n            text/html: {}\n            text/xml: {}\n          description: default response\n      summary: Successful response if elastic search is up and running\n      tags:\n      - metadata\n  /metadata/okHttpCachePerformance:\n    get:\n      description: \"Get measures of cache performance, NO authentication\"\n      operationId: getCachePerformance\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n          description: Cache performance information\n      summary: Get measures of cache performance\n      tags:\n      - metadata\n  /metadata/rss:\n    get:\n      description: \"List all published tools and workflows in creation order, NO authentication\"\n      operationId: rssFeed\n      responses:\n        default:\n          content:\n            text/xml:\n              schema:\n                type: string\n          description: default response\n      summary: List all published tools and workflows in creation order\n      tags:\n      - metadata\n  /metadata/runner_dependencies:\n    get:\n      description: \"Returns the file containing runner dependencies, NO authentication\"\n      operationId: getRunnerDependencies\n      parameters:\n      - description: The Dockstore client version\n        in: query\n        name: client_version\n        schema:\n          type: string\n      - description: \"Python version, only relevant for the cwltool runner\"\n        in: query\n        name: python_version\n        schema:\n          type: string\n          default: \"3\"\n      - description: The tool runner\n        in: query\n        name: runner\n        schema:\n          type: string\n          default: cwltool\n          enum:\n          - cwltool\n      - description: Response type\n        in: query\n        name: output\n        schema:\n          type: string\n          default: text\n          enum:\n          - json\n          - text\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: The requirements.txt file\n      summary: Returns the file containing runner dependencies\n      tags:\n      - metadata\n  /metadata/sitemap:\n    get:\n      description: \"List all available workflow, tool, organization, and collection\\\n        \\ paths. Available means published for tools/workflows, and approved for organizations\\\n        \\ and their respective collections. NO authentication\"\n      operationId: sitemap\n      responses:\n        default:\n          content:\n            text/html:\n              schema:\n                type: string\n            text/xml:\n              schema:\n                type: string\n          description: default response\n      summary: \"List all available workflow, tool, organization, and collection paths.\"\n      tags:\n      - metadata\n  /metadata/sourceControlList:\n    get:\n      description: \"Get the list of source controls supported on Dockstore, NO authentication\"\n      operationId: getSourceControlList\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceControlBean'\n          description: List of source control repositories\n      summary: Get the list of source controls supported on Dockstore\n      tags:\n      - metadata\n  /organizations:\n    get:\n      description: \"List all organizations that have been approved by a curator or\\\n        \\ admin, sorted by number of stars.\"\n      operationId: getApprovedOrganizations\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organization'\n          description: default response\n      summary: List all available organizations.\n      tags:\n      - organizations\n    post:\n      description: Create an organization. Organization requires approval by an admin\n        before being made public.\n      operationId: createOrganization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n        description: Organization to register.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Create an organization.\n      tags:\n      - organizations\n  /organizations/all:\n    get:\n      description: \"List all organizations, regardless of organization status. Admin/curator\\\n        \\ only.\"\n      operationId: getAllOrganizations\n      parameters:\n      - description: Filter to apply to organizations.\n        in: query\n        name: type\n        required: true\n        schema:\n          type: string\n          enum:\n          - all\n          - pending\n          - rejected\n          - approved\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: List all organizations.\n      tags:\n      - organizations\n  /organizations/collections/{alias}/aliases:\n    get:\n      description: Retrieve a collection by alias.\n      operationId: getCollectionByAlias\n      parameters:\n      - description: Alias of the collection.\n        in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      summary: Retrieve a collection by alias.\n      tags:\n      - organizations\n  /organizations/collections/{collectionId}/aliases:\n    post:\n      description: \"Aliases are alphanumerical (case-insensitive and may contain internal\\\n        \\ hyphens), given in a comma-delimited list.\"\n      operationId: addCollectionAliases\n      parameters:\n      - description: Collection to modify.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Comma-delimited list of aliases.\n        in: query\n        name: aliases\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: Successfully added alias to collection\n      security:\n      - bearer: []\n      summary: Add aliases linked to a collection in Dockstore.\n      tags:\n      - organizations\n  /organizations/name/{name}:\n    get:\n      description: Retrieve an organization by name. Supports optional authentication.\n      operationId: getOrganizationByName\n      parameters:\n      - description: Organization name.\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve an organization by name.\n      tags:\n      - organizations\n  /organizations/{alias}/aliases:\n    get:\n      description: Retrieve an organization by alias.\n      operationId: getOrganizationByAlias\n      parameters:\n      - description: Alias.\n        in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      summary: Retrieve an organization by alias.\n      tags:\n      - organizations\n  /organizations/{organizationId}:\n    delete:\n      description: Delete pending or rejected organization\n      operationId: deleteRejectedOrPendingOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: NO CONTENT\n        \"400\":\n          description: BAD REQUEST\n        \"403\":\n          description: FORBIDDEN\n      security:\n      - bearer: []\n      summary: Delete pending or rejected organization\n      tags:\n      - organizations\n    get:\n      description: Retrieve an organization by ID. Supports optional authentication.\n      operationId: getOrganizationById\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve an organization by ID.\n      tags:\n      - organizations\n    put:\n      description: \"Update an organization. Currently only name, display name, description,\\\n        \\ topic, email, link, avatarUrl, and location can be updated.\"\n      operationId: updateOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n        description: Organization to register.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/aliases:\n    post:\n      description: \"Add aliases linked to a listing in Dockstore. Aliases are alphanumerical\\\n        \\ (case-insensitive and may contain internal hyphens), given in a comma-delimited\\\n        \\ list.\"\n      operationId: addOrganizationAliases\n      parameters:\n      - description: Organization to modify.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Comma-delimited list of aliases.\n        in: query\n        name: aliases\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: Successfully created organization alias\n      security:\n      - bearer: []\n      summary: Add aliases linked to a listing in Dockstore.\n      tags:\n      - organizations\n  /organizations/{organizationId}/approve:\n    post:\n      description: Approve the organization with the given id. Admin/curator only.\n      operationId: approveOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Approve an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/collections:\n    get:\n      description: Retrieve all collections for an organization. Supports optional\n        authentication.\n      operationId: getCollectionsFromOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Included fields.\n        in: query\n        name: include\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve all collections for an organization.\n      tags:\n      - organizations\n    post:\n      description: Create a collection in the given organization.\n      operationId: createCollection\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n        description: Collection to register.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Create a collection in the given organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/collections/{collectionId}:\n    delete:\n      description: Delete a collection.\n      operationId: deleteCollection\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: Successfully deleted the collection\n        \"401\":\n          description: Unauthorized\n        \"404\":\n          description: Collection not found\n      security:\n      - bearer: []\n      summary: Delete a collection.\n      tags:\n      - organizations\n    get:\n      description: Retrieve a collection by ID. Supports optional authentication.\n      operationId: getCollectionById\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve a collection by ID.\n      tags:\n      - organizations\n    put:\n      description: \"Update a collection. Currently only name, display name, description,\\\n        \\ and topic can be updated.\"\n      operationId: updateCollection\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n        description: Collection to register.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update a collection.\n      tags:\n      - organizations\n  /organizations/{organizationId}/collections/{collectionId}/description:\n    get:\n      description: Retrieve a collection description by organization ID and collection\n        ID. Supports optional authentication.\n      operationId: getCollectionDescription\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve a collection description by organization ID and collection\n        ID.\n      tags:\n      - organizations\n    put:\n      description: Update a collection's description. Description in markdown.\n      operationId: updateCollectionDescription\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n        description: Collections's description in markdown.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update a collection's description.\n      tags:\n      - organizations\n  /organizations/{organizationId}/collections/{collectionId}/entry:\n    delete:\n      description: Delete an entry to a collection.\n      operationId: deleteEntryFromCollection\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Entry ID.\n        in: query\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Version ID.\n        in: query\n        name: versionId\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Delete an entry to a collection.\n      tags:\n      - organizations\n    post:\n      description: Add an entry to a collection.\n      operationId: addEntryToCollection\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Collection ID.\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Entry ID.\n        in: query\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Version ID.\n        in: query\n        name: versionId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Add an entry to a collection.\n      tags:\n      - organizations\n  /organizations/{organizationId}/description:\n    get:\n      description: Retrieve an organization description by organization ID. Supports\n        optional authentication.\n      operationId: getOrganizationDescription\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve an organization description by organization ID.\n      tags:\n      - organizations\n    put:\n      description: Update an organization's description. Expects description in markdown\n        format.\n      operationId: updateOrganizationDescription\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n        description: Organization's description in markdown.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update an organization's description.\n      tags:\n      - organizations\n  /organizations/{organizationId}/events:\n    get:\n      description: Retrieve all events for an organization. Supports optional authentication.\n      operationId: getOrganizationEvents\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: \"Start index of paging.  If this exceeds the current result set\\\n          \\ return an empty set.  If not specified in the request, this will start\\\n          \\ at the beginning of the results.\"\n        in: query\n        name: offset\n        required: true\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - description: \"Amount of records to return in a given page, limited to 100\"\n        in: query\n        name: limit\n        required: true\n        schema:\n          type: integer\n          format: int32\n          default: 100\n          maximum: 100\n          minimum: 1\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve all events for an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/invitation:\n    post:\n      description: \"Accept or reject an organization invitation. True accepts the\\\n        \\ invitation, false rejects the invitation.\"\n      operationId: acceptOrRejectInvitation\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Accept or reject.\n        in: query\n        name: accept\n        required: true\n        schema:\n          type: boolean\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      summary: Accept or reject an organization invitation.\n      tags:\n      - organizations\n  /organizations/{organizationId}/members:\n    get:\n      description: Retrieve all members for an organization. Supports optional authentication.\n      operationId: getOrganizationMembers\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizationUser'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve all members for an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/reject:\n    post:\n      description: Reject the organization with the given id. Admin/curator only.\n      operationId: rejectOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Reject an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/request:\n    post:\n      description: Re-request a review of the given organization. Requires the organization\n        to be rejected.\n      operationId: requestOrganizationReview\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n          description: default response\n      security:\n      - bearer: []\n      summary: Re-request an organization review.\n      tags:\n      - organizations\n  /organizations/{organizationId}/star:\n    put:\n      description: Star an organization.\n      operationId: starOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StarRequest'\n        description: StarRequest to star an organization for a user.\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      summary: Star an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/starredUsers:\n    get:\n      description: Return list of users who starred the given approved organization.\n      operationId: getStarredUsersForApprovedOrganization\n      parameters:\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n                uniqueItems: true\n          description: default response\n      summary: Return list of users who starred the given approved organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/user:\n    delete:\n      description: Remove a user from an organization.\n      operationId: deleteUserRole\n      parameters:\n      - description: User ID of user to add to organization.\n        in: query\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      summary: Remove a user from an organization.\n      tags:\n      - organizations\n    post:\n      description: Update a user role in an organization.\n      operationId: updateUserRole\n      parameters:\n      - description: Role of user.\n        in: query\n        name: role\n        required: true\n        schema:\n          type: string\n          enum:\n          - ADMIN\n          - MAINTAINER\n          - MEMBER\n      - description: User ID of user to add to organization.\n        in: query\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationUser'\n          description: default response\n      security:\n      - bearer: []\n      summary: Update a user role in an organization.\n      tags:\n      - organizations\n    put:\n      description: Add a user role to an organization.\n      operationId: addUserToOrg\n      parameters:\n      - description: Role of user.\n        in: query\n        name: role\n        required: true\n        schema:\n          type: string\n          enum:\n          - ADMIN\n          - MAINTAINER\n          - MEMBER\n      - description: User ID of user to add to organization.\n        in: query\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n        description: \"This is here to appease Swagger. It requires PUT methods to\\\n          \\ have a body, even if it is empty. Please leave it empty.\"\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationUser'\n          description: default response\n      security:\n      - bearer: []\n      summary: Add a user role to an organization.\n      tags:\n      - organizations\n  /organizations/{organizationId}/users/{username}:\n    put:\n      description: Add a user role to an organization.\n      operationId: addUserToOrgByUsername\n      parameters:\n      - description: User to add to org.\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - description: Organization ID.\n        in: path\n        name: organizationId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n              enum:\n              - MAINTAINER\n              - MEMBER\n        description: Role of user.\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationUser'\n          description: default response\n      security:\n      - bearer: []\n      summary: Add a user role to an organization.\n      tags:\n      - organizations\n  /organizations/{organizationName}/collections/{collectionName}/name:\n    get:\n      description: Retrieve a collection by name. Supports optional authentication.\n      operationId: getCollectionByName\n      parameters:\n      - description: Organization name.\n        in: path\n        name: organizationName\n        required: true\n        schema:\n          type: string\n      - description: Collection name.\n        in: path\n        name: collectionName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: default response\n      security:\n      - bearer: []\n      summary: Retrieve a collection by name.\n      tags:\n      - organizations\n  /toolTester/logs:\n    get:\n      operationId: getToolTesterLog\n      parameters:\n      - description: TRS Tool Id\n        example: '#workflow/github.com/dockstore/hello_world'\n        in: query\n        name: tool_id\n        required: true\n        schema:\n          type: string\n      - example: v1.0.0\n        in: query\n        name: tool_version_name\n        required: true\n        schema:\n          type: string\n      - example: hello_world.cwl.json\n        in: query\n        name: test_filename\n        required: true\n        schema:\n          type: string\n      - example: cwltool\n        in: query\n        name: runner\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: log_type\n        required: true\n        schema:\n          type: string\n          enum:\n          - FULL\n          - SUMMARY\n      - example: 1554477737092.log\n        in: query\n        name: filename\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: default response\n      summary: Get ToolTester log file\n      tags:\n      - toolTester\n  /toolTester/logs/search:\n    get:\n      operationId: search\n      parameters:\n      - description: TRS Tool Id\n        example: '#workflow/github.com/dockstore/hello_world'\n        in: query\n        name: tool_id\n        required: true\n        schema:\n          type: string\n      - example: v1.0.0\n        in: query\n        name: tool_version_name\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolTesterLog'\n          description: default response\n      summary: Search for ToolTester log files\n      tags:\n      - toolTester\n  /users/checkUser/{username}:\n    get:\n      description: Check if user with some username exists.\n      operationId: checkUserExists\n      parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: Boolean indicating if a user with the specified username exists\n        \"400\":\n          description: Bad request\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/dockerRegistries:\n    get:\n      description: Get all of the Docker registries accessible to the logged-in user.\n      operationId: getUserDockerRegistries\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/dockerRegistries/{dockerRegistry}/organizations:\n    get:\n      description: Get all of the organizations/namespaces of the Docker registry\n        accessible to the logged-in user.\n      operationId: getDockerRegistriesOrganization\n      parameters:\n      - description: Name of Docker registry\n        in: path\n        name: dockerRegistry\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/dockerRegistries/{dockerRegistry}/organizations/{organization}/repositories:\n    get:\n      description: Get names of repositories associated with a specific namespace\n        and Docker registry of the logged-in user.\n      operationId: getDockerRegistryOrganizationRepositories\n      parameters:\n      - description: Name of Docker registry\n        in: path\n        name: dockerRegistry\n        required: true\n        schema:\n          type: string\n      - description: Name of organization or namespace\n        in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/emails:\n    get:\n      description: Admin-only endpoint. Get the emails of all Dockstore users\n      operationId: getAllUserEmails\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserInfo'\n          description: A list of Dockstore users' emails.\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/github/events:\n    get:\n      description: Get all of the GitHub Events for the logged in user.\n      operationId: getUserGitHubEvents\n      parameters:\n      - in: query\n        name: offset\n        schema:\n          type: string\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 100\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LambdaEvent'\n          description: A list of GitHub Events for the logged in user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/github/organizations:\n    get:\n      description: Gets GitHub organizations for current user.\n      operationId: getMyGitHubOrgs\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceControlOrganization'\n          description: \"Descriptions of Github organizations (including but not limited\\\n            \\ to id, names)\"\n        \"400\":\n          description: Bad request\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/github/sync:\n    post:\n      description: Syncs Dockstore account with GitHub App Installations.\n      operationId: syncUserWithGitHub\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: Successfully synced Dockstore account with GitHub App installations\n        \"400\":\n          description: Bad request\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/registries:\n    get:\n      description: Get all of the git registries accessible to the logged in user.\n      operationId: getUserRegistries\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  enum:\n                  - dockstore.org\n                  - github.com\n                  - bitbucket.org\n                  - gitlab.com\n          description: A list of the git registries accessible to the logged in user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/registries/{gitRegistry}/organizations:\n    get:\n      description: Get all of the organizations for a given git registry accessible\n        to the logged in user.\n      operationId: getUserOrganizations\n      parameters:\n      - description: Git registry\n        in: path\n        name: gitRegistry\n        required: true\n        schema:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                uniqueItems: true\n          description: A list of organizations for a given git registry accessible\n            to the logged in user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/registries/{gitRegistry}/organizations/{organization}:\n    get:\n      description: Get all of the repositories for an organization for a given git\n        registry accessible to the logged in user.\n      operationId: getUserOrganizationRepositories\n      parameters:\n      - description: Git registry\n        in: path\n        name: gitRegistry\n        required: true\n        schema:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n      - description: Git organization\n        in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Repository'\n          description: A list of repositories for an organization for a given git\n            registry accessible to the logged in user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/starredOrganizations:\n    get:\n      description: Get the authenticated user's starred organizations.\n      operationId: getStarredOrganizations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organization'\n          description: A list of the authenticated user's starred organizations\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/starredServices:\n    get:\n      description: Get the authenticated user's starred services.\n      operationId: getStarredServices\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entry'\n          description: A list of the authenticated user's starred services\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/starredTools:\n    get:\n      description: Get the authenticated user's starred tools.\n      operationId: getStarredTools\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entry'\n          description: A list of the authenticated user's starred tools\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/starredWorkflows:\n    get:\n      description: Get the authenticated user's starred workflows.\n      operationId: getStarredWorkflows\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entry'\n          description: A list of the authenticated user's starred workflows\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/updateUserMetadata:\n    get:\n      description: Update metadata of all users.\n      operationId: updateUserMetadata\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n          description: Successfully updated metadata of all users\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user:\n    delete:\n      description: Delete user if possible.\n      operationId: selfDestruct\n      parameters:\n      - description: Optional user id if deleting another user. Only admins can delete\n          another user.\n        in: query\n        name: userId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: boolean\n          description: Boolean indicating if user was deleted successfully\n        \"400\":\n          description: Bad request\n        \"403\":\n          description: Forbidden\n        \"500\":\n          description: Internal server error\n      security:\n      - bearer: []\n      tags:\n      - users\n    get:\n      description: Get the logged-in user.\n      operationId: getUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: The logged-in user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/changeUsername:\n    post:\n      description: Change username if possible.\n      operationId: changeUsername\n      parameters:\n      - in: query\n        name: username\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: Successfully changed username\n        \"400\":\n          description: Bad request\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/extended:\n    get:\n      description: Get additional information about the authenticated user.\n      operationId: getExtendedUserData\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendedUserData'\n          description: Additional information about the authenticated user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/memberships:\n    get:\n      description: Get the logged-in user's memberships.\n      operationId: getUserMemberships\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizationUser'\n          description: A set of the logged-in user's memberships\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/updateAcceptedDocuments:\n    get:\n      description: Update the user's TOS and privacy policy to the latest versions.\n      operationId: updateAcceptedDocuments\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: User with updated TOS/Privacy Policy\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/updateUserMetadata:\n    get:\n      description: Update metadata for logged in user.\n      operationId: updateLoggedInUserMetadata\n      parameters:\n      - in: query\n        name: source\n        schema:\n          type: string\n          enum:\n          - quay.io\n          - github.com\n          - dockstore\n          - bitbucket.org\n          - gitlab.com\n          - zenodo.org\n          - google.com\n          - orcid.org\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: Successfully updated metadata for logged in user\n        \"403\":\n          description: Forbidden\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/{userId}/bannedStatus:\n    put:\n      description: Update banned status of user. Removes all tokens for banned users.\n      operationId: banUser\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: boolean\n        required: true\n      responses:\n        \"204\":\n          description: Successfully banned/unbanned user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/user/{userId}/limits:\n    get:\n      description: Returns the specified user's limits. ADMIN or CURATOR only\n      operationId: getUserLimits\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Limits'\n          description: A user's limits\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n    put:\n      description: Update the specified user's limits. ADMIN or CURATOR only\n      operationId: setUserLimits\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Limits'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Limits'\n          description: Successfully updated the user's limits\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/username/{username}:\n    get:\n      description: Get a user by username.\n      operationId: listUser\n      parameters:\n      - in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - description: \"Comma-delimited list of fields to include: userProfiles, ...\"\n        in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: A user with the specified username\n        \"400\":\n          description: Bad request\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/users/entries:\n    get:\n      description: \"Get all of the entries for a user, sorted by most recently updated.\"\n      operationId: getUserEntries\n      parameters:\n      - description: Maximum number of entries to return\n        in: query\n        name: count\n        schema:\n          type: integer\n          format: int32\n      - description: Filter paths with matching text\n        in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntryUpdateTime'\n          description: A list of the entries for a user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/users/organizations:\n    get:\n      description: \"Get all of the Dockstore organizations for a user, sorted by most\\\n        \\ recently updated.\"\n      operationId: getUserDockstoreOrganizations\n      parameters:\n      - description: Maximum number of organizations to return\n        in: query\n        name: count\n        schema:\n          type: integer\n          format: int32\n      - description: Filter paths with matching text\n        in: query\n        name: filter\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizationUpdateTime'\n          description: A list of the Dockstore organizations for a user\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}:\n    get:\n      description: Get user by id.\n      operationId: getSpecificUser\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: A user with the specified userId\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/appTools:\n    get:\n      description: List all appTools owned by the authenticated user.\n      operationId: userAppTools\n      parameters:\n      - description: User ID\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: A list of GitHub App tools owned by the user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/cloudInstances:\n    get:\n      description: Get all cloud instances belonging to the user\n      operationId: getUserCloudInstances\n      parameters:\n      - description: ID of user to get cloud instances for\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CloudInstance'\n          description: OK\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n    post:\n      description: Create a new cloud instance belonging to the user\n      operationId: postUserCloudInstance\n      parameters:\n      - description: ID of user to create the cloud instance for\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CloudInstance'\n        description: Cloud instance to add to the user\n        required: true\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/cloudInstances/{cloudInstanceId}:\n    delete:\n      description: Delete a cloud instance belonging to the user\n      operationId: deleteUserCloudInstance\n      parameters:\n      - description: ID of user to delete the cloud instance for\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: ID of cloud instance to update/delete\n        in: path\n        name: cloudInstanceId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n      security:\n      - bearer: []\n      tags:\n      - users\n    put:\n      description: Update a cloud instance belonging to the user\n      operationId: putUserCloudInstance\n      parameters:\n      - description: ID of user to update the cloud instance for\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: ID of cloud instance to update/delete\n        in: path\n        name: cloudInstanceId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CloudInstance'\n        description: Cloud instance to replace for a user\n        required: true\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/containers:\n    get:\n      description: List all tools owned by the authenticated user.\n      operationId: userContainers\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: A list of tools owned by the user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/containers/published:\n    get:\n      description: List all published tools from a user.\n      operationId: userPublishedContainers\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: A list of published tools from a user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/containers/{organization}/refresh:\n    get:\n      description: Refresh all tools owned by the authenticated user with specified\n        organization.\n      operationId: refreshToolsByOrganization\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: dockerRegistry\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockstoreTool'\n          description: A list of tools owned by the user with the specified organization\n        \"400\":\n          description: Bad request\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/privileges:\n    put:\n      description: \"Updates the provided userID to admin or curator status, usable\\\n        \\ by ADMINs only\"\n      operationId: setUserPrivileges\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PrivilegeRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: Successfully updated user to admin or curator status\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/services:\n    get:\n      description: List all services owned by the authenticated user.\n      operationId: userServices\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: A list of services owned by the user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/tokens:\n    get:\n      description: Get information about tokens with user id.\n      operationId: getUserTokens\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Token_User'\n          description: A list of tokens belonging to user specified by userId\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/workflows:\n    get:\n      description: List all workflows owned by the authenticated user.\n      operationId: userWorkflows\n      parameters:\n      - description: User ID\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: A list of workflows owned by the user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n    patch:\n      description: Adds the logged-in user to any Dockstore workflows that they should\n        have access to.\n      operationId: addUserToDockstoreWorkflows\n      parameters:\n      - description: User to update\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n        description: \"This is here to appease Swagger. It requires PATCH methods to\\\n          \\ have a body, even if it is empty. Please leave it empty.\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: Successfully added user to Dockstore workflows that they should\n            have access to\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /users/{userId}/workflows/published:\n    get:\n      description: List all published workflows from a user.\n      operationId: userPublishedWorkflows\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: A list of published workflows from a user\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: User not found\n      security:\n      - bearer: []\n      tags:\n      - users\n  /workflows/github:\n    delete:\n      description: Handles the deletion of a branch on GitHub. Will delete all workflow\n        versions that match in all workflows that share the same repository.\n      operationId: handleGitHubBranchDeletion\n      parameters:\n      - description: Repository path (ex. dockstore/dockstore-ui2)\n        in: query\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: Username of user on GitHub who triggered action\n        in: query\n        name: username\n        required: true\n        schema:\n          type: string\n      - description: Full git reference for a GitHub branch/tag. Ex. refs/heads/master\n          or refs/tags/v1.0\n        in: query\n        name: gitReference\n        required: true\n        schema:\n          type: string\n      - description: GitHub installation ID\n        in: query\n        name: installationId\n        required: true\n        schema:\n          type: string\n      responses:\n        \"418\":\n          description: This code tells AWS Lambda not to retry.\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/github/install:\n    post:\n      description: Handle the installation of our GitHub app onto a repository or\n        organization.\n      operationId: handleGitHubInstallation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                installationId:\n                  type: string\n                  description: GitHub installation ID\n                repositories:\n                  type: string\n                  description: Comma-separated repository paths (ex. dockstore/dockstore-ui2)\n                    for all repositories installed\n                username:\n                  type: string\n                  description: Username of user on GitHub who triggered action\n              required:\n              - installationId\n              - repositories\n              - username\n      responses:\n        \"418\":\n          description: This code tells AWS Lambda not to retry.\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/github/release:\n    post:\n      description: Handle a release of a repository on GitHub. Will create a workflow/service\n        and version when necessary.\n      operationId: handleGitHubRelease\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                gitReference:\n                  type: string\n                  description: Full git reference for a GitHub branch/tag. Ex. refs/heads/master\n                    or refs/tags/v1.0\n                installationId:\n                  type: string\n                  description: GitHub installation ID\n                repository:\n                  type: string\n                  description: Repository path (ex. dockstore/dockstore-ui2)\n                username:\n                  type: string\n                  description: Username of user on GitHub who triggered action\n              required:\n              - gitReference\n              - installationId\n              - repository\n              - username\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/hostedEntry:\n    post:\n      description: Create a hosted workflow.\n      operationId: createHostedWorkflow\n      parameters:\n      - in: query\n        name: registry\n        schema:\n          type: string\n      - in: query\n        name: name\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      - in: query\n        name: namespace\n        schema:\n          type: string\n      - in: query\n        name: entryName\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: Successfully created a hosted workflow.\n      security:\n      - bearer: []\n      tags:\n      - hosted\n  /workflows/hostedEntry/{entryId}:\n    delete:\n      description: Delete a revision of a hosted workflow.\n      operationId: deleteHostedWorkflowVersion\n      parameters:\n      - in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: version\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: Successfully deleted hosted entry version\n      security:\n      - bearer: []\n      tags:\n      - hosted\n    patch:\n      description: Non-idempotent operation for creating new revisions of hosted workflows\n      operationId: editHostedWorkflow\n      parameters:\n      - description: Entry to modify\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/SourceFile'\n              uniqueItems: true\n        description: \"Set of updated sourcefiles, add files by adding new files with\\\n          \\ unknown paths, delete files by including them with emptied content\"\n        required: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - hosted\n    post:\n      deprecated: true\n      operationId: addZip\n      parameters:\n      - description: hosted entry ID\n        in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: successful operation\n      security:\n      - bearer: []\n      summary: Creates a new revision of a hosted workflow from a zip\n      tags:\n      - hosted\n  /workflows/manualRegister:\n    post:\n      description: Manually register a workflow.\n      operationId: manualRegister\n      parameters:\n      - in: query\n        name: workflowRegistry\n        schema:\n          type: string\n      - in: query\n        name: workflowPath\n        schema:\n          type: string\n      - in: query\n        name: defaultWorkflowPath\n        schema:\n          type: string\n      - in: query\n        name: workflowName\n        schema:\n          type: string\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n      - in: query\n        name: defaultTestParameterFilePath\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/organization/{organization}/published:\n    get:\n      description: List all published workflows of an organization.\n      operationId: getPublishedWorkflowsByOrganization\n      parameters:\n      - in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: default response\n      tags:\n      - workflows\n  /workflows/path/entry/{repository}:\n    get:\n      description: Requires full path (including entry name if applicable).\n      operationId: getEntryByPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get an entry by path.\n      tags:\n      - workflows\n  /workflows/path/entry/{repository}/published:\n    get:\n      description: Requires full path (including entry name if applicable).\n      operationId: getPublishedEntryByPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: default response\n      summary: Get a published entry by path.\n      tags:\n      - workflows\n  /workflows/path/workflow/{repository}:\n    get:\n      description: Requires full path (including workflow name if applicable).\n      operationId: getWorkflowByPath\n      parameters:\n      - description: Repository path\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: \"Comma-delimited list of fields to include: versions, orcidputcodes,\\\n          \\ validations, aliases, images, authors, validations, aliases, images, authors\"\n        in: query\n        name: include\n        schema:\n          type: string\n      - description: Which Workflow subclass to retrieve.\n        in: query\n        name: subclass\n        required: true\n        schema:\n          $ref: '#/components/schemas/WorkflowSubClass'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get a workflow by path.\n      tags:\n      - workflows\n  /workflows/path/workflow/{repository}/actions:\n    get:\n      description: Gets all actions a user can perform on a workflow.\n      operationId: getWorkflowActions\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: Which Workflow subclass to retrieve.\n        in: query\n        name: subclass\n        required: true\n        schema:\n          $ref: '#/components/schemas/WorkflowSubClass'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  enum:\n                  - write\n                  - read\n                  - delete\n                  - share\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/path/workflow/{repository}/permissions:\n    delete:\n      description: Remove the specified user role for a workflow.\n      operationId: removeWorkflowRole\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: email\n        schema:\n          type: string\n      - in: query\n        name: role\n        schema:\n          type: string\n          enum:\n          - OWNER\n          - WRITER\n          - READER\n      - in: query\n        name: services\n        schema:\n          type: boolean\n          default: false\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    get:\n      description: Get all permissions for a workflow.\n      operationId: getWorkflowPermissions\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: services\n        schema:\n          type: boolean\n          default: false\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    patch:\n      description: Set the specified permission for a user on a workflow.\n      operationId: addWorkflowPermission\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: services\n        schema:\n          type: boolean\n          default: false\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Permission'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/path/workflow/{repository}/published:\n    get:\n      description: Does not require workflow name.\n      operationId: getPublishedWorkflowByPath\n      parameters:\n      - description: Repository path\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - description: \"Comma-delimited list of fields to include: versions, orcidputcodes,\\\n          \\ validations, aliases, images, authors, validations, aliases, images, authors\"\n        in: query\n        name: include\n        schema:\n          type: string\n      - description: Which Workflow subclass to retrieve.\n        in: query\n        name: subclass\n        required: true\n        schema:\n          $ref: '#/components/schemas/WorkflowSubClass'\n      - description: Version name\n        in: query\n        name: versionName\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      summary: Get a published workflow by path\n      tags:\n      - workflows\n  /workflows/path/{repository}:\n    get:\n      description: Do not include workflow name.\n      operationId: getAllWorkflowByPath\n      parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      summary: Get a list of workflows by path.\n      tags:\n      - workflows\n  /workflows/published:\n    get:\n      description: List all published workflows.\n      operationId: allPublishedWorkflows\n      parameters:\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: int32\n          default: 0\n      - in: query\n        name: limit\n        schema:\n          type: integer\n          format: int32\n          default: 100\n      - in: query\n        name: filter\n        schema:\n          type: string\n          default: \"\"\n      - in: query\n        name: sortCol\n        schema:\n          type: string\n          default: stars\n      - in: query\n        name: sortOrder\n        schema:\n          type: string\n          default: desc\n      - in: query\n        name: services\n        schema:\n          type: boolean\n          default: false\n      - in: query\n        name: subclass\n        schema:\n          $ref: '#/components/schemas/WorkflowSubClass'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Workflow'\n          description: default response\n      tags:\n      - workflows\n  /workflows/published/{workflowId}:\n    get:\n      description: Get a published workflow.\n      operationId: getPublishedWorkflow\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: \"Comma-delimited list of fields to include: versions, orcidputcodes,\\\n          \\ validations, aliases, images, authors, validations, aliases, images, authors\"\n        in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      tags:\n      - workflows\n  /workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}:\n    delete:\n      description: Delete a stubbed workflow for a registry and repository path.\n      operationId: deleteWorkflow\n      parameters:\n      - description: Git registry\n        in: path\n        name: gitRegistry\n        required: true\n        schema:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n      - description: Git repository organization\n        in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      - description: Git repository name\n        in: path\n        name: repositoryName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    post:\n      description: Adds a workflow for a registry and repository path with defaults\n        set.\n      operationId: addWorkflow\n      parameters:\n      - description: Git registry\n        in: path\n        name: gitRegistry\n        required: true\n        schema:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n      - description: Git repository organization\n        in: path\n        name: organization\n        required: true\n        schema:\n          type: string\n      - description: Git repository name\n        in: path\n        name: repositoryName\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BioWorkflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/shared:\n    get:\n      description: Retrieve all workflows shared with user.\n      operationId: sharedWorkflows\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SharedWorkflows'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/versions:\n    get:\n      description: List the versions for a published workflow.\n      operationId: tags_1\n      parameters:\n      - in: query\n        name: workflowId\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WorkflowVersion'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{alias}/aliases:\n    get:\n      description: Retrieves a workflow by alias.\n      operationId: getWorkflowByAlias\n      parameters:\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{entryId}/registerCheckerWorkflow/{descriptorType}:\n    post:\n      description: Register a checker workflow and associates it with the given tool/workflow.\n      operationId: registerCheckerWorkflow\n      parameters:\n      - in: query\n        name: checkerWorkflowPath\n        schema:\n          type: string\n      - in: query\n        name: testParameterPath\n        schema:\n          type: string\n      - in: path\n        name: entryId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: descriptorType\n        required: true\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}:\n    get:\n      description: Retrieve a workflow\n      operationId: getWorkflow\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: \"Comma-delimited list of fields to include: versions, orcidputcodes,\\\n          \\ validations, aliases, images, authors, validations, aliases, images, authors\"\n        in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    put:\n      description: Update the workflow with the given workflow.\n      operationId: updateWorkflow\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Workflow'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/dag/{workflowVersionId}:\n    get:\n      description: Get the DAG for a given workflow version.\n      operationId: getWorkflowDag\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/defaultVersion:\n    put:\n      description: Update the default version of a workflow.\n      operationId: updateDefaultVersion_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/descriptor/{relative-path}:\n    get:\n      description: Get the corresponding descriptor file from source control.\n      operationId: secondaryDescriptorPath_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: path\n        name: relative-path\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/descriptorType:\n    post:\n      description: \"Use with caution. This deletes all the workflowVersions, only\\\n        \\ use if there's nothing worth keeping in the workflow.\"\n      operationId: updateDescriptorType\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: descriptorType\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      summary: \"Changes the descriptor type of an unpublished, invalid workflow.\"\n      tags:\n      - workflows\n  /workflows/{workflowId}/labels:\n    put:\n      description: Update the labels linked to a workflow.\n      operationId: updateLabels_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: labels\n        schema:\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/primaryDescriptor:\n    get:\n      description: Get the primary descriptor file.\n      operationId: primaryDescriptor_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/publish:\n    post:\n      description: Publish or unpublish a workflow.\n      operationId: publish_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublishRequest'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/refresh:\n    get:\n      description: Refresh one particular workflow.\n      operationId: refresh_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: hardRefresh\n        schema:\n          type: boolean\n          default: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/refresh/{version}:\n    get:\n      description: Refresh one particular workflow version.\n      operationId: refreshVersion\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: version\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: hardRefresh\n        schema:\n          type: boolean\n          default: true\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/requestDOI/{workflowVersionId}:\n    put:\n      description: Request a DOI for this version of a workflow.\n      operationId: requestDOIForWorkflowVersion\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WorkflowVersion'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/resetVersionPaths:\n    put:\n      description: Reset the workflow paths.\n      operationId: updateWorkflowPath\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Workflow'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/restub:\n    get:\n      description: Restub a workflow\n      operationId: restub\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Workflow'\n          description: default response\n      security:\n      - bearer: []\n      summary: Restub a workflow\n      tags:\n      - workflows\n  /workflows/{workflowId}/secondaryDescriptors:\n    get:\n      description: Get the corresponding descriptor documents from source control.\n      operationId: secondaryDescriptors_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: tag\n        schema:\n          type: string\n      - in: query\n        name: language\n        schema:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/star:\n    put:\n      description: Star a workflow.\n      operationId: starEntry_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StarRequest'\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/starredUsers:\n    get:\n      description: Returns list of users who starred the given workflow.\n      operationId: getStarredUsers_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n                uniqueItems: true\n          description: default response\n      tags:\n      - workflows\n  /workflows/{workflowId}/testParameterFiles:\n    delete:\n      description: Delete test parameter files for a given version.\n      operationId: deleteTestParameterFiles_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: testParameterPaths\n        schema:\n          type: array\n          items:\n            type: string\n      - in: query\n        name: version\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    get:\n      description: Get the corresponding test parameter files.\n      operationId: getTestParameterFiles_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: version\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    put:\n      description: Add test parameter files for a given version.\n      operationId: addTestParameterFiles_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: query\n        name: testParameterPaths\n        schema:\n          type: array\n          items:\n            type: string\n      - in: query\n        name: version\n        schema:\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/tools/{workflowVersionId}:\n    get:\n      description: Get the Tools for a given workflow version.\n      operationId: getTableToolContent\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/users:\n    get:\n      description: Get users of a workflow.\n      operationId: getUsers_1\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/workflowVersions:\n    get:\n      description: Return first 200 versions in an entry\n      operationId: getWorkflowVersions\n      parameters:\n      - description: id of the worflow\n        in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WorkflowVersion'\n          description: Get list workflow versions in a workflow\n        \"400\":\n          description: Bad Request\n      security:\n      - bearer: []\n      tags:\n      - workflows\n    put:\n      description: Update the workflow versions linked to a workflow.\n      operationId: updateWorkflowVersion\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/WorkflowVersion'\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WorkflowVersion'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/workflowVersions/{workflowVersionId}:\n    get:\n      description: Retrieve a workflow version by ID\n      operationId: getWorkflowVersionById\n      parameters:\n      - description: id of the workflow\n        in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: id of the workflow version\n        in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: \"Comma-delimited list of fields to include: validations, aliases,\\\n          \\ images, authors\"\n        in: query\n        name: include\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkflowVersion'\n          description: Get a workflow version by ID\n        \"400\":\n          description: Bad Request\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/orcidAuthors:\n    get:\n      description: Retrieve ORCID author information for a workflow version\n      operationId: getWorkflowVersionOrcidAuthors\n      parameters:\n      - description: id of the workflow\n        in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: id of the workflow version\n        in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrcidAuthorInformation'\n          description: Retrieve ORCID author information for a workflow version\n        \"400\":\n          description: Bad Request\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/parsedInformation:\n    post:\n      description: Language parser calls this endpoint to update parsed information\n        for this version\n      operationId: postParsedInformation\n      parameters:\n      - description: Workflow to retrieve the version from.\n        in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Workflow version to retrieve the version from.\n        in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/LanguageParsingResponse'\n        description: Response from language parsing lambda\n        required: true\n      responses:\n        default:\n          content:\n            application/json: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles:\n    get:\n      description: Retrieve sourcefiles for an entry's version\n      operationId: getWorkflowVersionsSourcefiles\n      parameters:\n      - description: Workflow to retrieve the version from.\n        in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: Workflow version to retrieve the version from.\n        in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - description: List of file types to filter sourcefiles by\n        in: query\n        name: fileTypes\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - DOCKSTORE_SMK\n            - SMK_TEST_PARAMS\n            - DOCKSTORE_CWL\n            - CWL_TEST_JSON\n            - DOCKSTORE_WDL\n            - WDL_TEST_JSON\n            - DOCKERFILE\n            - NEXTFLOW\n            - NEXTFLOW_CONFIG\n            - NEXTFLOW_TEST_PARAMS\n            - DOCKSTORE_YML\n            - DOCKSTORE_SERVICE_YML\n            - DOCKSTORE_SERVICE_TEST_JSON\n            - DOCKSTORE_SERVICE_OTHER\n            - DOCKSTORE_GXFORMAT2\n            - GXFORMAT2_TEST_FILE\n            - DOCKSTORE_SWL\n            - SWL_TEST_JSON\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SourceFile'\n                uniqueItems: true\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\n  /workflows/{workflowId}/zip/{workflowVersionId}:\n    get:\n      description: Download a ZIP file of a workflow and all associated files.\n      operationId: getWorkflowZip\n      parameters:\n      - in: path\n        name: workflowId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - in: path\n        name: workflowVersionId\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          content:\n            application/zip: {}\n          description: default response\n      security:\n      - bearer: []\n      tags:\n      - workflows\ncomponents:\n  schemas:\n    Alias:\n      type: object\n      properties:\n        content:\n          type: string\n    AppTool:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Workflow'\n    Author:\n      type: object\n      properties:\n        affiliation:\n          type: string\n        email:\n          type: string\n        name:\n          type: string\n        role:\n          type: string\n    BioWorkflow:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Workflow'\n      - type: object\n        properties:\n          parent_id:\n            type: integer\n            format: int64\n    Category:\n      type: object\n      description: Category of entries\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n          description: Description of the collection\n        displayName:\n          type: string\n          maxLength: 50\n          minLength: 3\n          pattern: \"[\\\\w ,_\\\\-\u0026()']*\"\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/CollectionEntry'\n        id:\n          type: integer\n          format: int64\n          description: Implementation specific ID for the collection in this web service\n        name:\n          type: string\n          description: Name of the collection\n          example: alignment\n          maxLength: 39\n          minLength: 3\n          pattern: \"[a-zA-Z](-?[a-zA-Z\\\\d]){0,38}\"\n        organizationID:\n          type: integer\n          format: int64\n        organizationName:\n          type: string\n        toolsLength:\n          type: integer\n          format: int64\n          description: Number of tools inside this collection\n        topic:\n          type: string\n          description: Short description of the collection\n          example: A collection of alignment algorithms\n        workflowsLength:\n          type: integer\n          format: int64\n          description: Number of workflows inside this collection\n      required:\n      - name\n      - topic\n    CategorySummary:\n      type: object\n      properties:\n        description:\n          type: string\n        displayName:\n          type: string\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        topic:\n          type: string\n    Checksum:\n      type: object\n      description: The checksum value and its type\n      example:\n      - checksum: 77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182\n        type: sha256\n      properties:\n        checksum:\n          type: string\n          description: 'The hex-string encoded checksum for the data. '\n        type:\n          type: string\n          description: \"The digest method used to create the checksum. The value (e.g.\\\n            \\ `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH\\\n            \\ Checksum Hash Algorithm Registry]. Other values MAY be used, as long\\\n            \\ as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].\\\n            \\ GA4GH may provide more explicit guidance for use of non-IANA-registered\\\n            \\ algorithms in the future.\"\n      required:\n      - checksum\n      - type\n    CloudInstance:\n      type: object\n      properties:\n        displayName:\n          type: string\n        id:\n          type: integer\n          format: int64\n        partner:\n          type: string\n          enum:\n          - GALAXY\n          - TERRA\n          - DNA_STACK\n          - DNA_NEXUS\n          - CGC\n          - NHLBI_BIODATA_CATALYST\n          - ANVIL\n          - CAVATICA\n          - NEXTFLOW_TOWER\n        supportedLanguages:\n          type: array\n          items:\n            $ref: '#/components/schemas/Language'\n          uniqueItems: true\n        supportsFileImports:\n          type: boolean\n        supportsHttpImports:\n          type: boolean\n        url:\n          type: string\n    Collection:\n      type: object\n      description: \"Collection in an organization, collects entries\"\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n          description: Description of the collection\n        displayName:\n          type: string\n          maxLength: 50\n          minLength: 3\n          pattern: \"[\\\\w ,_\\\\-\u0026()']*\"\n        id:\n          type: integer\n          format: int64\n          description: Implementation specific ID for the collection in this web service\n        name:\n          type: string\n          description: Name of the collection\n          example: alignment\n          maxLength: 39\n          minLength: 3\n          pattern: \"[a-zA-Z](-?[a-zA-Z\\\\d]){0,38}\"\n        organizationID:\n          type: integer\n          format: int64\n        organizationName:\n          type: string\n        toolsLength:\n          type: integer\n          format: int64\n          description: Number of tools inside this collection\n        topic:\n          type: string\n          description: Short description of the collection\n          example: A collection of alignment algorithms\n        workflowsLength:\n          type: integer\n          format: int64\n          description: Number of workflows inside this collection\n      required:\n      - name\n      - topic\n    CollectionEntry:\n      type: object\n      properties:\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/CategorySummary'\n        dbUpdateDate:\n          type: integer\n          format: int64\n        descriptorTypes:\n          type: array\n          items:\n            type: string\n        entryPath:\n          type: string\n        entryType:\n          type: string\n        id:\n          type: integer\n          format: int64\n        labels:\n          type: array\n          items:\n            type: string\n        verified:\n          type: boolean\n        versionName:\n          type: string\n    CollectionOrganization:\n      type: object\n      properties:\n        collectionDisplayName:\n          type: string\n        collectionId:\n          type: integer\n          format: int64\n        collectionName:\n          type: string\n        organizationAvatarUrl:\n          type: string\n        organizationDisplayName:\n          type: string\n        organizationId:\n          type: integer\n          format: int64\n        organizationName:\n          type: string\n    Config:\n      type: object\n      properties:\n        bdCatalystSevenBridgesImportUrl:\n          type: string\n        bdCatalystTerraImportUrl:\n          type: string\n        bitBucketAuthUrl:\n          type: string\n        bitBucketClientId:\n          type: string\n        checkUrlLambdaVersion:\n          type: string\n        composeSetupVersion:\n          type: string\n        cwlParsingLambdaVersion:\n          type: string\n        cwlVisualizerUri:\n          type: string\n        deployVersion:\n          type: string\n        discourseUrl:\n          type: string\n        dnaNexusImportUrl:\n          type: string\n        dnaStackImportUrl:\n          type: string\n        documentationUrl:\n          type: string\n        featuredContentUrl:\n          type: string\n        featuredNewsUrl:\n          type: string\n        galaxyParsingPluginVersion:\n          type: string\n        gitBuildVersion:\n          type: string\n        gitCommitId:\n          type: string\n        gitHubAppInstallationUrl:\n          type: string\n        gitHubAuthUrl:\n          type: string\n        gitHubRedirectPath:\n          type: string\n        gitHubScope:\n          type: string\n        githubClientId:\n          type: string\n        gitlabAuthUrl:\n          type: string\n        gitlabClientId:\n          type: string\n        gitlabRedirectPath:\n          type: string\n        gitlabScope:\n          type: string\n        googleClientId:\n          type: string\n        googleScope:\n          type: string\n        nextflowParsingLambdaVersion:\n          type: string\n        orcidAuthUrl:\n          type: string\n        orcidClientId:\n          type: string\n        orcidRedirectPath:\n          type: string\n        orcidScope:\n          type: string\n        quayIoAuthUrl:\n          type: string\n        quayIoClientId:\n          type: string\n        quayIoRedirectPath:\n          type: string\n        quayIoScope:\n          type: string\n        tagManagerId:\n          type: string\n        terraImportUrl:\n          type: string\n        wdlParsingLambdaVersion:\n          type: string\n        zenodoAuthUrl:\n          type: string\n        zenodoClientId:\n          type: string\n        zenodoRedirectPath:\n          type: string\n        zenodoScope:\n          type: string\n    DescriptionMetrics:\n      type: object\n      properties:\n        calculatedEntropy:\n          type: integer\n          format: int64\n        calculatedWordCount:\n          type: integer\n          format: int64\n        descriptionLength:\n          type: integer\n          format: int64\n    DescriptorLanguageBean:\n      type: object\n      properties:\n        friendlyName:\n          type: string\n        value:\n          type: string\n    DockstoreTool:\n      type: object\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        author:\n          type: string\n        checker_id:\n          type: integer\n          format: int64\n        conceptDoi:\n          type: string\n        custom_docker_registry_path:\n          type: string\n        customerDockerRegistryPath:\n          type: string\n          writeOnly: true\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        defaultCWLTestParameterFile:\n          type: string\n        defaultVersion:\n          type: string\n        defaultWDLTestParameterFile:\n          type: string\n        default_cwl_path:\n          type: string\n        default_dockerfile_path:\n          type: string\n        default_wdl_path:\n          type: string\n        description:\n          type: string\n        descriptorType:\n          type: array\n          items:\n            type: string\n        email:\n          type: string\n        forumUrl:\n          type: string\n          maxLength: 256\n          minLength: 0\n        gitUrl:\n          type: string\n        has_checker:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        is_published:\n          type: boolean\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n          uniqueItems: true\n        lastBuild:\n          type: string\n          format: date-time\n        lastUpdated:\n          type: integer\n          format: int64\n        last_modified:\n          type: integer\n          format: int32\n        last_modified_date:\n          type: integer\n          format: int64\n        licenseInformation:\n          $ref: '#/components/schemas/LicenseInformation'\n        metadataFromEntry:\n          $ref: '#/components/schemas/DockstoreTool'\n        metadataFromVersion:\n          $ref: '#/components/schemas/Version'\n        mode:\n          type: string\n          enum:\n          - AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS\n          - AUTO_DETECT_QUAY_TAGS_WITH_MIXED\n          - MANUAL_IMAGE_PATH\n          - HOSTED\n        name:\n          type: string\n        namespace:\n          type: string\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        path:\n          type: string\n        private_access:\n          type: boolean\n        registry:\n          type: string\n          enum:\n          - QUAY_IO\n          - DOCKER_HUB\n          - GITLAB\n          - AMAZON_ECR\n          - SEVEN_BRIDGES\n          - GITHUB_CONTAINER_REGISTRY\n        registry_string:\n          type: string\n        starredUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          uniqueItems: true\n        tool_maintainer_email:\n          type: string\n        tool_path:\n          type: string\n        toolname:\n          type: string\n        topic:\n          type: string\n        topicAutomatic:\n          type: string\n          description: Short description of the entry gotten automatically\n        topicId:\n          type: integer\n          format: int64\n        topicManual:\n          type: string\n          description: Short description of the entry manually updated\n        topicSelection:\n          type: string\n          description: Which topic to display to the public users\n          enum:\n          - AUTOMATIC\n          - MANUAL\n        userIdToOrcidPutCode:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrcidPutCode'\n          description: The presence of the put code for a userid indicates the entry\n            was exported to ORCID for the corresponding Dockstore user.\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        workflowVersions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          uniqueItems: true\n    Entry:\n      type: object\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        author:\n          type: string\n        checker_id:\n          type: integer\n          format: int64\n        conceptDoi:\n          type: string\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        defaultVersion:\n          type: string\n        description:\n          type: string\n        email:\n          type: string\n        gitUrl:\n          type: string\n        has_checker:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        is_published:\n          type: boolean\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n          uniqueItems: true\n        lastUpdated:\n          type: integer\n          format: int64\n        last_modified:\n          type: integer\n          format: int32\n        last_modified_date:\n          type: integer\n          format: int64\n        licenseInformation:\n          $ref: '#/components/schemas/LicenseInformation'\n        metadataFromEntry:\n          $ref: '#/components/schemas/Entry'\n        metadataFromVersion:\n          $ref: '#/components/schemas/Version'\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        starredUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        topic:\n          type: string\n        topicAutomatic:\n          type: string\n          description: Short description of the entry gotten automatically\n        topicId:\n          type: integer\n          format: int64\n        topicManual:\n          type: string\n          description: Short description of the entry manually updated\n        topicSelection:\n          type: string\n          description: Which topic to display to the public users\n          enum:\n          - AUTOMATIC\n          - MANUAL\n        userIdToOrcidPutCode:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrcidPutCode'\n          description: The presence of the put code for a userid indicates the entry\n            was exported to ORCID for the corresponding Dockstore user.\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        workflowVersions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Version'\n          uniqueItems: true\n    EntryObjectObject:\n      type: object\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        author:\n          type: string\n        checker_id:\n          type: integer\n          format: int64\n        conceptDoi:\n          type: string\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        defaultVersion:\n          type: string\n        description:\n          type: string\n        email:\n          type: string\n        gitUrl:\n          type: string\n        has_checker:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        is_published:\n          type: boolean\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n          uniqueItems: true\n        lastUpdated:\n          type: integer\n          format: int64\n        last_modified:\n          type: integer\n          format: int32\n        last_modified_date:\n          type: integer\n          format: int64\n        licenseInformation:\n          $ref: '#/components/schemas/LicenseInformation'\n        metadataFromEntry:\n          type: object\n          writeOnly: true\n        metadataFromVersion:\n          $ref: '#/components/schemas/Version'\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        starredUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        topic:\n          type: string\n        topicAutomatic:\n          type: string\n          description: Short description of the entry gotten automatically\n        topicId:\n          type: integer\n          format: int64\n        topicManual:\n          type: string\n          description: Short description of the entry manually updated\n        topicSelection:\n          type: string\n          description: Which topic to display to the public users\n          enum:\n          - AUTOMATIC\n          - MANUAL\n        userIdToOrcidPutCode:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrcidPutCode'\n          description: The presence of the put code for a userid indicates the entry\n            was exported to ORCID for the corresponding Dockstore user.\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        workflowVersions:\n          type: array\n          items:\n            type: object\n          uniqueItems: true\n    EntryUpdateTime:\n      type: object\n      properties:\n        entryType:\n          type: string\n          enum:\n          - TOOL\n          - WORKFLOW\n          - SERVICE\n          - APPTOOL\n        lastUpdateDate:\n          type: integer\n          format: int64\n        path:\n          type: string\n        prettyPath:\n          type: string\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n      required:\n      - code\n    Event:\n      type: object\n      properties:\n        apptool:\n          $ref: '#/components/schemas/AppTool'\n        collection:\n          $ref: '#/components/schemas/Collection'\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int64\n        initiatorUser:\n          $ref: '#/components/schemas/User'\n        organization:\n          $ref: '#/components/schemas/Organization'\n        tool:\n          $ref: '#/components/schemas/DockstoreTool'\n        type:\n          type: string\n          enum:\n          - CREATE_ORG\n          - DELETE_ORG\n          - MODIFY_ORG\n          - APPROVE_ORG\n          - REJECT_ORG\n          - REREQUEST_ORG\n          - ADD_USER_TO_ORG\n          - REMOVE_USER_FROM_ORG\n          - MODIFY_USER_ROLE_ORG\n          - APPROVE_ORG_INVITE\n          - REJECT_ORG_INVITE\n          - CREATE_COLLECTION\n          - MODIFY_COLLECTION\n          - DELETE_COLLECTION\n          - REMOVE_FROM_COLLECTION\n          - ADD_TO_COLLECTION\n          - ADD_VERSION_TO_ENTRY\n          - PUBLISH_ENTRY\n          - UNPUBLISH_ENTRY\n        user:\n          $ref: '#/components/schemas/User'\n        version:\n          $ref: '#/components/schemas/Version'\n        workflow:\n          $ref: '#/components/schemas/Workflow'\n    ExtendedUserData:\n      type: object\n      properties:\n        canChangeUsername:\n          type: boolean\n    FileFormat:\n      type: object\n      properties:\n        value:\n          type: string\n    FileWrapper:\n      type: object\n      description: 'A file provides content for one of - A tool descriptor is a metadata\n        document that describes one or more tools. - A tool document that describes\n        how to test with one or more sample test JSON. - A containerfile is a document\n        that describes how to build a particular container image. Examples include\n        Dockerfiles for creating Docker images and Singularity recipes for Singularity\n        images '\n      properties:\n        checksum:\n          type: array\n          description: \"A production (immutable) tool version is required to have\\\n            \\ a hashcode. Not required otherwise, but might be useful to detect changes. \"\n          example:\n          - checksum: 77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182\n            type: sha256\n          items:\n            $ref: '#/components/schemas/Checksum'\n        content:\n          type: string\n          description: The content of the file itself. One of url or content is required.\n        url:\n          type: string\n          description: \"Optional url to the underlying content, should include version\\\n            \\ information, and can include a git hash.  Note that this URL should\\\n            \\ resolve to the raw unwrapped content that would otherwise be available\\\n            \\ in content. One of url or content is required.\"\n    Image:\n      type: object\n      properties:\n        architecture:\n          type: string\n        checksums:\n          type: array\n          items:\n            $ref: '#/components/schemas/Checksum'\n        dbUpdateDate:\n          type: string\n          format: date-time\n        imageID:\n          type: string\n        imageRegistry:\n          type: string\n          enum:\n          - QUAY_IO\n          - DOCKER_HUB\n          - GITLAB\n          - AMAZON_ECR\n          - SEVEN_BRIDGES\n          - GITHUB_CONTAINER_REGISTRY\n        imageUpdateDate:\n          type: string\n        os:\n          type: string\n        repository:\n          type: string\n        size:\n          type: integer\n          format: int64\n        specifier:\n          type: string\n          enum:\n          - PARAMETER\n          - NO_TAG\n          - LATEST\n          - TAG\n          - DIGEST\n        tag:\n          type: string\n    ImageData:\n      type: object\n      description: Describes one container image.\n      properties:\n        checksum:\n          type: array\n          description: \"A production (immutable) tool version is required to have\\\n            \\ a hashcode. Not required otherwise, but might be useful to detect changes.\\\n            \\  This exposes the hashcode for specific image versions to verify that\\\n            \\ the container version pulled is actually the version that was indexed\\\n            \\ by the registry.\"\n          example:\n          - checksum: 77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182\n            type: sha256\n          items:\n            $ref: '#/components/schemas/Checksum'\n        image_name:\n          type: string\n          description: Used in conjunction with a registry_url if provided to locate\n            images.\n        image_type:\n          type: string\n          enum:\n          - Docker\n          - Singularity\n          - Conda\n        registry_host:\n          type: string\n          description: A docker registry or a URL to a Singularity registry. Used\n            along with image_name to locate a specific image.\n        size:\n          type: integer\n          format: int64\n          description: Size of the container in bytes.\n        updated:\n          type: string\n          description: Last time the container was updated.\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        value:\n          type: string\n    LambdaEvent:\n      type: object\n      properties:\n        eventDate:\n          type: integer\n          format: int64\n        githubUsername:\n          type: string\n        id:\n          type: integer\n          format: int64\n        message:\n          type: string\n        organization:\n          type: string\n        reference:\n          type: string\n        repository:\n          type: string\n        success:\n          type: boolean\n        type:\n          type: string\n          enum:\n          - PUSH\n          - DELETE\n          - INSTALL\n          - PUBLISH\n    Language:\n      type: object\n      properties:\n        language:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n        version:\n          type: string\n    LanguageParsingRequest:\n      type: object\n      description: Request sent to the external language parsing service\n      properties:\n        branch:\n          type: string\n          description: The Git branch/tag\n        descriptorLanguage:\n          type: string\n          description: The language of the workflow\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n        descriptorRelativePathInGit:\n          type: string\n          description: The relative path to the primary descriptor (relative to the\n            base in Git)\n        entryId:\n          type: integer\n          format: int64\n          description: Id of the Dockstore entry\n        sourceFiles:\n          type: array\n          description: List of SourceFiles that will be required for parsing hosted\n            entries from Dockstore\n          items:\n            $ref: '#/components/schemas/SourceFile'\n        uri:\n          type: string\n          description: The Git URI\n        versionId:\n          type: integer\n          format: int64\n          description: Id of the Dockstore entry's workflowVersion\n      required:\n      - branch\n      - descriptorRelativePathInGit\n      - entryId\n      - uri\n      - versionId\n    LanguageParsingResponse:\n      type: object\n      description: Response from the external lambda parsing service\n      properties:\n        author:\n          type: string\n          description: Author found from parsing the version (may possibly be different\n            from what will be stored in Dockstore)\n        clonedRepositoryAbsolutePath:\n          type: string\n        description:\n          type: string\n          description: Description found from parsing the version (may possibly be\n            different from what will be stored in Dockstore)\n        email:\n          type: string\n          description: Email found from parsing the version (may possibly be different\n            from what will be stored in Dockstore)\n        languageParsingRequest:\n          $ref: '#/components/schemas/LanguageParsingRequest'\n        orcidID:\n          type: string\n          description: ORCID ID found from parsing the version (may possibly be different\n            from what will be stored in Dockstore)\n        parsedInformation:\n          $ref: '#/components/schemas/ParsedInformation'\n        secondaryFilePaths:\n          type: array\n          items:\n            type: string\n        sourceFiles:\n          type: array\n          description: List of SourceFiles returned after parsing a non-hosted entry\n          items:\n            $ref: '#/components/schemas/SourceFile'\n        versionTypeValidation:\n          $ref: '#/components/schemas/VersionTypeValidation'\n    LicenseInformation:\n      type: object\n      properties:\n        licenseName:\n          type: string\n    Limits:\n      type: object\n      properties:\n        hostedEntryCountLimit:\n          type: integer\n          format: int32\n        hostedEntryVersionLimit:\n          type: integer\n          format: int32\n    Notification:\n      type: object\n      properties:\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        expiration:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int64\n        message:\n          type: string\n          maxLength: 1024\n          minLength: 0\n        priority:\n          type: string\n          enum:\n          - LOW\n          - MEDIUM\n          - CRITICAL\n        type:\n          type: string\n          enum:\n          - SITEWIDE\n          - NEWSBODY\n    OrcidAuthor:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        orcid:\n          type: string\n    OrcidAuthorInformation:\n      type: object\n      properties:\n        affiliation:\n          type: string\n        email:\n          type: string\n        name:\n          type: string\n        orcid:\n          type: string\n        role:\n          type: string\n    OrcidPutCode:\n      type: object\n      description: An ORCID put code uniquely identifies a work on ORCID\n      properties:\n        orcidPutCode:\n          type: string\n    Organization:\n      type: object\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        avatarUrl:\n          type: string\n          pattern: \"([^\\\\s]+)(\\\\.jpg|\\\\.jpeg|\\\\.png|\\\\.gif)\"\n        categorizer:\n          type: boolean\n        collectionsLength:\n          type: integer\n          format: int64\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n        displayName:\n          type: string\n          maxLength: 50\n          minLength: 3\n          pattern: \"[\\\\w ,_\\\\-\u0026()']*\"\n        email:\n          type: string\n        id:\n          type: integer\n          format: int64\n        link:\n          type: string\n        location:\n          type: string\n        name:\n          type: string\n          maxLength: 39\n          minLength: 3\n          pattern: \"[a-zA-Z][a-zA-Z\\\\d]*\"\n        starredUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        status:\n          type: string\n          enum:\n          - PENDING\n          - REJECTED\n          - APPROVED\n          - HIDDEN\n        topic:\n          type: string\n    OrganizationUpdateTime:\n      type: object\n      properties:\n        displayName:\n          type: string\n        lastUpdateDate:\n          type: integer\n          format: int64\n        name:\n          type: string\n    OrganizationUser:\n      type: object\n      properties:\n        accepted:\n          type: boolean\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        id:\n          $ref: '#/components/schemas/OrganizationUserId'\n        organization:\n          $ref: '#/components/schemas/Organization'\n        role:\n          type: string\n          enum:\n          - ADMIN\n          - MAINTAINER\n          - MEMBER\n        user:\n          $ref: '#/components/schemas/User'\n    OrganizationUserId:\n      type: object\n      properties:\n        organizationId:\n          type: integer\n          format: int64\n        userId:\n          type: integer\n          format: int64\n    ParsedInformation:\n      type: object\n      properties:\n        descriptorLanguage:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n        hasHTTPImports:\n          type: boolean\n        hasLocalImports:\n          type: boolean\n    Permission:\n      type: object\n      properties:\n        email:\n          type: string\n        role:\n          type: string\n          enum:\n          - OWNER\n          - WRITER\n          - READER\n    PrivilegeRequest:\n      type: object\n      properties:\n        admin:\n          type: boolean\n        curator:\n          type: boolean\n    Profile:\n      type: object\n      properties:\n        avatarURL:\n          type: string\n        bio:\n          type: string\n        company:\n          type: string\n        email:\n          type: string\n        link:\n          type: string\n        location:\n          type: string\n        name:\n          type: string\n        username:\n          type: string\n    PublishRequest:\n      type: object\n      properties:\n        publish:\n          type: boolean\n    RegistryBean:\n      type: object\n      properties:\n        customDockerPath:\n          type: string\n        dockerPath:\n          type: string\n        enum:\n          type: string\n        friendlyName:\n          type: string\n        privateOnly:\n          type: string\n        url:\n          type: string\n    Repository:\n      type: object\n      properties:\n        canDelete:\n          type: boolean\n        gitRegistry:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n        organization:\n          type: string\n        path:\n          type: string\n        present:\n          type: boolean\n        repositoryName:\n          type: string\n    Service:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/Workflow'\n    ServiceType:\n      type: object\n      description: Type of a GA4GH service\n      properties:\n        artifact:\n          type: string\n          description: Name of the API or GA4GH specification implemented. Official\n            GA4GH types should be assigned as part of standards approval process.\n            Custom artifacts are supported.\n          example: beacon\n        group:\n          type: string\n          description: \"Namespace in reverse domain name format. Use `org.ga4gh` for\\\n            \\ implementations compliant with official GA4GH specifications. For services\\\n            \\ with custom APIs not standardized by GA4GH, or implementations diverging\\\n            \\ from official GA4GH specifications, use a different namespace (e.g.\\\n            \\ your organization's reverse domain name).\"\n          example: org.ga4gh\n        version:\n          type: string\n          description: Version of the API or specification. GA4GH specifications use\n            semantic versioning.\n          example: 1.0.0\n      required:\n      - artifact\n      - group\n      - version\n    SharedWorkflows:\n      type: object\n      properties:\n        role:\n          type: string\n          enum:\n          - OWNER\n          - WRITER\n          - READER\n        workflows:\n          type: array\n          items:\n            $ref: '#/components/schemas/Workflow'\n    SourceControlBean:\n      type: object\n      properties:\n        friendlyName:\n          type: string\n        value:\n          type: string\n    SourceControlOrganization:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    SourceFile:\n      type: object\n      properties:\n        absolutePath:\n          type: string\n          description: Absolute path of sourcefile in git repo\n        checksums:\n          type: array\n          items:\n            $ref: '#/components/schemas/Checksum'\n        content:\n          type: string\n        frozen:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        path:\n          type: string\n          description: Path to sourcefile relative to its parent\n        type:\n          type: string\n          description: Enumerates the type of file\n          enum:\n          - DOCKSTORE_SMK\n          - SMK_TEST_PARAMS\n          - DOCKSTORE_CWL\n          - CWL_TEST_JSON\n          - DOCKSTORE_WDL\n          - WDL_TEST_JSON\n          - DOCKERFILE\n          - NEXTFLOW\n          - NEXTFLOW_CONFIG\n          - NEXTFLOW_TEST_PARAMS\n          - DOCKSTORE_YML\n          - DOCKSTORE_SERVICE_YML\n          - DOCKSTORE_SERVICE_TEST_JSON\n          - DOCKSTORE_SERVICE_OTHER\n          - DOCKSTORE_GXFORMAT2\n          - GXFORMAT2_TEST_FILE\n          - DOCKSTORE_SWL\n          - SWL_TEST_JSON\n        verifiedBySource:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/VerificationInformation'\n      required:\n      - absolutePath\n      - path\n      - type\n    StarRequest:\n      type: object\n      properties:\n        star:\n          type: boolean\n    TRSService:\n      type: object\n      description: GA4GH service\n      properties:\n        contactUrl:\n          type: string\n          description: \"URL of the contact for the provider of this service, e.g.\\\n            \\ a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).\"\n          example: mailto:support@example.com\n        createdAt:\n          type: string\n          format: date-time\n          description: Timestamp describing when the service was first deployed and\n            available (RFC 3339 format)\n          example: 2019-06-04T12:58:19Z\n        description:\n          type: string\n          description: Description of the service. Should be human readable and provide\n            information about the service.\n          example: This service provides...\n        documentationUrl:\n          type: string\n          description: \"URL of the documentation of this service (RFC 3986 format).\\\n            \\ This should help someone learn how to use your service, including any\\\n            \\ specifics required to access data, e.g. authentication.\"\n          example: https://docs.myservice.example.com\n        environment:\n          type: string\n          description: \"Environment the service is running in. Use this to distinguish\\\n            \\ between production, development and testing/staging deployments. Suggested\\\n            \\ values are prod, test, dev, staging. However this is advised and not\\\n            \\ enforced.\"\n          example: test\n        id:\n          type: string\n          description: \"Unique ID of this service. Reverse domain name notation is\\\n            \\ recommended, though not required. The identifier should attempt to be\\\n            \\ globally unique so it can be used in downstream aggregator services\\\n            \\ e.g. Service Registry.\"\n          example: org.ga4gh.myservice\n        name:\n          type: string\n          description: Name of this service. Should be human readable.\n          example: My project\n        organization:\n          $ref: '#/components/schemas/TRSServiceOrganization'\n        type:\n          $ref: '#/components/schemas/ServiceType'\n        updatedAt:\n          type: string\n          format: date-time\n          description: Timestamp describing when the service was last updated (RFC\n            3339 format)\n          example: 2019-06-04T12:58:19Z\n        version:\n          type: string\n          description: \"Version of the service being described. Semantic versioning\\\n            \\ is recommended, but other identifiers, such as dates or commit hashes,\\\n            \\ are also allowed. The version should be changed whenever the service\\\n            \\ is updated.\"\n          example: 1.0.0\n      required:\n      - id\n      - name\n      - organization\n      - type\n      - version\n    TRSServiceOrganization:\n      type: object\n      description: Organization providing the service\n      properties:\n        name:\n          type: string\n          description: Name of the organization responsible for the service\n          example: My organization\n        url:\n          type: string\n          description: URL of the website of the organization (RFC 3986 format)\n          example: https://example.com\n      required:\n      - name\n      - url\n    Tag:\n      type: object\n      properties:\n        author:\n          type: string\n        authors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Author'\n          uniqueItems: true\n        automated:\n          type: boolean\n        commitID:\n          type: string\n        cwl_path:\n          type: string\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n        descriptionSource:\n          type: string\n          enum:\n          - README\n          - DESCRIPTOR\n        dirtyBit:\n          type: boolean\n        dockerfile_path:\n          type: string\n        doiStatus:\n          type: string\n          enum:\n          - NOT_REQUESTED\n          - REQUESTED\n          - CREATED\n        doiURL:\n          type: string\n        email:\n          type: string\n        frozen:\n          type: boolean\n        hidden:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        image_id:\n          type: string\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        last_built:\n          type: integer\n          format: int64\n        name:\n          type: string\n          description: \"Implementation specific, can be a quay.io or docker hub tag\\\n            \\ name\"\n          example: latest\n        orcidAuthors:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrcidAuthor'\n          uniqueItems: true\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        parent:\n          $ref: '#/components/schemas/EntryObjectObject'\n        reference:\n          type: string\n          description: git commit/tag/branch\n          example: master\n        referenceType:\n          type: string\n          enum:\n          - COMMIT\n          - TAG\n          - BRANCH\n          - NOT_APPLICABLE\n          - UNSET\n        size:\n          type: integer\n          format: int64\n        valid:\n          type: boolean\n        validations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Validation'\n          uniqueItems: true\n        verified:\n          type: boolean\n        verifiedSource:\n          type: string\n        verifiedSources:\n          type: array\n          items:\n            type: string\n        versionEditor:\n          $ref: '#/components/schemas/User'\n        versionMetadata:\n          $ref: '#/components/schemas/VersionMetadata'\n        wdl_path:\n          type: string\n        workingDirectory:\n          type: string\n      required:\n      - name\n      - reference\n    Token_Auth:\n      type: object\n      properties:\n        content:\n          type: string\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int64\n        refreshToken:\n          type: string\n        token:\n          type: string\n        tokenSource:\n          type: string\n          enum:\n          - quay.io\n          - github.com\n          - dockstore\n          - bitbucket.org\n          - gitlab.com\n          - zenodo.org\n          - google.com\n          - orcid.org\n        userId:\n          type: integer\n          format: int64\n        username:\n          type: string\n    Token_User:\n      type: object\n      properties:\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        id:\n          type: integer\n          format: int64\n        tokenSource:\n          type: string\n          enum:\n          - quay.io\n          - github.com\n          - dockstore\n          - bitbucket.org\n          - gitlab.com\n          - zenodo.org\n          - google.com\n          - orcid.org\n        userId:\n          type: integer\n          format: int64\n        username:\n          type: string\n    Tool:\n      type: object\n      description: \"A tool (or described tool) is defined as a tuple of a descriptor\\\n        \\ file (which potentially consists of multiple files), a set of container\\\n        \\ images, and a set of instructions for creating those images.\"\n      properties:\n        aliases:\n          type: array\n          description: Support for this parameter is optional for tool registries\n            that support aliases. A list of strings that can be used to identify this\n            tool which could be  straight up URLs.  This can be used to expose alternative\n            ids (such as GUIDs) for a tool for registries. Can be used to match tools\n            across registries.\n          items:\n            type: string\n            description: Support for this parameter is optional for tool registries\n              that support aliases. A list of strings that can be used to identify\n              this tool which could be  straight up URLs.  This can be used to expose\n              alternative ids (such as GUIDs) for a tool for registries. Can be used\n              to match tools across registries.\n        checker_url:\n          type: string\n          description: Optional url to the checker tool that will exit successfully\n            if this tool produced the expected result given test data.\n        description:\n          type: string\n          description: The description of the tool.\n        has_checker:\n          type: boolean\n          description: Whether this tool has a checker tool associated with it.\n        id:\n          type: string\n          description: \"A unique identifier of the tool, scoped to this registry.\"\n          example: \"123456\"\n        meta_version:\n          type: string\n          description: \"The version of this tool in the registry. Iterates when fields\\\n            \\ like the description, author, etc. are updated.\"\n        name:\n          type: string\n          description: The name of the tool.\n        organization:\n          type: string\n          description: The organization that published the image.\n        toolclass:\n          $ref: '#/components/schemas/ToolClass'\n        url:\n          type: string\n          description: The URL for this tool in this registry.\n          example: http://agora.broadinstitute.org/tools/123456\n        versions:\n          type: array\n          description: A list of versions for this tool.\n          items:\n            $ref: '#/components/schemas/ToolVersion'\n      required:\n      - id\n      - organization\n      - toolclass\n      - url\n      - versions\n    ToolClass:\n      type: object\n      properties:\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n    ToolDescriptor:\n      type: object\n      properties:\n        descriptor:\n          type: string\n        type:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - NFL\n          - SERVICE\n          - GXFORMAT2\n        url:\n          type: string\n      required:\n      - type\n    ToolDockerfile:\n      type: object\n      properties:\n        dockerfile:\n          type: string\n        url:\n          type: string\n    ToolFile:\n      type: object\n      properties:\n        file_type:\n          type: string\n          enum:\n          - TEST_FILE\n          - PRIMARY_DESCRIPTOR\n          - SECONDARY_DESCRIPTOR\n          - CONTAINERFILE\n          - OTHER\n        path:\n          type: string\n          description: \"Relative path of the file.  A descriptor's path can be used\\\n            \\ with the GA4GH .../{type}/descriptor/{relative_path} endpoint.\"\n    ToolTesterLog:\n      type: object\n      properties:\n        filename:\n          type: string\n        logType:\n          type: string\n          enum:\n          - FULL\n          - SUMMARY\n        runner:\n          type: string\n        testFilename:\n          type: string\n        toolId:\n          type: string\n        toolVersionName:\n          type: string\n    ToolTestsV1:\n      type: object\n      properties:\n        test:\n          type: string\n        url:\n          type: string\n    ToolV1:\n      type: object\n      properties:\n        author:\n          type: string\n        contains:\n          type: array\n          items:\n            type: string\n        description:\n          type: string\n        id:\n          type: string\n        meta-version:\n          type: string\n        organization:\n          type: string\n        signed:\n          type: boolean\n        toolclass:\n          $ref: '#/components/schemas/ToolClass'\n        toolname:\n          type: string\n        url:\n          type: string\n        verified:\n          type: boolean\n        verified-source:\n          type: string\n        versions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ToolVersionV1'\n    ToolVersion:\n      type: object\n      description: A tool version describes a particular iteration of a tool as described\n        by a reference to a specific image and/or documents.\n      properties:\n        author:\n          type: array\n          description: Contact information for the author of this version of the tool\n            in the registry. (More complex authorship information is handled by the\n            descriptor).\n          items:\n            type: string\n            description: Contact information for the author of this version of the\n              tool in the registry. (More complex authorship information is handled\n              by the descriptor).\n        containerfile:\n          type: boolean\n          description: \"Reports if this tool has a containerfile available. (For Docker-based\\\n            \\ tools, this would indicate the presence of a Dockerfile)\"\n        descriptor_type:\n          type: array\n          description: The type (or types) of descriptors available.\n          items:\n            type: string\n            description: The type (or types) of descriptors available.\n            enum:\n            - CWL\n            - WDL\n            - NFL\n            - SERVICE\n            - GALAXY\n            - SMK\n        id:\n          type: string\n          description: An identifier of the version of this tool for this particular\n            tool registry.\n          example: v1\n        images:\n          type: array\n          description: \"All known docker images (and versions/hashes) used by this\\\n            \\ tool. If the tool has to evaluate any of the docker images strings at\\\n            \\ runtime, those ones cannot be reported here.\"\n          items:\n            $ref: '#/components/schemas/ImageData'\n        included_apps:\n          type: array\n          description: An array of IDs for the applications that are stored inside\n            this tool.\n          example:\n          - https://bio.tools/tool/mytum.de/SNAP2/1\n          - https://bio.tools/bioexcel_seqqc\n          items:\n            type: string\n            description: An array of IDs for the applications that are stored inside\n              this tool.\n            example: \"[\\\"https://bio.tools/tool/mytum.de/SNAP2/1\\\",\\\"https://bio.tools/bioexcel_seqqc\\\"\\\n              ]\"\n        is_production:\n          type: boolean\n          description: \"This version of a tool is guaranteed to not change over time\\\n            \\ (for example, a  tool built from a tag in git as opposed to a branch).\\\n            \\ A production quality tool  is required to have a checksum\"\n        meta_version:\n          type: string\n          description: \"The version of this tool version in the registry. Iterates\\\n            \\ when fields like the description, author, etc. are updated.\"\n        name:\n          type: string\n          description: The name of the version.\n        signed:\n          type: boolean\n          description: Reports whether this version of the tool has been signed.\n        url:\n          type: string\n          description: The URL for this tool version in this registry.\n          example: http://agora.broadinstitute.org/tools/123456/versions/1\n        verified:\n          type: boolean\n          description: Reports whether this tool has been verified by a specific organization\n            or individual.\n        verified_source:\n          type: array\n          description: \"Source of metadata that can support a verified tool, such\\\n            \\ as an email or URL.\"\n          items:\n            type: string\n            description: \"Source of metadata that can support a verified tool, such\\\n              \\ as an email or URL.\"\n      required:\n      - id\n      - url\n    ToolVersionV1:\n      type: object\n      properties:\n        descriptor-type:\n          type: array\n          items:\n            type: string\n            enum:\n            - CWL\n            - WDL\n        dockerfile:\n          type: boolean\n        id:\n          type: string\n        image:\n          type: string\n        meta-version:\n          type: string\n        name:\n          type: string\n        url:\n          type: string\n        verified:\n          type: boolean\n        verified-source:\n          type: string\n    User:\n      type: object\n      properties:\n        avatarUrl:\n          type: string\n        curator:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        isAdmin:\n          type: boolean\n        name:\n          type: string\n        orcid:\n          type: string\n        privacyPolicyVersion:\n          type: string\n          enum:\n          - NONE\n          - PRIVACY_POLICY_VERSION_2_5\n        privacyPolicyVersionAcceptanceDate:\n          type: integer\n          format: int64\n        setupComplete:\n          type: boolean\n        tosacceptanceDate:\n          type: integer\n          format: int64\n        tosversion:\n          type: string\n          enum:\n          - NONE\n          - TOS_VERSION_1\n          - TOS_VERSION_2\n        tosversionAcceptanceDate:\n          type: integer\n          format: int64\n          writeOnly: true\n        userProfiles:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Profile'\n        username:\n          type: string\n        usernameChangeRequired:\n          type: boolean\n          description: Indicates whether the user is required to change their username\n            before being allowed to do various operations on Dockstore.\n    UserInfo:\n      type: object\n      properties:\n        dockstoreUsername:\n          type: string\n        thirdPartyEmail:\n          type: string\n        thirdPartyUsername:\n          type: string\n        tokenType:\n          type: string\n    Validation:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        message:\n          type: string\n        type:\n          type: string\n          enum:\n          - DOCKSTORE_SMK\n          - SMK_TEST_PARAMS\n          - DOCKSTORE_CWL\n          - CWL_TEST_JSON\n          - DOCKSTORE_WDL\n          - WDL_TEST_JSON\n          - DOCKERFILE\n          - NEXTFLOW\n          - NEXTFLOW_CONFIG\n          - NEXTFLOW_TEST_PARAMS\n          - DOCKSTORE_YML\n          - DOCKSTORE_SERVICE_YML\n          - DOCKSTORE_SERVICE_TEST_JSON\n          - DOCKSTORE_SERVICE_OTHER\n          - DOCKSTORE_GXFORMAT2\n          - GXFORMAT2_TEST_FILE\n          - DOCKSTORE_SWL\n          - SWL_TEST_JSON\n        valid:\n          type: boolean\n    VerificationInformation:\n      type: object\n      properties:\n        metadata:\n          type: string\n        platformVersion:\n          type: string\n        verified:\n          type: boolean\n    Version:\n      type: object\n      properties:\n        author:\n          type: string\n        authors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Author'\n          uniqueItems: true\n        commitID:\n          type: string\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n        descriptionSource:\n          type: string\n          enum:\n          - README\n          - DESCRIPTOR\n        dirtyBit:\n          type: boolean\n        doiStatus:\n          type: string\n          enum:\n          - NOT_REQUESTED\n          - REQUESTED\n          - CREATED\n        doiURL:\n          type: string\n        email:\n          type: string\n        frozen:\n          type: boolean\n        hidden:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        name:\n          type: string\n          description: \"Implementation specific, can be a quay.io or docker hub tag\\\n            \\ name\"\n          example: latest\n        orcidAuthors:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrcidAuthor'\n          uniqueItems: true\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        parent:\n          $ref: '#/components/schemas/EntryObjectObject'\n        reference:\n          type: string\n          description: git commit/tag/branch\n          example: master\n        referenceType:\n          type: string\n          enum:\n          - COMMIT\n          - TAG\n          - BRANCH\n          - NOT_APPLICABLE\n          - UNSET\n        valid:\n          type: boolean\n        validations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Validation'\n          uniqueItems: true\n        verified:\n          type: boolean\n        verifiedSource:\n          type: string\n        verifiedSources:\n          type: array\n          items:\n            type: string\n        versionEditor:\n          $ref: '#/components/schemas/User'\n        versionMetadata:\n          $ref: '#/components/schemas/VersionMetadata'\n        workingDirectory:\n          type: string\n      required:\n      - name\n      - reference\n    VersionMetadata:\n      type: object\n      properties:\n        description:\n          type: string\n          description: \"This is a human-readable description of this container and\\\n            \\ what it is trying to accomplish, required GA4GH\"\n        id:\n          type: integer\n          format: int64\n        parsedInformationSet:\n          type: array\n          items:\n            $ref: '#/components/schemas/ParsedInformation'\n        publicAccessibleTestParameterFile:\n          type: boolean\n        userIdToOrcidPutCode:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrcidPutCode'\n          description: The presence of the put code for a userid indicates the version\n            was exported to ORCID for the corresponding Dockstore user.\n    VersionTypeValidation:\n      type: object\n      properties:\n        message:\n          type: object\n          additionalProperties:\n            type: string\n        valid:\n          type: boolean\n    VersionVerifiedPlatform:\n      type: object\n      properties:\n        metadata:\n          type: string\n        path:\n          type: string\n        platformVersion:\n          type: string\n        source:\n          type: string\n        verified:\n          type: boolean\n        versionId:\n          type: integer\n          format: int64\n    Workflow:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        author:\n          type: string\n        checker_id:\n          type: integer\n          format: int64\n        conceptDoi:\n          type: string\n        dbCreateDate:\n          type: integer\n          format: int64\n        dbUpdateDate:\n          type: integer\n          format: int64\n        defaultTestParameterFilePath:\n          type: string\n        defaultVersion:\n          type: string\n        description:\n          type: string\n        descriptorType:\n          type: string\n          enum:\n          - SMK\n          - CWL\n          - WDL\n          - gxformat2\n          - SWL\n          - NFL\n          - service\n        descriptorTypeSubclass:\n          type: string\n          enum:\n          - docker-compose\n          - helm\n          - swarm\n          - kubernetes\n          - n/a\n        email:\n          type: string\n        forumUrl:\n          type: string\n          maxLength: 256\n          minLength: 0\n        full_workflow_path:\n          type: string\n        gitUrl:\n          type: string\n        has_checker:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        isChecker:\n          type: boolean\n        is_published:\n          type: boolean\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n          uniqueItems: true\n        lastUpdated:\n          type: integer\n          format: int64\n        last_modified:\n          type: integer\n          format: int32\n        last_modified_date:\n          type: integer\n          format: int64\n        licenseInformation:\n          $ref: '#/components/schemas/LicenseInformation'\n        metadataFromEntry:\n          $ref: '#/components/schemas/Workflow'\n        metadataFromVersion:\n          $ref: '#/components/schemas/Version'\n        mode:\n          type: string\n          enum:\n          - FULL\n          - STUB\n          - HOSTED\n          - DOCKSTORE_YML\n        organization:\n          type: string\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        parentEntry:\n          $ref: '#/components/schemas/Entry'\n        path:\n          type: string\n        repository:\n          type: string\n        sourceControl:\n          type: string\n          enum:\n          - dockstore.org\n          - github.com\n          - bitbucket.org\n          - gitlab.com\n        source_control_provider:\n          type: string\n        starredUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        topic:\n          type: string\n        topicAutomatic:\n          type: string\n          description: Short description of the entry gotten automatically\n        topicId:\n          type: integer\n          format: int64\n        topicManual:\n          type: string\n          description: Short description of the entry manually updated\n        topicSelection:\n          type: string\n          description: Which topic to display to the public users\n          enum:\n          - AUTOMATIC\n          - MANUAL\n        type:\n          type: string\n        userIdToOrcidPutCode:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OrcidPutCode'\n          description: The presence of the put code for a userid indicates the entry\n            was exported to ORCID for the corresponding Dockstore user.\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n          uniqueItems: true\n        workflowName:\n          type: string\n        workflowVersions:\n          type: array\n          items:\n            $ref: '#/components/schemas/WorkflowVersion'\n          uniqueItems: true\n        workflow_path:\n          type: string\n      required:\n      - type\n    WorkflowSubClass:\n      type: string\n      enum:\n      - BIOWORKFLOW\n      - SERVICE\n      - APPTOOL\n    WorkflowVersion:\n      type: object\n      properties:\n        aliases:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Alias'\n        author:\n          type: string\n        authors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Author'\n          uniqueItems: true\n        commitID:\n          type: string\n        dbUpdateDate:\n          type: integer\n          format: int64\n        description:\n          type: string\n        descriptionSource:\n          type: string\n          enum:\n          - README\n          - DESCRIPTOR\n        dirtyBit:\n          type: boolean\n        doiStatus:\n          type: string\n          enum:\n          - NOT_REQUESTED\n          - REQUESTED\n          - CREATED\n        doiURL:\n          type: string\n        email:\n          type: string\n        frozen:\n          type: boolean\n        hidden:\n          type: boolean\n        id:\n          type: integer\n          format: int64\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/Image'\n          uniqueItems: true\n        input_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        last_modified:\n          type: integer\n          format: int64\n        legacyVersion:\n          type: boolean\n        name:\n          type: string\n          description: \"Implementation specific, can be a quay.io or docker hub tag\\\n            \\ name\"\n          example: latest\n        orcidAuthors:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrcidAuthor'\n          uniqueItems: true\n        output_file_formats:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileFormat'\n          uniqueItems: true\n        parent:\n          $ref: '#/components/schemas/EntryObjectObject'\n        reference:\n          type: string\n          description: git commit/tag/branch\n          example: master\n        referenceType:\n          type: string\n          enum:\n          - COMMIT\n          - TAG\n          - BRANCH\n          - NOT_APPLICABLE\n          - UNSET\n        subClass:\n          type: string\n          enum:\n          - DOCKER_COMPOSE\n          - SWARM\n          - KUBERNETES\n          - HELM\n        synced:\n          type: boolean\n        valid:\n          type: boolean\n        validations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Validation'\n          uniqueItems: true\n        verified:\n          type: boolean\n        verifiedSource:\n          type: string\n        verifiedSources:\n          type: array\n          items:\n            type: string\n        versionEditor:\n          $ref: '#/components/schemas/User'\n        versionMetadata:\n          $ref: '#/components/schemas/VersionMetadata'\n        workflow_path:\n          type: string\n        workingDirectory:\n          type: string\n      required:\n      - name\n      - reference\n    WorkflowVersionPathInfo:\n      type: object\n      properties:\n        fullWorkflowPath:\n          type: string\n        tagName:\n          type: string\n  securitySchemes:\n    BEARER:\n      scheme: bearer\n      type: http\n    bearer:\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "buildIR: make ir: path \"/workflows/{workflowId}/workflowVersions/{workflowVersionId}/parsedInformation\": post: requestBody: contents: application/x-www-form-urlencoded: form parameter \"languageParsingRequest\": field \"SourceFiles\": nested arrays not allowed",
	"NotImplemented": [
		"allOf",
		"empty schema",
		"unsupported content types"
	]
}