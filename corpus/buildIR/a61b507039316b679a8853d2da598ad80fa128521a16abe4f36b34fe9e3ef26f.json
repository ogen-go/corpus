{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bcgov/common-hosted-form-service"
		},
		"file": {
			"name": "v1.api-spec.yaml",
			"size": 0,
			"path": "app/src/docs/v1.api-spec.yaml",
			"byteSize": 109505,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  version: 1.0.0\n  title: Common Hosted Form Service (CHEFS)\n  description: \u003e-\n    The API for an application for teams to create, manage and publish web\n    forms. These back-end operations can work for different form builder tools\n    that define the form as a json schema. Form management features include\n    role-based access for administrators, form versioning, submission review and\n    export, as well as notifications, document generation and reporting.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: NR Common Service Showcase\n    email: NR.CommonServiceShowcase@gov.bc.ca\nexternalDocs:\n  description: Project Readmes\n  url: https://github.com/bcgov/common-hosted-form-service\nservers:\n  - url: /api/v1\n    description: This Server\nsecurity:\n  - BearerAuth: []\n    OpenID: []\ntags:\n  - name: Form\n    description: \u003e-\n      The API paths in this section are used to read and write data that make up\n      a web form, for example, the form schema object, metadata, and related\n      settings\n  - name: Form API\n    description: \u003e-\n      This section supports the creation, management and removal of form scoped\n      API Key secrets. CHEFS endpoints which permit Basic Authentication use the\n      Form ID as username and the API Key as the password.\n  - name: Version\n    description: \u003e-\n      The API supports versioning of forms. This allows a user to manage\n      multiple versions of a form design and, for example, publish a specific\n      version of a form.\n  - name: Draft\n    description: \u003e-\n      This section of the API includes endpoints used to perform various\n      operations related to form drafts, for example create or publish a draft\n      from a specific version of a form.\n  - name: Submission\n    description: \u003e-\n      These API endpoints handle the input data provided by a user that\n      completes the form, for example, writing the form data to the database, or\n      exporting form submissions created during a defined time period.\n  - name: Status\n    description: \u003e-\n      These API endpoints handle operations to update and retrieve statuses and\n      notes on a submission, and status code management for a Form.\n  - name: Files\n    description: API endpoints to upload and retrieve files stored in CHEFS.\n  - name: User\n    description: \u003e-\n      The section includes API endpoints for carrying out operations with data\n      related to users of the application.\n  - name: Role\n    description: \u003e-\n      The API includes endpoints for managing roles assigned to users. A role,\n      for example, 'Form Designer' or 'Submission Reviewer' will often\n      correspond to the business functions of a user's job. Roles have a group\n      of related permissions that are used to control access to a defined set of\n      features of and application.\n  - name: Permission\n    description: \u003e-\n      The API uses Permissions to control access to a defined set of features of\n      and application, for example, reading form submissions or updating the\n      design of a form. Permissions are assigned to roles.\n  - name: RBAC\n    description: \u003e-\n      This section of the API documents the API endpoints related to Role-based\n      Access Control (RBAC). RBAC is a method of restricting access based on\n      roles. These endpoints handle a combination of user, role and permission\n      data as well as the access settings for a published form.\n  - name: Admin\n    description: \u003e-\n      These API endpoints are used for elevated permission administrative calls.\n      All calls are secured by a role that operational team members will be\n      granted and allow fetching some details about forms without needing a\n      user-\u003eform permission.\npaths:\n  /forms:\n    get:\n      summary: List all forms\n      operationId: listForms\n      tags:\n        - Form\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          description: filter forms by active status\n          example: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Form'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a new form\n      operationId: createForm\n      tags:\n        - Form\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/FormBasic'\n                - $ref: '#/components/schemas/FormSchema'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormBasic'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}:\n    get:\n      summary: Get details of a form (and metadata for versions)\n      operationId: readForm\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Form\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Form'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update a form\n      operationId: updateForm\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Form\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FormBasic'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Form'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: (Soft) Delete a form\n      operationId: deleteForm\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Form\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '204':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormBasic'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/apiKey:\n    get:\n      summary: Get current API Key\n      description: Get the active api key secret for a form\n      operationId: readApiKey\n      tags:\n        - Form API\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormApiKey'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Create/Replace API Key\n      description: Create or replace api key secret for a form\n      operationId: createReplaceApiKey\n      tags:\n        - Form API\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormApiKey'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete API Key\n      description: Delete the api key secret for a form\n      operationId: deleteApiKey\n      tags:\n        - Form API\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '204':\n          description: OK\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/export:\n    get:\n      summary: Export submissions for a form\n      operationId: export\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - in: query\n          name: format\n          schema:\n            type: string\n          description: chosen format for the submission data exported\n          example: csv\n          required: true\n        - in: query\n          name: type\n          schema:\n            type: string\n          description: the category of data exported\n          example: submissions\n          required: true\n        - in: query\n          name: minDate\n          schema:\n            type: string\n          example: '2020-12-17T08:00:00Z'\n          description: Start date of period included in the export\n        - in: query\n          name: maxDate\n          schema:\n            type: string\n          example: '2020-12-17T08:00:00Z'\n          description: End date of period included in the export\n      responses:\n        '200':\n          description: Export file created for download\n          headers:\n            content-type:\n              description: Response header\n              schema:\n                type: object\n              example: text/json; charset=utf-8\n          content:\n            text/csv:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormSubmissionExport'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/options:\n    get:\n      summary: Get pre-flight details for a form\n      operationId: readFormOptions\n      tags:\n        - Form\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormOptions'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions:\n    get:\n      summary: List all versions of a form\n      operationId: listVersions\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Version\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormVersion'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions/{formVersionId}:\n    get:\n      summary: Get a single form version\n      operationId: readVersion\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Version\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormVersion'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions/{formVersionId}/fields:\n    get:\n      summary: Get a list of valid form fields in this form version\n      operationId: readVersionFields\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Version\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormVersionFields'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/version:\n    get:\n      summary: Get published version of a form\n      operationId: readPublishedForm\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Version\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Form'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions/{formVersionId}/publish:\n    post:\n      summary: Publish a version of a form\n      operationId: publishVersion\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Version\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n        - in: query\n          name: unpublish\n          schema:\n            type: boolean\n          example: true\n          required: false\n          description: Should this version of the form be unpublished\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormVersionBasic'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/drafts:\n    get:\n      summary: List drafts for a form\n      operationId: listDrafts\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormDraft'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a draft from a form version\n      operationId: createDraft\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                formVersionId:\n                  type: string\n                  format: uuid\n                  description: ID of the form version used for this draft\n                  example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n                schema:\n                  $ref: '#/components/schemas/FormSchema'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormDraft'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/drafts/{formVersionDraftId}:\n    get:\n      summary: Get a form draft\n      operationId: readDraft\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionDraftIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormDraft'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update a form draft\n      operationId: updateDraft\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionDraftIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                schema:\n                  $ref: '#/components/schemas/FormSchema'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormDraft'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete a form draft\n      operationId: deleteDraft\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionDraftIdParam'\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/drafts/{formVersionDraftId}/publish:\n    post:\n      summary: Publish a form draft\n      operationId: publishDraft\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Draft\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionDraftIdParam'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormVersionBasic'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/submissions:\n    get:\n      summary: List submissions for a form\n      operationId: listFormSubmissions\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - in: query\n          name: fields\n          schema:\n            type: string\n            example: textField1,checkbox1,radioGroup1,email1\n          description: \u003e-\n            A list of form fields to search on. Refer to the related\n            `versions/{formVersionId}/fields` endpoint for a list of valid\n            values to query for. The list should be comma separated.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormSubmissionSummary'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions/{formVersionId}/submissions:\n    get:\n      summary: List submissions from a form version\n      operationId: listSubmissions\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormSubmission'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a new form submission\n      operationId: createSubmission\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FormSubmissionBasic'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormSubmission'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/versions/{formVersionId}/submissions/discover:\n    get:\n      summary: List field value submissions from a form version\n      description: \u003e-\n        A queryable endpoint for acquiring a specific subset of data from the\n        submissions\n      operationId: listDiscoverSubmissions\n      security:\n        - BasicAuth: []\n        - BearerAuth: []\n          OpenID: []\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - $ref: '#/components/parameters/formVersionIdParam'\n        - in: query\n          name: fields\n          schema:\n            type: string\n            example: textField1,checkbox1,radioGroup1,email1\n          description: \u003e-\n            A list of form fields to search on. Refer to the related `/fields`\n            endpoint for a list of valid values to query for. The list can be\n            comma separated or by repeating the same fields query multiple\n            times.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormSubmissionDiscover'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}:\n    get:\n      summary: Get a form submission\n      operationId: readSubmission\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubmissionFormVersion'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update a form submission\n      operationId: updateSubmission\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FormSubmissionBasic'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormSubmission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: (Soft) delete a form submission\n      operationId: deleteSubmission\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormSubmission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/email:\n    post:\n      summary: Email a message with link to a submission\n      operationId: emailSubmission\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n        - in: header\n          name: Referer\n          description: URL of webpage where email was requested\n          schema:\n            type: string\n          required: true\n          example: \u003e-\n            https://survey.gov.bc.com/app/form/success?s=7d66664b-87c5-4df8-ba7c-a6fb7d62c379\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                to:\n                  type: string\n                  example: jsmith@email.ca\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EmailMessage'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/edits:\n    get:\n      summary: Get an audit list of edits to a submission\n      operationId: readSubmissionEdits\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubmissionEditMetadata'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/options:\n    get:\n      summary: Get pre-flight details for a form submission\n      operationId: readSubmissionOptions\n      tags:\n        - Submission\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubmissionFormVersionOptions'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /forms/{formId}/statusCodes:\n    get:\n      summary: List status codes for a form\n      operationId: getStatusCodes\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StatusCodes'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/status:\n    get:\n      summary: Get the list of status history for a submission\n      operationId: readSubmissionStatus\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubmissionStatusHistory'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Add a new status to a submission\n      description: |-\n        Adds a new status to a submission, and optionally provides email notification depending\n        on the status being assigned.\n      operationId: addSubmissionStatus\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubmissionStatus'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubmissionStatusHistory'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/template/render:\n    post:\n      summary: Generate document from inline Template\n      description: \u003e-\n        This endpoint accepts a document template and a set (or multiple sets)\n        of substitution variables and merges them into the document.\n      operationId: uploadTemplateAndRenderReport\n      tags:\n        - Template\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      requestBody:\n        description: Fields required to generate a document\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateRenderObject'\n      responses:\n        '200':\n          description: Returns the supplied document with variables merged in\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: Raw binary-encoded response\n          headers:\n            Content-Disposition:\n              schema:\n                type: string\n              description: \u003e-\n                Indicates if a browser should render this resource inline or\n                treat as an attachment for download\n              example: attachment; filename=file.pdf\n            Content-Type:\n              schema:\n                type: string\n              description: The MIME-type of the binary file payload\n              example: application/pdf\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntity'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /submissions/{formSubmissionId}/notes:\n    get:\n      summary: Get the list of notes for a submission\n      operationId: readSubmissioNotes\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Note'\n                    - $ref: '#/components/schemas/TimeStampUserData'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Add a note to a submission\n      operationId: addSubmissionNote\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/components/parameters/formSubmissionIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Note'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Note'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /files:\n    post:\n      summary: Upload a file\n      operationId: fileUpload\n      tags:\n        - Files\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: file_name-5b26db5a-8388-4c01-b728-d0d098f815ba.pdf\n                  description: The desired file name\n                files:\n                  type: string\n                  format: binary\n                  description: The actual files to upload\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileUpload'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /files/{fileId}:\n    get:\n      summary: Get a file\n      operationId: fileGet\n      tags:\n        - Files\n      parameters:\n        - $ref: '#/components/parameters/fileIdParam'\n      responses:\n        '200':\n          description: The returned binary file\n          content:\n            application/\u003ctype\u003e:\n              schema:\n                type: string\n                format: binary\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete a file\n      operationId: fileDelete\n      tags:\n        - Files\n      parameters:\n        - $ref: '#/components/parameters/fileIdParam'\n      responses:\n        '202':\n          description: Accepted\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /permissions:\n    get:\n      summary: List all permissions\n      operationId: listPermissions\n      tags:\n        - Permission\n      security:\n        - OpenID:\n            - admin\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Permission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a new permission\n      operationId: createPermission\n      tags:\n        - Permission\n      security:\n        - OpenID:\n            - admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Permission'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /permissions/{code}:\n    get:\n      summary: Get a permission\n      operationId: readPermission\n      tags:\n        - Permission\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: path\n          name: code\n          schema:\n            type: string\n          required: true\n          description: code of the permission to fetch\n          example: submission_read\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update a permission\n      operationId: updatePermission\n      tags:\n        - Permission\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: path\n          name: code\n          schema:\n            type: string\n          required: true\n          example: submission_read\n          description: code of the permission to update\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Permission'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /roles:\n    get:\n      summary: List all roles\n      operationId: listRoles\n      tags:\n        - Role\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a new role\n      operationId: createRole\n      tags:\n        - Role\n      security:\n        - OpenID:\n            - admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Role'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /roles/{code}:\n    get:\n      summary: Get a role\n      operationId: getRole\n      tags:\n        - Role\n      parameters:\n        - in: path\n          name: code\n          schema:\n            type: string\n          required: true\n          description: code of the role to fetch\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update a role\n      operationId: updateRole\n      tags:\n        - Role\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: path\n          name: code\n          schema:\n            type: string\n          required: true\n          description: code of the role to update\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/current:\n    get:\n      summary: Get forms/roles/permissions for current user\n      operationId: getCurrentUser\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form ID\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          example: true\n          description: is the form active flag\n        - in: query\n          name: idps\n          schema:\n            type: string\n        - in: query\n          name: accessLevels\n          schema:\n            type: string\n          description: filter on the user access level for the form (public, idp, team)\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/CurrentUser'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/UserForm'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/current/submissions:\n    get:\n      summary: Get submissions/roles/permissions for current user\n      operationId: getCurrentUserSubmissions\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form ID\n        - in: query\n          name: formSubmissionId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: submission ID\n        - in: query\n          name: userId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: user ID\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          example: true\n          description: to include active or deleted submissions or not\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSubmission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/idps:\n    get:\n      summary: Get a list of identity providers\n      operationId: getIdentityProviders\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          example: true\n          description: is the identity provider active\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IdentityProvider'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/forms:\n    get:\n      summary: Get a list of users and roles for a form\n      operationId: getFormUsers\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form ID\n          required: true\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: user ID\n        - in: query\n          name: keycloakId\n          schema:\n            type: string\n          description: user keycloakId\n        - in: query\n          name: username\n          schema:\n            type: string\n          description: user username\n        - in: query\n          name: fullName\n          schema:\n            type: string\n          description: user fullName\n        - in: query\n          name: firstName\n          schema:\n            type: string\n          description: user firstName\n        - in: query\n          name: lastName\n          schema:\n            type: string\n          description: user lastName\n        - in: query\n          name: email\n          schema:\n            type: string\n          description: user email\n        - in: query\n          name: formName\n          schema:\n            type: string\n          description: form name\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          example: true\n          description: is the form active flag\n        - in: query\n          name: idps\n          schema:\n            type: string\n          description: identity provider (idp field) associated with form\n        - in: query\n          name: roles\n          schema:\n            type: string\n          description: roles (code field) user has on form\n        - in: query\n          name: permissions\n          schema:\n            type: string\n          description: permissions (code field) user has on form\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccess'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Set user roles for a form\n      operationId: setFormUsers\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form id\n          required: true\n        - in: query\n          name: userId\n          schema:\n            type: string\n            format: uuid\n            example: d7455376-382c-439d-a811-0381a012d696\n          description: user id\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/FormRoleUser'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccess'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/submissions:\n    get:\n      summary: Get a list of users and permissions for a submission\n      operationId: getSubmissionUsers\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formSubmissionId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: submission ID\n          required: true\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: user ID\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccessSubmission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Set premissions for a user on a submission\n      operationId: setSubmissionUser\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: formSubmissionId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: submission id\n          required: true\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: user ID\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n                example: SUBMISSION_UPDATE\n              description: \u003e-\n                an array of the sumbission permissions to apply to this user.\n                Set an empty array to remove.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccessSubmission'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /rbac/users:\n    get:\n      summary: Get a list of forms and roles for a user\n      operationId: getUserForms\n      tags:\n        - RBAC\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: user id\n        - in: query\n          name: keycloakId\n          schema:\n            type: string\n          description: user keycloakId\n        - in: query\n          name: username\n          schema:\n            type: string\n          description: user username\n        - in: query\n          name: fullName\n          schema:\n            type: string\n          description: user fullName\n        - in: query\n          name: fullname\n          schema:\n            type: string\n          description: user username\n        - in: query\n          name: firstName\n          schema:\n            type: string\n          description: user firstName\n        - in: query\n          name: lastName\n          schema:\n            type: string\n          description: user lastName\n        - in: query\n          name: email\n          schema:\n            type: string\n          description: user email\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form id\n          required: true\n        - in: query\n          name: formName\n          schema:\n            type: string\n          description: form name\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          example: true\n          description: is the form active flag\n        - in: query\n          name: idps\n          schema:\n            type: string\n          description: identity provider (idp field) associated with form\n        - in: query\n          name: roles\n          schema:\n            type: string\n          description: roles (code field) user has on form\n        - in: query\n          name: permissions\n          schema:\n            type: string\n          description: permissions (code field) user has on form\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccess'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Set form roles for a user\n      operationId: setUserForms\n      tags:\n        - RBAC\n      parameters:\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: user id\n          required: true\n        - in: query\n          name: formId\n          schema:\n            type: string\n            format: uuid\n            example: c6455376-382c-439d-a811-0381a012d696\n          description: form id\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/FormRoleUser'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserAccess'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users:\n    get:\n      summary: Get a list of users and their roles\n      operationId: listUsers\n      tags:\n        - User\n      parameters:\n        - in: query\n          name: keycloakId\n          schema:\n            type: string\n          description: user keycloakId\n        - in: query\n          name: username\n          schema:\n            type: string\n          description: user username\n        - in: query\n          name: fullName\n          schema:\n            type: string\n          description: user fullName\n        - in: query\n          name: firstName\n          schema:\n            type: string\n          description: user firstName\n        - in: query\n          name: lastName\n          schema:\n            type: string\n          description: user lastName\n        - in: query\n          name: email\n          schema:\n            type: string\n          description: user email\n        - in: query\n          name: search\n          schema:\n            type: string\n          description: string to match against username, fullName and Email\n        - in: query\n          name: idpCode\n          schema:\n            type: string\n          description: Filter results to only users with specified idpCode\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{userId}:\n    get:\n      summary: Get a user and their roles\n      operationId: readUser\n      tags:\n        - User\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n            example: bea3b705-1de5-4f4e-a4e6-0716b7674132\n          description: user ID\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/preferences:\n    get:\n      summary: Get the preferences for current user\n      description: Fetches all known preferences for the current user\n      operationId: readUserPreferences\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPreferences'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update the preferences for current user\n      description: Updates all known preferences for the current user\n      operationId: updateUserPreferences\n      tags:\n        - User\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPreferences'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPreferences'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete all preferences for current user\n      description: Deletes all known preferences for the current user\n      operationId: deleteUserPreferences\n      tags:\n        - User\n      responses:\n        '204':\n          description: OK\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/preferences/forms/{formId}:\n    get:\n      summary: Get the form preferences for current user\n      description: Fetches preferences for the current user specific to this form\n      operationId: readUserFormPreferences\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/UserFormPreferences'\n                  - $ref: '#/components/schemas/TimeStampUserData'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update the form preferences for current user\n      description: Updates preferences for the current user specific to this form\n      operationId: updateUserFormPreferences\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FormPreferences'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/UserFormPreferences'\n                  - $ref: '#/components/schemas/TimeStampUserData'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete all form preferences for current user\n      description: Deletes preferences for the current user specific to this form\n      operationId: deleteUserFormPreferences\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '204':\n          description: OK\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms:\n    get:\n      summary: List all forms in the system\n      operationId: adminListForms\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: query\n          name: active\n          schema:\n            type: boolean\n          description: filter forms by active status\n          example: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Form'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms/{formId}:\n    get:\n      summary: Get top level details of a form\n      operationId: adminReadForm\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormBasic'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms/{formId}/apiKey:\n    get:\n      summary: Get Form API Key\n      description: Get the active api key details for a form\n      operationId: adminReadApiDetails\n      tags:\n        - Admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FormApiDetails'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete Form API Key\n      description: Delete the api key secret for a form\n      operationId: adminDeleteApiKey\n      tags:\n        - Admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '204':\n          description: OK\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms/{formId}/restore:\n    put:\n      summary: Un-delete a soft deleted form\n      operationId: adminRestoreForm\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserForm'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms/{formId}/formUsers:\n    get:\n      summary: Get the list of users for the active forms in the system\n      operationId: adminReadFormUsers\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormUserList'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/forms/{formId}/addUser:\n    put:\n      summary: Add user permissions to a form\n      operationId: adminAddUser\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - $ref: '#/components/parameters/formIdParam'\n        - in: query\n          name: userId\n          schema:\n            type: string\n          description: The user to add permissions to\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/FormRoleUser'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserAccess'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/users:\n    get:\n      summary: Get the list of users\n      operationId: adminReadUsers\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /admin/users/{userId}:\n    get:\n      summary: Get a user\n      operationId: adminReadUser\n      tags:\n        - Admin\n      security:\n        - OpenID:\n            - admin\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n            example: bea3b705-1de5-4f4e-a4e6-0716b7674132\n          description: user ID\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    OpenID:\n      type: openIdConnect\n      openIdConnectUrl: https://example.com/.well-known/openid-configuration\n  parameters:\n    fileIdParam:\n      in: path\n      name: fileId\n      schema:\n        type: string\n        format: uuid\n      example: 3cb9acc7-cfd8-4491-b091-1277bc0ec303\n      required: true\n      description: ID of the File\n    formIdParam:\n      in: path\n      name: formId\n      schema:\n        type: string\n        format: uuid\n      description: ID of the form\n      required: true\n      example: c6455376-382c-439d-a811-0381a012d696\n    formVersionIdParam:\n      in: path\n      name: formVersionId\n      schema:\n        type: string\n        format: uuid\n      example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n      required: true\n      description: ID of the form version\n    formVersionDraftIdParam:\n      in: path\n      name: formVersionDraftId\n      schema:\n        type: string\n        format: uuid\n        example: b2e11d09-30fe-4c4c-9375-5a9de0dc2e9e\n      required: true\n      description: ID of the draft for form version\n    formSubmissionIdParam:\n      in: path\n      name: formSubmissionId\n      schema:\n        type: string\n        format: uuid\n      example: 3cb9acc7-cfd8-4491-b091-1277bc0ec303\n      required: true\n      description: ID of the Submission\n  schemas:\n    BadRequest:\n      allOf:\n        - $ref: '#/components/schemas/Problem'\n        - type: object\n          properties:\n            status:\n              example: 400\n            title:\n              example: Bad Request\n            type:\n              example: https://httpstatuses.com/400\n    Conflict:\n      allOf:\n        - $ref: '#/components/schemas/Problem'\n        - type: object\n          properties:\n            status:\n              example: 409\n            title:\n              example: Conflict\n            type:\n              example: https://httpstatuses.com/409\n    CurrentUser:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        keycloakId:\n          type: string\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        username:\n          type: string\n          description: Username of this user\n          example: jsmith\n        firstName:\n          type: string\n          example: Jane\n        fullName:\n          type: string\n          example: Jane Smith\n        lastName:\n          type: string\n          example: Smith\n        email:\n          type: string\n          example: jsmith@gov.bc.ca\n        public:\n          type: boolean\n          example: false\n    EmailMessage:\n      allOf:\n        - type: object\n          properties:\n            msgid:\n              type: string\n              format: uuid\n              description: ID of message.\n              example: 1223h78b-21d2-4128-b4e8-02ad3daipoi32\n            to:\n              type: array\n              items:\n                type: string\n                example: jsmith@email.com\n              description: an array of the message recipients\n            txId:\n              type: string\n              format: uuid\n              description: Transaction ID returned by a messaging service\n              example: 7d13b78b-21d2-4128-b4e8-02ad3da17d22\n    Error:\n      allOf:\n        - $ref: '#/components/schemas/Problem'\n        - type: object\n          properties:\n            status:\n              example: 500\n            title:\n              example: Internal Server Error\n            type:\n              example: https://httpstatuses.com/500\n    FileUpload:\n      type: object\n      properties:\n        createdAt:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n        createdBy:\n          type: string\n          example: jsmith@idir\n        id:\n          type: string\n          format: uuid\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        originalName:\n          type: string\n          example: hiring_approval_request_form_schema.json\n        size:\n          type: integer\n          description: Size in bytes of the file.\n          example: 27462\n    Form:\n      allOf:\n        - $ref: '#/components/schemas/FormBasic'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            active:\n              type: boolean\n              example: true\n            labels:\n              type: array\n              example:\n                - Survey\n              items:\n                type: string\n            versions:\n              type: array\n              items:\n                $ref: '#/components/schemas/FormVersionBasic'\n            snake:\n              type: string\n              example: my-survey-form\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormApiKey:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: number\n              example: 4\n            formId:\n              type: string\n              example: c6455376-382c-439d-a811-0381a012d696\n            secret:\n              type: string\n              example: dd7d1699-61ec-4037-aa33-727f8aa79c0a\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormApiDetails:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: number\n              example: 4\n            formId:\n              type: string\n              example: c6455376-382c-439d-a811-0381a012d696\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormBasic:\n      allOf:\n        - $ref: '#/components/schemas/FormCore'\n        - type: object\n          properties:\n            identityProviders:\n              type: array\n              items:\n                $ref: '#/components/schemas/IdentityProvider'\n            showSubmissionConfirmation:\n              type: boolean\n              example: true\n            submissionReceivedEmails:\n              type: array\n              items:\n                type: string\n              example:\n                - me@email.com\n                - manager@email.com\n            enableStatusUpdates:\n              type: boolean\n              example: true\n            enableSubmitterDraft:\n              type: boolean\n              example: true\n    FormCore:\n      type: object\n      properties:\n        name:\n          type: string\n          example: My First Form\n        description:\n          type: string\n          example: I built this survey form. It is amazing.\n    FormDraft:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            formId:\n              type: string\n              format: uuid\n              description: ID of the form\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            formVersionId:\n              type: string\n              format: uuid\n              description: ID of the FormVersion this submission is for.\n              example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n        - $ref: '#/components/schemas/FormSchema'\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormOptions:\n      allOf:\n        - $ref: '#/components/schemas/FormCore'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            idpHints:\n              type: array\n              example:\n                - idir\n              items:\n                type: string\n            snake:\n              type: string\n              example: my-survey-form\n    FormRoleUser:\n      type: object\n      properties:\n        formId:\n          type: string\n          format: uuid\n          description: ID of form\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        role:\n          type: string\n          description: code of role\n          example: team_manager\n        userId:\n          type: string\n          description: ID of user\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n    FormSchema:\n      allOf:\n        - type: object\n          properties:\n            schema:\n              type: object\n              description: this is the json for the form design.\n              example:\n                display: form\n                type: form\n                components:\n                  - type: textfield\n                    key: firstName\n                    label: First Name\n                    placeholder: Enter your first name.\n                    input: true\n                    tooltip: Enter your \u003cstrong\u003eFirst Name\u003c/strong\u003e\n                    description: Enter your \u003cstrong\u003eFirst Name\u003c/strong\u003e\n                  - type: textfield\n                    key: lastName\n                    label: Last Name\n                    placeholder: Enter your last name.\n                    input: true\n                    tooltip: Enter your \u003cstrong\u003eLast Name\u003c/strong\u003e\n                    description: Enter your \u003cstrong\u003eLast Name\u003c/strong\u003e\n    FormSubmission:\n      allOf:\n        - $ref: '#/components/schemas/FormSubmissionBasic'\n        - $ref: '#/components/schemas/FormSubmissionCore'\n        - type: object\n          properties:\n            confirmationId:\n              type: string\n              description: shortend version of the id, useful for visual representation\n              example: AEB3B705\n            deleted:\n              type: boolean\n              description: Used to indicate a soft delete.\n              example: false\n    FormSubmissionBasic:\n      allOf:\n        - type: object\n          properties:\n            draft:\n              type: boolean\n              description: \u003e-\n                Used to indicate if submission came from a draft version of a\n                form.\n              example: false\n            submission:\n              type: object\n              description: this is the json for the form submission.\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormSubmissionCore:\n      type: object\n      properties:\n        id:\n          type: string\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        formVersionId:\n          type: string\n          description: ID of the FormVersion this submission is for.\n          example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n    FormSubmissionDiscover:\n      type: object\n      properties:\n        id:\n          type: string\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n      example:\n        id: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        textField1: foo\n        checkbox1: bar\n        radioGroup1: baz\n        email1: test@email.com\n    FormSubmissionExport:\n      allOf:\n        - type: object\n          properties:\n            form:\n              type: object\n              properties:\n                confirmationId:\n                  type: string\n                  description: shortend version of the id, useful for visual representation\n                  example: AEB3B705\n                formName:\n                  type: string\n                  description: The title of the form\n                  example: My Survey Form\n                username:\n                  type: string\n                  description: Username of this user\n                  example: jsmith\n                fullName:\n                  type: string\n                  example: Jane Smith\n                email:\n                  type: string\n                  example: jsmith@gov.bc.ca\n                version:\n                  type: integer\n                  description: The version number of the form for a submission\n                  example: 1\n                createdAt:\n                  type: string\n                  example: '2020-06-04T18:49:20.672Z'\n            formFieldA:\n              type: string\n              description: A field in the submission object\n            formFieldB:\n              type: string\n              description: A field in the submission object\n    FormSubmissionSummary:\n      allOf:\n        - type: object\n          properties:\n            textField1:\n              type: string\n              example: \u003e-\n                the contents of the field called 'textField1' from the 'fields'\n                query param\n            submissionId:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            formId:\n              type: string\n              format: uuid\n              description: ID of the form this submission is for.\n              example: bea3b705-1de5-4f4e-a4e6-0716b7674132\n            formName:\n              type: string\n              description: The title of the form\n              example: My Survey Form\n            formVersionId:\n              type: string\n              description: ID of the FormVersion this submission is for.\n              example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n            confirmationId:\n              type: string\n              description: shortend version of the id, useful for visual representation\n              example: AEB3B705\n            deleted:\n              type: boolean\n              description: Used to indicate a soft delete.\n              example: false\n            draft:\n              type: boolean\n              description: \u003e-\n                Used to indicate if submission came from a draft version of a\n                form.\n              example: false\n            version:\n              type: integer\n              description: The version number of the form for a submission\n              example: 1\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormUserList:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            name:\n              type: string\n              example: My First Form.\n            users:\n              type: array\n              items:\n                $ref: '#/components/schemas/UserFormBasic'\n    FormVersion:\n      allOf:\n        - $ref: '#/components/schemas/FormVersionBasic'\n        - $ref: '#/components/schemas/FormSchema'\n    FormVersionBasic:\n      allOf:\n        - $ref: '#/components/schemas/FormVersionCore'\n        - type: object\n          properties:\n            version:\n              type: integer\n              example: 1\n            published:\n              type: boolean\n              example: true\n        - $ref: '#/components/schemas/TimeStampUserData'\n    FormVersionCore:\n      type: object\n      properties:\n        id:\n          type: string\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        formId:\n          type: string\n          format: uuid\n          description: ID of the form\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n    FormVersionFields:\n      type: array\n      example:\n        - textField1\n        - checkbox1\n        - radioGroup1\n        - email1\n      items:\n        type: string\n    IdentityProvider:\n      allOf:\n        - type: object\n          properties:\n            code:\n              type: string\n              example: idir\n            display:\n              type: string\n              example: IDIR\n            idp:\n              type: string\n              description: \u003e-\n                The identity_provider a user logs in with.  Allows us to\n                determine what source authenticated the user.\n              example: idir\n            active:\n              type: boolean\n              example: true\n        - $ref: '#/components/schemas/TimeStampUserData'\n    Note:\n      type: object\n      properties:\n        submissionId:\n          type: string\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        submissionStatusId:\n          type: string\n          example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n        note:\n          type: string\n          example: \u003e-\n            'This is a note that can be up to 4000 characters I add to the\n            submission and can link to an individual status id'\n    NotFound:\n      allOf:\n        - $ref: '#/components/schemas/Problem'\n        - type: object\n          properties:\n            status:\n              example: 404\n            title:\n              example: Not Found\n            type:\n              example: https://httpstatuses.com/404\n    PermissionBasic:\n      allOf:\n        - type: object\n          properties:\n            code:\n              type: string\n              example: design_update\n            display:\n              type: string\n              description: The permission name\n              example: Design Update\n            description:\n              type: string\n              example: Can edit/update the form design\n            active:\n              type: boolean\n              example: true\n        - $ref: '#/components/schemas/TimeStampUserData'\n    Permission:\n      allOf:\n        - $ref: '#/components/schemas/PermissionBasic'\n        - type: object\n          properties:\n            roles:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleBasic'\n    Problem:\n      required:\n        - type\n        - title\n        - status\n        - detail\n      properties:\n        type:\n          type: string\n          description: What type of problem, link to explanation of problem\n        title:\n          type: string\n          description: Title of problem, generally the Http Status Code description\n        status:\n          type: string\n          description: The Http Status code\n        detail:\n          type: string\n          description: short description of why this problem was raised.\n    Role:\n      allOf:\n        - $ref: '#/components/schemas/RoleBasic'\n        - type: object\n          properties:\n            permissions:\n              type: array\n              items:\n                $ref: '#/components/schemas/PermissionBasic'\n    RoleBasic:\n      allOf:\n        - type: object\n          properties:\n            code:\n              type: string\n              example: form_designer\n            display:\n              type: string\n              description: The role name\n              example: Form Designer\n            description:\n              type: string\n              example: Designs the form\n            active:\n              type: boolean\n              example: true\n        - $ref: '#/components/schemas/TimeStampUserData'\n    StatusCodes:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            formId:\n              type: string\n              example: ccb5b715-1de5-4f4e-a4e6-0716b7671034\n            code:\n              type: string\n              example: COMPLETED\n            statusCode:\n              type: object\n              properties:\n                code:\n                  type: string\n                  example: COMPLETED\n                display:\n                  type: string\n                  example: Completed\n                nextCodes:\n                  type: array\n                  example:\n                    - ASSIGNED\n                    - COMPLETED\n                  items:\n                    type: string\n        - $ref: '#/components/schemas/TimeStampUserData'\n    SubmissionEditMetadata:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 5\n        updatedByUsername:\n          type: string\n          example: jsmith\n        actionTimestamp:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n        action:\n          type: string\n          example: U\n    SubmissionFormVersion:\n      type: object\n      properties:\n        submission:\n          $ref: '#/components/schemas/FormSubmission'\n        version:\n          $ref: '#/components/schemas/FormVersion'\n        form:\n          $ref: '#/components/schemas/Form'\n    SubmissionFormVersionOptions:\n      type: object\n      properties:\n        submission:\n          $ref: '#/components/schemas/FormSubmissionCore'\n        version:\n          $ref: '#/components/schemas/FormVersionCore'\n        form:\n          $ref: '#/components/schemas/FormOptions'\n    SubmissionStatus:\n      type: object\n      required:\n        - code\n      properties:\n        code:\n          type: string\n          description: |-\n            Status code to assign. Check the `/forms/{formId}/statusCodes` endpoint for valid\n            codes.\n          example: ASSIGNED\n        assignedToUserId:\n          type: string\n          description: Optional UserID assignment. Only applicable when `code` is `ASSIGNED`.\n          example: ccb5b715-1de5-4f4e-a4e6-0716b7671034\n        assignmentNotificationEmail:\n          type: string\n          description: |-\n            Optional email for dispatching assignment notifications. If this property is falsy, no notification will be sent.\n          example: jsmith@gov.bc.ca\n        actionDate:\n          type: string\n          description: |-\n            Optional time this status comes into effect. Defaults to now if unspecified.\n          example: '2020-06-04T18:49:20.672Z'\n        submissionUserEmail:\n          type: string\n          description: |-\n            Optional email address for dispatching an email notification to the submitter. If this property is falsy, no notification will be sent.\n          example: bsmith@gov.bc.ca\n        revisionNotificationEmailContent:\n          type: string\n          description: |-\n            Optional revision request email content. This plaintext string will be added to the revision requests email body contents.\n          example: foo bar\n    SubmissionStatusHistory:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              example: aeb3b705-1de5-4f4e-a4e6-0716b7671034\n            submissionId:\n              type: string\n              example: ccb5b715-1de5-4f4e-a4e6-0716b7671034\n            code:\n              type: string\n              example: COMPLETED\n            assignedToUserId:\n              type: string\n              example: dda7a123-1de5-4f4e-a4e6-0716b7671034\n            actionDate:\n              type: string\n              example: '2020-06-04T18:49:20.672Z'\n            user:\n              $ref: '#/components/schemas/User'\n        - $ref: '#/components/schemas/TimeStampUserData'\n    TemplateRenderObject:\n      type: object\n      properties:\n        options:\n          type: object\n          description: Object containing processing options\n          properties:\n            convertTo:\n              type: string\n              description: \u003e-\n                The desired file extension of the generated document, used for\n                converting to other types of document. If not supplied, will\n                just use the original contentFileType.\n              example: pdf\n            reportName:\n              type: string\n              description: \u003e-\n                The desired file name of the generated document, can accept\n                template substitution fields from the contexts. If not supplied,\n                will use a random UUID.  Extension will be from convertTo.\n              example: abc_123_{d.firstName}_{d.lastName}\n    TimeStampUserData:\n      type: object\n      properties:\n        createdBy:\n          type: string\n          example: bsmith@idir\n        createdAt:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n        updatedBy:\n          type: string\n          example: jsmith@idir\n        updatedAt:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n    User:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              description: ID of the user\n              example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n            keycloakID:\n              type: string\n              description: ID of the user in the external Keycloak system\n              example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n            username:\n              type: string\n              description: Username of this user\n              example: jsmith\n            firstName:\n              type: string\n              example: Jane\n            fullName:\n              type: string\n              example: Jane Smith\n            lastName:\n              type: string\n              example: Smith\n            email:\n              type: string\n              example: jsmith@gov.bc.\n            idpCode:\n              type: string\n              example: idir\n        - $ref: '#/components/schemas/TimeStampUserData'\n    UserAccess:\n      type: object\n      properties:\n        userId:\n          type: string\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        keycloakId:\n          type: string\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        username:\n          type: string\n          description: Username of this user\n          example: jsmith\n        firstName:\n          type: string\n          example: Jane\n        fullName:\n          type: string\n          example: Jane Smith\n        lastName:\n          type: string\n          example: Smith\n        email:\n          type: string\n          example: jsmith@gov.bc.ca\n        formId:\n          type: string\n          format: uuid\n          description: ID of the form\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        formName:\n          type: string\n          example: jsmith@gov.bc.ca\n        labels:\n          type: array\n          example:\n            - Survey\n          items:\n            type: string\n        active:\n          type: boolean\n          example: true\n        identityProviders:\n          type: array\n          description: the Identity Provider code associated with this form\n          example:\n            - bceid\n            - idir\n          items:\n            type: string\n        idps:\n          type: array\n          description: the Identity Provider idps associated with this form\n          example:\n            - bceid\n            - idir\n          items:\n            type: string\n        formVersionId:\n          type: string\n          description: ID of the current form version\n          example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n        version:\n          type: integer\n          description: Number of the current form version\n          example: 1\n        published:\n          type: boolean\n          example: true\n        versionUpdatedAt:\n          type: string\n          description: when latest form version was last updated\n          example: '2020-06-04T18:49:20.672Z'\n        roles:\n          type: array\n          description: the role codes this user has on this form\n          example:\n            - owner\n            - team_manager\n          items:\n            type: string\n        permissions:\n          type: array\n          description: the permission codes this user has on this form\n          example:\n            - design_update\n            - submission_create\n          items:\n            type: string\n    UserAccessSubmission:\n      type: object\n      properties:\n        active:\n          type: boolean\n          example: true\n        confirmationId:\n          type: string\n          example: 5DAD1EC9\n        createdAt:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n        description:\n          type: string\n          example: A BC Hunting licence application\n        draft:\n          type: boolean\n          example: true\n        enableStatusUpdates:\n          type: boolean\n          example: true\n        enableSubmitterDraft:\n          type: boolean\n          example: true\n        formId:\n          type: string\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        formSubmissionId:\n          type: string\n          example: 6dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        name:\n          type: string\n          example: Licence Application\n        permissions:\n          type: array\n          description: the permission codes this user has on this form\n          example:\n            - submission_delete\n            - submission_create\n          items:\n            type: string\n        user:\n          $ref: '#/components/schemas/User'\n        userId:\n          type: string\n          example: 7dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n    UserForm:\n      type: object\n      properties:\n        formId:\n          type: string\n          format: uuid\n          description: ID of the form\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        formName:\n          type: string\n          example: jsmith@gov.bc.ca\n        labels:\n          type: array\n          example:\n            - Form\n          items:\n            type: string\n        idps:\n          type: array\n          description: the Identity Provider code associated with this form\n          example:\n            - bceid\n            - idir\n          items:\n            type: string\n        active:\n          type: boolean\n          example: true\n        formVersionId:\n          type: string\n          description: ID of the current form version\n          example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n        version:\n          type: integer\n          description: Number of the current form version\n          example: 1\n        roles:\n          type: array\n          description: the role codes this user has on this form\n          example:\n            - owner\n            - team_manager\n          items:\n            type: string\n        permissions:\n          type: array\n          description: the permission codes this user has on this form\n          example:\n            - design_update\n            - submission_create\n          items:\n            type: string\n    UserFormBasic:\n      type: object\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        username:\n          type: string\n          example: jsmith\n        roles:\n          type: array\n          description: the role codes this user has on this form\n          example:\n            - owner\n            - team_manager\n          items:\n            type: string\n    FormPreferences:\n      type: object\n      description: Form level user preferences\n      properties:\n        columnList:\n          type: array\n          description: A list of desired columns to show\n          example:\n            - foo\n            - bar\n          items:\n            type: string\n    UserFormPreferences:\n      type: object\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ID of the user\n          example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987\n        formId:\n          type: string\n          format: uuid\n          description: ID of the form\n          example: a675ab2a-1e88-4fb5-88f9-c7cb051a18b2\n        preferences:\n          $ref: '#/components/schemas/FormPreferences'\n    UserPreferences:\n      type: object\n      properties:\n        forms:\n          type: array\n          description: A list of form specific preferences\n          items:\n            $ref: '#/components/schemas/UserFormPreferences'\n        preferences:\n          type: object\n          description: CHEFS app level user preferences\n          example: {}\n    UserSubmission:\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: If the submission is active\n          example: true\n        confirmationId:\n          type: string\n          description: The submission's Confirmation ID\n          example: B6F3E0EB\n        createdAt:\n          type: string\n          example: '2020-06-04T18:49:20.672Z'\n        description:\n          type: string\n          description: The form description\n          example: A form that allows a user to fill out a survey\n        enableStatusUpdates:\n          type: boolean\n          description: If the form uses status flow\n          example: true\n        enableSubmitterDraft:\n          type: boolean\n          description: If the form's submissions can be saved as draft\n          example: true\n        formId:\n          type: string\n          format: uuid\n          description: ID of the form\n          example: d9249b52-d97c-4d28-90e3-a39a94c847ea\n        formSubmissionId:\n          type: string\n          format: uuid\n          description: ID of the submission\n          example: b6f3e0eb-52e5-4c02-833e-d514e4610d1f\n        name:\n          type: string\n          description: The form name\n          example: NR survey form\n        permissions:\n          type: array\n          description: the permission codes this user has on this submission\n          example:\n            - submission_create\n            - submission_read\n            - submission_delete\n            - submission_update\n          items:\n            type: string\n        submissionStatus:\n          type: array\n          description: the permission codes this user has on this submission\n          items:\n            $ref: '#/components/schemas/SubmissionStatus'\n        userId:\n          type: string\n          format: uuid\n          description: ID of the user\n          example: b6f3e0eb-52e5-4c02-833e-d514e4610d1f\n        version:\n          type: integer\n          description: The version number of the form for a submission\n          example: 1\n    ValidationError:\n      allOf:\n        - $ref: '#/components/schemas/Problem'\n        - type: object\n          required:\n            - errors\n          properties:\n            errors:\n              type: array\n              items:\n                type: object\n                required:\n                  - message\n                properties:\n                  value:\n                    type: object\n                    description: Contents of the field that was in error.\n                    example: utf-8x\n                  message:\n                    type: string\n                    description: The error message for the field.\n                    example: Invalid value `encoding`.\n            status:\n              example: 422\n            title:\n              example: Unprocessable Entity\n            type:\n              example: https://httpstatuses.com/422\n  responses:\n    Accepted:\n      description: Accepted\n    BadRequest:\n      description: Request is missing content or is malformed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BadRequest'\n    Conflict:\n      description: Request conflicts with server state\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Conflict'\n    Error:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: Lack required role to perform action\n    NoContent:\n      description: Accepted and no content\n    NotFound:\n      description: Not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/NotFound'\n    UnauthorizedError:\n      description: Invalid authorization credentials\n    UnprocessableEntity:\n      description: \u003e-\n        The server was unable to process the contained instructions. Generally\n        validation error(s).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ValidationError'\n"
		}
	},
	"Error": "buildIR: make ir: path \"/files/{fileId}\": get: responses: 200: contents: filter most specific: parse content type \"application/\u003ctype\u003e\": mime: expected token after slash"
}