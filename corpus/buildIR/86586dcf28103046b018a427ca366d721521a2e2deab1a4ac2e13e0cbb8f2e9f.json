{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "n-auth.com-0.0.3-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/n-auth.com-0.0.3-swagger.yaml",
			"byteSize": 21461,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: nauthsec\n  description: API for the server\n  title: n-Auth\n  version: 0.0.3\n  x-apisguru-categories:\n    - security\n  x-logo:\n    url: https://twitter.com/nauthsec/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://www.n-auth.com/api/api/swagger.json\n      version: \"2.0\"\n  x-providerName: n-auth.com\npaths:\n  /nauth:\n    post:\n      description: |\n        Hook for the n-Auth protocol handler\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: byte\n              type: string\n        description: n-Auth protocol message\n        required: true\n      responses:\n        \"200\":\n          description: n-Auth protocol reply (raw bytes)\n          content:\n            application/octet-stream:\n              schema:\n                format: byte\n                type: string\n      summary: n-Auth protocol\n      tags:\n        - n-Auth Protocol\n  /servers/:\n    post:\n      description: Create a new server. Required permission 'createserver'\n      parameters:\n        - description: Name for the server\n          in: query\n          name: servername\n          required: true\n          schema:\n            type: string\n        - description: Owner id\n          in: query\n          name: owner\n          required: true\n          schema:\n            type: integer\n        - description: PIN protection enabled\n          in: query\n          name: pinEnabled\n          required: false\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n        description: Base64 encoded server logo\n        required: true\n      responses:\n        \"200\":\n          description: true if the server was created\n          content:\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Create a new server\n      tags:\n        - Servers\n  \"/servers/{server}\":\n    get:\n      description: |\n        Returns the configuration of a specific server.\n        Required permission: 'servers' or 'createserver' \n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Server config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n      security:\n        - api_key: []\n      summary: Configuration of specific server\n      tags:\n        - Servers\n    put:\n      description: |\n        Update the configuration of a specific server.\n        Required permission: 'createserver' \n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: server name\n          in: query\n          name: serverName\n          required: false\n          schema:\n            type: string\n        - description: time (minutes) since the last time the user entered his PIN, that\n            the user is not requested a PIN at login.\n          in: query\n          name: pinTimeout\n          required: false\n          schema:\n            type: integer\n        - description: time (minutes) since the last time the user entered his PIN, that\n            the user is not requested a PIN at transaction approval.\n          in: query\n          name: pinTransTimeout\n          required: false\n          schema:\n            type: integer\n        - description: time (seconds) that the n-Auth app has to reply to a ping request\n            from the n-Auth server (continious authentication).\n          in: query\n          name: pingTime\n          required: false\n          schema:\n            type: integer\n        - description: server flags\n          in: query\n          name: serverFlags\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n        description: Base64 encoded server logo\n      responses:\n        \"200\":\n          description: Server config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Config\"\n      security:\n        - api_key: []\n      summary: Update configuration of specific server\n      tags:\n        - Servers\n  \"/servers/{server}/accounts/{accountid}/\":\n    delete:\n      description: |\n        Delete an account. Required permission 'accounts'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Accountid\n          in: path\n          name: accountid\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: On successful delete\n        \"404\":\n          description: Account not found\n      security:\n        - api_key: []\n      summary: Delete specific account\n      tags:\n        - Users\n    get:\n      description: |\n        Returns the account\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Accountid\n          in: path\n          name: accountid\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Account\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n      security:\n        - api_key: []\n      summary: Get specific account. Required permission 'sessions' or 'accounts'\n      tags:\n        - Users\n    put:\n      description: \u003e\n        Update an account. The only available change is (un)blocking the\n        account. Required permission 'accounts'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Accountid\n          in: path\n          name: accountid\n          required: true\n          schema:\n            type: integer\n        - description: True if the account is blocked\n          in: query\n          name: blocked\n          required: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Account after update\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n      security:\n        - api_key: []\n      summary: Update specific account\n      tags:\n        - Users\n  \"/servers/{server}/accounts/{accountid}/provokelogin/{nonce}/\":\n    post:\n      description: Provoke a login in the n-Auth app on the given session. Required\n        permission 'sessions' or 'accounts'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n        - description: Accountid\n          in: path\n          name: accountid\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: ok or fail\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Provoke a login\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/sessions/{nonce}/\":\n    get:\n      description: \u003e\n        Based on the browser/webserver session identifier, check if the user is\n        logged in and return the associated username. The n-Auth server can\n        handle multiple realms in which a user can separately be registrated.\n        This also returns additional information: the data for a login visual\n        (qr/nauth) code and whether or not a loggin can be provoked directly\n        from the server. \n\n        Required permission: 'sessions'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n        - description: Realm for the user registeration.\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Current login status.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LoginStatus\"\n      security:\n        - api_key: []\n      summary: Check if the user is logged in\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/sessions/{nonce}/logout\":\n    post:\n      description: |\n        Force a logout on the given session\n\n        Required permission: 'sessions' \n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: ok or fail\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Force a logout on the given session\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/sessions/{nonce}/provokelogin\":\n    post:\n      description: \u003e\n        Provoke a login in the n-Auth app on the given session. Required\n        permission: 'sessions'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: ok or fail\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Provoke a login\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/sessions/{nonce}/qr\":\n    get:\n      description: |\n        Returns the data for a n-auth or qr code.\n        Required permission: 'sessions'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: ENROL or LOGIN\n          in: query\n          name: type\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n        - description: Type of image to show (currently 'nauth' and 'qr' are supported,\n            format is PNG). If not set, the raw data encoded in the image will\n            be returned.\n          in: query\n          name: img\n          required: false\n          schema:\n            type: string\n        - description: Only for ENROL, name to forward to the n-Auth app for this account.\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: Only for ENROL, userid to register this user under.\n          in: query\n          name: userid\n          required: false\n          schema:\n            type: string\n        - description: Only for ENROL (and if userid is set), realm of the userid\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Raw byte array containing qr/n-auth code data (either raw or as a\n            PNG image).\n      security:\n        - api_key: []\n      summary: Generate data for a qr code\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/sessions/{nonce}/registeruser\":\n    post:\n      description: Register a user (under a certain realm) for the currently logged in\n        user. You can also directly pass a userid when generating an ENROL qr\n        code. Required permission 'users'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n        - description: Userid to register\n          in: query\n          name: userid\n          required: true\n          schema:\n            type: string\n        - description: Realm for the user registeration.\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: ok or fail\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Register a userid for the given realm.\n      tags:\n        - Users\n  \"/servers/{server}/users/\":\n    get:\n      description: \u003e\n        Returns an array of arrays containing all accounts corresponding to all\n        users\n\n        Required permission: 'users'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Only for ENROL (and if userid is set), realm of the userid\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Array of users\n      security:\n        - api_key: []\n      summary: Get all users\n      tags:\n        - Users\n  \"/servers/{server}/users/{userid}/\":\n    get:\n      description: |\n        Returns an array containing all accounts corresponding to this user\n        Required permission: 'sessions' or 'users'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: realm of the userid\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n        - description: Userid\n          in: path\n          name: userid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Array of accounts\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n      security:\n        - api_key: []\n      summary: Get specific user\n      tags:\n        - Users\n  \"/servers/{server}/users/{userid}/provokelogin/{nonce}/\":\n    post:\n      description: Provoke a login in the n-Auth app on the given session. Required\n        permission 'users' or 'sessions'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n        - description: Base64 encoded nonce to identify the browser/webserver session\n          in: path\n          name: nonce\n          required: true\n          schema:\n            type: string\n        - description: realm of the userid\n          in: query\n          name: realm\n          required: false\n          schema:\n            type: string\n        - description: Userid\n          in: path\n          name: userid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: ok or fail\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n        - api_key: []\n      summary: Provoke a login\n      tags:\n        - Basic Login/logout\n  \"/servers/{server}/vash/\":\n    get:\n      description: Returns a PNG of the visual hash corresponding to this server. Required\n        permission 'sessions' or 'servers'\n      parameters:\n        - description: Base64 encoded server id\n          in: path\n          name: server\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Raw byte array containing qr/n-auth code data (either raw or as a\n            PNG image).\n      security:\n        - api_key: []\n      summary: Visual hash of this server\n      tags:\n        - Servers\nservers:\n  - url: https://www.n-auth.com/n\ncomponents:\n  securitySchemes:\n    api_key:\n      in: header\n      name: x-apikey\n      type: apiKey\n  schemas:\n    Account:\n      properties:\n        blocked:\n          description: True if the account is blocked\n          type: boolean\n        created:\n          description: timestamp of creation\n          type: integer\n        description:\n          description: description of the account (e.g. device name)\n          type: string\n        id:\n          description: Account id\n          type: integer\n        lastlogin:\n          description: timestamp of last login\n          type: integer\n        permVersion:\n          description: Protocol version number\n          type: integer\n        publicKeyAuthRevoked:\n          description: True if the authentication key has been revoked\n          type: boolean\n        publicKeyTransRevoked:\n          description: True if the transaction key has been revoked\n          type: boolean\n        serverId:\n          description: server id\n          type: integer\n      required:\n        - blocked\n        - description\n        - id\n        - permVersion\n        - publicKeyAuthRevoked\n        - serverId\n    Config:\n      properties:\n        logo:\n          description: Base 64 encoded logo\n          type: string\n        pinTimeout:\n          description: time (minutes) since the last time the user entered his PIN, that\n            the user is not requested a PIN at login. -1 means that the user is\n            never asked for a PIN before logging in, 0 means that the user is\n            asked every time he wants to login\n          type: integer\n        pinTransTimeout:\n          description: time (minutes) since the last time the user entered his PIN, that\n            the user is not requested a PIN at transaction approval. -1 means\n            that the user is never asked for a PIN before approving a\n            transaction, 0 means that the user is asked every time he wants to\n            approve a transaction\n          type: integer\n        pingTime:\n          description: time (seconds) that the n-Auth app has before it needs to reply to a\n            ping request from the n-Auth server (continious authentication)\n          type: integer\n        serverFlags:\n          description: server flags\n          items:\n            type: string\n          type: array\n        serverName:\n          description: serverName\n          type: string\n        serverid:\n          description: Base64 encoded id of the n-Auth server\n          type: string\n        serverpk:\n          description: Base64 encoded public key of the n-Auth server\n          type: string\n      required:\n        - logo\n        - pinTimeout\n        - pinTransTimeout\n        - pingTime\n        - serverFlags\n        - serverName\n        - serverid\n        - serverpk\n    LoginStatus:\n      properties:\n        canprovoke:\n          description: True if a login can be pushed from the server, false otherwise\n          type: boolean\n        loggedin:\n          description: True if the user is loggedin, false otherwise\n          type: boolean\n        loginqrdata:\n          description: Base 64 encoded data that is represented in a LOGIN qr/nauth code\n          type: string\n        pk:\n          description: Base64 encoded public key of the n-Auth app. This uniquely\n            identifies the account on the n-Auth app, regardless of the username\n          type: string\n        userid:\n          description: Username.\n          type: string\n      required:\n        - loggedin\n    Status:\n      properties:\n        result:\n          description: True if the operation succeeded, false otherwise\n          type: boolean\n      required:\n        - result\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/n-auth.com-0.0.3-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/n-auth.com-0.0.3-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/servers/{server}\": put: requestBody: contents: application/octet-stream: octet stream with \"string\" schema not supported"
}