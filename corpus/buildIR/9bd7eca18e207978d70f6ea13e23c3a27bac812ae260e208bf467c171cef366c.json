{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jupyterhub/jupyterhub"
		},
		"file": {
			"name": "rest-api.yml",
			"size": 0,
			"path": "docs/source/_static/rest-api.yml",
			"byteSize": 44433,
			"content": "openapi: 3.0.3\n# note: 3.1.0 required for requestBody on DELETE\n# which we should maybe move away from\ninfo:\n  title: JupyterHub\n  description: The REST API for JupyterHub\n  license:\n    name: BSD-3-Clause\n  version: 2.3.0.dev\nservers:\n  - url: /hub/api\nsecurity:\n  - token: []\n  - oauth2:\n      - self\npaths:\n  /:\n    get:\n      summary: Get JupyterHub version\n      description: |\n        This endpoint is not authenticated for the purpose of clients and user\n        to identify the JupyterHub version before setting up authentication.\n      responses:\n        200:\n          description: The JupyterHub version\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    description: The version of JupyterHub itself\n  /info:\n    get:\n      summary: Get detailed info about JupyterHub\n      description: |\n        Detailed JupyterHub information, including Python version,\n        JupyterHub's version and executable path,\n        and which Authenticator and Spawner are active.\n      responses:\n        200:\n          description: Detailed JupyterHub info\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    description: The version of JupyterHub itself\n                  python:\n                    type: string\n                    description: The Python version, as returned by sys.version\n                  sys_executable:\n                    type: string\n                    description: The path to sys.executable running JupyterHub\n                  authenticator:\n                    type: object\n                    properties:\n                      class:\n                        type: string\n                        description:\n                          The Python class currently active for JupyterHub\n                          Authentication\n                      version:\n                        type: string\n                        description: The version of the currently active Authenticator\n                  spawner:\n                    type: object\n                    properties:\n                      class:\n                        type: string\n                        description:\n                          The Python class currently active for spawning\n                          single-user notebook servers\n                      version:\n                        type: string\n                        description: The version of the currently active Spawner\n      security:\n        - oauth2:\n            - read:hub\n  /user:\n    get:\n      summary: Return authenticated user's model\n      responses:\n        200:\n          description: |\n            The authenticated user or service's model is returned\n            with additional information about the permissions associated with the request token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestIdentity\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:users:activity\n            - read:servers\n            - read:roles:users\n            - admin:auth_state\n            - admin:server_state\n  /users:\n    get:\n      summary: List users\n      parameters:\n        - name: state\n          in: query\n          description: |\n            Return only users who have servers in the given state.\n            If unspecified, return all users.\n\n            active: all users with any active servers (ready OR pending)\n            ready: all users who have any ready servers (running, not pending)\n            inactive: all users who have *no* active servers (complement of active)\n\n            Added in JupyterHub 1.3\n          schema:\n            type: string\n            enum:\n              - inactive\n              - active\n              - ready\n        - name: offset\n          in: query\n          description: |\n            Return a number users starting at the given offset.\n            Can be used with limit to paginate.\n            If unspecified, return all users.\n          schema:\n            type: number\n        - name: limit\n          in: query\n          description: |\n            Return a finite number of users.\n            Can be used with offset to paginate.\n            If unspecified, use api_page_default_limit.\n          schema:\n            type: number\n      responses:\n        200:\n          description: The Hub's user list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:users:activity\n            - read:servers\n            - read:roles:users\n            - admin:auth_state\n            - admin:server_state\n    post:\n      summary: Create multiple users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                usernames:\n                  type: array\n                  description: list of usernames to create on the Hub\n                  items:\n                    type: string\n                admin:\n                  type: boolean\n                  description: whether the created users should be admins\n        required: true\n      responses:\n        201:\n          description: The users have been created\n          content:\n            application/json:\n              schema:\n                type: array\n                description: The created users\n                items:\n                  $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /users/{name}:\n    get:\n      summary: Get a user by name\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The User model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:users:activity\n            - read:servers\n            - read:roles:users\n            - admin:auth_state\n            - admin:server_state\n    post:\n      summary: Create a single user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: The user has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n    delete:\n      summary: Delete a user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The user has been deleted\n          content: {}\n      security:\n        - oauth2:\n            - admin:users\n    patch:\n      summary: Modify a user\n      description: Change a user's name or admin status\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description:\n          Updated user info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description:\n                    the new name (optional, if another key is updated i.e.\n                    admin)\n                admin:\n                  type: boolean\n                  description:\n                    update admin (optional, if another key is updated i.e.\n                    name)\n        required: true\n      responses:\n        200:\n          description: The updated user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /users/{name}/activity:\n    post:\n      summary: Notify Hub of activity for a given user.\n      description:\n        Notify the Hub of activity by the user, e.g. accessing a service\n        or (more likely) actively using a server.\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                last_activity:\n                  type: string\n                  description: |\n                    Timestamp of last-seen activity for this user.\n                    Only needed if this is not activity associated\n                    with using a given server.\n                  format: date-time\n                servers:\n                  type: object\n                  properties:\n                    \u003cserver name\u003e:\n                      required:\n                        - last_activity\n                      type: object\n                      properties:\n                        last_activity:\n                          type: string\n                          description: |\n                            Timestamp of last-seen activity on this server.\n                          format: date-time\n                      description: |\n                        Activity for a single server.\n                  description: |\n                    Register activity for specific servers by name.\n                    The keys of this dict are the names of servers.\n                    The default server has an empty name ('').\n              example:\n                last_activity: 2019-02-06T12:54:14Z\n                servers:\n                  \"\":\n                    last_activity: 2019-02-06T12:54:14Z\n                  gpu:\n                    last_activity: 2019-02-06T12:54:14Z\n        required: false\n      responses:\n        401:\n          description: Authentication/Authorization error\n          content: {}\n        404:\n          description: No such user\n          content: {}\n      security:\n        - oauth2:\n            - users:activity\n      x-codegen-request-body-name: body\n  /users/{name}/server:\n    post:\n      summary: Start a user's single-user notebook server\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          Spawn options can be passed as a JSON body\n          when spawning via the API instead of spawn form.\n          The structure of the options\n          will depend on the Spawner's configuration.\n          The body itself will be available as `user_options` for the\n          Spawner.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        201:\n          description: The user's notebook server has started\n          content: {}\n        202:\n          description:\n            The user's notebook server has not yet started, but has been\n            requested\n          content: {}\n      security:\n        - oauth2:\n            - servers\n      x-codegen-request-body-name: options\n    delete:\n      summary: Stop a user's server\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description:\n            The user's notebook server has not yet stopped as it is taking\n            a while to stop\n          content: {}\n        204:\n          description: The user's notebook server has stopped\n          content: {}\n      security:\n        - oauth2:\n            - servers\n  /users/{name}/servers/{server_name}:\n    post:\n      summary: Start a user's single-user named-server notebook server\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n        - name: server_name\n          in: path\n          description: |\n            name given to a named-server.\n\n            Note that depending on your JupyterHub infrastructure there are chracterter size limitation to `server_name`. Default spawner with K8s pod will not allow Jupyter Notebooks to be spawned with a name that contains more than 253 characters (keep in mind that the pod will be spawned with extra characters to identify the user and hub).\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          Spawn options can be passed as a JSON body\n          when spawning via the API instead of spawn form.\n          The structure of the options\n          will depend on the Spawner's configuration.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        201:\n          description: The user's notebook named-server has started\n          content: {}\n        202:\n          description:\n            The user's notebook named-server has not yet started, but has\n            been requested\n          content: {}\n      security:\n        - oauth2:\n            - servers\n      x-codegen-request-body-name: options\n    delete:\n      summary: Stop a user's named server\n      description: |\n        To remove the named server in addition to deleting it,\n        the body may be a JSON dictionary with a boolean `remove` field:\n\n        ```json\n        {\"remove\": true}\n        ```\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n        - name: server_name\n          in: path\n          description: name given to a named-server\n          required: true\n          schema:\n            type: string\n\n      # FIXME: openapi 3.1 is required for requestBody on DELETE\n      # we probably shouldn't have request bodies on DELETE\n      # requestBody:\n      #   content:\n      #     application/json:\n      #       schema:\n      #         type: object\n      #         properties:\n      #           remove:\n      #             type: boolean\n      #             description: |\n      #               Whether to fully remove the server, rather than just stop it.\n      #               Removing a server deletes things like the state of the stopped server.\n      #               Default: false.\n      #   required: false\n      responses:\n        202:\n          description:\n            The user's notebook named-server has not yet stopped as it\n            is taking a while to stop\n          content: {}\n        204:\n          description: The user's notebook named-server has stopped\n          content: {}\n      security:\n        - oauth2:\n            - servers\n      # x-codegen-request-body-name: body\n  /users/{name}/tokens:\n    get:\n      summary: List tokens for the user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The list of tokens\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Token\"\n        401:\n          description: Authentication/Authorization error\n          content: {}\n        404:\n          description: No such user\n          content: {}\n      security:\n        - oauth2:\n            - read:tokens\n    post:\n      summary: Create a new token for the user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                expires_in:\n                  type: number\n                  description:\n                    lifetime (in seconds) after which the requested token\n                    will expire.\n                note:\n                  type: string\n                  description: A note attached to the token for future bookkeeping\n                roles:\n                  type: array\n                  description: |\n                    A list of role names from which to derive scopes.\n                    This is a shortcut for assigning collections of scopes;\n                    Tokens do not retain role assignment.\n                    (Changed in 2.3: roles are immediately resolved to scopes\n                    instead of stored on roles.)\n                  items:\n                    type: string\n                scopes:\n                  type: array\n                  description: |\n                    A list of scopes that the token should have.\n                    (new in JupyterHub 2.3).\n                  items:\n                    type: string\n        required: false\n      responses:\n        201:\n          description: The newly created token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n        400:\n          description: Body must be a JSON dict or empty\n          content: {}\n        403:\n          description: Requested role does not exist\n          content: {}\n      security:\n        - oauth2:\n            - tokens\n      x-codegen-request-body-name: token_params\n  /users/{name}/tokens/{token_id}:\n    get:\n      summary: Get the model for a token by id\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n        - name: token_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The info for the new token\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n      security:\n        - oauth2:\n            - read:tokens\n    delete:\n      summary: Delete (revoke) a token by id\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n        - name: token_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The token has been deleted\n          content: {}\n      security:\n        - oauth2:\n            - tokens\n  /groups:\n    get:\n      summary: List groups\n      parameters:\n        - name: offset\n          in: query\n          description: |\n            Return a number of groups starting at the specified offset.\n            Can be used with limit to paginate.\n            If unspecified, return all groups.\n          schema:\n            type: number\n        - name: limit\n          in: query\n          description: |\n            Return a finite number of groups.\n            Can be used with offset to paginate.\n            If unspecified, use api_page_default_limit.\n          schema:\n            type: number\n      responses:\n        200:\n          description: The list of groups\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n  /groups/{name}:\n    get:\n      summary: Get a group by name\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The group model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n    post:\n      summary: Create a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: The group has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - admin:groups\n    delete:\n      summary: Delete a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The group has been deleted\n          content: {}\n      security:\n        - oauth2:\n            - admin:groups\n  /groups/{name}/users:\n    post:\n      summary: Add users to a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The users to add to the group\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                users:\n                  type: array\n                  description: List of usernames to add to the group\n                  items:\n                    type: string\n        required: true\n      responses:\n        200:\n          description: The users have been added to the group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n    delete:\n      summary: |\n        Remove users from a group\n      description: |\n        Body should be a JSON dictionary\n        where `users` is a list of usernames to remove from the groups.\n\n        ```json\n        {\n          \"users\": [\"name1\", \"name2\"]\n        }\n        ```\n\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      # requestBody:\n      #   description: The users to remove from the group\n      #   content:\n      #     application/json:\n      #       schema:\n      #         type: object\n      #         properties:\n      #           users:\n      #             type: array\n      #             description: List of usernames to remove from the group\n      #             items:\n      #               type: string\n      #   required: true\n      responses:\n        200:\n          description: The users have been removed from the group\n          content: {}\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n  /services:\n    get:\n      summary: List services\n      responses:\n        200:\n          description: The service list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Service\"\n      security:\n        - oauth2:\n            - read:services\n            - read:services:name\n            - read:roles:services\n  /services/{name}:\n    get:\n      summary: Get a service by name\n      parameters:\n        - name: name\n          in: path\n          description: service name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The Service model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n      security:\n        - oauth2:\n            - read:services\n            - read:services:name\n            - read:roles:services\n  /proxy:\n    get:\n      summary: Get the proxy's routing table\n      description:\n        A convenience alias for getting the routing table directly from\n        the proxy\n      parameters:\n        - name: offset\n          in: query\n          description: |\n            Return a number of routes starting at the given offset.\n            Can be used with limit to paginate.\n            If unspecified, return all routes.\n          schema:\n            type: number\n        - name: limit\n          in: query\n          description: |\n            Return a finite number of routes.\n            Can be used with offset to paginate.\n            If unspecified, use api_page_default_limit\n          schema:\n            type: number\n      responses:\n        200:\n          description: Routing table\n          content:\n            application/json:\n              schema:\n                type: object\n                description:\n                  configurable-http-proxy routing table (see configurable-http-proxy\n                  docs for details)\n      security:\n        - oauth2:\n            - proxy\n    post:\n      summary: Force the Hub to sync with the proxy\n      responses:\n        200:\n          description: Success\n          content: {}\n      security:\n        - oauth2:\n            - proxy\n    patch:\n      summary: Notify the Hub about a new proxy\n      description: Notifies the Hub of a new proxy to use.\n      requestBody:\n        description:\n          Any values that have changed for the new proxy. All keys are\n          optional.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ip:\n                  type: string\n                  description: IP address of the new proxy\n                port:\n                  type: string\n                  description: Port of the new proxy\n                protocol:\n                  type: string\n                  description: Protocol of new proxy, if changed\n                auth_token:\n                  type: string\n                  description: CONFIGPROXY_AUTH_TOKEN for the new proxy\n        required: true\n      responses:\n        200:\n          description: Success\n          content: {}\n      security:\n        - oauth2:\n            - proxy\n      x-codegen-request-body-name: body\n  /authorizations/token:\n    post:\n      summary: Request a new API token\n      description: |\n        Request a new API token to use with the JupyterHub REST API.\n        If not already authenticated, username and password can be sent\n        in the JSON request body.\n        Logging in via this method is only available when the active Authenticator\n        accepts passwords (e.g. not OAuth).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n        required: false\n      responses:\n        200:\n          description: The new API token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: The new API token.\n        403:\n          description: The user can not be authenticated.\n          content: {}\n      security:\n        - oauth2:\n            - tokens\n      x-codegen-request-body-name: credentials\n  /authorizations/token/{token}:\n    get:\n      summary: Identify a user or service from an API token\n      parameters:\n        - name: token\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The user or service identified by the API token\n          content: {}\n        404:\n          description: A user or service is not found.\n          content: {}\n      security:\n        - oauth2:\n            - (no_scope)\n  /authorizations/cookie/{cookie_name}/{cookie_value}:\n    get:\n      summary: Identify a user from a cookie\n      description:\n        Used by single-user notebook servers to hand off cookie authentication\n        to the Hub\n      parameters:\n        - name: cookie_name\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: cookie_value\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The user identified by the cookie\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        404:\n          description: A user is not found.\n          content: {}\n      deprecated: true\n  /oauth2/authorize:\n    get:\n      summary: OAuth 2.0 authorize endpoint\n      description: |\n        Redirect users to this URL to begin the OAuth process.\n        It is not an API endpoint.\n      parameters:\n        - name: client_id\n          in: query\n          description: The client id\n          required: true\n          schema:\n            type: string\n        - name: response_type\n          in: query\n          description: The response type (always 'code')\n          required: true\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: A state string\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          description: The redirect url\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content: {}\n        400:\n          description: OAuth2Error\n          content: {}\n  /oauth2/token:\n    post:\n      summary: Request an OAuth2 token\n      description: |\n        Request an OAuth2 token from an authorization code.\n        This request completes the OAuth process.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - client_id\n                - client_secret\n                - code\n                - grant_type\n                - redirect_uri\n              properties:\n                client_id:\n                  type: string\n                  description: The client id\n                client_secret:\n                  type: string\n                  description: The client secret\n                grant_type:\n                  type: string\n                  description: The grant type (always 'authorization_code')\n                code:\n                  type: string\n                  description: The code provided by the authorization redirect\n                redirect_uri:\n                  type: string\n                  description: The redirect url\n        required: true\n      responses:\n        200:\n          description: JSON response including the token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                    description: The new API token for the user\n                  token_type:\n                    type: string\n                    description: Will always be 'Bearer'\n  /shutdown:\n    post:\n      summary: Shutdown the Hub\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                proxy:\n                  type: boolean\n                  description:\n                    Whether the proxy should be shutdown as well (default\n                    from Hub config)\n                servers:\n                  type: boolean\n                  description:\n                    Whether users' notebook servers should be shutdown\n                    as well (default from Hub config)\n        required: false\n      responses:\n        202:\n          description: Shutdown successful\n          content: {}\n        400:\n          description: Unexpeced value for proxy or servers\n          content: {}\n      security:\n        - oauth2:\n            - shutdown\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The user's name\n        admin:\n          type: boolean\n          description: Whether the user is an admin\n        roles:\n          type: array\n          description: The names of roles this user has\n          items:\n            type: string\n        groups:\n          type: array\n          description: The names of groups where this user is a member\n          items:\n            type: string\n        server:\n          type: string\n          description:\n            The user's notebook server's base URL, if running; null if\n            not.\n        pending:\n          type: string\n          description: The currently pending action, if any\n          enum:\n            - spawn\n            - stop\n        last_activity:\n          type: string\n          description: Timestamp of last-seen activity from the user\n          format: date-time\n        servers:\n          type: array\n          description: The active servers for this user.\n          items:\n            $ref: \"#/components/schemas/Server\"\n        auth_state:\n          type: object\n          properties: {}\n          description: |\n            Authentication state of the user. Only available with admin:users:auth_state\n            scope. None otherwise.\n    Server:\n      type: object\n      properties:\n        name:\n          type: string\n          description:\n            The server's name. The user's default server has an empty name\n            ('')\n        ready:\n          type: boolean\n          description: |\n            Whether the server is ready for traffic.\n            Will always be false when any transition is pending.\n        pending:\n          type: string\n          description: |\n            The currently pending action, if any.\n            A server is not ready if an action is pending.\n          enum:\n            - spawn\n            - stop\n        url:\n          type: string\n          description: |\n            The URL where the server can be accessed\n            (typically /user/:name/:server.name/).\n        progress_url:\n          type: string\n          description: |\n            The URL for an event-stream to retrieve events during a spawn.\n        started:\n          type: string\n          description: UTC timestamp when the server was last started.\n          format: date-time\n        last_activity:\n          type: string\n          description: UTC timestamp last-seen activity on this server.\n          format: date-time\n        state:\n          type: object\n          properties: {}\n          description:\n            Arbitrary internal state from this server's spawner. Only available\n            on the hub's users list or get-user-by-name method, and only with admin:users:server_state\n            scope. None otherwise.\n        user_options:\n          type: object\n          properties: {}\n          description:\n            User specified options for the user's spawned instance of a\n            single-user server.\n    RequestIdentity:\n      description: |\n        The model for the entity making the request.\n        Extends User or Service model to add information about the specific credentials (e.g. session or token-authorised scopes).\n      allOf:\n        - type: object\n          oneOf:\n            - $ref: \"#/components/schemas/User\"\n            - $ref: \"#/components/schemas/Service\"\n          discriminator:\n            propertyName: kind\n            mapping:\n              user: \"#/components/schemas/User\"\n              service: \"#/components/schemas/Service\"\n        - type: object\n          properties:\n            session_id:\n              type: string\n              nullable: true\n              description: |\n                The session id associated with the request's OAuth token, if any.\n                null, if the request token not associated with a session id.\n\n                Added in 2.0.\n            scopes:\n              type: array\n              description: |\n                The list of all expanded scopes the request credentials have access to.\n\n                Added in 2.0.\n              items:\n                type: string\n              example:\n                - \"read:users\"\n                - \"access:servers!user=name\"\n    Group:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The group's name\n        users:\n          type: array\n          description: The names of users who are members of this group\n          items:\n            type: string\n        roles:\n          type: array\n          description: The names of roles this group has\n          items:\n            type: string\n    Service:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The service's name\n        admin:\n          type: boolean\n          description: Whether the service is an admin\n        roles:\n          type: array\n          description: The names of roles this service has\n          items:\n            type: string\n        url:\n          type: string\n          description: The internal url where the service is running\n        prefix:\n          type: string\n          description: The proxied URL prefix to the service's url\n        pid:\n          type: number\n          description: The PID of the service process (if managed)\n        command:\n          type: array\n          description: The command used to start the service (if managed)\n          items:\n            type: string\n        info:\n          type: object\n          properties: {}\n          description: |\n            Additional information a deployment can attach to a service.\n            JupyterHub does not use this field.\n    Token:\n      type: object\n      properties:\n        token:\n          type: string\n          description:\n            The token itself. Only present in responses to requests for\n            a new token.\n        id:\n          type: string\n          description:\n            The id of the API token. Used for modifying or deleting the\n            token.\n        user:\n          type: string\n          description: The user that owns a token (undefined if owned by a service)\n        service:\n          type: string\n          description: The service that owns the token (undefined of owned by a user)\n        roles:\n          type: array\n          description:\n            Deprecated in JupyterHub 2.3, always an empty list. Tokens\n            have 'scopes' starting from JupyterHub 2.3.\n          items:\n            type: string\n        scopes:\n          type: array\n          description:\n            List of scopes this token has been assigned. New in JupyterHub\n            2.3. In JupyterHub 2.0-2.2, tokens were assigned 'roles' insead of scopes.\n          items:\n            type: string\n        note:\n          type: string\n          description:\n            A note about the token, typically describing what it was created\n            for.\n        created:\n          type: string\n          description: Timestamp when this token was created\n          format: date-time\n        expires_at:\n          type: string\n          description: Timestamp when this token expires. Null if there is no expiry.\n          format: date-time\n        last_activity:\n          type: string\n          description: |\n            Timestamp of last-seen activity using this token.\n            Can be null if token has never been used.\n          format: date-time\n        session_id:\n          type: string\n          nullable: true\n          description: |\n            The session id associated with the token, if any.\n            Only used for tokens set during oauth flows.\n\n            Added in 2.0.\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content: {}\n    Unauthorized:\n      description: Authentication/Authorization error\n      content: {}\n  securitySchemes:\n    token:\n      type: apiKey\n      name: Authorization\n      in: header\n    oauth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://hub.example/hub/api/oauth2/authorize\n          tokenUrl: https://hub.example/hub/api/oauth2/token\n          scopes:\n            (no_scope): Identify the owner of the requesting entity.\n            self:\n              The user’s own resources _(metascope for users, resolves to (no_scope)\n              for services)_\n            inherit:\n              Everything that the token-owning entity can access _(metascope\n              for tokens)_\n            admin-ui:\n              Access the admin page. Permission to take actions via the admin\n              page granted separately.\n            admin:users:\n              Read, write, create and delete users and their authentication\n              state, not including their servers or tokens.\n            admin:auth_state: Read a user’s authentication state.\n            users:\n              Read and write permissions to user models (excluding servers, tokens\n              and authentication state).\n            delete:users: Delete users.\n            list:users: List users, including at least their names.\n            read:users:\n              Read user models (excluding including servers, tokens and\n              authentication state).\n            read:users:name: Read names of users.\n            read:users:groups: Read users’ group membership.\n            read:users:activity: Read time of last user activity.\n            read:roles: Read role assignments.\n            read:roles:users: Read user role assignments.\n            read:roles:services: Read service role assignments.\n            read:roles:groups: Read group role assignments.\n            users:activity: Update time of last user activity.\n            admin:servers:\n              Read, start, stop, create and delete user servers and their\n              state.\n            admin:server_state: Read and write users’ server state.\n            servers: Start and stop user servers.\n            read:servers:\n              Read users’ names and their server models (excluding the\n              server state).\n            delete:servers: Stop and delete users' servers.\n            tokens: Read, write, create and delete user tokens.\n            read:tokens: Read user tokens.\n            admin:groups: Read and write group information, create and delete groups.\n            groups:\n              Read and write group information, including adding/removing users\n              to/from groups.\n            list:groups: List groups, including at least their names.\n            read:groups: Read group models.\n            read:groups:name: Read group names.\n            delete:groups: Delete groups.\n            list:services: List services, including at least their names.\n            read:services: Read service models.\n            read:services:name: Read service names.\n            read:hub: Read detailed information about the Hub.\n            access:servers: Access user servers via API or browser.\n            access:services: Access services via API or browser.\n            proxy:\n              Read information about the proxy’s routing table, sync the Hub\n              with the proxy and notify the Hub about a new proxy.\n            shutdown: Shutdown the hub.\n            read:metrics: Read prometheus metrics.\n",
			"canonicalURL": "/github.com/jupyterhub/jupyterhub@02da11e06ed447417e0de6ba5b8fb4ec53738e21/-/blob/docs/source/_static/rest-api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/jupyterhub/jupyterhub/blob/02da11e06ed447417e0de6ba5b8fb4ec53738e21/docs/source/_static/rest-api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/user\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"oauth2 security"
	]
}