{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "echo_api.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/echo_api.yaml",
			"byteSize": 5786,
			"content": "#\n# Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nopenapi: 3.0.3\ninfo:\n  title: Echo Server API\n  description: Echo Server API\n  contact:\n    email: team@openapitools.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.1.0\nservers:\n  - url: http://localhost:3000/\npaths:\n  # Path usually starts with parameter type such as path, query, header, form\n  # For body/form parameters, path starts with \"/echo\" so the the echo server\n  # will response with the same body in the HTTP request.\n  #\n  # path parameter tests\n  /path/string/{path_string}/integer/{path_integer}:\n    get:\n      tags:\n        - path \n      summary: Test path parameter(s)\n      description: Test path parameter(s)\n      operationId: tests/path/string/{path_string}/integer/{path_integer}\n      parameters:\n      - in: path \n        name: path_string\n        required: true\n        schema:\n          type: string\n      - in: path \n        name: path_integer\n        required: true\n        schema:\n          type: integer \n      responses:\n        '200':\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  # query parameter tests\n  /query/integer/boolean/string:\n    get:\n      tags:\n        - query\n      summary: Test query parameter(s)\n      description: Test query parameter(s)\n      operationId: test/query/integer/boolean/string\n      parameters:\n      - in: query\n        name: integer_query \n        style: form #default\n        explode: true #default\n        schema:\n          type: integer\n      - in: query\n        name: boolean_query \n        style: form #default\n        explode: true #default\n        schema:\n          type: boolean\n      - in: query\n        name: string_query \n        style: form #default\n        explode: true #default\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  /query/style_form/explode_true/array_string:\n    get:\n      tags:\n        - query\n      summary: Test query parameter(s)\n      description: Test query parameter(s)\n      operationId: test/query/style_form/explode_true/array_string\n      parameters:\n      - in: query\n        name: query_object\n        style: form #default\n        explode: true #default\n        schema:\n          type: object\n          properties:\n            values:\n                type: array\n                items:\n                    type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  /query/style_form/explode_true/object:\n    get:\n      tags:\n        - query\n      summary: Test query parameter(s)\n      description: Test query parameter(s)\n      operationId: test/query/style_form/explode_true/object\n      parameters:\n      - in: query\n        name: query_object\n        style: form #default\n        explode: true #default\n        schema:\n          $ref: '#/components/schemas/Pet'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n  /echo/body/Pet:\n    post:\n      tags:\n        - body\n      summary: Test body parameter(s)\n      description: Test body parameter(s)\n      operationId: test/echo/body/Pet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n\ncomponents:\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: pet\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a8265b6eec3ca372e28d49de38cf6f4b032a937/-/blob/modules/openapi-generator/src/test/resources/3_0/echo_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a8265b6eec3ca372e28d49de38cf6f4b032a937/modules/openapi-generator/src/test/resources/3_0/echo_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/query/style_form/explode_true/array_string\": get: parameters: \"query_object\": field \"Values\": nested arrays not allowed"
}