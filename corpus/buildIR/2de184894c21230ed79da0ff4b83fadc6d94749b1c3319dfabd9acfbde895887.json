{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse-cdt-cloud/trace-server-protocol"
		},
		"file": {
			"name": "API-proposed.yaml",
			"size": 0,
			"path": "API-proposed.yaml",
			"byteSize": 82143,
			"content": "###############################################################################\n# Copyright (c) 2018, 2022 Ericsson\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n###############################################################################\nopenapi: 3.0.1\ninfo:\n  title: Trace Server Protocol\n  description: \"Open source REST API for viewing and analyzing any type of logs or\\\n    \\ traces. Its goal is to provide models to populate views, graphs, metrics, and\\\n    \\ more to help extract useful information from traces, in a way that is more user-friendly\\\n    \\ and informative than huge text dumps.\"\n  termsOfService: https://www.eclipse.org/tracecompass/\n  contact:\n    email: tracecompass-dev@eclipse.org\n  license:\n    name: Apache 2\n    url: http://www.apache.org/licenses/\n  version: 0.1.0\nservers:\n- url: https://localhost:8080/tsp/api\n  variables: {}\ntags:\n- name: Annotations\n  description: Retrieve annotations for different outputs.\n- name: Diagnostic\n  description: Refer to the server's status.\n- name: Experiments\n  description: \"How to manage experiments on your server; an experiment represents\\\n    \\ a collection of traces, which can produce output models.\"\n- name: Styles\n  description: Retrieve styles for different outputs.\n- name: TimeGraph\n  description: Learn about querying Time Graph models.\n- name: Traces\n  description: How to manage physical traces on your server.\n- name: Virtual Tables\n  description: Learn about querying virtual table models (e.g. Events Table).\n- name: XY\n  description: Learn about querying XY models.\n- name: Bookmarks\n  description: How to bookmark areas of interest in the trace.\n- name: Data Tree\n  description: Learn about querying generic data tree models.\n- name: Filters\n  description: How to filter and query.\n- name: Features\n  description: Discover the features which are available on a given server.\n- name: Symbols\n  description: Learn how to provide symbol providers.\npaths:\n  /experiments/{expUUID}/outputs/{outputId}/annotations:\n    get:\n      tags:\n      - Annotations\n      summary: API to get annotation categories associated to this experiment and\n        output\n      operationId: getAnnotationCategories\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      - name: markerSetId\n        in: query\n        description: The optional requested marker set's id\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Annotation categories\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationCategoriesResponse'\n        \"400\":\n          description: Missing parameter outputId\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n    post:\n      tags:\n      - Annotations\n      summary: API to get the annotations associated to this experiment and output\n      operationId: getAnnotations\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: \"Query parameters to fetch the annotations. The object 'requested_timerange'\\\n          \\ is the requested time range and number of samples. The array 'requested_items'\\\n          \\ is the list of entryId being requested. The string 'requested_marker_set'\\\n          \\ is the optional requested marker set's id. The array 'requested_marker_categories'\\\n          \\ is the list of requested annotation categories; if absent, all annotations\\\n          \\ are returned.\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnnotationsQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n                  nbTimes: 1920\n                requested_items:\n                - 1\n                - 2\n                requested_marker_set: markerSetId\n                requested_marker_categories:\n                - category1\n                - category2\n        required: true\n      responses:\n        \"200\":\n          description: Annotation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputId}/arrows:\n    post:\n      tags:\n      - TimeGraph\n      summary: API to get the Time Graph arrows\n      description: \"Unique entry point for all TimeGraph models, ensures that the\\\n        \\ same template is followed for all models\"\n      operationId: getArrows\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph arrows. The object 'requested_timerange'\n          is the requested time range and number of samples.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ArrowsQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n                  nbTimes: 1920\n        required: true\n      responses:\n        \"200\":\n          description: Returns a sampled list of TimeGraph arrows\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeGraphArrowsResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/table/{outputId}/columns:\n    post:\n      tags:\n      - Virtual Tables\n      summary: API to get table columns\n      description: \"Unique entry point for output providers, to get the column entries\"\n      operationId: getColumns\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the table columns\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OptionalQueryParameters'\n            example:\n              parameters: {}\n        required: true\n      responses:\n        \"200\":\n          description: Returns a list of table headers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TableColumnHeadersResponse'\n        \"400\":\n          description: Invalid query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/table/{outputId}/lines:\n    post:\n      tags:\n      - Virtual Tables\n      summary: API to get virtual table lines\n      operationId: getLines\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: \"Query parameters to fetch the table lines. One of 'requested_table_index'\\\n          \\ or 'requested_times' should be present. If 'requested_table_index' is\\\n          \\ used it is the starting index of the lines to be returned. If 'requested_times'\\\n          \\ is used it should contain an array with a single timestamp. The returned\\\n          \\ lines starting at the given timestamp (or the nearest following) will\\\n          \\ be returned. The 'requested_table_count' is the number of lines that should\\\n          \\ be returned. When 'requested_table_column_ids' is absent all columns are\\\n          \\ returned. When present it is the array of requested columnIds. Use 'table_search_expressions'\\\n          \\ for search providing a map of \u003ccolumnId, regular expression\u003e. Returned\\\n          \\ lines that match the search expression will be tagged. Use 'table_search_direction'\\\n          \\ to specify search direction [NEXT, PREVIOUS]. If present, 'requested_table_count'\\\n          \\ events are returned starting from the first matching event. Matching and\\\n          \\ not matching events are returned. Matching events will be tagged. If no\\\n          \\ matches are found, an empty list will be returned.\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinesQueryParameters'\n            example:\n              parameters:\n                requested_table_index: 0\n                requested_table_count: 100\n                requested_table_column_ids:\n                - 0\n                - 1\n                - 2\n                table_search_expressions:\n                  \"1\": cpu.*\n                table_search_direction: NEXT\n        required: true\n      responses:\n        \"200\":\n          description: Returns a table model with a 2D array of strings and metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VirtualTableResponse'\n        \"400\":\n          description: Invalid query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n        \"500\":\n          description: Error reading the experiment\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/markerSets:\n    get:\n      tags:\n      - Annotations\n      summary: API to get marker sets available for this experiment\n      operationId: getMarkerSets\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: List of marker sets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MarkerSetsResponse'\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/{outputId}:\n    get:\n      tags:\n      - Experiments\n      summary: Get the output descriptor for this experiment and output\n      operationId: getProvider\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns the output provider descriptor\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProvider'\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs:\n    get:\n      tags:\n      - Experiments\n      summary: Get the list of outputs for this experiment\n      operationId: getProviders\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: Returns a list of output provider descriptors\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataProvider'\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputId}/states:\n    post:\n      tags:\n      - TimeGraph\n      summary: API to get the Time Graph states\n      description: \"Unique entry point for all TimeGraph states, ensures that the\\\n        \\ same template is followed for all views\"\n      operationId: getStates\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph states. The object 'requested_timerange'\n          is the requested time range and number of samples. The array 'requested_items'\n          is the list of entryId being requested.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestedQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n                  nbTimes: 1920\n                requested_items:\n                - 1\n                - 2\n        required: true\n      responses:\n        \"200\":\n          description: Returns a list of time graph rows\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeGraphStatesResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/{outputId}/style:\n    post:\n      tags:\n      - Styles\n      summary: API to get the style map associated to this experiment and output\n      operationId: getStyles\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the style map\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OptionalQueryParameters'\n            example:\n              parameters: {}\n        required: true\n      responses:\n        \"200\":\n          description: Style model that can be used jointly with OutputElementStyle\n            to retrieve specific style values\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StylesResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tooltip:\n    post:\n      tags:\n      - TimeGraph\n      summary: API to get a Time Graph tooltip\n      description: Endpoint to retrieve tooltips for time graph\n      operationId: getTimeGraphTooltip\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph tooltip. The array 'requested_times'\n          is an array with a single timestamp. The array 'requested_items' is an array\n          with a single entryId being requested.  The object 'requested_element' is\n          the element for which the tooltip is requested.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TooltipQueryParameters'\n            example:\n              parameters:\n                requested_times:\n                - 111200000\n                requested_items:\n                - 1\n                requested_element:\n                  elementType: state\n                  time: 111100000\n                  duration: 100000\n        required: true\n      responses:\n        \"200\":\n          description: Returns a list of tooltip keys to values\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeGraphTooltipResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputId}/tree:\n    post:\n      tags:\n      - TimeGraph\n      summary: API to get the Time Graph tree\n      description: \"Unique entry point for output providers, to get the tree of visible\\\n        \\ entries\"\n      operationId: getTimeGraphTree\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph tree. The object 'requested_timerange'\n          specifies the requested time range. When absent the tree for the full range\n          is returned.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TreeQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n        required: true\n      responses:\n        \"200\":\n          description: \"Returns a list of Time Graph entries. The returned model must\\\n            \\ be consistent, parentIds must refer to a parent which exists in the\\\n            \\ model.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeGraphTreeResponse'\n        \"400\":\n          description: Invalid query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputId}/xy:\n    post:\n      tags:\n      - XY\n      summary: API to get the XY model\n      description: \"Unique endpoint for all xy models, ensures that the same template\\\n        \\ is followed for all endpoints.\"\n      operationId: getXY\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the XY model. The object 'requested_timerange'\n          is the requested time range and number of samples. The array 'requested_items'\n          is the list of entryId or seriesId being requested.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestedQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n                  nbTimes: 1920\n                requested_items:\n                - 1\n                - 2\n        required: true\n      responses:\n        \"200\":\n          description: Return the queried XYResponse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XYResponse'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputId}/tree:\n    post:\n      tags:\n      - XY\n      summary: API to get the XY tree\n      description: \"Unique entry point for output providers, to get the tree of visible\\\n        \\ entries\"\n      operationId: getXYTree\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: outputId\n        in: path\n        description: ID of the output provider to query\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Query parameters to fetch the XY tree. The object 'requested_timerange'\n          specifies the requested time range. When absent the tree for the full range\n          is returned.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TreeQueryParameters'\n            example:\n              parameters:\n                requested_timerange:\n                  start: 111111111\n                  end: 222222222\n        required: true\n      responses:\n        \"200\":\n          description: \"Returns a list of XY entries. The returned model must be consistent,\\\n            \\ parentIds must refer to a parent which exists in the model.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XYTreeResponse'\n        \"400\":\n          description: Invalid query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n        \"405\":\n          description: Analysis cannot run\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}:\n    get:\n      tags:\n      - Experiments\n      summary: Get the model object for an experiment\n      operationId: getExperiment\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: Return the experiment model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Experiment'\n        \"404\":\n          description: No such experiment\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      tags:\n      - Experiments\n      summary: Remove an experiment from the server\n      operationId: deleteExperiment\n      parameters:\n      - name: expUUID\n        in: path\n        description: UUID of the experiment to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: \"The trace was successfully deleted, return the deleted experiment.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Experiment'\n        \"404\":\n          description: No such experiment\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      summary: Update an experiment's content and name.\n      operationId: putExperiment\n      tags:\n        - Experiments\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to modify\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: name\n          in: query\n          description: The name to give this experiment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Additional information to update an experiment\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                expTypeID:\n                  description: Type ID to apply to this experiment\n                  type: string\n                traces:\n                  description: Traces to modify in this experiment\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      traceUUID:\n                        description: The unique identifier of the trace\n                        type: string\n                        format: uuid\n                      timeOffset:\n                        description: Time offset to apply to this trace\n                        type: integer\n                        format: int64\n                      action:\n                        description: Action to perform on the given trace (add or remove from the experiment)\n                        type: string\n                        enum: [add, remove]\n                        default: add\n                    required:\n                      - traceUUID\n                      - action\n      responses:\n        200:\n          description: The Experiment was successfully modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n  /experiments:\n    get:\n      tags:\n      - Experiments\n      summary: Get the list of experiments on the server\n      operationId: getExperiments\n      responses:\n        \"200\":\n          description: Returns a list of experiments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Experiment'\n    post:\n      tags:\n      - Experiments\n      summary: Create a new experiment on the server\n      operationId: postExperiment\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExperimentQueryParameters'\n        required: true\n      responses:\n        \"200\":\n          description: The experiment was successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Experiment'\n        \"204\":\n          description: The experiment has at least one trace which hasn't been created\n            yet\n          content:\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"409\":\n          description: The experiment (name) already exists and both differ\n          content:\n            application/json:\n              schema:\n                type: string\n        \"500\":\n          description: Internal trace-server error while trying to post experiment\n          content:\n            application/json:\n              schema:\n                type: string\n  /health:\n    get:\n      tags:\n      - Diagnostic\n      summary: Get the health status of this server\n      operationId: getHealthStatus\n      responses:\n        \"200\":\n          description: The trace server is running and ready to receive requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerStatus'\n        \"503\":\n          description: The trace server is unavailable or in maintenance and cannot\n            receive requests\n  /traces/{uuid}:\n    get:\n      tags:\n      - Traces\n      summary: Get the model object for a trace\n      operationId: getTrace\n      parameters:\n      - name: uuid\n        in: path\n        description: UUID of the trace to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: Return the trace model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trace'\n        \"404\":\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      tags:\n      - Traces\n      summary: Remove a trace from the server and disk\n      operationId: deleteTrace\n      parameters:\n      - name: uuid\n        in: path\n        description: UUID of the trace to query\n        required: true\n        schema:\n          type: string\n          format: uuid\n      responses:\n        \"200\":\n          description: The trace was successfully deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trace'\n        \"404\":\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n        \"409\":\n          description: The trace is in use by at least one experiment thus cannot\n            be deleted\n          content:\n            application/json:\n              schema:\n                type: string\n  /traces:\n    get:\n      tags:\n      - Traces\n      summary: Get the list of physical traces imported on the server\n      operationId: getTraces\n      responses:\n        \"200\":\n          description: Returns a list of traces\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Trace'\n    post:\n      tags:\n      - Traces\n      summary: Import a trace\n      description: Import a trace to the trace server. Return some base information\n        once imported.\n      operationId: putTrace\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TraceQueryParameters'\n        required: true\n      responses:\n        \"200\":\n          description: The trace has been successfully added to the trace server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trace'\n        \"400\":\n          description: Missing query parameters\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n        \"406\":\n          description: Cannot read this trace type\n          content:\n            application/json:\n              schema:\n                type: string\n        \"409\":\n          description: There was already a trace with this name\n          content:\n            application/json:\n              schema:\n                type: string\n        \"500\":\n          description: Trace resource creation failed\n          content:\n            application/json:\n              schema:\n                type: string\n        \"501\":\n          description: Trace type not supported\n          content:\n            application/json:\n              schema:\n                type: string\n  /about/traceTypes:\n    get:\n      summary: Get the list of trace types supported by this server.\n      operationId: getTraceTypes\n      tags:\n        - Features\n      responses:\n        200:\n          description: List of the trace types supported by this server.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ID:\n                      description: The unique identifier for this trace type\n                      type: string\n                    description:\n                      description: Human readable description of this trace type\n                      type: string\n                    versions:\n                      description: List supported versions\n                      type: array\n                      items:\n                        type: string\n  /about/outputTypes:\n    get:\n      summary: Get the list of outputs supported by this server.\n      tags:\n        - Features\n      responses:\n        200:\n          description: List of the output types supported by this server.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ID:\n                      description: The unique identifier for this output provider type\n                      type: string\n                    description:\n                      description: Human readable description of this output type\n                      type: string\n                    versions:\n                      description: List supported versions\n                      type: array\n                      items:\n                        type: string\n  /filters:\n    get:\n      summary: Get the list of filters available.\n      operationId: getFilters\n      tags:\n        - Filters\n      responses:\n        200:\n          description: List of filters available.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Filter\"\n    post:\n      summary: Create a new filter.\n      operationId: addFilter\n      tags:\n        - Filters\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Human readable label for this filter\n                  type: string\n                start:\n                  description: start time for this filter\n                  type: integer\n                  format: int64\n                end:\n                  description: end time for this filter\n                  type: integer\n                  format: int64\n                filterExpression:\n                  description: expression from the filter language\n                  type: string\n                tags:\n                  description: Desired tags to apply when an elements pass the filter\n                  type: integer\n                  format: int32\n              required:\n                - start\n                - end\n                - filterExpression\n      responses:\n        200:\n          description: Created filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n  /filters/{filterID}:\n    get:\n      summary: Get the filter with the given ID.\n      operationId: getFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: The filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n    put:\n      summary: Update the given filter.\n      operationId: updateFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Human readable label for this filter\n                  type: string\n                start:\n                  description: start time for this filter\n                  type: integer\n                  format: int64\n                end:\n                  description: end time for this filter\n                  type: integer\n                  format: int64\n                filterExpression:\n                  description: expression from the filter language\n                  type: string\n                tags:\n                  description: Desired tags to apply when an elements pass the filter\n                  type: integer\n                  format: int32\n      responses:\n        200:\n          description: The filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n    delete:\n      summary: Delete the given filter\n      operationId: deleteFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: The deleted filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n        204:\n          description: There was no filter with this ID to delete\n  /symbols/{hostID}/{PID}:\n    post:\n      tags:\n        - Symbols\n      summary: Import/Upload a symbol provider.\n      operationId: addSymbolProvider\n      parameters:\n        - name: hostID\n          in: path\n          description: Host ID for the symbol provider\n          required: true\n          schema:\n            type: string\n        - name: PID\n          in: path\n          description: PID for the symbol provider\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.\n                  type: string\n      responses:\n        200:\n          description: The symbol provider has been successfully added to the trace server.\n        406:\n          description: \"Not acceptable: cannot read this symbol provider type\"\n    get:\n      tags:\n        - Symbols\n      summary: Gets the symbol providers\n      operationId: getSymbols\n      parameters:\n        - name: hostID\n          in: path\n          description: The host's ID\n          required: true\n          schema:\n            type: string\n        - name: PID\n          in: path\n          description: Process ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the Symbol providers for this query.\n        404:\n          description: No such Host, Thread and address combination.\n  /experiments/{expUUID}/bookmarks:\n    get:\n      summary: Get the collection of bookmarks for an experiment.\n      operationId: getExperimentBookmarks\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns a list of bookmarks for this trace\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such experiment\n          content:\n            application/json:\n              schema:\n                type: string\n    post:\n      summary: Add a bookmark to an experiment.\n      operationId: postExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: The bookmark to post\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bookmark\"\n      responses:\n        200:\n          description: Returns the bookmark's Id\n          content:\n            application/json:\n              schema:\n                type: integer\n        404:\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/bookmarks/{bookmarkId}:\n    get:\n      summary: Get a specific bookmark from this experiment\n      operationId: getExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to get\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns the queried bookmark\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such experiment / No such bookmark\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      summary: Modify a bookmark\n      operationId: putExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to modify\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The bookmark to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bookmark\"\n      responses:\n        200:\n          description: Returns the bookmark's Id\n          content:\n            application/json:\n              schema:\n                type: integer\n        404:\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      summary: Delete a bookmark\n      operationId: deleteExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns the deleted bookmark\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such trace or bookmark\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/data/{outputID}/tree:\n    post:\n      tags:\n        - Data Tree\n      summary: API to get a data tree.\n      description: Unique entry point for output providers,\n        to get the tree of visible entries\n      operationId: getDataTreeEntry\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the data tree.\n          When 'requested_times' is absent the tree for the full range is returned. When present it specifies a range as [start, end].\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111, 222222222]\n      responses:\n        200:\n          description: Returns a list of data tree entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/TreeEntryModel\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputID}/tooltip:\n    get:\n      tags:\n        - XY\n      summary: API to get the XY tooltips.\n      description: Endpoint to retrieve tooltips for XY\n      operationId: getXYTooltip\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n        - name: xValue\n          in: query\n          description: The xValue for which to get the tooltip\n          required: true\n          schema:\n            type: integer\n        - name: yValue\n          in: query\n          description: The yValue for which to get the tooltip\n          schema:\n            type: number\n        - name: entryId\n          in: query\n          description: The entryId or seriesId for which to get the tooltip\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Returns a list of tooltip keys to values\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    key:\n                      type: string\n                    value:\n                      type: string\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/navigate/states:\n    post:\n      tags:\n        - TimeGraph\n      summary: Tentative API for TimeGraph navigation\n      operationId: navigateStates\n      description: Endpoint to retrieve the next / previous corresponding states\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n        - name: direction\n          in: query\n          description: Direction of the navigation\n          required: true\n          schema:\n            type: string\n            enum: [next, previous]\n      requestBody:\n        description:\n          Query parameters to fetch the next / previous timegraph state.\n          The 'requested_times' array contains the currently selected time.\n          The 'requested_times' array contains the currently selected entryId.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                  required:\n                    - requested_times\n                    - requested_items\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111]\n                  requested_items: [1]\n      responses:\n        200:\n          description: Returns a list of time graph row\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      desiredTime:\n                        type: integer\n                        format: int64\n                      desiredEntry:\n                        type: integer\n                        format: int64\n                      model:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/TimeGraphModel\"\ncomponents:\n  schemas:\n    AnnotationCategoriesModel:\n      type: object\n      properties:\n        annotationCategories:\n          type: array\n          description: Array of all the categories\n          items:\n            type: string\n      description: Model returned by outputs that contains annotation categories available\n        for this output\n    AnnotationCategoriesResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/AnnotationCategoriesModel'\n    GenericResponse:\n      type: object\n      properties:\n        statusMessage:\n          type: string\n        status:\n          type: string\n          description: All possible statuses for a server response\n          enum:\n          - RUNNING\n          - COMPLETED\n          - FAILED\n          - CANCELLED\n      description: Response that includes the status and a status message\n    Annotation:\n      required:\n      - duration\n      - entryId\n      - time\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of annotation indicating its location\n          enum:\n          - CHART\n          - TREE\n        time:\n          type: integer\n          description: Time of this annotation\n          format: int64\n        duration:\n          type: integer\n          description: Duration of this annotation\n          format: int64\n        style:\n          $ref: '#/components/schemas/OutputElementStyle'\n        entryId:\n          type: integer\n          description: Entry's unique ID or -1 if annotation not associated with an\n            entry\n          format: int64\n        label:\n          type: string\n          description: Text label of this annotation\n      description: An annotation is used to mark an interesting area at a given time\n        or time range\n    AnnotationModel:\n      type: object\n      properties:\n        annotations:\n          type: object\n          additionalProperties:\n            type: array\n            description: Map of annotations where the keys are categories\n            items:\n              $ref: '#/components/schemas/Annotation'\n          description: Map of annotations where the keys are categories\n      description: Model returned by outputs that contains annotations per category\n    AnnotationResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/AnnotationModel'\n    OutputElementStyle:\n      type: object\n      properties:\n        parentKey:\n          type: string\n          description: \"Parent style key or empty if there is no parent. The parent\\\n            \\ key should match a style key defined in the style model and is used\\\n            \\ for style inheritance. A comma-delimited list of parent style keys can\\\n            \\ be used for style composition, the last one taking precedence.\"\n        values:\n          type: object\n          additionalProperties:\n            type: object\n            description: Style values or empty map if there are no values. Keys and\n              values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java\n          description: Style values or empty map if there are no values. Keys and\n            values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java\n      description: \"Represents the style on an element (ex. Entry, TimeGraphState,\\\n        \\ ...) returned by any output. Supports style inheritance. To avoid having\\\n        \\ too many styles, the element style can have a parent style and will have\\\n        \\ all the same style property values as the parent, and can add or override\\\n        \\ style properties.\"\n    AnnotationsParameters:\n      required:\n      - requested_timerange\n      type: object\n      properties:\n        requested_timerange:\n          $ref: '#/components/schemas/TimeRange'\n        requested_items:\n          type: array\n          items:\n            type: integer\n            format: int32\n        requested_marker_set:\n          type: string\n        requested_marker_categories:\n          type: array\n          items:\n            type: string\n    AnnotationsQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/AnnotationsParameters'\n    TimeRange:\n      required:\n      - end\n      - start\n      type: object\n      properties:\n        nbTimes:\n          type: integer\n          description: The number of timestamps to be sampled (1-65536) in the given\n            range\n          format: int32\n        start:\n          type: integer\n          description: The start of the time range\n          format: int64\n        end:\n          type: integer\n          description: The end of the time range\n          format: int64\n      description: A time range with optional number of timestamps to be sampled\n    TimeGraphArrow:\n      required:\n      - end\n      - sourceId\n      - start\n      - targetId\n      type: object\n      properties:\n        targetId:\n          type: integer\n          description: Target entry's unique ID\n          format: int64\n        start:\n          type: integer\n          description: Start time for this arrow\n          format: int64\n        style:\n          $ref: '#/components/schemas/OutputElementStyle'\n        sourceId:\n          type: integer\n          description: Source entry's unique ID\n          format: int64\n        end:\n          type: integer\n          description: End time for this arrow\n          format: int64\n    TimeGraphArrowsResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            type: array\n            items:\n              $ref: '#/components/schemas/TimeGraphArrow'\n    ArrowsParameters:\n      required:\n      - requested_timerange\n      type: object\n      properties:\n        requested_timerange:\n          $ref: '#/components/schemas/TimeRange'\n    ArrowsQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/ArrowsParameters'\n    TableColumnHeader:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Displayed name for this column\n        id:\n          type: integer\n          description: Unique id to identify this column in the backend\n          format: int64\n        type:\n          type: string\n          description: Type of data associated to this column\n        description:\n          type: string\n          description: Description of the column\n    TableColumnHeadersResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            type: array\n            items:\n              $ref: '#/components/schemas/TableColumnHeader'\n    OptionalParameters:\n      type: object\n    OptionalQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/OptionalParameters'\n    VirtualTableCell:\n      type: object\n      properties:\n        content:\n          type: string\n          description: Content of the cell for this line\n        tags:\n          type: integer\n          description: Specific tags for this cell. A value of 0 should be handled\n            as none (no tags)\n          format: int32\n    VirtualTableLine:\n      type: object\n      properties:\n        index:\n          type: integer\n          description: The index of this line in the virtual table\n          format: int64\n        tags:\n          type: integer\n          description: \"Tags for the entire line. A bit mask to apply for tagging\\\n            \\ elements (e.g. table lines, states). This can be used by the server\\\n            \\ to indicate if a filter matches and what action to apply. Use 0 for\\\n            \\ no tags, 1 and 2 are reserved, 4 for 'BORDER' and 8 for 'HIGHLIGHT'.\"\n          format: int32\n        cells:\n          type: array\n          description: The content of the cells for this line. This array matches\n            the column ids returned above\n          items:\n            $ref: '#/components/schemas/VirtualTableCell'\n    VirtualTableModel:\n      type: object\n      properties:\n        size:\n          type: integer\n          description: \"Number of events. If filtered, the size will be the number\\\n            \\ of events that match the filters\"\n          format: int64\n        columnIds:\n          type: array\n          description: The array of column ids that are returned. They should match\n            the content of the lines' content\n          items:\n            type: integer\n            format: int64\n        lowIndex:\n          type: integer\n          description: Index in the virtual table of the first returned event\n          format: int64\n        lines:\n          type: array\n          items:\n            $ref: '#/components/schemas/VirtualTableLine'\n    VirtualTableResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/VirtualTableModel'\n    LinesParameters:\n      required:\n      - requested_table_count\n      type: object\n      properties:\n        requested_times:\n          type: array\n          items:\n            type: integer\n            format: int64\n        requested_table_index:\n          type: integer\n          format: int64\n        requested_table_count:\n          type: integer\n          format: int32\n        requested_table_column_ids:\n          type: array\n          items:\n            type: integer\n            format: int64\n        table_search_expressions:\n          type: object\n          additionalProperties:\n            type: string\n        table_search_direction:\n          type: string\n          description: \"Search next or previous item (e.g. event, state etc.)\"\n          enum:\n          - NEXT\n          - PREVIOUS\n    LinesQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/LinesParameters'\n    MarkerSet:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of this marker set\n        id:\n          type: string\n          description: ID of this marker set\n      description: A marker set is used to represent a set of annotations that can\n        be fetched\n    MarkerSetsResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            type: array\n            items:\n              $ref: '#/components/schemas/MarkerSet'\n    DataProvider:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The human readable name\n        id:\n          type: string\n          description: The output provider's ID\n        type:\n          type: string\n          description: \"Type of data returned by this output. Serves as a hint to\\\n            \\ determine what kind of view should be used for this output (ex. XY,\\\n            \\ Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH\\\n            \\ can be grouped under the same time axis. Providers of type DATA_TREE\\\n            \\ only provide a tree with columns and don't have any XY nor time graph\\\n            \\ data associated with it.\"\n          enum:\n          - TABLE\n          - TREE_TIME_XY\n          - TIME_GRAPH\n          - DATA_TREE\n        description:\n          type: string\n          description: Describes the output provider's features\n    TimeGraphModel:\n      type: object\n      properties:\n        rows:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeGraphRowModel'\n    TimeGraphRowModel:\n      required:\n      - entryId\n      - states\n      type: object\n      properties:\n        states:\n          type: array\n          description: List of the time graph entry states associated to this entry\n            and zoom level\n          items:\n            $ref: '#/components/schemas/TimeGraphState'\n        entryId:\n          type: integer\n          description: The entry to map this state list to\n          format: int64\n    TimeGraphState:\n      required:\n      - end\n      - start\n      type: object\n      properties:\n        tags:\n          type: integer\n          description: Tags to apply on this state. A value of 0 should be handled\n            as none (no tags)\n          format: int32\n        start:\n          type: integer\n          description: Start time for this state\n          format: int64\n        style:\n          $ref: '#/components/schemas/OutputElementStyle'\n        label:\n          type: string\n          description: \"Text label to apply to this TimeGraphState if resolution permits.\\\n            \\ Optional, no label is applied if absent\"\n        end:\n          type: integer\n          description: End time for this state\n          format: int64\n    TimeGraphStatesResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/TimeGraphModel'\n    RequestedParameters:\n      required:\n      - requested_items\n      - requested_timerange\n      type: object\n      properties:\n        requested_timerange:\n          $ref: '#/components/schemas/TimeRange'\n        requested_items:\n          type: array\n          items:\n            type: integer\n            format: int32\n    RequestedQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/RequestedParameters'\n    OutputStyleModel:\n      type: object\n      properties:\n        styles:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OutputElementStyle'\n      description: Map of styles specific to an output where values give hints on\n        the style. The keys are strings that can be used in OutputElementStyle\n    StylesResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/OutputStyleModel'\n    TimeGraphTooltip:\n      type: object\n      properties:\n        value:\n          type: string\n        key:\n          type: string\n    TimeGraphTooltipResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            type: array\n            items:\n              $ref: '#/components/schemas/TimeGraphTooltip'\n    Element:\n      required:\n      - duration\n      - elementType\n      - time\n      type: object\n      properties:\n        time:\n          type: integer\n          description: Element's start time\n          format: int64\n        elementType:\n          type: string\n          description: The type of element\n          enum:\n          - STATE\n          - ANNOTATION\n          - ARROW\n        duration:\n          type: integer\n          description: Element's duration\n          format: int64\n        entryId:\n          type: integer\n          description: \"Entry's unique ID (annotation, arrow)\"\n          format: int64\n        destinationId:\n          type: integer\n          description: Destination entry's unique ID (arrow)\n          format: int64\n      description: An element model to be identified\n    TooltipParameters:\n      required:\n      - requested_element\n      - requested_items\n      - requested_times\n      type: object\n      properties:\n        requested_element:\n          $ref: '#/components/schemas/Element'\n        requested_times:\n          type: array\n          items:\n            type: integer\n            format: int64\n        requested_items:\n          type: array\n          items:\n            type: integer\n            format: int32\n    TooltipQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/TooltipParameters'\n    TimeGraphEntry:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/TreeDataModel'\n      - type: object\n        properties:\n          start:\n            type: integer\n            description: Beginning of the range for which this entry exists\n            format: int64\n          metadata:\n            type: object\n            additionalProperties:\n              type: array\n              description: Optional metadata map for domain specific data for matching data\n                across data providers. Keys for the same data shall be the same across\n                data providers. Only values of type Number or String are allowed.\n                For each key all values shall have the same type.\n              items:\n                type: object\n                description: Optional metadata map for domain specific data for matching data\n                  across data providers. Keys for the same data shall be the same\n                  across data providers. Only values of type Number or String are\n                  allowed. For each key all values shall have the same type.\n            description: Optional metadata map for domain specific data for matching data across\n              data providers. Keys for the same data shall be the same across data\n              providers. Only values of type Number or String are allowed. For each\n              key all values shall have the same type.\n          end:\n            type: integer\n            description: End of the range for which this entry exists\n            format: int64\n    TimeGraphTreeModel:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/TreeEntryModel'\n      - type: object\n        properties:\n          entries:\n            type: array\n            items:\n              $ref: '#/components/schemas/TimeGraphEntry'\n    TimeGraphTreeResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/TimeGraphTreeModel'\n    TreeColumnHeader:\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: Displayed name for this header\n        tooltip:\n          type: string\n          description: \"Displayed tooltip for this header. Optional, no tooltip is\\\n            \\ applied if absent.\"\n    TreeDataModel:\n      required:\n      - id\n      - labels\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Unique id to identify this entry in the backend\n          format: int64\n        hasData:\n          type: boolean\n          description: Whether or not this entry has data\n        style:\n          $ref: '#/components/schemas/OutputElementStyle'\n        parentId:\n          type: integer\n          description: \"Unique id to identify this parent's entry, optional if this\\\n            \\ entry does not have a parent.\"\n          format: int64\n        labels:\n          type: array\n          description: Array of cell labels to be displayed. The length of the array\n            and the index of each column need to correspond to the header array returned\n            in the tree model.\n          items:\n            type: string\n      description: Base entry returned by tree endpoints\n    TreeEntryModel:\n      required:\n      - entries\n      type: object\n      properties:\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/TreeDataModel'\n        headers:\n          type: array\n          items:\n            $ref: '#/components/schemas/TreeColumnHeader'\n    TreeParameters:\n      type: object\n      properties:\n        requested_times:\n          type: array\n          items:\n            type: integer\n            format: int64\n    TreeQueryParameters:\n      required:\n      - parameters\n      type: object\n      properties:\n        parameters:\n          $ref: '#/components/schemas/TreeParameters'\n    SeriesModel:\n      required:\n      - seriesId\n      - seriesName\n      - style\n      - xValues\n      - yValues\n      type: object\n      properties:\n        seriesId:\n          type: integer\n          description: Series' ID\n          format: int64\n        seriesName:\n          type: string\n          description: Series' name\n        style:\n          $ref: '#/components/schemas/OutputElementStyle'\n        xValues:\n          type: array\n          description: Series' X values\n          items:\n            type: integer\n            format: int64\n        yValues:\n          type: array\n          description: Series' Y values\n          items:\n            type: integer\n            format: int64\n      description: This model includes the series output style values.\n    XYModel:\n      required:\n      - series\n      - title\n      type: object\n      properties:\n        series:\n          type: array\n          description: The collection of series\n          items:\n            $ref: '#/components/schemas/SeriesModel'\n        title:\n          type: string\n          description: Title of the model\n    XYResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/XYModel'\n    XYTreeResponse:\n      type: object\n      allOf:\n      - $ref: '#/components/schemas/GenericResponse'\n      - type: object\n        properties:\n          model:\n            $ref: '#/components/schemas/TreeEntryModel'\n    Experiment:\n      type: object\n      properties:\n        name:\n          type: string\n          description: User defined name for the experiment\n        traces:\n          type: array\n          description: The traces encapsulated by this experiment\n          items:\n            $ref: '#/components/schemas/Trace'\n        nbEvents:\n          type: integer\n          description: Current number of indexed events in the experiment\n          format: int64\n        start:\n          type: integer\n          description: The experiment's start time\n          format: int64\n        indexingStatus:\n          type: string\n          description: Status of the experiment indexing\n          enum:\n          - RUNNING\n          - COMPLETED\n          - CLOSED\n        end:\n          type: integer\n          description: The experiment's end time\n          format: int64\n        UUID:\n          type: string\n          description: The experiment's unique identifier\n          format: uuid\n    Trace:\n      type: object\n      properties:\n        name:\n          type: string\n          description: User defined name for the trace\n        path:\n          type: string\n          description: Path to the trace on the server's file system\n        nbEvents:\n          type: integer\n          description: Current number of indexed events in the trace\n          format: int64\n        start:\n          type: integer\n          description: The trace's start time\n          format: int64\n        indexingStatus:\n          type: string\n          description: Status of the trace indexing\n          enum:\n          - RUNNING\n          - COMPLETED\n          - CLOSED\n        end:\n          type: integer\n          description: The trace's end time\n          format: int64\n        UUID:\n          type: string\n          description: The trace's unique identifier\n          format: uuid\n    ExperimentQueryParameters:\n      required:\n      - name\n      - traces\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name to give this experiment\n        traces:\n          type: array\n          description: The unique identifiers of the traces to encapsulate in this\n            experiment\n          items:\n            type: string\n            format: uuid\n    ServerStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          description: The status of the server\n          enum:\n          - UP\n    TraceQueryParameters:\n      required:\n      - uri\n      type: object\n      properties:\n        name:\n          type: string\n          description: \"The name of the trace in the server, to override the default\\\n            \\ name\"\n        typeID:\n          type: string\n          description: \"The trace type's ID, to force the use of a parser / disambiguate\\\n            \\ the trace type\"\n        uri:\n          type: string\n          description: URI of the trace\n    Bookmark:\n      type: object\n      properties:\n        start:\n          description: the start time for this bookmark.\n          type: integer\n          format: int64\n        end:\n          description: the end time for this bookmark.\n          type: integer\n          format: int64\n        name:\n          description: this bookmark's name\n          type: string\n        type:\n          description: The type of the bookmark (generic, output, ...)\n          type: string\n        iconUrl:\n          description: URL to the bookmark's icon\n          type: string\n        UUID:\n          description: The bookmark's unique ID, generated by the server.\n          type: string\n          format: uuid\n    Filter:\n      type: object\n      properties:\n        id:\n          description: Unique id to identify this entry in the backend.\n          type: integer\n          format: int32\n        name:\n          description: Human readable label for this filter\n          type: string\n        start:\n          description: start time for this filter\n          type: integer\n          format: int64\n        end:\n          description: end time for this filter\n          type: integer\n          format: int64\n        expression:\n          description: expression from the filter language\n          type: string\n        tags:\n          description: Tags to be applied on elements that pass this filter\n          type: integer\n          format: int32\n",
			"canonicalURL": "/github.com/eclipse-cdt-cloud/trace-server-protocol@0bd6abf4b8c73ad75be5d6c9c6a088b5de03a1f7/-/blob/API-proposed.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse-cdt-cloud/trace-server-protocol/blob/0bd6abf4b8c73ad75be5d6c9c6a088b5de03a1f7/API-proposed.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/experiments/{expUUID}/outputs/timeGraph/{outputId}/tree\": post: responses: 200: contents: application/json: generate schema: allOf: field model: allOf: merge properties: try to merge conflicting property schemas: merge item schema: schema type mismatch:  and object"
}