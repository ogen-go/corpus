{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/greyshipscode/najara"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 11313,
			"content": "openapi: 3.0.1\ninfo:\n  title: Najara\n  description: 'Najara is a serverless REST API for managing collections of DND 5e items in Python.'\n  contact:\n    email: greyshipscode@gmail.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\nexternalDocs:\n  description: Find out more about the author\n  url: https://github.com/greynewell\ntags:\n- name: collection\n  description: Manage collections of items.\n- name: item\n  description: Manage items in a collection.\nsecurity:\n  - BearerAuth: []\npaths:\n  /:\n    get:\n      tags:\n      - collection\n      summary: List all collections.\n      description: Returns an array of all collections contained in Najara.\n      operationId: readCollections\n      responses:\n        200:\n          $ref: '#/components/responses/readCollections'\n  /collection:\n    post:\n      tags:\n      - collection\n      summary: Create an empty collection.\n      description: Creates a collection for storing items in Najara. Returns an action result.\n      operationId: createCollection\n      requestBody:\n        $ref: '#/components/requestBodies/Collection'\n      responses:\n        200:\n          $ref: '#/components/responses/createCollectionSuccess'\n  /collection/{collectionGuid}:\n    get:\n      tags:\n      - collection\n      summary: Return a collection's metadata and items.\n      description: Returns a collection and the list of items contained by the collection.\n      operationId: readCollection\n      parameters: \n      - $ref: '#/components/parameters/CollectionGUID'\n      responses:\n        200:\n          $ref: '#/components/responses/readCollection'\n        404:\n            description: No collection found for given id.\n    patch:\n      tags:\n      - collection\n      summary: Update a collection's metadata.\n      description: Modifies a collection with the fields passed in. Returns an action result.\n      operationId: updateCollection\n      parameters: \n      - $ref: '#/components/parameters/CollectionGUID'\n      requestBody:\n        $ref: '#/components/requestBodies/Collection'\n      responses:\n        200:\n          $ref: '#/components/responses/updateCollectionSuccess'\n        404:\n            description: No collection found for given id.\n  /item/{collectionGuid}:\n      post:\n        tags:\n        - item\n        summary: Create an item in a collection.\n        description: Provide the necessary properties of the item and a valid GUID belonging to a collection.\n        operationId: createItem\n        requestBody:\n          $ref: '#/components/requestBodies/Item'\n        parameters:\n          - $ref: '#/components/parameters/CollectionGUID'\n        responses:\n          200:\n            $ref: '#/components/responses/createItemSuccess'\n          404:\n            description: No collection found for given id.\n  /item/{collectionGuid}/{itemId}:\n    get:\n      tags:\n      - item\n      summary: Return an item from a collection.\n      description: Provide a valid collection GUID and integer item id to retrieve the properties of that item.\n      operationId: readItem\n      parameters:\n          - $ref: '#/components/parameters/CollectionGUID'\n          - $ref: '#/components/parameters/ItemID'\n      responses:\n        200:\n          description: Success response- the item from the specified collection!\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        404:\n          description: No collection found for the requested id.\n    put:\n        tags:\n        - item\n        summary: Update an item in a collection.\n        description: Provide a valid collection GUID, the integer itemId, and the new properties of the item.\n        operationId: updateItem\n        requestBody:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        parameters:\n          - $ref: '#/components/parameters/CollectionGUID'\n          - $ref: '#/components/parameters/ItemID'\n        responses:\n          200:\n            $ref: '#/components/responses/updateItemSuccess'\n          404:\n            description: No collection found for the requested id.\n    delete:\n      tags:\n      - item\n      summary: Delete an item from a collection.\n      description: Provide a valid collection GUID and the integer itemID to delete the item from its collection.\n      operationId: deleteCollectionItem\n      parameters:\n          - $ref: '#/components/parameters/CollectionGUID'\n          - $ref: '#/components/parameters/ItemID'\n      responses:\n        200:\n          $ref: '#/components/responses/deleteItemSuccess'\n        404:\n          description: No collection found for the requested id.\ncomponents:\n  securitySchemes:\n      BearerAuth:\n        type: http\n        scheme: bearer\n  parameters:\n    CollectionGUID:\n      name: collectionGuid\n      in: path\n      description: GUID id of the desired collection.\n      required: true\n      schema:\n        example: 'd66e22c7-95d2-49d2-95a2-77220a444411'\n        type: string\n        format: GUID\n    ItemID:\n      name: itemId\n      in: path\n      description: Integer id of an item inside a collection.\n      required: true\n      schema:\n        example: 135\n        type: integer\n        format: int64\n  responses:\n    createCollectionSuccess:\n      description: Success response- createCollection has succeeded!\n      content:\n        application/json:\n          schema:\n           allOf:\n            - $ref: '#/components/schemas/ActionResult'\n            - type: object\n              properties:\n                action:\n                  type: string\n                  example: 'CREATE'\n                target:\n                  type: string\n                  example: 'COLLECTION'\n                result-id:\n                  type: string\n                  example: 'd66e22c7-95d2-49d2-95a2-77220a444411'\n    createItemSuccess:\n      description: Success response- createItem has succeeded!\n      content:\n        application/json:\n          schema:\n           allOf:\n            - $ref: '#/components/schemas/ActionResult'\n            - type: object\n              properties:\n                action:\n                  type: string\n                  example: 'CREATE'\n                result-id:\n                  type: integer\n                  example: 135\n    readCollections:\n      description: Success response- the list of all item collections in Najara!\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              collections:\n                type: array\n                items:\n                   $ref: '#/components/schemas/Collection'\n    readCollection:\n      description: Success response- a collection and all its items!\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              collection:\n                $ref: '#/components/schemas/Collection'\n              items:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n    updateCollectionSuccess:\n      description: Success response- your collection has been updated!\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: '#/components/schemas/ActionResult'\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    example: 'UPDATE'\n                  target:\n                    type: string\n                    example: COLLECTION\n                  result-id:\n                    type: string\n                    format: GUID\n                    example: 'd66e22c7-95d2-49d2-95a2-77220a444411'\n    updateItemSuccess:\n      description: Success response- your item has been updated!\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: '#/components/schemas/ActionResult'\n              - type: object\n                properties:\n                  action:\n                    type: string\n                    example: 'UPDATE'\n                  result-id:\n                    type: integer\n                    example: 135\n    deleteItemSuccess:\n      description: Success response- your item has been deleted!\n      content:\n        application/json:\n          schema:\n           allOf:\n            - $ref: '#/components/schemas/ActionResult'\n            - type: object\n              properties:\n                action:\n                  type: string\n                  example: 'DELETE'\n                result-id:\n                  type: integer\n                  example: 135\n  requestBodies:\n    Collection:\n      content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    example: Nischal's Items\n                  description:\n                    type: string\n                    example: Items carried by gnome monk Nischal in Waterdeep.\n    Item:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                example: Arrows\n              type:\n                type: string\n                example: Ammunition\n              quantity:\n                type: integer\n                format: int64\n                example: 1\n              weight:\n                minimum: 0\n                type: number\n                format: number\n                example: 0.05\n              gpvalue:\n                minimum: 0\n                type: number\n                format: number\n                example: 0.05\n              description:\n                type: string\n                example: \"A regular wooden arrow.\"\n  schemas:\n    Item:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 135\n        name:\n          type: string\n          example: Arrows\n        type:\n          type: string\n          example: Ammunition\n        quantity:\n          type: integer\n          format: int64\n          example: 1\n        weight:\n          minimum: 0\n          type: number\n          format: number\n          example: 0.05\n        gpvalue:\n          minimum: 0\n          type: number\n          format: number\n          example: 0.05\n        description:\n          type: string\n          example: \"A regular wooden arrow.\"\n      xml:\n        name: Item\n    Collection:\n      type: object\n      properties:\n        id:\n          type: string\n          format: GUID\n          example: d66e22c7-95d2-49d2-95a2-77220a444411\n        name:\n          type: string\n          example: Nischal's Items\n        description:\n          type: string\n          example: Items carried by gnome monk Nischal in Waterdeep.\n      xml:\n        name: Collection\n    ActionResult:\n      type: object\n      properties:\n        action:\n          type: string\n          example: 'ACTION'\n        target:\n          type: string\n          example: 'ITEM'\n        success:\n          type: boolean\n          example: true\n        result-id:\n          type: string\n          format: id\n      xml:\n        name: ActionResult\n      \n",
			"canonicalURL": "/github.com/greyshipscode/najara@792e2960f35f061612bc7ea67396c38966e07b45/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/greyshipscode/najara/blob/792e2960f35f061612bc7ea67396c38966e07b45/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/collection\": post: responses: 200: contents: application/json: generate schema: allOf: merge properties: try to merge conflicting property schemas: schema format mismatch:  and id"
}