{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dahag-ag/keycloak-openapi"
		},
		"file": {
			"name": "keycloak-19.0.0.yml",
			"size": 0,
			"path": "OpenApiDefinitions/keycloak-19.0.0.yml",
			"byteSize": 261093,
			"content": "openapi: 3.0.1\ninfo:\n  title: Keycloak REST Api\n  description: This is a REST API reference for the Keycloak Admin\n  version: '1'\npaths:\n  /:\n    get:\n      tags:\n        - RealmsAdmin\n      description: \"/\\nGet accessible realms\\n\\nReturns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RealmRepresentation'\n    post:\n      tags:\n        - RealmsAdmin\n      description: \"/\\nImport a realm\\n\\nImports a realm from a full representation of that realm.  Realm name must be unique.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n      responses:\n        2XX:\n          description: Success\n  '/{realm}':\n    description: '/{realm}'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet the top-level representation of the realm\\n\\nIt will not include nested information like User and Client representations.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nUpdate the top-level information of the realm\\n\\nAny user, roles or client information in the representation\\nwill be ignored.  This will only update top-level attributes of the realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete the realm\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/admin-events':\n    description: '/{realm}/admin-events'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: operationTypes\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n        - name: authRealm\n          in: query\n          schema:\n            type: string\n        - name: authClient\n          in: query\n          schema:\n            type: string\n        - name: authUser\n          in: query\n          schema:\n            type: string\n        - name: authIpAddress\n          in: query\n          schema:\n            type: string\n        - name: resourcePath\n          in: query\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: resourceTypes\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminEventRepresentation'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete all admin events\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/attack-detection/brute-force/users':\n    description: '/{realm}/attack-detection/brute-force/users'\n    delete:\n      tags:\n        - AttackDetection\n      description: \"/\\nClear any user login failures for all users\\n\\nThis can release temporary disabled users\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/attack-detection/brute-force/users/{userId}':\n    description: '/{realm}/attack-detection/brute-force/users/{userId}'\n    get:\n      tags:\n        - AttackDetection\n      description: \"/\\nGet status of a username in brute force detection\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    delete:\n      tags:\n        - AttackDetection\n      description: \"/\\nClear any user login failures for the user\\n\\nThis can release temporary disabled user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/authenticator-providers':\n    description: '/{realm}/authentication/authenticator-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator providers\\n\\nReturns a stream of authenticator providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/client-authenticator-providers':\n    description: '/{realm}/authentication/client-authenticator-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet client authenticator providers\\n\\nReturns a stream of client authenticator providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config':\n    description: '/{realm}/authentication/config'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCreate new authenticator configuration\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config-description/{providerId}':\n    description: '/{realm}/authentication/config-description/{providerId}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator provider's configuration description\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: providerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config/{id}':\n    description: '/{realm}/authentication/config/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator configuration\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete authenticator configuration\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate authenticator configuration\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Configuration id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions':\n    description: '/{realm}/authentication/executions'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new authentication execution\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}':\n    description: '/{realm}/authentication/executions/{executionId}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet Single Execution\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete execution\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/config':\n    description: '/{realm}/authentication/executions/{executionId}/config'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate execution with new configuration\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/config/{id}':\n    description: '/{realm}/authentication/executions/{executionId}/config/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet execution's configuration\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Configuration id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/lower-priority':\n    description: '/{realm}/authentication/executions/{executionId}/lower-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nLower execution's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/raise-priority':\n    description: '/{realm}/authentication/executions/{executionId}/raise-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRaise execution's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows':\n    description: '/{realm}/authentication/flows'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication flows\\n\\nReturns a stream of authentication flows.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCreate a new authentication flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/copy':\n    description: '/{realm}/authentication/flows/{flowAlias}/copy'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCopy existing authentication flow under a new name\\n\\nThe new name is given as 'newName' attribute of the passed JSON object\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Name of the existing authentication flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication executions for a flow\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate authentication executions of a Flow\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Flow alias\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions/execution':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions/execution'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new authentication execution to a flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Alias of parent flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions/flow':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions/flow'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new flow with new execution to existing flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Alias of parent authentication flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{id}':\n    description: '/{realm}/authentication/flows/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication flow for id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate an authentication flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete an authentication flow\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Flow id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/form-action-providers':\n    description: '/{realm}/authentication/form-action-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet form action providers\\n\\nReturns a stream of form action providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/form-providers':\n    description: '/{realm}/authentication/form-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet form providers\\n\\nReturns a stream of form providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/per-client-config-description':\n    description: '/{realm}/authentication/per-client-config-description'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet configuration descriptions for all clients\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/register-required-action':\n    description: '/{realm}/authentication/register-required-action'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRegister a new required actions\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions':\n    description: '/{realm}/authentication/required-actions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet required actions\\n\\nReturns a stream of required actions.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}':\n    description: '/{realm}/authentication/required-actions/{alias}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet required action for alias\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate required action\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete required action\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}/lower-priority':\n    description: '/{realm}/authentication/required-actions/{alias}/lower-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nLower required action's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}/raise-priority':\n    description: '/{realm}/authentication/required-actions/{alias}/raise-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRaise required action's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/unregistered-required-actions':\n    description: '/{realm}/authentication/unregistered-required-actions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet unregistered required actions\\n\\nReturns a stream of unregistered required actions.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-description-converter':\n    description: '/{realm}/client-description-converter'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for importing clients under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n          application/xml:\n            schema:\n              type: string\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-policies/policies':\n    description: '/{realm}/client-policies/policies'\n    get:\n      tags:\n        - ClientPolicies\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientPoliciesRepresentation'\n    put:\n      tags:\n        - ClientPolicies\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientPoliciesRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-policies/profiles':\n    description: '/{realm}/client-policies/profiles'\n    get:\n      tags:\n        - ClientProfiles\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: include-global-profiles\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientProfilesRepresentation'\n    put:\n      tags:\n        - ClientProfiles\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientProfilesRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-registration-policy/providers':\n    description: '/{realm}/client-registration-policy/providers'\n    get:\n      tags:\n        - ClientRegistrationPolicy\n      description: \"/\\nBase path for retrieve providers with the configProperties properly filled\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentTypeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes':\n    description: '/{realm}/client-scopes'\n    get:\n      tags:\n        - ClientScopes\n      description: \"/\\nGet client scopes belonging to the realm\\n\\nReturns a list of client scopes belonging to the realm\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    post:\n      tags:\n        - ClientScopes\n      description: \"/\\nCreate a new client scope\\n\\nClient Scope's name must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}':\n    description: '/{realm}/client-scopes/{id}'\n    put:\n      tags:\n        - ClientScope\n      description: \"/\\nUpdate the client scope\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ClientScope\n      description: \"/\\nGet representation of the client scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientScopeRepresentation'\n    delete:\n      tags:\n        - ClientScope\n      description: \"/\\nDelete the client scope\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/add-models':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/models':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings':\n    description: '/{realm}/client-scopes/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm/available':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-session-stats':\n    description: '/{realm}/client-session-stats'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet client session stats\\n\\nReturns a JSON map.  The key is the client id, the value is the number of sessions that currently are active\\nwith that client.  Only clients that actually have a session associated with them will be in this map.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates':\n    description: '/{realm}/client-templates'\n    get:\n      tags:\n        - ClientScopes\n      description: \"/\\nGet client scopes belonging to the realm\\n\\nReturns a list of client scopes belonging to the realm\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    post:\n      tags:\n        - ClientScopes\n      description: \"/\\nCreate a new client scope\\n\\nClient Scope's name must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}':\n    description: '/{realm}/client-templates/{id}'\n    put:\n      tags:\n        - ClientScope\n      description: \"/\\nUpdate the client scope\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ClientScope\n      description: \"/\\nGet representation of the client scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientScopeRepresentation'\n    delete:\n      tags:\n        - ClientScope\n      description: \"/\\nDelete the client scope\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/add-models':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/models':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings':\n    description: '/{realm}/client-templates/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm/available':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients':\n    description: '/{realm}/clients'\n    get:\n      tags:\n        - Clients\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      parameters:\n        - name: clientId\n          in: query\n          schema:\n            type: string\n        - name: viewableOnly\n          in: query\n          schema:\n            type: boolean\n        - name: search\n          in: query\n          schema:\n            type: boolean\n        - name: q\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientRepresentation'\n    post:\n      tags:\n        - Clients\n      description: \"/\\nCreate a new client\\n\\nClient's client_id must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients-initial-access':\n    description: '/{realm}/clients-initial-access'\n    post:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nCreate a new initial access token.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientInitialAccessPresentation'\n    get:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nBase path for managing client initial access tokens\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientInitialAccessPresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients-initial-access/{id}':\n    description: '/{realm}/clients-initial-access/{id}'\n    delete:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nBase path for managing client initial access tokens\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}':\n    description: '/{realm}/clients/{id}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nUpdate the client\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet representation of the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    delete:\n      tags:\n        - Client\n      description: \"/\\nDelete the client\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}':\n    description: '/{realm}/clients/{id}/certificates/{attr}'\n    get:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGet key info\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/download':\n    description: '/{realm}/clients/{id}/certificates/{attr}/download'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGet a keystore file for the client, containing private key and public certificate\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/generate':\n    description: '/{realm}/clients/{id}/certificates/{attr}/generate'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGenerate a new certificate with new key pair\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/generate-and-download':\n    description: '/{realm}/clients/{id}/certificates/{attr}/generate-and-download'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGenerate a new keypair and certificate, and get the private key file\\n\\nGenerates a keypair and certificate and serves the private key in a specified keystore format.\\nOnly generated public certificate is saved in Keycloak DB - the private key is not.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/upload':\n    description: '/{realm}/clients/{id}/certificates/{attr}/upload'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nUpload certificate and eventually private key\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/upload-certificate':\n    description: '/{realm}/clients/{id}/certificates/{attr}/upload-certificate'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nUpload only certificate, not private key\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/client-secret':\n    description: '/{realm}/clients/{id}/client-secret'\n    post:\n      tags:\n        - Client\n      description: \"/\\nGenerate a new secret for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet the client secret\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/client-secret/rotated':\n    description: '/{realm}/clients/{id}/client-secret/rotated'\n    delete:\n      tags:\n        - Client\n      description: \"/\\nInvalidate the rotated secret for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet the rotated client secret\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/default-client-scopes':\n    description: '/{realm}/clients/{id}/default-client-scopes'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet default client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}':\n    description: '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example access token\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example id token\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IDToken'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example user info\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers':\n    description: '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nReturn list of all protocol mappers, which will be used when generating tokens issued for particular client. This means\\nprotocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperEvaluationRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted':\n    description: '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted'\n    get:\n      tags:\n        - ClientScopeEvaluateScopeMappings\n      description: \"/\\nGet effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.\\n\\nThis contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes,\\nwhich are linked with this client.\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: roleContainerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted':\n    description: '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted'\n    get:\n      tags:\n        - ClientScopeEvaluateScopeMappings\n      description: \"/\\nGet roles, which this client doesn't have scope for and can't have them in the accessToken issued for him. Defacto all the\\nother roles of particular role container, which are not in {\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: roleContainerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/installation/providers/{providerId}':\n    description: '/{realm}/clients/{id}/installation/providers/{providerId}'\n    get:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: providerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/management/permissions':\n    description: '/{realm}/clients/{id}/management/permissions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Client\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/nodes':\n    description: '/{realm}/clients/{id}/nodes'\n    post:\n      tags:\n        - Client\n      description: \"/\\nRegister a cluster node with the client\\n\\nManually register cluster node to this client - usually it's not needed to call this directly as adapter should handle\\nby sending registration request to Keycloak\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/nodes/{node}':\n    description: '/{realm}/clients/{id}/nodes/{node}'\n    delete:\n      tags:\n        - Client\n      description: \"/\\nUnregister a cluster node from the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: node\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/offline-session-count':\n    description: '/{realm}/clients/{id}/offline-session-count'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet application offline session count\\n\\nReturns a number of offline user sessions associated with this client\\n\\n{\\n\\\"count\\\": number\\n}\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/offline-sessions':\n    description: '/{realm}/clients/{id}/offline-sessions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet offline sessions for client\\n\\nReturns a list of offline user sessions associated with this client\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/optional-client-scopes':\n    description: '/{realm}/clients/{id}/optional-client-scopes'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet optional client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}':\n    description: '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/add-models':\n    description: '/{realm}/clients/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/models':\n    description: '/{realm}/clients/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/push-revocation':\n    description: '/{realm}/clients/{id}/push-revocation'\n    post:\n      tags:\n        - Client\n      description: \"/\\nPush the client's revocation policy to its admin URL\\n\\nIf the client has an admin URL, push revocation policy to it.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/registration-access-token':\n    description: '/{realm}/clients/{id}/registration-access-token'\n    post:\n      tags:\n        - Client\n      description: \"/\\nGenerate a new registration access token for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles':\n    description: '/{realm}/clients/{id}/roles'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet all roles for the realm or client\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nCreate a new role for the realm or client\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}':\n    description: '/{realm}/clients/{id}/roles/{role-name}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nDelete a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nUpdate a role by name\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nAdd a composite to the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet composites of the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nRemove roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites/realm':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites/realm'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet realm-level roles of the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/groups':\n    description: '/{realm}/clients/{id}/roles/{role-name}/groups'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/management/permissions':\n    description: '/{realm}/clients/{id}/roles/{role-name}/management/permissions'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/users':\n    description: '/{realm}/clients/{id}/roles/{role-name}/users'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturns a stream of users that have the specified role name.\\n\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: 'first result to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: 'maximum number of results to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: the role name.\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings':\n    description: '/{realm}/clients/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm':\n    description: '/{realm}/clients/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm/available':\n    description: '/{realm}/clients/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/clients/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/service-account-user':\n    description: '/{realm}/clients/{id}/service-account-user'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet a user dedicated to the service account\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/session-count':\n    description: '/{realm}/clients/{id}/session-count'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet application session count\\n\\nReturns a number of user sessions associated with this client\\n\\n{\\n\\\"count\\\": number\\n}\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/test-nodes-available':\n    description: '/{realm}/clients/{id}/test-nodes-available'\n    get:\n      tags:\n        - Client\n      description: \"/\\nTest if registered cluster nodes are available\\n\\nTests availability by sending 'ping' request to all cluster nodes.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/user-sessions':\n    description: '/{realm}/clients/{id}/user-sessions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet user sessions for client\\n\\nReturns a list of user sessions associated with this client\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/clients/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/components':\n    description: '/{realm}/components'\n    get:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      parameters:\n        - name: parent\n          in: query\n          schema:\n            type: string\n        - name: type\n          in: query\n          schema:\n            type: string\n        - name: name\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentRepresentation'\n    post:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/components/{id}':\n    description: '/{realm}/components/{id}'\n    get:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComponentRepresentation'\n    put:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/components/{id}/sub-component-types':\n    description: '/{realm}/components/{id}/sub-component-types'\n    get:\n      tags:\n        - Component\n      description: \"/\\nList of subcomponent types that are available to configure for a particular parent component.\\n\\n\"\n      parameters:\n        - name: type\n          in: query\n          description: ''\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentTypeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/credential-registrators':\n    description: '/{realm}/credential-registrators'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-default-client-scopes':\n    description: '/{realm}/default-default-client-scopes'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet realm default client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-default-client-scopes/{clientScopeId}':\n    description: '/{realm}/default-default-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-groups':\n    description: '/{realm}/default-groups'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet group hierarchy.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-groups/{groupId}':\n    description: '/{realm}/default-groups/{groupId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-optional-client-scopes':\n    description: '/{realm}/default-optional-client-scopes'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet realm optional client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-optional-client-scopes/{clientScopeId}':\n    description: '/{realm}/default-optional-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/events':\n    description: '/{realm}/events'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: type\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n        - name: client\n          in: query\n          schema:\n            type: string\n        - name: user\n          in: query\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          schema:\n            type: string\n        - name: ipAddress\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventRepresentation'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete all events\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/events/config':\n    description: '/{realm}/events/config'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet the events provider configuration\\n\\nReturns JSON object with events provider configuration\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nUpdate the events provider\\n\\nChange the events provider and/or its configuration\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/group-by-path/{path}':\n    description: '/{realm}/group-by-path/{path}'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: path\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups':\n    description: '/{realm}/groups'\n    get:\n      tags:\n        - Groups\n      description: \"/\\nGet group hierarchy.  Only name and ids are returned.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    post:\n      tags:\n        - Groups\n      description: \"/\\ncreate or add a top level realm groupSet or create child.  This will update the group and set the parent if it exists.  Create it and set the parent\\nif the group doesn't exist.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}':\n    description: '/{realm}/groups/{id}'\n    get:\n      tags:\n        - Group\n      description: \"/\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    put:\n      tags:\n        - Group\n      description: \"/\\nUpdate group, ignores subgroups.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Group\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/children':\n    description: '/{realm}/groups/{id}/children'\n    post:\n      tags:\n        - Group\n      description: \"/\\nSet or create child.  This will just set the parent if it exists.  Create it and set the parent\\nif the group doesn't exist.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/management/permissions':\n    description: '/{realm}/groups/{id}/management/permissions'\n    get:\n      tags:\n        - Group\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Group\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/members':\n    description: '/{realm}/groups/{id}/members'\n    get:\n      tags:\n        - Group\n      description: \"/\\nGet users\\n\\nReturns a stream of users, filtered according to query parameters\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Pagination offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          description: 'Only return basic information (only guaranteed to return id, username, created, first and last name,'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings':\n    description: '/{realm}/groups/{id}/role-mappings'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet client-level role mappings for the user, and the app\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nAdd client-level roles to the user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nDelete client-level roles from user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}/available':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet available client-level roles that can be mapped to the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}/composite':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet effective client-level role mappings\\n\\nThis recurses any composite roles\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm':\n    description: '/{realm}/groups/{id}/role-mappings/realm'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleMapper\n      description: \"/\\nAdd realm-level role mappings to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RoleMapper\n      description: \"/\\nDelete realm-level role mappings\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm/available':\n    description: '/{realm}/groups/{id}/role-mappings/realm/available'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level roles that can be mapped\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm/composite':\n    description: '/{realm}/groups/{id}/role-mappings/realm/composite'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet effective realm-level role mappings\\n\\nThis will recurse all composite roles to get the result.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/count':\n    description: '/{realm}/groups/count'\n    get:\n      tags:\n        - Groups\n      description: \"/\\nReturns the groups counts.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: top\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/import-config':\n    description: '/{realm}/identity-provider/import-config'\n    post:\n      tags:\n        - IdentityProviders\n      description: \"/\\nImport identity provider from uploaded JSON file\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n          application/json:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances':\n    description: '/{realm}/identity-provider/instances'\n    get:\n      tags:\n        - IdentityProviders\n      description: \"/\\nGet identity providers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IdentityProviderRepresentation'\n    post:\n      tags:\n        - IdentityProviders\n      description: \"/\\nCreate a new identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}':\n    description: '/{realm}/identity-provider/instances/{alias}'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderRepresentation'\n    delete:\n      tags:\n        - IdentityProvider\n      description: \"/\\nDelete the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nUpdate the identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/export':\n    description: '/{realm}/identity-provider/instances/{alias}/export'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nExport public broker configuration for identity provider\\n\\n\"\n      parameters:\n        - name: format\n          in: query\n          description: Format to use\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/management/permissions':\n    description: '/{realm}/identity-provider/instances/{alias}/management/permissions'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mapper-types':\n    description: '/{realm}/identity-provider/instances/{alias}/mapper-types'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mapper types for identity provider\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mappers':\n    description: '/{realm}/identity-provider/instances/{alias}/mappers'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mappers for identity provider\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n    post:\n      tags:\n        - IdentityProvider\n      description: \"/\\nAdd a mapper to identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mappers/{id}':\n    description: '/{realm}/identity-provider/instances/{alias}/mappers/{id}'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mapper by id for the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nUpdate a mapper for the identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - IdentityProvider\n      description: \"/\\nDelete a mapper for the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/providers/{provider_id}':\n    description: '/{realm}/identity-provider/providers/{provider_id}'\n    get:\n      tags:\n        - IdentityProviders\n      description: \"/\\nGet identity providers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: provider_id\n        in: path\n        description: Provider id\n        required: true\n        schema:\n          type: string\n  '/{realm}/keys':\n    description: '/{realm}/keys'\n    get:\n      tags:\n        - Key\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeysMetadataRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization':\n    description: '/{realm}/localization'\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization/{locale}':\n    description: '/{realm}/localization/{locale}'\n    post:\n      tags:\n        - RealmLocalization\n      description: \"/\\nImport localization from uploaded JSON file\\n/\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n          application/json:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      parameters:\n        - name: useRealmDefaultLocaleFallback\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: locale\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization/{locale}/{key}':\n    description: '/{realm}/localization/{locale}/{key}'\n    put:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            text/plain:\n              schema:\n                type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: locale\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: key\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/logout-all':\n    description: '/{realm}/logout-all'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nRemoves all user sessions.  Any client that has an admin url will also be told to invalidate any sessions\\nthey have.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/partial-export':\n    description: '/{realm}/partial-export'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPartial export of existing realm into a JSON file.\\n\\n\"\n      parameters:\n        - name: exportGroupsAndRoles\n          in: query\n          description: ''\n          schema:\n            type: boolean\n        - name: exportClients\n          in: query\n          description: ''\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/partialImport':\n    description: '/{realm}/partialImport'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPartial import from a JSON file to an existing realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartialImportRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/push-revocation':\n    description: '/{realm}/push-revocation'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPush the realm's revocation policy to any client that has an admin url associated with it.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles':\n    description: '/{realm}/roles'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet all roles for the realm or client\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nCreate a new role for the realm or client\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}':\n    description: '/{realm}/roles-by-id/{role-id}'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet a specific role's representation\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleById\n      description: \"/\\nDelete the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleById\n      description: \"/\\nUpdate the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: id of role\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites':\n    description: '/{realm}/roles-by-id/{role-id}/composites'\n    post:\n      tags:\n        - RoleById\n      description: \"/\\nMake the role a composite role by associating some child roles\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nPath for managing all realm-level or client-level roles defined in this realm by its id.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleById\n      description: \"/\\nRemove a set of roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}':\n    description: '/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites/realm':\n    description: '/{realm}/roles-by-id/{role-id}/composites/realm'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet realm-level roles that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/management/permissions':\n    description: '/{realm}/roles-by-id/{role-id}/management/permissions'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleById\n      description: \"/\\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}':\n    description: '/{realm}/roles/{role-name}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nDelete a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nUpdate a role by name\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites':\n    description: '/{realm}/roles/{role-name}/composites'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nAdd a composite to the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet composites of the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nRemove roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites/clients/{clientUuid}':\n    description: '/{realm}/roles/{role-name}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites/realm':\n    description: '/{realm}/roles/{role-name}/composites/realm'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet realm-level roles of the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/groups':\n    description: '/{realm}/roles/{role-name}/groups'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nbase path for managing realm-level roles of this realm\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/management/permissions':\n    description: '/{realm}/roles/{role-name}/management/permissions'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/users':\n    description: '/{realm}/roles/{role-name}/users'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturns a stream of users that have the specified role name.\\n\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: 'first result to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: 'maximum number of results to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: the role name.\n        required: true\n        schema:\n          type: string\n  '/{realm}/sessions/{session}':\n    description: '/{realm}/sessions/{session}'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nRemove a specific user session. Any client that has an admin url will also be told to invalidate this\\nparticular session.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: session\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/testSMTPConnection':\n    description: '/{realm}/testSMTPConnection'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nTest SMTP connection with current logged in user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users':\n    description: '/{realm}/users'\n    post:\n      tags:\n        - Users\n      description: \"/\\nCreate a new user\\n\\nUsername must be unique.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - Users\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: lastName\n          in: query\n          schema:\n            type: string\n        - name: firstName\n          in: query\n          schema:\n            type: string\n        - name: email\n          in: query\n          schema:\n            type: string\n        - name: username\n          in: query\n          schema:\n            type: string\n        - name: emailVerified\n          in: query\n          schema:\n            type: boolean\n        - name: idpAlias\n          in: query\n          schema:\n            type: string\n        - name: idpUserId\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: enabled\n          in: query\n          schema:\n            type: boolean\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n        - name: q\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users-management-permissions':\n    description: '/{realm}/users-management-permissions'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}':\n    description: '/{realm}/users/{id}'\n    put:\n      tags:\n        - User\n      description: \"/\\nUpdate the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - User\n      description: \"/\\nGet representation of the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    delete:\n      tags:\n        - User\n      description: \"/\\nDelete the user\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/configured-user-storage-credential-types':\n    description: '/{realm}/users/{id}/configured-user-storage-credential-types'\n    get:\n      tags:\n        - User\n      description: \"/\\nReturn credential types, which are provided by the user storage where user is stored. Returned values can contain for example \\\"password\\\", \\\"otp\\\" etc.\\nThis will always return empty list for \\\"local\\\" users, which are not backed by any user storage\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/consents':\n    description: '/{realm}/users/{id}/consents'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet consents granted by the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/consents/{client}':\n    description: '/{realm}/users/{id}/consents/{client}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nRevoke consent and offline tokens for particular client from user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        description: Client id\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials':\n    description: '/{realm}/users/{id}/credentials'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}':\n    description: '/{realm}/users/{id}/credentials/{credentialId}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nRemove a credential for a user\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}'\n    post:\n      tags:\n        - User\n      description: \"/\\nMove a credential to a position behind another credential\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n      - name: newPreviousCredentialId\n        in: path\n        description: 'The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.'\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst'\n    post:\n      tags:\n        - User\n      description: \"/\\nMove a credential to a first position in the credentials list of the user\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/userLabel':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/userLabel'\n    put:\n      tags:\n        - User\n      description: \"/\\nUpdate a credential label for a user\\n/\\n\"\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/disable-credential-types':\n    description: '/{realm}/users/{id}/disable-credential-types'\n    put:\n      tags:\n        - User\n      description: \"/\\nDisable all credentials for a user of a specific type\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/execute-actions-email':\n    description: '/{realm}/users/{id}/execute-actions-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend a update account email to the user\\n\\nAn email contains a link the user can click to perform a set of required actions.\\nThe redirectUri and clientId parameters are optional. If no redirect is given, then there will\\nbe no link back to click after actions have completed.  Redirect uri must be a valid uri for the\\nparticular clientId.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: Redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: Client id\n          schema:\n            type: string\n        - name: lifespan\n          in: query\n          description: Number of seconds after which the generated token expires\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/federated-identity':\n    description: '/{realm}/users/{id}/federated-identity'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet social logins associated with the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FederatedIdentityRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/federated-identity/{provider}':\n    description: '/{realm}/users/{id}/federated-identity/{provider}'\n    post:\n      tags:\n        - User\n      description: \"/\\nAdd a social login provider to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedIdentityRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - User\n      description: \"/\\nRemove a social login provider from user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: provider\n        in: path\n        description: Social login provider id\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups':\n    description: '/{realm}/users/{id}/groups'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups/{groupId}':\n    description: '/{realm}/users/{id}/groups/{groupId}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: groupId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups/count':\n    description: '/{realm}/users/{id}/groups/count'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/impersonation':\n    description: '/{realm}/users/{id}/impersonation'\n    post:\n      tags:\n        - User\n      description: \"/\\nImpersonate the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/logout':\n    description: '/{realm}/users/{id}/logout'\n    post:\n      tags:\n        - User\n      description: \"/\\nRemove all user sessions associated with the user\\n\\nAlso send notification to all clients that have an admin URL to invalidate the sessions for the particular user.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/offline-sessions/{clientUuid}':\n    description: '/{realm}/users/{id}/offline-sessions/{clientUuid}'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet offline sessions associated with the user and client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/reset-password':\n    description: '/{realm}/users/{id}/reset-password'\n    put:\n      tags:\n        - User\n      description: \"/\\nSet up a new password for the user.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CredentialRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/reset-password-email':\n    description: '/{realm}/users/{id}/reset-password-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend an email to the user with a link they can click to reset their password.\\nThe redirectUri and clientId parameters are optional. The default for the\\nredirect is the account client.\\n\\nThis endpoint has been deprecated.  Please use the execute-actions-email passing a list with\\nUPDATE_PASSWORD within it.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: client id\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings':\n    description: '/{realm}/users/{id}/role-mappings'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet client-level role mappings for the user, and the app\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nAdd client-level roles to the user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nDelete client-level roles from user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}/available':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet available client-level roles that can be mapped to the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}/composite':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet effective client-level role mappings\\n\\nThis recurses any composite roles\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm':\n    description: '/{realm}/users/{id}/role-mappings/realm'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleMapper\n      description: \"/\\nAdd realm-level role mappings to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RoleMapper\n      description: \"/\\nDelete realm-level role mappings\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm/available':\n    description: '/{realm}/users/{id}/role-mappings/realm/available'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level roles that can be mapped\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm/composite':\n    description: '/{realm}/users/{id}/role-mappings/realm/composite'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet effective realm-level role mappings\\n\\nThis will recurse all composite roles to get the result.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/send-verify-email':\n    description: '/{realm}/users/{id}/send-verify-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend an email-verification email to the user\\n\\nAn email contains a link the user can click to verify their email address.\\nThe redirectUri and clientId parameters are optional. The default for the\\nredirect is the account client.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: Redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: Client id\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/sessions':\n    description: '/{realm}/users/{id}/sessions'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet sessions associated with the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/count':\n    description: '/{realm}/users/count'\n    get:\n      tags:\n        - Users\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: lastName\n          in: query\n          schema:\n            type: string\n        - name: firstName\n          in: query\n          schema:\n            type: string\n        - name: email\n          in: query\n          schema:\n            type: string\n        - name: emailVerified\n          in: query\n          schema:\n            type: boolean\n        - name: username\n          in: query\n          schema:\n            type: string\n        - name: enabled\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/profile':\n    description: '/{realm}/users/profile'\n    get:\n      tags:\n        - UserProfile\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      tags:\n        - UserProfile\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\ncomponents:\n  schemas:\n    AbstractAuthenticationExecutionRepresentation:\n      type: object\n      properties:\n        authenticatorConfig:\n          type: string\n        authenticator:\n          type: string\n        requirement:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        autheticatorFlow:\n          type: boolean\n        authenticatorFlow:\n          type: boolean\n    AuthDetailsRepresentation:\n      type: object\n      properties:\n        realmId:\n          type: string\n        clientId:\n          type: string\n        userId:\n          type: string\n        ipAddress:\n          type: string\n    AuthenticationExecutionExportRepresentation:\n      type: object\n      properties:\n        userSetupAllowed:\n          type: boolean\n        flowAlias:\n          type: string\n    AuthenticationExecutionInfoRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        displayName:\n          type: string\n        alias:\n          type: string\n        description:\n          type: string\n        requirement:\n          type: string\n        requirementChoices:\n          type: array\n          items:\n            type: string\n        configurable:\n          type: boolean\n        providerId:\n          type: string\n        authenticationConfig:\n          type: string\n        authenticationFlow:\n          type: boolean\n        level:\n          type: integer\n          format: int32\n        index:\n          type: integer\n          format: int32\n        flowId:\n          type: string\n    AuthenticationExecutionRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        flowId:\n          type: string\n        parentFlow:\n          type: string\n    AuthenticationFlowRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        alias:\n          type: string\n        description:\n          type: string\n        providerId:\n          type: string\n        topLevel:\n          type: boolean\n        builtIn:\n          type: boolean\n        authenticationExecutions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'\n    AuthenticatorConfigRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        alias:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    CertificateRepresentation:\n      type: object\n      properties:\n        privateKey:\n          type: string\n        publicKey:\n          type: string\n        certificate:\n          type: string\n        kid:\n          type: string\n    ClaimRepresentation:\n      type: object\n      properties:\n        name:\n          type: boolean\n        username:\n          type: boolean\n        profile:\n          type: boolean\n        picture:\n          type: boolean\n        website:\n          type: boolean\n        email:\n          type: boolean\n        gender:\n          type: boolean\n        locale:\n          type: boolean\n        address:\n          type: boolean\n        phone:\n          type: boolean\n    ClientInitialAccessCreatePresentation:\n      type: object\n      properties:\n        expiration:\n          type: integer\n          format: int32\n        count:\n          type: integer\n          format: int32\n    ClientInitialAccessPresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        token:\n          type: string\n        timestamp:\n          type: integer\n          format: int32\n        expiration:\n          type: integer\n          format: int32\n        count:\n          type: integer\n          format: int32\n        remainingCount:\n          type: integer\n          format: int32\n    ClientPoliciesRepresentation:\n      type: object\n      properties:\n        policies:\n          type: array\n          items:\n            type: object\n            description: ClientPolicyRepresentation\n    ClientPolicyConditionConfigurationRepresentation:\n      type: object\n      properties:\n        negativeLogic:\n          type: boolean\n        configAsMap:\n          type: object\n          additionalProperties:\n            type: object\n    ClientPolicyConditionRepresentation:\n      type: object\n      properties:\n        conditionProviderId:\n          type: string\n        configuration:\n          type: object\n    ClientPolicyExecutorConfigurationRepresentation:\n      type: object\n      properties:\n        configAsMap:\n          type: object\n          additionalProperties:\n            type: object\n    ClientPolicyExecutorRepresentation:\n      type: object\n      properties:\n        executorProviderId:\n          type: string\n        configuration:\n          type: object\n    ClientProfileRepresentation:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        executors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'\n    ClientProfilesRepresentation:\n      type: object\n      properties:\n        profiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n        globalProfiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n    ComponentExportRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        providerId:\n          type: string\n        subType:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n        subComponents:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ComponentExportRepresentation'\n    ComponentRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        providerId:\n          type: string\n        providerType:\n          type: string\n        parentId:\n          type: string\n        subType:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    ConfigPropertyRepresentation:\n      type: object\n      properties:\n        name:\n          type: string\n        label:\n          type: string\n        type:\n          type: string\n        defaultValue:\n          type: object\n        helpText:\n          type: string\n        options:\n          type: array\n          items:\n            type: string\n        secret:\n          type: boolean\n        readOnly:\n          type: boolean\n    CredentialRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n        userLabel:\n          type: string\n        secretData:\n          type: string\n        credentialData:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        createdDate:\n          type: integer\n          format: int64\n        value:\n          type: string\n        temporary:\n          type: boolean\n        device:\n          type: string\n        hashedSaltedValue:\n          type: string\n        salt:\n          type: string\n        hashIterations:\n          type: integer\n          format: int32\n        counter:\n          type: integer\n          format: int32\n        algorithm:\n          type: string\n        digits:\n          type: integer\n          format: int32\n        period:\n          type: integer\n          format: int32\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    EventRepresentation:\n      type: object\n      properties:\n        time:\n          type: integer\n          format: int64\n        type:\n          type: string\n        realmId:\n          type: string\n        clientId:\n          type: string\n        userId:\n          type: string\n        sessionId:\n          type: string\n        ipAddress:\n          type: string\n        error:\n          type: string\n        details:\n          type: object\n          additionalProperties:\n            type: string\n    FederatedIdentityRepresentation:\n      type: object\n      properties:\n        identityProvider:\n          type: string\n        userId:\n          type: string\n        userName:\n          type: string\n    GroupRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n        realmRoles:\n          type: array\n          items:\n            type: string\n        clientRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        subGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        access:\n          type: object\n          additionalProperties:\n            type: boolean\n    IdentityProviderMapperRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        identityProviderAlias:\n          type: string\n        identityProviderMapper:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    IdentityProviderMapperTypeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        category:\n          type: string\n        helpText:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    IdentityProviderRepresentation:\n      type: object\n      properties:\n        internalId:\n          type: string\n        alias:\n          type: string\n        providerId:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n        enabled:\n          type: boolean\n        linkOnly:\n          type: boolean\n        updateProfileFirstLoginMode:\n          type: string\n        authenticateByDefault:\n          type: boolean\n        firstBrokerLoginFlowAlias:\n          type: string\n        postBrokerLoginFlowAlias:\n          type: string\n        storeToken:\n          type: boolean\n        addReadTokenRoleOnCreate:\n          type: boolean\n        trustEmail:\n          type: boolean\n        displayName:\n          type: string\n    KeyMetadataRepresentation:\n      type: object\n      properties:\n        providerId:\n          type: string\n        providerPriority:\n          type: integer\n          format: int64\n        kid:\n          type: string\n        status:\n          type: string\n        type:\n          type: string\n        algorithm:\n          type: string\n        publicKey:\n          type: string\n        certificate:\n          type: string\n        use:\n          type: object\n          description: KeyUse\n    LDAPCapabilityRepresentation:\n      type: object\n      properties:\n        oid:\n          type: string\n        type:\n          type: object\n          description: CapabilityType\n    ManagementPermissionReference:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        resource:\n          type: string\n        scopePermissions:\n          type: object\n          additionalProperties:\n            type: string\n    ManagementPermissionRepresentation:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n    OAuth2ErrorRepresentation:\n      type: object\n      properties:\n        error:\n          type: string\n        errorDescription:\n          type: string\n    OAuthClientRepresentation:\n      type: object\n    PasswordPolicyTypeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        displayName:\n          type: string\n        configType:\n          type: string\n        defaultValue:\n          type: string\n        multipleSupported:\n          type: boolean\n    ProtocolMapperRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        protocol:\n          type: string\n        protocolMapper:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n        consentRequired:\n          type: boolean\n        consentText:\n          type: string\n    ProtocolMapperTypeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        category:\n          type: string\n        helpText:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    PublishedRealmRepresentation:\n      type: object\n      properties:\n        publicKeyPem:\n          type: string\n        tokenServiceUrl:\n          type: string\n        accountServiceUrl:\n          type: string\n        notBefore:\n          type: integer\n          format: int32\n    RealmEventsConfigRepresentation:\n      type: object\n      properties:\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          type: integer\n          format: int64\n        eventsListeners:\n          type: array\n          items:\n            type: string\n        enabledEventTypes:\n          type: array\n          items:\n            type: string\n        adminEventsEnabled:\n          type: boolean\n        adminEventsDetailsEnabled:\n          type: boolean\n    RequiredActionProviderRepresentation:\n      type: object\n      properties:\n        alias:\n          type: string\n        name:\n          type: string\n        enabled:\n          type: boolean\n        defaultAction:\n          type: boolean\n        providerId:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    RequiredActionProviderSimpleRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        providerId:\n          type: string\n    Composites:\n      type: object\n      properties:\n        realm:\n          type: array\n          items:\n            type: string\n        client:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        application:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    ScopeMappingRepresentation:\n      type: object\n      properties:\n        self:\n          type: string\n        client:\n          type: string\n        clientTemplate:\n          type: string\n        clientScope:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n    SocialLinkRepresentation:\n      type: object\n      properties:\n        socialProvider:\n          type: string\n        socialUserId:\n          type: string\n        socialUsername:\n          type: string\n    SynchronizationResultRepresentation:\n      type: object\n      properties:\n        ignored:\n          type: boolean\n        added:\n          type: integer\n          format: int32\n        updated:\n          type: integer\n          format: int32\n        removed:\n          type: integer\n          format: int32\n        failed:\n          type: integer\n          format: int32\n        status:\n          type: string\n    TestLdapConnectionRepresentation:\n      type: object\n      properties:\n        action:\n          type: string\n        connectionUrl:\n          type: string\n        authType:\n          type: string\n        bindDn:\n          type: string\n        bindCredential:\n          type: string\n        useTruststoreSpi:\n          type: string\n        connectionTimeout:\n          type: string\n        componentId:\n          type: string\n        startTls:\n          type: string\n    UserConsentRepresentation:\n      type: object\n      properties:\n        clientId:\n          type: string\n        grantedClientScopes:\n          type: array\n          items:\n            type: string\n        createdDate:\n          type: integer\n          format: int64\n        lastUpdatedDate:\n          type: integer\n          format: int64\n        grantedRealmRoles:\n          type: array\n          items:\n            type: string\n    UserFederationMapperRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        federationProviderDisplayName:\n          type: string\n        federationMapperType:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    UserFederationMapperSyncConfigRepresentation:\n      type: object\n      properties:\n        fedToKeycloakSyncSupported:\n          type: boolean\n        fedToKeycloakSyncMessage:\n          type: string\n        keycloakToFedSyncSupported:\n          type: boolean\n        keycloakToFedSyncMessage:\n          type: string\n    UserFederationMapperTypeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        category:\n          type: string\n        helpText:\n          type: string\n        syncConfig:\n          $ref: '#/components/schemas/UserFederationMapperSyncConfigRepresentation'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n        defaultConfig:\n          type: object\n          additionalProperties:\n            type: string\n    UserFederationProviderFactoryRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        options:\n          type: array\n          items:\n            type: string\n        helpText:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    UserFederationProviderRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        displayName:\n          type: string\n        providerName:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: string\n        priority:\n          type: integer\n          format: int32\n        fullSyncPeriod:\n          type: integer\n          format: int32\n        changedSyncPeriod:\n          type: integer\n          format: int32\n        lastSync:\n          type: integer\n          format: int32\n    UserRepresentation:\n      type: object\n      properties:\n        self:\n          type: string\n        id:\n          type: string\n        createdTimestamp:\n          type: integer\n          format: int64\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        username:\n          type: string\n        enabled:\n          type: boolean\n        totp:\n          type: boolean\n        emailVerified:\n          type: boolean\n        attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/CredentialRepresentation'\n        requiredActions:\n          type: array\n          items:\n            type: string\n        federatedIdentities:\n          type: array\n          items:\n            $ref: '#/components/schemas/FederatedIdentityRepresentation'\n        socialLinks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SocialLinkRepresentation'\n        realmRoles:\n          type: array\n          items:\n            type: string\n        clientRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        clientConsents:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserConsentRepresentation'\n        notBefore:\n          type: integer\n          format: int32\n        applicationRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        federationLink:\n          type: string\n        serviceAccountClientId:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n        disableableCredentialTypes:\n          type: array\n          items:\n            type: string\n        access:\n          type: object\n          additionalProperties:\n            type: boolean\n    UserSessionRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        userId:\n          type: string\n        ipAddress:\n          type: string\n        start:\n          type: integer\n          format: int64\n        lastAccess:\n          type: integer\n          format: int64\n        clients:\n          type: object\n          additionalProperties:\n            type: string\n    Access:\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: string\n        verifyCaller:\n          type: boolean\n    CertConf:\n      type: object\n      properties:\n        certThumbprint:\n          type: string\n    AccessTokenResponse:\n      type: object\n      properties:\n        scope:\n          type: string\n        token:\n          type: string\n        expiresIn:\n          type: integer\n          format: int64\n        refreshExpiresIn:\n          type: integer\n          format: int64\n        refreshToken:\n          type: string\n        tokenType:\n          type: string\n        idToken:\n          type: string\n        notBeforePolicy:\n          type: integer\n          format: int32\n        sessionState:\n          type: string\n        otherClaims:\n          type: object\n          additionalProperties:\n            type: object\n        error:\n          type: string\n        errorDescription:\n          type: string\n        errorUri:\n          type: string\n    AddressClaimSet:\n      type: object\n      properties:\n        formattedAddress:\n          type: string\n        streetAddress:\n          type: string\n        locality:\n          type: string\n        region:\n          type: string\n        postalCode:\n          type: string\n        country:\n          type: string\n    AuthorizationDetailsJSONRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        locations:\n          type: array\n          items:\n            type: string\n        actions:\n          type: array\n          items:\n            type: string\n        datatypes:\n          type: array\n          items:\n            type: string\n        identifier:\n          type: string\n        privileges:\n          type: array\n          items:\n            type: string\n        customData:\n          type: object\n          additionalProperties:\n            type: object\n        scopeNameFromCustomData:\n          type: string\n        dynamicScopeParamFromCustomData:\n          type: string\n    AuthorizationResponseToken:\n      type: object\n      properties:\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    ClaimsRepresentation:\n      type: object\n      properties:\n        idTokenClaims:\n          type: object\n          additionalProperties:\n            type: object\n            description: ClaimValue\n        userinfoClaims:\n          type: object\n          additionalProperties:\n            type: object\n            description: ClaimValue\n        present:\n          type: boolean\n        presentAsNullClaim:\n          type: boolean\n        claimValue:\n          type: object\n          description: ClaimValue\u003cCLAIM_TYPE\u003e\n    IDToken:\n      type: object\n      properties:\n        nonce:\n          type: string\n        auth_time:\n          type: integer\n          format: int64\n        sessionId:\n          type: string\n        sessionState:\n          type: string\n        accessTokenHash:\n          type: string\n        codeHash:\n          type: string\n        name:\n          type: string\n        givenName:\n          type: string\n        familyName:\n          type: string\n        middleName:\n          type: string\n        nickName:\n          type: string\n        preferredUsername:\n          type: string\n        profile:\n          type: string\n        picture:\n          type: string\n        website:\n          type: string\n        email:\n          type: string\n        emailVerified:\n          type: boolean\n        gender:\n          type: string\n        birthdate:\n          type: string\n        zoneinfo:\n          type: string\n        locale:\n          type: string\n        phoneNumber:\n          type: string\n        phoneNumberVerified:\n          type: boolean\n        address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        updatedAt:\n          type: integer\n          format: int64\n        claimsLocales:\n          type: string\n        acr:\n          type: string\n        stateHash:\n          type: string\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    JsonWebToken:\n      type: object\n      properties:\n        id:\n          type: string\n        exp:\n          type: integer\n          format: int64\n        nbf:\n          type: integer\n          format: int64\n        iat:\n          type: integer\n          format: int64\n        issuer:\n          type: string\n        suer:\n          $ref: '#/components/schemas/JsonWebToken'\n        subject:\n          type: string\n        type:\n          type: string\n        issuedFor:\n          type: string\n        suedFor:\n          $ref: '#/components/schemas/JsonWebToken'\n        otherClaims:\n          type: object\n          additionalProperties:\n            type: object\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    KeyStoreConfig:\n      type: object\n      properties:\n        realmCertificate:\n          type: boolean\n        storePassword:\n          type: string\n        keyPassword:\n          type: string\n        keyAlias:\n          type: string\n        realmAlias:\n          type: string\n        format:\n          type: string\n    LogoutToken:\n      type: object\n      properties:\n        events:\n          type: object\n          additionalProperties:\n            type: object\n        sid:\n          type: string\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    OAuth2DeviceAuthorizationResponse:\n      type: object\n      properties:\n        deviceCode:\n          type: string\n        userCode:\n          type: string\n        verificationUri:\n          type: string\n        verificationUriComplete:\n          type: string\n        expiresIn:\n          type: integer\n          format: int64\n        interval:\n          type: integer\n          format: int64\n    RefreshToken:\n      type: object\n      properties:\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    UserInfo:\n      type: object\n      properties:\n        issuer:\n          type: string\n        subject:\n          type: string\n        name:\n          type: string\n        givenName:\n          type: string\n        familyName:\n          type: string\n        middleName:\n          type: string\n        nickName:\n          type: string\n        preferredUsername:\n          type: string\n        profile:\n          type: string\n        picture:\n          type: string\n        website:\n          type: string\n        email:\n          type: string\n        emailVerified:\n          type: boolean\n        gender:\n          type: string\n        birthdate:\n          type: string\n        zoneinfo:\n          type: string\n        locale:\n          type: string\n        phoneNumber:\n          type: string\n        phoneNumberVerified:\n          type: boolean\n        address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        updatedAt:\n          type: integer\n          format: int64\n        sub:\n          type: string\n        claimsLocales:\n          type: string\n        otherClaims:\n          type: object\n          additionalProperties:\n            type: object\n    VersionRepresentation:\n      type: object\n      properties:\n        version:\n          type: string\n        buildTime:\n          type: string\n    SynchronizationResult:\n      type: object\n      properties:\n        ignored:\n          type: boolean\n        added:\n          type: integer\n          format: int32\n        updated:\n          type: integer\n          format: int32\n        removed:\n          type: integer\n          format: int32\n        failed:\n          type: integer\n          format: int32\n        status:\n          type: string\n    ProtocolMapperEvaluationRepresentation:\n      type: object\n      properties:\n        mapperId:\n          type: string\n        mapperName:\n          type: string\n        containerId:\n          type: string\n        containerName:\n          type: string\n        containerType:\n          type: string\n        protocolMapper:\n          type: string\n    Permission:\n      type: object\n      properties:\n        resourceId:\n          type: string\n        resourceName:\n          type: string\n        scopes:\n          type: array\n          items:\n            type: string\n        claims:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    AggregatePolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n    ClientScopeDefinition:\n      type: object\n      properties:\n        id:\n          type: string\n        required:\n          type: boolean\n    GroupDefinition:\n      type: object\n      properties:\n        id:\n          type: string\n        path:\n          type: string\n        extendChildren:\n          type: boolean\n    JSPolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        code:\n          type: string\n    PermissionTicketRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        owner:\n          type: string\n        resource:\n          type: string\n        scope:\n          type: string\n        granted:\n          type: boolean\n        scopeName:\n          type: string\n        resourceName:\n          type: string\n        requesterName:\n          type: string\n        requester:\n          type: string\n        ownerName:\n          type: string\n    PolicyProviderRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        group:\n          type: string\n    PolicyRepresentation:\n      type: object\n      properties:\n        config:\n          type: object\n          additionalProperties:\n            type: string\n    RegexPolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        targetClaim:\n          type: string\n        pattern:\n          type: string\n    ResourceOwnerRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    ResourcePermissionRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        resourceType:\n          type: string\n    RoleDefinition:\n      type: object\n      properties:\n        id:\n          type: string\n        required:\n          type: boolean\n    ScopePermissionRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        resourceType:\n          type: string\n    TimePolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        notBefore:\n          type: string\n        notOnOrAfter:\n          type: string\n        dayMonth:\n          type: string\n        dayMonthEnd:\n          type: string\n        month:\n          type: string\n        monthEnd:\n          type: string\n        year:\n          type: string\n        yearEnd:\n          type: string\n        hour:\n          type: string\n        hourEnd:\n          type: string\n        minute:\n          type: string\n        minuteEnd:\n          type: string\n    UmaPermissionRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n        groups:\n          type: array\n          items:\n            type: string\n        clients:\n          type: array\n          items:\n            type: string\n        users:\n          type: array\n          items:\n            type: string\n        condition:\n          type: string\n    UserPolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        users:\n          type: array\n          items:\n            type: string\n    AdminEventRepresentation:\n      type: object\n      properties:\n        time:\n          type: integer\n          format: int64\n        realmId:\n          type: string\n        authDetails:\n          $ref: '#/components/schemas/AuthDetailsRepresentation'\n        operationType:\n          type: string\n        resourceType:\n          type: string\n        resourcePath:\n          type: string\n        representation:\n          type: string\n        error:\n          type: string\n    ApplicationRepresentation:\n      type: object\n      properties:\n        name:\n          type: string\n        claims:\n          $ref: '#/components/schemas/ClaimRepresentation'\n    AuthenticatorConfigInfoRepresentation:\n      type: object\n      properties:\n        name:\n          type: string\n        helpText:\n          type: string\n        providerId:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    ClientScopeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        protocol:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n    ClientTemplateRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        protocol:\n          type: string\n        fullScopeAllowed:\n          type: boolean\n        bearerOnly:\n          type: boolean\n        consentRequired:\n          type: boolean\n        standardFlowEnabled:\n          type: boolean\n        implicitFlowEnabled:\n          type: boolean\n        directAccessGrantsEnabled:\n          type: boolean\n        serviceAccountsEnabled:\n          type: boolean\n        publicClient:\n          type: boolean\n        frontchannelLogout:\n          type: boolean\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n    ComponentTypeRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        helpText:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n        metadata:\n          type: object\n          additionalProperties:\n            type: object\n    KeysMetadataRepresentation:\n      type: object\n      properties:\n        active:\n          type: object\n          additionalProperties:\n            type: string\n        keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/KeyMetadataRepresentation'\n    RoleRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        scopeParamRequired:\n          type: boolean\n        composites:\n          $ref: '#/components/schemas/Composites'\n        composite:\n          type: boolean\n        clientRole:\n          type: boolean\n        containerId:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    RolesRepresentation:\n      type: object\n      properties:\n        realm:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n        client:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/RoleRepresentation'\n        application:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/RoleRepresentation'\n    Authorization:\n      type: object\n      properties:\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    ClientScopePolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        clientScopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientScopeDefinition'\n    GroupPolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        groupsClaim:\n          type: string\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupDefinition'\n    RolePolicyRepresentation:\n      type: object\n      properties:\n        type:\n          type: string\n        roles:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleDefinition'\n    ClientMappingsRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        client:\n          type: string\n        mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n    MappingsRepresentation:\n      type: object\n      properties:\n        realmMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n        clientMappings:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ClientMappingsRepresentation'\n    AccessToken:\n      type: object\n      properties:\n        suedAt:\n          $ref: '#/components/schemas/AccessToken'\n        suer:\n          $ref: '#/components/schemas/AccessToken'\n        allowedOrigins:\n          type: array\n          items:\n            type: string\n        realmAccess:\n          $ref: '#/components/schemas/Access'\n        trustedCertificates:\n          type: array\n          items:\n            type: string\n        suedFor:\n          $ref: '#/components/schemas/AccessToken'\n        authorization:\n          $ref: '#/components/schemas/Authorization'\n        certConf:\n          $ref: '#/components/schemas/CertConf'\n        scope:\n          type: string\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    ClientRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        clientId:\n          type: string\n        enabled:\n          type: boolean\n        alwaysDisplayInConsole:\n          type: boolean\n        surrogateAuthRequired:\n          type: boolean\n        rootUrl:\n          type: string\n        adminUrl:\n          type: string\n        baseUrl:\n          type: string\n        clientAuthenticatorType:\n          type: string\n        secret:\n          type: string\n        registrationAccessToken:\n          type: string\n        redirectUris:\n          type: array\n          items:\n            type: string\n        webOrigins:\n          type: array\n          items:\n            type: string\n        defaultRoles:\n          type: array\n          items:\n            type: string\n        notBefore:\n          type: integer\n          format: int32\n        bearerOnly:\n          type: boolean\n        consentRequired:\n          type: boolean\n        standardFlowEnabled:\n          type: boolean\n        implicitFlowEnabled:\n          type: boolean\n        directAccessGrantsEnabled:\n          type: boolean\n        serviceAccountsEnabled:\n          type: boolean\n        authorizationServicesEnabled:\n          type: boolean\n        directGrantsOnly:\n          type: boolean\n        publicClient:\n          type: boolean\n        fullScopeAllowed:\n          type: boolean\n        protocol:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n        authenticationFlowBindingOverrides:\n          type: object\n          additionalProperties:\n            type: string\n        nodeReRegistrationTimeout:\n          type: integer\n          format: int32\n        registeredNodes:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        frontchannelLogout:\n          type: boolean\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        clientTemplate:\n          type: string\n        useTemplateConfig:\n          type: boolean\n        useTemplateScope:\n          type: boolean\n        useTemplateMappers:\n          type: boolean\n        defaultClientScopes:\n          type: array\n          items:\n            type: string\n        optionalClientScopes:\n          type: array\n          items:\n            type: string\n        authorizationSettings:\n          $ref: '#/components/schemas/ResourceServerRepresentation'\n        access:\n          type: object\n          additionalProperties:\n            type: boolean\n        origin:\n          type: string\n    PartialImportRepresentation:\n      type: object\n      properties:\n        ifResourceExists:\n          type: string\n        policy:\n          type: object\n          description: Policy\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        identityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        identityProviderMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n    RealmRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        realm:\n          type: string\n        displayName:\n          type: string\n        displayNameHtml:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        applications:\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationRepresentation'\n        clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        enabled:\n          type: boolean\n        sslRequired:\n          type: string\n        defaultSignatureAlgorithm:\n          type: string\n        revokeRefreshToken:\n          type: boolean\n        refreshTokenMaxReuse:\n          type: integer\n          format: int32\n        accessTokenLifespan:\n          type: integer\n          format: int32\n        accessTokenLifespanForImplicitFlow:\n          type: integer\n          format: int32\n        ssoSessionIdleTimeout:\n          type: integer\n          format: int32\n        ssoSessionMaxLifespan:\n          type: integer\n          format: int32\n        ssoSessionMaxLifespanRememberMe:\n          type: integer\n          format: int32\n        ssoSessionIdleTimeoutRememberMe:\n          type: integer\n          format: int32\n        offlineSessionIdleTimeout:\n          type: integer\n          format: int32\n        offlineSessionMaxLifespanEnabled:\n          type: boolean\n        offlineSessionMaxLifespan:\n          type: integer\n          format: int32\n        clientSessionIdleTimeout:\n          type: integer\n          format: int32\n        clientSessionMaxLifespan:\n          type: integer\n          format: int32\n        clientOfflineSessionIdleTimeout:\n          type: integer\n          format: int32\n        clientOfflineSessionMaxLifespan:\n          type: integer\n          format: int32\n        scopeMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeMappingRepresentation'\n        requiredCredentials:\n          type: array\n          items:\n            type: string\n        passwordPolicy:\n          type: string\n        accessCodeLifespan:\n          type: integer\n          format: int32\n        accessCodeLifespanUserAction:\n          type: integer\n          format: int32\n        accessCodeLifespanLogin:\n          type: integer\n          format: int32\n        actionTokenGeneratedByAdminLifespan:\n          type: integer\n          format: int32\n        oAuth2DeviceCodeLifespan:\n          type: integer\n          format: int32\n        oAuth2DevicePollingInterval:\n          type: integer\n          format: int32\n        actionTokenGeneratedByUserLifespan:\n          type: integer\n          format: int32\n        defaultRoles:\n          type: array\n          items:\n            type: string\n        defaultRole:\n          $ref: '#/components/schemas/RoleRepresentation'\n        defaultGroups:\n          type: array\n          items:\n            type: string\n        privateKey:\n          type: string\n        publicKey:\n          type: string\n        certificate:\n          type: string\n        codeSecret:\n          type: string\n        passwordCredentialGrantAllowed:\n          type: boolean\n        registrationAllowed:\n          type: boolean\n        registrationEmailAsUsername:\n          type: boolean\n        rememberMe:\n          type: boolean\n        verifyEmail:\n          type: boolean\n        loginWithEmailAllowed:\n          type: boolean\n        duplicateEmailsAllowed:\n          type: boolean\n        resetPasswordAllowed:\n          type: boolean\n        editUsernameAllowed:\n          type: boolean\n        social:\n          type: boolean\n        updateProfileOnInitialSocialLogin:\n          type: boolean\n        browserSecurityHeaders:\n          type: object\n          additionalProperties:\n            type: string\n        socialProviders:\n          type: object\n          additionalProperties:\n            type: string\n        smtpServer:\n          type: object\n          additionalProperties:\n            type: string\n        oauthClients:\n          type: array\n          items:\n            $ref: '#/components/schemas/OAuthClientRepresentation'\n        clientScopeMappings:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ScopeMappingRepresentation'\n        applicationScopeMappings:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ScopeMappingRepresentation'\n        roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n        loginTheme:\n          type: string\n        accountTheme:\n          type: string\n        adminTheme:\n          type: string\n        emailTheme:\n          type: string\n        notBefore:\n          type: integer\n          format: int32\n        bruteForceProtected:\n          type: boolean\n        permanentLockout:\n          type: boolean\n        maxFailureWaitSeconds:\n          type: integer\n          format: int32\n        minimumQuickLoginWaitSeconds:\n          type: integer\n          format: int32\n        waitIncrementSeconds:\n          type: integer\n          format: int32\n        quickLoginCheckMilliSeconds:\n          type: integer\n          format: int64\n        maxDeltaTimeSeconds:\n          type: integer\n          format: int32\n        failureFactor:\n          type: integer\n          format: int32\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          type: integer\n          format: int64\n        eventsListeners:\n          type: array\n          items:\n            type: string\n        enabledEventTypes:\n          type: array\n          items:\n            type: string\n        adminEventsEnabled:\n          type: boolean\n        adminEventsDetailsEnabled:\n          type: boolean\n        userFederationProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationProviderRepresentation'\n        userFederationMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationMapperRepresentation'\n        identityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        internationalizationEnabled:\n          type: boolean\n        supportedLocales:\n          type: array\n          items:\n            type: string\n        defaultLocale:\n          type: string\n        identityProviderMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        authenticationFlows:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n        authenticatorConfig:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n        requiredActions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n        otpPolicyType:\n          type: string\n        otpPolicyAlgorithm:\n          type: string\n        otpPolicyInitialCounter:\n          type: integer\n          format: int32\n        otpPolicyDigits:\n          type: integer\n          format: int32\n        otpPolicyLookAheadWindow:\n          type: integer\n          format: int32\n        otpPolicyPeriod:\n          type: integer\n          format: int32\n        otpSupportedApplications:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyRpEntityName:\n          type: string\n        webAuthnPolicySignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyRpId:\n          type: string\n        webAuthnPolicyAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyRequireResidentKey:\n          type: string\n        webAuthnPolicyUserVerificationRequirement:\n          type: string\n        webAuthnPolicyCreateTimeout:\n          type: integer\n          format: int32\n        webAuthnPolicyAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyPasswordlessRpEntityName:\n          type: string\n        webAuthnPolicyPasswordlessSignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyPasswordlessRpId:\n          type: string\n        webAuthnPolicyPasswordlessAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyPasswordlessAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyPasswordlessRequireResidentKey:\n          type: string\n        webAuthnPolicyPasswordlessUserVerificationRequirement:\n          type: string\n        webAuthnPolicyPasswordlessCreateTimeout:\n          type: integer\n          format: int32\n        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyPasswordlessAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        browserFlow:\n          type: string\n        registrationFlow:\n          type: string\n        directGrantFlow:\n          type: string\n        resetCredentialsFlow:\n          type: string\n        clientAuthenticationFlow:\n          type: string\n        dockerAuthenticationFlow:\n          type: string\n        keycloakVersion:\n          type: string\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        clientTemplates:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientTemplateRepresentation'\n        clientScopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientScopeRepresentation'\n        defaultDefaultClientScopes:\n          type: array\n          items:\n            type: string\n        defaultOptionalClientScopes:\n          type: array\n          items:\n            type: string\n        components:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ComponentExportRepresentation'\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n        federatedUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        userManagedAccessAllowed:\n          type: boolean\n    AbstractPolicyRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        type:\n          type: string\n        decisionStrategy:\n          enum:\n            - AFFIRMATIVE(0)\n            - UNANIMOUS(1)\n            - CONSENSUS(2)\n          type: string\n          description: DecisionStrategy\n        logic:\n          enum:\n            - POSITIVE(0)\n            - NEGATIVE(1)\n          type: string\n          description: Logic\n        name:\n          type: string\n        description:\n          type: string\n        policies:\n          type: array\n          items:\n            type: string\n        resources:\n          type: array\n          items:\n            type: string\n        scopes:\n          type: array\n          items:\n            type: string\n        owner:\n          type: string\n        resourcesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        scopesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n    ResourceRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        displayName:\n          type: string\n        uris:\n          type: array\n          items:\n            type: string\n        type:\n          type: string\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        iconUri:\n          type: string\n        owner:\n          $ref: '#/components/schemas/ResourceOwnerRepresentation'\n        ownerManagedAccess:\n          type: boolean\n        attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    ResourceServerRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        clientId:\n          type: string\n        name:\n          type: string\n        allowRemoteResourceManagement:\n          type: boolean\n        policyEnforcementMode:\n          enum:\n            - ENFORCING(0)\n            - PERMISSIVE(1)\n            - DISABLED(2)\n          type: string\n          description: PolicyEnforcementMode\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        decisionStrategy:\n          enum:\n            - AFFIRMATIVE(0)\n            - UNANIMOUS(1)\n            - CONSENSUS(2)\n          type: string\n          description: DecisionStrategy\n    ScopeRepresentation:\n      type: object\n      properties:\n        name:\n          type: string\n        displayName:\n          type: string\n        iconUri:\n          type: string\n        id:\n          type: string\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n  securitySchemes:\n    access_token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - access_token: [ ]",
			"canonicalURL": "/github.com/dahag-ag/keycloak-openapi@a6eb1b4537a9a2f274713499c182d4900b224c71/-/blob/OpenApiDefinitions/keycloak-19.0.0.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dahag-ag/keycloak-openapi/blob/a6eb1b4537a9a2f274713499c182d4900b224c71/OpenApiDefinitions/keycloak-19.0.0.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/AccessToken\" name conflict: \"AccessToken\"",
	"NotImplemented": [
		"complex form schema"
	]
}