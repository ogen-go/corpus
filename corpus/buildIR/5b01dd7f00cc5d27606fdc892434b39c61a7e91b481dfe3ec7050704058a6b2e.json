{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OnroerendErfgoed/atramhasis"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "atramhasis/openapi.yaml",
			"byteSize": 32601,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: Atramhasis API\n  version: 1.1.0\n\nservers:\n  - url: '/'\n\npaths:\n  /conceptschemes/{scheme_id}/c:\n    get:\n      summary: Search for concepts or collections in a scheme.\n      description: Search for concepts or collections in a scheme.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Define if you want to show concepts or collections. Leave\n            blank to show both.\n          required: false\n          schema:\n            type: string\n        - name: mode\n          in: query\n          description: Allows for special processing mode for dijitFilteringSelect.\n            Makes it possible to use wildcards in the label parameter.\n          required: false\n          schema:\n            type: string\n        - name: label\n          in: query\n          description: Shows all concepts and collections that have this search\n            string in one of their labels.\n          required: false\n          schema:\n            type: string\n        - name: collection\n          in: query\n          description: Get information about the content of a collection.\n            Expects to be passed an id of a collection in this scheme. Will restrict\n            the search to concepts or collections that are a member of this collection\n            or a narrower concept of a member.\n          required: false\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: Define if you want to sort the results by a given field. Otherwise items are returned\n            in an indeterminate order. Prefix with '+' to sort ascending, '-' to sort descending.\n            eg. ``?sort=-label`` to sort all results descending by label.\n          required: false\n          schema:\n            type: string\n        - name: language\n          in: query\n          description: Returns the label with the corresponding language-tag if present.\n            If the language is not present for this concept/collection, it falls back to\n            1) the default language of the provider. 2) 'en' 3) any label.\n            Eg. ``?language=nl`` to show the dutch labels of the concepts/collections.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The concepts in this conceptscheme were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConceptListItem'\n        404:\n          description: The conceptscheme was not found.\n\n    post:\n      summary: Add a concept or collection to a conceptscheme.\n      description: Add a concept or collection to a conceptscheme. The response body will\n        contain a representation of the concept or collection after is has\n        been added to the conceptscheme.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        description: Data to create concept or collection\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ConceptRequest\"\n\n      responses:\n        201:\n          description: The concept or collection was added succesfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConceptResponse\"\n        400:\n          description: The concept or collection could not be added because\n            the submitted json was invalid due to eg. validation errors.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n        404:\n          description: The conceptscheme `scheme_id` does not exist.\n        405:\n          description: The concept or collection could not be added because\n            the conceptscheme `scheme_id` is a readonly conceptscheme.\n        500:\n          $ref: \"#/components/responses/Error\"\n\n  /conceptschemes/{scheme_id}/c/{c_id}:\n    get:\n      summary: Get information about a concept or collection.\n      description: Get information about a concept or collection.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n        - name: c_id\n          in: path\n          description: The identifier for a certain concept or collection.\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: The concept was found in the conceptscheme.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConceptResponse\"\n        404:\n          description: The concept was not found in the conceptscheme or the\n            conceptscheme was not found.\n    put:\n      summary: Edit the concept or collection with id `c_id`.\n      description: Edit the concept or collection with id `c_id`. The response body will\n        contain a representation of the concept or collection after the\n        modifications.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n        - name: c_id\n          in: path\n          description: The identifier for a certain concept or collection.\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        description: Data to create concept or collection\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ConceptRequest\"\n\n      responses:\n        200:\n          description: The concept or collection was edited succesfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConceptResponse\"\n        400:\n          description: The concept or collection could not be edited because\n            the submitted json was invalid due to eg. validation errors.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n        404:\n          description: The conceptscheme `scheme_id` or\n            the concept or collection `c_id` does not exist.\n        405:\n          description: The concept or collection could not be edited because\n            the conceptscheme `scheme_id` is a readonly conceptscheme.\n        500:\n          $ref: \"#/components/responses/Error\"\n\n    delete:\n      summary: Remove the concept with id `c_id`.\n      description: Remove the concept with id `c_id`.\n        The response body will contain the last representation known by the service.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n        - name: c_id\n          in: path\n          description: The identifier for a certain concept or collection.\n          required: true\n          schema:\n            type: integer\n\n      responses:\n        200:\n          description: The concept or collection was deleted succesfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConceptResponse\"\n        400:\n          description: The concept or collection could not be deleted because\n            the submitted json was invalid due to eg. validation errors.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n        404:\n          description: The conceptscheme `scheme_id` or\n            the concept or collection `c_id` does not exist.\n        405:\n          description: The concept or collection could not be deleted because\n            the conceptscheme `scheme_id` is a readonly conceptscheme.\n        409:\n          description: The concept or collection could not be deleted because\n            Atramhasis has determined that it's still being used somewhere else. The\n            response body will contain a message and a list of :term:`URI`'s that\n            are using this concept.\n        500:\n          $ref: \"#/components/responses/Error\"\n\n  /conceptschemes/{scheme_id}/tree:\n    get:\n      summary: Display a tree of a conceptscheme and its children\n      description: List all languages known to this Atramhasis instance.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A tree view of the conceptscheme was returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConceptTree\"\n\n  /conceptschemes/{scheme_id}:\n    get:\n      summary: Get information about a concept scheme.\n      description: Get information about a concept scheme.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain concept scheme.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The conceptscheme was not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResponseConceptScheme\"\n    put:\n      summary: Edit the conceptschemes\n      description: Edit the conceptschemes with scheme_id. The response body will\n        contain a representation of the conceptscheme.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain conceptscheme.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        description: Data to alter the conceptscheme\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RequestConceptScheme\"\n      responses:\n        200:\n          description: The concept or collection was edited succesfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResponseConceptScheme\"\n        400:\n          description: The conceptscheme could not be edited because\n            the submitted json was invalid due to eg. validation errors.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n        404:\n          description: The conceptscheme with `scheme_id` does not exist.\n        500:\n          $ref: \"#/components/responses/Error\"\n\n  /conceptschemes:\n    get:\n      summary: Get all registered conceptschemes.\n      description: Get all registered conceptschemes.\n      tags:\n        - Pyramid_skosprovider\n      responses:\n        200:\n          description: The list of conceptschemes was found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConceptSchemeListItem\"\n  /languages:\n    get:\n      summary: List all languages known to this Atramhasis instance.\n      description: List all languages known to this Atramhasis instance.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: sort\n          in: query\n          description: Which field to sort on. Use `-` and `+` to indicate sort order.\n            Eg. `id` or `+id` sort ascending on `id`, `-name` sort descending on\n            `name`.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The list of languages was returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Language\"\n\n  /languages/{l_id}:\n    get:\n      summary: Get information on a certain language.\n      description: Get information on a certain language.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: l_id\n          in: path\n          description: The identifier for a certain language.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The language was found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Language\"\n        404:\n          description: The language was not found in this instance.\n\n    put:\n      summary: Edit or create language\n      description: Update the information on a certain language or create an entry for a new\n        one.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: l_id\n          in: path\n          description: The identifier for a certain language.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        description: Data to create or edit language\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Language\"\n\n      responses:\n        200:\n          description: The language was updated or added.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Language\"\n        400:\n          description: The request could not be executed because of problems with\n            the submitted data. Most likely you are submitting an invalid IANA\n            langage code.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n    delete:\n      summary: Delete language\n      description: Delete a language from this Atramhasis instance.\n      tags:\n        - Atramhasis\n      parameters:\n        - name: l_id\n          in: path\n          description: The identifier for a certain language.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The language was deleted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Language\"\n        404:\n          description: The language was not found in this instance.\n\n  /labeltypes:\n    get:\n      summary: Get labeltypes.\n      description: Get labeltypes.\n      tags:\n        - Lists\n      responses:\n        200:\n          description: The labeltypes were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Type\"\n\n  /notetypes:\n    get:\n      summary: Get notetypes.\n      description: Get notetypes.\n      tags:\n        - Lists\n      parameters:\n        - name: l_id\n          in: path\n          description: The identifier for a certain language.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The notetypes were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Type\"\n\n  /uris:\n    get:\n      summary: Look up where a certain URI can be found.\n      description: Find more information on a certain :term:`URI`. This can map to eiter\n        a concept, collection or conceptscheme that is known by the current SKOS\n        registry.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: uri\n          in: query\n          description: The URI to search for.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The URI maps to something known by pyramid_skosprovider,\n            either a conceptscheme, a concept or collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  context:\n                    $ref: '#/components/schemas/Context'\n                  type:\n                    type: string\n                  uri:\n                    type: string\n                  id:\n                    type: integer\n                  concept_scheme:\n                    $ref: '#/components/schemas/ConceptSchemeLimited'\n        404:\n          description: The URI can't be found by pyramid_skosprovider.\n  /c:\n    get:\n      summary: Search concepts or collections.\n      description: Search for concepts or collections, no matter what scheme they're a part of.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: type\n          in: query\n          description: Define if you want to show concepts or collections. Leave\n            blank to show both.\n          required: false\n          schema:\n            type: string\n        - name: mode\n          in: query\n          description: Allows for special processing mode for dijitFilteringSelect.\n            Makes it possible to use wildcards in the label parameter.\n          required: false\n          schema:\n            type: string\n        - name: label\n          in: query\n          description: Shows all concepts and collections that have this search\n            string in one of their labels.\n          required: false\n          schema:\n            type: string\n        - name: language\n          in: query\n          description: Returns the label with the corresponding language-tag if present.\n            If the language is not present for this concept/collection, it falls back to\n            1) the default language of the provider. 2) 'en' 3) any label.\n            Eg. ``?language=nl`` to show the dutch labels of the concepts/collections.\n          required: false\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: Define if you want to sort the results by a given field. Otherwise items are returned\n            in an indeterminate order. Prefix with '+' to sort ascending, '-' to sort descending.\n            eg. ``?sort=-label`` to sort all results descending by label.\n          required: false\n          schema:\n            type: string\n        - name: providers.ids\n          in: query\n          description: A comma separated list of concept scheme id's. The query\n            will only be passed to the providers with these id's. eg.\n            ``?providers.ids=TREES, PARROTS`` will only list concepts from these two providers.\n          required: false\n          schema:\n            type: string\n        - name: providers.subject\n          in: query\n          description: A subject can be registered with a skosprovider in\n            the registry. Adding this search parameter means that the query will only\n            be passed on to providers that have been tagged with this subject. Eg.\n            ``?providers.subject=external`` to only query the providers that have been marked\n            with the subject `external`.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The concepts in this conceptscheme were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConceptListItem'\n\n  /conceptschemes/{scheme_id}/topconcepts:\n    get:\n      summary: Get the top concepts in a scheme.\n      description: Get all top concepts in a certain conceptscheme. These are all the concepts\n        in the conceptscheme that have no broader concept.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain conceptscheme.\n          required: true\n          schema:\n            type: string\n        - name: language\n          in: query\n          description: Returns the label with the corresponding language-tag if present.\n            If the language is not present for this concept/collection, it falls back to\n            1) the default language of the provider. 2) 'en' 3) any label.\n            Eg. ``?language=nl`` to show the dutch labels of the concepts/collections.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The topconcepts in this conceptscheme were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConceptListItem\"\n        404:\n          description: The conceptscheme was not found.\n\n  /conceptschemes/{scheme_id}/displaytop:\n    get:\n      summary: Get the top of a display hierarchy.\n      description: Get the top of a display hierarchy. Depending on the underlying provider\n        this will be a list of Concepts and Collections.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain conceptscheme.\n          required: true\n          schema:\n            type: string\n        - name: language\n          in: query\n          description: Returns the label with the corresponding language-tag if present.\n            If the language is not present for this concept/collection, it falls back to\n            1) the default language of the provider. 2) 'en' 3) any label.\n            Eg. ``?language=nl`` to show the dutch labels of the concepts/collections.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The concepts and collections were found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConceptListItem\"\n        404:\n          description: The conceptscheme was not found.\n\n  /conceptschemes/{scheme_id}/c/{c_id}/displaychildren:\n    get:\n      summary: Get the children for display purposes.\n      description: Get a list of Collections and Concepts that should be displayed as\n        children of this Concept or Collection.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain conceptscheme.\n          required: true\n          schema:\n            type: string\n        - name: c_id\n          in: path\n          description: The identifier for a certain concept or collection.\n          required: true\n          schema:\n            type: integer\n        - name: language\n          in: query\n          description: Returns the label with the corresponding language-tag if present.\n            If the language is not present for this concept/collection, it falls back to\n            1) the default language of the provider. 2) 'en' 3) any label.\n            Eg. ``?language=nl`` to show the dutch labels of the concepts/collections.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: The concept was found in the conceptscheme.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConceptListItem\"\n        404:\n          description: The concept was not found in the conceptscheme or the\n            conceptscheme was not found.\n\n  /conceptschemes/{scheme_id}/c/{c_id}/expand:\n    get:\n      summary: Expand a concept or collection to all it's narrower concepts.\n      description: Expand a concept or collection to all it's narrower\n        concepts.\n\n        This method should recurse and also return narrower concepts\n        of narrower concepts.\n\n        If the id passed belongs to a :class:`skosprovider.skos.Concept`,\n        the id of the concept itself should be include in the return value.\n\n        If the id passed belongs to a :class:`skosprovider.skos.Collection`,\n        the id of the collection itself must not be present in the return value\n        In this case the return value includes all the member concepts and\n        their narrower concepts.\n\n        Returns A list of id's or :class:`HTTPNotFound` if the concept or collection doesn't\n        exist.\n      tags:\n        - Pyramid_skosprovider\n      parameters:\n        - name: scheme_id\n          in: path\n          description: The identifier for a certain conceptscheme.\n          required: true\n          schema:\n            type: string\n        - name: c_id\n          in: path\n          description: The identifier for a certain concept or collection.\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: The concept/collection was found in the conceptscheme.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n        404:\n          description: The concept/collection was not found in the conceptscheme or the\n            conceptscheme was not found.\ncomponents:\n  schemas:\n    Language:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: integer\n    Type:\n      type: object\n      properties:\n        key:\n          type: string\n        label:\n          type: string\n    Relatedconcept:\n      type: object\n      properties:\n        id:\n          type: integer\n    Label:\n      type: object\n      properties:\n        type:\n          type: string\n        language:\n          type: string\n        label:\n          type: string\n    Note:\n      type: object\n      properties:\n        note:\n          type: string\n        type:\n          type: string\n        language:\n          type: string\n    Source:\n      type: object\n      properties:\n        citation:\n          type: string\n    Concepts:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Relatedconcept\"\n    MatchList:\n      type: array\n      items:\n        type: string\n    Matches:\n      type: array\n      items:\n        type: object\n        properties:\n          broad:\n            $ref: \"#/components/schemas/MatchList\"\n          close:\n            $ref: \"#/components/schemas/MatchList\"\n          exact:\n            $ref: \"#/components/schemas/MatchList\"\n          narrow:\n            $ref: \"#/components/schemas/MatchList\"\n          related:\n            $ref: \"#/components/schemas/MatchList\"\n\n    ConceptRequest:\n      type: object\n      properties:\n        id:\n          type: integer\n        type:\n          type: string\n        labels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Label\"\n        notes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Note\"\n        sources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Source\"\n        broader:\n          $ref: \"#/components/schemas/Concepts\"\n        narrower:\n          $ref: \"#/components/schemas/Concepts\"\n        related:\n          $ref: \"#/components/schemas/Concepts\"\n        members:\n          $ref: \"#/components/schemas/Concepts\"\n        member_of:\n          $ref: \"#/components/schemas/Concepts\"\n        subordinate_arrays:\n          $ref: \"#/components/schemas/Concepts\"\n        matches:\n          $ref: \"#/components/schemas/Matches\"\n        infer_concept_relations:\n          type: boolean\n\n    ConceptResponse:\n      allOf:\n        - $ref: '#/components/schemas/ConceptRequest'\n        - type: object\n          properties:\n            id:\n              type: integer\n            uri:\n              type: string\n    ConceptTree:\n      type: object\n      properties:\n        id:\n          type: string\n        concept_id:\n          type: integer\n        label:\n          type: string\n        children:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              concept_id:\n                type: integer\n              label:\n                type: string\n              children:\n                type: array\n    RequestConceptScheme:\n      type: object\n      properties:\n        labels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Label\"\n        notes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Note\"\n        sources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Source\"\n    ResponseConceptScheme:\n      allOf:\n        - $ref: \"#/components/schemas/RequestConceptScheme\"\n        - type: object\n          properties:\n            id:\n              type: integer\n            uri:\n              type: string\n            label:\n              type: string\n            languages:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Language\"\n    Context:\n      type: object\n      properties:\n        version:\n          type: string\n        dct:\n          type: string\n        skos:\n          type: string\n        iso-thes:\n          type: string\n        rdf:\n          type: string\n        rdfs:\n          type: string\n        void:\n          type: string\n        uri:\n          type: string\n        type:\n          type: string\n        id:\n          type: string\n        label:\n          type: string\n        concept:\n          type: string\n        collection:\n          type: string\n        subject:\n          type: object\n          properties:\n            id:\n              type: string\n            type:\n              type: string\n        concept_scheme:\n          type: object\n          properties:\n            id:\n              type: string\n            type:\n              type: string\n    ConceptSchemeListItem:\n      type: object\n      properties:\n        context:\n          $ref: \"#/components/schemas/Context\"\n        type:\n          type: string\n        id:\n          type: string\n        uri:\n          type: string\n        label:\n          type: string\n        subject:\n          type: array\n          items:\n            type: string\n    ConceptSchemeLimited:\n      type: object\n      properties:\n        type:\n          type: string\n        uri:\n          type: string\n        id:\n          type: string\n    ConceptListItem:\n      type: object\n      properties:\n        type:\n          type: string\n        uri:\n          type: string\n        id:\n          type: string\n        label:\n          type: string\n    ValidationError:\n      type: object\n      required:\n        - message\n        - errors\n      properties:\n        message:\n          type: string\n        errors:\n          type: string\n\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        field:\n          nullable: true\n          type: string\n        message:\n          nullable: true\n          type: string\n        exception:\n          nullable: true\n          type: string\n\n    Errors:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Error\"\n\n  responses:\n    BadRequest:\n      description: OpenAPI request/response validation failed\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ValidationError\"\n\n    Error:\n      description: OpenAPI request/response validation failed\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/Error\"\n              - $ref: \"#/components/schemas/Errors\"\n    NotFound:\n      description: Resource not found\n",
			"canonicalURL": "/github.com/OnroerendErfgoed/atramhasis@d18c5f3f5d5ac9932287781fca6635209e8521aa/-/blob/atramhasis/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OnroerendErfgoed/atramhasis/blob/d18c5f3f5d5ac9932287781fca6635209e8521aa/atramhasis/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/conceptschemes/{scheme_id}\": put: responses: code 500: contents: media: \"application/json\": generate schema: save schema types: save referenced type: reference \"#/components/schemas/Error\" type name conflict: \"Error\""
}