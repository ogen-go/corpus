{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/qri-io/qri"
		},
		"file": {
			"name": "open_api_3.yaml",
			"size": 0,
			"path": "api/open_api_3.yaml",
			"byteSize": 108162,
			"content": "openapi: 3.0.0\ninfo:\n  title: Qri API\n  description: Qri API used to communicate with a Qri node.\n  version: n/a\ntags:\n- name: access\n  description: \"AccessMethods is a group of methods for access control \u0026 user authentication \"\n- name: collection\n  description: \"CollectionMethods lists a user's datasets. Datasets in a collection consist of datasets the user has created and other datasets the user has pulled.  Collections are local. The same user's collection on one qri node will often be different from another node, depending on what datasets have been created, pushed, or pulled to that node \"\n- name: dataset\n  description: \"DatasetMethods work with datasets, creating new versions (save), reading dataset data (get), deleting versions (remove), and moving datasets over network connections (push \u0026 pull) \"\n- name: diff\n  description: \"DiffMethods encapsulates logic for diffing Datasets on Qri \"\n- name: peer\n  description: \"PeerMethods extends a lib.Instance with business logic for peer-to-peer interaction \"\n- name: profile\n  description: \"ProfileMethods encapsulates business logic for this node's user profile TODO (b5) - alterations to user profile are a subset of configuration changes. all of this code should be refactored into subroutines of general configuration getters \u0026 setters \"\n- name: follow\n  description: \"FollowMethods groups together methods for follows \"\n- name: remote\n  description: \"RemoteMethods encapsulates business logic of remote operation TODO (b5): switch to using an Instance instead of separate fields \"\n- name: search\n  description: \"SearchMethods groups together methods for search \"\n- name: automation\n  description: \"AutomationMethods groups together methods for automations \"\npaths:\n  '/access/token':\n    post:\n      description: CreateAuthToken constructs a JWT string token suitable for making OAuth requests as the grantee user. Creating an access token requires a stored private key for the grantee. Callers can provide either granteeUsername OR granteeProfileID \n      operationId: 'access.CreateAuthToken'\n      tags:\n      - access\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/CreateAuthTokenParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/collection/get':\n    post:\n      description: Get gets the head of a dataset as a VersionInfo from the collection \n      operationId: 'collection.Get'\n      tags:\n      - collection\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/CollectionGetParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/VersionInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/list':\n    post:\n      description: List gets the reflist for either the local repo or a peer \n      operationId: 'collection.List'\n      tags:\n      - collection\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ListParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/VersionInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/activity':\n    post:\n      description: Activity returns the activity and changes for a given dataset \n      operationId: 'dataset.Activity'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ActivityParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/VersionInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/daginfo':\n    post:\n      description: DAGInfo generates a dag.Info for a dataset path. If a label is given, DAGInfo will generate a sub-dag.Info at that label. \n      operationId: 'dataset.DAGInfo'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/DAGInfoParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/DAGInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/get':\n    post:\n      description: Get retrieves datasets and components for a given reference. p.Ref is parsed to create a reference, which is used to load the dataset. It will be loaded from the local repo or from the filesystem if it has a linked working directory. Using p.Selector will control what components are returned in res.Value. The default, a blank selector, will also fill the entire dataset at res.Value. If the selector contains '.script' then res.Bytes is loaded with the script contents as bytes. If the selector is 'stats', then res.Value is loaded with the generated stats. \n      operationId: 'dataset.Get'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/GetParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/GetResult'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/manifest':\n    post:\n      description: Manifest generates a manifest for a dataset path \n      operationId: 'dataset.Manifest'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ManifestParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/DAGManifest'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/manifest/missing':\n    post:\n      description: ManifestMissing generates a manifest of blocks that are not present on this repo for a given manifest \n      operationId: 'dataset.ManifestMissing'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ManifestMissingParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/DAGManifest'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/pull':\n    post:\n      description: Pull downloads and stores an existing dataset to a peer's repository via a network connection \n      operationId: 'dataset.Pull'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PullParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Dataset'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/push':\n    post:\n      description: Push posts a dataset version to a remote \n      operationId: 'dataset.Push'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PushParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Ref'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/remove':\n    post:\n      description: Remove a dataset entirely or remove a certain number of revisions \n      operationId: 'dataset.Remove'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/RemoveParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RemoveResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/rename':\n    post:\n      description: Rename changes a user's given name for a dataset \n      operationId: 'dataset.Rename'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/RenameParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/VersionInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/render':\n    post:\n      description: Render renders a viz or readme component as html \n      operationId: 'dataset.Render'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/RenderParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/save':\n    post:\n      description: Save adds a history entry, updating a dataset \n      operationId: 'dataset.Save'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/SaveParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Dataset'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/validate':\n    post:\n      description: Validate gives a dataset of errors and issues for a given dataset \n      operationId: 'dataset.Validate'\n      tags:\n      - dataset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ValidateParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/ValidateResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/changes':\n    post:\n      description: Changes resolves the requested datasets and tries to generate a change report \n      operationId: 'diff.Changes'\n      tags:\n      - diff\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ChangeReportParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/ChangeReport'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/diff':\n    post:\n      description: Diff computes the diff of two sources \n      operationId: 'diff.Diff'\n      tags:\n      - diff\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/DiffParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/DiffResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/peer/connect':\n    post:\n      description: Connect attempts to create a connection with a peer for a given peer.ID \n      operationId: 'peer.Connect'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ConnectParamsPod'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/connections/qri':\n    post:\n      description: ConnectedQriProfiles lists profiles we're currently connected to \n      operationId: 'peer.ConnectedQriProfiles'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ConnectionsParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/connections':\n    post:\n      description: Connections lists PeerID's we're currently connected to. If running IPFS this will also return connected IPFS nodes \n      operationId: 'peer.Connections'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ConnectionsParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/peer/disconnect':\n    post:\n      description: Disconnect explicitly closes a peer connection \n      operationId: 'peer.Disconnect'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ConnectParamsPod'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Nil'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/peer':\n    post:\n      description: Info shows peer profile details \n      operationId: 'peer.Info'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PeerInfoParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/peer/list':\n    post:\n      description: List lists Peers on the qri network \n      operationId: 'peer.List'\n      tags:\n      - peer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PeerListParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/profile':\n    post:\n      description: GetProfile get's this node's peer profile \n      operationId: 'profile.GetProfile'\n      tags:\n      - profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ProfileParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/profile/poster':\n    post:\n      description: SetPosterPhoto changes this active peer's poster image \n      operationId: 'profile.SetPosterPhoto'\n      tags:\n      - profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/FileParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/profile/set':\n    post:\n      description: SetProfile stores changes to the active peer's editable profile \n      operationId: 'profile.SetProfile'\n      tags:\n      - profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/SetProfileParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/profile/photo':\n    post:\n      description: SetProfilePhoto changes the active peer's profile image \n      operationId: 'profile.SetProfilePhoto'\n      tags:\n      - profile\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/FileParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Profile'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/registry/follow':\n    post:\n      description: Follow updates the follow status of the current user for a given dataset \n      operationId: 'follow.Follow'\n      tags:\n      - follow\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Nil'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/registry/follow/list':\n    post:\n      description: Get returns a list of datasets a user follows \n      operationId: 'follow.Get'\n      tags:\n      - follow\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/Dataset'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/remote/feeds':\n    post:\n      description: Feeds returns a listing of datasets from a number of feeds like featured and popular. Each feed is keyed by string in the response \n      operationId: 'remote.Feeds'\n      tags:\n      - remote\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/EmptyParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/MappedArraysOfVersionInfo'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/remote/preview':\n    post:\n      description: Preview requests a dataset preview from a remote \n      operationId: 'remote.Preview'\n      tags:\n      - remote\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PreviewParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Dataset'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/remote/remove':\n    post:\n      description: Remove asks a remote to remove a dataset \n      operationId: 'remote.Remove'\n      tags:\n      - remote\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/PushParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Ref'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/registry/search':\n    post:\n      description: Search queries for items on qri related to given parameters \n      operationId: 'search.Search'\n      tags:\n      - search\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/SearchParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/NotDefined'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/auto/apply':\n    post:\n      description: Apply runs a transform script \n      operationId: 'automation.Apply'\n      tags:\n      - automation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/ApplyParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/ApplyResult'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/auto/deploy':\n    post:\n      description: Deploy adds or updates a workflow \n      operationId: 'automation.Deploy'\n      tags:\n      - automation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/DeployParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Nil'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/auto/remove':\n    post:\n      description: Remove removes a workflow \n      operationId: 'automation.Remove'\n      tags:\n      - automation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/WorkflowParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/Nil'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/auto/run':\n    post:\n      description: Run manually runs a workflow \n      operationId: 'automation.Run'\n      tags:\n      - automation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/RunParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/auto/workflow':\n    post:\n      description: Workflow fetches a workflow \n      operationId: 'automation.Workflow'\n      tags:\n      - automation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/WorkflowParams'\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/NotDefined'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/unpack':\n    post:\n      operationId: 'api.unpack'\n      tags:\n      - api\n      requestBody:\n        required: true\n        content:\n          application/zip:\n            schema:\n              type: string\n              format: binary\n      \n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/NotDefined'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/':\n    get:\n      operationId: 'api.home'\n      tags:\n      - api\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/StatusOK'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/health':\n    get:\n      operationId: 'api.health'\n      tags:\n      - api\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/StatusOK'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/webui':\n    get:\n      operationId: 'api.webui'\n      tags:\n      - api\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/qfs/ipfs/{path:.*}':\n    get:\n      operationId: 'api.ipfs'\n      tags:\n      - api\n      parameters: \n      - name: 'path:.*'\n        in: path\n        required: true\n        schema:\n          type: string\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/get/{dsref}':\n    get:\n      operationId: 'api.get_ref'\n      tags:\n      - api\n      parameters: \n      - name: 'dsref'\n        in: path\n        required: true\n        schema:\n          type: string\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/GetResult'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n  '/ds/get/{dsref}/{selector}':\n    get:\n      operationId: 'api.get_ref_selector'\n      tags:\n      - api\n      parameters: \n      - name: 'dsref'\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: 'selector'\n        in: path\n        required: true\n        schema:\n          type: string\n      \n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n                        allOf:\n                          - $ref: '#/components/schemas/RawResponse'\n\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\ncomponents:\n  schemas:\n    RemoveResponse:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        numDeleted:\n          type: number\n\n        message:\n          type: string\n\n        unlinked:\n          type: boolean\n\n    ActivityParams:\n      type: object\n      properties: \n        ref:\n          type: string\n          description: \"Reference to data to fetch history for\"\n          example: \"b5/world_bank_population\"\n        pull:\n          type: boolean\n          description: \"if true, pull any datasets that aren't stored locally\"\n          example: \"false\"\n    ApplyParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        transform:\n          type: object \n\n        secrets:\n          type: object \n\n        wait:\n          type: boolean\n\n        ScriptOutput:\n          type: object \n          description: \"TODO(arqu): substitute with websockets when working over the wire \"\n        Hooks:\n          type: object \n\n    DiffParams:\n      type: object\n      properties: \n        leftPath:\n          type: string\n          description: \"File paths or reference to datasets \"\n        rightPath:\n          type: string\n\n        WorkingDir:\n          type: string\n          description: \"If not null, the working directory that the diff is using \"\n        UseLeftPrevVersion:\n          type: boolean\n          description: \"Whether to get the previous version of the left parameter \"\n        Selector:\n          type: string\n          description: \"Which component or part of a dataset to compare \"\n    ProfileParams:\n      type: object\n    SetProfileParams:\n      type: object\n      properties: \n        pro:\n          type: object \n\n    ListParams:\n      type: object\n      properties: \n        term:\n          type: string\n          description: \"term to filter list by\"\n          example: \"population\"\n        username:\n          type: string\n          description: \"username to filter collection by\"\n          example: \"ramfox\"\n        orderBy:\n          type: string\n          description: \"field name to order list by\"\n          example: \"created\"\n        limit:\n          type: number\n          description: \"maximum number of datasets to use. use -1 to list all datasets\"\n          example: \"50\"\n        offset:\n          type: number\n          description: \"number of items to skip\"\n          example: \"0\"\n        public:\n          type: boolean\n          description: \"Public only applies to listing datasets, shows only datasets that are set to visible \"\n    Ref:\n      type: object\n      properties: \n        initID:\n          type: string\n          description: \"InitID is the canonical identifer for a dataset history \"\n        username:\n          type: string\n          description: \"Username of dataset owner \"\n        profileID:\n          type: string\n          description: \"ProfileID of dataset owner deprecated - avoid using this field, we're working towards removing it generally profile IDs should come from request scopes, or be fetched from stores of identity info (profile.Store) \"\n        name:\n          type: string\n          description: \"Unique name reference for this dataset \"\n        path:\n          type: string\n          description: \"Content-addressed path for this dataset \"\n    PeerInfoParams:\n      type: object\n      properties: \n        peername:\n          type: string\n\n        profileID:\n          type: string\n\n        verbose:\n          type: boolean\n          description: \"Verbose adds network details from the p2p Peerstore \"\n    PeerListParams:\n      type: object\n      properties: \n        limit:\n          type: number\n\n        offset:\n          type: number\n\n        cached:\n          type: boolean\n          description: \"Cached == true will return offline peers from the repo as well as online peers, default is to list connected peers only \"\n    RawLogbookParams:\n      type: object\n    Viz:\n      type: object\n      properties: \n        format:\n          type: string\n          description: \"Format designates the visualization configuration syntax. currently the only supported syntax is 'html' \"\n        path:\n          type: string\n          description: \"Path is the location of a viz, transient derived \"\n        qri:\n          type: string\n          description: \"Qri should always be 'vc:0' derived \"\n        scriptPath:\n          type: string\n          description: \"ScriptPath is the path to the script that created this \"\n        text:\n          type: string\n          description: \"Text contains the contents of the script, transient \"\n        renderedPath:\n          type: string\n          description: \"RenderedPath is the path to the file rendered using the viz script and the body \"\n    ManifestMissingParams:\n      type: object\n      properties: \n        manifest:\n          type: object \n\n    GetConfigParams:\n      type: object\n      properties: \n        Field:\n          type: string\n\n        WithPrivateKey:\n          type: boolean\n\n        Format:\n          type: string\n\n        Concise:\n          type: boolean\n\n    RenameParams:\n      type: object\n      properties: \n        current:\n          type: string\n\n        next:\n          type: string\n\n    Structure:\n      type: object\n      properties: \n        checksum:\n          type: string\n          description: \"Checksum is a bas58-encoded multihash checksum of the entire data file this structure points to. This is different from IPFS hashes, which are calculated after breaking the file into blocks derived \"\n        compression:\n          type: string\n          description: \"Compression specifies any compression on the source data, if empty assume no compression \"\n        depth:\n          type: number\n          description: \"Maximum nesting level of composite types in the dataset. eg: depth 1 == [], depth 2 == [[]] derived \"\n        encoding:\n          type: string\n          description: \"Encoding specifics character encoding, assume utf-8 if not specified \"\n        errCount:\n          type: number\n          description: \"ErrCount is the number of errors returned by validating data against this schema. required derived \"\n        entries:\n          type: number\n          description: \"Entries is number of top-level entries in the dataset. With tablular data this is the same as the number of 'rows' derived \"\n        format:\n          type: string\n          description: \"Format specifies the format of the raw data MIME type \"\n        formatConfig:\n          type: object \n          description: \"FormatConfig removes as much ambiguity as possible about how to interpret the speficied format. FormatConfig FormatConfig `json:'formatConfig,omitempty'` \"\n        length:\n          type: number\n          description: \"Length is the length of the data object in bytes. must always match \u0026 be present derived \"\n        path:\n          type: string\n          description: \"location of this structure, transient derived \"\n        qri:\n          type: string\n          description: \"Qri should always be KindStructure derived \"\n        schema:\n          type: object \n          description: \"Schema contains the schema definition for the underlying data, schemas are defined using the IETF json-schema specification. for more info on json-schema see: https://json-schema.org \"\n        strict:\n          type: boolean\n          description: \"Strict requires schema validation to pass without error. Datasets with strict: true can have additional functionality and performance speedups that comes with being able to assume that all data is valid \"\n    FileParams:\n      type: object\n      properties: \n        filename:\n          type: string\n          description: \"url to download data from. either Url or Data is required Url      string Filename of data file. extension is used for filetype detection \"\n        data:\n          type: object \n          description: \"Data is the file as slice of bytes \"\n    ValidateParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        bodyFilename:\n          type: string\n\n        schemaFilename:\n          type: string\n\n        structureFilename:\n          type: string\n\n    Commit:\n      type: object\n      properties: \n        author:\n          type: object \n          description: \"Author of this commit \"\n        message:\n          type: string\n          description: \"Message is an optional \"\n        path:\n          type: string\n          description: \"Path is the location of this commit, transient derived \"\n        qri:\n          type: string\n          description: \"Qri is this commit's qri kind derived \"\n        signature:\n          type: string\n          description: \"Signature is a base58 encoded privateKey signing of Title \"\n        timestamp:\n          type: object \n          description: \"Time this dataset was created. Required. \"\n        title:\n          type: string\n          description: \"Title of the commit. Required. \"\n        runID:\n          type: string\n          description: \"RunID is only present if an automated script was executed durning the commit time Commits with non-empty `RunID`s imply the existance of a transform component \"\n    GetParams:\n      type: object\n      properties: \n        ref:\n          type: string\n          description: \"dataset reference to fetch\"\n          example: \"b5/world_bank_population\"\n        selector:\n          type: string\n          description: \"a component or nested field names to extract from the dataset\"\n          example: \"body\"\n        limit:\n          type: number\n          description: \"number of results to limit to. only applies when selector is 'body' \"\n        offset:\n          type: number\n          description: \"number of results to skip. only applies when selector is 'body' \"\n    Transform:\n      type: object\n      properties: \n        config:\n          type: object \n          description: \"Config outlines any configuration that would affect the resulting hash \"\n        path:\n          type: string\n          description: \"location of the transform object, transient \"\n        qri:\n          type: string\n          description: \"Kind should always equal KindTransform \"\n        resources:\n          type: object \n          description: \"Resources is a map of all datasets referenced in this transform, with alphabetical keys generated by datasets in order of appearance within the transform \"\n        scriptPath:\n          type: string\n          description: \"ScriptPath is the path to the script that produced this transformation. Deprecated - use Steps instead \"\n        text:\n          type: string\n          description: \"Text contains the contents of the script, transient \"\n        secrets:\n          type: object \n          description: \"Secrets is a map of secret values used in the transformation, transient. TODO (b5): make this not-transient by censoring the values used, but not keys \"\n        steps:\n          type: object \n\n        syntax:\n          type: string\n          description: \"Syntax this transform was written in Deprecated - syntax is defined per-step \"\n        syntaxVersion:\n          type: string\n          description: \"SyntaxVersion is an identifier for the application and version number that produced the result Deprecated - use steps.Syntax with a version suffix instead \"\n        syntaxes:\n          type: object \n          description: \"map of syntaxes used in this transform to their version identifier. \"\n    CreateAuthTokenParams:\n      type: object\n      properties: \n        granteeUsername:\n          type: string\n          description: \"username to grant auth\"\n          example: \"keyboard_cat\"\n        granteeProfileID:\n          type: string\n          description: \"profile Identifier to grant token for\"\n          example: \"QmemJQrK7PTQvD3n8gmo9JhyaByyLmETiNR1Y8wS7hv4sP\"\n        ttl:\n          type: object \n          description: \"lifespan of token in nanoseconds\"\n          example: \"2000000000000\"\n    RenderParams:\n      type: object\n      properties: \n        ref:\n          type: string\n          description: \"Ref is a string reference to the dataset to render \"\n        dataset:\n          type: object \n          description: \"Optionally pass an entire dataset in for rendering, if providing a dataset, the Ref field must be empty \"\n        template:\n          type: object \n          description: \"Optional template override \"\n        useFSI:\n          type: boolean\n          description: \"TODO (b5): investigate if this field is still in use \"\n        format:\n          type: string\n          description: \"Output format. defaults to 'html' \"\n        selector:\n          type: string\n          description: \"Selector \"\n    User:\n      type: object\n      properties: \n        id:\n          type: string\n\n        name:\n          type: string\n\n        email:\n          type: string\n\n    VersionInfo:\n      type: object\n      properties: \n        initID:\n          type: string\n          description: \"Key as a stable identifier  InitID is derived from the logbook for the dataset \"\n        username:\n          type: string\n          description: \"Fields from dsref.Ref  Username of dataset owner \"\n        profileID:\n          type: string\n          description: \"ProfileID of dataset owner \"\n        name:\n          type: string\n          description: \"Unique name reference for this dataset \"\n        path:\n          type: string\n          description: \"Content-addressed path for this dataset \"\n        published:\n          type: boolean\n          description: \"State about the dataset that can change  If true, this dataset has published versions \"\n        foreign:\n          type: boolean\n          description: \"If true, this reference doesn't exist locally. Only makes sense if path is set, as this flag refers to specific versions, not to entire dataset histories. \"\n        metaTitle:\n          type: string\n          description: \"Meta fields  Title from the meta structure \"\n        themeList:\n          type: string\n          description: \"List of themes from the meta structure, comma-separated list \"\n        bodySize:\n          type: number\n          description: \"Structure fields  Size of the body in bytes \"\n        bodyRows:\n          type: number\n          description: \"Num of rows in the body \"\n        bodyFormat:\n          type: string\n          description: \"Format of the body, such as 'csv' or 'json' \"\n        numErrors:\n          type: number\n          description: \"Number of errors from the structure \"\n        commitTime:\n          type: object \n          description: \"Commit fields  Timestamp field from the commit \"\n        commitTitle:\n          type: string\n          description: \"Title field from the commit \"\n        commitMessage:\n          type: string\n          description: \"Message field from the commit \"\n        workflowID:\n          type: string\n          description: \"Workflow fields \"\n        workflowtriggerDescription:\n          type: string\n\n        runID:\n          type: string\n          description: \"Run Fields  RunID is derived from from either the Commit.RunID, field or the runID of a failed run. In the latter case the Path value will be empty \"\n        runStatus:\n          type: string\n          description: \"RunStatus is a string version of the run.Status enumeration. This value will always be one of:    ''|'waiting'|'running'|'succeeded'|'failed'|'unchanged'|'skipped' RunStatus is not stored on a dataset version, and instead must come from either run state or a cache of run state it's of type string to follow the 'plain old data' pattern \"\n        runDuration:\n          type: object \n          description: \"RunDuration is how long the run took/has currently taken in nanoseconds default value of 0 means no duration data is available. RunDuration is not stored on a dataset version, and instead must come from either run state or a cache of run state \"\n        runCount:\n          type: number\n          description: \"Aggregate Fields TODO (ramfox): These fields are only temporarily living on `VersionInfo`. They are needed by the frontend to display 'details' about the head of of the dataset. When we get more user feedback and settle what info users want about their datasets, these fields may move to a new struct store, or subsystem. These fields are not derived from any `dataset.Dataset` fields. These fields should only be used in the `collection` package.  RunCount is the number of times this dataset's transform has been run \"\n        commitCount:\n          type: number\n          description: \"CommitCount is the number of commits in this dataset's history \"\n        downloadCount:\n          type: number\n          description: \"DownloadCount is the number of times this dataset has been directly downloaded from this Qri node \"\n        followerCount:\n          type: number\n          description: \"FollowerCount is the number of followers this dataset has on this Qri node \"\n        openIssueCount:\n          type: number\n          description: \"OpenIssueCount is the number of open issues this dataset has on this Qri node \"\n    RemoveParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        revision:\n          type: object \n\n        force:\n          type: boolean\n\n    SearchParams:\n      type: object\n      properties: \n        q:\n          type: string\n\n        limit:\n          type: number\n\n        offset:\n          type: number\n\n    EmptyParams:\n      type: object\n    PushParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        remote:\n          type: string\n\n        all:\n          type: boolean\n          description: \"All indicates all versions of a dataset and the dataset namespace should be either published or removed \"\n    DiffResponse:\n      type: object\n      properties: \n        stat:\n          type: object \n\n        schemaStat:\n          type: object \n\n        schema:\n          type: object \n\n        diff:\n          type: object \n\n    CSVOptions:\n      type: object\n      properties: \n        headerRow:\n          type: boolean\n          description: \"HeaderRow specifies weather this csv file has a header row or not \"\n        lazyQuotes:\n          type: boolean\n          description: \"If LazyQuotes is true, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field. \"\n        separator:\n          type: object \n          description: \"Separator is the field delimiter. It is set to comma (',') by NewReader. Comma must be a valid rune and must not be \\r, \\n, or the Unicode replacement character (0xFFFD). \"\n        variadicFields:\n          type: boolean\n          description: \"VariadicFields sets permits records to have a variable number of fields avoid using this \"\n    ApplyResult:\n      type: object\n      properties: \n        Data:\n          type: object \n\n        runID:\n          type: string\n\n    ConnectionsParams:\n      type: object\n      properties: \n        limit:\n          type: number\n\n        offset:\n          type: number\n\n    TeardownParams:\n      type: object\n      properties: \n        Config:\n          type: object \n\n        RepoPath:\n          type: string\n\n        ConfigFilepath:\n          type: string\n\n    VersionInfoAggregator:\n      type: object\n    DeployParams:\n      type: object\n      properties: \n        Run:\n          type: boolean\n\n        Workflow:\n          type: object \n\n        Dataset:\n          type: object \n\n    RefListParams:\n      type: object\n      properties: \n        Ref:\n          type: string\n          description: \"String value of a reference \"\n        Offset:\n          type: number\n          description: \"Pagination Parameters \"\n    CollectionGetParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        initID:\n          type: string\n\n    Stats:\n      type: object\n      properties: \n        path:\n          type: string\n\n        qri:\n          type: string\n\n        stats:\n          type: object \n\n    Meta:\n      type: object\n      properties: \n        accessURL:\n          type: string\n          description: \"Url to access the dataset \"\n        accrualPeriodicity:\n          type: string\n          description: \"The frequency with which dataset changes. Must be an ISO 8601 repeating duration \"\n        citations:\n          type: object \n          description: \"Citations is a slice of assets used to build this dataset \"\n        contributors:\n          type: object \n          description: \"Contribute \"\n        description:\n          type: string\n          description: \"Description follows the DCAT sense of the word, it should be around a paragraph of human-readable text \"\n        downloadURL:\n          type: string\n          description: \"Url that should / must lead directly to the data itself \"\n        homeURL:\n          type: string\n          description: \"HomeURL is a path to a 'home' resource \"\n        identifier:\n          type: string\n          description: \"Identifier is for *other* data catalog specifications. Identifier should not be used or relied on to be unique, because this package does not enforce any of these rules. \"\n        keywords:\n          type: object \n          description: \"String of Keywords \"\n        language:\n          type: object \n          description: \"Languages this dataset is written in \"\n        license:\n          type: object \n          description: \"License will automatically parse to \u0026 from a string value if provided as a raw string \"\n        path:\n          type: string\n          description: \"path is the location of meta, transient derived \"\n        qri:\n          type: string\n          description: \"Kind is required, must be qri:md:[version] derived \"\n        readmeURL:\n          type: string\n          description: \"path to dataset readme file, not part of the DCAT spec, but a common convention in software dev \"\n        title:\n          type: string\n          description: \"Title of this dataset \"\n        theme:\n          type: object \n          description: \"'Category' for \"\n        version:\n          type: string\n          description: \"Version is the version identifier for this dataset \"\n    Dataset:\n      type: object\n      properties: \n        body:\n          type: object \n          description: \"Body represents dataset data with native go types. Datasets have at most one body. Body, BodyBytes, and BodyPath work together, often with only one field used at a time \"\n        bodyBytes:\n          type: object \n          description: \"BodyBytes is for representing dataset data as a slice of bytes \"\n        bodyPath:\n          type: string\n          description: \"BodyPath is the path to the hash of raw data as it resolves on the network \"\n        commit:\n          type: object \n          description: \"Commit contains author \u0026 change message information that describes this version of a dataset \"\n        id:\n          type: string\n          description: \"ID is an identifier string for this dataset. \"\n        meta:\n          type: object \n          description: \"Meta contains all human-readable meta about this dataset intended to aid in discovery and organization of this document \"\n        name:\n          type: string\n          description: \"name reference for this dataset, transient \"\n        path:\n          type: string\n          description: \"Location of this dataset, transient \"\n        peername:\n          type: string\n          description: \"Peername of dataset owner, transient \"\n        previousPath:\n          type: string\n          description: \"PreviousPath connects datasets to form a historical merkle-DAG of snapshots of this document, creating a version history \"\n        profileID:\n          type: string\n          description: \"ProfileID of dataset owner, transient \"\n        readme:\n          type: object \n          description: \"Readme is a path to the readme file for this dataset \"\n        numVersions:\n          type: number\n          description: \"Number of versions this dataset has, transient \"\n        qri:\n          type: string\n          description: \"Qri is a key for both identifying this document type, and versioning the dataset document definition itself. derived \"\n        structure:\n          type: object \n          description: \"Structure of this dataset \"\n        stats:\n          type: object \n          description: \"Stats is a component containing statistical metadata about the dataset body \"\n        transform:\n          type: object \n          description: \"Transform is a path to the transformation that generated this resource \"\n        viz:\n          type: object \n          description: \"Viz stores configuration data related to representing a dataset as a visualization \"\n    JSONOptions:\n      type: object\n      properties: \n        Options:\n          type: object \n\n    TransformResource:\n      type: object\n      properties: \n        path:\n          type: string\n\n    SetupParams:\n      type: object\n      properties: \n        Config:\n          type: object \n          description: \"a configuration is required. defaults to config.DefaultConfig() \"\n        RepoPath:\n          type: string\n          description: \"where to initialize qri repository \"\n        Register:\n          type: boolean\n          description: \"submit new username to the configured registry \"\n        Overwrite:\n          type: boolean\n          description: \"overwrite any existing repo, erasing all data and deleting private keys this is almost always a bad idea \"\n        SetupIPFS:\n          type: boolean\n          description: \"attempt to setup an IFPS repo \"\n        SetupIPFSConfigData:\n          type: object \n\n        Generator:\n          type: object \n          description: \"setup requires a crypto source \"\n    ConnectParamsPod:\n      type: object\n      properties: \n        peername:\n          type: string\n\n        profileID:\n          type: string\n\n        networkID:\n          type: string\n\n        multiaddr:\n          type: string\n\n    WorkflowParams:\n      type: object\n      properties: \n        workflowID:\n          type: string\n\n        initID:\n          type: string\n\n        ref:\n          type: string\n\n    ManifestParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n    RunParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        initID:\n          type: string\n\n        workflowID:\n          type: string\n\n    Readme:\n      type: object\n      properties: \n        format:\n          type: string\n          description: \"Format designates the visualization configuration syntax. Only supported formats are 'html' and 'md' \"\n        path:\n          type: string\n          description: \"Path is the location of a readme, transient derived \"\n        qri:\n          type: string\n          description: \"Qri should always be 'rm:0' derived \"\n        scriptPath:\n          type: string\n          description: \"ScriptPath is the path to the script that created this \"\n        text:\n          type: string\n          description: \"Text contains the contents of the script, transient \"\n        renderedPath:\n          type: string\n          description: \"RenderedPath is the path to the file rendered using the readme script and the body \"\n    MemResolver:\n      type: object\n      properties: \n        Username:\n          type: string\n\n        RefMap:\n          type: object \n\n        IDMap:\n          type: object \n\n    DAGInfoParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        label:\n          type: string\n\n    RegistryProfileParams:\n      type: object\n      properties: \n        Profile:\n          type: object \n\n    Rev:\n      type: object\n      properties: \n        Field:\n          type: string\n          description: \"field scopt, currently can only be a component name, or the entire dataset \"\n        Gen:\n          type: number\n          description: \"the nth-generational ancestor of a history \"\n    XLSXOptions:\n      type: object\n      properties: \n        sheetName:\n          type: string\n\n    PullParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n        logsOnly:\n          type: boolean\n          description: \"only fetch logbook data \"\n    ChangeReportParams:\n      type: object\n      properties: \n        leftRef:\n          type: string\n\n        rightRef:\n          type: string\n\n    GetResult:\n      type: object\n      properties: \n        value:\n          type: object \n\n        bytes:\n          type: object \n\n    ValidateResponse:\n      type: object\n      properties: \n        structure:\n          type: object \n          description: \"Structure used to perform validation \"\n        errors:\n          type: object \n          description: \"Validation Errors \"\n    License:\n      type: object\n      properties: \n        type:\n          type: string\n\n        url:\n          type: string\n\n    Theme:\n      type: object\n      properties: \n        description:\n          type: string\n\n        display_name:\n          type: string\n\n        image_display_url:\n          type: string\n\n        id:\n          type: string\n\n        name:\n          type: string\n\n        title:\n          type: string\n\n    SaveParams:\n      type: object\n      properties: \n        Dataset:\n          type: object \n          description: \"dataset supplies params directly, all other param fields override values supplied by dataset \"\n        ref:\n          type: string\n          description: \"dataset reference string, the name to save to\"\n          example: \"b5/world_bank_population\"\n        title:\n          type: string\n          description: \"commit title, defaults to a generated string based on diff\"\n          example: \"update dataset meta\"\n        Message:\n          type: string\n          description: \"commit message, defaults to blank\"\n          example: \"reaname title \u0026 fill in supported langages\"\n        bodyPath:\n          type: string\n          description: \"path to body data \"\n        filePaths:\n          type: object \n          description: \"absolute path or URL to the list of dataset files or components to load \"\n        secrets:\n          type: object \n          description: \"secrets for transform execution. Should be a set of key: value pairs \"\n        ScriptOutput:\n          type: object \n          description: \"optional writer to have transform script record standard output to note: this won't work over RPC, only on local calls \"\n        apply:\n          type: boolean\n          description: \"Apply runs a transform script to create the next version to save \"\n        replace:\n          type: boolean\n          description: \"Replace writes the entire given dataset as a new snapshot instead of applying save params as augmentations to the existing history \"\n        private:\n          type: boolean\n          description: \"option to make dataset private. private data is not currently implimented, see https://github.com/qri-io/qri/issues/291 for updates \"\n        convertFormatToPrev:\n          type: boolean\n          description: \"if true, convert body to the format of the previous version, if applicable \"\n        drop:\n          type: string\n          description: \"comma separated list of component names to delete before saving \"\n        force:\n          type: boolean\n          description: \"force a new commit, even if no changes are detected \"\n        shouldRender:\n          type: boolean\n          description: \"save a rendered version of the template along with the dataset \"\n        newName:\n          type: boolean\n          description: \"new dataset only, don't create a commit on an existing dataset, name will be unused \"\n    ParseError:\n      type: object\n      properties: \n        Message:\n          type: string\n\n    Citation:\n      type: object\n      properties: \n        name:\n          type: string\n\n        url:\n          type: string\n\n        email:\n          type: string\n\n    TransformStep:\n      type: object\n      properties: \n        name:\n          type: string\n\n        path:\n          type: string\n\n        syntax:\n          type: string\n\n        category:\n          type: string\n\n        script:\n          type: object \n\n    PreviewParams:\n      type: object\n      properties: \n        ref:\n          type: string\n\n### Response Schemas\n## Base\n    APIResponse:\n      type: object\n      properties:\n        data:\n          type: object\n          nullable: true\n        meta:\n          type: object\n          nullable: true\n    StatusOK:\n      type: object\n    String:\n      type: string\n    Nil:\n      type: object\n      nullable: true\n    NotDefined:\n      type: object\n      nullable: true\n    Pagination:\n      type: object\n      properties:\n        page:\n          type: integer\n        pageSize:\n          type: integer\n        resultCount:\n          type: integer\n        nextUrl:\n          type: string\n        prevUrl:\n          type: string\n    RawResponse:\n      # supports all string formats: string, binary, byte\n      type: string\n## Qri\n    StatusItem:\n      type: object\n    Profile:\n      type: object\n    DAGManifest:\n      type: object\n    DAGInfo:\n      type: object\n    ChangeReport:\n      type: object\n    MappedArraysOfVersionInfo:\n      type: object\n      additionalProperties: true\n## Error\n    APIMetaError:\n      type: object\n      properties:\n        code:\n          type: integer\n        error:\n          type: string",
			"canonicalURL": "/github.com/qri-io/qri@c771715036cb8ad778986151dc2f2527634a44da/-/blob/api/open_api_3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/qri-io/qri/blob/c771715036cb8ad778986151dc2f2527634a44da/api/open_api_3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/access/token\": post: responses: code 200: contents: application/json: generate schema: allOf: merge properties: try to merge conflicting property schemas: schema type mismatch:  and object"
}