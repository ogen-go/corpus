{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/typesense/typesense-go"
		},
		"file": {
			"name": "generator.yml",
			"size": 0,
			"path": "typesense/api/generator/generator.yml",
			"byteSize": 68747,
			"content": "components:\n  schemas:\n    ApiKey:\n      allOf:\n        - $ref: '#/components/schemas/ApiKeySchema'\n        - properties:\n            id:\n              format: int64\n              readOnly: true\n              type: integer\n            value:\n              readOnly: true\n              type: string\n            value_prefix:\n              readOnly: true\n              type: string\n          required:\n            - id\n            - value\n            - value_prefix\n          type: object\n    ApiKeySchema:\n      properties:\n        actions:\n          items:\n            type: string\n          type: array\n        collections:\n          items:\n            type: string\n          type: array\n        description:\n          type: string\n        expires_at:\n          format: int64\n          type: integer\n      required:\n        - actions\n        - collections\n      type: object\n    ApiKeysResponse:\n      properties:\n        keys:\n          items:\n            $ref: '#/components/schemas/ApiKey'\n          type: array\n          x-go-type: '[]*ApiKey'\n      required:\n        - keys\n      type: object\n    ApiResponse:\n      properties:\n        message:\n          type: string\n      required:\n        - message\n      type: object\n    CollectionAlias:\n      properties:\n        collection_name:\n          description: Name of the collection the alias mapped to\n          type: string\n        name:\n          description: Name of the collection alias\n          readOnly: true\n          type: string\n      required:\n        - collection_name\n        - name\n      type: object\n    CollectionAliasSchema:\n      properties:\n        collection_name:\n          description: Name of the collection you wish to map the alias to\n          type: string\n      required:\n        - collection_name\n      type: object\n    CollectionAliasesResponse:\n      properties:\n        aliases:\n          items:\n            $ref: '#/components/schemas/CollectionAlias'\n          type: array\n          x-go-type: '[]*CollectionAlias'\n      required:\n        - aliases\n      type: object\n    CollectionResponse:\n      allOf:\n        - $ref: '#/components/schemas/CollectionSchema'\n        - properties:\n            created_at:\n              description: Timestamp of when the collection was created\n              format: int64\n              readOnly: true\n              type: integer\n            num_documents:\n              description: Number of documents in the collection\n              format: int64\n              readOnly: true\n              type: integer\n          required:\n            - num_documents\n            - created_at\n          type: object\n    CollectionSchema:\n      properties:\n        default_sorting_field:\n          default: \"\"\n          description: The name of an int32 / float field that determines the order in which the search results are ranked when a sort_by clause is not provided during searching. This field must indicate some kind of popularity.\n          example: num_employees\n          type: string\n        fields:\n          description: A list of fields for querying, filtering and faceting\n          example:\n            - facet: false\n              name: company_name\n              type: string\n            - facet: false\n              name: num_employees\n              type: int32\n            - facet: true\n              name: country\n              type: string\n          items:\n            $ref: '#/components/schemas/Field'\n          type: array\n        name:\n          description: Name of the collection\n          example: companies\n          type: string\n        symbols_to_index:\n          default: []\n          description: |\n            List of symbols or special characters to be indexed.\n          items:\n            type: string\n          type: array\n        token_separators:\n          default: []\n          description: |\n            List of symbols or special characters to be used for  splitting the text into individual words in addition to space and new-line characters.\n          items:\n            type: string\n          type: array\n      required:\n        - name\n        - fields\n      type: object\n    CollectionUpdateSchema:\n      properties:\n        fields:\n          description: A list of fields for querying, filtering and faceting\n          example:\n            - facet: false\n              name: company_name\n              type: string\n            - facet: false\n              name: num_employees\n              type: int32\n            - facet: true\n              name: country\n              type: string\n          items:\n            $ref: '#/components/schemas/Field'\n          type: array\n      required:\n        - fields\n      type: object\n    ErrorResponse:\n      properties:\n        message:\n          type: string\n      type: object\n    FacetCounts:\n      properties:\n        counts:\n          items:\n            properties:\n              count:\n                type: integer\n              highlighted:\n                type: string\n              value:\n                type: string\n            type: object\n          type: array\n        field_name:\n          type: string\n        stats:\n          properties:\n            avg:\n              format: float\n              type: number\n            max:\n              type: integer\n            min:\n              type: integer\n            sum:\n              type: integer\n            total_values:\n              type: integer\n          type: object\n      type: object\n    Field:\n      properties:\n        drop:\n          example: true\n          type: boolean\n        facet:\n          default: false\n          example: false\n          type: boolean\n        index:\n          default: true\n          example: true\n          type: boolean\n        infix:\n          default: false\n          example: true\n          type: boolean\n        locale:\n          example: el\n          type: string\n        name:\n          example: company_name\n          type: string\n        optional:\n          default: false\n          example: true\n          type: boolean\n        sort:\n          default: false\n          example: true\n          type: boolean\n        type:\n          example: string\n          type: string\n      required:\n        - name\n        - type\n      type: object\n    HealthStatus:\n      properties:\n        ok:\n          type: boolean\n      required:\n        - ok\n      type: object\n    MultiSearchCollectionParameters:\n      allOf:\n        - $ref: '#/components/schemas/MultiSearchParameters'\n        - properties:\n            collection:\n              description: |\n                The collection to search in.\n              type: string\n          required:\n            - collection\n          type: object\n    MultiSearchParameters:\n      description: |\n        Parameters for the multi search API.\n      properties:\n        cache_ttl:\n          description: |\n            The duration (in seconds) that determines how long the search query is cached.  This value can be set on a per-query basis. Default: 60.\n          type: integer\n        drop_tokens_threshold:\n          description: |\n            If the number of results found for a specific query is less than this number, Typesense will attempt to drop the tokens in the query until enough results are found. Tokens that have the least individual hits are dropped first. Set to 0 to disable. Default: 10\n          type: integer\n        enable_overrides:\n          description: |\n            If you have some overrides defined but want to disable all of them during query time, you can do that by setting this parameter to false\n          type: boolean\n        exclude_fields:\n          description: List of fields from the document to exclude in the search result\n          type: string\n        exhaustive_search:\n          description: |\n            Setting this to true will make Typesense consider all prefixes and typo  corrections of the words in the query without stopping early when enough results are found  (drop_tokens_threshold and typo_tokens_threshold configurations are ignored).\n          type: boolean\n        facet_by:\n          description: A list of fields that will be used for faceting your results on. Separate multiple fields with a comma.\n          type: string\n        facet_query:\n          description: Facet values that are returned can now be filtered via this parameter. The matching facet text is also highlighted. For example, when faceting by `category`, you can set `facet_query=category:shoe` to return only facet values that contain the prefix \"shoe\".\n          type: string\n        filter_by:\n          description: Filter conditions for refining youropen api validator search results. Separate multiple conditions with \u0026\u0026.\n          example: 'num_employees:\u003e100 \u0026\u0026 country: [USA, UK]'\n          type: string\n        group_by:\n          description: You can aggregate search results into groups or buckets by specify one or more `group_by` fields. Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.\n          type: string\n        group_limit:\n          description: |\n            Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then only the top K hits in each group are returned in the response. Default: 3\n          type: integer\n        hidden_hits:\n          description: |\n            A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg: to hide records with IDs 123 and 456, you'd specify `123,456`.\n            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.\n          type: string\n        highlight_affix_num_tokens:\n          description: |\n            The number of tokens that should surround the highlighted text on each side. Default: 4\n          type: integer\n        highlight_end_tag:\n          description: |\n            The end tag used for the highlighted snippets. Default: `\u003c/mark\u003e`\n          type: string\n        highlight_fields:\n          description: |\n            A list of custom fields that must be highlighted even if you don't query  for them\n          type: string\n        highlight_full_fields:\n          description: List of fields which should be highlighted fully without snippeting\n          type: string\n        highlight_start_tag:\n          description: |\n            The start tag used for the highlighted snippets. Default: `\u003cmark\u003e`\n          type: string\n        include_fields:\n          description: List of fields from the document to include in the search result\n          type: string\n        max_facet_values:\n          description: Maximum number of facet values to be returned.\n          type: integer\n        min_len_1typo:\n          description: |\n            Minimum word length for 1-typo correction to be applied.  The value of num_typos is still treated as the maximum allowed typos.\n          type: integer\n        min_len_2typo:\n          description: |\n            Minimum word length for 2-typo correction to be applied.  The value of num_typos is still treated as the maximum allowed typos.\n          type: integer\n        num_typos:\n          description: |\n            The number of typographical errors (1 or 2) that would be tolerated. Default: 2\n          type: integer\n        page:\n          description: Results from this specific page number would be fetched.\n          type: integer\n        per_page:\n          description: 'Number of results to fetch per page. Default: 10'\n          type: integer\n        pinned_hits:\n          description: |\n            A list of records to unconditionally include in the search results at specific positions. An example use case would be to feature or promote certain items on the top of search results. A list of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record with ID 456 at Position 5, you'd specify `123:1,456:5`.\n            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and  finally `hidden_hits`.\n          type: string\n        pre_segmented_query:\n          description: |\n            You can index content from any logographic language into Typesense if you are able to segment / split the text into space-separated words yourself  before indexing and querying.\n            Set this parameter to true to do the same\n          type: boolean\n        prefix:\n          description: Boolean field to indicate that the last word in the query should be treated as a prefix, and not as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to true.\n          type: string\n        prioritize_exact_match:\n          description: |\n            Set this parameter to true to ensure that an exact match is ranked above the others\n          type: boolean\n        q:\n          description: The query text to search for in the collection. Use * as the search string to return all documents. This is typically useful when used in conjunction with filter_by.\n          type: string\n        query_by:\n          description: A list of `string` fields that should be queried against. Multiple fields are separated with a comma.\n          type: string\n        query_by_weights:\n          description: The relative weight to give each `query_by` field when ranking results. This can be used to boost fields in priority, when looking for matches. Multiple fields are separated with a comma.\n          type: string\n        search_cutoff_ms:\n          description: |\n            Typesense will attempt to return results early if the cutoff time has elapsed.  This is not a strict guarantee and facet computation is not bound by this parameter.\n          type: integer\n        snippet_threshold:\n          description: |\n            Field values under this length will be fully highlighted, instead of showing a snippet of relevant portion. Default: 30\n          type: integer\n        sort_by:\n          description: A list of numerical fields and their corresponding sort orders that will be used for ordering your results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is specified, results are sorted by `_text_match:desc,default_sorting_field:desc`\n          type: string\n        typo_tokens_threshold:\n          description: |\n            If the number of results found for a specific query is less than this number, Typesense will attempt to look for tokens with more typos until enough results are found. Default: 100\n          type: integer\n        use_cache:\n          description: |\n            Enable server side caching of search query results. By default, caching is disabled.\n          type: boolean\n      type: object\n    MultiSearchResult:\n      properties:\n        results:\n          items:\n            $ref: '#/components/schemas/SearchResult'\n          type: array\n      required:\n        - results\n      type: object\n    MultiSearchSearchesParameter:\n      properties:\n        searches:\n          items:\n            $ref: '#/components/schemas/MultiSearchCollectionParameters'\n          type: array\n      required:\n        - searches\n      type: object\n    ScopedKeyParameters:\n      properties:\n        expires_at:\n          type: number\n        filter_by:\n          type: string\n      type: object\n    SearchGroupedHit:\n      properties:\n        group_key:\n          items:\n            type: string\n          type: array\n        hits:\n          description: The documents that matched the search query\n          items:\n            $ref: '#/components/schemas/SearchResultHit'\n          type: array\n      required:\n        - group_key\n        - hits\n      type: object\n    SearchHighlight:\n      properties:\n        field:\n          example: company_name\n          type: string\n        indices:\n          description: The indices property will be present only for string[] fields and will contain the corresponding indices of the snippets in the search field\n          example: 1\n          items:\n            type: integer\n          type: array\n        matched_tokens:\n          items:\n            type: object\n            x-go-type: interface{}\n          type: array\n        snippet:\n          description: Present only for (non-array) string fields\n          example: \u003cmark\u003eStark\u003c/mark\u003e Industries\n          type: string\n        snippets:\n          description: Present only for (array) string[] fields\n          example:\n            - \u003cmark\u003eStark\u003c/mark\u003e Industries\n            - \u003cmark\u003eStark\u003c/mark\u003e Corp\n          items:\n            type: string\n          type: array\n      type: object\n    SearchOverride:\n      allOf:\n        - $ref: '#/components/schemas/SearchOverrideSchema'\n        - properties:\n            id:\n              readOnly: true\n              type: string\n          required:\n            - id\n          type: object\n    SearchOverrideExclude:\n      properties:\n        id:\n          description: document id that should be excluded from the search results.\n          type: string\n      required:\n        - id\n      type: object\n    SearchOverrideInclude:\n      properties:\n        id:\n          description: document id that should be included\n          type: string\n        position:\n          description: position number where document should be included in the search results\n          type: integer\n      required:\n        - id\n        - position\n      type: object\n    SearchOverrideRule:\n      properties:\n        match:\n          description: |\n            Indicates whether the match on the query term should be `exact` or `contains`. If we want to match all queries that contained the word `apple`, we will use the `contains` match instead.\n          enum:\n            - exact\n            - contains\n          type: string\n        query:\n          description: Indicates what search queries should be overridden\n          type: string\n      required:\n        - query\n        - match\n      type: object\n    SearchOverrideSchema:\n      properties:\n        excludes:\n          description: List of document `id`s that should be excluded from the search results.\n          items:\n            $ref: '#/components/schemas/SearchOverrideExclude'\n          type: array\n        filter_by:\n          description: |\n            A filter by clause that is applied to any search query that matches the override rule.\n          type: string\n        includes:\n          description: List of document `id`s that should be included in the search results with their corresponding `position`s.\n          items:\n            $ref: '#/components/schemas/SearchOverrideInclude'\n          type: array\n        remove_matched_tokens:\n          description: |\n            Indicates whether search query tokens that exist in the override's rule should be removed from the search query.\n          type: boolean\n        rule:\n          $ref: '#/components/schemas/SearchOverrideRule'\n      required:\n        - rule\n      type: object\n    SearchOverridesResponse:\n      properties:\n        overrides:\n          items:\n            $ref: '#/components/schemas/SearchOverride'\n          type: array\n          x-go-type: '[]*SearchOverride'\n      required:\n        - overrides\n      type: object\n    SearchParameters:\n      properties:\n        cache_ttl:\n          description: |\n            The duration (in seconds) that determines how long the search query is cached.  This value can be set on a per-query basis. Default: 60.\n          type: integer\n        drop_tokens_threshold:\n          description: |\n            If the number of results found for a specific query is less than this number, Typesense will attempt to drop the tokens in the query until enough results are found. Tokens that have the least individual hits are dropped first. Set to 0 to disable. Default: 10\n          type: integer\n        enable_overrides:\n          description: |\n            If you have some overrides defined but want to disable all of them during query time, you can do that by setting this parameter to false\n          type: boolean\n        exclude_fields:\n          description: List of fields from the document to exclude in the search result\n          type: string\n        exhaustive_search:\n          description: |\n            Setting this to true will make Typesense consider all prefixes and typo  corrections of the words in the query without stopping early when enough results are found  (drop_tokens_threshold and typo_tokens_threshold configurations are ignored).\n          type: boolean\n        facet_by:\n          description: A list of fields that will be used for faceting your results on. Separate multiple fields with a comma.\n          type: string\n        facet_query:\n          description: Facet values that are returned can now be filtered via this parameter. The matching facet text is also highlighted. For example, when faceting by `category`, you can set `facet_query=category:shoe` to return only facet values that contain the prefix \"shoe\".\n          type: string\n        filter_by:\n          description: Filter conditions for refining youropen api validator search results. Separate multiple conditions with \u0026\u0026.\n          example: 'num_employees:\u003e100 \u0026\u0026 country: [USA, UK]'\n          type: string\n        group_by:\n          description: You can aggregate search results into groups or buckets by specify one or more `group_by` fields. Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.\n          type: string\n        group_limit:\n          description: |\n            Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then only the top K hits in each group are returned in the response. Default: 3\n          type: integer\n        hidden_hits:\n          description: |\n            A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg: to hide records with IDs 123 and 456, you'd specify `123,456`.\n            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.\n          type: string\n        highlight_affix_num_tokens:\n          description: |\n            The number of tokens that should surround the highlighted text on each side. Default: 4\n          type: integer\n        highlight_end_tag:\n          description: |\n            The end tag used for the highlighted snippets. Default: `\u003c/mark\u003e`\n          type: string\n        highlight_fields:\n          description: |\n            A list of custom fields that must be highlighted even if you don't query  for them\n          type: string\n        highlight_full_fields:\n          description: List of fields which should be highlighted fully without snippeting\n          type: string\n        highlight_start_tag:\n          description: |\n            The start tag used for the highlighted snippets. Default: `\u003cmark\u003e`\n          type: string\n        include_fields:\n          description: List of fields from the document to include in the search result\n          type: string\n        max_facet_values:\n          description: Maximum number of facet values to be returned.\n          type: integer\n        min_len_1typo:\n          description: |\n            Minimum word length for 1-typo correction to be applied.  The value of num_typos is still treated as the maximum allowed typos.\n          type: integer\n        min_len_2typo:\n          description: |\n            Minimum word length for 2-typo correction to be applied.  The value of num_typos is still treated as the maximum allowed typos.\n          type: integer\n        num_typos:\n          description: |\n            The number of typographical errors (1 or 2) that would be tolerated. Default: 2\n          type: integer\n        page:\n          description: Results from this specific page number would be fetched.\n          type: integer\n        per_page:\n          description: 'Number of results to fetch per page. Default: 10'\n          type: integer\n        pinned_hits:\n          description: |\n            A list of records to unconditionally include in the search results at specific positions. An example use case would be to feature or promote certain items on the top of search results. A list of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record with ID 456 at Position 5, you'd specify `123:1,456:5`.\n            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and  finally `hidden_hits`.\n          type: string\n        pre_segmented_query:\n          description: |\n            You can index content from any logographic language into Typesense if you are able to segment / split the text into space-separated words yourself  before indexing and querying.\n            Set this parameter to true to do the same\n          type: boolean\n        prefix:\n          description: Boolean field to indicate that the last word in the query should be treated as a prefix, and not as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to true.\n          type: string\n        prioritize_exact_match:\n          description: |\n            Set this parameter to true to ensure that an exact match is ranked above the others\n          type: boolean\n        q:\n          description: The query text to search for in the collection. Use * as the search string to return all documents. This is typically useful when used in conjunction with filter_by.\n          type: string\n        query_by:\n          description: A list of `string` fields that should be queried against. Multiple fields are separated with a comma.\n          type: string\n        query_by_weights:\n          description: The relative weight to give each `query_by` field when ranking results. This can be used to boost fields in priority, when looking for matches. Multiple fields are separated with a comma.\n          type: string\n        search_cutoff_ms:\n          description: |\n            Typesense will attempt to return results early if the cutoff time has elapsed.  This is not a strict guarantee and facet computation is not bound by this parameter.\n          type: integer\n        snippet_threshold:\n          description: |\n            Field values under this length will be fully highlighted, instead of showing a snippet of relevant portion. Default: 30\n          type: integer\n        sort_by:\n          description: A list of numerical fields and their corresponding sort orders that will be used for ordering your results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is specified, results are sorted by `_text_match:desc,default_sorting_field:desc`\n          example: num_employees:desc\n          type: string\n        typo_tokens_threshold:\n          description: |\n            If the number of results found for a specific query is less than this number, Typesense will attempt to look for tokens with more typos until enough results are found. Default: 100\n          type: integer\n        use_cache:\n          description: |\n            Enable server side caching of search query results. By default, caching is disabled.\n          type: boolean\n      required:\n        - q\n        - query_by\n      type: object\n    SearchResult:\n      properties:\n        facet_counts:\n          items:\n            $ref: '#/components/schemas/FacetCounts'\n          type: array\n        found:\n          description: The number of documents found\n          type: integer\n        grouped_hits:\n          items:\n            $ref: '#/components/schemas/SearchGroupedHit'\n          type: array\n        hits:\n          description: The documents that matched the search query\n          items:\n            $ref: '#/components/schemas/SearchResultHit'\n          type: array\n        out_of:\n          description: The total number of pages\n          type: integer\n        page:\n          description: The search result page number\n          type: integer\n        request_params:\n          properties:\n            collection_name:\n              type: string\n            per_page:\n              type: integer\n            q:\n              type: string\n          required:\n            - collection_name\n            - q\n            - per_page\n          type: object\n        search_cutoff:\n          description: Whether the search was cut off\n          type: boolean\n        search_time_ms:\n          description: The number of milliseconds the search took\n          type: integer\n      type: object\n    SearchResultHit:\n      example:\n        document:\n          company_name: Stark Industries\n          country: USA\n          id: \"124\"\n          num_employees: 5215\n        highlights:\n          company_name:\n            field: company_name\n            snippet: \u003cmark\u003eStark\u003c/mark\u003e Industries\n        text_match: 1234556\n      properties:\n        document:\n          description: Can be any key-value pair\n          type: object\n        geo_distance_meters:\n          additionalProperties:\n            type: integer\n          description: Can be any key-value pair\n          type: object\n        highlights:\n          description: Contains highlighted portions of the search fields\n          items:\n            $ref: '#/components/schemas/SearchHighlight'\n          type: array\n        text_match:\n          format: int64\n          type: integer\n      type: object\n    SearchSynonym:\n      allOf:\n        - $ref: '#/components/schemas/SearchSynonymSchema'\n        - properties:\n            id:\n              readOnly: true\n              type: string\n          required:\n            - id\n          type: object\n    SearchSynonymSchema:\n      properties:\n        root:\n          description: For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.\n          type: string\n        synonyms:\n          description: Array of words that should be considered as synonyms.\n          items:\n            type: string\n          type: array\n      required:\n        - synonyms\n      type: object\n    SearchSynonymsResponse:\n      properties:\n        synonyms:\n          items:\n            $ref: '#/components/schemas/SearchSynonym'\n          type: array\n          x-go-type: '[]*SearchSynonym'\n      required:\n        - synonyms\n      type: object\n    SnapshotParameters:\n      properties:\n        snapshot_path:\n          type: string\n      type: object\n    SuccessStatus:\n      properties:\n        success:\n          type: boolean\n      required:\n        - success\n      type: object\n  securitySchemes:\n    api_key_header:\n      in: header\n      name: X-TYPESENSE-API-KEY\n      type: apiKey\nexternalDocs:\n  description: Find out more about Typsesense\n  url: https://typesense.org\ninfo:\n  description: An open source search engine for building delightful search experiences.\n  title: Typesense API\n  version: 0.23.0\nopenapi: 3.0.3\npaths:\n  /aliases:\n    get:\n      description: List all aliases and the corresponding collections that they map to.\n      operationId: getAliases\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionAliasesResponse'\n          description: List of all collection aliases\n      summary: List all aliases\n      tags:\n        - collections\n  /aliases/{aliasName}:\n    delete:\n      operationId: deleteAlias\n      parameters:\n        - description: The name of the alias to delete\n          in: path\n          name: aliasName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionAlias'\n          description: Collection alias was deleted\n      summary: Delete an alias\n      tags:\n        - collections\n    get:\n      description: Find out which collection an alias points to by fetching it\n      operationId: getAlias\n      parameters:\n        - description: The name of the alias to retrieve\n          in: path\n          name: aliasName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionAlias'\n          description: Collection alias fetched\n      summary: Retrieve an alias\n      tags:\n        - collections\n    put:\n      description: Create or update a collection alias. An alias is a virtual collection name that points to a real collection. If you're familiar with symbolic links on Linux, it's very similar to that. Aliases are useful when you want to reindex your data in the background on a new collection and switch your application to it without any changes to your code.\n      operationId: upsertAlias\n      parameters:\n        - description: The name of the alias to create/update\n          in: path\n          name: aliasName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionAliasSchema'\n        description: Collection alias to be created/updated\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionAlias'\n          description: The collection alias was created/updated\n      summary: Create or update a collection alias\n      tags:\n        - collections\n  /collections:\n    get:\n      description: Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.\n      operationId: getCollections\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/CollectionResponse'\n                type: array\n                x-go-type: '[]*CollectionResponse'\n          description: List of all collections\n      summary: List all collections\n      tags:\n        - collections\n    post:\n      description: When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.\n      operationId: createCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionSchema'\n        description: The collection object to be created\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionResponse'\n          description: Collection successfully created\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Collection already exists\n      summary: Create a new collection\n      tags:\n        - collections\n  /collections/{collectionName}:\n    delete:\n      description: Permanently drops a collection. This action cannot be undone. For large collections, this might have an impact on read latencies.\n      operationId: deleteCollection\n      parameters:\n        - description: The name of the collection to delete\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionResponse'\n          description: Collection deleted\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Collection not found\n      summary: Delete a collection\n      tags:\n        - collections\n    get:\n      description: Retrieve the details of a collection, given its name.\n      operationId: getCollection\n      parameters:\n        - description: The name of the collection to retrieve\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionResponse'\n          description: Collection fetched\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Collection not found\n      summary: Retrieve a single collection\n      tags:\n        - collections\n    patch:\n      description: Update a collection's schema to modify the fields and their types.\n      operationId: updateCollection\n      parameters:\n        - description: The name of the collection to update\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionUpdateSchema'\n        description: The document object with fields to be updated\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionUpdateSchema'\n          description: The updated partial collection schema\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The collection was not found\n      summary: Update a collection\n      tags:\n        - collections\n  /collections/{collectionName}/documents:\n    delete:\n      description: Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter to control the number of documents that should deleted at a time. A larger value will speed up deletions, but will impact performance of other operations running on the server.\n      operationId: deleteDocuments\n      parameters:\n        - description: The name of the collection to delete documents from\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: batch_size\n          schema:\n            type: integer\n        - in: query\n          name: filter_by\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                properties:\n                  num_deleted:\n                    type: integer\n                required:\n                  - num_deleted\n                type: object\n          description: Documents successfully deleted\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Collection not found\n      summary: Delete a bunch of documents\n      tags:\n        - documents\n    post:\n      description: A document to be indexed in a given collection must conform to the schema of the collection.\n      operationId: indexDocument\n      parameters:\n        - description: The name of the collection to add the document to\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: Additional action to perform\n          in: query\n          name: action\n          schema:\n            enum:\n              - upsert\n            example: upsert\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Can be any key-value pair\n              type: object\n              x-go-type: interface{}\n        description: The document object to be indexed\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                description: Can be any key-value pair\n                type: object\n          description: Document successfully created/indexed\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Collection not found\n      summary: Index a document\n      tags:\n        - documents\n  /collections/{collectionName}/documents/{documentId}:\n    delete:\n      description: Delete an individual document from a collection by using its ID.\n      operationId: deleteDocument\n      parameters:\n        - description: The name of the collection to search for the document under\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                description: Can be any key-value pair\n                type: object\n          description: The document referenced by the ID was deleted\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The document or collection was not found\n      summary: Delete a document\n      tags:\n        - documents\n    get:\n      description: Fetch an individual document from a collection by using its ID.\n      operationId: getDocument\n      parameters:\n        - description: The name of the collection to search for the document under\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                description: Can be any key-value pair\n                type: object\n          description: The document referenced by the ID\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The document or collection was not found\n      summary: Retreive a document\n      tags:\n        - documents\n    patch:\n      description: Update an individual document from a collection by using its ID. The update can be partial.\n      operationId: updateDocument\n      parameters:\n        - description: The name of the collection to search for the document under\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Can be any key-value pair\n              type: object\n              x-go-type: interface{}\n        description: The document object with fields to be updated\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                description: Can be any key-value pair\n                type: object\n          description: The document referenced by the ID was updated\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The document or collection was not found\n      summary: Update a document\n      tags:\n        - documents\n  /collections/{collectionName}/documents/export:\n    get:\n      description: Export all documents in a collection in JSON lines format.\n      operationId: exportDocuments\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: filter_by\n          schema:\n            type: string\n        - in: query\n          name: include_fields\n          schema:\n            type: string\n        - in: query\n          name: exclude_fields\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/octet-stream:\n              schema:\n                example: |\n                  {\"id\": \"124\", \"company_name\": \"Stark Industries\", \"num_employees\": 5215, \"country\": \"US\"}\n                  {\"id\": \"125\", \"company_name\": \"Future Technology\", \"num_employees\": 1232,\"country\": \"UK\"}\n                  {\"id\": \"126\", \"company_name\": \"Random Corp.\", \"num_employees\": 531,\"country\": \"AU\"}\n                type: string\n          description: Exports all the documents in a given collection.\n        404:\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The collection was not found\n      summary: Export all documents in a collection\n      tags:\n        - documents\n  /collections/{collectionName}/documents/import:\n    post:\n      description: The documents to be imported must be formatted in a newline delimited JSON structure. You can feed the output file from a Typesense export operation directly as import.\n      operationId: importDocuments\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: action\n          schema:\n            type: string\n        - in: query\n          name: batch_size\n          schema:\n            type: integer\n        - in: query\n          name: dirty_values\n          schema:\n            enum:\n              - coerce_or_reject\n              - coerce_or_drop\n              - drop\n              - reject\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              description: The JSONL file to import\n              type: string\n        description: The json array of documents or the JSONL file to import\n        required: true\n      responses:\n        200:\n          content:\n            application/octet-stream:\n              schema:\n                example: |\n                  {\"success\": true}\n                  {\"success\": false, \"error\": \"Bad JSON.\", \"document\": \"[bad doc\"}\n                type: string\n          description: Result of the import operation. Each line of the response indicates the result of each document present in the request body (in the same order). If the import of a single document fails, it does not affect the other documents. If there is a failure, the response line will include a corresponding error message and as well as the actual document content.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The collection was not found\n      summary: Import documents into a collection\n      tags:\n        - documents\n  /collections/{collectionName}/documents/search:\n    get:\n      description: Search for documents in a collection that match the search criteria.\n      operationId: searchCollection\n      parameters:\n        - description: The name of the collection to search for the document under\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: drop_tokens_threshold\n          schema:\n            type: integer\n        - in: query\n          name: exhaustive_search\n          schema:\n            type: boolean\n        - in: query\n          name: highlight_start_tag\n          schema:\n            type: string\n        - in: query\n          name: include_fields\n          schema:\n            type: string\n        - in: query\n          name: highlight_end_tag\n          schema:\n            type: string\n        - in: query\n          name: highlight_fields\n          schema:\n            type: string\n        - in: query\n          name: search_cutoff_ms\n          schema:\n            type: integer\n        - in: query\n          name: min_len_2typo\n          schema:\n            type: integer\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n        - in: query\n          name: num_typos\n          schema:\n            type: integer\n        - in: query\n          name: use_cache\n          schema:\n            type: boolean\n        - in: query\n          name: cache_ttl\n          schema:\n            type: integer\n        - in: query\n          name: query_by_weights\n          schema:\n            type: string\n        - in: query\n          name: filter_by\n          schema:\n            type: string\n        - in: query\n          name: sort_by\n          schema:\n            type: string\n        - in: query\n          name: facet_query\n          schema:\n            type: string\n        - in: query\n          name: highlight_full_fields\n          schema:\n            type: string\n        - in: query\n          name: typo_tokens_threshold\n          schema:\n            type: integer\n        - in: query\n          name: hidden_hits\n          schema:\n            type: string\n        - in: query\n          name: prefix\n          schema:\n            type: string\n        - in: query\n          name: highlight_affix_num_tokens\n          schema:\n            type: integer\n        - in: query\n          name: snippet_threshold\n          schema:\n            type: integer\n        - in: query\n          name: pinned_hits\n          schema:\n            type: string\n        - in: query\n          name: enable_overrides\n          schema:\n            type: boolean\n        - in: query\n          name: page\n          schema:\n            type: integer\n        - in: query\n          name: facet_by\n          schema:\n            type: string\n        - in: query\n          name: exclude_fields\n          schema:\n            type: string\n        - in: query\n          name: q\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: prioritize_exact_match\n          schema:\n            type: boolean\n        - in: query\n          name: max_facet_values\n          schema:\n            type: integer\n        - in: query\n          name: group_by\n          schema:\n            type: string\n        - in: query\n          name: group_limit\n          schema:\n            type: integer\n        - in: query\n          name: pre_segmented_query\n          schema:\n            type: boolean\n        - in: query\n          name: min_len_1typo\n          schema:\n            type: integer\n        - in: query\n          name: query_by\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n          description: Search results\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: Bad request, see error message for details\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: The collection or field was not found\n      summary: Search for documents in a collection\n      tags:\n        - documents\n  /collections/{collectionName}/overrides:\n    get:\n      operationId: getSearchOverrides\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchOverridesResponse'\n          description: List of all search overrides\n      summary: List all collection overrides\n      tags:\n        - documents\n        - promote\n  /collections/{collectionName}/overrides/{overrideId}:\n    delete:\n      operationId: deleteSearchOverride\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The ID of the search override to delete\n          in: path\n          name: overrideId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchOverride'\n          description: The ID of the deleted search override\n      summary: Delete an override associated with a collection\n      tags:\n        - documents\n        - promote\n    get:\n      description: Retrieve the details of a search override, given its id.\n      operationId: getSearchOverride\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The id of the search override\n          in: path\n          name: overrideId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchOverride'\n          description: Search override fetched\n      summary: Retrieve a single search override\n      tags:\n        - documents\n        - override\n    put:\n      description: Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.\n      operationId: upsertSearchOverride\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The ID of the search override to create/update\n          in: path\n          name: overrideId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchOverrideSchema'\n        description: The search override object to be created/updated\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchOverride'\n          description: Created/updated search override\n      summary: Create or update an override to promote certain documents over others\n      tags:\n        - documents\n        - promote\n  /collections/{collectionName}/synonyms:\n    get:\n      operationId: getSearchSynonyms\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchSynonymsResponse'\n          description: List of all search synonyms\n      summary: List all collection synonyms\n      tags:\n        - documents\n  /collections/{collectionName}/synonyms/{synonymId}:\n    delete:\n      operationId: deleteSearchSynonym\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The ID of the search synonym to delete\n          in: path\n          name: synonymId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchSynonym'\n          description: The ID of the deleted search synonym\n      summary: Delete a synonym associated with a collection\n      tags:\n        - documents\n    get:\n      description: Retrieve the details of a search synonym, given its id.\n      operationId: getSearchSynonym\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The id of the search synonym\n          in: path\n          name: synonymId\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchSynonym'\n          description: Search synonym fetched\n      summary: Retrieve a single search synonym\n      tags:\n        - documents\n    put:\n      description: Create or update a synonym  to define search terms that should be considered equivalent.\n      operationId: upsertSearchSynonym\n      parameters:\n        - description: The name of the collection\n          in: path\n          name: collectionName\n          required: true\n          schema:\n            type: string\n        - description: The ID of the search synonym to create/update\n          in: path\n          name: synonymId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchSynonymSchema'\n        description: The search synonym object to be created/updated\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchSynonym'\n          description: Created/updated search synonym\n      summary: Create or update a synonym\n      tags:\n        - documents\n  /debug:\n    get:\n      description: Print debugging information\n      operationId: debug\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                properties:\n                  version:\n                    type: string\n                type: object\n          description: Debugging information\n      summary: Print debugging information\n      tags:\n        - debug\n  /health:\n    get:\n      description: Checks if Typesense server is ready to accept requests.\n      operationId: health\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatus'\n          description: Search service is ready for requests.\n      summary: Checks if Typesense server is ready to accept requests.\n      tags:\n        - health\n  /keys:\n    get:\n      operationId: getKeys\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKeysResponse'\n          description: List of all keys\n      summary: Retrieve (metadata about) all keys.\n      tags:\n        - keys\n    post:\n      description: Create an API Key with fine-grain access control. You can restrict access on both a per-collection and per-action level. The generated key is returned only during creation. You want to store this key carefully in a secure place.\n      operationId: createKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApiKeySchema'\n        description: The object that describes API key scope\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: Created API key\n      summary: Create an API Key\n      tags:\n        - keys\n  /keys/{keyId}:\n    delete:\n      operationId: deleteKey\n      parameters:\n        - description: The ID of the key to delete\n          in: path\n          name: keyId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: The key referenced by the ID\n      summary: Delete an API key given its ID.\n      tags:\n        - keys\n    get:\n      description: Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to security reasons, only the create endpoint returns the full API key.\n      operationId: getKey\n      parameters:\n        - description: The ID of the key to retrieve\n          in: path\n          name: keyId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKey'\n          description: The key referenced by the ID\n      summary: Retrieve (metadata about) a key\n      tags:\n        - keys\n  /multi_search:\n    post:\n      description: This is especially useful to avoid round-trip network latencies incurred otherwise if each of these requests are sent in separate HTTP requests. You can also use this feature to do a federated search across multiple collections in a single HTTP request.\n      operationId: multiSearch\n      parameters:\n        - in: query\n          name: query_by\n          schema:\n            type: string\n        - in: query\n          name: group_by\n          schema:\n            type: string\n        - in: query\n          name: group_limit\n          schema:\n            type: integer\n        - in: query\n          name: pre_segmented_query\n          schema:\n            type: boolean\n        - in: query\n          name: min_len_1typo\n          schema:\n            type: integer\n        - in: query\n          name: highlight_start_tag\n          schema:\n            type: string\n        - in: query\n          name: drop_tokens_threshold\n          schema:\n            type: integer\n        - in: query\n          name: exhaustive_search\n          schema:\n            type: boolean\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n        - in: query\n          name: include_fields\n          schema:\n            type: string\n        - in: query\n          name: highlight_end_tag\n          schema:\n            type: string\n        - in: query\n          name: highlight_fields\n          schema:\n            type: string\n        - in: query\n          name: search_cutoff_ms\n          schema:\n            type: integer\n        - in: query\n          name: min_len_2typo\n          schema:\n            type: integer\n        - in: query\n          name: query_by_weights\n          schema:\n            type: string\n        - in: query\n          name: num_typos\n          schema:\n            type: integer\n        - in: query\n          name: use_cache\n          schema:\n            type: boolean\n        - in: query\n          name: cache_ttl\n          schema:\n            type: integer\n        - in: query\n          name: prefix\n          schema:\n            type: string\n        - in: query\n          name: filter_by\n          schema:\n            type: string\n        - in: query\n          name: sort_by\n          schema:\n            type: string\n        - in: query\n          name: facet_query\n          schema:\n            type: string\n        - in: query\n          name: highlight_full_fields\n          schema:\n            type: string\n        - in: query\n          name: typo_tokens_threshold\n          schema:\n            type: integer\n        - in: query\n          name: hidden_hits\n          schema:\n            type: string\n        - in: query\n          name: page\n          schema:\n            type: integer\n        - in: query\n          name: highlight_affix_num_tokens\n          schema:\n            type: integer\n        - in: query\n          name: snippet_threshold\n          schema:\n            type: integer\n        - in: query\n          name: pinned_hits\n          schema:\n            type: string\n        - in: query\n          name: enable_overrides\n          schema:\n            type: boolean\n        - in: query\n          name: q\n          schema:\n            type: string\n        - in: query\n          name: facet_by\n          schema:\n            type: string\n        - in: query\n          name: exclude_fields\n          schema:\n            type: string\n        - in: query\n          name: max_facet_values\n          schema:\n            type: integer\n        - in: query\n          name: prioritize_exact_match\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MultiSearchSearchesParameter'\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MultiSearchResult'\n          description: Search results\n      summary: send multiple search requests in a single HTTP request\n      tags:\n        - documents\n  /operations/snapshot:\n    post:\n      description: Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory. You can then backup the snapshot directory that gets created and later restore it as a data directory, as needed.\n      operationId: takeSnapshot\n      parameters:\n        - description: The directory on the server where the snapshot should be saved.\n          in: query\n          name: snapshot_path\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n          description: Snapshot is created.\n      summary: Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory.\n      tags:\n        - operations\n  /operations/vote:\n    post:\n      description: Triggers a follower node to initiate the raft voting process, which triggers leader re-election. The follower node that you run this operation against will become the new leader, once this command succeeds.\n      operationId: vote\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n          description: Re-election is performed.\n      summary: Triggers a follower node to initiate the raft voting process, which triggers leader re-election.\n      tags:\n        - operations\nsecurity:\n  - api_key_header: []\ntags:\n  - description: A collection is defined by a schema\n    externalDocs:\n      description: Find out more\n      url: https://typesense.org/api/#create-collection\n    name: collections\n  - description: A document is an individual record to be indexed and belongs to a collection\n    externalDocs:\n      description: Find out more\n      url: https://typesense.org/api/#index-document\n    name: documents\n  - description: Promote certain documents over others\n    externalDocs:\n      description: Find out more\n      url: https://typesense.org/docs/0.23.0/api/#curation\n    name: promote\n  - description: Manage API Keys with fine-grain access control\n    externalDocs:\n      description: Find out more\n      url: https://typesense.org/docs/0.23.0/api/#api-keys\n    name: keys\n  - description: Debugging information\n    name: debug\n  - description: Manage Typesense cluster\n    externalDocs:\n      description: Find out more\n      url: https://typesense.org/docs/0.23.0/api/#cluster-operations\n    name: operations\n"
		}
	},
	"Error": "buildIR: make ir: path \"/collections/{collectionName}/documents/import\": post: requestBody: contents: application/octet-stream: octet stream with \"string\" schema not supported"
}