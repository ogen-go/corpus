{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/thim81/openapi-format"
		},
		"file": {
			"name": "output.yaml",
			"size": 0,
			"path": "test/json-custom-yaml/output.yaml",
			"byteSize": 9228,
			"content": "openapi: 3.0.2\ninfo:\n  description: |-\n    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n  version: 1.0.6-SNAPSHOT\n  title: Swagger Petstore - OpenAPI 3.0\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: /v3\npaths:\n  /pet:\n    post:\n      operationId: addPet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n    put:\n      operationId: updatePet\n      summary: Update an existing pet\n      description: Update an existing pet by Id\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n  /pet/findByStatus:\n    get:\n      parameters:\n        - required: false\n          schema:\n            type: string\n            default: available\n            enum:\n              - available\n              - pending\n              - sold\n          name: status\n          in: query\n          description: Status values that need to be considered for filter\n          explode: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      operationId: findPetsByStatus\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          description: Order Status\n          type: string\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      x-swagger-router-model: io.swagger.petstore.model.Order\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n          xml:\n            wrapped: true\n            name: addresses\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: 94301\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      x-swagger-router-model: io.swagger.petstore.model.Category\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: 12345\n        phone:\n          type: string\n          example: 12345\n        userStatus:\n          description: User Status\n          type: integer\n          format: int32\n          example: 1\n      x-swagger-router-model: io.swagger.petstore.model.User\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      x-swagger-router-model: io.swagger.petstore.model.Tag\n      xml:\n        name: tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          items:\n            type: string\n            xml:\n              name: photoUrl\n          xml:\n            wrapped: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n            xml:\n              name: tag\n          xml:\n            wrapped: true\n        status:\n          description: pet status in the store\n          type: string\n          enum:\n            - available\n            - pending\n            - sold\n      required:\n        - name\n        - photoUrls\n      x-swagger-router-model: io.swagger.petstore.model.Pet\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: '##default'\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\n",
			"canonicalURL": "/github.com/thim81/openapi-format@3c846b424bd785238d30502cd2aaaf222fa722c0/-/blob/test/json-custom-yaml/output.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/thim81/openapi-format/blob/3c846b424bd785238d30502cd2aaaf222fa722c0/test/json-custom-yaml/output.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/pet\": put: requestBody: contents: media: \"application/x-www-form-urlencoded\": form parameter \"tags\": nested objects not allowed"
}