{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gonenduk/basejs"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "routes/api.yaml",
			"byteSize": 12863,
			"content": "openapi: 3.0.0\nservers:\n  - url: /api\ninfo:\n  title: basejs API\n  version: 0.0.1\n  description: Documentation of the RESTful API exposed by basejs\nsecurity:\n  - JWT: []\npaths:\n  /auth/token:\n    post:\n      tags:\n        - Authentication\n      summary: Create a JWT based on user credentials\n      security: []\n      operationId: loginWithCredentials\n      x-eov-operation-handler: auth\n      responses:\n        '200':\n          description: New generated JWT\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JWT'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - username\n                - password\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n                  format: password\n        description: User credentials\n        required: true\n    delete:\n      tags:\n        - Authentication\n      summary: Log out a user to invalidate existing refresh tokens\n      operationId: logout\n      x-eov-operation-handler: auth\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /auth/refresh/token:\n    post:\n      tags:\n        - Authentication\n      summary: Create a JWT based on a refresh token\n      security: []\n      operationId: loginWithRefreshToken\n      x-eov-operation-handler: auth\n      responses:\n        '200':\n          description: New generated JWT\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JWT'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - token\n              properties:\n                token:\n                  type: string\n        description: refresh token\n        required: true\n  /auth/social/token:\n    post:\n      tags:\n        - Authentication\n      summary: Create a JWT based on social provider token\n      security: []\n      operationId: loginWithSocialToken\n      x-eov-operation-handler: auth\n      responses:\n        '200':\n          description: New generated JWT\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JWT'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - provider\n                - token\n              properties:\n                provider:\n                  type: string\n                token:\n                  type: string\n        description: Social provider and its access token\n        required: true\n  /users:\n    get:\n      tags:\n        - Users\n      summary: Get all users\n      parameters:\n        - $ref: '#/components/parameters/filterParam'\n        - $ref: '#/components/parameters/sortParam'\n        - $ref: '#/components/parameters/skipParam'\n        - $ref: '#/components/parameters/limitParam'\n      operationId: getUsers\n      x-eov-operation-handler: users\n      responses:\n        '200':\n          description: Users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserList'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n    post:\n      tags:\n        - Users\n      summary: Create a user\n      security:\n        - {}\n        - JWT: []\n      operationId: createUser\n      x-eov-operation-handler: users\n      responses:\n        '201':\n          description: New user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/User'\n                - required:\n                  - username\n                  - email\n        description: User to create\n        required: true\n  /users/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idParam'\n    get:\n      tags:\n        - Users\n      summary: Get a user by id\n      operationId: getUser\n      x-eov-operation-handler: users\n      responses:\n        '200':\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n    patch:\n      tags:\n        - Users\n      summary: Update user fields by id\n      operationId: updateUser\n      x-eov-operation-handler: users\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: User fields to update\n        required: true\n  /users/{id}/role:\n    parameters:\n    - $ref: '#/components/parameters/idParam'\n    put:\n      tags:\n        - Users\n      summary: Set user role\n      operationId: updateUserRole\n      x-eov-operation-handler: users\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              enum:\n                - user\n                - moderator\n                - admin\n        description: New role\n        required: true\n  /profiles/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idParam'\n    get:\n      tags:\n        - Users\n      summary: Get a user profile by id\n      security:\n        - {}\n        - JWT: []\n      operationId: getProfile\n      x-eov-operation-handler: profiles\n      responses:\n        '200':\n          description: Profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /products:\n    get:\n      tags:\n        - Products\n      summary: Get all products\n      security:\n        - {}\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/filterParam'\n        - $ref: '#/components/parameters/sortParam'\n        - $ref: '#/components/parameters/skipParam'\n        - $ref: '#/components/parameters/limitParam'\n      operationId: getProducts\n      x-eov-operation-handler: products\n      responses:\n        '200':\n          description: Products\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductList'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n    post:\n      tags:\n        - Products\n      summary: Create a product\n      operationId: createProduct\n      x-eov-operation-handler: products\n      responses:\n        '201':\n          description: New product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/Product'\n                - required:\n                  - title\n        description: Product to create\n        required: true\n  /products/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idParam'\n    get:\n      tags:\n        - Products\n      summary: Get a product by id\n      security:\n        - {}\n        - JWT: []\n      operationId: getProduct\n      x-eov-operation-handler: products\n      responses:\n        '200':\n          description: Product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n    patch:\n      tags:\n        - Products\n      summary: Update product fields by id\n      operationId: updateProduct\n      x-eov-operation-handler: products\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Product'\n        description: Product fields to update\n        required: true\n    delete:\n      tags:\n        - Products\n      summary: Delete a product by id\n      operationId: deleteProduct\n      x-eov-operation-handler: products\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /products/{id}/owner:\n    parameters:\n      - $ref: '#/components/parameters/idParam'\n    put:\n      tags:\n        - Products\n      summary: Replace owner of product\n      operationId: updateProductOwner\n      x-eov-operation-handler: products\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContentResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: New owner id\n        required: true\ntags: []\ncomponents:\n  responses:\n    NoContentResponse:\n      description: OK\n    ErrorResponse:\n      description: Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  parameters:\n    idParam:\n      name: id\n      in: path\n      description: id of item\n      required: true\n      schema:\n        type: string\n    filterParam:\n      name: filter\n      in: query\n      description: 'Filter by { \"field\": \"value\", ... }'\n      schema:\n        type: string\n    sortParam:\n      name: sort\n      in: query\n      description: 'Sort by { \"field\": \"asc/desc\", \"field\": 1/-1, ... }'\n      schema:\n        type: string\n    skipParam:\n      name: skip\n      in: query\n      description: Number of items to skip\n      schema:\n        type: integer\n        minimum: 0\n    limitParam:\n      name: limit\n      in: query\n      description: Number of items to return (1 - 100, default is 20)\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 20\n  securitySchemes:\n    JWT:\n      type: http\n      scheme: bearer\n      bearerFormat: Bearer\n  schemas:\n    User:\n      type: object\n      properties:\n        _id:\n          type: string\n          readOnly: true\n        username:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n          format: password\n          writeOnly: true\n        role:\n          type: string\n          enum:\n            - user\n            - moderator\n            - admin\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        logoutAt:\n          type: string\n          format: date-time\n          readOnly: true\n    UserList:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    Profile:\n      type: object\n      properties:\n        _id:\n          type: string\n        username:\n          type: string\n    Product:\n      type: object\n      properties:\n        _id:\n          type: string\n          readOnly: true\n        title:\n          type: string\n        price:\n          type: number\n        ownerId:\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n    ProductList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Product'\n    Error:\n      type: object\n      required:\n        - statusCode\n      properties:\n        statusCode:\n          type: integer\n        error:\n          type: string\n        message:\n          type: string\n    JWT:\n      type: object\n      properties:\n        access_token:\n          type: string\n        refresh_token:\n          type: string\n"
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/JWT\" name conflict: \"JWT\"",
	"NotImplemented": [
		"allOf",
		"unsupported content types"
	]
}